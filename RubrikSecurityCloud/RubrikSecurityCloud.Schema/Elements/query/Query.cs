// Query.cs
//
// This generated file is part of the Rubrik PowerShell SDK.
// Manual changes to this file may be lost.

#nullable enable
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RubrikSecurityCloud;

namespace RubrikSecurityCloud.Types
{
    #region Query
    public class Query
    {
        #region members
        //      C# -> List<Operation>? AllAllowedOrgAdminOperations
        // GraphQL -> allAllowedOrgAdminOperations: [Operation!]! (enum)
        public static string AllAllowedOrgAdminOperations_TypedFieldSpec(List<Operation> fieldSpec)
        {
            string args = "";
            return "allAllowedOrgAdminOperations" + args + "\n";
        }
        public static string AllAllowedOrgAdminOperations_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAllowedOrgAdminOperations((List<Operation>)fieldSpecObj);
        }
        public static string AllAllowedOrgAdminOperations(List<Operation> fieldSpec)
        {
            return AllAllowedOrgAdminOperations_TypedFieldSpec(fieldSpec);
        }
        public static string AllAllowedOrgAdminOperations(object fieldSpecObj)
        {
            return AllAllowedOrgAdminOperations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAllowedOrgAdminOperationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<Operation>() ;
        }

        //      C# -> List<Operation>? AllAuthorizationsForGlobalResource
        // GraphQL -> allAuthorizationsForGlobalResource: [Operation!]! (enum)
        public static string AllAuthorizationsForGlobalResource_TypedFieldSpec(List<Operation> fieldSpec)
        {
            string args = "";
            return "allAuthorizationsForGlobalResource" + args + "\n";
        }
        public static string AllAuthorizationsForGlobalResource_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAuthorizationsForGlobalResource((List<Operation>)fieldSpecObj);
        }
        public static string AllAuthorizationsForGlobalResource(List<Operation> fieldSpec)
        {
            return AllAuthorizationsForGlobalResource_TypedFieldSpec(fieldSpec);
        }
        public static string AllAuthorizationsForGlobalResource(object fieldSpecObj)
        {
            return AllAuthorizationsForGlobalResource_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAuthorizationsForGlobalResourceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<Operation>() ;
        }

        //      C# -> List<Operation>? AllAuthorizationsForObject
        // GraphQL -> allAuthorizationsForObject: [Operation!]! (enum)
        public static string AllAuthorizationsForObject_TypedFieldSpec(List<Operation> fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "allAuthorizationsForObject" + args + "\n";
        }
        public static string AllAuthorizationsForObject_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAuthorizationsForObject((List<Operation>)fieldSpecObj);
        }
        public static string AllAuthorizationsForObject(List<Operation> fieldSpec)
        {
            return AllAuthorizationsForObject_TypedFieldSpec(fieldSpec);
        }
        public static string AllAuthorizationsForObject(object fieldSpecObj)
        {
            return AllAuthorizationsForObject_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAuthorizationsForObjectFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<Operation>() ;
        }

        //      C# -> List<AwsCloudAccountRegion>? AllAwsRegions
        // GraphQL -> allAwsRegions: [AwsCloudAccountRegion!]! (enum)
        public static string AllAwsRegions_TypedFieldSpec(List<AwsCloudAccountRegion> fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\n)";
            return "allAwsRegions" + args + "\n";
        }
        public static string AllAwsRegions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAwsRegions((List<AwsCloudAccountRegion>)fieldSpecObj);
        }
        public static string AllAwsRegions(List<AwsCloudAccountRegion> fieldSpec)
        {
            return AllAwsRegions_TypedFieldSpec(fieldSpec);
        }
        public static string AllAwsRegions(object fieldSpecObj)
        {
            return AllAwsRegions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAwsRegionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<AwsCloudAccountRegion>() ;
        }

        //      C# -> List<AzureCloudAccountRegion>? AllAzureRegions
        // GraphQL -> allAzureRegions: [AzureCloudAccountRegion!]! (enum)
        public static string AllAzureRegions_TypedFieldSpec(List<AzureCloudAccountRegion> fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\n)";
            return "allAzureRegions" + args + "\n";
        }
        public static string AllAzureRegions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureRegions((List<AzureCloudAccountRegion>)fieldSpecObj);
        }
        public static string AllAzureRegions(List<AzureCloudAccountRegion> fieldSpec)
        {
            return AllAzureRegions_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureRegions(object fieldSpecObj)
        {
            return AllAzureRegions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureRegionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<AzureCloudAccountRegion>() ;
        }

        //      C# -> List<InventoryCard>? AllInventoryWorkloads
        // GraphQL -> allInventoryWorkloads: [InventoryCard!]! (enum)
        public static string AllInventoryWorkloads_TypedFieldSpec(List<InventoryCard> fieldSpec)
        {
            string args = "";
            return "allInventoryWorkloads" + args + "\n";
        }
        public static string AllInventoryWorkloads_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllInventoryWorkloads((List<InventoryCard>)fieldSpecObj);
        }
        public static string AllInventoryWorkloads(List<InventoryCard> fieldSpec)
        {
            return AllInventoryWorkloads_TypedFieldSpec(fieldSpec);
        }
        public static string AllInventoryWorkloads(object fieldSpecObj)
        {
            return AllInventoryWorkloads_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllInventoryWorkloadsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<InventoryCard>() ;
        }

        //      C# -> List<ManagedObjectType>? AllUnmanagedObjectsSupportedTypes
        // GraphQL -> allUnmanagedObjectsSupportedTypes: [ManagedObjectType!]! (enum)
        public static string AllUnmanagedObjectsSupportedTypes_TypedFieldSpec(List<ManagedObjectType> fieldSpec)
        {
            string args = "\n(\nproductType: $productType\n)";
            return "allUnmanagedObjectsSupportedTypes" + args + "\n";
        }
        public static string AllUnmanagedObjectsSupportedTypes_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllUnmanagedObjectsSupportedTypes((List<ManagedObjectType>)fieldSpecObj);
        }
        public static string AllUnmanagedObjectsSupportedTypes(List<ManagedObjectType> fieldSpec)
        {
            return AllUnmanagedObjectsSupportedTypes_TypedFieldSpec(fieldSpec);
        }
        public static string AllUnmanagedObjectsSupportedTypes(object fieldSpecObj)
        {
            return AllUnmanagedObjectsSupportedTypes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllUnmanagedObjectsSupportedTypesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<ManagedObjectType>() ;
        }

        //      C# -> TenantAuthDomainConfig? CurrentOrgAuthDomainConfig
        // GraphQL -> currentOrgAuthDomainConfig: TenantAuthDomainConfig! (enum)
        public static string CurrentOrgAuthDomainConfig_TypedFieldSpec(TenantAuthDomainConfig fieldSpec)
        {
            string args = "";
            return "currentOrgAuthDomainConfig" + args + "\n";
        }
        public static string CurrentOrgAuthDomainConfig_ObjectFieldSpec(object fieldSpecObj)
        {
            return CurrentOrgAuthDomainConfig((TenantAuthDomainConfig)fieldSpecObj);
        }
        public static string CurrentOrgAuthDomainConfig(TenantAuthDomainConfig fieldSpec)
        {
            return CurrentOrgAuthDomainConfig_TypedFieldSpec(fieldSpec);
        }
        public static string CurrentOrgAuthDomainConfig(object fieldSpecObj)
        {
            return CurrentOrgAuthDomainConfig_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CurrentOrgAuthDomainConfigFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new TenantAuthDomainConfig() ;
        }

        //      C# -> List<CloudAccount>? AllCloudAccounts
        // GraphQL -> allCloudAccounts: [CloudAccount!]! (interface)
        public static string AllCloudAccounts_TypedFieldSpec(List<CloudAccount> fieldSpec)
        {
            string args = "\n(\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nfeatures: $features\n)";
            return "allCloudAccounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCloudAccounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudAccounts((List<CloudAccount>)fieldSpecObj);
        }
        public static string AllCloudAccounts(List<CloudAccount> fieldSpec)
        {
            return AllCloudAccounts_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudAccounts(object fieldSpecObj)
        {
            return AllCloudAccounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudAccountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CloudAccount>();
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<SlaDomain>? AllSlaSummariesByIds
        // GraphQL -> allSlaSummariesByIds: [SlaDomain!]! (interface)
        public static string AllSlaSummariesByIds_TypedFieldSpec(List<SlaDomain> fieldSpec)
        {
            string args = "\n(\nslaIds: $slaIds\n)";
            return "allSlaSummariesByIds" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllSlaSummariesByIds_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllSlaSummariesByIds((List<SlaDomain>)fieldSpecObj);
        }
        public static string AllSlaSummariesByIds(List<SlaDomain> fieldSpec)
        {
            return AllSlaSummariesByIds_TypedFieldSpec(fieldSpec);
        }
        public static string AllSlaSummariesByIds(object fieldSpecObj)
        {
            return AllSlaSummariesByIds_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllSlaSummariesByIdsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<SlaDomain>();
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<Target>? AllTargets
        // GraphQL -> allTargets: [Target!]! (interface)
        public static string AllTargets_TypedFieldSpec(List<Target> fieldSpec)
        {
            string args = "\n(\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\ncontextFilter: $contextFilter\n)";
            return "allTargets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllTargets_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllTargets((List<Target>)fieldSpecObj);
        }
        public static string AllTargets(List<Target> fieldSpec)
        {
            return AllTargets_TypedFieldSpec(fieldSpec);
        }
        public static string AllTargets(object fieldSpecObj)
        {
            return AllTargets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllTargetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<Target>();
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmHierarchySnappableNew? CdmHierarchySnappableNew
        // GraphQL -> cdmHierarchySnappableNew: CdmHierarchySnappableNew! (interface)
        public static string CdmHierarchySnappableNew_TypedFieldSpec(CdmHierarchySnappableNew fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "cdmHierarchySnappableNew" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CdmHierarchySnappableNew_ObjectFieldSpec(object fieldSpecObj)
        {
            return CdmHierarchySnappableNew((CdmHierarchySnappableNew)fieldSpecObj);
        }
        public static string CdmHierarchySnappableNew(CdmHierarchySnappableNew fieldSpec)
        {
            return CdmHierarchySnappableNew_TypedFieldSpec(fieldSpec);
        }
        public static string CdmHierarchySnappableNew(object fieldSpecObj)
        {
            return CdmHierarchySnappableNew_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CdmHierarchySnappableNewFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var list = new List<CdmHierarchySnappableNew>();
            list.ApplyExploratoryFieldSpec(ec);
            var fieldSpecObj = (CdmHierarchySnappableNew)InterfaceHelper.MakeCompositeFromList(list);
            if (fieldSpecObj == null) {
                throw new InvalidOperationException("Could not create CdmHierarchySnappableNew composite object");
            }
            return fieldSpecObj;
        }

        //      C# -> List<CdmHierarchySnappableNew>? CdmHierarchySnappablesNew
        // GraphQL -> cdmHierarchySnappablesNew: [CdmHierarchySnappableNew!]! (interface)
        public static string CdmHierarchySnappablesNew_TypedFieldSpec(List<CdmHierarchySnappableNew> fieldSpec)
        {
            string args = "\n(\nfids: $fids\n)";
            return "cdmHierarchySnappablesNew" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CdmHierarchySnappablesNew_ObjectFieldSpec(object fieldSpecObj)
        {
            return CdmHierarchySnappablesNew((List<CdmHierarchySnappableNew>)fieldSpecObj);
        }
        public static string CdmHierarchySnappablesNew(List<CdmHierarchySnappableNew> fieldSpec)
        {
            return CdmHierarchySnappablesNew_TypedFieldSpec(fieldSpec);
        }
        public static string CdmHierarchySnappablesNew(object fieldSpecObj)
        {
            return CdmHierarchySnappablesNew_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CdmHierarchySnappablesNewFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CdmHierarchySnappableNew>();
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CloudAccount? CloudAccount
        // GraphQL -> cloudAccount: CloudAccount! (interface)
        public static string CloudAccount_TypedFieldSpec(CloudAccount fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\n)";
            return "cloudAccount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudAccount((CloudAccount)fieldSpecObj);
        }
        public static string CloudAccount(CloudAccount fieldSpec)
        {
            return CloudAccount_TypedFieldSpec(fieldSpec);
        }
        public static string CloudAccount(object fieldSpecObj)
        {
            return CloudAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var list = new List<CloudAccount>();
            list.ApplyExploratoryFieldSpec(ec);
            var fieldSpecObj = (CloudAccount)InterfaceHelper.MakeCompositeFromList(list);
            if (fieldSpecObj == null) {
                throw new InvalidOperationException("Could not create CloudAccount composite object");
            }
            return fieldSpecObj;
        }

        //      C# -> HierarchyObject? HierarchyObject
        // GraphQL -> hierarchyObject: HierarchyObject! (interface)
        public static string HierarchyObject_TypedFieldSpec(HierarchyObject fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "hierarchyObject" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HierarchyObject_ObjectFieldSpec(object fieldSpecObj)
        {
            return HierarchyObject((HierarchyObject)fieldSpecObj);
        }
        public static string HierarchyObject(HierarchyObject fieldSpec)
        {
            return HierarchyObject_TypedFieldSpec(fieldSpec);
        }
        public static string HierarchyObject(object fieldSpecObj)
        {
            return HierarchyObject_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HierarchyObjectFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var list = new List<HierarchyObject>();
            list.ApplyExploratoryFieldSpec(ec);
            var fieldSpecObj = (HierarchyObject)InterfaceHelper.MakeCompositeFromList(list);
            if (fieldSpecObj == null) {
                throw new InvalidOperationException("Could not create HierarchyObject composite object");
            }
            return fieldSpecObj;
        }

        //      C# -> HierarchyObject? HierarchyObjectRecoveryTarget
        // GraphQL -> hierarchyObjectRecoveryTarget: HierarchyObject! (interface)
        public static string HierarchyObjectRecoveryTarget_TypedFieldSpec(HierarchyObject fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "hierarchyObjectRecoveryTarget" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HierarchyObjectRecoveryTarget_ObjectFieldSpec(object fieldSpecObj)
        {
            return HierarchyObjectRecoveryTarget((HierarchyObject)fieldSpecObj);
        }
        public static string HierarchyObjectRecoveryTarget(HierarchyObject fieldSpec)
        {
            return HierarchyObjectRecoveryTarget_TypedFieldSpec(fieldSpec);
        }
        public static string HierarchyObjectRecoveryTarget(object fieldSpecObj)
        {
            return HierarchyObjectRecoveryTarget_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HierarchyObjectRecoveryTargetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var list = new List<HierarchyObject>();
            list.ApplyExploratoryFieldSpec(ec);
            var fieldSpecObj = (HierarchyObject)InterfaceHelper.MakeCompositeFromList(list);
            if (fieldSpecObj == null) {
                throw new InvalidOperationException("Could not create HierarchyObject composite object");
            }
            return fieldSpecObj;
        }

        //      C# -> List<HierarchyObject>? HierarchyObjects
        // GraphQL -> hierarchyObjects: [HierarchyObject!]! (interface)
        public static string HierarchyObjects_TypedFieldSpec(List<HierarchyObject> fieldSpec)
        {
            string args = "\n(\nfids: $fids\nfilter: $filter\n)";
            return "hierarchyObjects" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HierarchyObjects_ObjectFieldSpec(object fieldSpecObj)
        {
            return HierarchyObjects((List<HierarchyObject>)fieldSpecObj);
        }
        public static string HierarchyObjects(List<HierarchyObject> fieldSpec)
        {
            return HierarchyObjects_TypedFieldSpec(fieldSpec);
        }
        public static string HierarchyObjects(object fieldSpecObj)
        {
            return HierarchyObjects_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HierarchyObjectsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<HierarchyObject>();
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<HierarchyObject>? SlaConflictObjects
        // GraphQL -> slaConflictObjects: [HierarchyObject!]! (interface)
        public static string SlaConflictObjects_TypedFieldSpec(List<HierarchyObject> fieldSpec)
        {
            string args = "\n(\nfids: $fids\n)";
            return "slaConflictObjects" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SlaConflictObjects_ObjectFieldSpec(object fieldSpecObj)
        {
            return SlaConflictObjects((List<HierarchyObject>)fieldSpecObj);
        }
        public static string SlaConflictObjects(List<HierarchyObject> fieldSpec)
        {
            return SlaConflictObjects_TypedFieldSpec(fieldSpec);
        }
        public static string SlaConflictObjects(object fieldSpecObj)
        {
            return SlaConflictObjects_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SlaConflictObjectsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<HierarchyObject>();
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SlaDomain? SlaDomain
        // GraphQL -> slaDomain: SlaDomain! (interface)
        public static string SlaDomain_TypedFieldSpec(SlaDomain fieldSpec)
        {
            string args = "\n(\nid: $id\nshouldShowSyncStatus: $shouldShowSyncStatus\nshouldShowUpgradeInfo: $shouldShowUpgradeInfo\nshouldShowPausedClusters: $shouldShowPausedClusters\n)";
            return "slaDomain" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SlaDomain_ObjectFieldSpec(object fieldSpecObj)
        {
            return SlaDomain((SlaDomain)fieldSpecObj);
        }
        public static string SlaDomain(SlaDomain fieldSpec)
        {
            return SlaDomain_TypedFieldSpec(fieldSpec);
        }
        public static string SlaDomain(object fieldSpecObj)
        {
            return SlaDomain_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SlaDomainFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var list = new List<SlaDomain>();
            list.ApplyExploratoryFieldSpec(ec);
            var fieldSpecObj = (SlaDomain)InterfaceHelper.MakeCompositeFromList(list);
            if (fieldSpecObj == null) {
                throw new InvalidOperationException("Could not create SlaDomain composite object");
            }
            return fieldSpecObj;
        }

        //      C# -> Target? Target
        // GraphQL -> target: Target! (interface)
        public static string Target_TypedFieldSpec(Target fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "target" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Target_ObjectFieldSpec(object fieldSpecObj)
        {
            return Target((Target)fieldSpecObj);
        }
        public static string Target(Target fieldSpec)
        {
            return Target_TypedFieldSpec(fieldSpec);
        }
        public static string Target(object fieldSpecObj)
        {
            return Target_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TargetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var list = new List<Target>();
            list.ApplyExploratoryFieldSpec(ec);
            var fieldSpecObj = (Target)InterfaceHelper.MakeCompositeFromList(list);
            if (fieldSpecObj == null) {
                throw new InvalidOperationException("Could not create Target composite object");
            }
            return fieldSpecObj;
        }

        //      C# -> System.String? AccountId
        // GraphQL -> accountId: String! (scalar)
        public static string AccountId_TypedFieldSpec(System.String fieldSpec)
        {
            string args = "";
            return "accountId" + args + "\n";
        }
        public static string AccountId_ObjectFieldSpec(object fieldSpecObj)
        {
            return AccountId((System.String)fieldSpecObj);
        }
        public static string AccountId(System.String fieldSpec)
        {
            return AccountId_TypedFieldSpec(fieldSpec);
        }
        public static string AccountId(object fieldSpecObj)
        {
            return AccountId_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AccountIdFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return "FETCH" ;
        }

        //      C# -> List<System.String>? AllAvailabilityZonesByRegionFromAws
        // GraphQL -> allAvailabilityZonesByRegionFromAws: [String!]! (scalar)
        public static string AllAvailabilityZonesByRegionFromAws_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\n)";
            return "allAvailabilityZonesByRegionFromAws" + args + "\n";
        }
        public static string AllAvailabilityZonesByRegionFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAvailabilityZonesByRegionFromAws((List<System.String>)fieldSpecObj);
        }
        public static string AllAvailabilityZonesByRegionFromAws(List<System.String> fieldSpec)
        {
            return AllAvailabilityZonesByRegionFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllAvailabilityZonesByRegionFromAws(object fieldSpecObj)
        {
            return AllAvailabilityZonesByRegionFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAvailabilityZonesByRegionFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllAwsInstanceProfileNames
        // GraphQL -> allAwsInstanceProfileNames: [String!]! (scalar)
        public static string AllAwsInstanceProfileNames_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\nregion: $region\n)";
            return "allAwsInstanceProfileNames" + args + "\n";
        }
        public static string AllAwsInstanceProfileNames_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAwsInstanceProfileNames((List<System.String>)fieldSpecObj);
        }
        public static string AllAwsInstanceProfileNames(List<System.String> fieldSpec)
        {
            return AllAwsInstanceProfileNames_TypedFieldSpec(fieldSpec);
        }
        public static string AllAwsInstanceProfileNames(object fieldSpecObj)
        {
            return AllAwsInstanceProfileNames_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAwsInstanceProfileNamesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllAzureNativeVirtualMachineSizes
        // GraphQL -> allAzureNativeVirtualMachineSizes: [String!]! (scalar)
        public static string AllAzureNativeVirtualMachineSizes_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\n)";
            return "allAzureNativeVirtualMachineSizes" + args + "\n";
        }
        public static string AllAzureNativeVirtualMachineSizes_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeVirtualMachineSizes((List<System.String>)fieldSpecObj);
        }
        public static string AllAzureNativeVirtualMachineSizes(List<System.String> fieldSpec)
        {
            return AllAzureNativeVirtualMachineSizes_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeVirtualMachineSizes(object fieldSpecObj)
        {
            return AllAzureNativeVirtualMachineSizes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeVirtualMachineSizesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllAzureNsgs
        // GraphQL -> allAzureNsgs: [String!]! (scalar)
        public static string AllAzureNsgs_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nnsgRequest: $nsgRequest\n)";
            return "allAzureNsgs" + args + "\n";
        }
        public static string AllAzureNsgs_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNsgs((List<System.String>)fieldSpecObj);
        }
        public static string AllAzureNsgs(List<System.String> fieldSpec)
        {
            return AllAzureNsgs_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNsgs(object fieldSpecObj)
        {
            return AllAzureNsgs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNsgsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllAzureResourceGroups
        // GraphQL -> allAzureResourceGroups: [String!]! (scalar)
        public static string AllAzureResourceGroups_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\nazureRegion: $azureRegion\n)";
            return "allAzureResourceGroups" + args + "\n";
        }
        public static string AllAzureResourceGroups_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureResourceGroups((List<System.String>)fieldSpecObj);
        }
        public static string AllAzureResourceGroups(List<System.String> fieldSpec)
        {
            return AllAzureResourceGroups_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureResourceGroups(object fieldSpecObj)
        {
            return AllAzureResourceGroups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureResourceGroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllAzureStorageAccounts
        // GraphQL -> allAzureStorageAccounts: [String!]! (scalar)
        public static string AllAzureStorageAccounts_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nstorageAccountsRequest: $storageAccountsRequest\n)";
            return "allAzureStorageAccounts" + args + "\n";
        }
        public static string AllAzureStorageAccounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureStorageAccounts((List<System.String>)fieldSpecObj);
        }
        public static string AllAzureStorageAccounts(List<System.String> fieldSpec)
        {
            return AllAzureStorageAccounts_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureStorageAccounts(object fieldSpecObj)
        {
            return AllAzureStorageAccounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureStorageAccountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllAzureSubnets
        // GraphQL -> allAzureSubnets: [String!]! (scalar)
        public static string AllAzureSubnets_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nsubnetRequest: $subnetRequest\n)";
            return "allAzureSubnets" + args + "\n";
        }
        public static string AllAzureSubnets_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureSubnets((List<System.String>)fieldSpecObj);
        }
        public static string AllAzureSubnets(List<System.String> fieldSpec)
        {
            return AllAzureSubnets_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureSubnets(object fieldSpecObj)
        {
            return AllAzureSubnets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureSubnetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllAzureVnets
        // GraphQL -> allAzureVnets: [String!]! (scalar)
        public static string AllAzureVnets_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nvnetRequest: $vnetRequest\n)";
            return "allAzureVnets" + args + "\n";
        }
        public static string AllAzureVnets_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureVnets((List<System.String>)fieldSpecObj);
        }
        public static string AllAzureVnets(List<System.String> fieldSpec)
        {
            return AllAzureVnets_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureVnets(object fieldSpecObj)
        {
            return AllAzureVnets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureVnetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllCloudNativeFileRecoveryEligibleSnapshots
        // GraphQL -> allCloudNativeFileRecoveryEligibleSnapshots: [String!]! (scalar)
        public static string AllCloudNativeFileRecoveryEligibleSnapshots_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nworkloadId: $workloadId\n)";
            return "allCloudNativeFileRecoveryEligibleSnapshots" + args + "\n";
        }
        public static string AllCloudNativeFileRecoveryEligibleSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudNativeFileRecoveryEligibleSnapshots((List<System.String>)fieldSpecObj);
        }
        public static string AllCloudNativeFileRecoveryEligibleSnapshots(List<System.String> fieldSpec)
        {
            return AllCloudNativeFileRecoveryEligibleSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudNativeFileRecoveryEligibleSnapshots(object fieldSpecObj)
        {
            return AllCloudNativeFileRecoveryEligibleSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudNativeFileRecoveryEligibleSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllCloudNativeLabelKeys
        // GraphQL -> allCloudNativeLabelKeys: [String!]! (scalar)
        public static string AllCloudNativeLabelKeys_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nkeySubStr: $keySubStr\nlimit: $limit\nobjectType: $objectType\n)";
            return "allCloudNativeLabelKeys" + args + "\n";
        }
        public static string AllCloudNativeLabelKeys_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudNativeLabelKeys((List<System.String>)fieldSpecObj);
        }
        public static string AllCloudNativeLabelKeys(List<System.String> fieldSpec)
        {
            return AllCloudNativeLabelKeys_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudNativeLabelKeys(object fieldSpecObj)
        {
            return AllCloudNativeLabelKeys_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudNativeLabelKeysFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllCloudNativeLabelValues
        // GraphQL -> allCloudNativeLabelValues: [String!]! (scalar)
        public static string AllCloudNativeLabelValues_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nvalueSubStr: $valueSubStr\nkey: $key\nlimit: $limit\nobjectType: $objectType\n)";
            return "allCloudNativeLabelValues" + args + "\n";
        }
        public static string AllCloudNativeLabelValues_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudNativeLabelValues((List<System.String>)fieldSpecObj);
        }
        public static string AllCloudNativeLabelValues(List<System.String> fieldSpec)
        {
            return AllCloudNativeLabelValues_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudNativeLabelValues(object fieldSpecObj)
        {
            return AllCloudNativeLabelValues_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudNativeLabelValuesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllCloudNativeTagKeys
        // GraphQL -> allCloudNativeTagKeys: [String!]! (scalar)
        public static string AllCloudNativeTagKeys_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nkeySubStr: $keySubStr\nlimit: $limit\nobjectType: $objectType\n)";
            return "allCloudNativeTagKeys" + args + "\n";
        }
        public static string AllCloudNativeTagKeys_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudNativeTagKeys((List<System.String>)fieldSpecObj);
        }
        public static string AllCloudNativeTagKeys(List<System.String> fieldSpec)
        {
            return AllCloudNativeTagKeys_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudNativeTagKeys(object fieldSpecObj)
        {
            return AllCloudNativeTagKeys_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudNativeTagKeysFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllCloudNativeTagValues
        // GraphQL -> allCloudNativeTagValues: [String!]! (scalar)
        public static string AllCloudNativeTagValues_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nvalueSubStr: $valueSubStr\nkey: $key\nlimit: $limit\nobjectType: $objectType\n)";
            return "allCloudNativeTagValues" + args + "\n";
        }
        public static string AllCloudNativeTagValues_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudNativeTagValues((List<System.String>)fieldSpecObj);
        }
        public static string AllCloudNativeTagValues(List<System.String> fieldSpec)
        {
            return AllCloudNativeTagValues_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudNativeTagValues(object fieldSpecObj)
        {
            return AllCloudNativeTagValues_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudNativeTagValuesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.Boolean>? AllClustersTotpAckStatus
        // GraphQL -> allClustersTotpAckStatus: [Boolean!]! (scalar)
        public static string AllClustersTotpAckStatus_TypedFieldSpec(List<System.Boolean> fieldSpec)
        {
            string args = "\n(\nlistClusterUuid: $listClusterUuid\n)";
            return "allClustersTotpAckStatus" + args + "\n";
        }
        public static string AllClustersTotpAckStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllClustersTotpAckStatus((List<System.Boolean>)fieldSpecObj);
        }
        public static string AllClustersTotpAckStatus(List<System.Boolean> fieldSpec)
        {
            return AllClustersTotpAckStatus_TypedFieldSpec(fieldSpec);
        }
        public static string AllClustersTotpAckStatus(object fieldSpecObj)
        {
            return AllClustersTotpAckStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllClustersTotpAckStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.Boolean>() ;
        }

        //      C# -> List<System.String>? AllDeploymentIpAddresses
        // GraphQL -> allDeploymentIpAddresses: [String!]! (scalar)
        public static string AllDeploymentIpAddresses_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "";
            return "allDeploymentIpAddresses" + args + "\n";
        }
        public static string AllDeploymentIpAddresses_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllDeploymentIpAddresses((List<System.String>)fieldSpecObj);
        }
        public static string AllDeploymentIpAddresses(List<System.String> fieldSpec)
        {
            return AllDeploymentIpAddresses_TypedFieldSpec(fieldSpec);
        }
        public static string AllDeploymentIpAddresses(object fieldSpecObj)
        {
            return AllDeploymentIpAddresses_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllDeploymentIpAddressesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllEc2KeyPairsByRegionFromAws
        // GraphQL -> allEc2KeyPairsByRegionFromAws: [String!]! (scalar)
        public static string AllEc2KeyPairsByRegionFromAws_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\n)";
            return "allEc2KeyPairsByRegionFromAws" + args + "\n";
        }
        public static string AllEc2KeyPairsByRegionFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllEc2KeyPairsByRegionFromAws((List<System.String>)fieldSpecObj);
        }
        public static string AllEc2KeyPairsByRegionFromAws(List<System.String> fieldSpec)
        {
            return AllEc2KeyPairsByRegionFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllEc2KeyPairsByRegionFromAws(object fieldSpecObj)
        {
            return AllEc2KeyPairsByRegionFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllEc2KeyPairsByRegionFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllGcpNativeCompatibleMachineTypes
        // GraphQL -> allGcpNativeCompatibleMachineTypes: [String!]! (scalar)
        public static string AllGcpNativeCompatibleMachineTypes_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\ntargetZone: $targetZone\nsnapshotId: $snapshotId\n)";
            return "allGcpNativeCompatibleMachineTypes" + args + "\n";
        }
        public static string AllGcpNativeCompatibleMachineTypes_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeCompatibleMachineTypes((List<System.String>)fieldSpecObj);
        }
        public static string AllGcpNativeCompatibleMachineTypes(List<System.String> fieldSpec)
        {
            return AllGcpNativeCompatibleMachineTypes_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeCompatibleMachineTypes(object fieldSpecObj)
        {
            return AllGcpNativeCompatibleMachineTypes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeCompatibleMachineTypesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllGcpNativeStoredMachineTypes
        // GraphQL -> allGcpNativeStoredMachineTypes: [String!]! (scalar)
        public static string AllGcpNativeStoredMachineTypes_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "";
            return "allGcpNativeStoredMachineTypes" + args + "\n";
        }
        public static string AllGcpNativeStoredMachineTypes_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeStoredMachineTypes((List<System.String>)fieldSpecObj);
        }
        public static string AllGcpNativeStoredMachineTypes(List<System.String> fieldSpec)
        {
            return AllGcpNativeStoredMachineTypes_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeStoredMachineTypes(object fieldSpecObj)
        {
            return AllGcpNativeStoredMachineTypes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeStoredMachineTypesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllGcpNativeStoredMachineTypesInProject
        // GraphQL -> allGcpNativeStoredMachineTypesInProject: [String!]! (scalar)
        public static string AllGcpNativeStoredMachineTypesInProject_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nprojectId: $projectId\n)";
            return "allGcpNativeStoredMachineTypesInProject" + args + "\n";
        }
        public static string AllGcpNativeStoredMachineTypesInProject_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeStoredMachineTypesInProject((List<System.String>)fieldSpecObj);
        }
        public static string AllGcpNativeStoredMachineTypesInProject(List<System.String> fieldSpec)
        {
            return AllGcpNativeStoredMachineTypesInProject_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeStoredMachineTypesInProject(object fieldSpecObj)
        {
            return AllGcpNativeStoredMachineTypesInProject_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeStoredMachineTypesInProjectFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllGcpNativeStoredNetworkNames
        // GraphQL -> allGcpNativeStoredNetworkNames: [String!]! (scalar)
        public static string AllGcpNativeStoredNetworkNames_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "";
            return "allGcpNativeStoredNetworkNames" + args + "\n";
        }
        public static string AllGcpNativeStoredNetworkNames_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeStoredNetworkNames((List<System.String>)fieldSpecObj);
        }
        public static string AllGcpNativeStoredNetworkNames(List<System.String> fieldSpec)
        {
            return AllGcpNativeStoredNetworkNames_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeStoredNetworkNames(object fieldSpecObj)
        {
            return AllGcpNativeStoredNetworkNames_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeStoredNetworkNamesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllGcpNativeStoredNetworkNamesInProject
        // GraphQL -> allGcpNativeStoredNetworkNamesInProject: [String!]! (scalar)
        public static string AllGcpNativeStoredNetworkNamesInProject_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nprojectId: $projectId\n)";
            return "allGcpNativeStoredNetworkNamesInProject" + args + "\n";
        }
        public static string AllGcpNativeStoredNetworkNamesInProject_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeStoredNetworkNamesInProject((List<System.String>)fieldSpecObj);
        }
        public static string AllGcpNativeStoredNetworkNamesInProject(List<System.String> fieldSpec)
        {
            return AllGcpNativeStoredNetworkNamesInProject_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeStoredNetworkNamesInProject(object fieldSpecObj)
        {
            return AllGcpNativeStoredNetworkNamesInProject_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeStoredNetworkNamesInProjectFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllGcpNativeStoredRegions
        // GraphQL -> allGcpNativeStoredRegions: [String!]! (scalar)
        public static string AllGcpNativeStoredRegions_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "";
            return "allGcpNativeStoredRegions" + args + "\n";
        }
        public static string AllGcpNativeStoredRegions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeStoredRegions((List<System.String>)fieldSpecObj);
        }
        public static string AllGcpNativeStoredRegions(List<System.String> fieldSpec)
        {
            return AllGcpNativeStoredRegions_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeStoredRegions(object fieldSpecObj)
        {
            return AllGcpNativeStoredRegions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeStoredRegionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllGcpNativeStoredRegionsInProject
        // GraphQL -> allGcpNativeStoredRegionsInProject: [String!]! (scalar)
        public static string AllGcpNativeStoredRegionsInProject_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nprojectId: $projectId\n)";
            return "allGcpNativeStoredRegionsInProject" + args + "\n";
        }
        public static string AllGcpNativeStoredRegionsInProject_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeStoredRegionsInProject((List<System.String>)fieldSpecObj);
        }
        public static string AllGcpNativeStoredRegionsInProject(List<System.String> fieldSpec)
        {
            return AllGcpNativeStoredRegionsInProject_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeStoredRegionsInProject(object fieldSpecObj)
        {
            return AllGcpNativeStoredRegionsInProject_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeStoredRegionsInProjectFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllIssuesJobIds
        // GraphQL -> allIssuesJobIds: [String!]! (scalar)
        public static string AllIssuesJobIds_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nqueryIds: $queryIds\n)";
            return "allIssuesJobIds" + args + "\n";
        }
        public static string AllIssuesJobIds_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllIssuesJobIds((List<System.String>)fieldSpecObj);
        }
        public static string AllIssuesJobIds(List<System.String> fieldSpec)
        {
            return AllIssuesJobIds_TypedFieldSpec(fieldSpec);
        }
        public static string AllIssuesJobIds(object fieldSpecObj)
        {
            return AllIssuesJobIds_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllIssuesJobIdsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllS3BucketsFromAws
        // GraphQL -> allS3BucketsFromAws: [String!]! (scalar)
        public static string AllS3BucketsFromAws_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\n)";
            return "allS3BucketsFromAws" + args + "\n";
        }
        public static string AllS3BucketsFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllS3BucketsFromAws((List<System.String>)fieldSpecObj);
        }
        public static string AllS3BucketsFromAws(List<System.String> fieldSpec)
        {
            return AllS3BucketsFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllS3BucketsFromAws(object fieldSpecObj)
        {
            return AllS3BucketsFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllS3BucketsFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> List<System.String>? AllSupportedAwsRdsDatabaseInstanceClasses
        // GraphQL -> allSupportedAwsRdsDatabaseInstanceClasses: [String!]! (scalar)
        public static string AllSupportedAwsRdsDatabaseInstanceClasses_TypedFieldSpec(List<System.String> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\ndbEngine: $dbEngine\ndbEngineVersion: $dbEngineVersion\n)";
            return "allSupportedAwsRdsDatabaseInstanceClasses" + args + "\n";
        }
        public static string AllSupportedAwsRdsDatabaseInstanceClasses_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllSupportedAwsRdsDatabaseInstanceClasses((List<System.String>)fieldSpecObj);
        }
        public static string AllSupportedAwsRdsDatabaseInstanceClasses(List<System.String> fieldSpec)
        {
            return AllSupportedAwsRdsDatabaseInstanceClasses_TypedFieldSpec(fieldSpec);
        }
        public static string AllSupportedAwsRdsDatabaseInstanceClasses(object fieldSpecObj)
        {
            return AllSupportedAwsRdsDatabaseInstanceClasses_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllSupportedAwsRdsDatabaseInstanceClassesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return new List<System.String>() ;
        }

        //      C# -> System.Boolean? AreMultiGeoBackupsEnabled
        // GraphQL -> areMultiGeoBackupsEnabled: Boolean! (scalar)
        public static string AreMultiGeoBackupsEnabled_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\norgId: $orgId\n)";
            return "areMultiGeoBackupsEnabled" + args + "\n";
        }
        public static string AreMultiGeoBackupsEnabled_ObjectFieldSpec(object fieldSpecObj)
        {
            return AreMultiGeoBackupsEnabled((System.Boolean)fieldSpecObj);
        }
        public static string AreMultiGeoBackupsEnabled(System.Boolean fieldSpec)
        {
            return AreMultiGeoBackupsEnabled_TypedFieldSpec(fieldSpec);
        }
        public static string AreMultiGeoBackupsEnabled(object fieldSpecObj)
        {
            return AreMultiGeoBackupsEnabled_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AreMultiGeoBackupsEnabledFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? CloudNativeCheckRequiredPermissionsForFeature
        // GraphQL -> cloudNativeCheckRequiredPermissionsForFeature: Boolean! (scalar)
        public static string CloudNativeCheckRequiredPermissionsForFeature_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\ncloudNativeAccountId: $cloudNativeAccountId\nfeaturePermissionCheck: $featurePermissionCheck\n)";
            return "cloudNativeCheckRequiredPermissionsForFeature" + args + "\n";
        }
        public static string CloudNativeCheckRequiredPermissionsForFeature_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeCheckRequiredPermissionsForFeature((System.Boolean)fieldSpecObj);
        }
        public static string CloudNativeCheckRequiredPermissionsForFeature(System.Boolean fieldSpec)
        {
            return CloudNativeCheckRequiredPermissionsForFeature_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeCheckRequiredPermissionsForFeature(object fieldSpecObj)
        {
            return CloudNativeCheckRequiredPermissionsForFeature_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeCheckRequiredPermissionsForFeatureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.String? CurrentIpAddress
        // GraphQL -> currentIpAddress: String! (scalar)
        public static string CurrentIpAddress_TypedFieldSpec(System.String fieldSpec)
        {
            string args = "";
            return "currentIpAddress" + args + "\n";
        }
        public static string CurrentIpAddress_ObjectFieldSpec(object fieldSpecObj)
        {
            return CurrentIpAddress((System.String)fieldSpecObj);
        }
        public static string CurrentIpAddress(System.String fieldSpec)
        {
            return CurrentIpAddress_TypedFieldSpec(fieldSpec);
        }
        public static string CurrentIpAddress(object fieldSpecObj)
        {
            return CurrentIpAddress_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CurrentIpAddressFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return "FETCH" ;
        }

        //      C# -> System.String? DeploymentVersion
        // GraphQL -> deploymentVersion: String! (scalar)
        public static string DeploymentVersion_TypedFieldSpec(System.String fieldSpec)
        {
            string args = "";
            return "deploymentVersion" + args + "\n";
        }
        public static string DeploymentVersion_ObjectFieldSpec(object fieldSpecObj)
        {
            return DeploymentVersion((System.String)fieldSpecObj);
        }
        public static string DeploymentVersion(System.String fieldSpec)
        {
            return DeploymentVersion_TypedFieldSpec(fieldSpec);
        }
        public static string DeploymentVersion(object fieldSpecObj)
        {
            return DeploymentVersion_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DeploymentVersionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return "FETCH" ;
        }

        //      C# -> System.Boolean? DoesAzureNativeResourceGroupExist
        // GraphQL -> doesAzureNativeResourceGroupExist: Boolean! (scalar)
        public static string DoesAzureNativeResourceGroupExist_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\nazureSubscriptionNativeId: $azureSubscriptionNativeId\nresourceGroupName: $resourceGroupName\nfeature: $feature\n)";
            return "doesAzureNativeResourceGroupExist" + args + "\n";
        }
        public static string DoesAzureNativeResourceGroupExist_ObjectFieldSpec(object fieldSpecObj)
        {
            return DoesAzureNativeResourceGroupExist((System.Boolean)fieldSpecObj);
        }
        public static string DoesAzureNativeResourceGroupExist(System.Boolean fieldSpec)
        {
            return DoesAzureNativeResourceGroupExist_TypedFieldSpec(fieldSpec);
        }
        public static string DoesAzureNativeResourceGroupExist(object fieldSpecObj)
        {
            return DoesAzureNativeResourceGroupExist_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DoesAzureNativeResourceGroupExistFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? DummyFieldWithAdminOnlyTag
        // GraphQL -> dummyFieldWithAdminOnlyTag: Boolean! (scalar)
        public static string DummyFieldWithAdminOnlyTag_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "";
            return "dummyFieldWithAdminOnlyTag" + args + "\n";
        }
        public static string DummyFieldWithAdminOnlyTag_ObjectFieldSpec(object fieldSpecObj)
        {
            return DummyFieldWithAdminOnlyTag((System.Boolean)fieldSpecObj);
        }
        public static string DummyFieldWithAdminOnlyTag(System.Boolean fieldSpec)
        {
            return DummyFieldWithAdminOnlyTag_TypedFieldSpec(fieldSpec);
        }
        public static string DummyFieldWithAdminOnlyTag(object fieldSpecObj)
        {
            return DummyFieldWithAdminOnlyTag_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DummyFieldWithAdminOnlyTagFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.String? ExternalDeploymentName
        // GraphQL -> externalDeploymentName: String! (scalar)
        public static string ExternalDeploymentName_TypedFieldSpec(System.String fieldSpec)
        {
            string args = "";
            return "externalDeploymentName" + args + "\n";
        }
        public static string ExternalDeploymentName_ObjectFieldSpec(object fieldSpecObj)
        {
            return ExternalDeploymentName((System.String)fieldSpecObj);
        }
        public static string ExternalDeploymentName(System.String fieldSpec)
        {
            return ExternalDeploymentName_TypedFieldSpec(fieldSpec);
        }
        public static string ExternalDeploymentName(object fieldSpecObj)
        {
            return ExternalDeploymentName_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ExternalDeploymentNameFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return "FETCH" ;
        }

        //      C# -> System.String? GcpGetDefaultCredentialsServiceAccount
        // GraphQL -> gcpGetDefaultCredentialsServiceAccount: String! (scalar)
        public static string GcpGetDefaultCredentialsServiceAccount_TypedFieldSpec(System.String fieldSpec)
        {
            string args = "";
            return "gcpGetDefaultCredentialsServiceAccount" + args + "\n";
        }
        public static string GcpGetDefaultCredentialsServiceAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return GcpGetDefaultCredentialsServiceAccount((System.String)fieldSpecObj);
        }
        public static string GcpGetDefaultCredentialsServiceAccount(System.String fieldSpec)
        {
            return GcpGetDefaultCredentialsServiceAccount_TypedFieldSpec(fieldSpec);
        }
        public static string GcpGetDefaultCredentialsServiceAccount(object fieldSpecObj)
        {
            return GcpGetDefaultCredentialsServiceAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GcpGetDefaultCredentialsServiceAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return "FETCH" ;
        }

        //      C# -> System.Boolean? HasIdpConfigured
        // GraphQL -> hasIdpConfigured: Boolean! (scalar)
        public static string HasIdpConfigured_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "";
            return "hasIdpConfigured" + args + "\n";
        }
        public static string HasIdpConfigured_ObjectFieldSpec(object fieldSpecObj)
        {
            return HasIdpConfigured((System.Boolean)fieldSpecObj);
        }
        public static string HasIdpConfigured(System.Boolean fieldSpec)
        {
            return HasIdpConfigured_TypedFieldSpec(fieldSpec);
        }
        public static string HasIdpConfigured(object fieldSpecObj)
        {
            return HasIdpConfigured_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HasIdpConfiguredFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsAwsNativeRdsInstanceLaunchConfigurationValid
        // GraphQL -> isAwsNativeRdsInstanceLaunchConfigurationValid: Boolean! (scalar)
        public static string IsAwsNativeRdsInstanceLaunchConfigurationValid_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\ndbEngine: $dbEngine\ndbEngineVersion: $dbEngineVersion\ndbClass: $dbClass\ndatabaseInstanceClass: $databaseInstanceClass\nprimaryAz: $primaryAz\nstorageType: $storageType\nisMultiAz: $isMultiAz\nkmsKeyId: $kmsKeyId\niops: $iops\n)";
            return "isAwsNativeRdsInstanceLaunchConfigurationValid" + args + "\n";
        }
        public static string IsAwsNativeRdsInstanceLaunchConfigurationValid_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsAwsNativeRdsInstanceLaunchConfigurationValid((System.Boolean)fieldSpecObj);
        }
        public static string IsAwsNativeRdsInstanceLaunchConfigurationValid(System.Boolean fieldSpec)
        {
            return IsAwsNativeRdsInstanceLaunchConfigurationValid_TypedFieldSpec(fieldSpec);
        }
        public static string IsAwsNativeRdsInstanceLaunchConfigurationValid(object fieldSpecObj)
        {
            return IsAwsNativeRdsInstanceLaunchConfigurationValid_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsAwsNativeRdsInstanceLaunchConfigurationValidFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsAwsS3BucketNameAvailable
        // GraphQL -> isAwsS3BucketNameAvailable: Boolean! (scalar)
        public static string IsAwsS3BucketNameAvailable_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nbucketName: $bucketName\nawsAccountRubrikId: $awsAccountRubrikId\n)";
            return "isAwsS3BucketNameAvailable" + args + "\n";
        }
        public static string IsAwsS3BucketNameAvailable_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsAwsS3BucketNameAvailable((System.Boolean)fieldSpecObj);
        }
        public static string IsAwsS3BucketNameAvailable(System.Boolean fieldSpec)
        {
            return IsAwsS3BucketNameAvailable_TypedFieldSpec(fieldSpec);
        }
        public static string IsAwsS3BucketNameAvailable(object fieldSpecObj)
        {
            return IsAwsS3BucketNameAvailable_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsAwsS3BucketNameAvailableFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsAzureNativeManagedDiskSnapshotRestorable
        // GraphQL -> isAzureNativeManagedDiskSnapshotRestorable: Boolean! (scalar)
        public static string IsAzureNativeManagedDiskSnapshotRestorable_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\ndiskSnapshotId: $diskSnapshotId\n)";
            return "isAzureNativeManagedDiskSnapshotRestorable" + args + "\n";
        }
        public static string IsAzureNativeManagedDiskSnapshotRestorable_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsAzureNativeManagedDiskSnapshotRestorable((System.Boolean)fieldSpecObj);
        }
        public static string IsAzureNativeManagedDiskSnapshotRestorable(System.Boolean fieldSpec)
        {
            return IsAzureNativeManagedDiskSnapshotRestorable_TypedFieldSpec(fieldSpec);
        }
        public static string IsAzureNativeManagedDiskSnapshotRestorable(object fieldSpecObj)
        {
            return IsAzureNativeManagedDiskSnapshotRestorable_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsAzureNativeManagedDiskSnapshotRestorableFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsAzureNativeSqlDatabaseSnapshotPersistent
        // GraphQL -> isAzureNativeSqlDatabaseSnapshotPersistent: Boolean! (scalar)
        public static string IsAzureNativeSqlDatabaseSnapshotPersistent_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nsnapshotId: $snapshotId\n)";
            return "isAzureNativeSqlDatabaseSnapshotPersistent" + args + "\n";
        }
        public static string IsAzureNativeSqlDatabaseSnapshotPersistent_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsAzureNativeSqlDatabaseSnapshotPersistent((System.Boolean)fieldSpecObj);
        }
        public static string IsAzureNativeSqlDatabaseSnapshotPersistent(System.Boolean fieldSpec)
        {
            return IsAzureNativeSqlDatabaseSnapshotPersistent_TypedFieldSpec(fieldSpec);
        }
        public static string IsAzureNativeSqlDatabaseSnapshotPersistent(object fieldSpecObj)
        {
            return IsAzureNativeSqlDatabaseSnapshotPersistent_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsAzureNativeSqlDatabaseSnapshotPersistentFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsAzureStorageAccountNameAvailable
        // GraphQL -> isAzureStorageAccountNameAvailable: Boolean! (scalar)
        public static string IsAzureStorageAccountNameAvailable_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\nstorageAccountName: $storageAccountName\n)";
            return "isAzureStorageAccountNameAvailable" + args + "\n";
        }
        public static string IsAzureStorageAccountNameAvailable_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsAzureStorageAccountNameAvailable((System.Boolean)fieldSpecObj);
        }
        public static string IsAzureStorageAccountNameAvailable(System.Boolean fieldSpec)
        {
            return IsAzureStorageAccountNameAvailable_TypedFieldSpec(fieldSpec);
        }
        public static string IsAzureStorageAccountNameAvailable(object fieldSpecObj)
        {
            return IsAzureStorageAccountNameAvailable_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsAzureStorageAccountNameAvailableFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsSfdcReachable
        // GraphQL -> isSfdcReachable: Boolean! (scalar)
        public static string IsSfdcReachable_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nhostname: $hostname\norganizationId: $organizationId\n)";
            return "isSfdcReachable" + args + "\n";
        }
        public static string IsSfdcReachable_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsSfdcReachable((System.Boolean)fieldSpecObj);
        }
        public static string IsSfdcReachable(System.Boolean fieldSpec)
        {
            return IsSfdcReachable_TypedFieldSpec(fieldSpec);
        }
        public static string IsSfdcReachable(object fieldSpecObj)
        {
            return IsSfdcReachable_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsSfdcReachableFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsTotpAckNecessaryForCluster
        // GraphQL -> isTotpAckNecessaryForCluster: Boolean! (scalar)
        public static string IsTotpAckNecessaryForCluster_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "isTotpAckNecessaryForCluster" + args + "\n";
        }
        public static string IsTotpAckNecessaryForCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsTotpAckNecessaryForCluster((System.Boolean)fieldSpecObj);
        }
        public static string IsTotpAckNecessaryForCluster(System.Boolean fieldSpec)
        {
            return IsTotpAckNecessaryForCluster_TypedFieldSpec(fieldSpec);
        }
        public static string IsTotpAckNecessaryForCluster(object fieldSpecObj)
        {
            return IsTotpAckNecessaryForCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsTotpAckNecessaryForClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsTotpMandatoryInTargetVersion
        // GraphQL -> isTotpMandatoryInTargetVersion: Boolean! (scalar)
        public static string IsTotpMandatoryInTargetVersion_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nversion: $version\n)";
            return "isTotpMandatoryInTargetVersion" + args + "\n";
        }
        public static string IsTotpMandatoryInTargetVersion_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsTotpMandatoryInTargetVersion((System.Boolean)fieldSpecObj);
        }
        public static string IsTotpMandatoryInTargetVersion(System.Boolean fieldSpec)
        {
            return IsTotpMandatoryInTargetVersion_TypedFieldSpec(fieldSpec);
        }
        public static string IsTotpMandatoryInTargetVersion(object fieldSpecObj)
        {
            return IsTotpMandatoryInTargetVersion_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsTotpMandatoryInTargetVersionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Boolean? IsVmwareManagementEnabled
        // GraphQL -> isVMwareManagementEnabled: Boolean! (scalar)
        public static string IsVmwareManagementEnabled_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "";
            return "isVMwareManagementEnabled" + args + "\n";
        }
        public static string IsVmwareManagementEnabled_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsVmwareManagementEnabled((System.Boolean)fieldSpecObj);
        }
        public static string IsVmwareManagementEnabled(System.Boolean fieldSpec)
        {
            return IsVmwareManagementEnabled_TypedFieldSpec(fieldSpec);
        }
        public static string IsVmwareManagementEnabled(object fieldSpecObj)
        {
            return IsVmwareManagementEnabled_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsVmwareManagementEnabledFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Int32? MaxProtectedAppsCount
        // GraphQL -> maxProtectedAppsCount: Int! (scalar)
        public static string MaxProtectedAppsCount_TypedFieldSpec(System.Int32 fieldSpec)
        {
            string args = "";
            return "maxProtectedAppsCount" + args + "\n";
        }
        public static string MaxProtectedAppsCount_ObjectFieldSpec(object fieldSpecObj)
        {
            return MaxProtectedAppsCount((System.Int32)fieldSpecObj);
        }
        public static string MaxProtectedAppsCount(System.Int32 fieldSpec)
        {
            return MaxProtectedAppsCount_TypedFieldSpec(fieldSpec);
        }
        public static string MaxProtectedAppsCount(object fieldSpecObj)
        {
            return MaxProtectedAppsCount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MaxProtectedAppsCountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return Int32.MinValue ;
        }

        //      C# -> System.String? O365TeamConversationsFolderId
        // GraphQL -> o365TeamConversationsFolderID: String! (scalar)
        public static string O365TeamConversationsFolderId_TypedFieldSpec(System.String fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\no365OrgId: $o365OrgId\n)";
            return "o365TeamConversationsFolderID" + args + "\n";
        }
        public static string O365TeamConversationsFolderId_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365TeamConversationsFolderId((System.String)fieldSpecObj);
        }
        public static string O365TeamConversationsFolderId(System.String fieldSpec)
        {
            return O365TeamConversationsFolderId_TypedFieldSpec(fieldSpec);
        }
        public static string O365TeamConversationsFolderId(object fieldSpecObj)
        {
            return O365TeamConversationsFolderId_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365TeamConversationsFolderIdFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return "FETCH" ;
        }

        //      C# -> System.Int32? ProtectedVolumesCount
        // GraphQL -> protectedVolumesCount: Int! (scalar)
        public static string ProtectedVolumesCount_TypedFieldSpec(System.Int32 fieldSpec)
        {
            string args = "\n(\nfilter: $filter\n)";
            return "protectedVolumesCount" + args + "\n";
        }
        public static string ProtectedVolumesCount_ObjectFieldSpec(object fieldSpecObj)
        {
            return ProtectedVolumesCount((System.Int32)fieldSpecObj);
        }
        public static string ProtectedVolumesCount(System.Int32 fieldSpec)
        {
            return ProtectedVolumesCount_TypedFieldSpec(fieldSpec);
        }
        public static string ProtectedVolumesCount(object fieldSpecObj)
        {
            return ProtectedVolumesCount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ProtectedVolumesCountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return Int32.MinValue ;
        }

        //      C# -> System.Boolean? TeamChannelNameAvailable
        // GraphQL -> teamChannelNameAvailable: Boolean! (scalar)
        public static string TeamChannelNameAvailable_TypedFieldSpec(System.Boolean fieldSpec)
        {
            string args = "\n(\nteamUUID: $teamUUID\nchannelName: $channelName\n)";
            return "teamChannelNameAvailable" + args + "\n";
        }
        public static string TeamChannelNameAvailable_ObjectFieldSpec(object fieldSpecObj)
        {
            return TeamChannelNameAvailable((System.Boolean)fieldSpecObj);
        }
        public static string TeamChannelNameAvailable(System.Boolean fieldSpec)
        {
            return TeamChannelNameAvailable_TypedFieldSpec(fieldSpec);
        }
        public static string TeamChannelNameAvailable(object fieldSpecObj)
        {
            return TeamChannelNameAvailable_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TeamChannelNameAvailableFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return true ;
        }

        //      C# -> System.Int32? UniqueHypervServersCount
        // GraphQL -> uniqueHypervServersCount: Int! (scalar)
        public static string UniqueHypervServersCount_TypedFieldSpec(System.Int32 fieldSpec)
        {
            string args = "\n(\nfilter: $filter\n)";
            return "uniqueHypervServersCount" + args + "\n";
        }
        public static string UniqueHypervServersCount_ObjectFieldSpec(object fieldSpecObj)
        {
            return UniqueHypervServersCount((System.Int32)fieldSpecObj);
        }
        public static string UniqueHypervServersCount(System.Int32 fieldSpec)
        {
            return UniqueHypervServersCount_TypedFieldSpec(fieldSpec);
        }
        public static string UniqueHypervServersCount(object fieldSpecObj)
        {
            return UniqueHypervServersCount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UniqueHypervServersCountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return Int32.MinValue ;
        }

        //      C# -> System.Int32? UniqueVcdCount
        // GraphQL -> uniqueVcdCount: Int! (scalar)
        public static string UniqueVcdCount_TypedFieldSpec(System.Int32 fieldSpec)
        {
            string args = "\n(\nfilter: $filter\n)";
            return "uniqueVcdCount" + args + "\n";
        }
        public static string UniqueVcdCount_ObjectFieldSpec(object fieldSpecObj)
        {
            return UniqueVcdCount((System.Int32)fieldSpecObj);
        }
        public static string UniqueVcdCount(System.Int32 fieldSpec)
        {
            return UniqueVcdCount_TypedFieldSpec(fieldSpec);
        }
        public static string UniqueVcdCount(object fieldSpecObj)
        {
            return UniqueVcdCount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UniqueVcdCountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return Int32.MinValue ;
        }

        //      C# -> System.Int32? VcenterNumProxiesNeeded
        // GraphQL -> vCenterNumProxiesNeeded: Int! (scalar)
        public static string VcenterNumProxiesNeeded_TypedFieldSpec(System.Int32 fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vCenterNumProxiesNeeded" + args + "\n";
        }
        public static string VcenterNumProxiesNeeded_ObjectFieldSpec(object fieldSpecObj)
        {
            return VcenterNumProxiesNeeded((System.Int32)fieldSpecObj);
        }
        public static string VcenterNumProxiesNeeded(System.Int32 fieldSpec)
        {
            return VcenterNumProxiesNeeded_TypedFieldSpec(fieldSpec);
        }
        public static string VcenterNumProxiesNeeded(object fieldSpecObj)
        {
            return VcenterNumProxiesNeeded_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VcenterNumProxiesNeededFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            // there is no field spec for scalar types, but we still
            // populate the fieldSpec so that caller can see the type 
            return Int32.MinValue ;
        }

        //      C# -> AccountSetting? AccountSettings
        // GraphQL -> accountSettings: AccountSetting! (type)
        public static string AccountSettings_TypedFieldSpec(AccountSetting fieldSpec)
        {
            string args = "";
            return "accountSettings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AccountSettings_ObjectFieldSpec(object fieldSpecObj)
        {
            return AccountSettings((AccountSetting)fieldSpecObj);
        }
        public static string AccountSettings(AccountSetting fieldSpec)
        {
            return AccountSettings_TypedFieldSpec(fieldSpec);
        }
        public static string AccountSettings(object fieldSpecObj)
        {
            return AccountSettings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AccountSettingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AccountSetting() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AnalyzerConnection? ActiveCustomAnalyzers
        // GraphQL -> activeCustomAnalyzers: AnalyzerConnection! (type)
        public static string ActiveCustomAnalyzers_TypedFieldSpec(AnalyzerConnection fieldSpec)
        {
            string args = "";
            return "activeCustomAnalyzers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ActiveCustomAnalyzers_ObjectFieldSpec(object fieldSpecObj)
        {
            return ActiveCustomAnalyzers((AnalyzerConnection)fieldSpecObj);
        }
        public static string ActiveCustomAnalyzers(AnalyzerConnection fieldSpec)
        {
            return ActiveCustomAnalyzers_TypedFieldSpec(fieldSpec);
        }
        public static string ActiveCustomAnalyzers(object fieldSpecObj)
        {
            return ActiveCustomAnalyzers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ActiveCustomAnalyzersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AnalyzerConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActiveDirectoryDomain? ActiveDirectoryDomain
        // GraphQL -> activeDirectoryDomain: ActiveDirectoryDomain! (type)
        public static string ActiveDirectoryDomain_TypedFieldSpec(ActiveDirectoryDomain fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "activeDirectoryDomain" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ActiveDirectoryDomain_ObjectFieldSpec(object fieldSpecObj)
        {
            return ActiveDirectoryDomain((ActiveDirectoryDomain)fieldSpecObj);
        }
        public static string ActiveDirectoryDomain(ActiveDirectoryDomain fieldSpec)
        {
            return ActiveDirectoryDomain_TypedFieldSpec(fieldSpec);
        }
        public static string ActiveDirectoryDomain(object fieldSpecObj)
        {
            return ActiveDirectoryDomain_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ActiveDirectoryDomainFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActiveDirectoryDomain() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActiveDirectoryDomainController? ActiveDirectoryDomainController
        // GraphQL -> activeDirectoryDomainController: ActiveDirectoryDomainController! (type)
        public static string ActiveDirectoryDomainController_TypedFieldSpec(ActiveDirectoryDomainController fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "activeDirectoryDomainController" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ActiveDirectoryDomainController_ObjectFieldSpec(object fieldSpecObj)
        {
            return ActiveDirectoryDomainController((ActiveDirectoryDomainController)fieldSpecObj);
        }
        public static string ActiveDirectoryDomainController(ActiveDirectoryDomainController fieldSpec)
        {
            return ActiveDirectoryDomainController_TypedFieldSpec(fieldSpec);
        }
        public static string ActiveDirectoryDomainController(object fieldSpecObj)
        {
            return ActiveDirectoryDomainController_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ActiveDirectoryDomainControllerFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActiveDirectoryDomainController() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActiveDirectoryDomainControllerConnection? ActiveDirectoryDomainControllers
        // GraphQL -> activeDirectoryDomainControllers: ActiveDirectoryDomainControllerConnection! (type)
        public static string ActiveDirectoryDomainControllers_TypedFieldSpec(ActiveDirectoryDomainControllerConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "activeDirectoryDomainControllers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ActiveDirectoryDomainControllers_ObjectFieldSpec(object fieldSpecObj)
        {
            return ActiveDirectoryDomainControllers((ActiveDirectoryDomainControllerConnection)fieldSpecObj);
        }
        public static string ActiveDirectoryDomainControllers(ActiveDirectoryDomainControllerConnection fieldSpec)
        {
            return ActiveDirectoryDomainControllers_TypedFieldSpec(fieldSpec);
        }
        public static string ActiveDirectoryDomainControllers(object fieldSpecObj)
        {
            return ActiveDirectoryDomainControllers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ActiveDirectoryDomainControllersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActiveDirectoryDomainControllerConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActiveDirectoryDomainConnection? ActiveDirectoryDomains
        // GraphQL -> activeDirectoryDomains: ActiveDirectoryDomainConnection! (type)
        public static string ActiveDirectoryDomains_TypedFieldSpec(ActiveDirectoryDomainConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "activeDirectoryDomains" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ActiveDirectoryDomains_ObjectFieldSpec(object fieldSpecObj)
        {
            return ActiveDirectoryDomains((ActiveDirectoryDomainConnection)fieldSpecObj);
        }
        public static string ActiveDirectoryDomains(ActiveDirectoryDomainConnection fieldSpec)
        {
            return ActiveDirectoryDomains_TypedFieldSpec(fieldSpec);
        }
        public static string ActiveDirectoryDomains(object fieldSpecObj)
        {
            return ActiveDirectoryDomains_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ActiveDirectoryDomainsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActiveDirectoryDomainConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActiveDirectorySnappableSearchResponseConnection? ActiveDirectorySearchSnapshots
        // GraphQL -> activeDirectorySearchSnapshots: ActiveDirectorySnappableSearchResponseConnection! (type)
        public static string ActiveDirectorySearchSnapshots_TypedFieldSpec(ActiveDirectorySnappableSearchResponseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nid: $id\nsnapshotAfterDate: $snapshotAfterDate\nsnapshotBeforeDate: $snapshotBeforeDate\nname: $name\nactiveDirectoryObjectType: $activeDirectoryObjectType\n)";
            return "activeDirectorySearchSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ActiveDirectorySearchSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return ActiveDirectorySearchSnapshots((ActiveDirectorySnappableSearchResponseConnection)fieldSpecObj);
        }
        public static string ActiveDirectorySearchSnapshots(ActiveDirectorySnappableSearchResponseConnection fieldSpec)
        {
            return ActiveDirectorySearchSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string ActiveDirectorySearchSnapshots(object fieldSpecObj)
        {
            return ActiveDirectorySearchSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ActiveDirectorySearchSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActiveDirectorySnappableSearchResponseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActivitySeries? ActivitySeries
        // GraphQL -> activitySeries: ActivitySeries! (type)
        public static string ActivitySeries_TypedFieldSpec(ActivitySeries fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "activitySeries" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ActivitySeries_ObjectFieldSpec(object fieldSpecObj)
        {
            return ActivitySeries((ActivitySeries)fieldSpecObj);
        }
        public static string ActivitySeries(ActivitySeries fieldSpec)
        {
            return ActivitySeries_TypedFieldSpec(fieldSpec);
        }
        public static string ActivitySeries(object fieldSpecObj)
        {
            return ActivitySeries_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ActivitySeriesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActivitySeries() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActivitySeriesConnection? ActivitySeriesConnection
        // GraphQL -> activitySeriesConnection: ActivitySeriesConnection! (type)
        public static string ActivitySeriesConnection_TypedFieldSpec(ActivitySeriesConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilters: $filters\n)";
            return "activitySeriesConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ActivitySeriesConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return ActivitySeriesConnection((ActivitySeriesConnection)fieldSpecObj);
        }
        public static string ActivitySeriesConnection(ActivitySeriesConnection fieldSpec)
        {
            return ActivitySeriesConnection_TypedFieldSpec(fieldSpec);
        }
        public static string ActivitySeriesConnection(object fieldSpecObj)
        {
            return ActivitySeriesConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ActivitySeriesConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActivitySeriesConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AdVolumeExportConnection? AdVolumeExports
        // GraphQL -> adVolumeExports: AdVolumeExportConnection! (type)
        public static string AdVolumeExports_TypedFieldSpec(AdVolumeExportConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilters: $filters\nsortBy: $sortBy\n)";
            return "adVolumeExports" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AdVolumeExports_ObjectFieldSpec(object fieldSpecObj)
        {
            return AdVolumeExports((AdVolumeExportConnection)fieldSpecObj);
        }
        public static string AdVolumeExports(AdVolumeExportConnection fieldSpec)
        {
            return AdVolumeExports_TypedFieldSpec(fieldSpec);
        }
        public static string AdVolumeExports(object fieldSpecObj)
        {
            return AdVolumeExports_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AdVolumeExportsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AdVolumeExportConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<User>? AllAccountOwners
        // GraphQL -> allAccountOwners: [User!]! (type)
        public static string AllAccountOwners_TypedFieldSpec(List<User> fieldSpec)
        {
            string args = "";
            return "allAccountOwners" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAccountOwners_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAccountOwners((List<User>)fieldSpecObj);
        }
        public static string AllAccountOwners(List<User> fieldSpec)
        {
            return AllAccountOwners_TypedFieldSpec(fieldSpec);
        }
        public static string AllAccountOwners(object fieldSpecObj)
        {
            return AllAccountOwners_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAccountOwnersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<User>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AccountProduct>? AllAccountProducts
        // GraphQL -> allAccountProducts: [AccountProduct!]! (type)
        public static string AllAccountProducts_TypedFieldSpec(List<AccountProduct> fieldSpec)
        {
            string args = "\n(\nnameFilter: $nameFilter\ntypeFilter: $typeFilter\nstateFilter: $stateFilter\nstartDateArg: $startDateArg\nendDateArg: $endDateArg\n)";
            return "allAccountProducts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAccountProducts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAccountProducts((List<AccountProduct>)fieldSpecObj);
        }
        public static string AllAccountProducts(List<AccountProduct> fieldSpec)
        {
            return AllAccountProducts_TypedFieldSpec(fieldSpec);
        }
        public static string AllAccountProducts(object fieldSpecObj)
        {
            return AllAccountProducts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAccountProductsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AccountProduct>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<CloudAccountWithExocomputeMapping>? AllAccountsWithExocomputeMappings
        // GraphQL -> allAccountsWithExocomputeMappings: [CloudAccountWithExocomputeMapping!]! (type)
        public static string AllAccountsWithExocomputeMappings_TypedFieldSpec(List<CloudAccountWithExocomputeMapping> fieldSpec)
        {
            string args = "\n(\ncloudVendor: $cloudVendor\nfeatures: $features\nexocomputeAccountIdsFilter: $exocomputeAccountIdsFilter\n)";
            return "allAccountsWithExocomputeMappings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAccountsWithExocomputeMappings_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAccountsWithExocomputeMappings((List<CloudAccountWithExocomputeMapping>)fieldSpecObj);
        }
        public static string AllAccountsWithExocomputeMappings(List<CloudAccountWithExocomputeMapping> fieldSpec)
        {
            return AllAccountsWithExocomputeMappings_TypedFieldSpec(fieldSpec);
        }
        public static string AllAccountsWithExocomputeMappings(object fieldSpecObj)
        {
            return AllAccountsWithExocomputeMappings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAccountsWithExocomputeMappingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CloudAccountWithExocomputeMapping>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AuthorizedOperations>? AllAuthorizationsForObjects
        // GraphQL -> allAuthorizationsForObjects: [AuthorizedOperations!]! (type)
        public static string AllAuthorizationsForObjects_TypedFieldSpec(List<AuthorizedOperations> fieldSpec)
        {
            string args = "\n(\nfids: $fids\n)";
            return "allAuthorizationsForObjects" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAuthorizationsForObjects_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAuthorizationsForObjects((List<AuthorizedOperations>)fieldSpecObj);
        }
        public static string AllAuthorizationsForObjects(List<AuthorizedOperations> fieldSpec)
        {
            return AllAuthorizationsForObjects_TypedFieldSpec(fieldSpec);
        }
        public static string AllAuthorizationsForObjects(object fieldSpecObj)
        {
            return AllAuthorizationsForObjects_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAuthorizationsForObjectsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AuthorizedOperations>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AwsCdmVersion>? AllAwsCdmVersions
        // GraphQL -> allAwsCdmVersions: [AwsCdmVersion!]! (type)
        public static string AllAwsCdmVersions_TypedFieldSpec(List<AwsCdmVersion> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allAwsCdmVersions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAwsCdmVersions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAwsCdmVersions((List<AwsCdmVersion>)fieldSpecObj);
        }
        public static string AllAwsCdmVersions(List<AwsCdmVersion> fieldSpec)
        {
            return AllAwsCdmVersions_TypedFieldSpec(fieldSpec);
        }
        public static string AllAwsCdmVersions(object fieldSpecObj)
        {
            return AllAwsCdmVersions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAwsCdmVersionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AwsCdmVersion>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AwsFeatureConfig>? AllAwsCloudAccountConfigs
        // GraphQL -> allAwsCloudAccountConfigs: [AwsFeatureConfig!]! (type)
        public static string AllAwsCloudAccountConfigs_TypedFieldSpec(List<AwsFeatureConfig> fieldSpec)
        {
            string args = "\n(\nawsCloudAccountsArg: $awsCloudAccountsArg\n)";
            return "allAwsCloudAccountConfigs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAwsCloudAccountConfigs_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAwsCloudAccountConfigs((List<AwsFeatureConfig>)fieldSpecObj);
        }
        public static string AllAwsCloudAccountConfigs(List<AwsFeatureConfig> fieldSpec)
        {
            return AllAwsCloudAccountConfigs_TypedFieldSpec(fieldSpec);
        }
        public static string AllAwsCloudAccountConfigs(object fieldSpecObj)
        {
            return AllAwsCloudAccountConfigs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAwsCloudAccountConfigsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AwsFeatureConfig>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AwsCloudAccountWithFeatures>? AllAwsCloudAccountsWithFeatures
        // GraphQL -> allAwsCloudAccountsWithFeatures: [AwsCloudAccountWithFeatures!]! (type)
        public static string AllAwsCloudAccountsWithFeatures_TypedFieldSpec(List<AwsCloudAccountWithFeatures> fieldSpec)
        {
            string args = "\n(\nawsCloudAccountsArg: $awsCloudAccountsArg\n)";
            return "allAwsCloudAccountsWithFeatures" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAwsCloudAccountsWithFeatures_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAwsCloudAccountsWithFeatures((List<AwsCloudAccountWithFeatures>)fieldSpecObj);
        }
        public static string AllAwsCloudAccountsWithFeatures(List<AwsCloudAccountWithFeatures> fieldSpec)
        {
            return AllAwsCloudAccountsWithFeatures_TypedFieldSpec(fieldSpec);
        }
        public static string AllAwsCloudAccountsWithFeatures(object fieldSpecObj)
        {
            return AllAwsCloudAccountsWithFeatures_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAwsCloudAccountsWithFeaturesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AwsCloudAccountWithFeatures>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AwsComputeSettings>? AllAwsComputeSettings
        // GraphQL -> allAwsComputeSettings: [AwsComputeSettings!]! (type)
        public static string AllAwsComputeSettings_TypedFieldSpec(List<AwsComputeSettings> fieldSpec)
        {
            string args = "\n(\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\ncontextFilter: $contextFilter\n)";
            return "allAwsComputeSettings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAwsComputeSettings_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAwsComputeSettings((List<AwsComputeSettings>)fieldSpecObj);
        }
        public static string AllAwsComputeSettings(List<AwsComputeSettings> fieldSpec)
        {
            return AllAwsComputeSettings_TypedFieldSpec(fieldSpec);
        }
        public static string AllAwsComputeSettings(object fieldSpecObj)
        {
            return AllAwsComputeSettings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAwsComputeSettingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AwsComputeSettings>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AwsExocomputeConfig>? AllAwsExocomputeConfigs
        // GraphQL -> allAwsExocomputeConfigs: [AwsExocomputeConfig!]! (type)
        public static string AllAwsExocomputeConfigs_TypedFieldSpec(List<AwsExocomputeConfig> fieldSpec)
        {
            string args = "\n(\nawsNativeAccountIdOrNamePrefix: $awsNativeAccountIdOrNamePrefix\n)";
            return "allAwsExocomputeConfigs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAwsExocomputeConfigs_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAwsExocomputeConfigs((List<AwsExocomputeConfig>)fieldSpecObj);
        }
        public static string AllAwsExocomputeConfigs(List<AwsExocomputeConfig> fieldSpec)
        {
            return AllAwsExocomputeConfigs_TypedFieldSpec(fieldSpec);
        }
        public static string AllAwsExocomputeConfigs(object fieldSpecObj)
        {
            return AllAwsExocomputeConfigs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAwsExocomputeConfigsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AwsExocomputeConfig>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<PermissionPolicy>? AllAwsPermissionPolicies
        // GraphQL -> allAwsPermissionPolicies: [PermissionPolicy!]! (type)
        public static string AllAwsPermissionPolicies_TypedFieldSpec(List<PermissionPolicy> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allAwsPermissionPolicies" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAwsPermissionPolicies_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAwsPermissionPolicies((List<PermissionPolicy>)fieldSpecObj);
        }
        public static string AllAwsPermissionPolicies(List<PermissionPolicy> fieldSpec)
        {
            return AllAwsPermissionPolicies_TypedFieldSpec(fieldSpec);
        }
        public static string AllAwsPermissionPolicies(object fieldSpecObj)
        {
            return AllAwsPermissionPolicies_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAwsPermissionPoliciesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<PermissionPolicy>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureArmTemplateByFeature>? AllAzureArmTemplatesByFeature
        // GraphQL -> allAzureArmTemplatesByFeature: [AzureArmTemplateByFeature!]! (type)
        public static string AllAzureArmTemplatesByFeature_TypedFieldSpec(List<AzureArmTemplateByFeature> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allAzureArmTemplatesByFeature" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureArmTemplatesByFeature_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureArmTemplatesByFeature((List<AzureArmTemplateByFeature>)fieldSpecObj);
        }
        public static string AllAzureArmTemplatesByFeature(List<AzureArmTemplateByFeature> fieldSpec)
        {
            return AllAzureArmTemplatesByFeature_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureArmTemplatesByFeature(object fieldSpecObj)
        {
            return AllAzureArmTemplatesByFeature_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureArmTemplatesByFeatureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureArmTemplateByFeature>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureCdmVersion>? AllAzureCdmVersions
        // GraphQL -> allAzureCdmVersions: [AzureCdmVersion!]! (type)
        public static string AllAzureCdmVersions_TypedFieldSpec(List<AzureCdmVersion> fieldSpec)
        {
            string args = "\n(\ncdmVersionRequest: $cdmVersionRequest\n)";
            return "allAzureCdmVersions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureCdmVersions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureCdmVersions((List<AzureCdmVersion>)fieldSpecObj);
        }
        public static string AllAzureCdmVersions(List<AzureCdmVersion> fieldSpec)
        {
            return AllAzureCdmVersions_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureCdmVersions(object fieldSpecObj)
        {
            return AllAzureCdmVersions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureCdmVersionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureCdmVersion>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureSubscriptionMissingPermissions>? AllAzureCloudAccountMissingPermissions
        // GraphQL -> allAzureCloudAccountMissingPermissions: [AzureSubscriptionMissingPermissions!]! (type)
        public static string AllAzureCloudAccountMissingPermissions_TypedFieldSpec(List<AzureSubscriptionMissingPermissions> fieldSpec)
        {
            string args = "\n(\nsessionId: $sessionId\nsubscriptionIds: $subscriptionIds\ncloudAccountAction: $cloudAccountAction\n)";
            return "allAzureCloudAccountMissingPermissions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureCloudAccountMissingPermissions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureCloudAccountMissingPermissions((List<AzureSubscriptionMissingPermissions>)fieldSpecObj);
        }
        public static string AllAzureCloudAccountMissingPermissions(List<AzureSubscriptionMissingPermissions> fieldSpec)
        {
            return AllAzureCloudAccountMissingPermissions_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureCloudAccountMissingPermissions(object fieldSpecObj)
        {
            return AllAzureCloudAccountMissingPermissions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureCloudAccountMissingPermissionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureSubscriptionMissingPermissions>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeSubnet>? AllAzureCloudAccountSubnetsByRegion
        // GraphQL -> allAzureCloudAccountSubnetsByRegion: [AzureNativeSubnet!]! (type)
        public static string AllAzureCloudAccountSubnetsByRegion_TypedFieldSpec(List<AzureNativeSubnet> fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\nregion: $region\n)";
            return "allAzureCloudAccountSubnetsByRegion" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureCloudAccountSubnetsByRegion_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureCloudAccountSubnetsByRegion((List<AzureNativeSubnet>)fieldSpecObj);
        }
        public static string AllAzureCloudAccountSubnetsByRegion(List<AzureNativeSubnet> fieldSpec)
        {
            return AllAzureCloudAccountSubnetsByRegion_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureCloudAccountSubnetsByRegion(object fieldSpecObj)
        {
            return AllAzureCloudAccountSubnetsByRegion_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureCloudAccountSubnetsByRegionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeSubnet>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureSubscriptionWithFeaturesType>? AllAzureCloudAccountSubscriptionsByFeature
        // GraphQL -> allAzureCloudAccountSubscriptionsByFeature: [AzureSubscriptionWithFeaturesType!]! (type)
        public static string AllAzureCloudAccountSubscriptionsByFeature_TypedFieldSpec(List<AzureSubscriptionWithFeaturesType> fieldSpec)
        {
            string args = "\n(\nfeature: $feature\nsubscriptionStatusFilters: $subscriptionStatusFilters\n)";
            return "allAzureCloudAccountSubscriptionsByFeature" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureCloudAccountSubscriptionsByFeature_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureCloudAccountSubscriptionsByFeature((List<AzureSubscriptionWithFeaturesType>)fieldSpecObj);
        }
        public static string AllAzureCloudAccountSubscriptionsByFeature(List<AzureSubscriptionWithFeaturesType> fieldSpec)
        {
            return AllAzureCloudAccountSubscriptionsByFeature_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureCloudAccountSubscriptionsByFeature(object fieldSpecObj)
        {
            return AllAzureCloudAccountSubscriptionsByFeature_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureCloudAccountSubscriptionsByFeatureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureSubscriptionWithFeaturesType>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureCloudAccountTenant>? AllAzureCloudAccountTenants
        // GraphQL -> allAzureCloudAccountTenants: [AzureCloudAccountTenant!]! (type)
        public static string AllAzureCloudAccountTenants_TypedFieldSpec(List<AzureCloudAccountTenant> fieldSpec)
        {
            string args = "\n(\nfeatures: $features\nfeature: $feature\nincludeSubscriptionDetails: $includeSubscriptionDetails\n)";
            return "allAzureCloudAccountTenants" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureCloudAccountTenants_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureCloudAccountTenants((List<AzureCloudAccountTenant>)fieldSpecObj);
        }
        public static string AllAzureCloudAccountTenants(List<AzureCloudAccountTenant> fieldSpec)
        {
            return AllAzureCloudAccountTenants_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureCloudAccountTenants(object fieldSpecObj)
        {
            return AllAzureCloudAccountTenants_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureCloudAccountTenantsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureCloudAccountTenant>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeDiskEncryptionSet>? AllAzureDiskEncryptionSetsByRegion
        // GraphQL -> allAzureDiskEncryptionSetsByRegion: [AzureNativeDiskEncryptionSet!]! (type)
        public static string AllAzureDiskEncryptionSetsByRegion_TypedFieldSpec(List<AzureNativeDiskEncryptionSet> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\nregion: $region\n)";
            return "allAzureDiskEncryptionSetsByRegion" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureDiskEncryptionSetsByRegion_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureDiskEncryptionSetsByRegion((List<AzureNativeDiskEncryptionSet>)fieldSpecObj);
        }
        public static string AllAzureDiskEncryptionSetsByRegion(List<AzureNativeDiskEncryptionSet> fieldSpec)
        {
            return AllAzureDiskEncryptionSetsByRegion_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureDiskEncryptionSetsByRegion(object fieldSpecObj)
        {
            return AllAzureDiskEncryptionSetsByRegion_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureDiskEncryptionSetsByRegionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeDiskEncryptionSet>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureEncryptionKey>? AllAzureEncryptionKeys
        // GraphQL -> allAzureEncryptionKeys: [AzureEncryptionKey!]! (type)
        public static string AllAzureEncryptionKeys_TypedFieldSpec(List<AzureEncryptionKey> fieldSpec)
        {
            string args = "\n(\nazureEncryptionKeysInput: $azureEncryptionKeysInput\n)";
            return "allAzureEncryptionKeys" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureEncryptionKeys_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureEncryptionKeys((List<AzureEncryptionKey>)fieldSpecObj);
        }
        public static string AllAzureEncryptionKeys(List<AzureEncryptionKey> fieldSpec)
        {
            return AllAzureEncryptionKeys_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureEncryptionKeys(object fieldSpecObj)
        {
            return AllAzureEncryptionKeys_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureEncryptionKeysFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureEncryptionKey>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureExocomputeConfigsInAccount>? AllAzureExocomputeConfigsInAccount
        // GraphQL -> allAzureExocomputeConfigsInAccount: [AzureExocomputeConfigsInAccount!]! (type)
        public static string AllAzureExocomputeConfigsInAccount_TypedFieldSpec(List<AzureExocomputeConfigsInAccount> fieldSpec)
        {
            string args = "\n(\nazureExocomputeSearchQuery: $azureExocomputeSearchQuery\ncloudAccountIDs: $cloudAccountIDs\n)";
            return "allAzureExocomputeConfigsInAccount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureExocomputeConfigsInAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureExocomputeConfigsInAccount((List<AzureExocomputeConfigsInAccount>)fieldSpecObj);
        }
        public static string AllAzureExocomputeConfigsInAccount(List<AzureExocomputeConfigsInAccount> fieldSpec)
        {
            return AllAzureExocomputeConfigsInAccount_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureExocomputeConfigsInAccount(object fieldSpecObj)
        {
            return AllAzureExocomputeConfigsInAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureExocomputeConfigsInAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureExocomputeConfigsInAccount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureKeyVault>? AllAzureKeyVaultsByRegion
        // GraphQL -> allAzureKeyVaultsByRegion: [AzureKeyVault!]! (type)
        public static string AllAzureKeyVaultsByRegion_TypedFieldSpec(List<AzureKeyVault> fieldSpec)
        {
            string args = "\n(\nazureKeyVaultsInput: $azureKeyVaultsInput\n)";
            return "allAzureKeyVaultsByRegion" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureKeyVaultsByRegion_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureKeyVaultsByRegion((List<AzureKeyVault>)fieldSpecObj);
        }
        public static string AllAzureKeyVaultsByRegion(List<AzureKeyVault> fieldSpec)
        {
            return AllAzureKeyVaultsByRegion_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureKeyVaultsByRegion(object fieldSpecObj)
        {
            return AllAzureKeyVaultsByRegion_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureKeyVaultsByRegionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureKeyVault>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureManagedIdentity>? AllAzureManagedIdentities
        // GraphQL -> allAzureManagedIdentities: [AzureManagedIdentity!]! (type)
        public static string AllAzureManagedIdentities_TypedFieldSpec(List<AzureManagedIdentity> fieldSpec)
        {
            string args = "\n(\nmanagedIdentitiesRequest: $managedIdentitiesRequest\n)";
            return "allAzureManagedIdentities" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureManagedIdentities_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureManagedIdentities((List<AzureManagedIdentity>)fieldSpecObj);
        }
        public static string AllAzureManagedIdentities(List<AzureManagedIdentity> fieldSpec)
        {
            return AllAzureManagedIdentities_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureManagedIdentities(object fieldSpecObj)
        {
            return AllAzureManagedIdentities_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureManagedIdentitiesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureManagedIdentity>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeAvailabilitySet>? AllAzureNativeAvailabilitySetsByRegionFromAzure
        // GraphQL -> allAzureNativeAvailabilitySetsByRegionFromAzure: [AzureNativeAvailabilitySet!]! (type)
        public static string AllAzureNativeAvailabilitySetsByRegionFromAzure_TypedFieldSpec(List<AzureNativeAvailabilitySet> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\nresourceGroupName: $resourceGroupName\nregion: $region\n)";
            return "allAzureNativeAvailabilitySetsByRegionFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureNativeAvailabilitySetsByRegionFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeAvailabilitySetsByRegionFromAzure((List<AzureNativeAvailabilitySet>)fieldSpecObj);
        }
        public static string AllAzureNativeAvailabilitySetsByRegionFromAzure(List<AzureNativeAvailabilitySet> fieldSpec)
        {
            return AllAzureNativeAvailabilitySetsByRegionFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeAvailabilitySetsByRegionFromAzure(object fieldSpecObj)
        {
            return AllAzureNativeAvailabilitySetsByRegionFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeAvailabilitySetsByRegionFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeAvailabilitySet>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeExportCompatibleDiskTypes>? AllAzureNativeExportCompatibleDiskTypesByRegionFromAzure
        // GraphQL -> allAzureNativeExportCompatibleDiskTypesByRegionFromAzure: [AzureNativeExportCompatibleDiskTypes!]! (type)
        public static string AllAzureNativeExportCompatibleDiskTypesByRegionFromAzure_TypedFieldSpec(List<AzureNativeExportCompatibleDiskTypes> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\nregion: $region\n)";
            return "allAzureNativeExportCompatibleDiskTypesByRegionFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureNativeExportCompatibleDiskTypesByRegionFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeExportCompatibleDiskTypesByRegionFromAzure((List<AzureNativeExportCompatibleDiskTypes>)fieldSpecObj);
        }
        public static string AllAzureNativeExportCompatibleDiskTypesByRegionFromAzure(List<AzureNativeExportCompatibleDiskTypes> fieldSpec)
        {
            return AllAzureNativeExportCompatibleDiskTypesByRegionFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeExportCompatibleDiskTypesByRegionFromAzure(object fieldSpecObj)
        {
            return AllAzureNativeExportCompatibleDiskTypesByRegionFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeExportCompatibleDiskTypesByRegionFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeExportCompatibleDiskTypes>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeExportCompatibleVmSizes>? AllAzureNativeExportCompatibleVmSizesByRegionFromAzure
        // GraphQL -> allAzureNativeExportCompatibleVmSizesByRegionFromAzure: [AzureNativeExportCompatibleVmSizes!]! (type)
        public static string AllAzureNativeExportCompatibleVmSizesByRegionFromAzure_TypedFieldSpec(List<AzureNativeExportCompatibleVmSizes> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\nregion: $region\nvmSnapshotId: $vmSnapshotId\n)";
            return "allAzureNativeExportCompatibleVmSizesByRegionFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureNativeExportCompatibleVmSizesByRegionFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeExportCompatibleVmSizesByRegionFromAzure((List<AzureNativeExportCompatibleVmSizes>)fieldSpecObj);
        }
        public static string AllAzureNativeExportCompatibleVmSizesByRegionFromAzure(List<AzureNativeExportCompatibleVmSizes> fieldSpec)
        {
            return AllAzureNativeExportCompatibleVmSizesByRegionFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeExportCompatibleVmSizesByRegionFromAzure(object fieldSpecObj)
        {
            return AllAzureNativeExportCompatibleVmSizesByRegionFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeExportCompatibleVmSizesByRegionFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeExportCompatibleVmSizes>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureResourceGroupInfo>? AllAzureNativeResourceGroupsInfoIfExist
        // GraphQL -> allAzureNativeResourceGroupsInfoIfExist: [AzureResourceGroupInfo!]! (type)
        public static string AllAzureNativeResourceGroupsInfoIfExist_TypedFieldSpec(List<AzureResourceGroupInfo> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allAzureNativeResourceGroupsInfoIfExist" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureNativeResourceGroupsInfoIfExist_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeResourceGroupsInfoIfExist((List<AzureResourceGroupInfo>)fieldSpecObj);
        }
        public static string AllAzureNativeResourceGroupsInfoIfExist(List<AzureResourceGroupInfo> fieldSpec)
        {
            return AllAzureNativeResourceGroupsInfoIfExist_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeResourceGroupsInfoIfExist(object fieldSpecObj)
        {
            return AllAzureNativeResourceGroupsInfoIfExist_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeResourceGroupsInfoIfExistFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureResourceGroupInfo>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeSecurityGroup>? AllAzureNativeSecurityGroupsByRegionFromAzure
        // GraphQL -> allAzureNativeSecurityGroupsByRegionFromAzure: [AzureNativeSecurityGroup!]! (type)
        public static string AllAzureNativeSecurityGroupsByRegionFromAzure_TypedFieldSpec(List<AzureNativeSecurityGroup> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\nregion: $region\n)";
            return "allAzureNativeSecurityGroupsByRegionFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureNativeSecurityGroupsByRegionFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeSecurityGroupsByRegionFromAzure((List<AzureNativeSecurityGroup>)fieldSpecObj);
        }
        public static string AllAzureNativeSecurityGroupsByRegionFromAzure(List<AzureNativeSecurityGroup> fieldSpec)
        {
            return AllAzureNativeSecurityGroupsByRegionFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeSecurityGroupsByRegionFromAzure(object fieldSpecObj)
        {
            return AllAzureNativeSecurityGroupsByRegionFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeSecurityGroupsByRegionFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeSecurityGroup>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeStorageAccount>? AllAzureNativeStorageAccountsFromAzure
        // GraphQL -> allAzureNativeStorageAccountsFromAzure: [AzureNativeStorageAccount!]! (type)
        public static string AllAzureNativeStorageAccountsFromAzure_TypedFieldSpec(List<AzureNativeStorageAccount> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\n)";
            return "allAzureNativeStorageAccountsFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureNativeStorageAccountsFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeStorageAccountsFromAzure((List<AzureNativeStorageAccount>)fieldSpecObj);
        }
        public static string AllAzureNativeStorageAccountsFromAzure(List<AzureNativeStorageAccount> fieldSpec)
        {
            return AllAzureNativeStorageAccountsFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeStorageAccountsFromAzure(object fieldSpecObj)
        {
            return AllAzureNativeStorageAccountsFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeStorageAccountsFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeStorageAccount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeSubnet>? AllAzureNativeSubnetsByRegionFromAzure
        // GraphQL -> allAzureNativeSubnetsByRegionFromAzure: [AzureNativeSubnet!]! (type)
        public static string AllAzureNativeSubnetsByRegionFromAzure_TypedFieldSpec(List<AzureNativeSubnet> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\nregion: $region\n)";
            return "allAzureNativeSubnetsByRegionFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureNativeSubnetsByRegionFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeSubnetsByRegionFromAzure((List<AzureNativeSubnet>)fieldSpecObj);
        }
        public static string AllAzureNativeSubnetsByRegionFromAzure(List<AzureNativeSubnet> fieldSpec)
        {
            return AllAzureNativeSubnetsByRegionFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeSubnetsByRegionFromAzure(object fieldSpecObj)
        {
            return AllAzureNativeSubnetsByRegionFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeSubnetsByRegionFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeSubnet>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureNativeVirtualNetwork>? AllAzureNativeVirtualNetworks
        // GraphQL -> allAzureNativeVirtualNetworks: [AzureNativeVirtualNetwork!]! (type)
        public static string AllAzureNativeVirtualNetworks_TypedFieldSpec(List<AzureNativeVirtualNetwork> fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\n)";
            return "allAzureNativeVirtualNetworks" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureNativeVirtualNetworks_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureNativeVirtualNetworks((List<AzureNativeVirtualNetwork>)fieldSpecObj);
        }
        public static string AllAzureNativeVirtualNetworks(List<AzureNativeVirtualNetwork> fieldSpec)
        {
            return AllAzureNativeVirtualNetworks_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureNativeVirtualNetworks(object fieldSpecObj)
        {
            return AllAzureNativeVirtualNetworks_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureNativeVirtualNetworksFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureNativeVirtualNetwork>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureSqlDatabaseServerElasticPool>? AllAzureSqlDatabaseServerElasticPools
        // GraphQL -> allAzureSqlDatabaseServerElasticPools: [AzureSqlDatabaseServerElasticPool!]! (type)
        public static string AllAzureSqlDatabaseServerElasticPools_TypedFieldSpec(List<AzureSqlDatabaseServerElasticPool> fieldSpec)
        {
            string args = "\n(\nsubscriptionId: $subscriptionId\nresourceGroupName: $resourceGroupName\nazureSqlDatabaseServerName: $azureSqlDatabaseServerName\nazureSqlDatabaseServerRubrikId: $azureSqlDatabaseServerRubrikId\n)";
            return "allAzureSqlDatabaseServerElasticPools" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureSqlDatabaseServerElasticPools_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureSqlDatabaseServerElasticPools((List<AzureSqlDatabaseServerElasticPool>)fieldSpecObj);
        }
        public static string AllAzureSqlDatabaseServerElasticPools(List<AzureSqlDatabaseServerElasticPool> fieldSpec)
        {
            return AllAzureSqlDatabaseServerElasticPools_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureSqlDatabaseServerElasticPools(object fieldSpecObj)
        {
            return AllAzureSqlDatabaseServerElasticPools_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureSqlDatabaseServerElasticPoolsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureSqlDatabaseServerElasticPool>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureStorageAccountCcprovision>? AllAzureStorageAccountsByRegion
        // GraphQL -> allAzureStorageAccountsByRegion: [AzureStorageAccountCcprovision!]! (type)
        public static string AllAzureStorageAccountsByRegion_TypedFieldSpec(List<AzureStorageAccountCcprovision> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allAzureStorageAccountsByRegion" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureStorageAccountsByRegion_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureStorageAccountsByRegion((List<AzureStorageAccountCcprovision>)fieldSpecObj);
        }
        public static string AllAzureStorageAccountsByRegion(List<AzureStorageAccountCcprovision> fieldSpec)
        {
            return AllAzureStorageAccountsByRegion_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureStorageAccountsByRegion(object fieldSpecObj)
        {
            return AllAzureStorageAccountsByRegion_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureStorageAccountsByRegionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureStorageAccountCcprovision>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureSubscriptionWithExocomputeMapping>? AllAzureSubscriptionWithExocomputeMappings
        // GraphQL -> allAzureSubscriptionWithExocomputeMappings: [AzureSubscriptionWithExocomputeMapping!]! (type)
        public static string AllAzureSubscriptionWithExocomputeMappings_TypedFieldSpec(List<AzureSubscriptionWithExocomputeMapping> fieldSpec)
        {
            string args = "\n(\nfeatures: $features\nexocomputeSubscriptionIdsFilter: $exocomputeSubscriptionIdsFilter\n)";
            return "allAzureSubscriptionWithExocomputeMappings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllAzureSubscriptionWithExocomputeMappings_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllAzureSubscriptionWithExocomputeMappings((List<AzureSubscriptionWithExocomputeMapping>)fieldSpecObj);
        }
        public static string AllAzureSubscriptionWithExocomputeMappings(List<AzureSubscriptionWithExocomputeMapping> fieldSpec)
        {
            return AllAzureSubscriptionWithExocomputeMappings_TypedFieldSpec(fieldSpec);
        }
        public static string AllAzureSubscriptionWithExocomputeMappings(object fieldSpecObj)
        {
            return AllAzureSubscriptionWithExocomputeMappings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllAzureSubscriptionWithExocomputeMappingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureSubscriptionWithExocomputeMapping>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<CdmGuestCredential>? AllCdmGuestCredentials
        // GraphQL -> allCdmGuestCredentials: [CdmGuestCredential!]! (type)
        public static string AllCdmGuestCredentials_TypedFieldSpec(List<CdmGuestCredential> fieldSpec)
        {
            string args = "\n(\nclusterUuids: $clusterUuids\n)";
            return "allCdmGuestCredentials" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCdmGuestCredentials_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCdmGuestCredentials((List<CdmGuestCredential>)fieldSpecObj);
        }
        public static string AllCdmGuestCredentials(List<CdmGuestCredential> fieldSpec)
        {
            return AllCdmGuestCredentials_TypedFieldSpec(fieldSpec);
        }
        public static string AllCdmGuestCredentials(object fieldSpecObj)
        {
            return AllCdmGuestCredentials_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCdmGuestCredentialsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CdmGuestCredential>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<CdmOvaDetail>? AllCdmOvaDetails
        // GraphQL -> allCdmOvaDetails: [CdmOvaDetail!]! (type)
        public static string AllCdmOvaDetails_TypedFieldSpec(List<CdmOvaDetail> fieldSpec)
        {
            string args = "";
            return "allCdmOvaDetails" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCdmOvaDetails_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCdmOvaDetails((List<CdmOvaDetail>)fieldSpecObj);
        }
        public static string AllCdmOvaDetails(List<CdmOvaDetail> fieldSpec)
        {
            return AllCdmOvaDetails_TypedFieldSpec(fieldSpec);
        }
        public static string AllCdmOvaDetails(object fieldSpecObj)
        {
            return AllCdmOvaDetails_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCdmOvaDetailsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CdmOvaDetail>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdpVmInfoConnection? AllCdpVmsInfos
        // GraphQL -> allCdpVmsInfos: CdpVmInfoConnection! (type)
        public static string AllCdpVmsInfos_TypedFieldSpec(CdpVmInfoConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nallCdpVmInfoSort: $allCdpVmInfoSort\nallCdpVmInfoFilter: $allCdpVmInfoFilter\n)";
            return "allCdpVmsInfos" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCdpVmsInfos_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCdpVmsInfos((CdpVmInfoConnection)fieldSpecObj);
        }
        public static string AllCdpVmsInfos(CdpVmInfoConnection fieldSpec)
        {
            return AllCdpVmsInfos_TypedFieldSpec(fieldSpec);
        }
        public static string AllCdpVmsInfos(object fieldSpecObj)
        {
            return AllCdpVmsInfos_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCdpVmsInfosFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdpVmInfoConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<CloudAccountsExocomputeAccountMapping>? AllCloudAccountExocomputeMappings
        // GraphQL -> allCloudAccountExocomputeMappings: [CloudAccountsExocomputeAccountMapping!]! (type)
        public static string AllCloudAccountExocomputeMappings_TypedFieldSpec(List<CloudAccountsExocomputeAccountMapping> fieldSpec)
        {
            string args = "\n(\ncloudVendor: $cloudVendor\nexocomputeAccountIdsFilter: $exocomputeAccountIdsFilter\n)";
            return "allCloudAccountExocomputeMappings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCloudAccountExocomputeMappings_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudAccountExocomputeMappings((List<CloudAccountsExocomputeAccountMapping>)fieldSpecObj);
        }
        public static string AllCloudAccountExocomputeMappings(List<CloudAccountsExocomputeAccountMapping> fieldSpec)
        {
            return AllCloudAccountExocomputeMappings_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudAccountExocomputeMappings(object fieldSpecObj)
        {
            return AllCloudAccountExocomputeMappings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudAccountExocomputeMappingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CloudAccountsExocomputeAccountMapping>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<ShareExportIdPair>? AllCloudDirectShares
        // GraphQL -> allCloudDirectShares: [ShareExportIdPair!]! (type)
        public static string AllCloudDirectShares_TypedFieldSpec(List<ShareExportIdPair> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allCloudDirectShares" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCloudDirectShares_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudDirectShares((List<ShareExportIdPair>)fieldSpecObj);
        }
        public static string AllCloudDirectShares(List<ShareExportIdPair> fieldSpec)
        {
            return AllCloudDirectShares_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudDirectShares(object fieldSpecObj)
        {
            return AllCloudDirectShares_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudDirectSharesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<ShareExportIdPair>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<CloudDirectSite>? AllCloudDirectSites
        // GraphQL -> allCloudDirectSites: [CloudDirectSite!]! (type)
        public static string AllCloudDirectSites_TypedFieldSpec(List<CloudDirectSite> fieldSpec)
        {
            string args = "";
            return "allCloudDirectSites" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCloudDirectSites_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCloudDirectSites((List<CloudDirectSite>)fieldSpecObj);
        }
        public static string AllCloudDirectSites(List<CloudDirectSite> fieldSpec)
        {
            return AllCloudDirectSites_TypedFieldSpec(fieldSpec);
        }
        public static string AllCloudDirectSites(object fieldSpecObj)
        {
            return AllCloudDirectSites_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCloudDirectSitesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CloudDirectSite>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterConnection? AllClusterConnection
        // GraphQL -> allClusterConnection: ClusterConnection! (type)
        public static string AllClusterConnection_TypedFieldSpec(ClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\nsortOrder: $sortOrder\nsortBy: $sortBy\n)";
            return "allClusterConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllClusterConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllClusterConnection((ClusterConnection)fieldSpecObj);
        }
        public static string AllClusterConnection(ClusterConnection fieldSpec)
        {
            return AllClusterConnection_TypedFieldSpec(fieldSpec);
        }
        public static string AllClusterConnection(object fieldSpecObj)
        {
            return AllClusterConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllClusterConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<SlaInfo>? AllClusterGlobalSlas
        // GraphQL -> allClusterGlobalSlas: [SlaInfo!]! (type)
        public static string AllClusterGlobalSlas_TypedFieldSpec(List<SlaInfo> fieldSpec)
        {
            string args = "\n(\ncdmClusterUUID: $cdmClusterUUID\n)";
            return "allClusterGlobalSlas" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllClusterGlobalSlas_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllClusterGlobalSlas((List<SlaInfo>)fieldSpecObj);
        }
        public static string AllClusterGlobalSlas(List<SlaInfo> fieldSpec)
        {
            return AllClusterGlobalSlas_TypedFieldSpec(fieldSpec);
        }
        public static string AllClusterGlobalSlas(object fieldSpecObj)
        {
            return AllClusterGlobalSlas_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllClusterGlobalSlasFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<SlaInfo>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<ClusterReplicationTarget>? AllClusterReplicationTargets
        // GraphQL -> allClusterReplicationTargets: [ClusterReplicationTarget!]! (type)
        public static string AllClusterReplicationTargets_TypedFieldSpec(List<ClusterReplicationTarget> fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "allClusterReplicationTargets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllClusterReplicationTargets_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllClusterReplicationTargets((List<ClusterReplicationTarget>)fieldSpecObj);
        }
        public static string AllClusterReplicationTargets(List<ClusterReplicationTarget> fieldSpec)
        {
            return AllClusterReplicationTargets_TypedFieldSpec(fieldSpec);
        }
        public static string AllClusterReplicationTargets(object fieldSpecObj)
        {
            return AllClusterReplicationTargets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllClusterReplicationTargetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<ClusterReplicationTarget>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<ClusterWebCertAndIpmi>? AllClusterWebCertsAndIpmis
        // GraphQL -> allClusterWebCertsAndIpmis: [ClusterWebCertAndIpmi!]! (type)
        public static string AllClusterWebCertsAndIpmis_TypedFieldSpec(List<ClusterWebCertAndIpmi> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allClusterWebCertsAndIpmis" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllClusterWebCertsAndIpmis_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllClusterWebCertsAndIpmis((List<ClusterWebCertAndIpmi>)fieldSpecObj);
        }
        public static string AllClusterWebCertsAndIpmis(List<ClusterWebCertAndIpmi> fieldSpec)
        {
            return AllClusterWebCertsAndIpmis_TypedFieldSpec(fieldSpec);
        }
        public static string AllClusterWebCertsAndIpmis(object fieldSpecObj)
        {
            return AllClusterWebCertsAndIpmis_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllClusterWebCertsAndIpmisFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<ClusterWebCertAndIpmi>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<DataLocationSupportedCluster>? AllConnectedClusters
        // GraphQL -> allConnectedClusters: [DataLocationSupportedCluster!]! (type)
        public static string AllConnectedClusters_TypedFieldSpec(List<DataLocationSupportedCluster> fieldSpec)
        {
            string args = "\n(\nclusterFilterArg: $clusterFilterArg\n)";
            return "allConnectedClusters" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllConnectedClusters_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllConnectedClusters((List<DataLocationSupportedCluster>)fieldSpecObj);
        }
        public static string AllConnectedClusters(List<DataLocationSupportedCluster> fieldSpec)
        {
            return AllConnectedClusters_TypedFieldSpec(fieldSpec);
        }
        public static string AllConnectedClusters(object fieldSpecObj)
        {
            return AllConnectedClusters_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllConnectedClustersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<DataLocationSupportedCluster>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<CloudAccountFeaturePermission>? AllCurrentFeaturePermissionsForCloudAccounts
        // GraphQL -> allCurrentFeaturePermissionsForCloudAccounts: [CloudAccountFeaturePermission!]! (type)
        public static string AllCurrentFeaturePermissionsForCloudAccounts_TypedFieldSpec(List<CloudAccountFeaturePermission> fieldSpec)
        {
            string args = "\n(\ncloudVendor: $cloudVendor\ncloudAccountIds: $cloudAccountIds\n)";
            return "allCurrentFeaturePermissionsForCloudAccounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCurrentFeaturePermissionsForCloudAccounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCurrentFeaturePermissionsForCloudAccounts((List<CloudAccountFeaturePermission>)fieldSpecObj);
        }
        public static string AllCurrentFeaturePermissionsForCloudAccounts(List<CloudAccountFeaturePermission> fieldSpec)
        {
            return AllCurrentFeaturePermissionsForCloudAccounts_TypedFieldSpec(fieldSpec);
        }
        public static string AllCurrentFeaturePermissionsForCloudAccounts(object fieldSpecObj)
        {
            return AllCurrentFeaturePermissionsForCloudAccounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCurrentFeaturePermissionsForCloudAccountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CloudAccountFeaturePermission>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<IdentityProvider>? AllCurrentOrgIdentityProviders
        // GraphQL -> allCurrentOrgIdentityProviders: [IdentityProvider!]! (type)
        public static string AllCurrentOrgIdentityProviders_TypedFieldSpec(List<IdentityProvider> fieldSpec)
        {
            string args = "";
            return "allCurrentOrgIdentityProviders" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllCurrentOrgIdentityProviders_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllCurrentOrgIdentityProviders((List<IdentityProvider>)fieldSpecObj);
        }
        public static string AllCurrentOrgIdentityProviders(List<IdentityProvider> fieldSpec)
        {
            return AllCurrentOrgIdentityProviders_TypedFieldSpec(fieldSpec);
        }
        public static string AllCurrentOrgIdentityProviders(object fieldSpecObj)
        {
            return AllCurrentOrgIdentityProviders_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllCurrentOrgIdentityProvidersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<IdentityProvider>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<DbParameterGroup>? AllDbParameterGroupsByRegionFromAws
        // GraphQL -> allDbParameterGroupsByRegionFromAws: [DbParameterGroup!]! (type)
        public static string AllDbParameterGroupsByRegionFromAws_TypedFieldSpec(List<DbParameterGroup> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\ndbEngine: $dbEngine\ndbEngineVersion: $dbEngineVersion\nrdsType: $rdsType\n)";
            return "allDbParameterGroupsByRegionFromAws" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllDbParameterGroupsByRegionFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllDbParameterGroupsByRegionFromAws((List<DbParameterGroup>)fieldSpecObj);
        }
        public static string AllDbParameterGroupsByRegionFromAws(List<DbParameterGroup> fieldSpec)
        {
            return AllDbParameterGroupsByRegionFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllDbParameterGroupsByRegionFromAws(object fieldSpecObj)
        {
            return AllDbParameterGroupsByRegionFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllDbParameterGroupsByRegionFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<DbParameterGroup>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<SubnetGroup>? AllDbSubnetGroupsByRegionFromAws
        // GraphQL -> allDbSubnetGroupsByRegionFromAws: [SubnetGroup!]! (type)
        public static string AllDbSubnetGroupsByRegionFromAws_TypedFieldSpec(List<SubnetGroup> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\n)";
            return "allDbSubnetGroupsByRegionFromAws" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllDbSubnetGroupsByRegionFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllDbSubnetGroupsByRegionFromAws((List<SubnetGroup>)fieldSpecObj);
        }
        public static string AllDbSubnetGroupsByRegionFromAws(List<SubnetGroup> fieldSpec)
        {
            return AllDbSubnetGroupsByRegionFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllDbSubnetGroupsByRegionFromAws(object fieldSpecObj)
        {
            return AllDbSubnetGroupsByRegionFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllDbSubnetGroupsByRegionFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<SubnetGroup>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<DhrcActiveRecommendation>? AllDhrcActiveRecommendations
        // GraphQL -> allDhrcActiveRecommendations: [DhrcActiveRecommendation!]! (type)
        public static string AllDhrcActiveRecommendations_TypedFieldSpec(List<DhrcActiveRecommendation> fieldSpec)
        {
            string args = "\n(\ncategories: $categories\n)";
            return "allDhrcActiveRecommendations" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllDhrcActiveRecommendations_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllDhrcActiveRecommendations((List<DhrcActiveRecommendation>)fieldSpecObj);
        }
        public static string AllDhrcActiveRecommendations(List<DhrcActiveRecommendation> fieldSpec)
        {
            return AllDhrcActiveRecommendations_TypedFieldSpec(fieldSpec);
        }
        public static string AllDhrcActiveRecommendations(object fieldSpecObj)
        {
            return AllDhrcActiveRecommendations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllDhrcActiveRecommendationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<DhrcActiveRecommendation>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<DhrcCollectedMetric>? AllDhrcLatestMetrics
        // GraphQL -> allDhrcLatestMetrics: [DhrcCollectedMetric!]! (type)
        public static string AllDhrcLatestMetrics_TypedFieldSpec(List<DhrcCollectedMetric> fieldSpec)
        {
            string args = "\n(\ncategories: $categories\n)";
            return "allDhrcLatestMetrics" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllDhrcLatestMetrics_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllDhrcLatestMetrics((List<DhrcCollectedMetric>)fieldSpecObj);
        }
        public static string AllDhrcLatestMetrics(List<DhrcCollectedMetric> fieldSpec)
        {
            return AllDhrcLatestMetrics_TypedFieldSpec(fieldSpec);
        }
        public static string AllDhrcLatestMetrics(object fieldSpecObj)
        {
            return AllDhrcLatestMetrics_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllDhrcLatestMetricsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<DhrcCollectedMetric>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<DhrcScore>? AllDhrcScores
        // GraphQL -> allDhrcScores: [DhrcScore!]! (type)
        public static string AllDhrcScores_TypedFieldSpec(List<DhrcScore> fieldSpec)
        {
            string args = "\n(\ncategories: $categories\nbeginTime: $beginTime\ntimespan: $timespan\n)";
            return "allDhrcScores" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllDhrcScores_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllDhrcScores((List<DhrcScore>)fieldSpecObj);
        }
        public static string AllDhrcScores(List<DhrcScore> fieldSpec)
        {
            return AllDhrcScores_TypedFieldSpec(fieldSpec);
        }
        public static string AllDhrcScores(object fieldSpecObj)
        {
            return AllDhrcScores_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllDhrcScoresFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<DhrcScore>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<EventDigest>? AllDistributionListDigests
        // GraphQL -> allDistributionListDigests: [EventDigest!]! (type)
        public static string AllDistributionListDigests_TypedFieldSpec(List<EventDigest> fieldSpec)
        {
            string args = "";
            return "allDistributionListDigests" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllDistributionListDigests_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllDistributionListDigests((List<EventDigest>)fieldSpecObj);
        }
        public static string AllDistributionListDigests(List<EventDigest> fieldSpec)
        {
            return AllDistributionListDigests_TypedFieldSpec(fieldSpec);
        }
        public static string AllDistributionListDigests(object fieldSpecObj)
        {
            return AllDistributionListDigests_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllDistributionListDigestsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<EventDigest>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<RbacPermission>? AllEffectiveRbacPermissions
        // GraphQL -> allEffectiveRbacPermissions: [RbacPermission!]! (type)
        public static string AllEffectiveRbacPermissions_TypedFieldSpec(List<RbacPermission> fieldSpec)
        {
            string args = "\n(\nroleId: $roleId\n)";
            return "allEffectiveRbacPermissions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllEffectiveRbacPermissions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllEffectiveRbacPermissions((List<RbacPermission>)fieldSpecObj);
        }
        public static string AllEffectiveRbacPermissions(List<RbacPermission> fieldSpec)
        {
            return AllEffectiveRbacPermissions_TypedFieldSpec(fieldSpec);
        }
        public static string AllEffectiveRbacPermissions(object fieldSpecObj)
        {
            return AllEffectiveRbacPermissions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllEffectiveRbacPermissionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<RbacPermission>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AllEnabledFeaturesForAccountReply? AllEnabledFeaturesForAccount
        // GraphQL -> allEnabledFeaturesForAccount: AllEnabledFeaturesForAccountReply! (type)
        public static string AllEnabledFeaturesForAccount_TypedFieldSpec(AllEnabledFeaturesForAccountReply fieldSpec)
        {
            string args = "";
            return "allEnabledFeaturesForAccount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllEnabledFeaturesForAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllEnabledFeaturesForAccount((AllEnabledFeaturesForAccountReply)fieldSpecObj);
        }
        public static string AllEnabledFeaturesForAccount(AllEnabledFeaturesForAccountReply fieldSpec)
        {
            return AllEnabledFeaturesForAccount_TypedFieldSpec(fieldSpec);
        }
        public static string AllEnabledFeaturesForAccount(object fieldSpecObj)
        {
            return AllEnabledFeaturesForAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllEnabledFeaturesForAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AllEnabledFeaturesForAccountReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<EventDigest>? AllEventDigests
        // GraphQL -> allEventDigests: [EventDigest!]! (type)
        public static string AllEventDigests_TypedFieldSpec(List<EventDigest> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allEventDigests" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllEventDigests_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllEventDigests((List<EventDigest>)fieldSpecObj);
        }
        public static string AllEventDigests(List<EventDigest> fieldSpec)
        {
            return AllEventDigests_TypedFieldSpec(fieldSpec);
        }
        public static string AllEventDigests(object fieldSpecObj)
        {
            return AllEventDigests_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllEventDigestsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<EventDigest>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GcpPermission>? AllFeaturePermissionsForGcpCloudAccount
        // GraphQL -> allFeaturePermissionsForGcpCloudAccount: [GcpPermission!]! (type)
        public static string AllFeaturePermissionsForGcpCloudAccount_TypedFieldSpec(List<GcpPermission> fieldSpec)
        {
            string args = "\n(\nfeature: $feature\n)";
            return "allFeaturePermissionsForGcpCloudAccount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllFeaturePermissionsForGcpCloudAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllFeaturePermissionsForGcpCloudAccount((List<GcpPermission>)fieldSpecObj);
        }
        public static string AllFeaturePermissionsForGcpCloudAccount(List<GcpPermission> fieldSpec)
        {
            return AllFeaturePermissionsForGcpCloudAccount_TypedFieldSpec(fieldSpec);
        }
        public static string AllFeaturePermissionsForGcpCloudAccount(object fieldSpecObj)
        {
            return AllFeaturePermissionsForGcpCloudAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllFeaturePermissionsForGcpCloudAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GcpPermission>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UserActivityResultConnection? AllFileActivities
        // GraphQL -> allFileActivities: UserActivityResultConnection! (type)
        public static string AllFileActivities_TypedFieldSpec(UserActivityResultConnection fieldSpec)
        {
            string args = "\n(\nListFileActivitiesInput: $ListFileActivitiesInput\nFileActivitiesSort: $FileActivitiesSort\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "allFileActivities" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllFileActivities_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllFileActivities((UserActivityResultConnection)fieldSpecObj);
        }
        public static string AllFileActivities(UserActivityResultConnection fieldSpec)
        {
            return AllFileActivities_TypedFieldSpec(fieldSpec);
        }
        public static string AllFileActivities(object fieldSpecObj)
        {
            return AllFileActivities_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllFileActivitiesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UserActivityResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GcpCloudAccountMissingPermissionsForAddition>? AllGcpCloudAccountMissingPermissionsForAddition
        // GraphQL -> allGcpCloudAccountMissingPermissionsForAddition: [GcpCloudAccountMissingPermissionsForAddition!]! (type)
        public static string AllGcpCloudAccountMissingPermissionsForAddition_TypedFieldSpec(List<GcpCloudAccountMissingPermissionsForAddition> fieldSpec)
        {
            string args = "\n(\nsessionId: $sessionId\nprojectIds: $projectIds\n)";
            return "allGcpCloudAccountMissingPermissionsForAddition" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllGcpCloudAccountMissingPermissionsForAddition_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpCloudAccountMissingPermissionsForAddition((List<GcpCloudAccountMissingPermissionsForAddition>)fieldSpecObj);
        }
        public static string AllGcpCloudAccountMissingPermissionsForAddition(List<GcpCloudAccountMissingPermissionsForAddition> fieldSpec)
        {
            return AllGcpCloudAccountMissingPermissionsForAddition_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpCloudAccountMissingPermissionsForAddition(object fieldSpecObj)
        {
            return AllGcpCloudAccountMissingPermissionsForAddition_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpCloudAccountMissingPermissionsForAdditionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GcpCloudAccountMissingPermissionsForAddition>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GcpCloudAccountProjectDetail>? AllGcpCloudAccountProjectsByFeature
        // GraphQL -> allGcpCloudAccountProjectsByFeature: [GcpCloudAccountProjectDetail!]! (type)
        public static string AllGcpCloudAccountProjectsByFeature_TypedFieldSpec(List<GcpCloudAccountProjectDetail> fieldSpec)
        {
            string args = "\n(\nfeature: $feature\nprojectStatusFilters: $projectStatusFilters\nprojectSearchText: $projectSearchText\n)";
            return "allGcpCloudAccountProjectsByFeature" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllGcpCloudAccountProjectsByFeature_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpCloudAccountProjectsByFeature((List<GcpCloudAccountProjectDetail>)fieldSpecObj);
        }
        public static string AllGcpCloudAccountProjectsByFeature(List<GcpCloudAccountProjectDetail> fieldSpec)
        {
            return AllGcpCloudAccountProjectsByFeature_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpCloudAccountProjectsByFeature(object fieldSpecObj)
        {
            return AllGcpCloudAccountProjectsByFeature_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpCloudAccountProjectsByFeatureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GcpCloudAccountProjectDetail>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GcpCloudAccountProjectForOauth>? AllGcpCloudAccountProjectsForOauth
        // GraphQL -> allGcpCloudAccountProjectsForOauth: [GcpCloudAccountProjectForOauth!]! (type)
        public static string AllGcpCloudAccountProjectsForOauth_TypedFieldSpec(List<GcpCloudAccountProjectForOauth> fieldSpec)
        {
            string args = "\n(\nsessionId: $sessionId\nfeatures: $features\ncheckPermissions: $checkPermissions\n)";
            return "allGcpCloudAccountProjectsForOauth" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllGcpCloudAccountProjectsForOauth_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpCloudAccountProjectsForOauth((List<GcpCloudAccountProjectForOauth>)fieldSpecObj);
        }
        public static string AllGcpCloudAccountProjectsForOauth(List<GcpCloudAccountProjectForOauth> fieldSpec)
        {
            return AllGcpCloudAccountProjectsForOauth_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpCloudAccountProjectsForOauth(object fieldSpecObj)
        {
            return AllGcpCloudAccountProjectsForOauth_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpCloudAccountProjectsForOauthFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GcpCloudAccountProjectForOauth>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GcpNativeKmsCryptoKey>? AllGcpNativeAvailableKmsCryptoKeys
        // GraphQL -> allGcpNativeAvailableKmsCryptoKeys: [GcpNativeKmsCryptoKey!]! (type)
        public static string AllGcpNativeAvailableKmsCryptoKeys_TypedFieldSpec(List<GcpNativeKmsCryptoKey> fieldSpec)
        {
            string args = "\n(\nprojectId: $projectId\nregionName: $regionName\n)";
            return "allGcpNativeAvailableKmsCryptoKeys" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllGcpNativeAvailableKmsCryptoKeys_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeAvailableKmsCryptoKeys((List<GcpNativeKmsCryptoKey>)fieldSpecObj);
        }
        public static string AllGcpNativeAvailableKmsCryptoKeys(List<GcpNativeKmsCryptoKey> fieldSpec)
        {
            return AllGcpNativeAvailableKmsCryptoKeys_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeAvailableKmsCryptoKeys(object fieldSpecObj)
        {
            return AllGcpNativeAvailableKmsCryptoKeys_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeAvailableKmsCryptoKeysFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GcpNativeKmsCryptoKey>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GcpNativeNetwork>? AllGcpNativeNetworks
        // GraphQL -> allGcpNativeNetworks: [GcpNativeNetwork!]! (type)
        public static string AllGcpNativeNetworks_TypedFieldSpec(List<GcpNativeNetwork> fieldSpec)
        {
            string args = "\n(\nprojectId: $projectId\n)";
            return "allGcpNativeNetworks" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllGcpNativeNetworks_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeNetworks((List<GcpNativeNetwork>)fieldSpecObj);
        }
        public static string AllGcpNativeNetworks(List<GcpNativeNetwork> fieldSpec)
        {
            return AllGcpNativeNetworks_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeNetworks(object fieldSpecObj)
        {
            return AllGcpNativeNetworks_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeNetworksFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GcpNativeNetwork>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<NetworkHostProject>? AllGcpNativeProjectsWithAccessibleNetworks
        // GraphQL -> allGcpNativeProjectsWithAccessibleNetworks: [NetworkHostProject!]! (type)
        public static string AllGcpNativeProjectsWithAccessibleNetworks_TypedFieldSpec(List<NetworkHostProject> fieldSpec)
        {
            string args = "\n(\nprojectId: $projectId\n)";
            return "allGcpNativeProjectsWithAccessibleNetworks" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllGcpNativeProjectsWithAccessibleNetworks_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeProjectsWithAccessibleNetworks((List<NetworkHostProject>)fieldSpecObj);
        }
        public static string AllGcpNativeProjectsWithAccessibleNetworks(List<NetworkHostProject> fieldSpec)
        {
            return AllGcpNativeProjectsWithAccessibleNetworks_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeProjectsWithAccessibleNetworks(object fieldSpecObj)
        {
            return AllGcpNativeProjectsWithAccessibleNetworks_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeProjectsWithAccessibleNetworksFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<NetworkHostProject>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GcpNativeRegion>? AllGcpNativeRegions
        // GraphQL -> allGcpNativeRegions: [GcpNativeRegion!]! (type)
        public static string AllGcpNativeRegions_TypedFieldSpec(List<GcpNativeRegion> fieldSpec)
        {
            string args = "\n(\nprojectId: $projectId\n)";
            return "allGcpNativeRegions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllGcpNativeRegions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllGcpNativeRegions((List<GcpNativeRegion>)fieldSpecObj);
        }
        public static string AllGcpNativeRegions(List<GcpNativeRegion> fieldSpec)
        {
            return AllGcpNativeRegions_TypedFieldSpec(fieldSpec);
        }
        public static string AllGcpNativeRegions(object fieldSpecObj)
        {
            return AllGcpNativeRegions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllGcpNativeRegionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GcpNativeRegion>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureRegionsResp? AllHostedAzureRegions
        // GraphQL -> allHostedAzureRegions: AzureRegionsResp! (type)
        public static string AllHostedAzureRegions_TypedFieldSpec(AzureRegionsResp fieldSpec)
        {
            string args = "";
            return "allHostedAzureRegions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllHostedAzureRegions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllHostedAzureRegions((AzureRegionsResp)fieldSpecObj);
        }
        public static string AllHostedAzureRegions(AzureRegionsResp fieldSpec)
        {
            return AllHostedAzureRegions_TypedFieldSpec(fieldSpec);
        }
        public static string AllHostedAzureRegions(object fieldSpecObj)
        {
            return AllHostedAzureRegions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllHostedAzureRegionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureRegionsResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ListIntegrationsReply? AllIntegrations
        // GraphQL -> allIntegrations: ListIntegrationsReply! (type)
        public static string AllIntegrations_TypedFieldSpec(ListIntegrationsReply fieldSpec)
        {
            string args = "\n(\nintegrationTypes: $integrationTypes\nnameFilter: $nameFilter\n)";
            return "allIntegrations" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllIntegrations_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllIntegrations((ListIntegrationsReply)fieldSpecObj);
        }
        public static string AllIntegrations(ListIntegrationsReply fieldSpec)
        {
            return AllIntegrations_TypedFieldSpec(fieldSpec);
        }
        public static string AllIntegrations(object fieldSpecObj)
        {
            return AllIntegrations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllIntegrationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ListIntegrationsReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<ReplicatedSnapshotInfo>? AllK8sReplicaSnapshotInfos
        // GraphQL -> allK8sReplicaSnapshotInfos: [ReplicatedSnapshotInfo!]! (type)
        public static string AllK8sReplicaSnapshotInfos_TypedFieldSpec(List<ReplicatedSnapshotInfo> fieldSpec)
        {
            string args = "\n(\nsnapshotId: $snapshotId\nsnappableId: $snappableId\n)";
            return "allK8sReplicaSnapshotInfos" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllK8sReplicaSnapshotInfos_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllK8sReplicaSnapshotInfos((List<ReplicatedSnapshotInfo>)fieldSpecObj);
        }
        public static string AllK8sReplicaSnapshotInfos(List<ReplicatedSnapshotInfo> fieldSpec)
        {
            return AllK8sReplicaSnapshotInfos_TypedFieldSpec(fieldSpec);
        }
        public static string AllK8sReplicaSnapshotInfos(object fieldSpecObj)
        {
            return AllK8sReplicaSnapshotInfos_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllK8sReplicaSnapshotInfosFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<ReplicatedSnapshotInfo>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<KmsEncryptionKey>? AllKmsEncryptionKeysByRegionFromAws
        // GraphQL -> allKmsEncryptionKeysByRegionFromAws: [KmsEncryptionKey!]! (type)
        public static string AllKmsEncryptionKeysByRegionFromAws_TypedFieldSpec(List<KmsEncryptionKey> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\n)";
            return "allKmsEncryptionKeysByRegionFromAws" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllKmsEncryptionKeysByRegionFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllKmsEncryptionKeysByRegionFromAws((List<KmsEncryptionKey>)fieldSpecObj);
        }
        public static string AllKmsEncryptionKeysByRegionFromAws(List<KmsEncryptionKey> fieldSpec)
        {
            return AllKmsEncryptionKeysByRegionFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllKmsEncryptionKeysByRegionFromAws(object fieldSpecObj)
        {
            return AllKmsEncryptionKeysByRegionFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllKmsEncryptionKeysByRegionFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<KmsEncryptionKey>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<CloudAccountFeaturePermission>? AllLatestFeaturePermissionsForCloudAccounts
        // GraphQL -> allLatestFeaturePermissionsForCloudAccounts: [CloudAccountFeaturePermission!]! (type)
        public static string AllLatestFeaturePermissionsForCloudAccounts_TypedFieldSpec(List<CloudAccountFeaturePermission> fieldSpec)
        {
            string args = "\n(\ncloudVendor: $cloudVendor\ncloudAccountIds: $cloudAccountIds\nfeatures: $features\nfeaturesWithPermissionsGroups: $featuresWithPermissionsGroups\n)";
            return "allLatestFeaturePermissionsForCloudAccounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllLatestFeaturePermissionsForCloudAccounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllLatestFeaturePermissionsForCloudAccounts((List<CloudAccountFeaturePermission>)fieldSpecObj);
        }
        public static string AllLatestFeaturePermissionsForCloudAccounts(List<CloudAccountFeaturePermission> fieldSpec)
        {
            return AllLatestFeaturePermissionsForCloudAccounts_TypedFieldSpec(fieldSpec);
        }
        public static string AllLatestFeaturePermissionsForCloudAccounts(object fieldSpecObj)
        {
            return AllLatestFeaturePermissionsForCloudAccounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllLatestFeaturePermissionsForCloudAccountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<CloudAccountFeaturePermission>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetLicensedProductsInfoReply? AllLicensedProducts
        // GraphQL -> allLicensedProducts: GetLicensedProductsInfoReply! (type)
        public static string AllLicensedProducts_TypedFieldSpec(GetLicensedProductsInfoReply fieldSpec)
        {
            string args = "";
            return "allLicensedProducts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllLicensedProducts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllLicensedProducts((GetLicensedProductsInfoReply)fieldSpecObj);
        }
        public static string AllLicensedProducts(GetLicensedProductsInfoReply fieldSpec)
        {
            return AllLicensedProducts_TypedFieldSpec(fieldSpec);
        }
        public static string AllLicensedProducts(object fieldSpecObj)
        {
            return AllLicensedProducts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllLicensedProductsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetLicensedProductsInfoReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> V1MssqlGetRestoreFilesV1Response? AllMssqlDatabaseRestoreFiles
        // GraphQL -> allMssqlDatabaseRestoreFiles: V1MssqlGetRestoreFilesV1Response! (type)
        public static string AllMssqlDatabaseRestoreFiles_TypedFieldSpec(V1MssqlGetRestoreFilesV1Response fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allMssqlDatabaseRestoreFiles" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllMssqlDatabaseRestoreFiles_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllMssqlDatabaseRestoreFiles((V1MssqlGetRestoreFilesV1Response)fieldSpecObj);
        }
        public static string AllMssqlDatabaseRestoreFiles(V1MssqlGetRestoreFilesV1Response fieldSpec)
        {
            return AllMssqlDatabaseRestoreFiles_TypedFieldSpec(fieldSpec);
        }
        public static string AllMssqlDatabaseRestoreFiles(object fieldSpecObj)
        {
            return AllMssqlDatabaseRestoreFiles_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllMssqlDatabaseRestoreFilesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new V1MssqlGetRestoreFilesV1Response() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<NcdObjectsOverTimeData>? AllNcdObjectsOverTimeData
        // GraphQL -> allNcdObjectsOverTimeData: [NcdObjectsOverTimeData!]! (type)
        public static string AllNcdObjectsOverTimeData_TypedFieldSpec(List<NcdObjectsOverTimeData> fieldSpec)
        {
            string args = "\n(\nclusters: $clusters\n)";
            return "allNcdObjectsOverTimeData" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllNcdObjectsOverTimeData_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllNcdObjectsOverTimeData((List<NcdObjectsOverTimeData>)fieldSpecObj);
        }
        public static string AllNcdObjectsOverTimeData(List<NcdObjectsOverTimeData> fieldSpec)
        {
            return AllNcdObjectsOverTimeData_TypedFieldSpec(fieldSpec);
        }
        public static string AllNcdObjectsOverTimeData(object fieldSpecObj)
        {
            return AllNcdObjectsOverTimeData_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllNcdObjectsOverTimeDataFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<NcdObjectsOverTimeData>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<NcdSlaComplianceData>? AllNcdSlaComplianceData
        // GraphQL -> allNcdSlaComplianceData: [NcdSlaComplianceData!]! (type)
        public static string AllNcdSlaComplianceData_TypedFieldSpec(List<NcdSlaComplianceData> fieldSpec)
        {
            string args = "\n(\nclusters: $clusters\n)";
            return "allNcdSlaComplianceData" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllNcdSlaComplianceData_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllNcdSlaComplianceData((List<NcdSlaComplianceData>)fieldSpecObj);
        }
        public static string AllNcdSlaComplianceData(List<NcdSlaComplianceData> fieldSpec)
        {
            return AllNcdSlaComplianceData_TypedFieldSpec(fieldSpec);
        }
        public static string AllNcdSlaComplianceData(object fieldSpecObj)
        {
            return AllNcdSlaComplianceData_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllNcdSlaComplianceDataFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<NcdSlaComplianceData>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<NcdTaskData>? AllNcdTaskData
        // GraphQL -> allNcdTaskData: [NcdTaskData!]! (type)
        public static string AllNcdTaskData_TypedFieldSpec(List<NcdTaskData> fieldSpec)
        {
            string args = "\n(\nclusters: $clusters\n)";
            return "allNcdTaskData" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllNcdTaskData_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllNcdTaskData((List<NcdTaskData>)fieldSpecObj);
        }
        public static string AllNcdTaskData(List<NcdTaskData> fieldSpec)
        {
            return AllNcdTaskData_TypedFieldSpec(fieldSpec);
        }
        public static string AllNcdTaskData(object fieldSpecObj)
        {
            return AllNcdTaskData_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllNcdTaskDataFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<NcdTaskData>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<NcdUsageOverTimeData>? AllNcdUsageOverTimeData
        // GraphQL -> allNcdUsageOverTimeData: [NcdUsageOverTimeData!]! (type)
        public static string AllNcdUsageOverTimeData_TypedFieldSpec(List<NcdUsageOverTimeData> fieldSpec)
        {
            string args = "\n(\nclusters: $clusters\n)";
            return "allNcdUsageOverTimeData" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllNcdUsageOverTimeData_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllNcdUsageOverTimeData((List<NcdUsageOverTimeData>)fieldSpecObj);
        }
        public static string AllNcdUsageOverTimeData(List<NcdUsageOverTimeData> fieldSpec)
        {
            return AllNcdUsageOverTimeData_TypedFieldSpec(fieldSpec);
        }
        public static string AllNcdUsageOverTimeData(object fieldSpecObj)
        {
            return AllNcdUsageOverTimeData_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllNcdUsageOverTimeDataFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<NcdUsageOverTimeData>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<MosaicStorageLocation>? AllNosqlStorageLocations
        // GraphQL -> allNosqlStorageLocations: [MosaicStorageLocation!]! (type)
        public static string AllNosqlStorageLocations_TypedFieldSpec(List<MosaicStorageLocation> fieldSpec)
        {
            string args = "\n(\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "allNosqlStorageLocations" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllNosqlStorageLocations_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllNosqlStorageLocations((List<MosaicStorageLocation>)fieldSpecObj);
        }
        public static string AllNosqlStorageLocations(List<MosaicStorageLocation> fieldSpec)
        {
            return AllNosqlStorageLocations_TypedFieldSpec(fieldSpec);
        }
        public static string AllNosqlStorageLocations(object fieldSpecObj)
        {
            return AllNosqlStorageLocations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllNosqlStorageLocationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<MosaicStorageLocation>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AdGroup>? AllO365AdGroups
        // GraphQL -> allO365AdGroups: [AdGroup!]! (type)
        public static string AllO365AdGroups_TypedFieldSpec(List<AdGroup> fieldSpec)
        {
            string args = "\n(\norgId: $orgId\nadGroupSearchFilter: $adGroupSearchFilter\n)";
            return "allO365AdGroups" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllO365AdGroups_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllO365AdGroups((List<AdGroup>)fieldSpecObj);
        }
        public static string AllO365AdGroups(List<AdGroup> fieldSpec)
        {
            return AllO365AdGroups_TypedFieldSpec(fieldSpec);
        }
        public static string AllO365AdGroups(object fieldSpecObj)
        {
            return AllO365AdGroups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllO365AdGroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AdGroup>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<O365OrgInfo>? AllO365OrgStatuses
        // GraphQL -> allO365OrgStatuses: [O365OrgInfo!]! (type)
        public static string AllO365OrgStatuses_TypedFieldSpec(List<O365OrgInfo> fieldSpec)
        {
            string args = "";
            return "allO365OrgStatuses" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllO365OrgStatuses_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllO365OrgStatuses((List<O365OrgInfo>)fieldSpecObj);
        }
        public static string AllO365OrgStatuses(List<O365OrgInfo> fieldSpec)
        {
            return AllO365OrgStatuses_TypedFieldSpec(fieldSpec);
        }
        public static string AllO365OrgStatuses(object fieldSpecObj)
        {
            return AllO365OrgStatuses_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllO365OrgStatusesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<O365OrgInfo>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<O365SubscriptionAppTypeCounts>? AllO365SubscriptionsAppTypeCounts
        // GraphQL -> allO365SubscriptionsAppTypeCounts: [O365SubscriptionAppTypeCounts!]! (type)
        public static string AllO365SubscriptionsAppTypeCounts_TypedFieldSpec(List<O365SubscriptionAppTypeCounts> fieldSpec)
        {
            string args = "";
            return "allO365SubscriptionsAppTypeCounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllO365SubscriptionsAppTypeCounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllO365SubscriptionsAppTypeCounts((List<O365SubscriptionAppTypeCounts>)fieldSpecObj);
        }
        public static string AllO365SubscriptionsAppTypeCounts(List<O365SubscriptionAppTypeCounts> fieldSpec)
        {
            return AllO365SubscriptionsAppTypeCounts_TypedFieldSpec(fieldSpec);
        }
        public static string AllO365SubscriptionsAppTypeCounts(object fieldSpecObj)
        {
            return AllO365SubscriptionsAppTypeCounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllO365SubscriptionsAppTypeCountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<O365SubscriptionAppTypeCounts>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<ObjectIdsForHierarchyType>? AllObjectsAlreadyAssignedToOrgs
        // GraphQL -> allObjectsAlreadyAssignedToOrgs: [ObjectIdsForHierarchyType!]! (type)
        public static string AllObjectsAlreadyAssignedToOrgs_TypedFieldSpec(List<ObjectIdsForHierarchyType> fieldSpec)
        {
            string args = "\n(\nobjectIdsForHierarchyTypes: $objectIdsForHierarchyTypes\nallowedClusters: $allowedClusters\ntargetOrgId: $targetOrgId\n)";
            return "allObjectsAlreadyAssignedToOrgs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllObjectsAlreadyAssignedToOrgs_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllObjectsAlreadyAssignedToOrgs((List<ObjectIdsForHierarchyType>)fieldSpecObj);
        }
        public static string AllObjectsAlreadyAssignedToOrgs(List<ObjectIdsForHierarchyType> fieldSpec)
        {
            return AllObjectsAlreadyAssignedToOrgs_TypedFieldSpec(fieldSpec);
        }
        public static string AllObjectsAlreadyAssignedToOrgs(object fieldSpecObj)
        {
            return AllObjectsAlreadyAssignedToOrgs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllObjectsAlreadyAssignedToOrgsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<ObjectIdsForHierarchyType>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<OptionGroup>? AllOptionGroupsByRegionFromAws
        // GraphQL -> allOptionGroupsByRegionFromAws: [OptionGroup!]! (type)
        public static string AllOptionGroupsByRegionFromAws_TypedFieldSpec(List<OptionGroup> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\ndbEngine: $dbEngine\ndbEngineVersion: $dbEngineVersion\nmajorEngineVersion: $majorEngineVersion\n)";
            return "allOptionGroupsByRegionFromAws" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllOptionGroupsByRegionFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllOptionGroupsByRegionFromAws((List<OptionGroup>)fieldSpecObj);
        }
        public static string AllOptionGroupsByRegionFromAws(List<OptionGroup> fieldSpec)
        {
            return AllOptionGroupsByRegionFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllOptionGroupsByRegionFromAws(object fieldSpecObj)
        {
            return AllOptionGroupsByRegionFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllOptionGroupsByRegionFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<OptionGroup>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<Org>? AllOrgsByIds
        // GraphQL -> allOrgsByIds: [Org!]! (type)
        public static string AllOrgsByIds_TypedFieldSpec(List<Org> fieldSpec)
        {
            string args = "\n(\norgIds: $orgIds\n)";
            return "allOrgsByIds" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllOrgsByIds_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllOrgsByIds((List<Org>)fieldSpecObj);
        }
        public static string AllOrgsByIds(List<Org> fieldSpec)
        {
            return AllOrgsByIds_TypedFieldSpec(fieldSpec);
        }
        public static string AllOrgsByIds(object fieldSpecObj)
        {
            return AllOrgsByIds_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllOrgsByIdsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<Org>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<PendingAction>? AllPendingActions
        // GraphQL -> allPendingActions: [pendingAction!]! (type)
        public static string AllPendingActions_TypedFieldSpec(List<PendingAction> fieldSpec)
        {
            string args = "\n(\nclusterFilter: $clusterFilter\npendingActionGroupTypeFilter: $pendingActionGroupTypeFilter\npendingActionSubGroupTypeFilter: $pendingActionSubGroupTypeFilter\nstatusFilter: $statusFilter\nobjectIds: $objectIds\nsortedOrder: $sortedOrder\nhistoryOnly: $historyOnly\nlimit: $limit\n)";
            return "allPendingActions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllPendingActions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllPendingActions((List<PendingAction>)fieldSpecObj);
        }
        public static string AllPendingActions(List<PendingAction> fieldSpec)
        {
            return AllPendingActions_TypedFieldSpec(fieldSpec);
        }
        public static string AllPendingActions(object fieldSpecObj)
        {
            return AllPendingActions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllPendingActionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<PendingAction>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<QuarantineSpec>? AllQuarantinedDetailsForSnapshots
        // GraphQL -> allQuarantinedDetailsForSnapshots: [QuarantineSpec!]! (type)
        public static string AllQuarantinedDetailsForSnapshots_TypedFieldSpec(List<QuarantineSpec> fieldSpec)
        {
            string args = "\n(\nsnapshotIds: $snapshotIds\n)";
            return "allQuarantinedDetailsForSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllQuarantinedDetailsForSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllQuarantinedDetailsForSnapshots((List<QuarantineSpec>)fieldSpecObj);
        }
        public static string AllQuarantinedDetailsForSnapshots(List<QuarantineSpec> fieldSpec)
        {
            return AllQuarantinedDetailsForSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string AllQuarantinedDetailsForSnapshots(object fieldSpecObj)
        {
            return AllQuarantinedDetailsForSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllQuarantinedDetailsForSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<QuarantineSpec>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<QuarantineSpec>? AllQuarantinedDetailsForWorkload
        // GraphQL -> allQuarantinedDetailsForWorkload: [QuarantineSpec!]! (type)
        public static string AllQuarantinedDetailsForWorkload_TypedFieldSpec(List<QuarantineSpec> fieldSpec)
        {
            string args = "\n(\nworkloadId: $workloadId\n)";
            return "allQuarantinedDetailsForWorkload" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllQuarantinedDetailsForWorkload_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllQuarantinedDetailsForWorkload((List<QuarantineSpec>)fieldSpecObj);
        }
        public static string AllQuarantinedDetailsForWorkload(List<QuarantineSpec> fieldSpec)
        {
            return AllQuarantinedDetailsForWorkload_TypedFieldSpec(fieldSpec);
        }
        public static string AllQuarantinedDetailsForWorkload(object fieldSpecObj)
        {
            return AllQuarantinedDetailsForWorkload_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllQuarantinedDetailsForWorkloadFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<QuarantineSpec>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AllRcvAccountEntitlements? AllRcvAccountEntitlements
        // GraphQL -> allRcvAccountEntitlements: AllRcvAccountEntitlements! (type)
        public static string AllRcvAccountEntitlements_TypedFieldSpec(AllRcvAccountEntitlements fieldSpec)
        {
            string args = "";
            return "allRcvAccountEntitlements" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllRcvAccountEntitlements_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllRcvAccountEntitlements((AllRcvAccountEntitlements)fieldSpecObj);
        }
        public static string AllRcvAccountEntitlements(AllRcvAccountEntitlements fieldSpec)
        {
            return AllRcvAccountEntitlements_TypedFieldSpec(fieldSpec);
        }
        public static string AllRcvAccountEntitlements(object fieldSpecObj)
        {
            return AllRcvAccountEntitlements_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllRcvAccountEntitlementsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AllRcvAccountEntitlements() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AzureResourceGroup>? AllResourceGroupsFromAzure
        // GraphQL -> allResourceGroupsFromAzure: [AzureResourceGroup!]! (type)
        public static string AllResourceGroupsFromAzure_TypedFieldSpec(List<AzureResourceGroup> fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\nazureSubscriptionNativeId: $azureSubscriptionNativeId\nfeature: $feature\n)";
            return "allResourceGroupsFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllResourceGroupsFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllResourceGroupsFromAzure((List<AzureResourceGroup>)fieldSpecObj);
        }
        public static string AllResourceGroupsFromAzure(List<AzureResourceGroup> fieldSpec)
        {
            return AllResourceGroupsFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AllResourceGroupsFromAzure(object fieldSpecObj)
        {
            return AllResourceGroupsFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllResourceGroupsFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AzureResourceGroup>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<S3BucketDetails>? AllS3BucketsDetailsFromAws
        // GraphQL -> allS3BucketsDetailsFromAws: [S3BucketDetails!]! (type)
        public static string AllS3BucketsDetailsFromAws_TypedFieldSpec(List<S3BucketDetails> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\n)";
            return "allS3BucketsDetailsFromAws" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllS3BucketsDetailsFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllS3BucketsDetailsFromAws((List<S3BucketDetails>)fieldSpecObj);
        }
        public static string AllS3BucketsDetailsFromAws(List<S3BucketDetails> fieldSpec)
        {
            return AllS3BucketsDetailsFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllS3BucketsDetailsFromAws(object fieldSpecObj)
        {
            return AllS3BucketsDetailsFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllS3BucketsDetailsFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<S3BucketDetails>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<FullSpSiteExclusions>? AllSharepointSiteExclusions
        // GraphQL -> allSharepointSiteExclusions: [FullSpSiteExclusions!]! (type)
        public static string AllSharepointSiteExclusions_TypedFieldSpec(List<FullSpSiteExclusions> fieldSpec)
        {
            string args = "\n(\norgId: $orgId\nsiteFids: $siteFids\n)";
            return "allSharepointSiteExclusions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllSharepointSiteExclusions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllSharepointSiteExclusions((List<FullSpSiteExclusions>)fieldSpecObj);
        }
        public static string AllSharepointSiteExclusions(List<FullSpSiteExclusions> fieldSpec)
        {
            return AllSharepointSiteExclusions_TypedFieldSpec(fieldSpec);
        }
        public static string AllSharepointSiteExclusions(object fieldSpecObj)
        {
            return AllSharepointSiteExclusions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllSharepointSiteExclusionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<FullSpSiteExclusions>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<PvcInformation>? AllSnapshotPvcs
        // GraphQL -> allSnapshotPvcs: [PvcInformation!]! (type)
        public static string AllSnapshotPvcs_TypedFieldSpec(List<PvcInformation> fieldSpec)
        {
            string args = "\n(\nsnapshotId: $snapshotId\nsnappableId: $snappableId\nisReplica: $isReplica\n)";
            return "allSnapshotPvcs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllSnapshotPvcs_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllSnapshotPvcs((List<PvcInformation>)fieldSpecObj);
        }
        public static string AllSnapshotPvcs(List<PvcInformation> fieldSpec)
        {
            return AllSnapshotPvcs_TypedFieldSpec(fieldSpec);
        }
        public static string AllSnapshotPvcs(object fieldSpecObj)
        {
            return AllSnapshotPvcs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllSnapshotPvcsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<PvcInformation>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<ClosestSnapshotSearchResult>? AllSnapshotsClosestToPointInTime
        // GraphQL -> allSnapshotsClosestToPointInTime: [ClosestSnapshotSearchResult!]! (type)
        public static string AllSnapshotsClosestToPointInTime_TypedFieldSpec(List<ClosestSnapshotSearchResult> fieldSpec)
        {
            string args = "\n(\nbeforeTime: $beforeTime\nafterTime: $afterTime\nsnappableIds: $snappableIds\nincludeLinked: $includeLinked\nignoreActiveWorkloadCheck: $ignoreActiveWorkloadCheck\nexcludeQuarantined: $excludeQuarantined\nexcludeAnomalous: $excludeAnomalous\n)";
            return "allSnapshotsClosestToPointInTime" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllSnapshotsClosestToPointInTime_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllSnapshotsClosestToPointInTime((List<ClosestSnapshotSearchResult>)fieldSpecObj);
        }
        public static string AllSnapshotsClosestToPointInTime(List<ClosestSnapshotSearchResult> fieldSpec)
        {
            return AllSnapshotsClosestToPointInTime_TypedFieldSpec(fieldSpec);
        }
        public static string AllSnapshotsClosestToPointInTime(object fieldSpecObj)
        {
            return AllSnapshotsClosestToPointInTime_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllSnapshotsClosestToPointInTimeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<ClosestSnapshotSearchResult>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AllStorageArraysReply? AllStorageArrays
        // GraphQL -> allStorageArrays: AllStorageArraysReply! (type)
        public static string AllStorageArrays_TypedFieldSpec(AllStorageArraysReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allStorageArrays" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllStorageArrays_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllStorageArrays((AllStorageArraysReply)fieldSpecObj);
        }
        public static string AllStorageArrays(AllStorageArraysReply fieldSpec)
        {
            return AllStorageArrays_TypedFieldSpec(fieldSpec);
        }
        public static string AllStorageArrays(object fieldSpecObj)
        {
            return AllStorageArrays_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllStorageArraysFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AllStorageArraysReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<TargetMapping>? AllTargetMappings
        // GraphQL -> allTargetMappings: [TargetMapping!]! (type)
        public static string AllTargetMappings_TypedFieldSpec(List<TargetMapping> fieldSpec)
        {
            string args = "\n(\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\ncontextFilter: $contextFilter\nisRcsStatsRequired: $isRcsStatsRequired\n)";
            return "allTargetMappings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllTargetMappings_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllTargetMappings((List<TargetMapping>)fieldSpecObj);
        }
        public static string AllTargetMappings(List<TargetMapping> fieldSpec)
        {
            return AllTargetMappings_TypedFieldSpec(fieldSpec);
        }
        public static string AllTargetMappings(object fieldSpecObj)
        {
            return AllTargetMappings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllTargetMappingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<TargetMapping>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<PolicySummary>? AllTopRiskPolicySummaries
        // GraphQL -> allTopRiskPolicySummaries: [PolicySummary!]! (type)
        public static string AllTopRiskPolicySummaries_TypedFieldSpec(List<PolicySummary> fieldSpec)
        {
            string args = "\n(\ngetWhitelistedResults: $getWhitelistedResults\nlimit: $limit\nworkloadTypes: $workloadTypes\n)";
            return "allTopRiskPolicySummaries" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllTopRiskPolicySummaries_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllTopRiskPolicySummaries((List<PolicySummary>)fieldSpecObj);
        }
        public static string AllTopRiskPolicySummaries(List<PolicySummary> fieldSpec)
        {
            return AllTopRiskPolicySummaries_TypedFieldSpec(fieldSpec);
        }
        public static string AllTopRiskPolicySummaries(object fieldSpecObj)
        {
            return AllTopRiskPolicySummaries_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllTopRiskPolicySummariesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<PolicySummary>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<User>? AllUsersOnAccount
        // GraphQL -> allUsersOnAccount: [User!]! (type)
        public static string AllUsersOnAccount_TypedFieldSpec(List<User> fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "allUsersOnAccount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllUsersOnAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllUsersOnAccount((List<User>)fieldSpecObj);
        }
        public static string AllUsersOnAccount(List<User> fieldSpec)
        {
            return AllUsersOnAccount_TypedFieldSpec(fieldSpec);
        }
        public static string AllUsersOnAccount(object fieldSpecObj)
        {
            return AllUsersOnAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllUsersOnAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<User>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UserConnection? AllUsersOnAccountConnection
        // GraphQL -> allUsersOnAccountConnection: UserConnection! (type)
        public static string AllUsersOnAccountConnection_TypedFieldSpec(UserConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nemailFilter: $emailFilter\nroleIdsFilter: $roleIdsFilter\nlockoutStateFilter: $lockoutStateFilter\nhiddenStateFilter: $hiddenStateFilter\nshouldGetLocalUsersOnly: $shouldGetLocalUsersOnly\n)";
            return "allUsersOnAccountConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllUsersOnAccountConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllUsersOnAccountConnection((UserConnection)fieldSpecObj);
        }
        public static string AllUsersOnAccountConnection(UserConnection fieldSpec)
        {
            return AllUsersOnAccountConnection_TypedFieldSpec(fieldSpec);
        }
        public static string AllUsersOnAccountConnection(object fieldSpecObj)
        {
            return AllUsersOnAccountConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllUsersOnAccountConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UserConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidReplicationSourceConnection? AllValidReplicationSources
        // GraphQL -> allValidReplicationSources: ValidReplicationSourceConnection! (type)
        public static string AllValidReplicationSources_TypedFieldSpec(ValidReplicationSourceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nisCrossAccount: $isCrossAccount\n)";
            return "allValidReplicationSources" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllValidReplicationSources_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllValidReplicationSources((ValidReplicationSourceConnection)fieldSpecObj);
        }
        public static string AllValidReplicationSources(ValidReplicationSourceConnection fieldSpec)
        {
            return AllValidReplicationSources_TypedFieldSpec(fieldSpec);
        }
        public static string AllValidReplicationSources(object fieldSpecObj)
        {
            return AllValidReplicationSources_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllValidReplicationSourcesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidReplicationSourceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidReplicationTargetConnection? AllValidReplicationTargets
        // GraphQL -> allValidReplicationTargets: ValidReplicationTargetConnection! (type)
        public static string AllValidReplicationTargets_TypedFieldSpec(ValidReplicationTargetConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nisCrossAccount: $isCrossAccount\n)";
            return "allValidReplicationTargets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllValidReplicationTargets_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllValidReplicationTargets((ValidReplicationTargetConnection)fieldSpecObj);
        }
        public static string AllValidReplicationTargets(ValidReplicationTargetConnection fieldSpec)
        {
            return AllValidReplicationTargets_TypedFieldSpec(fieldSpec);
        }
        public static string AllValidReplicationTargets(object fieldSpecObj)
        {
            return AllValidReplicationTargets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllValidReplicationTargetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidReplicationTargetConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<VcenterHotAddProxyVmInfo>? AllVcenterHotAddProxyVms
        // GraphQL -> allVcenterHotAddProxyVms: [VcenterHotAddProxyVmInfo!]! (type)
        public static string AllVcenterHotAddProxyVms_TypedFieldSpec(List<VcenterHotAddProxyVmInfo> fieldSpec)
        {
            string args = "\n(\nclusterUuids: $clusterUuids\n)";
            return "allVcenterHotAddProxyVms" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllVcenterHotAddProxyVms_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllVcenterHotAddProxyVms((List<VcenterHotAddProxyVmInfo>)fieldSpecObj);
        }
        public static string AllVcenterHotAddProxyVms(List<VcenterHotAddProxyVmInfo> fieldSpec)
        {
            return AllVcenterHotAddProxyVms_TypedFieldSpec(fieldSpec);
        }
        public static string AllVcenterHotAddProxyVms(object fieldSpecObj)
        {
            return AllVcenterHotAddProxyVms_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllVcenterHotAddProxyVmsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<VcenterHotAddProxyVmInfo>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VirtualMachineFilesReply? AllVirtualMachineFiles
        // GraphQL -> allVirtualMachineFiles: VirtualMachineFilesReply! (type)
        public static string AllVirtualMachineFiles_TypedFieldSpec(VirtualMachineFilesReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "allVirtualMachineFiles" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllVirtualMachineFiles_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllVirtualMachineFiles((VirtualMachineFilesReply)fieldSpecObj);
        }
        public static string AllVirtualMachineFiles(VirtualMachineFilesReply fieldSpec)
        {
            return AllVirtualMachineFiles_TypedFieldSpec(fieldSpec);
        }
        public static string AllVirtualMachineFiles(object fieldSpecObj)
        {
            return AllVirtualMachineFiles_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllVirtualMachineFilesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VirtualMachineFilesReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<VmRecoveryJobInfo>? AllVmRecoveryJobsInfo
        // GraphQL -> allVmRecoveryJobsInfo: [VmRecoveryJobInfo!]! (type)
        public static string AllVmRecoveryJobsInfo_TypedFieldSpec(List<VmRecoveryJobInfo> fieldSpec)
        {
            string args = "\n(\nfid: $fid\ninput: $input\n)";
            return "allVmRecoveryJobsInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllVmRecoveryJobsInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllVmRecoveryJobsInfo((List<VmRecoveryJobInfo>)fieldSpecObj);
        }
        public static string AllVmRecoveryJobsInfo(List<VmRecoveryJobInfo> fieldSpec)
        {
            return AllVmRecoveryJobsInfo_TypedFieldSpec(fieldSpec);
        }
        public static string AllVmRecoveryJobsInfo(object fieldSpecObj)
        {
            return AllVmRecoveryJobsInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllVmRecoveryJobsInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<VmRecoveryJobInfo>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<VmwareCdpStateInfo>? AllVmwareCdpStateInfos
        // GraphQL -> allVmwareCdpStateInfos: [VmwareCdpStateInfo!]! (type)
        public static string AllVmwareCdpStateInfos_TypedFieldSpec(List<VmwareCdpStateInfo> fieldSpec)
        {
            string args = "\n(\nids: $ids\n)";
            return "allVmwareCdpStateInfos" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllVmwareCdpStateInfos_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllVmwareCdpStateInfos((List<VmwareCdpStateInfo>)fieldSpecObj);
        }
        public static string AllVmwareCdpStateInfos(List<VmwareCdpStateInfo> fieldSpec)
        {
            return AllVmwareCdpStateInfos_TypedFieldSpec(fieldSpec);
        }
        public static string AllVmwareCdpStateInfos(object fieldSpecObj)
        {
            return AllVmwareCdpStateInfos_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllVmwareCdpStateInfosFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<VmwareCdpStateInfo>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AwsVpc>? AllVpcsByRegionFromAws
        // GraphQL -> allVpcsByRegionFromAws: [AwsVpc!]! (type)
        public static string AllVpcsByRegionFromAws_TypedFieldSpec(List<AwsVpc> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\n)";
            return "allVpcsByRegionFromAws" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllVpcsByRegionFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllVpcsByRegionFromAws((List<AwsVpc>)fieldSpecObj);
        }
        public static string AllVpcsByRegionFromAws(List<AwsVpc> fieldSpec)
        {
            return AllVpcsByRegionFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllVpcsByRegionFromAws(object fieldSpecObj)
        {
            return AllVpcsByRegionFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllVpcsByRegionFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AwsVpc>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<AwsVpc>? AllVpcsFromAws
        // GraphQL -> allVpcsFromAws: [AwsVpc!]! (type)
        public static string AllVpcsFromAws_TypedFieldSpec(List<AwsVpc> fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\n)";
            return "allVpcsFromAws" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllVpcsFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllVpcsFromAws((List<AwsVpc>)fieldSpecObj);
        }
        public static string AllVpcsFromAws(List<AwsVpc> fieldSpec)
        {
            return AllVpcsFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string AllVpcsFromAws(object fieldSpecObj)
        {
            return AllVpcsFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllVpcsFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<AwsVpc>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> WebhookConnection? AllWebhooks
        // GraphQL -> allWebhooks: WebhookConnection! (type)
        public static string AllWebhooks_TypedFieldSpec(WebhookConnection fieldSpec)
        {
            string args = "\n(\nname: $name\n)";
            return "allWebhooks" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AllWebhooks_ObjectFieldSpec(object fieldSpecObj)
        {
            return AllWebhooks((WebhookConnection)fieldSpecObj);
        }
        public static string AllWebhooks(WebhookConnection fieldSpec)
        {
            return AllWebhooks_TypedFieldSpec(fieldSpec);
        }
        public static string AllWebhooks(object fieldSpecObj)
        {
            return AllWebhooks_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AllWebhooksFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new WebhookConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AmiTypeForAwsNativeArchivedSnapshotExportReply? AmiTypeForAwsNativeArchivedSnapshotExport
        // GraphQL -> amiTypeForAwsNativeArchivedSnapshotExport: AmiTypeForAwsNativeArchivedSnapshotExportReply! (type)
        public static string AmiTypeForAwsNativeArchivedSnapshotExport_TypedFieldSpec(AmiTypeForAwsNativeArchivedSnapshotExportReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "amiTypeForAwsNativeArchivedSnapshotExport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AmiTypeForAwsNativeArchivedSnapshotExport_ObjectFieldSpec(object fieldSpecObj)
        {
            return AmiTypeForAwsNativeArchivedSnapshotExport((AmiTypeForAwsNativeArchivedSnapshotExportReply)fieldSpecObj);
        }
        public static string AmiTypeForAwsNativeArchivedSnapshotExport(AmiTypeForAwsNativeArchivedSnapshotExportReply fieldSpec)
        {
            return AmiTypeForAwsNativeArchivedSnapshotExport_TypedFieldSpec(fieldSpec);
        }
        public static string AmiTypeForAwsNativeArchivedSnapshotExport(object fieldSpecObj)
        {
            return AmiTypeForAwsNativeArchivedSnapshotExport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AmiTypeForAwsNativeArchivedSnapshotExportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AmiTypeForAwsNativeArchivedSnapshotExportReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AnalyzerGroupConnection? AnalyzerGroups
        // GraphQL -> analyzerGroups: AnalyzerGroupConnection! (type)
        public static string AnalyzerGroups_TypedFieldSpec(AnalyzerGroupConnection fieldSpec)
        {
            string args = "";
            return "analyzerGroups" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AnalyzerGroups_ObjectFieldSpec(object fieldSpecObj)
        {
            return AnalyzerGroups((AnalyzerGroupConnection)fieldSpecObj);
        }
        public static string AnalyzerGroups(AnalyzerGroupConnection fieldSpec)
        {
            return AnalyzerGroups_TypedFieldSpec(fieldSpec);
        }
        public static string AnalyzerGroups(object fieldSpecObj)
        {
            return AnalyzerGroups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AnalyzerGroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AnalyzerGroupConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AnalyzerUsageConnection? AnalyzerUsages
        // GraphQL -> analyzerUsages: AnalyzerUsageConnection! (type)
        public static string AnalyzerUsages_TypedFieldSpec(AnalyzerUsageConnection fieldSpec)
        {
            string args = "";
            return "analyzerUsages" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AnalyzerUsages_ObjectFieldSpec(object fieldSpecObj)
        {
            return AnalyzerUsages((AnalyzerUsageConnection)fieldSpecObj);
        }
        public static string AnalyzerUsages(AnalyzerUsageConnection fieldSpec)
        {
            return AnalyzerUsages_TypedFieldSpec(fieldSpec);
        }
        public static string AnalyzerUsages(object fieldSpecObj)
        {
            return AnalyzerUsages_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AnalyzerUsagesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AnalyzerUsageConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetAnomalyDetailsReply? AnomalyResultOpt
        // GraphQL -> anomalyResultOpt: GetAnomalyDetailsReply (type)
        public static string AnomalyResultOpt_TypedFieldSpec(GetAnomalyDetailsReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nsnapshotId: $snapshotId\nworkloadId: $workloadId\nanomalyId: $anomalyId\n)";
            return "anomalyResultOpt" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AnomalyResultOpt_ObjectFieldSpec(object fieldSpecObj)
        {
            return AnomalyResultOpt((GetAnomalyDetailsReply)fieldSpecObj);
        }
        public static string AnomalyResultOpt(GetAnomalyDetailsReply fieldSpec)
        {
            return AnomalyResultOpt_TypedFieldSpec(fieldSpec);
        }
        public static string AnomalyResultOpt(object fieldSpecObj)
        {
            return AnomalyResultOpt_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AnomalyResultOptFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetAnomalyDetailsReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AnomalyResultConnection? AnomalyResults
        // GraphQL -> anomalyResults: AnomalyResultConnection! (type)
        public static string AnomalyResults_TypedFieldSpec(AnomalyResultConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilter: $filter\ntimezoneOffset: $timezoneOffset\n)";
            return "anomalyResults" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AnomalyResults_ObjectFieldSpec(object fieldSpecObj)
        {
            return AnomalyResults((AnomalyResultConnection)fieldSpecObj);
        }
        public static string AnomalyResults(AnomalyResultConnection fieldSpec)
        {
            return AnomalyResults_TypedFieldSpec(fieldSpec);
        }
        public static string AnomalyResults(object fieldSpecObj)
        {
            return AnomalyResults_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AnomalyResultsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AnomalyResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AnomalyResultGroupedDataConnection? AnomalyResultsGrouped
        // GraphQL -> anomalyResultsGrouped: AnomalyResultGroupedDataConnection! (type)
        public static string AnomalyResultsGrouped_TypedFieldSpec(AnomalyResultGroupedDataConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ngroupBy: $groupBy\nfilter: $filter\ntimezoneOffset: $timezoneOffset\n)";
            return "anomalyResultsGrouped" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AnomalyResultsGrouped_ObjectFieldSpec(object fieldSpecObj)
        {
            return AnomalyResultsGrouped((AnomalyResultGroupedDataConnection)fieldSpecObj);
        }
        public static string AnomalyResultsGrouped(AnomalyResultGroupedDataConnection fieldSpec)
        {
            return AnomalyResultsGrouped_TypedFieldSpec(fieldSpec);
        }
        public static string AnomalyResultsGrouped(object fieldSpecObj)
        {
            return AnomalyResultsGrouped_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AnomalyResultsGroupedFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AnomalyResultGroupedDataConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<ArchivalStorageUsage>? ArchivalStorageUsage
        // GraphQL -> archivalStorageUsage: [ArchivalStorageUsage!]! (type)
        public static string ArchivalStorageUsage_TypedFieldSpec(List<ArchivalStorageUsage> fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "archivalStorageUsage" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ArchivalStorageUsage_ObjectFieldSpec(object fieldSpecObj)
        {
            return ArchivalStorageUsage((List<ArchivalStorageUsage>)fieldSpecObj);
        }
        public static string ArchivalStorageUsage(List<ArchivalStorageUsage> fieldSpec)
        {
            return ArchivalStorageUsage_TypedFieldSpec(fieldSpec);
        }
        public static string ArchivalStorageUsage(object fieldSpecObj)
        {
            return ArchivalStorageUsage_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ArchivalStorageUsageFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<ArchivalStorageUsage>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GlobalCertificateConnection? AssignableGlobalCertificates
        // GraphQL -> assignableGlobalCertificates: GlobalCertificateConnection! (type)
        public static string AssignableGlobalCertificates_TypedFieldSpec(GlobalCertificateConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\ninput: $input\n)";
            return "assignableGlobalCertificates" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AssignableGlobalCertificates_ObjectFieldSpec(object fieldSpecObj)
        {
            return AssignableGlobalCertificates((GlobalCertificateConnection)fieldSpecObj);
        }
        public static string AssignableGlobalCertificates(GlobalCertificateConnection fieldSpec)
        {
            return AssignableGlobalCertificates_TypedFieldSpec(fieldSpec);
        }
        public static string AssignableGlobalCertificates(object fieldSpecObj)
        {
            return AssignableGlobalCertificates_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AssignableGlobalCertificatesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GlobalCertificateConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsArtifactsToDelete? AwsArtifactsToDelete
        // GraphQL -> awsArtifactsToDelete: AwsArtifactsToDelete! (type)
        public static string AwsArtifactsToDelete_TypedFieldSpec(AwsArtifactsToDelete fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "awsArtifactsToDelete" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsArtifactsToDelete_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsArtifactsToDelete((AwsArtifactsToDelete)fieldSpecObj);
        }
        public static string AwsArtifactsToDelete(AwsArtifactsToDelete fieldSpec)
        {
            return AwsArtifactsToDelete_TypedFieldSpec(fieldSpec);
        }
        public static string AwsArtifactsToDelete(object fieldSpecObj)
        {
            return AwsArtifactsToDelete_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsArtifactsToDeleteFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsArtifactsToDelete() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsCloudAccountListSecurityGroupsResponse? AwsCloudAccountListSecurityGroups
        // GraphQL -> awsCloudAccountListSecurityGroups: AwsCloudAccountListSecurityGroupsResponse! (type)
        public static string AwsCloudAccountListSecurityGroups_TypedFieldSpec(AwsCloudAccountListSecurityGroupsResponse fieldSpec)
        {
            string args = "\n(\ncloudAccountUuid: $cloudAccountUuid\nfeature: $feature\nregion: $region\nvpcID: $vpcID\n)";
            return "awsCloudAccountListSecurityGroups" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsCloudAccountListSecurityGroups_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsCloudAccountListSecurityGroups((AwsCloudAccountListSecurityGroupsResponse)fieldSpecObj);
        }
        public static string AwsCloudAccountListSecurityGroups(AwsCloudAccountListSecurityGroupsResponse fieldSpec)
        {
            return AwsCloudAccountListSecurityGroups_TypedFieldSpec(fieldSpec);
        }
        public static string AwsCloudAccountListSecurityGroups(object fieldSpecObj)
        {
            return AwsCloudAccountListSecurityGroups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsCloudAccountListSecurityGroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsCloudAccountListSecurityGroupsResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsCloudAccountListSubnetsResponse? AwsCloudAccountListSubnets
        // GraphQL -> awsCloudAccountListSubnets: AwsCloudAccountListSubnetsResponse! (type)
        public static string AwsCloudAccountListSubnets_TypedFieldSpec(AwsCloudAccountListSubnetsResponse fieldSpec)
        {
            string args = "\n(\ncloudAccountUuid: $cloudAccountUuid\nfeature: $feature\nregion: $region\nvpcID: $vpcID\n)";
            return "awsCloudAccountListSubnets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsCloudAccountListSubnets_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsCloudAccountListSubnets((AwsCloudAccountListSubnetsResponse)fieldSpecObj);
        }
        public static string AwsCloudAccountListSubnets(AwsCloudAccountListSubnetsResponse fieldSpec)
        {
            return AwsCloudAccountListSubnets_TypedFieldSpec(fieldSpec);
        }
        public static string AwsCloudAccountListSubnets(object fieldSpecObj)
        {
            return AwsCloudAccountListSubnets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsCloudAccountListSubnetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsCloudAccountListSubnetsResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsCloudAccountListVpcResponse? AwsCloudAccountListVpcs
        // GraphQL -> awsCloudAccountListVpcs: AwsCloudAccountListVpcResponse! (type)
        public static string AwsCloudAccountListVpcs_TypedFieldSpec(AwsCloudAccountListVpcResponse fieldSpec)
        {
            string args = "\n(\ncloudAccountUuid: $cloudAccountUuid\nfeature: $feature\nregion: $region\n)";
            return "awsCloudAccountListVpcs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsCloudAccountListVpcs_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsCloudAccountListVpcs((AwsCloudAccountListVpcResponse)fieldSpecObj);
        }
        public static string AwsCloudAccountListVpcs(AwsCloudAccountListVpcResponse fieldSpec)
        {
            return AwsCloudAccountListVpcs_TypedFieldSpec(fieldSpec);
        }
        public static string AwsCloudAccountListVpcs(object fieldSpecObj)
        {
            return AwsCloudAccountListVpcs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsCloudAccountListVpcsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsCloudAccountListVpcResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsCloudAccountWithFeatures? AwsCloudAccountWithFeatures
        // GraphQL -> awsCloudAccountWithFeatures: AwsCloudAccountWithFeatures! (type)
        public static string AwsCloudAccountWithFeatures_TypedFieldSpec(AwsCloudAccountWithFeatures fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\nawsCloudAccountArg: $awsCloudAccountArg\n)";
            return "awsCloudAccountWithFeatures" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsCloudAccountWithFeatures_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsCloudAccountWithFeatures((AwsCloudAccountWithFeatures)fieldSpecObj);
        }
        public static string AwsCloudAccountWithFeatures(AwsCloudAccountWithFeatures fieldSpec)
        {
            return AwsCloudAccountWithFeatures_TypedFieldSpec(fieldSpec);
        }
        public static string AwsCloudAccountWithFeatures(object fieldSpecObj)
        {
            return AwsCloudAccountWithFeatures_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsCloudAccountWithFeaturesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsCloudAccountWithFeatures() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsComputeSettings? AwsComputeSettings
        // GraphQL -> awsComputeSettings: AwsComputeSettings! (type)
        public static string AwsComputeSettings_TypedFieldSpec(AwsComputeSettings fieldSpec)
        {
            string args = "\n(\ncomputeSettingId: $computeSettingId\n)";
            return "awsComputeSettings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsComputeSettings_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsComputeSettings((AwsComputeSettings)fieldSpecObj);
        }
        public static string AwsComputeSettings(AwsComputeSettings fieldSpec)
        {
            return AwsComputeSettings_TypedFieldSpec(fieldSpec);
        }
        public static string AwsComputeSettings(object fieldSpecObj)
        {
            return AwsComputeSettings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsComputeSettingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsComputeSettings() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeAccount? AwsNativeAccount
        // GraphQL -> awsNativeAccount: AwsNativeAccount! (type)
        public static string AwsNativeAccount_TypedFieldSpec(AwsNativeAccount fieldSpec)
        {
            string args = "\n(\nawsNativeAccountRubrikId: $awsNativeAccountRubrikId\nawsNativeProtectionFeature: $awsNativeProtectionFeature\n)";
            return "awsNativeAccount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeAccount((AwsNativeAccount)fieldSpecObj);
        }
        public static string AwsNativeAccount(AwsNativeAccount fieldSpec)
        {
            return AwsNativeAccount_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeAccount(object fieldSpecObj)
        {
            return AwsNativeAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeAccount() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeAccountConnection? AwsNativeAccounts
        // GraphQL -> awsNativeAccounts: AwsNativeAccountConnection! (type)
        public static string AwsNativeAccounts_TypedFieldSpec(AwsNativeAccountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\naccountFilters: $accountFilters\nauthorizedOperationFilter: $authorizedOperationFilter\nawsNativeProtectionFeature: $awsNativeProtectionFeature\n)";
            return "awsNativeAccounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeAccounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeAccounts((AwsNativeAccountConnection)fieldSpecObj);
        }
        public static string AwsNativeAccounts(AwsNativeAccountConnection fieldSpec)
        {
            return AwsNativeAccounts_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeAccounts(object fieldSpecObj)
        {
            return AwsNativeAccounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeAccountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeAccountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeEbsVolume? AwsNativeEbsVolume
        // GraphQL -> awsNativeEbsVolume: AwsNativeEbsVolume! (type)
        public static string AwsNativeEbsVolume_TypedFieldSpec(AwsNativeEbsVolume fieldSpec)
        {
            string args = "\n(\nebsVolumeRubrikId: $ebsVolumeRubrikId\n)";
            return "awsNativeEbsVolume" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeEbsVolume_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeEbsVolume((AwsNativeEbsVolume)fieldSpecObj);
        }
        public static string AwsNativeEbsVolume(AwsNativeEbsVolume fieldSpec)
        {
            return AwsNativeEbsVolume_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeEbsVolume(object fieldSpecObj)
        {
            return AwsNativeEbsVolume_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeEbsVolumeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeEbsVolume() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeEbsVolumeConnection? AwsNativeEbsVolumes
        // GraphQL -> awsNativeEbsVolumes: AwsNativeEbsVolumeConnection! (type)
        public static string AwsNativeEbsVolumes_TypedFieldSpec(AwsNativeEbsVolumeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nebsVolumeFilters: $ebsVolumeFilters\n)";
            return "awsNativeEbsVolumes" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeEbsVolumes_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeEbsVolumes((AwsNativeEbsVolumeConnection)fieldSpecObj);
        }
        public static string AwsNativeEbsVolumes(AwsNativeEbsVolumeConnection fieldSpec)
        {
            return AwsNativeEbsVolumes_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeEbsVolumes(object fieldSpecObj)
        {
            return AwsNativeEbsVolumes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeEbsVolumesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeEbsVolumeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeEbsVolumeConnection? AwsNativeEbsVolumesByName
        // GraphQL -> awsNativeEbsVolumesByName: AwsNativeEbsVolumeConnection! (type)
        public static string AwsNativeEbsVolumesByName_TypedFieldSpec(AwsNativeEbsVolumeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nebsVolumeName: $ebsVolumeName\n)";
            return "awsNativeEbsVolumesByName" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeEbsVolumesByName_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeEbsVolumesByName((AwsNativeEbsVolumeConnection)fieldSpecObj);
        }
        public static string AwsNativeEbsVolumesByName(AwsNativeEbsVolumeConnection fieldSpec)
        {
            return AwsNativeEbsVolumesByName_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeEbsVolumesByName(object fieldSpecObj)
        {
            return AwsNativeEbsVolumesByName_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeEbsVolumesByNameFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeEbsVolumeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeEc2Instance? AwsNativeEc2Instance
        // GraphQL -> awsNativeEc2Instance: AwsNativeEc2Instance! (type)
        public static string AwsNativeEc2Instance_TypedFieldSpec(AwsNativeEc2Instance fieldSpec)
        {
            string args = "\n(\nec2InstanceRubrikId: $ec2InstanceRubrikId\n)";
            return "awsNativeEc2Instance" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeEc2Instance_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeEc2Instance((AwsNativeEc2Instance)fieldSpecObj);
        }
        public static string AwsNativeEc2Instance(AwsNativeEc2Instance fieldSpec)
        {
            return AwsNativeEc2Instance_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeEc2Instance(object fieldSpecObj)
        {
            return AwsNativeEc2Instance_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeEc2InstanceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeEc2Instance() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeEc2InstanceConnection? AwsNativeEc2Instances
        // GraphQL -> awsNativeEc2Instances: AwsNativeEc2InstanceConnection! (type)
        public static string AwsNativeEc2Instances_TypedFieldSpec(AwsNativeEc2InstanceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\ndescendantTypeFilter: $descendantTypeFilter\nec2InstanceFilters: $ec2InstanceFilters\n)";
            return "awsNativeEc2Instances" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeEc2Instances_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeEc2Instances((AwsNativeEc2InstanceConnection)fieldSpecObj);
        }
        public static string AwsNativeEc2Instances(AwsNativeEc2InstanceConnection fieldSpec)
        {
            return AwsNativeEc2Instances_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeEc2Instances(object fieldSpecObj)
        {
            return AwsNativeEc2Instances_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeEc2InstancesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeEc2InstanceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeEc2InstanceConnection? AwsNativeEc2InstancesByName
        // GraphQL -> awsNativeEc2InstancesByName: AwsNativeEc2InstanceConnection! (type)
        public static string AwsNativeEc2InstancesByName_TypedFieldSpec(AwsNativeEc2InstanceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nec2InstanceName: $ec2InstanceName\n)";
            return "awsNativeEc2InstancesByName" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeEc2InstancesByName_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeEc2InstancesByName((AwsNativeEc2InstanceConnection)fieldSpecObj);
        }
        public static string AwsNativeEc2InstancesByName(AwsNativeEc2InstanceConnection fieldSpec)
        {
            return AwsNativeEc2InstancesByName_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeEc2InstancesByName(object fieldSpecObj)
        {
            return AwsNativeEc2InstancesByName_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeEc2InstancesByNameFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeEc2InstanceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RdsInstanceExportDefaults? AwsNativeRdsExportDefaults
        // GraphQL -> awsNativeRdsExportDefaults: RdsInstanceExportDefaults! (type)
        public static string AwsNativeRdsExportDefaults_TypedFieldSpec(RdsInstanceExportDefaults fieldSpec)
        {
            string args = "\n(\nrdsInstanceRubrikId: $rdsInstanceRubrikId\nsnapshotId: $snapshotId\nisPointInTime: $isPointInTime\n)";
            return "awsNativeRdsExportDefaults" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeRdsExportDefaults_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeRdsExportDefaults((RdsInstanceExportDefaults)fieldSpecObj);
        }
        public static string AwsNativeRdsExportDefaults(RdsInstanceExportDefaults fieldSpec)
        {
            return AwsNativeRdsExportDefaults_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeRdsExportDefaults(object fieldSpecObj)
        {
            return AwsNativeRdsExportDefaults_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeRdsExportDefaultsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RdsInstanceExportDefaults() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeRdsInstance? AwsNativeRdsInstance
        // GraphQL -> awsNativeRdsInstance: AwsNativeRdsInstance! (type)
        public static string AwsNativeRdsInstance_TypedFieldSpec(AwsNativeRdsInstance fieldSpec)
        {
            string args = "\n(\nrdsInstanceRubrikId: $rdsInstanceRubrikId\n)";
            return "awsNativeRdsInstance" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeRdsInstance_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeRdsInstance((AwsNativeRdsInstance)fieldSpecObj);
        }
        public static string AwsNativeRdsInstance(AwsNativeRdsInstance fieldSpec)
        {
            return AwsNativeRdsInstance_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeRdsInstance(object fieldSpecObj)
        {
            return AwsNativeRdsInstance_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeRdsInstanceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeRdsInstance() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeRdsInstanceConnection? AwsNativeRdsInstances
        // GraphQL -> awsNativeRdsInstances: AwsNativeRdsInstanceConnection! (type)
        public static string AwsNativeRdsInstances_TypedFieldSpec(AwsNativeRdsInstanceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nrdsInstanceFilters: $rdsInstanceFilters\n)";
            return "awsNativeRdsInstances" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeRdsInstances_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeRdsInstances((AwsNativeRdsInstanceConnection)fieldSpecObj);
        }
        public static string AwsNativeRdsInstances(AwsNativeRdsInstanceConnection fieldSpec)
        {
            return AwsNativeRdsInstances_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeRdsInstances(object fieldSpecObj)
        {
            return AwsNativeRdsInstances_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeRdsInstancesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeRdsInstanceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeRdsPointInTimeRestoreWindow? AwsNativeRdsPointInTimeRestoreWindow
        // GraphQL -> awsNativeRdsPointInTimeRestoreWindow: AwsNativeRdsPointInTimeRestoreWindow! (type)
        public static string AwsNativeRdsPointInTimeRestoreWindow_TypedFieldSpec(AwsNativeRdsPointInTimeRestoreWindow fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\nrdsInstanceName: $rdsInstanceName\nrdsDatabaseRubrikId: $rdsDatabaseRubrikId\n)";
            return "awsNativeRdsPointInTimeRestoreWindow" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeRdsPointInTimeRestoreWindow_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeRdsPointInTimeRestoreWindow((AwsNativeRdsPointInTimeRestoreWindow)fieldSpecObj);
        }
        public static string AwsNativeRdsPointInTimeRestoreWindow(AwsNativeRdsPointInTimeRestoreWindow fieldSpec)
        {
            return AwsNativeRdsPointInTimeRestoreWindow_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeRdsPointInTimeRestoreWindow(object fieldSpecObj)
        {
            return AwsNativeRdsPointInTimeRestoreWindow_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeRdsPointInTimeRestoreWindowFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeRdsPointInTimeRestoreWindow() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeRoot? AwsNativeRoot
        // GraphQL -> awsNativeRoot: AwsNativeRoot! (type)
        public static string AwsNativeRoot_TypedFieldSpec(AwsNativeRoot fieldSpec)
        {
            string args = "";
            return "awsNativeRoot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeRoot_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeRoot((AwsNativeRoot)fieldSpecObj);
        }
        public static string AwsNativeRoot(AwsNativeRoot fieldSpec)
        {
            return AwsNativeRoot_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeRoot(object fieldSpecObj)
        {
            return AwsNativeRoot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeRootFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeRoot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsNativeS3Bucket? AwsNativeS3Bucket
        // GraphQL -> awsNativeS3Bucket: AwsNativeS3Bucket! (type)
        public static string AwsNativeS3Bucket_TypedFieldSpec(AwsNativeS3Bucket fieldSpec)
        {
            string args = "\n(\ns3BucketRubrikId: $s3BucketRubrikId\n)";
            return "awsNativeS3Bucket" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsNativeS3Bucket_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsNativeS3Bucket((AwsNativeS3Bucket)fieldSpecObj);
        }
        public static string AwsNativeS3Bucket(AwsNativeS3Bucket fieldSpec)
        {
            return AwsNativeS3Bucket_TypedFieldSpec(fieldSpec);
        }
        public static string AwsNativeS3Bucket(object fieldSpecObj)
        {
            return AwsNativeS3Bucket_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsNativeS3BucketFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsNativeS3Bucket() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AwsTrustPolicy? AwsTrustPolicy
        // GraphQL -> awsTrustPolicy: AwsTrustPolicy! (type)
        public static string AwsTrustPolicy_TypedFieldSpec(AwsTrustPolicy fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "awsTrustPolicy" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AwsTrustPolicy_ObjectFieldSpec(object fieldSpecObj)
        {
            return AwsTrustPolicy((AwsTrustPolicy)fieldSpecObj);
        }
        public static string AwsTrustPolicy(AwsTrustPolicy fieldSpec)
        {
            return AwsTrustPolicy_TypedFieldSpec(fieldSpec);
        }
        public static string AwsTrustPolicy(object fieldSpecObj)
        {
            return AwsTrustPolicy_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AwsTrustPolicyFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AwsTrustPolicy() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureAdDirectoryConnection? AzureAdDirectories
        // GraphQL -> azureAdDirectories: AzureAdDirectoryConnection! (type)
        public static string AzureAdDirectories_TypedFieldSpec(AzureAdDirectoryConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "azureAdDirectories" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureAdDirectories_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureAdDirectories((AzureAdDirectoryConnection)fieldSpecObj);
        }
        public static string AzureAdDirectories(AzureAdDirectoryConnection fieldSpec)
        {
            return AzureAdDirectories_TypedFieldSpec(fieldSpec);
        }
        public static string AzureAdDirectories(object fieldSpecObj)
        {
            return AzureAdDirectories_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureAdDirectoriesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureAdDirectoryConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureAdDirectory? AzureAdDirectory
        // GraphQL -> azureAdDirectory: AzureAdDirectory! (type)
        public static string AzureAdDirectory_TypedFieldSpec(AzureAdDirectory fieldSpec)
        {
            string args = "\n(\nworkloadFid: $workloadFid\n)";
            return "azureAdDirectory" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureAdDirectory_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureAdDirectory((AzureAdDirectory)fieldSpecObj);
        }
        public static string AzureAdDirectory(AzureAdDirectory fieldSpec)
        {
            return AzureAdDirectory_TypedFieldSpec(fieldSpec);
        }
        public static string AzureAdDirectory(object fieldSpecObj)
        {
            return AzureAdDirectory_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureAdDirectoryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureAdDirectory() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureAdObjectConnection? AzureAdObjectsByType
        // GraphQL -> azureAdObjectsByType: AzureAdObjectConnection! (type)
        public static string AzureAdObjectsByType_TypedFieldSpec(AzureAdObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortByOption: $sortByOption\nsortOrder: $sortOrder\ninput: $input\n)";
            return "azureAdObjectsByType" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureAdObjectsByType_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureAdObjectsByType((AzureAdObjectConnection)fieldSpecObj);
        }
        public static string AzureAdObjectsByType(AzureAdObjectConnection fieldSpec)
        {
            return AzureAdObjectsByType_TypedFieldSpec(fieldSpec);
        }
        public static string AzureAdObjectsByType(object fieldSpecObj)
        {
            return AzureAdObjectsByType_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureAdObjectsByTypeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureAdObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureCloudAccountPermissionConfigResponse? AzureCloudAccountPermissionConfig
        // GraphQL -> azureCloudAccountPermissionConfig: AzureCloudAccountPermissionConfigResponse! (type)
        public static string AzureCloudAccountPermissionConfig_TypedFieldSpec(AzureCloudAccountPermissionConfigResponse fieldSpec)
        {
            string args = "\n(\nfeature: $feature\n)";
            return "azureCloudAccountPermissionConfig" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureCloudAccountPermissionConfig_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureCloudAccountPermissionConfig((AzureCloudAccountPermissionConfigResponse)fieldSpecObj);
        }
        public static string AzureCloudAccountPermissionConfig(AzureCloudAccountPermissionConfigResponse fieldSpec)
        {
            return AzureCloudAccountPermissionConfig_TypedFieldSpec(fieldSpec);
        }
        public static string AzureCloudAccountPermissionConfig(object fieldSpecObj)
        {
            return AzureCloudAccountPermissionConfig_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureCloudAccountPermissionConfigFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureCloudAccountPermissionConfigResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureCloudAccountSubscriptionWithFeatures? AzureCloudAccountSubscriptionWithFeatures
        // GraphQL -> azureCloudAccountSubscriptionWithFeatures: AzureCloudAccountSubscriptionWithFeatures! (type)
        public static string AzureCloudAccountSubscriptionWithFeatures_TypedFieldSpec(AzureCloudAccountSubscriptionWithFeatures fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\n)";
            return "azureCloudAccountSubscriptionWithFeatures" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureCloudAccountSubscriptionWithFeatures_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureCloudAccountSubscriptionWithFeatures((AzureCloudAccountSubscriptionWithFeatures)fieldSpecObj);
        }
        public static string AzureCloudAccountSubscriptionWithFeatures(AzureCloudAccountSubscriptionWithFeatures fieldSpec)
        {
            return AzureCloudAccountSubscriptionWithFeatures_TypedFieldSpec(fieldSpec);
        }
        public static string AzureCloudAccountSubscriptionWithFeatures(object fieldSpecObj)
        {
            return AzureCloudAccountSubscriptionWithFeatures_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureCloudAccountSubscriptionWithFeaturesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureCloudAccountSubscriptionWithFeatures() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureCloudAccountTenant? AzureCloudAccountTenant
        // GraphQL -> azureCloudAccountTenant: AzureCloudAccountTenant! (type)
        public static string AzureCloudAccountTenant_TypedFieldSpec(AzureCloudAccountTenant fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nfeature: $feature\nsubscriptionStatusFilters: $subscriptionStatusFilters\nsubscriptionSearchText: $subscriptionSearchText\nsubscriptionIdsFilter: $subscriptionIdsFilter\n)";
            return "azureCloudAccountTenant" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureCloudAccountTenant_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureCloudAccountTenant((AzureCloudAccountTenant)fieldSpecObj);
        }
        public static string AzureCloudAccountTenant(AzureCloudAccountTenant fieldSpec)
        {
            return AzureCloudAccountTenant_TypedFieldSpec(fieldSpec);
        }
        public static string AzureCloudAccountTenant(object fieldSpecObj)
        {
            return AzureCloudAccountTenant_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureCloudAccountTenantFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureCloudAccountTenant() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureCloudAccountTenantWithExoConfigs? AzureCloudAccountTenantWithExoConfigs
        // GraphQL -> azureCloudAccountTenantWithExoConfigs: AzureCloudAccountTenantWithExoConfigs! (type)
        public static string AzureCloudAccountTenantWithExoConfigs_TypedFieldSpec(AzureCloudAccountTenantWithExoConfigs fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nfeature: $feature\nsubscriptionStatusFilters: $subscriptionStatusFilters\nsubscriptionSearchText: $subscriptionSearchText\nsubscriptionIdsFilter: $subscriptionIdsFilter\n)";
            return "azureCloudAccountTenantWithExoConfigs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureCloudAccountTenantWithExoConfigs_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureCloudAccountTenantWithExoConfigs((AzureCloudAccountTenantWithExoConfigs)fieldSpecObj);
        }
        public static string AzureCloudAccountTenantWithExoConfigs(AzureCloudAccountTenantWithExoConfigs fieldSpec)
        {
            return AzureCloudAccountTenantWithExoConfigs_TypedFieldSpec(fieldSpec);
        }
        public static string AzureCloudAccountTenantWithExoConfigs(object fieldSpecObj)
        {
            return AzureCloudAccountTenantWithExoConfigs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureCloudAccountTenantWithExoConfigsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureCloudAccountTenantWithExoConfigs() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeManagedDisk? AzureNativeManagedDisk
        // GraphQL -> azureNativeManagedDisk: AzureNativeManagedDisk! (type)
        public static string AzureNativeManagedDisk_TypedFieldSpec(AzureNativeManagedDisk fieldSpec)
        {
            string args = "\n(\nazureManagedDiskRubrikId: $azureManagedDiskRubrikId\n)";
            return "azureNativeManagedDisk" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeManagedDisk_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeManagedDisk((AzureNativeManagedDisk)fieldSpecObj);
        }
        public static string AzureNativeManagedDisk(AzureNativeManagedDisk fieldSpec)
        {
            return AzureNativeManagedDisk_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeManagedDisk(object fieldSpecObj)
        {
            return AzureNativeManagedDisk_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeManagedDiskFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeManagedDisk() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeManagedDiskConnection? AzureNativeManagedDisks
        // GraphQL -> azureNativeManagedDisks: AzureNativeManagedDiskConnection! (type)
        public static string AzureNativeManagedDisks_TypedFieldSpec(AzureNativeManagedDiskConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\ndiskFilters: $diskFilters\n)";
            return "azureNativeManagedDisks" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeManagedDisks_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeManagedDisks((AzureNativeManagedDiskConnection)fieldSpecObj);
        }
        public static string AzureNativeManagedDisks(AzureNativeManagedDiskConnection fieldSpec)
        {
            return AzureNativeManagedDisks_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeManagedDisks(object fieldSpecObj)
        {
            return AzureNativeManagedDisks_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeManagedDisksFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeManagedDiskConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeResourceGroup? AzureNativeResourceGroup
        // GraphQL -> azureNativeResourceGroup: AzureNativeResourceGroup! (type)
        public static string AzureNativeResourceGroup_TypedFieldSpec(AzureNativeResourceGroup fieldSpec)
        {
            string args = "\n(\nresourceGroupId: $resourceGroupId\n)";
            return "azureNativeResourceGroup" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeResourceGroup_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeResourceGroup((AzureNativeResourceGroup)fieldSpecObj);
        }
        public static string AzureNativeResourceGroup(AzureNativeResourceGroup fieldSpec)
        {
            return AzureNativeResourceGroup_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeResourceGroup(object fieldSpecObj)
        {
            return AzureNativeResourceGroup_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeResourceGroupFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeResourceGroup() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeResourceGroupConnection? AzureNativeResourceGroups
        // GraphQL -> azureNativeResourceGroups: AzureNativeResourceGroupConnection! (type)
        public static string AzureNativeResourceGroups_TypedFieldSpec(AzureNativeResourceGroupConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\ncommonResourceGroupFilters: $commonResourceGroupFilters\nprotectedObjectTypes: $protectedObjectTypes\nazureNativeProtectionFeatures: $azureNativeProtectionFeatures\n)";
            return "azureNativeResourceGroups" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeResourceGroups_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeResourceGroups((AzureNativeResourceGroupConnection)fieldSpecObj);
        }
        public static string AzureNativeResourceGroups(AzureNativeResourceGroupConnection fieldSpec)
        {
            return AzureNativeResourceGroups_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeResourceGroups(object fieldSpecObj)
        {
            return AzureNativeResourceGroups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeResourceGroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeResourceGroupConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeRoot? AzureNativeRoot
        // GraphQL -> azureNativeRoot: AzureNativeRoot! (type)
        public static string AzureNativeRoot_TypedFieldSpec(AzureNativeRoot fieldSpec)
        {
            string args = "";
            return "azureNativeRoot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeRoot_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeRoot((AzureNativeRoot)fieldSpecObj);
        }
        public static string AzureNativeRoot(AzureNativeRoot fieldSpec)
        {
            return AzureNativeRoot_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeRoot(object fieldSpecObj)
        {
            return AzureNativeRoot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeRootFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeRoot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeSubscription? AzureNativeSubscription
        // GraphQL -> azureNativeSubscription: AzureNativeSubscription! (type)
        public static string AzureNativeSubscription_TypedFieldSpec(AzureNativeSubscription fieldSpec)
        {
            string args = "\n(\nazureSubscriptionRubrikId: $azureSubscriptionRubrikId\n)";
            return "azureNativeSubscription" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeSubscription_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeSubscription((AzureNativeSubscription)fieldSpecObj);
        }
        public static string AzureNativeSubscription(AzureNativeSubscription fieldSpec)
        {
            return AzureNativeSubscription_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeSubscription(object fieldSpecObj)
        {
            return AzureNativeSubscription_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeSubscriptionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeSubscription() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeSubscriptionConnection? AzureNativeSubscriptions
        // GraphQL -> azureNativeSubscriptions: AzureNativeSubscriptionConnection! (type)
        public static string AzureNativeSubscriptions_TypedFieldSpec(AzureNativeSubscriptionConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nsubscriptionFilters: $subscriptionFilters\nauthorizedOperationFilter: $authorizedOperationFilter\nworkloadHierarchy: $workloadHierarchy\nazureNativeProtectionFeature: $azureNativeProtectionFeature\n)";
            return "azureNativeSubscriptions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeSubscriptions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeSubscriptions((AzureNativeSubscriptionConnection)fieldSpecObj);
        }
        public static string AzureNativeSubscriptions(AzureNativeSubscriptionConnection fieldSpec)
        {
            return AzureNativeSubscriptions_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeSubscriptions(object fieldSpecObj)
        {
            return AzureNativeSubscriptions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeSubscriptionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeSubscriptionConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeVirtualMachine? AzureNativeVirtualMachine
        // GraphQL -> azureNativeVirtualMachine: AzureNativeVirtualMachine! (type)
        public static string AzureNativeVirtualMachine_TypedFieldSpec(AzureNativeVirtualMachine fieldSpec)
        {
            string args = "\n(\nazureVirtualMachineRubrikId: $azureVirtualMachineRubrikId\n)";
            return "azureNativeVirtualMachine" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeVirtualMachine_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeVirtualMachine((AzureNativeVirtualMachine)fieldSpecObj);
        }
        public static string AzureNativeVirtualMachine(AzureNativeVirtualMachine fieldSpec)
        {
            return AzureNativeVirtualMachine_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeVirtualMachine(object fieldSpecObj)
        {
            return AzureNativeVirtualMachine_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeVirtualMachineFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeVirtualMachine() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeVirtualMachineConnection? AzureNativeVirtualMachines
        // GraphQL -> azureNativeVirtualMachines: AzureNativeVirtualMachineConnection! (type)
        public static string AzureNativeVirtualMachines_TypedFieldSpec(AzureNativeVirtualMachineConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\ndescendantTypeFilter: $descendantTypeFilter\nvirtualMachineFilters: $virtualMachineFilters\n)";
            return "azureNativeVirtualMachines" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureNativeVirtualMachines_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureNativeVirtualMachines((AzureNativeVirtualMachineConnection)fieldSpecObj);
        }
        public static string AzureNativeVirtualMachines(AzureNativeVirtualMachineConnection fieldSpec)
        {
            return AzureNativeVirtualMachines_TypedFieldSpec(fieldSpec);
        }
        public static string AzureNativeVirtualMachines(object fieldSpecObj)
        {
            return AzureNativeVirtualMachines_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureNativeVirtualMachinesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeVirtualMachineConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNetworkSecurityGroupResp? AzureO365CheckNsgOutboundRules
        // GraphQL -> azureO365CheckNSGOutboundRules: AzureNetworkSecurityGroupResp! (type)
        public static string AzureO365CheckNsgOutboundRules_TypedFieldSpec(AzureNetworkSecurityGroupResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nresourceGroupName: $resourceGroupName\nvnet_name: $vnet_name\nsubnet_name: $subnet_name\n)";
            return "azureO365CheckNSGOutboundRules" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365CheckNsgOutboundRules_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365CheckNsgOutboundRules((AzureNetworkSecurityGroupResp)fieldSpecObj);
        }
        public static string AzureO365CheckNsgOutboundRules(AzureNetworkSecurityGroupResp fieldSpec)
        {
            return AzureO365CheckNsgOutboundRules_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365CheckNsgOutboundRules(object fieldSpecObj)
        {
            return AzureO365CheckNsgOutboundRules_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365CheckNsgOutboundRulesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNetworkSecurityGroupResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNetworkSubnetResp? AzureO365CheckNetworkSubnet
        // GraphQL -> azureO365CheckNetworkSubnet: AzureNetworkSubnetResp! (type)
        public static string AzureO365CheckNetworkSubnet_TypedFieldSpec(AzureNetworkSubnetResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nresourceGroupName: $resourceGroupName\nvnet_name: $vnet_name\nsubnet_name: $subnet_name\nstrict_addr_check: $strict_addr_check\n)";
            return "azureO365CheckNetworkSubnet" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365CheckNetworkSubnet_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365CheckNetworkSubnet((AzureNetworkSubnetResp)fieldSpecObj);
        }
        public static string AzureO365CheckNetworkSubnet(AzureNetworkSubnetResp fieldSpec)
        {
            return AzureO365CheckNetworkSubnet_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365CheckNetworkSubnet(object fieldSpecObj)
        {
            return AzureO365CheckNetworkSubnet_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365CheckNetworkSubnetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNetworkSubnetResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureResourceAvailabilityResp? AzureO365CheckResourceGroupName
        // GraphQL -> azureO365CheckResourceGroupName: AzureResourceAvailabilityResp! (type)
        public static string AzureO365CheckResourceGroupName_TypedFieldSpec(AzureResourceAvailabilityResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\ngroupName: $groupName\n)";
            return "azureO365CheckResourceGroupName" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365CheckResourceGroupName_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365CheckResourceGroupName((AzureResourceAvailabilityResp)fieldSpecObj);
        }
        public static string AzureO365CheckResourceGroupName(AzureResourceAvailabilityResp fieldSpec)
        {
            return AzureO365CheckResourceGroupName_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365CheckResourceGroupName(object fieldSpecObj)
        {
            return AzureO365CheckResourceGroupName_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365CheckResourceGroupNameFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureResourceAvailabilityResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureResourceAvailabilityResp? AzureO365CheckStorageAccountAccessibility
        // GraphQL -> azureO365CheckStorageAccountAccessibility: AzureResourceAvailabilityResp! (type)
        public static string AzureO365CheckStorageAccountAccessibility_TypedFieldSpec(AzureResourceAvailabilityResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nstorage_account_name: $storage_account_name\ngroupName: $groupName\n)";
            return "azureO365CheckStorageAccountAccessibility" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365CheckStorageAccountAccessibility_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365CheckStorageAccountAccessibility((AzureResourceAvailabilityResp)fieldSpecObj);
        }
        public static string AzureO365CheckStorageAccountAccessibility(AzureResourceAvailabilityResp fieldSpec)
        {
            return AzureO365CheckStorageAccountAccessibility_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365CheckStorageAccountAccessibility(object fieldSpecObj)
        {
            return AzureO365CheckStorageAccountAccessibility_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365CheckStorageAccountAccessibilityFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureResourceAvailabilityResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureResourceAvailabilityResp? AzureO365CheckStorageAccountName
        // GraphQL -> azureO365CheckStorageAccountName: AzureResourceAvailabilityResp! (type)
        public static string AzureO365CheckStorageAccountName_TypedFieldSpec(AzureResourceAvailabilityResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nstorage_account_name: $storage_account_name\n)";
            return "azureO365CheckStorageAccountName" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365CheckStorageAccountName_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365CheckStorageAccountName((AzureResourceAvailabilityResp)fieldSpecObj);
        }
        public static string AzureO365CheckStorageAccountName(AzureResourceAvailabilityResp fieldSpec)
        {
            return AzureO365CheckStorageAccountName_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365CheckStorageAccountName(object fieldSpecObj)
        {
            return AzureO365CheckStorageAccountName_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365CheckStorageAccountNameFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureResourceAvailabilityResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureResourceAvailabilityResp? AzureO365CheckSubscriptionQuota
        // GraphQL -> azureO365CheckSubscriptionQuota: AzureResourceAvailabilityResp! (type)
        public static string AzureO365CheckSubscriptionQuota_TypedFieldSpec(AzureResourceAvailabilityResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nregionName: $regionName\n)";
            return "azureO365CheckSubscriptionQuota" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365CheckSubscriptionQuota_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365CheckSubscriptionQuota((AzureResourceAvailabilityResp)fieldSpecObj);
        }
        public static string AzureO365CheckSubscriptionQuota(AzureResourceAvailabilityResp fieldSpec)
        {
            return AzureO365CheckSubscriptionQuota_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365CheckSubscriptionQuota(object fieldSpecObj)
        {
            return AzureO365CheckSubscriptionQuota_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365CheckSubscriptionQuotaFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureResourceAvailabilityResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureResourceAvailabilityResp? AzureO365CheckVirtualNetworkName
        // GraphQL -> azureO365CheckVirtualNetworkName: AzureResourceAvailabilityResp! (type)
        public static string AzureO365CheckVirtualNetworkName_TypedFieldSpec(AzureResourceAvailabilityResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\ngroupName: $groupName\nvnet_name: $vnet_name\n)";
            return "azureO365CheckVirtualNetworkName" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365CheckVirtualNetworkName_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365CheckVirtualNetworkName((AzureResourceAvailabilityResp)fieldSpecObj);
        }
        public static string AzureO365CheckVirtualNetworkName(AzureResourceAvailabilityResp fieldSpec)
        {
            return AzureO365CheckVirtualNetworkName_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365CheckVirtualNetworkName(object fieldSpecObj)
        {
            return AzureO365CheckVirtualNetworkName_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365CheckVirtualNetworkNameFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureResourceAvailabilityResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetAzureO365ExocomputeResp? AzureO365Exocompute
        // GraphQL -> azureO365Exocompute: GetAzureO365ExocomputeResp! (type)
        public static string AzureO365Exocompute_TypedFieldSpec(GetAzureO365ExocomputeResp fieldSpec)
        {
            string args = "\n(\norgId: $orgId\nexocomputeClusterId: $exocomputeClusterId\n)";
            return "azureO365Exocompute" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365Exocompute_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365Exocompute((GetAzureO365ExocomputeResp)fieldSpecObj);
        }
        public static string AzureO365Exocompute(GetAzureO365ExocomputeResp fieldSpec)
        {
            return AzureO365Exocompute_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365Exocompute(object fieldSpecObj)
        {
            return AzureO365Exocompute_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365ExocomputeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetAzureO365ExocomputeResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetAzureHostTypeResp? AzureO365GetAzureHostType
        // GraphQL -> azureO365GetAzureHostType: GetAzureHostTypeResp! (type)
        public static string AzureO365GetAzureHostType_TypedFieldSpec(GetAzureHostTypeResp fieldSpec)
        {
            string args = "";
            return "azureO365GetAzureHostType" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365GetAzureHostType_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365GetAzureHostType((GetAzureHostTypeResp)fieldSpecObj);
        }
        public static string AzureO365GetAzureHostType(GetAzureHostTypeResp fieldSpec)
        {
            return AzureO365GetAzureHostType_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365GetAzureHostType(object fieldSpecObj)
        {
            return AzureO365GetAzureHostType_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365GetAzureHostTypeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetAzureHostTypeResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNetworkSubnetUnusedAddrResp? AzureO365GetNetworkSubnetUnusedAddr
        // GraphQL -> azureO365GetNetworkSubnetUnusedAddr: AzureNetworkSubnetUnusedAddrResp! (type)
        public static string AzureO365GetNetworkSubnetUnusedAddr_TypedFieldSpec(AzureNetworkSubnetUnusedAddrResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nresourceGroupName: $resourceGroupName\nvnet_name: $vnet_name\nsubnet_name: $subnet_name\nstrict_addr_check: $strict_addr_check\n)";
            return "azureO365GetNetworkSubnetUnusedAddr" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365GetNetworkSubnetUnusedAddr_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365GetNetworkSubnetUnusedAddr((AzureNetworkSubnetUnusedAddrResp)fieldSpecObj);
        }
        public static string AzureO365GetNetworkSubnetUnusedAddr(AzureNetworkSubnetUnusedAddrResp fieldSpec)
        {
            return AzureO365GetNetworkSubnetUnusedAddr_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365GetNetworkSubnetUnusedAddr(object fieldSpecObj)
        {
            return AzureO365GetNetworkSubnetUnusedAddr_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365GetNetworkSubnetUnusedAddrFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNetworkSubnetUnusedAddrResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureUserRoleResp? AzureO365ValidateUserRoles
        // GraphQL -> azureO365ValidateUserRoles: AzureUserRoleResp! (type)
        public static string AzureO365ValidateUserRoles_TypedFieldSpec(AzureUserRoleResp fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\n)";
            return "azureO365ValidateUserRoles" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureO365ValidateUserRoles_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureO365ValidateUserRoles((AzureUserRoleResp)fieldSpecObj);
        }
        public static string AzureO365ValidateUserRoles(AzureUserRoleResp fieldSpec)
        {
            return AzureO365ValidateUserRoles_TypedFieldSpec(fieldSpec);
        }
        public static string AzureO365ValidateUserRoles(object fieldSpecObj)
        {
            return AzureO365ValidateUserRoles_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureO365ValidateUserRolesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureUserRoleResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RegionConnection? AzureRegions
        // GraphQL -> azureRegions: RegionConnection! (type)
        public static string AzureRegions_TypedFieldSpec(RegionConnection fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\n)";
            return "azureRegions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureRegions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureRegions((RegionConnection)fieldSpecObj);
        }
        public static string AzureRegions(RegionConnection fieldSpec)
        {
            return AzureRegions_TypedFieldSpec(fieldSpec);
        }
        public static string AzureRegions(object fieldSpecObj)
        {
            return AzureRegions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureRegionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RegionConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ResourceGroupConnection? AzureResourceGroups
        // GraphQL -> azureResourceGroups: ResourceGroupConnection! (type)
        public static string AzureResourceGroups_TypedFieldSpec(ResourceGroupConnection fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\n)";
            return "azureResourceGroups" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureResourceGroups_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureResourceGroups((ResourceGroupConnection)fieldSpecObj);
        }
        public static string AzureResourceGroups(ResourceGroupConnection fieldSpec)
        {
            return AzureResourceGroups_TypedFieldSpec(fieldSpec);
        }
        public static string AzureResourceGroups(object fieldSpecObj)
        {
            return AzureResourceGroups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureResourceGroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ResourceGroupConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSqlDatabaseDb? AzureSqlDatabase
        // GraphQL -> azureSqlDatabase: AzureSqlDatabaseDb! (type)
        public static string AzureSqlDatabase_TypedFieldSpec(AzureSqlDatabaseDb fieldSpec)
        {
            string args = "\n(\nazureSqlDatabaseRubrikId: $azureSqlDatabaseRubrikId\n)";
            return "azureSqlDatabase" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlDatabase_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlDatabase((AzureSqlDatabaseDb)fieldSpecObj);
        }
        public static string AzureSqlDatabase(AzureSqlDatabaseDb fieldSpec)
        {
            return AzureSqlDatabase_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlDatabase(object fieldSpecObj)
        {
            return AzureSqlDatabase_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlDatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSqlDatabaseDb() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeSqlDatabasePointInTimeRestoreWindow? AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzure
        // GraphQL -> azureSqlDatabaseDbPointInTimeRestoreWindowFromAzure: AzureNativeSqlDatabasePointInTimeRestoreWindow! (type)
        public static string AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzure_TypedFieldSpec(AzureNativeSqlDatabasePointInTimeRestoreWindow fieldSpec)
        {
            string args = "\n(\nsubscriptionId: $subscriptionId\nresourceGroupName: $resourceGroupName\nazureSqlDatabaseServerName: $azureSqlDatabaseServerName\nazureSqlDatabaseName: $azureSqlDatabaseName\n)";
            return "azureSqlDatabaseDbPointInTimeRestoreWindowFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzure((AzureNativeSqlDatabasePointInTimeRestoreWindow)fieldSpecObj);
        }
        public static string AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzure(AzureNativeSqlDatabasePointInTimeRestoreWindow fieldSpec)
        {
            return AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzure(object fieldSpecObj)
        {
            return AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlDatabaseDbPointInTimeRestoreWindowFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeSqlDatabasePointInTimeRestoreWindow() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSqlDatabaseServer? AzureSqlDatabaseServer
        // GraphQL -> azureSqlDatabaseServer: AzureSqlDatabaseServer! (type)
        public static string AzureSqlDatabaseServer_TypedFieldSpec(AzureSqlDatabaseServer fieldSpec)
        {
            string args = "\n(\nazureSqlDatabaseServerRubrikId: $azureSqlDatabaseServerRubrikId\n)";
            return "azureSqlDatabaseServer" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlDatabaseServer_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlDatabaseServer((AzureSqlDatabaseServer)fieldSpecObj);
        }
        public static string AzureSqlDatabaseServer(AzureSqlDatabaseServer fieldSpec)
        {
            return AzureSqlDatabaseServer_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlDatabaseServer(object fieldSpecObj)
        {
            return AzureSqlDatabaseServer_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlDatabaseServerFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSqlDatabaseServer() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSqlDatabaseServerConnection? AzureSqlDatabaseServers
        // GraphQL -> azureSqlDatabaseServers: AzureSqlDatabaseServerConnection! (type)
        public static string AzureSqlDatabaseServers_TypedFieldSpec(AzureSqlDatabaseServerConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nazureSqlDatabaseServerFilters: $azureSqlDatabaseServerFilters\n)";
            return "azureSqlDatabaseServers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlDatabaseServers_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlDatabaseServers((AzureSqlDatabaseServerConnection)fieldSpecObj);
        }
        public static string AzureSqlDatabaseServers(AzureSqlDatabaseServerConnection fieldSpec)
        {
            return AzureSqlDatabaseServers_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlDatabaseServers(object fieldSpecObj)
        {
            return AzureSqlDatabaseServers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlDatabaseServersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSqlDatabaseServerConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSqlDatabaseDbConnection? AzureSqlDatabases
        // GraphQL -> azureSqlDatabases: AzureSqlDatabaseDbConnection! (type)
        public static string AzureSqlDatabases_TypedFieldSpec(AzureSqlDatabaseDbConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nazureSqlDatabaseFilters: $azureSqlDatabaseFilters\n)";
            return "azureSqlDatabases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlDatabases_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlDatabases((AzureSqlDatabaseDbConnection)fieldSpecObj);
        }
        public static string AzureSqlDatabases(AzureSqlDatabaseDbConnection fieldSpec)
        {
            return AzureSqlDatabases_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlDatabases(object fieldSpecObj)
        {
            return AzureSqlDatabases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlDatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSqlDatabaseDbConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSqlManagedInstanceDatabase? AzureSqlManagedInstanceDatabase
        // GraphQL -> azureSqlManagedInstanceDatabase: AzureSqlManagedInstanceDatabase! (type)
        public static string AzureSqlManagedInstanceDatabase_TypedFieldSpec(AzureSqlManagedInstanceDatabase fieldSpec)
        {
            string args = "\n(\nazureSqlManagedInstanceDatabaseRubrikId: $azureSqlManagedInstanceDatabaseRubrikId\n)";
            return "azureSqlManagedInstanceDatabase" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlManagedInstanceDatabase_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceDatabase((AzureSqlManagedInstanceDatabase)fieldSpecObj);
        }
        public static string AzureSqlManagedInstanceDatabase(AzureSqlManagedInstanceDatabase fieldSpec)
        {
            return AzureSqlManagedInstanceDatabase_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlManagedInstanceDatabase(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceDatabase_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlManagedInstanceDatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSqlManagedInstanceDatabase() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSqlManagedInstanceDatabaseConnection? AzureSqlManagedInstanceDatabases
        // GraphQL -> azureSqlManagedInstanceDatabases: AzureSqlManagedInstanceDatabaseConnection! (type)
        public static string AzureSqlManagedInstanceDatabases_TypedFieldSpec(AzureSqlManagedInstanceDatabaseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nazureSqlManagedInstanceDatabaseFilters: $azureSqlManagedInstanceDatabaseFilters\n)";
            return "azureSqlManagedInstanceDatabases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlManagedInstanceDatabases_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceDatabases((AzureSqlManagedInstanceDatabaseConnection)fieldSpecObj);
        }
        public static string AzureSqlManagedInstanceDatabases(AzureSqlManagedInstanceDatabaseConnection fieldSpec)
        {
            return AzureSqlManagedInstanceDatabases_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlManagedInstanceDatabases(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceDatabases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlManagedInstanceDatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSqlManagedInstanceDatabaseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureNativeSqlDatabasePointInTimeRestoreWindow? AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure
        // GraphQL -> azureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure: AzureNativeSqlDatabasePointInTimeRestoreWindow! (type)
        public static string AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure_TypedFieldSpec(AzureNativeSqlDatabasePointInTimeRestoreWindow fieldSpec)
        {
            string args = "\n(\nsubscriptionId: $subscriptionId\nresourceGroupName: $resourceGroupName\nazureSqlManagedInstanceName: $azureSqlManagedInstanceName\nazureSqlDatabaseName: $azureSqlDatabaseName\n)";
            return "azureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure((AzureNativeSqlDatabasePointInTimeRestoreWindow)fieldSpecObj);
        }
        public static string AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure(AzureNativeSqlDatabasePointInTimeRestoreWindow fieldSpec)
        {
            return AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzureFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureNativeSqlDatabasePointInTimeRestoreWindow() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSqlManagedInstanceServer? AzureSqlManagedInstanceServer
        // GraphQL -> azureSqlManagedInstanceServer: AzureSqlManagedInstanceServer! (type)
        public static string AzureSqlManagedInstanceServer_TypedFieldSpec(AzureSqlManagedInstanceServer fieldSpec)
        {
            string args = "\n(\nazureSqlManagedInstanceServerRubrikId: $azureSqlManagedInstanceServerRubrikId\n)";
            return "azureSqlManagedInstanceServer" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlManagedInstanceServer_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceServer((AzureSqlManagedInstanceServer)fieldSpecObj);
        }
        public static string AzureSqlManagedInstanceServer(AzureSqlManagedInstanceServer fieldSpec)
        {
            return AzureSqlManagedInstanceServer_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlManagedInstanceServer(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceServer_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlManagedInstanceServerFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSqlManagedInstanceServer() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSqlManagedInstanceServerConnection? AzureSqlManagedInstanceServers
        // GraphQL -> azureSqlManagedInstanceServers: AzureSqlManagedInstanceServerConnection! (type)
        public static string AzureSqlManagedInstanceServers_TypedFieldSpec(AzureSqlManagedInstanceServerConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nazureSqlManagedInstanceServerFilters: $azureSqlManagedInstanceServerFilters\n)";
            return "azureSqlManagedInstanceServers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSqlManagedInstanceServers_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceServers((AzureSqlManagedInstanceServerConnection)fieldSpecObj);
        }
        public static string AzureSqlManagedInstanceServers(AzureSqlManagedInstanceServerConnection fieldSpec)
        {
            return AzureSqlManagedInstanceServers_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSqlManagedInstanceServers(object fieldSpecObj)
        {
            return AzureSqlManagedInstanceServers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSqlManagedInstanceServersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSqlManagedInstanceServerConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> StorageAccountConnection? AzureStorageAccounts
        // GraphQL -> azureStorageAccounts: StorageAccountConnection! (type)
        public static string AzureStorageAccounts_TypedFieldSpec(StorageAccountConnection fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nregionName: $regionName\n)";
            return "azureStorageAccounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureStorageAccounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureStorageAccounts((StorageAccountConnection)fieldSpecObj);
        }
        public static string AzureStorageAccounts(StorageAccountConnection fieldSpec)
        {
            return AzureStorageAccounts_TypedFieldSpec(fieldSpec);
        }
        public static string AzureStorageAccounts(object fieldSpecObj)
        {
            return AzureStorageAccounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureStorageAccountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new StorageAccountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SubnetConnection? AzureSubnets
        // GraphQL -> azureSubnets: SubnetConnection! (type)
        public static string AzureSubnets_TypedFieldSpec(SubnetConnection fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nvNetId: $vNetId\n)";
            return "azureSubnets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSubnets_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSubnets((SubnetConnection)fieldSpecObj);
        }
        public static string AzureSubnets(SubnetConnection fieldSpec)
        {
            return AzureSubnets_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSubnets(object fieldSpecObj)
        {
            return AzureSubnets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSubnetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SubnetConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureSubscriptionConnection? AzureSubscriptions
        // GraphQL -> azureSubscriptions: AzureSubscriptionConnection! (type)
        public static string AzureSubscriptions_TypedFieldSpec(AzureSubscriptionConnection fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\n)";
            return "azureSubscriptions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureSubscriptions_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureSubscriptions((AzureSubscriptionConnection)fieldSpecObj);
        }
        public static string AzureSubscriptions(AzureSubscriptionConnection fieldSpec)
        {
            return AzureSubscriptions_TypedFieldSpec(fieldSpec);
        }
        public static string AzureSubscriptions(object fieldSpecObj)
        {
            return AzureSubscriptions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureSubscriptionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureSubscriptionConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VnetConnection? AzureVnets
        // GraphQL -> azureVNets: VnetConnection! (type)
        public static string AzureVnets_TypedFieldSpec(VnetConnection fieldSpec)
        {
            string args = "\n(\ntenantId: $tenantId\nsubscriptionId: $subscriptionId\nregionName: $regionName\n)";
            return "azureVNets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string AzureVnets_ObjectFieldSpec(object fieldSpecObj)
        {
            return AzureVnets((VnetConnection)fieldSpecObj);
        }
        public static string AzureVnets(VnetConnection fieldSpec)
        {
            return AzureVnets_TypedFieldSpec(fieldSpec);
        }
        public static string AzureVnets(object fieldSpecObj)
        {
            return AzureVnets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object AzureVnetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VnetConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ExchangeObjectConnection? BrowseCalendar
        // GraphQL -> browseCalendar: O365ExchangeObjectConnection! (type)
        public static string BrowseCalendar_TypedFieldSpec(O365ExchangeObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nfolderId: $folderId\norgId: $orgId\ncalendarSearchFilter: $calendarSearchFilter\n)";
            return "browseCalendar" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseCalendar_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseCalendar((O365ExchangeObjectConnection)fieldSpecObj);
        }
        public static string BrowseCalendar(O365ExchangeObjectConnection fieldSpec)
        {
            return BrowseCalendar_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseCalendar(object fieldSpecObj)
        {
            return BrowseCalendar_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseCalendarFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ExchangeObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ExchangeObjectConnection? BrowseContacts
        // GraphQL -> browseContacts: O365ExchangeObjectConnection! (type)
        public static string BrowseContacts_TypedFieldSpec(O365ExchangeObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nfolderId: $folderId\norgId: $orgId\ncontactsSearchFilter: $contactsSearchFilter\n)";
            return "browseContacts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseContacts_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseContacts((O365ExchangeObjectConnection)fieldSpecObj);
        }
        public static string BrowseContacts(O365ExchangeObjectConnection fieldSpec)
        {
            return BrowseContacts_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseContacts(object fieldSpecObj)
        {
            return BrowseContacts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseContactsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ExchangeObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ExchangeObjectConnection? BrowseFolder
        // GraphQL -> browseFolder: O365ExchangeObjectConnection! (type)
        public static string BrowseFolder_TypedFieldSpec(O365ExchangeObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nfolderId: $folderId\norgId: $orgId\n)";
            return "browseFolder" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseFolder_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseFolder((O365ExchangeObjectConnection)fieldSpecObj);
        }
        public static string BrowseFolder(O365ExchangeObjectConnection fieldSpec)
        {
            return BrowseFolder_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseFolder(object fieldSpecObj)
        {
            return BrowseFolder_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseFolderFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ExchangeObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365TeamConvChannelConnection? BrowseO365TeamConvChannels
        // GraphQL -> browseO365TeamConvChannels: O365TeamConvChannelConnection! (type)
        public static string BrowseO365TeamConvChannels_TypedFieldSpec(O365TeamConvChannelConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFidOpt: $snapshotFidOpt\nexcludeArchived: $excludeArchived\norgId: $orgId\nchannelMembershipTypeFilter: $channelMembershipTypeFilter\nnameFilter: $nameFilter\n)";
            return "browseO365TeamConvChannels" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseO365TeamConvChannels_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseO365TeamConvChannels((O365TeamConvChannelConnection)fieldSpecObj);
        }
        public static string BrowseO365TeamConvChannels(O365TeamConvChannelConnection fieldSpec)
        {
            return BrowseO365TeamConvChannels_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseO365TeamConvChannels(object fieldSpecObj)
        {
            return BrowseO365TeamConvChannels_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseO365TeamConvChannelsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365TeamConvChannelConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? BrowseOnedrive
        // GraphQL -> browseOnedrive: O365OnedriveObjectConnection! (type)
        public static string BrowseOnedrive_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nfolderId: $folderId\nonedriveSearchFilter: $onedriveSearchFilter\norgId: $orgId\n)";
            return "browseOnedrive" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseOnedrive_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseOnedrive((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string BrowseOnedrive(O365OnedriveObjectConnection fieldSpec)
        {
            return BrowseOnedrive_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseOnedrive(object fieldSpecObj)
        {
            return BrowseOnedrive_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseOnedriveFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? BrowseSharepointDrive
        // GraphQL -> browseSharepointDrive: O365OnedriveObjectConnection! (type)
        public static string BrowseSharepointDrive_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nfolderId: $folderId\nsharepointDriveSearchFilter: $sharepointDriveSearchFilter\norgId: $orgId\nsiteChildId: $siteChildId\nsiteChildType: $siteChildType\n)";
            return "browseSharepointDrive" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseSharepointDrive_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseSharepointDrive((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string BrowseSharepointDrive(O365OnedriveObjectConnection fieldSpec)
        {
            return BrowseSharepointDrive_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseSharepointDrive(object fieldSpecObj)
        {
            return BrowseSharepointDrive_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseSharepointDriveFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? BrowseSharepointList
        // GraphQL -> browseSharepointList: O365OnedriveObjectConnection! (type)
        public static string BrowseSharepointList_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nfolderId: $folderId\nsharepointDriveSearchFilter: $sharepointDriveSearchFilter\norgId: $orgId\nsiteChildId: $siteChildId\n)";
            return "browseSharepointList" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseSharepointList_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseSharepointList((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string BrowseSharepointList(O365OnedriveObjectConnection fieldSpec)
        {
            return BrowseSharepointList_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseSharepointList(object fieldSpecObj)
        {
            return BrowseSharepointList_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseSharepointListFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnapshotFileConnection? BrowseSnapshotFileConnection
        // GraphQL -> browseSnapshotFileConnection: SnapshotFileConnection! (type)
        public static string BrowseSnapshotFileConnection_TypedFieldSpec(SnapshotFileConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\npath: $path\nsnapshotFid: $snapshotFid\nsearchPrefix: $searchPrefix\n)";
            return "browseSnapshotFileConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseSnapshotFileConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseSnapshotFileConnection((SnapshotFileConnection)fieldSpecObj);
        }
        public static string BrowseSnapshotFileConnection(SnapshotFileConnection fieldSpec)
        {
            return BrowseSnapshotFileConnection_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseSnapshotFileConnection(object fieldSpecObj)
        {
            return BrowseSnapshotFileConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseSnapshotFileConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnapshotFileConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365TeamsChannelConnection? BrowseTeamsChannels
        // GraphQL -> browseTeamsChannels: O365TeamsChannelConnection! (type)
        public static string BrowseTeamsChannels_TypedFieldSpec(O365TeamsChannelConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\norgId: $orgId\nchannelMembershipTypeFilter: $channelMembershipTypeFilter\nnameFilter: $nameFilter\n)";
            return "browseTeamsChannels" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseTeamsChannels_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseTeamsChannels((O365TeamsChannelConnection)fieldSpecObj);
        }
        public static string BrowseTeamsChannels(O365TeamsChannelConnection fieldSpec)
        {
            return BrowseTeamsChannels_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseTeamsChannels(object fieldSpecObj)
        {
            return BrowseTeamsChannels_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseTeamsChannelsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365TeamsChannelConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? BrowseTeamsDrive
        // GraphQL -> browseTeamsDrive: O365OnedriveObjectConnection! (type)
        public static string BrowseTeamsDrive_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nfolderId: $folderId\nteamsDriveSearchFilter: $teamsDriveSearchFilter\norgId: $orgId\n)";
            return "browseTeamsDrive" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string BrowseTeamsDrive_ObjectFieldSpec(object fieldSpecObj)
        {
            return BrowseTeamsDrive((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string BrowseTeamsDrive(O365OnedriveObjectConnection fieldSpec)
        {
            return BrowseTeamsDrive_TypedFieldSpec(fieldSpec);
        }
        public static string BrowseTeamsDrive(object fieldSpecObj)
        {
            return BrowseTeamsDrive_ObjectFieldSpec(fieldSpecObj);
        }
        public static object BrowseTeamsDriveFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CassandraColumnFamilyConnection? CassandraColumnFamilies
        // GraphQL -> cassandraColumnFamilies: CassandraColumnFamilyConnection! (type)
        public static string CassandraColumnFamilies_TypedFieldSpec(CassandraColumnFamilyConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "cassandraColumnFamilies" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CassandraColumnFamilies_ObjectFieldSpec(object fieldSpecObj)
        {
            return CassandraColumnFamilies((CassandraColumnFamilyConnection)fieldSpecObj);
        }
        public static string CassandraColumnFamilies(CassandraColumnFamilyConnection fieldSpec)
        {
            return CassandraColumnFamilies_TypedFieldSpec(fieldSpec);
        }
        public static string CassandraColumnFamilies(object fieldSpecObj)
        {
            return CassandraColumnFamilies_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CassandraColumnFamiliesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CassandraColumnFamilyConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CassandraColumnFamily? CassandraColumnFamily
        // GraphQL -> cassandraColumnFamily: CassandraColumnFamily! (type)
        public static string CassandraColumnFamily_TypedFieldSpec(CassandraColumnFamily fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "cassandraColumnFamily" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CassandraColumnFamily_ObjectFieldSpec(object fieldSpecObj)
        {
            return CassandraColumnFamily((CassandraColumnFamily)fieldSpecObj);
        }
        public static string CassandraColumnFamily(CassandraColumnFamily fieldSpec)
        {
            return CassandraColumnFamily_TypedFieldSpec(fieldSpec);
        }
        public static string CassandraColumnFamily(object fieldSpecObj)
        {
            return CassandraColumnFamily_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CassandraColumnFamilyFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CassandraColumnFamily() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetMosaicRecoverableRangeResponse? CassandraColumnFamilyRecoverableRange
        // GraphQL -> cassandraColumnFamilyRecoverableRange: GetMosaicRecoverableRangeResponse! (type)
        public static string CassandraColumnFamilyRecoverableRange_TypedFieldSpec(GetMosaicRecoverableRangeResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "cassandraColumnFamilyRecoverableRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CassandraColumnFamilyRecoverableRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return CassandraColumnFamilyRecoverableRange((GetMosaicRecoverableRangeResponse)fieldSpecObj);
        }
        public static string CassandraColumnFamilyRecoverableRange(GetMosaicRecoverableRangeResponse fieldSpec)
        {
            return CassandraColumnFamilyRecoverableRange_TypedFieldSpec(fieldSpec);
        }
        public static string CassandraColumnFamilyRecoverableRange(object fieldSpecObj)
        {
            return CassandraColumnFamilyRecoverableRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CassandraColumnFamilyRecoverableRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetMosaicRecoverableRangeResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetSchemaResponse? CassandraColumnFamilySchema
        // GraphQL -> cassandraColumnFamilySchema: GetSchemaResponse! (type)
        public static string CassandraColumnFamilySchema_TypedFieldSpec(GetSchemaResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "cassandraColumnFamilySchema" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CassandraColumnFamilySchema_ObjectFieldSpec(object fieldSpecObj)
        {
            return CassandraColumnFamilySchema((GetSchemaResponse)fieldSpecObj);
        }
        public static string CassandraColumnFamilySchema(GetSchemaResponse fieldSpec)
        {
            return CassandraColumnFamilySchema_TypedFieldSpec(fieldSpec);
        }
        public static string CassandraColumnFamilySchema(object fieldSpecObj)
        {
            return CassandraColumnFamilySchema_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CassandraColumnFamilySchemaFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetSchemaResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CassandraKeyspace? CassandraKeyspace
        // GraphQL -> cassandraKeyspace: CassandraKeyspace! (type)
        public static string CassandraKeyspace_TypedFieldSpec(CassandraKeyspace fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "cassandraKeyspace" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CassandraKeyspace_ObjectFieldSpec(object fieldSpecObj)
        {
            return CassandraKeyspace((CassandraKeyspace)fieldSpecObj);
        }
        public static string CassandraKeyspace(CassandraKeyspace fieldSpec)
        {
            return CassandraKeyspace_TypedFieldSpec(fieldSpec);
        }
        public static string CassandraKeyspace(object fieldSpecObj)
        {
            return CassandraKeyspace_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CassandraKeyspaceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CassandraKeyspace() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CassandraKeyspaceConnection? CassandraKeyspaces
        // GraphQL -> cassandraKeyspaces: CassandraKeyspaceConnection! (type)
        public static string CassandraKeyspaces_TypedFieldSpec(CassandraKeyspaceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "cassandraKeyspaces" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CassandraKeyspaces_ObjectFieldSpec(object fieldSpecObj)
        {
            return CassandraKeyspaces((CassandraKeyspaceConnection)fieldSpecObj);
        }
        public static string CassandraKeyspaces(CassandraKeyspaceConnection fieldSpec)
        {
            return CassandraKeyspaces_TypedFieldSpec(fieldSpec);
        }
        public static string CassandraKeyspaces(object fieldSpecObj)
        {
            return CassandraKeyspaces_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CassandraKeyspacesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CassandraKeyspaceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CassandraSource? CassandraSource
        // GraphQL -> cassandraSource: CassandraSource! (type)
        public static string CassandraSource_TypedFieldSpec(CassandraSource fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "cassandraSource" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CassandraSource_ObjectFieldSpec(object fieldSpecObj)
        {
            return CassandraSource((CassandraSource)fieldSpecObj);
        }
        public static string CassandraSource(CassandraSource fieldSpec)
        {
            return CassandraSource_TypedFieldSpec(fieldSpec);
        }
        public static string CassandraSource(object fieldSpecObj)
        {
            return CassandraSource_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CassandraSourceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CassandraSource() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CassandraSourceConnection? CassandraSources
        // GraphQL -> cassandraSources: CassandraSourceConnection! (type)
        public static string CassandraSources_TypedFieldSpec(CassandraSourceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "cassandraSources" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CassandraSources_ObjectFieldSpec(object fieldSpecObj)
        {
            return CassandraSources((CassandraSourceConnection)fieldSpecObj);
        }
        public static string CassandraSources(CassandraSourceConnection fieldSpec)
        {
            return CassandraSources_TypedFieldSpec(fieldSpec);
        }
        public static string CassandraSources(object fieldSpecObj)
        {
            return CassandraSources_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CassandraSourcesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CassandraSourceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmInventorySubHierarchyRoot? CdmInventorySubHierarchyRoot
        // GraphQL -> cdmInventorySubHierarchyRoot: CdmInventorySubHierarchyRoot! (type)
        public static string CdmInventorySubHierarchyRoot_TypedFieldSpec(CdmInventorySubHierarchyRoot fieldSpec)
        {
            string args = "\n(\nrootEnum: $rootEnum\n)";
            return "cdmInventorySubHierarchyRoot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CdmInventorySubHierarchyRoot_ObjectFieldSpec(object fieldSpecObj)
        {
            return CdmInventorySubHierarchyRoot((CdmInventorySubHierarchyRoot)fieldSpecObj);
        }
        public static string CdmInventorySubHierarchyRoot(CdmInventorySubHierarchyRoot fieldSpec)
        {
            return CdmInventorySubHierarchyRoot_TypedFieldSpec(fieldSpec);
        }
        public static string CdmInventorySubHierarchyRoot(object fieldSpecObj)
        {
            return CdmInventorySubHierarchyRoot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CdmInventorySubHierarchyRootFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmInventorySubHierarchyRoot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlLogShippingTarget? CdmMssqlLogShippingTarget
        // GraphQL -> cdmMssqlLogShippingTarget: MssqlLogShippingTarget (type)
        public static string CdmMssqlLogShippingTarget_TypedFieldSpec(MssqlLogShippingTarget fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "cdmMssqlLogShippingTarget" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CdmMssqlLogShippingTarget_ObjectFieldSpec(object fieldSpecObj)
        {
            return CdmMssqlLogShippingTarget((MssqlLogShippingTarget)fieldSpecObj);
        }
        public static string CdmMssqlLogShippingTarget(MssqlLogShippingTarget fieldSpec)
        {
            return CdmMssqlLogShippingTarget_TypedFieldSpec(fieldSpec);
        }
        public static string CdmMssqlLogShippingTarget(object fieldSpecObj)
        {
            return CdmMssqlLogShippingTarget_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CdmMssqlLogShippingTargetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlLogShippingTarget() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlLogShippingTargetConnection? CdmMssqlLogShippingTargets
        // GraphQL -> cdmMssqlLogShippingTargets: MssqlLogShippingTargetConnection! (type)
        public static string CdmMssqlLogShippingTargets_TypedFieldSpec(MssqlLogShippingTargetConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nfilters: $filters\n)";
            return "cdmMssqlLogShippingTargets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CdmMssqlLogShippingTargets_ObjectFieldSpec(object fieldSpecObj)
        {
            return CdmMssqlLogShippingTargets((MssqlLogShippingTargetConnection)fieldSpecObj);
        }
        public static string CdmMssqlLogShippingTargets(MssqlLogShippingTargetConnection fieldSpec)
        {
            return CdmMssqlLogShippingTargets_TypedFieldSpec(fieldSpec);
        }
        public static string CdmMssqlLogShippingTargets(object fieldSpecObj)
        {
            return CdmMssqlLogShippingTargets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CdmMssqlLogShippingTargetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlLogShippingTargetConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FeatureCdmVersionReply? CdmVersionCheck
        // GraphQL -> cdmVersionCheck: FeatureCdmVersionReply! (type)
        public static string CdmVersionCheck_TypedFieldSpec(FeatureCdmVersionReply fieldSpec)
        {
            string args = "\n(\nfeatureToCdmVersion: $featureToCdmVersion\n)";
            return "cdmVersionCheck" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CdmVersionCheck_ObjectFieldSpec(object fieldSpecObj)
        {
            return CdmVersionCheck((FeatureCdmVersionReply)fieldSpecObj);
        }
        public static string CdmVersionCheck(FeatureCdmVersionReply fieldSpec)
        {
            return CdmVersionCheck_TypedFieldSpec(fieldSpec);
        }
        public static string CdmVersionCheck(object fieldSpecObj)
        {
            return CdmVersionCheck_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CdmVersionCheckFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FeatureCdmVersionReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetCertificateInfoReply? CertificateInfo
        // GraphQL -> certificateInfo: GetCertificateInfoReply! (type)
        public static string CertificateInfo_TypedFieldSpec(GetCertificateInfoReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "certificateInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CertificateInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return CertificateInfo((GetCertificateInfoReply)fieldSpecObj);
        }
        public static string CertificateInfo(GetCertificateInfoReply fieldSpec)
        {
            return CertificateInfo_TypedFieldSpec(fieldSpec);
        }
        public static string CertificateInfo(object fieldSpecObj)
        {
            return CertificateInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CertificateInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetCertificateInfoReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Csr? CertificateSigningRequest
        // GraphQL -> certificateSigningRequest: Csr! (type)
        public static string CertificateSigningRequest_TypedFieldSpec(Csr fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "certificateSigningRequest" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CertificateSigningRequest_ObjectFieldSpec(object fieldSpecObj)
        {
            return CertificateSigningRequest((Csr)fieldSpecObj);
        }
        public static string CertificateSigningRequest(Csr fieldSpec)
        {
            return CertificateSigningRequest_TypedFieldSpec(fieldSpec);
        }
        public static string CertificateSigningRequest(object fieldSpecObj)
        {
            return CertificateSigningRequest_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CertificateSigningRequestFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Csr() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CsrConnection? CertificateSigningRequests
        // GraphQL -> certificateSigningRequests: CsrConnection! (type)
        public static string CertificateSigningRequests_TypedFieldSpec(CsrConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nsearchTerm: $searchTerm\n)";
            return "certificateSigningRequests" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CertificateSigningRequests_ObjectFieldSpec(object fieldSpecObj)
        {
            return CertificateSigningRequests((CsrConnection)fieldSpecObj);
        }
        public static string CertificateSigningRequests(CsrConnection fieldSpec)
        {
            return CertificateSigningRequests_TypedFieldSpec(fieldSpec);
        }
        public static string CertificateSigningRequests(object fieldSpecObj)
        {
            return CertificateSigningRequests_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CertificateSigningRequestsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CsrConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CertificateConnection? Certificates
        // GraphQL -> certificates: CertificateConnection! (type)
        public static string Certificates_TypedFieldSpec(CertificateConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nsearchTerm: $searchTerm\n)";
            return "certificates" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Certificates_ObjectFieldSpec(object fieldSpecObj)
        {
            return Certificates((CertificateConnection)fieldSpecObj);
        }
        public static string Certificates(CertificateConnection fieldSpec)
        {
            return Certificates_TypedFieldSpec(fieldSpec);
        }
        public static string Certificates(object fieldSpecObj)
        {
            return Certificates_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CertificatesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CertificateConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CertificateConnection? CertificatesWithKey
        // GraphQL -> certificatesWithKey: CertificateConnection! (type)
        public static string CertificatesWithKey_TypedFieldSpec(CertificateConnection fieldSpec)
        {
            string args = "";
            return "certificatesWithKey" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CertificatesWithKey_ObjectFieldSpec(object fieldSpecObj)
        {
            return CertificatesWithKey((CertificateConnection)fieldSpecObj);
        }
        public static string CertificatesWithKey(CertificateConnection fieldSpec)
        {
            return CertificatesWithKey_TypedFieldSpec(fieldSpec);
        }
        public static string CertificatesWithKey(object fieldSpecObj)
        {
            return CertificatesWithKey_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CertificatesWithKeyFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CertificateConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CheckAzurePersistentStorageSubscriptionCanUnmapReply? CheckAzurePersistentStorageSubscriptionCanUnmap
        // GraphQL -> checkAzurePersistentStorageSubscriptionCanUnmap: CheckAzurePersistentStorageSubscriptionCanUnmapReply! (type)
        public static string CheckAzurePersistentStorageSubscriptionCanUnmap_TypedFieldSpec(CheckAzurePersistentStorageSubscriptionCanUnmapReply fieldSpec)
        {
            string args = "\n(\ncloudAccountId: $cloudAccountId\nfeature: $feature\nunmappingValidationType: $unmappingValidationType\n)";
            return "checkAzurePersistentStorageSubscriptionCanUnmap" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CheckAzurePersistentStorageSubscriptionCanUnmap_ObjectFieldSpec(object fieldSpecObj)
        {
            return CheckAzurePersistentStorageSubscriptionCanUnmap((CheckAzurePersistentStorageSubscriptionCanUnmapReply)fieldSpecObj);
        }
        public static string CheckAzurePersistentStorageSubscriptionCanUnmap(CheckAzurePersistentStorageSubscriptionCanUnmapReply fieldSpec)
        {
            return CheckAzurePersistentStorageSubscriptionCanUnmap_TypedFieldSpec(fieldSpec);
        }
        public static string CheckAzurePersistentStorageSubscriptionCanUnmap(object fieldSpecObj)
        {
            return CheckAzurePersistentStorageSubscriptionCanUnmap_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CheckAzurePersistentStorageSubscriptionCanUnmapFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CheckAzurePersistentStorageSubscriptionCanUnmapReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? CheckCloudComputeConnectivityJobProgress
        // GraphQL -> checkCloudComputeConnectivityJobProgress: AsyncRequestStatus! (type)
        public static string CheckCloudComputeConnectivityJobProgress_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "checkCloudComputeConnectivityJobProgress" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CheckCloudComputeConnectivityJobProgress_ObjectFieldSpec(object fieldSpecObj)
        {
            return CheckCloudComputeConnectivityJobProgress((AsyncRequestStatus)fieldSpecObj);
        }
        public static string CheckCloudComputeConnectivityJobProgress(AsyncRequestStatus fieldSpec)
        {
            return CheckCloudComputeConnectivityJobProgress_TypedFieldSpec(fieldSpec);
        }
        public static string CheckCloudComputeConnectivityJobProgress(object fieldSpecObj)
        {
            return CheckCloudComputeConnectivityJobProgress_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CheckCloudComputeConnectivityJobProgressFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> IsCloudNativeTagRuleNameUniqueReply? CheckCloudNativeLabelRuleNameUniqueness
        // GraphQL -> checkCloudNativeLabelRuleNameUniqueness: IsCloudNativeTagRuleNameUniqueReply! (type)
        public static string CheckCloudNativeLabelRuleNameUniqueness_TypedFieldSpec(IsCloudNativeTagRuleNameUniqueReply fieldSpec)
        {
            string args = "\n(\nruleName: $ruleName\nobjectType: $objectType\n)";
            return "checkCloudNativeLabelRuleNameUniqueness" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CheckCloudNativeLabelRuleNameUniqueness_ObjectFieldSpec(object fieldSpecObj)
        {
            return CheckCloudNativeLabelRuleNameUniqueness((IsCloudNativeTagRuleNameUniqueReply)fieldSpecObj);
        }
        public static string CheckCloudNativeLabelRuleNameUniqueness(IsCloudNativeTagRuleNameUniqueReply fieldSpec)
        {
            return CheckCloudNativeLabelRuleNameUniqueness_TypedFieldSpec(fieldSpec);
        }
        public static string CheckCloudNativeLabelRuleNameUniqueness(object fieldSpecObj)
        {
            return CheckCloudNativeLabelRuleNameUniqueness_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CheckCloudNativeLabelRuleNameUniquenessFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new IsCloudNativeTagRuleNameUniqueReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> IsCloudNativeTagRuleNameUniqueReply? CheckCloudNativeTagRuleNameUniqueness
        // GraphQL -> checkCloudNativeTagRuleNameUniqueness: IsCloudNativeTagRuleNameUniqueReply! (type)
        public static string CheckCloudNativeTagRuleNameUniqueness_TypedFieldSpec(IsCloudNativeTagRuleNameUniqueReply fieldSpec)
        {
            string args = "\n(\nruleName: $ruleName\nobjectType: $objectType\n)";
            return "checkCloudNativeTagRuleNameUniqueness" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CheckCloudNativeTagRuleNameUniqueness_ObjectFieldSpec(object fieldSpecObj)
        {
            return CheckCloudNativeTagRuleNameUniqueness((IsCloudNativeTagRuleNameUniqueReply)fieldSpecObj);
        }
        public static string CheckCloudNativeTagRuleNameUniqueness(IsCloudNativeTagRuleNameUniqueReply fieldSpec)
        {
            return CheckCloudNativeTagRuleNameUniqueness_TypedFieldSpec(fieldSpec);
        }
        public static string CheckCloudNativeTagRuleNameUniqueness(object fieldSpecObj)
        {
            return CheckCloudNativeTagRuleNameUniqueness_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CheckCloudNativeTagRuleNameUniquenessFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new IsCloudNativeTagRuleNameUniqueReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CloudDirectNasExport? CloudDirectNasExport
        // GraphQL -> cloudDirectNasExport: CloudDirectNasExport! (type)
        public static string CloudDirectNasExport_TypedFieldSpec(CloudDirectNasExport fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "cloudDirectNasExport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudDirectNasExport_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudDirectNasExport((CloudDirectNasExport)fieldSpecObj);
        }
        public static string CloudDirectNasExport(CloudDirectNasExport fieldSpec)
        {
            return CloudDirectNasExport_TypedFieldSpec(fieldSpec);
        }
        public static string CloudDirectNasExport(object fieldSpecObj)
        {
            return CloudDirectNasExport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudDirectNasExportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CloudDirectNasExport() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CloudDirectSystems? CloudDirectSystems
        // GraphQL -> cloudDirectSystems: CloudDirectSystems! (type)
        public static string CloudDirectSystems_TypedFieldSpec(CloudDirectSystems fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "cloudDirectSystems" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudDirectSystems_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudDirectSystems((CloudDirectSystems)fieldSpecObj);
        }
        public static string CloudDirectSystems(CloudDirectSystems fieldSpec)
        {
            return CloudDirectSystems_TypedFieldSpec(fieldSpec);
        }
        public static string CloudDirectSystems(object fieldSpecObj)
        {
            return CloudDirectSystems_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudDirectSystemsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CloudDirectSystems() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CheckArchivedSnapshotsLockedReply? CloudNativeCheckArchivedSnapshotsLocked
        // GraphQL -> cloudNativeCheckArchivedSnapshotsLocked: CheckArchivedSnapshotsLockedReply! (type)
        public static string CloudNativeCheckArchivedSnapshotsLocked_TypedFieldSpec(CheckArchivedSnapshotsLockedReply fieldSpec)
        {
            string args = "\n(\nworkloadId: $workloadId\nsnapshotIds: $snapshotIds\n)";
            return "cloudNativeCheckArchivedSnapshotsLocked" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeCheckArchivedSnapshotsLocked_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeCheckArchivedSnapshotsLocked((CheckArchivedSnapshotsLockedReply)fieldSpecObj);
        }
        public static string CloudNativeCheckArchivedSnapshotsLocked(CheckArchivedSnapshotsLockedReply fieldSpec)
        {
            return CloudNativeCheckArchivedSnapshotsLocked_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeCheckArchivedSnapshotsLocked(object fieldSpecObj)
        {
            return CloudNativeCheckArchivedSnapshotsLocked_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeCheckArchivedSnapshotsLockedFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CheckArchivedSnapshotsLockedReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CloudNativeCustomerTagsReply? CloudNativeCustomerTags
        // GraphQL -> cloudNativeCustomerTags: CloudNativeCustomerTagsReply! (type)
        public static string CloudNativeCustomerTags_TypedFieldSpec(CloudNativeCustomerTagsReply fieldSpec)
        {
            string args = "\n(\ncloudVendor: $cloudVendor\ncloudAccountId: $cloudAccountId\n)";
            return "cloudNativeCustomerTags" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeCustomerTags_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeCustomerTags((CloudNativeCustomerTagsReply)fieldSpecObj);
        }
        public static string CloudNativeCustomerTags(CloudNativeCustomerTagsReply fieldSpec)
        {
            return CloudNativeCustomerTags_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeCustomerTags(object fieldSpecObj)
        {
            return CloudNativeCustomerTags_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeCustomerTagsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CloudNativeCustomerTagsReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetCloudNativeLabelRulesReply? CloudNativeLabelRules
        // GraphQL -> cloudNativeLabelRules: GetCloudNativeLabelRulesReply! (type)
        public static string CloudNativeLabelRules_TypedFieldSpec(GetCloudNativeLabelRulesReply fieldSpec)
        {
            string args = "\n(\nobjectType: $objectType\nfilters: $filters\nsortBy: $sortBy\nsortOrder: $sortOrder\n)";
            return "cloudNativeLabelRules" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeLabelRules_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeLabelRules((GetCloudNativeLabelRulesReply)fieldSpecObj);
        }
        public static string CloudNativeLabelRules(GetCloudNativeLabelRulesReply fieldSpec)
        {
            return CloudNativeLabelRules_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeLabelRules(object fieldSpecObj)
        {
            return CloudNativeLabelRules_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeLabelRulesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetCloudNativeLabelRulesReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RbaInstallerUrls? CloudNativeRbaInstallers
        // GraphQL -> cloudNativeRbaInstallers: RbaInstallerUrls! (type)
        public static string CloudNativeRbaInstallers_TypedFieldSpec(RbaInstallerUrls fieldSpec)
        {
            string args = "";
            return "cloudNativeRbaInstallers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeRbaInstallers_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeRbaInstallers((RbaInstallerUrls)fieldSpecObj);
        }
        public static string CloudNativeRbaInstallers(RbaInstallerUrls fieldSpec)
        {
            return CloudNativeRbaInstallers_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeRbaInstallers(object fieldSpecObj)
        {
            return CloudNativeRbaInstallers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeRbaInstallersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RbaInstallerUrls() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CloudNativeSnapshotDetailsForRecoveryReply? CloudNativeSnapshotDetailsForRecovery
        // GraphQL -> cloudNativeSnapshotDetailsForRecovery: CloudNativeSnapshotDetailsForRecoveryReply! (type)
        public static string CloudNativeSnapshotDetailsForRecovery_TypedFieldSpec(CloudNativeSnapshotDetailsForRecoveryReply fieldSpec)
        {
            string args = "\n(\nsnapshotId: $snapshotId\n)";
            return "cloudNativeSnapshotDetailsForRecovery" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeSnapshotDetailsForRecovery_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeSnapshotDetailsForRecovery((CloudNativeSnapshotDetailsForRecoveryReply)fieldSpecObj);
        }
        public static string CloudNativeSnapshotDetailsForRecovery(CloudNativeSnapshotDetailsForRecoveryReply fieldSpec)
        {
            return CloudNativeSnapshotDetailsForRecovery_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeSnapshotDetailsForRecovery(object fieldSpecObj)
        {
            return CloudNativeSnapshotDetailsForRecovery_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeSnapshotDetailsForRecoveryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CloudNativeSnapshotDetailsForRecoveryReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CloudNativeSnapshotTypeDetailsReply? CloudNativeSnapshotTypeDetails
        // GraphQL -> cloudNativeSnapshotTypeDetails: CloudNativeSnapshotTypeDetailsReply! (type)
        public static string CloudNativeSnapshotTypeDetails_TypedFieldSpec(CloudNativeSnapshotTypeDetailsReply fieldSpec)
        {
            string args = "\n(\nsnapshotId: $snapshotId\n)";
            return "cloudNativeSnapshotTypeDetails" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeSnapshotTypeDetails_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeSnapshotTypeDetails((CloudNativeSnapshotTypeDetailsReply)fieldSpecObj);
        }
        public static string CloudNativeSnapshotTypeDetails(CloudNativeSnapshotTypeDetailsReply fieldSpec)
        {
            return CloudNativeSnapshotTypeDetails_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeSnapshotTypeDetails(object fieldSpecObj)
        {
            return CloudNativeSnapshotTypeDetails_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeSnapshotTypeDetailsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CloudNativeSnapshotTypeDetailsReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnapshotFileConnection? CloudNativeSnapshots
        // GraphQL -> cloudNativeSnapshots: SnapshotFileConnection! (type)
        public static string CloudNativeSnapshots_TypedFieldSpec(SnapshotFileConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\npath: $path\nsnapshotFid: $snapshotFid\nsearchPrefix: $searchPrefix\n)";
            return "cloudNativeSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeSnapshots((SnapshotFileConnection)fieldSpecObj);
        }
        public static string CloudNativeSnapshots(SnapshotFileConnection fieldSpec)
        {
            return CloudNativeSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeSnapshots(object fieldSpecObj)
        {
            return CloudNativeSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnapshotFileConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CloudNativeSqlServerSetupScript? CloudNativeSqlServerSetupScript
        // GraphQL -> cloudNativeSqlServerSetupScript: CloudNativeSqlServerSetupScript! (type)
        public static string CloudNativeSqlServerSetupScript_TypedFieldSpec(CloudNativeSqlServerSetupScript fieldSpec)
        {
            string args = "";
            return "cloudNativeSqlServerSetupScript" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeSqlServerSetupScript_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeSqlServerSetupScript((CloudNativeSqlServerSetupScript)fieldSpecObj);
        }
        public static string CloudNativeSqlServerSetupScript(CloudNativeSqlServerSetupScript fieldSpec)
        {
            return CloudNativeSqlServerSetupScript_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeSqlServerSetupScript(object fieldSpecObj)
        {
            return CloudNativeSqlServerSetupScript_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeSqlServerSetupScriptFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CloudNativeSqlServerSetupScript() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetCloudNativeTagRulesReply? CloudNativeTagRules
        // GraphQL -> cloudNativeTagRules: GetCloudNativeTagRulesReply! (type)
        public static string CloudNativeTagRules_TypedFieldSpec(GetCloudNativeTagRulesReply fieldSpec)
        {
            string args = "\n(\nobjectType: $objectType\nfilters: $filters\nsortBy: $sortBy\nsortOrder: $sortOrder\n)";
            return "cloudNativeTagRules" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeTagRules_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeTagRules((GetCloudNativeTagRulesReply)fieldSpecObj);
        }
        public static string CloudNativeTagRules(GetCloudNativeTagRulesReply fieldSpec)
        {
            return CloudNativeTagRules_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeTagRules(object fieldSpecObj)
        {
            return CloudNativeTagRules_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeTagRulesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetCloudNativeTagRulesReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CloudNativeVersionedFileConnection? CloudNativeWorkloadVersionedFiles
        // GraphQL -> cloudNativeWorkloadVersionedFiles: CloudNativeVersionedFileConnection! (type)
        public static string CloudNativeWorkloadVersionedFiles_TypedFieldSpec(CloudNativeVersionedFileConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableId: $snappableId\nsearchQuery: $searchQuery\n)";
            return "cloudNativeWorkloadVersionedFiles" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CloudNativeWorkloadVersionedFiles_ObjectFieldSpec(object fieldSpecObj)
        {
            return CloudNativeWorkloadVersionedFiles((CloudNativeVersionedFileConnection)fieldSpecObj);
        }
        public static string CloudNativeWorkloadVersionedFiles(CloudNativeVersionedFileConnection fieldSpec)
        {
            return CloudNativeWorkloadVersionedFiles_TypedFieldSpec(fieldSpec);
        }
        public static string CloudNativeWorkloadVersionedFiles(object fieldSpecObj)
        {
            return CloudNativeWorkloadVersionedFiles_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CloudNativeWorkloadVersionedFilesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CloudNativeVersionedFileConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Cluster? Cluster
        // GraphQL -> cluster: Cluster! (type)
        public static string Cluster_TypedFieldSpec(Cluster fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "cluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Cluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return Cluster((Cluster)fieldSpecObj);
        }
        public static string Cluster(Cluster fieldSpec)
        {
            return Cluster_TypedFieldSpec(fieldSpec);
        }
        public static string Cluster(object fieldSpecObj)
        {
            return Cluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Cluster() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CertificateSummaryListResponse? ClusterCertificates
        // GraphQL -> clusterCertificates: CertificateSummaryListResponse! (type)
        public static string ClusterCertificates_TypedFieldSpec(CertificateSummaryListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterCertificates" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterCertificates_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterCertificates((CertificateSummaryListResponse)fieldSpecObj);
        }
        public static string ClusterCertificates(CertificateSummaryListResponse fieldSpec)
        {
            return ClusterCertificates_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterCertificates(object fieldSpecObj)
        {
            return ClusterCertificates_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterCertificatesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CertificateSummaryListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterConnection? ClusterConnection
        // GraphQL -> clusterConnection: ClusterConnection! (type)
        public static string ClusterConnection_TypedFieldSpec(ClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\nsortOrder: $sortOrder\nsortBy: $sortBy\n)";
            return "clusterConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterConnection((ClusterConnection)fieldSpecObj);
        }
        public static string ClusterConnection(ClusterConnection fieldSpec)
        {
            return ClusterConnection_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterConnection(object fieldSpecObj)
        {
            return ClusterConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterCsr? ClusterCsr
        // GraphQL -> clusterCsr: ClusterCsr! (type)
        public static string ClusterCsr_TypedFieldSpec(ClusterCsr fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterCsr" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterCsr_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterCsr((ClusterCsr)fieldSpecObj);
        }
        public static string ClusterCsr(ClusterCsr fieldSpec)
        {
            return ClusterCsr_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterCsr(object fieldSpecObj)
        {
            return ClusterCsr_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterCsrFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterCsr() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> InternalGetDefaultGatewayResponse? ClusterDefaultGateway
        // GraphQL -> clusterDefaultGateway: InternalGetDefaultGatewayResponse! (type)
        public static string ClusterDefaultGateway_TypedFieldSpec(InternalGetDefaultGatewayResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterDefaultGateway" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterDefaultGateway_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterDefaultGateway((InternalGetDefaultGatewayResponse)fieldSpecObj);
        }
        public static string ClusterDefaultGateway(InternalGetDefaultGatewayResponse fieldSpec)
        {
            return ClusterDefaultGateway_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterDefaultGateway(object fieldSpecObj)
        {
            return ClusterDefaultGateway_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterDefaultGatewayFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new InternalGetDefaultGatewayResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterDnsReply? ClusterDns
        // GraphQL -> clusterDns: ClusterDnsReply! (type)
        public static string ClusterDns_TypedFieldSpec(ClusterDnsReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "clusterDns" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterDns_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterDns((ClusterDnsReply)fieldSpecObj);
        }
        public static string ClusterDns(ClusterDnsReply fieldSpec)
        {
            return ClusterDns_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterDns(object fieldSpecObj)
        {
            return ClusterDns_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterDnsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterDnsReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> InternalGetClusterIpsResponse? ClusterFloatingIps
        // GraphQL -> clusterFloatingIps: InternalGetClusterIpsResponse! (type)
        public static string ClusterFloatingIps_TypedFieldSpec(InternalGetClusterIpsResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterFloatingIps" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterFloatingIps_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterFloatingIps((InternalGetClusterIpsResponse)fieldSpecObj);
        }
        public static string ClusterFloatingIps(InternalGetClusterIpsResponse fieldSpec)
        {
            return ClusterFloatingIps_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterFloatingIps(object fieldSpecObj)
        {
            return ClusterFloatingIps_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterFloatingIpsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new InternalGetClusterIpsResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterGroupByConnection? ClusterGroupByConnection
        // GraphQL -> clusterGroupByConnection: ClusterGroupByConnection! (type)
        public static string ClusterGroupByConnection_TypedFieldSpec(ClusterGroupByConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ngroupBy: $groupBy\nfilter: $filter\ntimezoneOffset: $timezoneOffset\n)";
            return "clusterGroupByConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterGroupByConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterGroupByConnection((ClusterGroupByConnection)fieldSpecObj);
        }
        public static string ClusterGroupByConnection(ClusterGroupByConnection fieldSpec)
        {
            return ClusterGroupByConnection_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterGroupByConnection(object fieldSpecObj)
        {
            return ClusterGroupByConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterGroupByConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterGroupByConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ModifyIpmiReply? ClusterIpmi
        // GraphQL -> clusterIpmi: ModifyIpmiReply! (type)
        public static string ClusterIpmi_TypedFieldSpec(ModifyIpmiReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterIpmi" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterIpmi_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterIpmi((ModifyIpmiReply)fieldSpecObj);
        }
        public static string ClusterIpmi(ModifyIpmiReply fieldSpec)
        {
            return ClusterIpmi_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterIpmi(object fieldSpecObj)
        {
            return ClusterIpmi_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterIpmiFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ModifyIpmiReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterIpv6ModeReply? ClusterIpv6Mode
        // GraphQL -> clusterIpv6Mode: ClusterIpv6ModeReply! (type)
        public static string ClusterIpv6Mode_TypedFieldSpec(ClusterIpv6ModeReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterIpv6Mode" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterIpv6Mode_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterIpv6Mode((ClusterIpv6ModeReply)fieldSpecObj);
        }
        public static string ClusterIpv6Mode(ClusterIpv6ModeReply fieldSpec)
        {
            return ClusterIpv6Mode_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterIpv6Mode(object fieldSpecObj)
        {
            return ClusterIpv6Mode_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterIpv6ModeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterIpv6ModeReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NetworkInterfaceListResponse? ClusterNetworkInterfaces
        // GraphQL -> clusterNetworkInterfaces: NetworkInterfaceListResponse! (type)
        public static string ClusterNetworkInterfaces_TypedFieldSpec(NetworkInterfaceListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterNetworkInterfaces" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterNetworkInterfaces_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterNetworkInterfaces((NetworkInterfaceListResponse)fieldSpecObj);
        }
        public static string ClusterNetworkInterfaces(NetworkInterfaceListResponse fieldSpec)
        {
            return ClusterNetworkInterfaces_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterNetworkInterfaces(object fieldSpecObj)
        {
            return ClusterNetworkInterfaces_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterNetworkInterfacesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NetworkInterfaceListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NodeStatusListResponse? ClusterNodes
        // GraphQL -> clusterNodes: NodeStatusListResponse! (type)
        public static string ClusterNodes_TypedFieldSpec(NodeStatusListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterNodes" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterNodes_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterNodes((NodeStatusListResponse)fieldSpecObj);
        }
        public static string ClusterNodes(NodeStatusListResponse fieldSpec)
        {
            return ClusterNodes_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterNodes(object fieldSpecObj)
        {
            return ClusterNodes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterNodesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NodeStatusListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NtpServerConfigurationListResponse? ClusterNtpServers
        // GraphQL -> clusterNtpServers: NtpServerConfigurationListResponse! (type)
        public static string ClusterNtpServers_TypedFieldSpec(NtpServerConfigurationListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterNtpServers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterNtpServers_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterNtpServers((NtpServerConfigurationListResponse)fieldSpecObj);
        }
        public static string ClusterNtpServers(NtpServerConfigurationListResponse fieldSpec)
        {
            return ClusterNtpServers_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterNtpServers(object fieldSpecObj)
        {
            return ClusterNtpServers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterNtpServersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NtpServerConfigurationListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterOperationJobProgress? ClusterOperationJobProgress
        // GraphQL -> clusterOperationJobProgress: ClusterOperationJobProgress! (type)
        public static string ClusterOperationJobProgress_TypedFieldSpec(ClusterOperationJobProgress fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterOperationJobProgress" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterOperationJobProgress_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterOperationJobProgress((ClusterOperationJobProgress)fieldSpecObj);
        }
        public static string ClusterOperationJobProgress(ClusterOperationJobProgress fieldSpec)
        {
            return ClusterOperationJobProgress_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterOperationJobProgress(object fieldSpecObj)
        {
            return ClusterOperationJobProgress_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterOperationJobProgressFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterOperationJobProgress() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterProxyReply? ClusterProxy
        // GraphQL -> clusterProxy: ClusterProxyReply! (type)
        public static string ClusterProxy_TypedFieldSpec(ClusterProxyReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "clusterProxy" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterProxy_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterProxy((ClusterProxyReply)fieldSpecObj);
        }
        public static string ClusterProxy(ClusterProxyReply fieldSpec)
        {
            return ClusterProxy_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterProxy(object fieldSpecObj)
        {
            return ClusterProxy_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterProxyFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterProxyReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterRegistrationProductInfoType? ClusterRegistrationProductInfo
        // GraphQL -> clusterRegistrationProductInfo: ClusterRegistrationProductInfoType! (type)
        public static string ClusterRegistrationProductInfo_TypedFieldSpec(ClusterRegistrationProductInfoType fieldSpec)
        {
            string args = "";
            return "clusterRegistrationProductInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterRegistrationProductInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterRegistrationProductInfo((ClusterRegistrationProductInfoType)fieldSpecObj);
        }
        public static string ClusterRegistrationProductInfo(ClusterRegistrationProductInfoType fieldSpec)
        {
            return ClusterRegistrationProductInfo_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterRegistrationProductInfo(object fieldSpecObj)
        {
            return ClusterRegistrationProductInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterRegistrationProductInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterRegistrationProductInfoType() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ReportsMigrationCount? ClusterReportMigrationCount
        // GraphQL -> clusterReportMigrationCount: ReportsMigrationCount! (type)
        public static string ClusterReportMigrationCount_TypedFieldSpec(ReportsMigrationCount fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nstatus: $status\n)";
            return "clusterReportMigrationCount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterReportMigrationCount_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterReportMigrationCount((ReportsMigrationCount)fieldSpecObj);
        }
        public static string ClusterReportMigrationCount(ReportsMigrationCount fieldSpec)
        {
            return ClusterReportMigrationCount_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterReportMigrationCount(object fieldSpecObj)
        {
            return ClusterReportMigrationCount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterReportMigrationCountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ReportsMigrationCount() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterReportMigrationJobStatus? ClusterReportMigrationJobStatus
        // GraphQL -> clusterReportMigrationJobStatus: ClusterReportMigrationJobStatus! (type)
        public static string ClusterReportMigrationJobStatus_TypedFieldSpec(ClusterReportMigrationJobStatus fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "clusterReportMigrationJobStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterReportMigrationJobStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterReportMigrationJobStatus((ClusterReportMigrationJobStatus)fieldSpecObj);
        }
        public static string ClusterReportMigrationJobStatus(ClusterReportMigrationJobStatus fieldSpec)
        {
            return ClusterReportMigrationJobStatus_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterReportMigrationJobStatus(object fieldSpecObj)
        {
            return ClusterReportMigrationJobStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterReportMigrationJobStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterReportMigrationJobStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ReportMigrationStatusConnection? ClusterReportMigrationStatus
        // GraphQL -> clusterReportMigrationStatus: ReportMigrationStatusConnection! (type)
        public static string ClusterReportMigrationStatus_TypedFieldSpec(ReportMigrationStatusConnection fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nstatus: $status\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "clusterReportMigrationStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterReportMigrationStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterReportMigrationStatus((ReportMigrationStatusConnection)fieldSpecObj);
        }
        public static string ClusterReportMigrationStatus(ReportMigrationStatusConnection fieldSpec)
        {
            return ClusterReportMigrationStatus_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterReportMigrationStatus(object fieldSpecObj)
        {
            return ClusterReportMigrationStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterReportMigrationStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ReportMigrationStatusConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterSlaDomainConnection? ClusterSlaDomains
        // GraphQL -> clusterSlaDomains: ClusterSlaDomainConnection! (type)
        public static string ClusterSlaDomains_TypedFieldSpec(ClusterSlaDomainConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "clusterSlaDomains" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterSlaDomains_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterSlaDomains((ClusterSlaDomainConnection)fieldSpecObj);
        }
        public static string ClusterSlaDomains(ClusterSlaDomainConnection fieldSpec)
        {
            return ClusterSlaDomains_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterSlaDomains(object fieldSpecObj)
        {
            return ClusterSlaDomains_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterSlaDomainsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterSlaDomainConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GroupCount>? ClusterTypeList
        // GraphQL -> clusterTypeList: [GroupCount!]! (type)
        public static string ClusterTypeList_TypedFieldSpec(List<GroupCount> fieldSpec)
        {
            string args = "";
            return "clusterTypeList" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterTypeList_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterTypeList((List<GroupCount>)fieldSpecObj);
        }
        public static string ClusterTypeList(List<GroupCount> fieldSpec)
        {
            return ClusterTypeList_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterTypeList(object fieldSpecObj)
        {
            return ClusterTypeList_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterTypeListFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GroupCount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VlanConfigListResponse? ClusterVlans
        // GraphQL -> clusterVlans: VlanConfigListResponse! (type)
        public static string ClusterVlans_TypedFieldSpec(VlanConfigListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterVlans" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterVlans_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterVlans((VlanConfigListResponse)fieldSpecObj);
        }
        public static string ClusterVlans(VlanConfigListResponse fieldSpec)
        {
            return ClusterVlans_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterVlans(object fieldSpecObj)
        {
            return ClusterVlans_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterVlansFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VlanConfigListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterWebSignedCertificateReply? ClusterWebSignedCertificate
        // GraphQL -> clusterWebSignedCertificate: ClusterWebSignedCertificateReply! (type)
        public static string ClusterWebSignedCertificate_TypedFieldSpec(ClusterWebSignedCertificateReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "clusterWebSignedCertificate" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterWebSignedCertificate_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterWebSignedCertificate((ClusterWebSignedCertificateReply)fieldSpecObj);
        }
        public static string ClusterWebSignedCertificate(ClusterWebSignedCertificateReply fieldSpec)
        {
            return ClusterWebSignedCertificate_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterWebSignedCertificate(object fieldSpecObj)
        {
            return ClusterWebSignedCertificate_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterWebSignedCertificateFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterWebSignedCertificateReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterConnection? ClusterWithUpgradesInfo
        // GraphQL -> clusterWithUpgradesInfo: ClusterConnection! (type)
        public static string ClusterWithUpgradesInfo_TypedFieldSpec(ClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nupgradeFilter: $upgradeFilter\nsortOrder: $sortOrder\nsortBy: $sortBy\n)";
            return "clusterWithUpgradesInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ClusterWithUpgradesInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return ClusterWithUpgradesInfo((ClusterConnection)fieldSpecObj);
        }
        public static string ClusterWithUpgradesInfo(ClusterConnection fieldSpec)
        {
            return ClusterWithUpgradesInfo_TypedFieldSpec(fieldSpec);
        }
        public static string ClusterWithUpgradesInfo(object fieldSpecObj)
        {
            return ClusterWithUpgradesInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ClusterWithUpgradesInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ComputeClusterDetail? ComputeClusterStatus
        // GraphQL -> computeClusterStatus: ComputeClusterDetail! (type)
        public static string ComputeClusterStatus_TypedFieldSpec(ComputeClusterDetail fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "computeClusterStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ComputeClusterStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return ComputeClusterStatus((ComputeClusterDetail)fieldSpecObj);
        }
        public static string ComputeClusterStatus(ComputeClusterDetail fieldSpec)
        {
            return ComputeClusterStatus_TypedFieldSpec(fieldSpec);
        }
        public static string ComputeClusterStatus(object fieldSpecObj)
        {
            return ComputeClusterStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ComputeClusterStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ComputeClusterDetail() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ConfiguredGroupMemberConnection? ConfiguredGroupMembers
        // GraphQL -> configuredGroupMembers: O365ConfiguredGroupMemberConnection! (type)
        public static string ConfiguredGroupMembers_TypedFieldSpec(O365ConfiguredGroupMemberConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\norgId: $orgId\nwildcard: $wildcard\npdls: $pdls\n)";
            return "configuredGroupMembers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ConfiguredGroupMembers_ObjectFieldSpec(object fieldSpecObj)
        {
            return ConfiguredGroupMembers((O365ConfiguredGroupMemberConnection)fieldSpecObj);
        }
        public static string ConfiguredGroupMembers(O365ConfiguredGroupMemberConnection fieldSpec)
        {
            return ConfiguredGroupMembers_TypedFieldSpec(fieldSpec);
        }
        public static string ConfiguredGroupMembers(object fieldSpecObj)
        {
            return ConfiguredGroupMembers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ConfiguredGroupMembersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ConfiguredGroupMemberConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CountOfObjectsProtectedBySlAsResult? CountOfObjectsProtectedBySlas
        // GraphQL -> countOfObjectsProtectedBySlas: CountOfObjectsProtectedBySLAsResult! (type)
        public static string CountOfObjectsProtectedBySlas_TypedFieldSpec(CountOfObjectsProtectedBySlAsResult fieldSpec)
        {
            string args = "\n(\nrootOptionalFid: $rootOptionalFid\nslaIds: $slaIds\nfilter: $filter\ntypeFilter: $typeFilter\n)";
            return "countOfObjectsProtectedBySlas" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CountOfObjectsProtectedBySlas_ObjectFieldSpec(object fieldSpecObj)
        {
            return CountOfObjectsProtectedBySlas((CountOfObjectsProtectedBySlAsResult)fieldSpecObj);
        }
        public static string CountOfObjectsProtectedBySlas(CountOfObjectsProtectedBySlAsResult fieldSpec)
        {
            return CountOfObjectsProtectedBySlas_TypedFieldSpec(fieldSpec);
        }
        public static string CountOfObjectsProtectedBySlas(object fieldSpecObj)
        {
            return CountOfObjectsProtectedBySlas_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CountOfObjectsProtectedBySlasFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CountOfObjectsProtectedBySlAsResult() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Crawl? Crawl
        // GraphQL -> crawl: Crawl! (type)
        public static string Crawl_TypedFieldSpec(Crawl fieldSpec)
        {
            string args = "\n(\ncrawlId: $crawlId\n)";
            return "crawl" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Crawl_ObjectFieldSpec(object fieldSpecObj)
        {
            return Crawl((Crawl)fieldSpecObj);
        }
        public static string Crawl(Crawl fieldSpec)
        {
            return Crawl_TypedFieldSpec(fieldSpec);
        }
        public static string Crawl(object fieldSpecObj)
        {
            return Crawl_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CrawlFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Crawl() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CrawlConnection? Crawls
        // GraphQL -> crawls: CrawlConnection! (type)
        public static string Crawls_TypedFieldSpec(CrawlConnection fieldSpec)
        {
            string args = "";
            return "crawls" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Crawls_ObjectFieldSpec(object fieldSpecObj)
        {
            return Crawls((CrawlConnection)fieldSpecObj);
        }
        public static string Crawls(CrawlConnection fieldSpec)
        {
            return Crawls_TypedFieldSpec(fieldSpec);
        }
        public static string Crawls(object fieldSpecObj)
        {
            return Crawls_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CrawlsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CrawlConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Org? CurrentOrg
        // GraphQL -> currentOrg: Org! (type)
        public static string CurrentOrg_TypedFieldSpec(Org fieldSpec)
        {
            string args = "";
            return "currentOrg" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CurrentOrg_ObjectFieldSpec(object fieldSpecObj)
        {
            return CurrentOrg((Org)fieldSpecObj);
        }
        public static string CurrentOrg(Org fieldSpec)
        {
            return CurrentOrg_TypedFieldSpec(fieldSpec);
        }
        public static string CurrentOrg(object fieldSpecObj)
        {
            return CurrentOrg_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CurrentOrgFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Org() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> User? CurrentUser
        // GraphQL -> currentUser: User! (type)
        public static string CurrentUser_TypedFieldSpec(User fieldSpec)
        {
            string args = "";
            return "currentUser" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CurrentUser_ObjectFieldSpec(object fieldSpecObj)
        {
            return CurrentUser((User)fieldSpecObj);
        }
        public static string CurrentUser(User fieldSpec)
        {
            return CurrentUser_TypedFieldSpec(fieldSpec);
        }
        public static string CurrentUser(object fieldSpecObj)
        {
            return CurrentUser_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CurrentUserFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new User() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UserLoginContext? CurrentUserLoginContext
        // GraphQL -> currentUserLoginContext: UserLoginContext! (type)
        public static string CurrentUserLoginContext_TypedFieldSpec(UserLoginContext fieldSpec)
        {
            string args = "";
            return "currentUserLoginContext" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CurrentUserLoginContext_ObjectFieldSpec(object fieldSpecObj)
        {
            return CurrentUserLoginContext((UserLoginContext)fieldSpecObj);
        }
        public static string CurrentUserLoginContext(UserLoginContext fieldSpec)
        {
            return CurrentUserLoginContext_TypedFieldSpec(fieldSpec);
        }
        public static string CurrentUserLoginContext(object fieldSpecObj)
        {
            return CurrentUserLoginContext_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CurrentUserLoginContextFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UserLoginContext() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Analyzer? CustomAnalyzer
        // GraphQL -> customAnalyzer: Analyzer! (type)
        public static string CustomAnalyzer_TypedFieldSpec(Analyzer fieldSpec)
        {
            string args = "\n(\nanalyzerId: $analyzerId\n)";
            return "customAnalyzer" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string CustomAnalyzer_ObjectFieldSpec(object fieldSpecObj)
        {
            return CustomAnalyzer((Analyzer)fieldSpecObj);
        }
        public static string CustomAnalyzer(Analyzer fieldSpec)
        {
            return CustomAnalyzer_TypedFieldSpec(fieldSpec);
        }
        public static string CustomAnalyzer(object fieldSpecObj)
        {
            return CustomAnalyzer_ObjectFieldSpec(fieldSpecObj);
        }
        public static object CustomAnalyzerFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Analyzer() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetDashboardSummaryReply? DashboardSummary
        // GraphQL -> dashboardSummary: GetDashboardSummaryReply! (type)
        public static string DashboardSummary_TypedFieldSpec(GetDashboardSummaryReply fieldSpec)
        {
            string args = "\n(\ngetWhitelistedResults: $getWhitelistedResults\n)";
            return "dashboardSummary" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DashboardSummary_ObjectFieldSpec(object fieldSpecObj)
        {
            return DashboardSummary((GetDashboardSummaryReply)fieldSpecObj);
        }
        public static string DashboardSummary(GetDashboardSummaryReply fieldSpec)
        {
            return DashboardSummary_TypedFieldSpec(fieldSpec);
        }
        public static string DashboardSummary(object fieldSpecObj)
        {
            return DashboardSummary_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DashboardSummaryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetDashboardSummaryReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> DbLogReportSummaryListReply? DatabaseLogReportForCluster
        // GraphQL -> databaseLogReportForCluster: DbLogReportSummaryListReply! (type)
        public static string DatabaseLogReportForCluster_TypedFieldSpec(DbLogReportSummaryListReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "databaseLogReportForCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DatabaseLogReportForCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return DatabaseLogReportForCluster((DbLogReportSummaryListReply)fieldSpecObj);
        }
        public static string DatabaseLogReportForCluster(DbLogReportSummaryListReply fieldSpec)
        {
            return DatabaseLogReportForCluster_TypedFieldSpec(fieldSpec);
        }
        public static string DatabaseLogReportForCluster(object fieldSpecObj)
        {
            return DatabaseLogReportForCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DatabaseLogReportForClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new DbLogReportSummaryListReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> DbLogReportProperties? DatabaseLogReportingPropertiesForCluster
        // GraphQL -> databaseLogReportingPropertiesForCluster: DbLogReportProperties! (type)
        public static string DatabaseLogReportingPropertiesForCluster_TypedFieldSpec(DbLogReportProperties fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "databaseLogReportingPropertiesForCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DatabaseLogReportingPropertiesForCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return DatabaseLogReportingPropertiesForCluster((DbLogReportProperties)fieldSpecObj);
        }
        public static string DatabaseLogReportingPropertiesForCluster(DbLogReportProperties fieldSpec)
        {
            return DatabaseLogReportingPropertiesForCluster_TypedFieldSpec(fieldSpec);
        }
        public static string DatabaseLogReportingPropertiesForCluster(object fieldSpecObj)
        {
            return DatabaseLogReportingPropertiesForCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DatabaseLogReportingPropertiesForClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new DbLogReportProperties() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> QuerySddlReply? DatagovSecDesc
        // GraphQL -> datagovSecDesc: QuerySDDLReply! (type)
        public static string DatagovSecDesc_TypedFieldSpec(QuerySddlReply fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nstdPath: $stdPath\nskipResolveSids: $skipResolveSids\nfilters: $filters\n)";
            return "datagovSecDesc" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DatagovSecDesc_ObjectFieldSpec(object fieldSpecObj)
        {
            return DatagovSecDesc((QuerySddlReply)fieldSpecObj);
        }
        public static string DatagovSecDesc(QuerySddlReply fieldSpec)
        {
            return DatagovSecDesc_TypedFieldSpec(fieldSpec);
        }
        public static string DatagovSecDesc(object fieldSpecObj)
        {
            return DatagovSecDesc_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DatagovSecDescFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new QuerySddlReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Db2Database? Db2Database
        // GraphQL -> db2Database: Db2Database! (type)
        public static string Db2Database_TypedFieldSpec(Db2Database fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "db2Database" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2Database_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2Database((Db2Database)fieldSpecObj);
        }
        public static string Db2Database(Db2Database fieldSpec)
        {
            return Db2Database_TypedFieldSpec(fieldSpec);
        }
        public static string Db2Database(object fieldSpecObj)
        {
            return Db2Database_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2DatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Db2Database() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? Db2DatabaseJobStatus
        // GraphQL -> db2DatabaseJobStatus: AsyncRequestStatus! (type)
        public static string Db2DatabaseJobStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "db2DatabaseJobStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2DatabaseJobStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2DatabaseJobStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string Db2DatabaseJobStatus(AsyncRequestStatus fieldSpec)
        {
            return Db2DatabaseJobStatus_TypedFieldSpec(fieldSpec);
        }
        public static string Db2DatabaseJobStatus(object fieldSpecObj)
        {
            return Db2DatabaseJobStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2DatabaseJobStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Db2DatabaseConnection? Db2Databases
        // GraphQL -> db2Databases: Db2DatabaseConnection! (type)
        public static string Db2Databases_TypedFieldSpec(Db2DatabaseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "db2Databases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2Databases_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2Databases((Db2DatabaseConnection)fieldSpecObj);
        }
        public static string Db2Databases(Db2DatabaseConnection fieldSpec)
        {
            return Db2Databases_TypedFieldSpec(fieldSpec);
        }
        public static string Db2Databases(object fieldSpecObj)
        {
            return Db2Databases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2DatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Db2DatabaseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Db2Instance? Db2Instance
        // GraphQL -> db2Instance: Db2Instance! (type)
        public static string Db2Instance_TypedFieldSpec(Db2Instance fieldSpec)
        {
            string args = "\n(\nid: $id\n)";
            return "db2Instance" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2Instance_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2Instance((Db2Instance)fieldSpecObj);
        }
        public static string Db2Instance(Db2Instance fieldSpec)
        {
            return Db2Instance_TypedFieldSpec(fieldSpec);
        }
        public static string Db2Instance(object fieldSpecObj)
        {
            return Db2Instance_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2InstanceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Db2Instance() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Db2InstanceConnection? Db2Instances
        // GraphQL -> db2Instances: Db2InstanceConnection! (type)
        public static string Db2Instances_TypedFieldSpec(Db2InstanceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "db2Instances" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2Instances_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2Instances((Db2InstanceConnection)fieldSpecObj);
        }
        public static string Db2Instances(Db2InstanceConnection fieldSpec)
        {
            return Db2Instances_TypedFieldSpec(fieldSpec);
        }
        public static string Db2Instances(object fieldSpecObj)
        {
            return Db2Instances_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2InstancesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Db2InstanceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Db2LogSnapshot? Db2LogSnapshot
        // GraphQL -> db2LogSnapshot: Db2LogSnapshot! (type)
        public static string Db2LogSnapshot_TypedFieldSpec(Db2LogSnapshot fieldSpec)
        {
            string args = "\n(\ndb2LogSnapshotFid: $db2LogSnapshotFid\n)";
            return "db2LogSnapshot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2LogSnapshot_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2LogSnapshot((Db2LogSnapshot)fieldSpecObj);
        }
        public static string Db2LogSnapshot(Db2LogSnapshot fieldSpec)
        {
            return Db2LogSnapshot_TypedFieldSpec(fieldSpec);
        }
        public static string Db2LogSnapshot(object fieldSpecObj)
        {
            return Db2LogSnapshot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2LogSnapshotFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Db2LogSnapshot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Db2LogSnapshotConnection? Db2LogSnapshots
        // GraphQL -> db2LogSnapshots: Db2LogSnapshotConnection! (type)
        public static string Db2LogSnapshots_TypedFieldSpec(Db2LogSnapshotConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilter: $filter\n)";
            return "db2LogSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2LogSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2LogSnapshots((Db2LogSnapshotConnection)fieldSpecObj);
        }
        public static string Db2LogSnapshots(Db2LogSnapshotConnection fieldSpec)
        {
            return Db2LogSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string Db2LogSnapshots(object fieldSpecObj)
        {
            return Db2LogSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2LogSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Db2LogSnapshotConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Db2RecoverableRange? Db2RecoverableRange
        // GraphQL -> db2RecoverableRange: Db2RecoverableRange! (type)
        public static string Db2RecoverableRange_TypedFieldSpec(Db2RecoverableRange fieldSpec)
        {
            string args = "\n(\ndb2RecoverableRangeFid: $db2RecoverableRangeFid\n)";
            return "db2RecoverableRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2RecoverableRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2RecoverableRange((Db2RecoverableRange)fieldSpecObj);
        }
        public static string Db2RecoverableRange(Db2RecoverableRange fieldSpec)
        {
            return Db2RecoverableRange_TypedFieldSpec(fieldSpec);
        }
        public static string Db2RecoverableRange(object fieldSpecObj)
        {
            return Db2RecoverableRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2RecoverableRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Db2RecoverableRange() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Db2RecoverableRangeConnection? Db2RecoverableRanges
        // GraphQL -> db2RecoverableRanges: Db2RecoverableRangeConnection! (type)
        public static string Db2RecoverableRanges_TypedFieldSpec(Db2RecoverableRangeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilter: $filter\n)";
            return "db2RecoverableRanges" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Db2RecoverableRanges_ObjectFieldSpec(object fieldSpecObj)
        {
            return Db2RecoverableRanges((Db2RecoverableRangeConnection)fieldSpecObj);
        }
        public static string Db2RecoverableRanges(Db2RecoverableRangeConnection fieldSpec)
        {
            return Db2RecoverableRanges_TypedFieldSpec(fieldSpec);
        }
        public static string Db2RecoverableRanges(object fieldSpecObj)
        {
            return Db2RecoverableRanges_ObjectFieldSpec(fieldSpecObj);
        }
        public static object Db2RecoverableRangesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Db2RecoverableRangeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ExportUrlSpecs? DecryptExportUrl
        // GraphQL -> decryptExportUrl: ExportUrlSpecs! (type)
        public static string DecryptExportUrl_TypedFieldSpec(ExportUrlSpecs fieldSpec)
        {
            string args = "\n(\nworkloadFid: $workloadFid\nexportUrlSpecsEnc: $exportUrlSpecsEnc\n)";
            return "decryptExportUrl" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DecryptExportUrl_ObjectFieldSpec(object fieldSpecObj)
        {
            return DecryptExportUrl((ExportUrlSpecs)fieldSpecObj);
        }
        public static string DecryptExportUrl(ExportUrlSpecs fieldSpec)
        {
            return DecryptExportUrl_TypedFieldSpec(fieldSpec);
        }
        public static string DecryptExportUrl(object fieldSpecObj)
        {
            return DecryptExportUrl_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DecryptExportUrlFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ExportUrlSpecs() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> DiffResult? DiffFmd
        // GraphQL -> diffFmd: DiffResult! (type)
        public static string DiffFmd_TypedFieldSpec(DiffResult fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nmanagedId: $managedId\nsnapshotId: $snapshotId\nbrowseDiffPath: $browseDiffPath\n)";
            return "diffFmd" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DiffFmd_ObjectFieldSpec(object fieldSpecObj)
        {
            return DiffFmd((DiffResult)fieldSpecObj);
        }
        public static string DiffFmd(DiffResult fieldSpec)
        {
            return DiffFmd_TypedFieldSpec(fieldSpec);
        }
        public static string DiffFmd(object fieldSpecObj)
        {
            return DiffFmd_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DiffFmdFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new DiffResult() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> BootstrappableNodeInfoListResponse? DiscoverNodes
        // GraphQL -> discoverNodes: BootstrappableNodeInfoListResponse! (type)
        public static string DiscoverNodes_TypedFieldSpec(BootstrappableNodeInfoListResponse fieldSpec)
        {
            string args = "\n(\nid: $id\n)";
            return "discoverNodes" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DiscoverNodes_ObjectFieldSpec(object fieldSpecObj)
        {
            return DiscoverNodes((BootstrappableNodeInfoListResponse)fieldSpecObj);
        }
        public static string DiscoverNodes(BootstrappableNodeInfoListResponse fieldSpec)
        {
            return DiscoverNodes_TypedFieldSpec(fieldSpec);
        }
        public static string DiscoverNodes(object fieldSpecObj)
        {
            return DiscoverNodes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DiscoverNodesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new BootstrappableNodeInfoListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetPoliciesTimelineReply? DiscoveryTimeline
        // GraphQL -> discoveryTimeline: GetPoliciesTimelineReply! (type)
        public static string DiscoveryTimeline_TypedFieldSpec(GetPoliciesTimelineReply fieldSpec)
        {
            string args = "\n(\nstartDay: $startDay\nendDay: $endDay\ntimezone: $timezone\ngetWhitelistedResults: $getWhitelistedResults\nworkloadTypes: $workloadTypes\nuseOptimisedDiscoveryTimeline: $useOptimisedDiscoveryTimeline\nsubscriptionIdsFilter: $subscriptionIdsFilter\n)";
            return "discoveryTimeline" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DiscoveryTimeline_ObjectFieldSpec(object fieldSpecObj)
        {
            return DiscoveryTimeline((GetPoliciesTimelineReply)fieldSpecObj);
        }
        public static string DiscoveryTimeline(GetPoliciesTimelineReply fieldSpec)
        {
            return DiscoveryTimeline_TypedFieldSpec(fieldSpec);
        }
        public static string DiscoveryTimeline(object fieldSpecObj)
        {
            return DiscoveryTimeline_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DiscoveryTimelineFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetPoliciesTimelineReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> EventDigest? DistributionListDigest
        // GraphQL -> distributionListDigest: EventDigest! (type)
        public static string DistributionListDigest_TypedFieldSpec(EventDigest fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "distributionListDigest" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DistributionListDigest_ObjectFieldSpec(object fieldSpecObj)
        {
            return DistributionListDigest((EventDigest)fieldSpecObj);
        }
        public static string DistributionListDigest(EventDigest fieldSpec)
        {
            return DistributionListDigest_TypedFieldSpec(fieldSpec);
        }
        public static string DistributionListDigest(object fieldSpecObj)
        {
            return DistributionListDigest_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DistributionListDigestFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new EventDigest() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> DownloadCdmUpgradesPdfReply? DownloadCdmUpgradesPdf
        // GraphQL -> downloadCdmUpgradesPdf: DownloadCdmUpgradesPdfReply! (type)
        public static string DownloadCdmUpgradesPdf_TypedFieldSpec(DownloadCdmUpgradesPdfReply fieldSpec)
        {
            string args = "\n(\ndownloadFilter: $downloadFilter\n)";
            return "downloadCdmUpgradesPdf" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DownloadCdmUpgradesPdf_ObjectFieldSpec(object fieldSpecObj)
        {
            return DownloadCdmUpgradesPdf((DownloadCdmUpgradesPdfReply)fieldSpecObj);
        }
        public static string DownloadCdmUpgradesPdf(DownloadCdmUpgradesPdfReply fieldSpec)
        {
            return DownloadCdmUpgradesPdf_TypedFieldSpec(fieldSpec);
        }
        public static string DownloadCdmUpgradesPdf(object fieldSpecObj)
        {
            return DownloadCdmUpgradesPdf_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DownloadCdmUpgradesPdfFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new DownloadCdmUpgradesPdfReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> DownloadPackageStatusReply? DownloadPackageStatus
        // GraphQL -> downloadPackageStatus: DownloadPackageStatusReply! (type)
        public static string DownloadPackageStatus_TypedFieldSpec(DownloadPackageStatusReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "downloadPackageStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DownloadPackageStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return DownloadPackageStatus((DownloadPackageStatusReply)fieldSpecObj);
        }
        public static string DownloadPackageStatus(DownloadPackageStatusReply fieldSpec)
        {
            return DownloadPackageStatus_TypedFieldSpec(fieldSpec);
        }
        public static string DownloadPackageStatus(object fieldSpecObj)
        {
            return DownloadPackageStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DownloadPackageStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new DownloadPackageStatusReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GroupCount>? DownloadedVersionList
        // GraphQL -> downloadedVersionList: [GroupCount!]! (type)
        public static string DownloadedVersionList_TypedFieldSpec(List<GroupCount> fieldSpec)
        {
            string args = "";
            return "downloadedVersionList" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string DownloadedVersionList_ObjectFieldSpec(object fieldSpecObj)
        {
            return DownloadedVersionList((List<GroupCount>)fieldSpecObj);
        }
        public static string DownloadedVersionList(List<GroupCount> fieldSpec)
        {
            return DownloadedVersionList_TypedFieldSpec(fieldSpec);
        }
        public static string DownloadedVersionList(object fieldSpecObj)
        {
            return DownloadedVersionList_ObjectFieldSpec(fieldSpecObj);
        }
        public static object DownloadedVersionListFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GroupCount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> EdgeWindowsToolLink? EdgeWindowsToolLink
        // GraphQL -> edgeWindowsToolLink: EdgeWindowsToolLink! (type)
        public static string EdgeWindowsToolLink_TypedFieldSpec(EdgeWindowsToolLink fieldSpec)
        {
            string args = "";
            return "edgeWindowsToolLink" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string EdgeWindowsToolLink_ObjectFieldSpec(object fieldSpecObj)
        {
            return EdgeWindowsToolLink((EdgeWindowsToolLink)fieldSpecObj);
        }
        public static string EdgeWindowsToolLink(EdgeWindowsToolLink fieldSpec)
        {
            return EdgeWindowsToolLink_TypedFieldSpec(fieldSpec);
        }
        public static string EdgeWindowsToolLink(object fieldSpecObj)
        {
            return EdgeWindowsToolLink_ObjectFieldSpec(fieldSpecObj);
        }
        public static object EdgeWindowsToolLinkFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new EdgeWindowsToolLink() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ExchangeDag? ExchangeDag
        // GraphQL -> exchangeDag: ExchangeDag! (type)
        public static string ExchangeDag_TypedFieldSpec(ExchangeDag fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "exchangeDag" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ExchangeDag_ObjectFieldSpec(object fieldSpecObj)
        {
            return ExchangeDag((ExchangeDag)fieldSpecObj);
        }
        public static string ExchangeDag(ExchangeDag fieldSpec)
        {
            return ExchangeDag_TypedFieldSpec(fieldSpec);
        }
        public static string ExchangeDag(object fieldSpecObj)
        {
            return ExchangeDag_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ExchangeDagFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ExchangeDag() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ExchangeDagConnection? ExchangeDags
        // GraphQL -> exchangeDags: ExchangeDagConnection! (type)
        public static string ExchangeDags_TypedFieldSpec(ExchangeDagConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "exchangeDags" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ExchangeDags_ObjectFieldSpec(object fieldSpecObj)
        {
            return ExchangeDags((ExchangeDagConnection)fieldSpecObj);
        }
        public static string ExchangeDags(ExchangeDagConnection fieldSpec)
        {
            return ExchangeDags_TypedFieldSpec(fieldSpec);
        }
        public static string ExchangeDags(object fieldSpecObj)
        {
            return ExchangeDags_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ExchangeDagsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ExchangeDagConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ExchangeDatabase? ExchangeDatabase
        // GraphQL -> exchangeDatabase: ExchangeDatabase! (type)
        public static string ExchangeDatabase_TypedFieldSpec(ExchangeDatabase fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "exchangeDatabase" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ExchangeDatabase_ObjectFieldSpec(object fieldSpecObj)
        {
            return ExchangeDatabase((ExchangeDatabase)fieldSpecObj);
        }
        public static string ExchangeDatabase(ExchangeDatabase fieldSpec)
        {
            return ExchangeDatabase_TypedFieldSpec(fieldSpec);
        }
        public static string ExchangeDatabase(object fieldSpecObj)
        {
            return ExchangeDatabase_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ExchangeDatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ExchangeDatabase() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ExchangeDatabaseConnection? ExchangeDatabases
        // GraphQL -> exchangeDatabases: ExchangeDatabaseConnection! (type)
        public static string ExchangeDatabases_TypedFieldSpec(ExchangeDatabaseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "exchangeDatabases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ExchangeDatabases_ObjectFieldSpec(object fieldSpecObj)
        {
            return ExchangeDatabases((ExchangeDatabaseConnection)fieldSpecObj);
        }
        public static string ExchangeDatabases(ExchangeDatabaseConnection fieldSpec)
        {
            return ExchangeDatabases_TypedFieldSpec(fieldSpec);
        }
        public static string ExchangeDatabases(object fieldSpecObj)
        {
            return ExchangeDatabases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ExchangeDatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ExchangeDatabaseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ExchangeLiveMountConnection? ExchangeLiveMounts
        // GraphQL -> exchangeLiveMounts: ExchangeLiveMountConnection! (type)
        public static string ExchangeLiveMounts_TypedFieldSpec(ExchangeLiveMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilters: $filters\nsortBy: $sortBy\n)";
            return "exchangeLiveMounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ExchangeLiveMounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return ExchangeLiveMounts((ExchangeLiveMountConnection)fieldSpecObj);
        }
        public static string ExchangeLiveMounts(ExchangeLiveMountConnection fieldSpec)
        {
            return ExchangeLiveMounts_TypedFieldSpec(fieldSpec);
        }
        public static string ExchangeLiveMounts(object fieldSpecObj)
        {
            return ExchangeLiveMounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ExchangeLiveMountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ExchangeLiveMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ExchangeServer? ExchangeServer
        // GraphQL -> exchangeServer: ExchangeServer! (type)
        public static string ExchangeServer_TypedFieldSpec(ExchangeServer fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "exchangeServer" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ExchangeServer_ObjectFieldSpec(object fieldSpecObj)
        {
            return ExchangeServer((ExchangeServer)fieldSpecObj);
        }
        public static string ExchangeServer(ExchangeServer fieldSpec)
        {
            return ExchangeServer_TypedFieldSpec(fieldSpec);
        }
        public static string ExchangeServer(object fieldSpecObj)
        {
            return ExchangeServer_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ExchangeServerFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ExchangeServer() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ExchangeServerConnection? ExchangeServers
        // GraphQL -> exchangeServers: ExchangeServerConnection! (type)
        public static string ExchangeServers_TypedFieldSpec(ExchangeServerConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "exchangeServers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ExchangeServers_ObjectFieldSpec(object fieldSpecObj)
        {
            return ExchangeServers((ExchangeServerConnection)fieldSpecObj);
        }
        public static string ExchangeServers(ExchangeServerConnection fieldSpec)
        {
            return ExchangeServers_TypedFieldSpec(fieldSpec);
        }
        public static string ExchangeServers(object fieldSpecObj)
        {
            return ExchangeServers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ExchangeServersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ExchangeServerConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FailedRestoreItemsInfoReply? FailedRestoreItemsInfo
        // GraphQL -> failedRestoreItemsInfo: FailedRestoreItemsInfoReply! (type)
        public static string FailedRestoreItemsInfo_TypedFieldSpec(FailedRestoreItemsInfoReply fieldSpec)
        {
            string args = "\n(\nworkloadFid: $workloadFid\ntaskchainId: $taskchainId\n)";
            return "failedRestoreItemsInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FailedRestoreItemsInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return FailedRestoreItemsInfo((FailedRestoreItemsInfoReply)fieldSpecObj);
        }
        public static string FailedRestoreItemsInfo(FailedRestoreItemsInfoReply fieldSpec)
        {
            return FailedRestoreItemsInfo_TypedFieldSpec(fieldSpec);
        }
        public static string FailedRestoreItemsInfo(object fieldSpecObj)
        {
            return FailedRestoreItemsInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FailedRestoreItemsInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FailedRestoreItemsInfoReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FailoverClusterApp? FailoverClusterApp
        // GraphQL -> failoverClusterApp: FailoverClusterApp! (type)
        public static string FailoverClusterApp_TypedFieldSpec(FailoverClusterApp fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "failoverClusterApp" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FailoverClusterApp_ObjectFieldSpec(object fieldSpecObj)
        {
            return FailoverClusterApp((FailoverClusterApp)fieldSpecObj);
        }
        public static string FailoverClusterApp(FailoverClusterApp fieldSpec)
        {
            return FailoverClusterApp_TypedFieldSpec(fieldSpec);
        }
        public static string FailoverClusterApp(object fieldSpecObj)
        {
            return FailoverClusterApp_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FailoverClusterAppFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FailoverClusterApp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FailoverClusterAppConnection? FailoverClusterApps
        // GraphQL -> failoverClusterApps: FailoverClusterAppConnection! (type)
        public static string FailoverClusterApps_TypedFieldSpec(FailoverClusterAppConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nhostFailoverClusterRoot: $hostFailoverClusterRoot\n)";
            return "failoverClusterApps" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FailoverClusterApps_ObjectFieldSpec(object fieldSpecObj)
        {
            return FailoverClusterApps((FailoverClusterAppConnection)fieldSpecObj);
        }
        public static string FailoverClusterApps(FailoverClusterAppConnection fieldSpec)
        {
            return FailoverClusterApps_TypedFieldSpec(fieldSpec);
        }
        public static string FailoverClusterApps(object fieldSpecObj)
        {
            return FailoverClusterApps_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FailoverClusterAppsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FailoverClusterAppConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FailoverClusterTopLevelDescendantTypeConnection? FailoverClusterTopLevelDescendants
        // GraphQL -> failoverClusterTopLevelDescendants: FailoverClusterTopLevelDescendantTypeConnection! (type)
        public static string FailoverClusterTopLevelDescendants_TypedFieldSpec(FailoverClusterTopLevelDescendantTypeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\ntypeFilter: $typeFilter\nfilter: $filter\nhostFailoverClusterRoot: $hostFailoverClusterRoot\n)";
            return "failoverClusterTopLevelDescendants" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FailoverClusterTopLevelDescendants_ObjectFieldSpec(object fieldSpecObj)
        {
            return FailoverClusterTopLevelDescendants((FailoverClusterTopLevelDescendantTypeConnection)fieldSpecObj);
        }
        public static string FailoverClusterTopLevelDescendants(FailoverClusterTopLevelDescendantTypeConnection fieldSpec)
        {
            return FailoverClusterTopLevelDescendants_TypedFieldSpec(fieldSpec);
        }
        public static string FailoverClusterTopLevelDescendants(object fieldSpecObj)
        {
            return FailoverClusterTopLevelDescendants_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FailoverClusterTopLevelDescendantsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FailoverClusterTopLevelDescendantTypeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FederatedLoginStatus? FederatedLoginStatus
        // GraphQL -> federatedLoginStatus: FederatedLoginStatus! (type)
        public static string FederatedLoginStatus_TypedFieldSpec(FederatedLoginStatus fieldSpec)
        {
            string args = "";
            return "federatedLoginStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FederatedLoginStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return FederatedLoginStatus((FederatedLoginStatus)fieldSpecObj);
        }
        public static string FederatedLoginStatus(FederatedLoginStatus fieldSpec)
        {
            return FederatedLoginStatus_TypedFieldSpec(fieldSpec);
        }
        public static string FederatedLoginStatus(object fieldSpecObj)
        {
            return FederatedLoginStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FederatedLoginStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FederatedLoginStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? FilesetRequestStatus
        // GraphQL -> filesetRequestStatus: AsyncRequestStatus! (type)
        public static string FilesetRequestStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "filesetRequestStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FilesetRequestStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return FilesetRequestStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string FilesetRequestStatus(AsyncRequestStatus fieldSpec)
        {
            return FilesetRequestStatus_TypedFieldSpec(fieldSpec);
        }
        public static string FilesetRequestStatus(object fieldSpecObj)
        {
            return FilesetRequestStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FilesetRequestStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FilesetSnapshotDetail? FilesetSnapshot
        // GraphQL -> filesetSnapshot: FilesetSnapshotDetail! (type)
        public static string FilesetSnapshot_TypedFieldSpec(FilesetSnapshotDetail fieldSpec)
        {
            string args = "\n(\nid: $id\nverbose: $verbose\n)";
            return "filesetSnapshot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FilesetSnapshot_ObjectFieldSpec(object fieldSpecObj)
        {
            return FilesetSnapshot((FilesetSnapshotDetail)fieldSpecObj);
        }
        public static string FilesetSnapshot(FilesetSnapshotDetail fieldSpec)
        {
            return FilesetSnapshot_TypedFieldSpec(fieldSpec);
        }
        public static string FilesetSnapshot(object fieldSpecObj)
        {
            return FilesetSnapshot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FilesetSnapshotFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FilesetSnapshotDetail() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> BrowseResponseListResponse? FilesetSnapshotFiles
        // GraphQL -> filesetSnapshotFiles: BrowseResponseListResponse! (type)
        public static string FilesetSnapshotFiles_TypedFieldSpec(BrowseResponseListResponse fieldSpec)
        {
            string args = "\n(\nid: $id\nlimit: $limit\noffset: $offset\npath: $path\n)";
            return "filesetSnapshotFiles" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FilesetSnapshotFiles_ObjectFieldSpec(object fieldSpecObj)
        {
            return FilesetSnapshotFiles((BrowseResponseListResponse)fieldSpecObj);
        }
        public static string FilesetSnapshotFiles(BrowseResponseListResponse fieldSpec)
        {
            return FilesetSnapshotFiles_TypedFieldSpec(fieldSpec);
        }
        public static string FilesetSnapshotFiles(object fieldSpecObj)
        {
            return FilesetSnapshotFiles_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FilesetSnapshotFilesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new BrowseResponseListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FilesetTemplate? FilesetTemplate
        // GraphQL -> filesetTemplate: FilesetTemplate! (type)
        public static string FilesetTemplate_TypedFieldSpec(FilesetTemplate fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "filesetTemplate" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FilesetTemplate_ObjectFieldSpec(object fieldSpecObj)
        {
            return FilesetTemplate((FilesetTemplate)fieldSpecObj);
        }
        public static string FilesetTemplate(FilesetTemplate fieldSpec)
        {
            return FilesetTemplate_TypedFieldSpec(fieldSpec);
        }
        public static string FilesetTemplate(object fieldSpecObj)
        {
            return FilesetTemplate_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FilesetTemplateFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FilesetTemplate() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FilesetTemplateConnection? FilesetTemplates
        // GraphQL -> filesetTemplates: FilesetTemplateConnection! (type)
        public static string FilesetTemplates_TypedFieldSpec(FilesetTemplateConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nhostRoot: $hostRoot\n)";
            return "filesetTemplates" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string FilesetTemplates_ObjectFieldSpec(object fieldSpecObj)
        {
            return FilesetTemplates((FilesetTemplateConnection)fieldSpecObj);
        }
        public static string FilesetTemplates(FilesetTemplateConnection fieldSpec)
        {
            return FilesetTemplates_TypedFieldSpec(fieldSpec);
        }
        public static string FilesetTemplates(object fieldSpecObj)
        {
            return FilesetTemplates_ObjectFieldSpec(fieldSpecObj);
        }
        public static object FilesetTemplatesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FilesetTemplateConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GcpNativeDisk? GcpNativeDisk
        // GraphQL -> gcpNativeDisk: GcpNativeDisk! (type)
        public static string GcpNativeDisk_TypedFieldSpec(GcpNativeDisk fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "gcpNativeDisk" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GcpNativeDisk_ObjectFieldSpec(object fieldSpecObj)
        {
            return GcpNativeDisk((GcpNativeDisk)fieldSpecObj);
        }
        public static string GcpNativeDisk(GcpNativeDisk fieldSpec)
        {
            return GcpNativeDisk_TypedFieldSpec(fieldSpec);
        }
        public static string GcpNativeDisk(object fieldSpecObj)
        {
            return GcpNativeDisk_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GcpNativeDiskFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GcpNativeDisk() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GcpNativeDiskConnection? GcpNativeDisks
        // GraphQL -> gcpNativeDisks: GcpNativeDiskConnection! (type)
        public static string GcpNativeDisks_TypedFieldSpec(GcpNativeDiskConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\ndiskFilters: $diskFilters\n)";
            return "gcpNativeDisks" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GcpNativeDisks_ObjectFieldSpec(object fieldSpecObj)
        {
            return GcpNativeDisks((GcpNativeDiskConnection)fieldSpecObj);
        }
        public static string GcpNativeDisks(GcpNativeDiskConnection fieldSpec)
        {
            return GcpNativeDisks_TypedFieldSpec(fieldSpec);
        }
        public static string GcpNativeDisks(object fieldSpecObj)
        {
            return GcpNativeDisks_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GcpNativeDisksFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GcpNativeDiskConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GcpNativeGceInstance? GcpNativeGceInstance
        // GraphQL -> gcpNativeGceInstance: GcpNativeGceInstance! (type)
        public static string GcpNativeGceInstance_TypedFieldSpec(GcpNativeGceInstance fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "gcpNativeGceInstance" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GcpNativeGceInstance_ObjectFieldSpec(object fieldSpecObj)
        {
            return GcpNativeGceInstance((GcpNativeGceInstance)fieldSpecObj);
        }
        public static string GcpNativeGceInstance(GcpNativeGceInstance fieldSpec)
        {
            return GcpNativeGceInstance_TypedFieldSpec(fieldSpec);
        }
        public static string GcpNativeGceInstance(object fieldSpecObj)
        {
            return GcpNativeGceInstance_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GcpNativeGceInstanceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GcpNativeGceInstance() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GcpNativeGceInstanceConnection? GcpNativeGceInstances
        // GraphQL -> gcpNativeGceInstances: GcpNativeGceInstanceConnection! (type)
        public static string GcpNativeGceInstances_TypedFieldSpec(GcpNativeGceInstanceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\ngceInstanceFilters: $gceInstanceFilters\n)";
            return "gcpNativeGceInstances" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GcpNativeGceInstances_ObjectFieldSpec(object fieldSpecObj)
        {
            return GcpNativeGceInstances((GcpNativeGceInstanceConnection)fieldSpecObj);
        }
        public static string GcpNativeGceInstances(GcpNativeGceInstanceConnection fieldSpec)
        {
            return GcpNativeGceInstances_TypedFieldSpec(fieldSpec);
        }
        public static string GcpNativeGceInstances(object fieldSpecObj)
        {
            return GcpNativeGceInstances_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GcpNativeGceInstancesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GcpNativeGceInstanceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GcpNativeProject? GcpNativeProject
        // GraphQL -> gcpNativeProject: GcpNativeProject! (type)
        public static string GcpNativeProject_TypedFieldSpec(GcpNativeProject fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "gcpNativeProject" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GcpNativeProject_ObjectFieldSpec(object fieldSpecObj)
        {
            return GcpNativeProject((GcpNativeProject)fieldSpecObj);
        }
        public static string GcpNativeProject(GcpNativeProject fieldSpec)
        {
            return GcpNativeProject_TypedFieldSpec(fieldSpec);
        }
        public static string GcpNativeProject(object fieldSpecObj)
        {
            return GcpNativeProject_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GcpNativeProjectFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GcpNativeProject() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GcpNativeProjectConnection? GcpNativeProjects
        // GraphQL -> gcpNativeProjects: GcpNativeProjectConnection! (type)
        public static string GcpNativeProjects_TypedFieldSpec(GcpNativeProjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nprojectFilters: $projectFilters\nauthorizedOperationFilter: $authorizedOperationFilter\nworkloadHierarchy: $workloadHierarchy\n)";
            return "gcpNativeProjects" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GcpNativeProjects_ObjectFieldSpec(object fieldSpecObj)
        {
            return GcpNativeProjects((GcpNativeProjectConnection)fieldSpecObj);
        }
        public static string GcpNativeProjects(GcpNativeProjectConnection fieldSpec)
        {
            return GcpNativeProjects_TypedFieldSpec(fieldSpec);
        }
        public static string GcpNativeProjects(object fieldSpecObj)
        {
            return GcpNativeProjects_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GcpNativeProjectsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GcpNativeProjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ListStoredDiskLocationsReply? GcpNativeStoredDiskLocations
        // GraphQL -> gcpNativeStoredDiskLocations: ListStoredDiskLocationsReply! (type)
        public static string GcpNativeStoredDiskLocations_TypedFieldSpec(ListStoredDiskLocationsReply fieldSpec)
        {
            string args = "\n(\nprojectId: $projectId\n)";
            return "gcpNativeStoredDiskLocations" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GcpNativeStoredDiskLocations_ObjectFieldSpec(object fieldSpecObj)
        {
            return GcpNativeStoredDiskLocations((ListStoredDiskLocationsReply)fieldSpecObj);
        }
        public static string GcpNativeStoredDiskLocations(ListStoredDiskLocationsReply fieldSpec)
        {
            return GcpNativeStoredDiskLocations_TypedFieldSpec(fieldSpec);
        }
        public static string GcpNativeStoredDiskLocations(object fieldSpecObj)
        {
            return GcpNativeStoredDiskLocations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GcpNativeStoredDiskLocationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ListStoredDiskLocationsReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GroupCount>? GeoLocationList
        // GraphQL -> geoLocationList: [GroupCount!]! (type)
        public static string GeoLocationList_TypedFieldSpec(List<GroupCount> fieldSpec)
        {
            string args = "";
            return "geoLocationList" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GeoLocationList_ObjectFieldSpec(object fieldSpecObj)
        {
            return GeoLocationList((List<GroupCount>)fieldSpecObj);
        }
        public static string GeoLocationList(List<GroupCount> fieldSpec)
        {
            return GeoLocationList_TypedFieldSpec(fieldSpec);
        }
        public static string GeoLocationList(object fieldSpecObj)
        {
            return GeoLocationList_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GeoLocationListFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GroupCount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RoleConnection? GetAllRolesInOrgConnection
        // GraphQL -> getAllRolesInOrgConnection: RoleConnection! (type)
        public static string GetAllRolesInOrgConnection_TypedFieldSpec(RoleConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nnameFilter: $nameFilter\n)";
            return "getAllRolesInOrgConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetAllRolesInOrgConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetAllRolesInOrgConnection((RoleConnection)fieldSpecObj);
        }
        public static string GetAllRolesInOrgConnection(RoleConnection fieldSpec)
        {
            return GetAllRolesInOrgConnection_TypedFieldSpec(fieldSpec);
        }
        public static string GetAllRolesInOrgConnection(object fieldSpecObj)
        {
            return GetAllRolesInOrgConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetAllRolesInOrgConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RoleConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmUpgradeReleaseDetailsFromSupportPortalReply? GetCdmReleaseDetailsForClusterFromSupportPortal
        // GraphQL -> getCdmReleaseDetailsForClusterFromSupportPortal: CdmUpgradeReleaseDetailsFromSupportPortalReply! (type)
        public static string GetCdmReleaseDetailsForClusterFromSupportPortal_TypedFieldSpec(CdmUpgradeReleaseDetailsFromSupportPortalReply fieldSpec)
        {
            string args = "\n(\nlistClusterUuid: $listClusterUuid\nfilterVersion: $filterVersion\nfetchLinks: $fetchLinks\nfilterUpgradeable: $filterUpgradeable\nshouldShowAll: $shouldShowAll\nfilterAfterSource: $filterAfterSource\nsortOrder: $sortOrder\n)";
            return "getCdmReleaseDetailsForClusterFromSupportPortal" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetCdmReleaseDetailsForClusterFromSupportPortal_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetCdmReleaseDetailsForClusterFromSupportPortal((CdmUpgradeReleaseDetailsFromSupportPortalReply)fieldSpecObj);
        }
        public static string GetCdmReleaseDetailsForClusterFromSupportPortal(CdmUpgradeReleaseDetailsFromSupportPortalReply fieldSpec)
        {
            return GetCdmReleaseDetailsForClusterFromSupportPortal_TypedFieldSpec(fieldSpec);
        }
        public static string GetCdmReleaseDetailsForClusterFromSupportPortal(object fieldSpecObj)
        {
            return GetCdmReleaseDetailsForClusterFromSupportPortal_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetCdmReleaseDetailsForClusterFromSupportPortalFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmUpgradeReleaseDetailsFromSupportPortalReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmUpgradeReleaseDetailsFromSupportPortalReply? GetCdmReleaseDetailsForVersionFromSupportPortal
        // GraphQL -> getCdmReleaseDetailsForVersionFromSupportPortal: CdmUpgradeReleaseDetailsFromSupportPortalReply! (type)
        public static string GetCdmReleaseDetailsForVersionFromSupportPortal_TypedFieldSpec(CdmUpgradeReleaseDetailsFromSupportPortalReply fieldSpec)
        {
            string args = "\n(\nlistClusterUuid: $listClusterUuid\nfilterVersion: $filterVersion\nfetchLinks: $fetchLinks\nfilterUpgradeable: $filterUpgradeable\nshouldShowAll: $shouldShowAll\nfilterAfterSource: $filterAfterSource\nsortOrder: $sortOrder\n)";
            return "getCdmReleaseDetailsForVersionFromSupportPortal" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetCdmReleaseDetailsForVersionFromSupportPortal_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetCdmReleaseDetailsForVersionFromSupportPortal((CdmUpgradeReleaseDetailsFromSupportPortalReply)fieldSpecObj);
        }
        public static string GetCdmReleaseDetailsForVersionFromSupportPortal(CdmUpgradeReleaseDetailsFromSupportPortalReply fieldSpec)
        {
            return GetCdmReleaseDetailsForVersionFromSupportPortal_TypedFieldSpec(fieldSpec);
        }
        public static string GetCdmReleaseDetailsForVersionFromSupportPortal(object fieldSpecObj)
        {
            return GetCdmReleaseDetailsForVersionFromSupportPortal_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetCdmReleaseDetailsForVersionFromSupportPortalFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmUpgradeReleaseDetailsFromSupportPortalReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmUpgradeReleaseDetailsFromSupportPortalReply? GetCdmReleaseDetailsFromSupportPortal
        // GraphQL -> getCdmReleaseDetailsFromSupportPortal: CdmUpgradeReleaseDetailsFromSupportPortalReply! (type)
        public static string GetCdmReleaseDetailsFromSupportPortal_TypedFieldSpec(CdmUpgradeReleaseDetailsFromSupportPortalReply fieldSpec)
        {
            string args = "\n(\nplatform: $platform\nnodeCount: $nodeCount\nsourceVersion: $sourceVersion\nfilterVersion: $filterVersion\nfetchLinks: $fetchLinks\nfilterUpgradeable: $filterUpgradeable\nshouldShowAll: $shouldShowAll\nfilterAfterSource: $filterAfterSource\nsortOrder: $sortOrder\n)";
            return "getCdmReleaseDetailsFromSupportPortal" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetCdmReleaseDetailsFromSupportPortal_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetCdmReleaseDetailsFromSupportPortal((CdmUpgradeReleaseDetailsFromSupportPortalReply)fieldSpecObj);
        }
        public static string GetCdmReleaseDetailsFromSupportPortal(CdmUpgradeReleaseDetailsFromSupportPortalReply fieldSpec)
        {
            return GetCdmReleaseDetailsFromSupportPortal_TypedFieldSpec(fieldSpec);
        }
        public static string GetCdmReleaseDetailsFromSupportPortal(object fieldSpecObj)
        {
            return GetCdmReleaseDetailsFromSupportPortal_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetCdmReleaseDetailsFromSupportPortalFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmUpgradeReleaseDetailsFromSupportPortalReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GroupCountListWithTotal? GetGroupCountByCdmClusterStatus
        // GraphQL -> getGroupCountByCdmClusterStatus: GroupCountListWithTotal! (type)
        public static string GetGroupCountByCdmClusterStatus_TypedFieldSpec(GroupCountListWithTotal fieldSpec)
        {
            string args = "";
            return "getGroupCountByCdmClusterStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetGroupCountByCdmClusterStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetGroupCountByCdmClusterStatus((GroupCountListWithTotal)fieldSpecObj);
        }
        public static string GetGroupCountByCdmClusterStatus(GroupCountListWithTotal fieldSpec)
        {
            return GetGroupCountByCdmClusterStatus_TypedFieldSpec(fieldSpec);
        }
        public static string GetGroupCountByCdmClusterStatus(object fieldSpecObj)
        {
            return GetGroupCountByCdmClusterStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetGroupCountByCdmClusterStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GroupCountListWithTotal() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GroupCount>? GetGroupCountByPrechecksStatus
        // GraphQL -> getGroupCountByPrechecksStatus: [GroupCount!]! (type)
        public static string GetGroupCountByPrechecksStatus_TypedFieldSpec(List<GroupCount> fieldSpec)
        {
            string args = "";
            return "getGroupCountByPrechecksStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetGroupCountByPrechecksStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetGroupCountByPrechecksStatus((List<GroupCount>)fieldSpecObj);
        }
        public static string GetGroupCountByPrechecksStatus(List<GroupCount> fieldSpec)
        {
            return GetGroupCountByPrechecksStatus_TypedFieldSpec(fieldSpec);
        }
        public static string GetGroupCountByPrechecksStatus(object fieldSpecObj)
        {
            return GetGroupCountByPrechecksStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetGroupCountByPrechecksStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GroupCount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GroupCount>? GetGroupCountByUpgradeJobStatus
        // GraphQL -> getGroupCountByUpgradeJobStatus: [GroupCount!]! (type)
        public static string GetGroupCountByUpgradeJobStatus_TypedFieldSpec(List<GroupCount> fieldSpec)
        {
            string args = "";
            return "getGroupCountByUpgradeJobStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetGroupCountByUpgradeJobStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetGroupCountByUpgradeJobStatus((List<GroupCount>)fieldSpecObj);
        }
        public static string GetGroupCountByUpgradeJobStatus(List<GroupCount> fieldSpec)
        {
            return GetGroupCountByUpgradeJobStatus_TypedFieldSpec(fieldSpec);
        }
        public static string GetGroupCountByUpgradeJobStatus(object fieldSpecObj)
        {
            return GetGroupCountByUpgradeJobStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetGroupCountByUpgradeJobStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GroupCount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<GroupCount>? GetGroupCountByVersionStatus
        // GraphQL -> getGroupCountByVersionStatus: [GroupCount!]! (type)
        public static string GetGroupCountByVersionStatus_TypedFieldSpec(List<GroupCount> fieldSpec)
        {
            string args = "";
            return "getGroupCountByVersionStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetGroupCountByVersionStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetGroupCountByVersionStatus((List<GroupCount>)fieldSpecObj);
        }
        public static string GetGroupCountByVersionStatus(List<GroupCount> fieldSpec)
        {
            return GetGroupCountByVersionStatus_TypedFieldSpec(fieldSpec);
        }
        public static string GetGroupCountByVersionStatus(object fieldSpecObj)
        {
            return GetGroupCountByVersionStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetGroupCountByVersionStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<GroupCount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetTaskchainStatusReply? GetKorgTaskchainStatus
        // GraphQL -> getKorgTaskchainStatus: GetTaskchainStatusReply! (type)
        public static string GetKorgTaskchainStatus_TypedFieldSpec(GetTaskchainStatusReply fieldSpec)
        {
            string args = "\n(\ntaskchainId: $taskchainId\n)";
            return "getKorgTaskchainStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetKorgTaskchainStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetKorgTaskchainStatus((GetTaskchainStatusReply)fieldSpecObj);
        }
        public static string GetKorgTaskchainStatus(GetTaskchainStatusReply fieldSpec)
        {
            return GetKorgTaskchainStatus_TypedFieldSpec(fieldSpec);
        }
        public static string GetKorgTaskchainStatus(object fieldSpecObj)
        {
            return GetKorgTaskchainStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetKorgTaskchainStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetTaskchainStatusReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<Permission>? GetPermissions
        // GraphQL -> getPermissions: [Permission!]! (type)
        public static string GetPermissions_TypedFieldSpec(List<Permission> fieldSpec)
        {
            string args = "\n(\nroleId: $roleId\n)";
            return "getPermissions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetPermissions_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetPermissions((List<Permission>)fieldSpecObj);
        }
        public static string GetPermissions(List<Permission> fieldSpec)
        {
            return GetPermissions_TypedFieldSpec(fieldSpec);
        }
        public static string GetPermissions(object fieldSpecObj)
        {
            return GetPermissions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetPermissionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<Permission>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<Role>? GetRolesByIds
        // GraphQL -> getRolesByIds: [Role!]! (type)
        public static string GetRolesByIds_TypedFieldSpec(List<Role> fieldSpec)
        {
            string args = "\n(\nroleIds: $roleIds\n)";
            return "getRolesByIds" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetRolesByIds_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetRolesByIds((List<Role>)fieldSpecObj);
        }
        public static string GetRolesByIds(List<Role> fieldSpec)
        {
            return GetRolesByIds_TypedFieldSpec(fieldSpec);
        }
        public static string GetRolesByIds(object fieldSpecObj)
        {
            return GetRolesByIds_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetRolesByIdsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<Role>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<UserDownload>? GetUserDownloads
        // GraphQL -> getUserDownloads: [UserDownload!]! (type)
        public static string GetUserDownloads_TypedFieldSpec(List<UserDownload> fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "getUserDownloads" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GetUserDownloads_ObjectFieldSpec(object fieldSpecObj)
        {
            return GetUserDownloads((List<UserDownload>)fieldSpecObj);
        }
        public static string GetUserDownloads(List<UserDownload> fieldSpec)
        {
            return GetUserDownloads_TypedFieldSpec(fieldSpec);
        }
        public static string GetUserDownloads(object fieldSpecObj)
        {
            return GetUserDownloads_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GetUserDownloadsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<UserDownload>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GlobalCertificate? GlobalCertificate
        // GraphQL -> globalCertificate: GlobalCertificate! (type)
        public static string GlobalCertificate_TypedFieldSpec(GlobalCertificate fieldSpec)
        {
            string args = "\n(\ncertificateId: $certificateId\n)";
            return "globalCertificate" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GlobalCertificate_ObjectFieldSpec(object fieldSpecObj)
        {
            return GlobalCertificate((GlobalCertificate)fieldSpecObj);
        }
        public static string GlobalCertificate(GlobalCertificate fieldSpec)
        {
            return GlobalCertificate_TypedFieldSpec(fieldSpec);
        }
        public static string GlobalCertificate(object fieldSpecObj)
        {
            return GlobalCertificate_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GlobalCertificateFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GlobalCertificate() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GlobalCertificateConnection? GlobalCertificates
        // GraphQL -> globalCertificates: GlobalCertificateConnection! (type)
        public static string GlobalCertificates_TypedFieldSpec(GlobalCertificateConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\ninput: $input\n)";
            return "globalCertificates" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GlobalCertificates_ObjectFieldSpec(object fieldSpecObj)
        {
            return GlobalCertificates((GlobalCertificateConnection)fieldSpecObj);
        }
        public static string GlobalCertificates(GlobalCertificateConnection fieldSpec)
        {
            return GlobalCertificates_TypedFieldSpec(fieldSpec);
        }
        public static string GlobalCertificates(object fieldSpecObj)
        {
            return GlobalCertificates_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GlobalCertificatesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GlobalCertificateConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GlobalFileSearchReply? GlobalFileSearch
        // GraphQL -> globalFileSearch: GlobalFileSearchReply! (type)
        public static string GlobalFileSearch_TypedFieldSpec(GlobalFileSearchReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "globalFileSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GlobalFileSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return GlobalFileSearch((GlobalFileSearchReply)fieldSpecObj);
        }
        public static string GlobalFileSearch(GlobalFileSearchReply fieldSpec)
        {
            return GlobalFileSearch_TypedFieldSpec(fieldSpec);
        }
        public static string GlobalFileSearch(object fieldSpecObj)
        {
            return GlobalFileSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GlobalFileSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GlobalFileSearchReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LockoutConfig? GlobalLockoutConfig
        // GraphQL -> globalLockoutConfig: LockoutConfig! (type)
        public static string GlobalLockoutConfig_TypedFieldSpec(LockoutConfig fieldSpec)
        {
            string args = "";
            return "globalLockoutConfig" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GlobalLockoutConfig_ObjectFieldSpec(object fieldSpecObj)
        {
            return GlobalLockoutConfig((LockoutConfig)fieldSpecObj);
        }
        public static string GlobalLockoutConfig(LockoutConfig fieldSpec)
        {
            return GlobalLockoutConfig_TypedFieldSpec(fieldSpec);
        }
        public static string GlobalLockoutConfig(object fieldSpecObj)
        {
            return GlobalLockoutConfig_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GlobalLockoutConfigFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LockoutConfig() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetMfaSettingReply? GlobalMfaSetting
        // GraphQL -> globalMfaSetting: GetMfaSettingReply! (type)
        public static string GlobalMfaSetting_TypedFieldSpec(GetMfaSettingReply fieldSpec)
        {
            string args = "";
            return "globalMfaSetting" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GlobalMfaSetting_ObjectFieldSpec(object fieldSpecObj)
        {
            return GlobalMfaSetting((GetMfaSettingReply)fieldSpecObj);
        }
        public static string GlobalMfaSetting(GetMfaSettingReply fieldSpec)
        {
            return GlobalMfaSetting_TypedFieldSpec(fieldSpec);
        }
        public static string GlobalMfaSetting(object fieldSpecObj)
        {
            return GlobalMfaSetting_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GlobalMfaSettingFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetMfaSettingReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HierarchyObjectConnection? GlobalSearchResults
        // GraphQL -> globalSearchResults: HierarchyObjectConnection! (type)
        public static string GlobalSearchResults_TypedFieldSpec(HierarchyObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "globalSearchResults" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GlobalSearchResults_ObjectFieldSpec(object fieldSpecObj)
        {
            return GlobalSearchResults((HierarchyObjectConnection)fieldSpecObj);
        }
        public static string GlobalSearchResults(HierarchyObjectConnection fieldSpec)
        {
            return GlobalSearchResults_TypedFieldSpec(fieldSpec);
        }
        public static string GlobalSearchResults(object fieldSpecObj)
        {
            return GlobalSearchResults_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GlobalSearchResultsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HierarchyObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GlobalSlaForFilterConnection? GlobalSlaFilterConnection
        // GraphQL -> globalSlaFilterConnection: GlobalSlaForFilterConnection! (type)
        public static string GlobalSlaFilterConnection_TypedFieldSpec(GlobalSlaForFilterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\ncontextFilter: $contextFilter\ncontextFilterInput: $contextFilterInput\nshouldShowSyncStatus: $shouldShowSyncStatus\nshouldShowProtectedObjectCount: $shouldShowProtectedObjectCount\nshouldShowUpgradeInfo: $shouldShowUpgradeInfo\nshowRemoteSlas: $showRemoteSlas\nshouldShowPausedClusters: $shouldShowPausedClusters\n)";
            return "globalSlaFilterConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GlobalSlaFilterConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return GlobalSlaFilterConnection((GlobalSlaForFilterConnection)fieldSpecObj);
        }
        public static string GlobalSlaFilterConnection(GlobalSlaForFilterConnection fieldSpec)
        {
            return GlobalSlaFilterConnection_TypedFieldSpec(fieldSpec);
        }
        public static string GlobalSlaFilterConnection(object fieldSpecObj)
        {
            return GlobalSlaFilterConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GlobalSlaFilterConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GlobalSlaForFilterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GlobalSlaStatusConnection? GlobalSlaStatuses
        // GraphQL -> globalSlaStatuses: GlobalSlaStatusConnection! (type)
        public static string GlobalSlaStatuses_TypedFieldSpec(GlobalSlaStatusConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\nSlaId: $SlaId\n)";
            return "globalSlaStatuses" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GlobalSlaStatuses_ObjectFieldSpec(object fieldSpecObj)
        {
            return GlobalSlaStatuses((GlobalSlaStatusConnection)fieldSpecObj);
        }
        public static string GlobalSlaStatuses(GlobalSlaStatusConnection fieldSpec)
        {
            return GlobalSlaStatuses_TypedFieldSpec(fieldSpec);
        }
        public static string GlobalSlaStatuses(object fieldSpecObj)
        {
            return GlobalSlaStatuses_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GlobalSlaStatusesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GlobalSlaStatusConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GroupConnection? GroupsInCurrentAndDescendantOrganization
        // GraphQL -> groupsInCurrentAndDescendantOrganization: GroupConnection! (type)
        public static string GroupsInCurrentAndDescendantOrganization_TypedFieldSpec(GroupConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\nsortBy: $sortBy\nshouldIncludeGroupsWithoutRole: $shouldIncludeGroupsWithoutRole\n)";
            return "groupsInCurrentAndDescendantOrganization" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GroupsInCurrentAndDescendantOrganization_ObjectFieldSpec(object fieldSpecObj)
        {
            return GroupsInCurrentAndDescendantOrganization((GroupConnection)fieldSpecObj);
        }
        public static string GroupsInCurrentAndDescendantOrganization(GroupConnection fieldSpec)
        {
            return GroupsInCurrentAndDescendantOrganization_TypedFieldSpec(fieldSpec);
        }
        public static string GroupsInCurrentAndDescendantOrganization(object fieldSpecObj)
        {
            return GroupsInCurrentAndDescendantOrganization_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GroupsInCurrentAndDescendantOrganizationFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GroupConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GuestCredentialDetailListResponse? GuestCredentials
        // GraphQL -> guestCredentials: GuestCredentialDetailListResponse! (type)
        public static string GuestCredentials_TypedFieldSpec(GuestCredentialDetailListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "guestCredentials" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GuestCredentials_ObjectFieldSpec(object fieldSpecObj)
        {
            return GuestCredentials((GuestCredentialDetailListResponse)fieldSpecObj);
        }
        public static string GuestCredentials(GuestCredentialDetailListResponse fieldSpec)
        {
            return GuestCredentials_TypedFieldSpec(fieldSpec);
        }
        public static string GuestCredentials(object fieldSpecObj)
        {
            return GuestCredentials_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GuestCredentialsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GuestCredentialDetailListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GuestOsCredentialConnection? GuestCredentialsV2
        // GraphQL -> guestCredentialsV2: GuestOsCredentialConnection! (type)
        public static string GuestCredentialsV2_TypedFieldSpec(GuestOsCredentialConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilter: $filter\nsortBy: $sortBy\n)";
            return "guestCredentialsV2" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string GuestCredentialsV2_ObjectFieldSpec(object fieldSpecObj)
        {
            return GuestCredentialsV2((GuestOsCredentialConnection)fieldSpecObj);
        }
        public static string GuestCredentialsV2(GuestOsCredentialConnection fieldSpec)
        {
            return GuestCredentialsV2_TypedFieldSpec(fieldSpec);
        }
        public static string GuestCredentialsV2(object fieldSpecObj)
        {
            return GuestCredentialsV2_ObjectFieldSpec(fieldSpecObj);
        }
        public static object GuestCredentialsV2FieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GuestOsCredentialConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HasRelicAzureAdSnapshotReplyType? HasRelicAzureAdSnapshot
        // GraphQL -> hasRelicAzureAdSnapshot: HasRelicAzureAdSnapshotReplyType! (type)
        public static string HasRelicAzureAdSnapshot_TypedFieldSpec(HasRelicAzureAdSnapshotReplyType fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "hasRelicAzureAdSnapshot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HasRelicAzureAdSnapshot_ObjectFieldSpec(object fieldSpecObj)
        {
            return HasRelicAzureAdSnapshot((HasRelicAzureAdSnapshotReplyType)fieldSpecObj);
        }
        public static string HasRelicAzureAdSnapshot(HasRelicAzureAdSnapshotReplyType fieldSpec)
        {
            return HasRelicAzureAdSnapshot_TypedFieldSpec(fieldSpec);
        }
        public static string HasRelicAzureAdSnapshot(object fieldSpecObj)
        {
            return HasRelicAzureAdSnapshot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HasRelicAzureAdSnapshotFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HasRelicAzureAdSnapshotReplyType() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HelpContentSnippetConnection? HelpContentSnippets
        // GraphQL -> helpContentSnippets: HelpContentSnippetConnection! (type)
        public static string HelpContentSnippets_TypedFieldSpec(HelpContentSnippetConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\n)";
            return "helpContentSnippets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HelpContentSnippets_ObjectFieldSpec(object fieldSpecObj)
        {
            return HelpContentSnippets((HelpContentSnippetConnection)fieldSpecObj);
        }
        public static string HelpContentSnippets(HelpContentSnippetConnection fieldSpec)
        {
            return HelpContentSnippets_TypedFieldSpec(fieldSpec);
        }
        public static string HelpContentSnippets(object fieldSpecObj)
        {
            return HelpContentSnippets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HelpContentSnippetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HelpContentSnippetConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HierarchySnappableConnection? HierarchySnappables
        // GraphQL -> hierarchySnappables: HierarchySnappableConnection! (type)
        public static string HierarchySnappables_TypedFieldSpec(HierarchySnappableConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "hierarchySnappables" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HierarchySnappables_ObjectFieldSpec(object fieldSpecObj)
        {
            return HierarchySnappables((HierarchySnappableConnection)fieldSpecObj);
        }
        public static string HierarchySnappables(HierarchySnappableConnection fieldSpec)
        {
            return HierarchySnappables_TypedFieldSpec(fieldSpec);
        }
        public static string HierarchySnappables(object fieldSpecObj)
        {
            return HierarchySnappables_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HierarchySnappablesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HierarchySnappableConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HostDiagnosisSummary? HostDiagnosis
        // GraphQL -> hostDiagnosis: HostDiagnosisSummary! (type)
        public static string HostDiagnosis_TypedFieldSpec(HostDiagnosisSummary fieldSpec)
        {
            string args = "\n(\nid: $id\n)";
            return "hostDiagnosis" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HostDiagnosis_ObjectFieldSpec(object fieldSpecObj)
        {
            return HostDiagnosis((HostDiagnosisSummary)fieldSpecObj);
        }
        public static string HostDiagnosis(HostDiagnosisSummary fieldSpec)
        {
            return HostDiagnosis_TypedFieldSpec(fieldSpec);
        }
        public static string HostDiagnosis(object fieldSpecObj)
        {
            return HostDiagnosis_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HostDiagnosisFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HostDiagnosisSummary() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HostFailoverCluster? HostFailoverCluster
        // GraphQL -> hostFailoverCluster: HostFailoverCluster! (type)
        public static string HostFailoverCluster_TypedFieldSpec(HostFailoverCluster fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "hostFailoverCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HostFailoverCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return HostFailoverCluster((HostFailoverCluster)fieldSpecObj);
        }
        public static string HostFailoverCluster(HostFailoverCluster fieldSpec)
        {
            return HostFailoverCluster_TypedFieldSpec(fieldSpec);
        }
        public static string HostFailoverCluster(object fieldSpecObj)
        {
            return HostFailoverCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HostFailoverClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HostFailoverCluster() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HostFailoverClusterConnection? HostFailoverClusters
        // GraphQL -> hostFailoverClusters: HostFailoverClusterConnection! (type)
        public static string HostFailoverClusters_TypedFieldSpec(HostFailoverClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nhostFailoverClusterRoot: $hostFailoverClusterRoot\n)";
            return "hostFailoverClusters" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HostFailoverClusters_ObjectFieldSpec(object fieldSpecObj)
        {
            return HostFailoverClusters((HostFailoverClusterConnection)fieldSpecObj);
        }
        public static string HostFailoverClusters(HostFailoverClusterConnection fieldSpec)
        {
            return HostFailoverClusters_TypedFieldSpec(fieldSpec);
        }
        public static string HostFailoverClusters(object fieldSpecObj)
        {
            return HostFailoverClusters_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HostFailoverClustersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HostFailoverClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HostShare? HostShare
        // GraphQL -> hostShare: HostShare! (type)
        public static string HostShare_TypedFieldSpec(HostShare fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "hostShare" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HostShare_ObjectFieldSpec(object fieldSpecObj)
        {
            return HostShare((HostShare)fieldSpecObj);
        }
        public static string HostShare(HostShare fieldSpec)
        {
            return HostShare_TypedFieldSpec(fieldSpec);
        }
        public static string HostShare(object fieldSpecObj)
        {
            return HostShare_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HostShareFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HostShare() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HostShareConnection? HostShares
        // GraphQL -> hostShares: HostShareConnection! (type)
        public static string HostShares_TypedFieldSpec(HostShareConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "hostShares" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HostShares_ObjectFieldSpec(object fieldSpecObj)
        {
            return HostShares((HostShareConnection)fieldSpecObj);
        }
        public static string HostShares(HostShareConnection fieldSpec)
        {
            return HostShares_TypedFieldSpec(fieldSpec);
        }
        public static string HostShares(object fieldSpecObj)
        {
            return HostShares_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HostSharesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HostShareConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HyperVcluster? HypervCluster
        // GraphQL -> hypervCluster: HyperVCluster! (type)
        public static string HypervCluster_TypedFieldSpec(HyperVcluster fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "hypervCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervCluster((HyperVcluster)fieldSpecObj);
        }
        public static string HypervCluster(HyperVcluster fieldSpec)
        {
            return HypervCluster_TypedFieldSpec(fieldSpec);
        }
        public static string HypervCluster(object fieldSpecObj)
        {
            return HypervCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HyperVcluster() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? HypervHostAsyncRequestStatus
        // GraphQL -> hypervHostAsyncRequestStatus: AsyncRequestStatus! (type)
        public static string HypervHostAsyncRequestStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "hypervHostAsyncRequestStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervHostAsyncRequestStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervHostAsyncRequestStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string HypervHostAsyncRequestStatus(AsyncRequestStatus fieldSpec)
        {
            return HypervHostAsyncRequestStatus_TypedFieldSpec(fieldSpec);
        }
        public static string HypervHostAsyncRequestStatus(object fieldSpecObj)
        {
            return HypervHostAsyncRequestStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervHostAsyncRequestStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HyperVliveMountConnection? HypervMounts
        // GraphQL -> hypervMounts: HyperVLiveMountConnection! (type)
        public static string HypervMounts_TypedFieldSpec(HyperVliveMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilters: $filters\nsortBy: $sortBy\n)";
            return "hypervMounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervMounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervMounts((HyperVliveMountConnection)fieldSpecObj);
        }
        public static string HypervMounts(HyperVliveMountConnection fieldSpec)
        {
            return HypervMounts_TypedFieldSpec(fieldSpec);
        }
        public static string HypervMounts(object fieldSpecObj)
        {
            return HypervMounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervMountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HyperVliveMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HyperVscvmm? HypervScvmm
        // GraphQL -> hypervScvmm: HyperVSCVMM! (type)
        public static string HypervScvmm_TypedFieldSpec(HyperVscvmm fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "hypervScvmm" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervScvmm_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervScvmm((HyperVscvmm)fieldSpecObj);
        }
        public static string HypervScvmm(HyperVscvmm fieldSpec)
        {
            return HypervScvmm_TypedFieldSpec(fieldSpec);
        }
        public static string HypervScvmm(object fieldSpecObj)
        {
            return HypervScvmm_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervScvmmFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HyperVscvmm() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? HypervScvmmAsyncRequestStatus
        // GraphQL -> hypervScvmmAsyncRequestStatus: AsyncRequestStatus! (type)
        public static string HypervScvmmAsyncRequestStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "hypervScvmmAsyncRequestStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervScvmmAsyncRequestStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervScvmmAsyncRequestStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string HypervScvmmAsyncRequestStatus(AsyncRequestStatus fieldSpec)
        {
            return HypervScvmmAsyncRequestStatus_TypedFieldSpec(fieldSpec);
        }
        public static string HypervScvmmAsyncRequestStatus(object fieldSpecObj)
        {
            return HypervScvmmAsyncRequestStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervScvmmAsyncRequestStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HyperVscvmmConnection? HypervScvmms
        // GraphQL -> hypervScvmms: HyperVSCVMMConnection! (type)
        public static string HypervScvmms_TypedFieldSpec(HyperVscvmmConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "hypervScvmms" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervScvmms_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervScvmms((HyperVscvmmConnection)fieldSpecObj);
        }
        public static string HypervScvmms(HyperVscvmmConnection fieldSpec)
        {
            return HypervScvmms_TypedFieldSpec(fieldSpec);
        }
        public static string HypervScvmms(object fieldSpecObj)
        {
            return HypervScvmms_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervScvmmsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HyperVscvmmConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HypervServer? HypervServer
        // GraphQL -> hypervServer: HypervServer! (type)
        public static string HypervServer_TypedFieldSpec(HypervServer fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "hypervServer" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervServer_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervServer((HypervServer)fieldSpecObj);
        }
        public static string HypervServer(HypervServer fieldSpec)
        {
            return HypervServer_TypedFieldSpec(fieldSpec);
        }
        public static string HypervServer(object fieldSpecObj)
        {
            return HypervServer_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervServerFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HypervServer() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HypervHostSummaryListResponse? HypervServers
        // GraphQL -> hypervServers: HypervHostSummaryListResponse! (type)
        public static string HypervServers_TypedFieldSpec(HypervHostSummaryListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "hypervServers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervServers_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervServers((HypervHostSummaryListResponse)fieldSpecObj);
        }
        public static string HypervServers(HypervHostSummaryListResponse fieldSpec)
        {
            return HypervServers_TypedFieldSpec(fieldSpec);
        }
        public static string HypervServers(object fieldSpecObj)
        {
            return HypervServers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervServersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HypervHostSummaryListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HypervServerConnection? HypervServersPaginated
        // GraphQL -> hypervServersPaginated: HypervServerConnection! (type)
        public static string HypervServersPaginated_TypedFieldSpec(HypervServerConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "hypervServersPaginated" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervServersPaginated_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervServersPaginated((HypervServerConnection)fieldSpecObj);
        }
        public static string HypervServersPaginated(HypervServerConnection fieldSpec)
        {
            return HypervServersPaginated_TypedFieldSpec(fieldSpec);
        }
        public static string HypervServersPaginated(object fieldSpecObj)
        {
            return HypervServersPaginated_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervServersPaginatedFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HypervServerConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HypervTopLevelDescendantTypeConnection? HypervTopLevelDescendants
        // GraphQL -> hypervTopLevelDescendants: HypervTopLevelDescendantTypeConnection! (type)
        public static string HypervTopLevelDescendants_TypedFieldSpec(HypervTopLevelDescendantTypeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\ntypeFilter: $typeFilter\nfilter: $filter\n)";
            return "hypervTopLevelDescendants" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervTopLevelDescendants_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervTopLevelDescendants((HypervTopLevelDescendantTypeConnection)fieldSpecObj);
        }
        public static string HypervTopLevelDescendants(HypervTopLevelDescendantTypeConnection fieldSpec)
        {
            return HypervTopLevelDescendants_TypedFieldSpec(fieldSpec);
        }
        public static string HypervTopLevelDescendants(object fieldSpecObj)
        {
            return HypervTopLevelDescendants_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervTopLevelDescendantsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HypervTopLevelDescendantTypeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HyperVvirtualMachine? HypervVirtualMachine
        // GraphQL -> hypervVirtualMachine: HyperVVirtualMachine! (type)
        public static string HypervVirtualMachine_TypedFieldSpec(HyperVvirtualMachine fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "hypervVirtualMachine" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervVirtualMachine_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervVirtualMachine((HyperVvirtualMachine)fieldSpecObj);
        }
        public static string HypervVirtualMachine(HyperVvirtualMachine fieldSpec)
        {
            return HypervVirtualMachine_TypedFieldSpec(fieldSpec);
        }
        public static string HypervVirtualMachine(object fieldSpecObj)
        {
            return HypervVirtualMachine_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervVirtualMachineFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HyperVvirtualMachine() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? HypervVirtualMachineAsyncRequestStatus
        // GraphQL -> hypervVirtualMachineAsyncRequestStatus: AsyncRequestStatus! (type)
        public static string HypervVirtualMachineAsyncRequestStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "hypervVirtualMachineAsyncRequestStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervVirtualMachineAsyncRequestStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervVirtualMachineAsyncRequestStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string HypervVirtualMachineAsyncRequestStatus(AsyncRequestStatus fieldSpec)
        {
            return HypervVirtualMachineAsyncRequestStatus_TypedFieldSpec(fieldSpec);
        }
        public static string HypervVirtualMachineAsyncRequestStatus(object fieldSpecObj)
        {
            return HypervVirtualMachineAsyncRequestStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervVirtualMachineAsyncRequestStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HyperVvirtualMachineConnection? HypervVirtualMachines
        // GraphQL -> hypervVirtualMachines: HyperVVirtualMachineConnection! (type)
        public static string HypervVirtualMachines_TypedFieldSpec(HyperVvirtualMachineConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "hypervVirtualMachines" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervVirtualMachines_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervVirtualMachines((HyperVvirtualMachineConnection)fieldSpecObj);
        }
        public static string HypervVirtualMachines(HyperVvirtualMachineConnection fieldSpec)
        {
            return HypervVirtualMachines_TypedFieldSpec(fieldSpec);
        }
        public static string HypervVirtualMachines(object fieldSpecObj)
        {
            return HypervVirtualMachines_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervVirtualMachinesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HyperVvirtualMachineConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HypervVirtualMachineDetail? HypervVmDetail
        // GraphQL -> hypervVmDetail: HypervVirtualMachineDetail! (type)
        public static string HypervVmDetail_TypedFieldSpec(HypervVirtualMachineDetail fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "hypervVmDetail" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string HypervVmDetail_ObjectFieldSpec(object fieldSpecObj)
        {
            return HypervVmDetail((HypervVirtualMachineDetail)fieldSpecObj);
        }
        public static string HypervVmDetail(HypervVirtualMachineDetail fieldSpec)
        {
            return HypervVmDetail_TypedFieldSpec(fieldSpec);
        }
        public static string HypervVmDetail(object fieldSpecObj)
        {
            return HypervVmDetail_ObjectFieldSpec(fieldSpecObj);
        }
        public static object HypervVmDetailFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HypervVirtualMachineDetail() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<InstalledVersionGroupCount>? InstalledVersionList
        // GraphQL -> installedVersionList: [InstalledVersionGroupCount!]! (type)
        public static string InstalledVersionList_TypedFieldSpec(List<InstalledVersionGroupCount> fieldSpec)
        {
            string args = "";
            return "installedVersionList" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string InstalledVersionList_ObjectFieldSpec(object fieldSpecObj)
        {
            return InstalledVersionList((List<InstalledVersionGroupCount>)fieldSpecObj);
        }
        public static string InstalledVersionList(List<InstalledVersionGroupCount> fieldSpec)
        {
            return InstalledVersionList_TypedFieldSpec(fieldSpec);
        }
        public static string InstalledVersionList(object fieldSpecObj)
        {
            return InstalledVersionList_ObjectFieldSpec(fieldSpecObj);
        }
        public static object InstalledVersionListFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<InstalledVersionGroupCount>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ReadIntegrationReply? Integration
        // GraphQL -> integration: ReadIntegrationReply! (type)
        public static string Integration_TypedFieldSpec(ReadIntegrationReply fieldSpec)
        {
            string args = "\n(\nid: $id\n)";
            return "integration" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Integration_ObjectFieldSpec(object fieldSpecObj)
        {
            return Integration((ReadIntegrationReply)fieldSpecObj);
        }
        public static string Integration(ReadIntegrationReply fieldSpec)
        {
            return Integration_TypedFieldSpec(fieldSpec);
        }
        public static string Integration(object fieldSpecObj)
        {
            return Integration_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IntegrationFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ReadIntegrationReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> InventoryRoot? InventoryRoot
        // GraphQL -> inventoryRoot: InventoryRoot! (type)
        public static string InventoryRoot_TypedFieldSpec(InventoryRoot fieldSpec)
        {
            string args = "";
            return "inventoryRoot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string InventoryRoot_ObjectFieldSpec(object fieldSpecObj)
        {
            return InventoryRoot((InventoryRoot)fieldSpecObj);
        }
        public static string InventoryRoot(InventoryRoot fieldSpec)
        {
            return InventoryRoot_TypedFieldSpec(fieldSpec);
        }
        public static string InventoryRoot(object fieldSpecObj)
        {
            return InventoryRoot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object InventoryRootFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new InventoryRoot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> InventorySubHierarchyRoot? InventorySubHierarchyRoot
        // GraphQL -> inventorySubHierarchyRoot: InventorySubHierarchyRoot! (type)
        public static string InventorySubHierarchyRoot_TypedFieldSpec(InventorySubHierarchyRoot fieldSpec)
        {
            string args = "\n(\nrootEnum: $rootEnum\n)";
            return "inventorySubHierarchyRoot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string InventorySubHierarchyRoot_ObjectFieldSpec(object fieldSpecObj)
        {
            return InventorySubHierarchyRoot((InventorySubHierarchyRoot)fieldSpecObj);
        }
        public static string InventorySubHierarchyRoot(InventorySubHierarchyRoot fieldSpec)
        {
            return InventorySubHierarchyRoot_TypedFieldSpec(fieldSpec);
        }
        public static string InventorySubHierarchyRoot(object fieldSpecObj)
        {
            return InventorySubHierarchyRoot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object InventorySubHierarchyRootFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new InventorySubHierarchyRoot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> InvestigationCsvDownloadLinkReply? InvestigationCsvDownloadLink
        // GraphQL -> investigationCsvDownloadLink: InvestigationCsvDownloadLinkReply! (type)
        public static string InvestigationCsvDownloadLink_TypedFieldSpec(InvestigationCsvDownloadLinkReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nworkloadId: $workloadId\nsnapshotId: $snapshotId\n)";
            return "investigationCsvDownloadLink" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string InvestigationCsvDownloadLink_ObjectFieldSpec(object fieldSpecObj)
        {
            return InvestigationCsvDownloadLink((InvestigationCsvDownloadLinkReply)fieldSpecObj);
        }
        public static string InvestigationCsvDownloadLink(InvestigationCsvDownloadLinkReply fieldSpec)
        {
            return InvestigationCsvDownloadLink_TypedFieldSpec(fieldSpec);
        }
        public static string InvestigationCsvDownloadLink(object fieldSpecObj)
        {
            return InvestigationCsvDownloadLink_ObjectFieldSpec(fieldSpecObj);
        }
        public static object InvestigationCsvDownloadLinkFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new InvestigationCsvDownloadLinkReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetWhitelistReply? IpWhitelist
        // GraphQL -> ipWhitelist: GetWhitelistReply! (type)
        public static string IpWhitelist_TypedFieldSpec(GetWhitelistReply fieldSpec)
        {
            string args = "";
            return "ipWhitelist" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string IpWhitelist_ObjectFieldSpec(object fieldSpecObj)
        {
            return IpWhitelist((GetWhitelistReply)fieldSpecObj);
        }
        public static string IpWhitelist(GetWhitelistReply fieldSpec)
        {
            return IpWhitelist_TypedFieldSpec(fieldSpec);
        }
        public static string IpWhitelist(object fieldSpecObj)
        {
            return IpWhitelist_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IpWhitelistFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetWhitelistReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> IsVolumeSnapshotRestorableReply? IsAwsNativeEbsVolumeSnapshotRestorable
        // GraphQL -> isAwsNativeEbsVolumeSnapshotRestorable: IsVolumeSnapshotRestorableReply! (type)
        public static string IsAwsNativeEbsVolumeSnapshotRestorable_TypedFieldSpec(IsVolumeSnapshotRestorableReply fieldSpec)
        {
            string args = "\n(\nsnapshotId: $snapshotId\n)";
            return "isAwsNativeEbsVolumeSnapshotRestorable" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string IsAwsNativeEbsVolumeSnapshotRestorable_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsAwsNativeEbsVolumeSnapshotRestorable((IsVolumeSnapshotRestorableReply)fieldSpecObj);
        }
        public static string IsAwsNativeEbsVolumeSnapshotRestorable(IsVolumeSnapshotRestorableReply fieldSpec)
        {
            return IsAwsNativeEbsVolumeSnapshotRestorable_TypedFieldSpec(fieldSpec);
        }
        public static string IsAwsNativeEbsVolumeSnapshotRestorable(object fieldSpecObj)
        {
            return IsAwsNativeEbsVolumeSnapshotRestorable_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsAwsNativeEbsVolumeSnapshotRestorableFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new IsVolumeSnapshotRestorableReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidateCloudNativeFileRecoveryFeasibilityReply? IsCloudNativeFileRecoveryFeasible
        // GraphQL -> isCloudNativeFileRecoveryFeasible: ValidateCloudNativeFileRecoveryFeasibilityReply! (type)
        public static string IsCloudNativeFileRecoveryFeasible_TypedFieldSpec(ValidateCloudNativeFileRecoveryFeasibilityReply fieldSpec)
        {
            string args = "\n(\nsnapshotIds: $snapshotIds\n)";
            return "isCloudNativeFileRecoveryFeasible" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string IsCloudNativeFileRecoveryFeasible_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsCloudNativeFileRecoveryFeasible((ValidateCloudNativeFileRecoveryFeasibilityReply)fieldSpecObj);
        }
        public static string IsCloudNativeFileRecoveryFeasible(ValidateCloudNativeFileRecoveryFeasibilityReply fieldSpec)
        {
            return IsCloudNativeFileRecoveryFeasible_TypedFieldSpec(fieldSpec);
        }
        public static string IsCloudNativeFileRecoveryFeasible(object fieldSpecObj)
        {
            return IsCloudNativeFileRecoveryFeasible_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsCloudNativeFileRecoveryFeasibleFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidateCloudNativeFileRecoveryFeasibilityReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SupportPortalStatusReply? IsLoggedIntoRubrikSupportPortal
        // GraphQL -> isLoggedIntoRubrikSupportPortal: SupportPortalStatusReply! (type)
        public static string IsLoggedIntoRubrikSupportPortal_TypedFieldSpec(SupportPortalStatusReply fieldSpec)
        {
            string args = "";
            return "isLoggedIntoRubrikSupportPortal" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string IsLoggedIntoRubrikSupportPortal_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsLoggedIntoRubrikSupportPortal((SupportPortalStatusReply)fieldSpecObj);
        }
        public static string IsLoggedIntoRubrikSupportPortal(SupportPortalStatusReply fieldSpec)
        {
            return IsLoggedIntoRubrikSupportPortal_TypedFieldSpec(fieldSpec);
        }
        public static string IsLoggedIntoRubrikSupportPortal(object fieldSpecObj)
        {
            return IsLoggedIntoRubrikSupportPortal_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsLoggedIntoRubrikSupportPortalFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SupportPortalStatusReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmUpgradeAvailabilityReply? IsUpgradeAvailable
        // GraphQL -> isUpgradeAvailable: CdmUpgradeAvailabilityReply! (type)
        public static string IsUpgradeAvailable_TypedFieldSpec(CdmUpgradeAvailabilityReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "isUpgradeAvailable" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string IsUpgradeAvailable_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsUpgradeAvailable((CdmUpgradeAvailabilityReply)fieldSpecObj);
        }
        public static string IsUpgradeAvailable(CdmUpgradeAvailabilityReply fieldSpec)
        {
            return IsUpgradeAvailable_TypedFieldSpec(fieldSpec);
        }
        public static string IsUpgradeAvailable(object fieldSpecObj)
        {
            return IsUpgradeAvailable_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsUpgradeAvailableFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmUpgradeAvailabilityReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmUpgradeRecommendationReply? IsUpgradeRecommended
        // GraphQL -> isUpgradeRecommended: CdmUpgradeRecommendationReply! (type)
        public static string IsUpgradeRecommended_TypedFieldSpec(CdmUpgradeRecommendationReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "isUpgradeRecommended" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string IsUpgradeRecommended_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsUpgradeRecommended((CdmUpgradeRecommendationReply)fieldSpecObj);
        }
        public static string IsUpgradeRecommended(CdmUpgradeRecommendationReply fieldSpec)
        {
            return IsUpgradeRecommended_TypedFieldSpec(fieldSpec);
        }
        public static string IsUpgradeRecommended(object fieldSpecObj)
        {
            return IsUpgradeRecommended_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsUpgradeRecommendedFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmUpgradeRecommendationReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ZrsAvailabilityReply? IsZrsAvailableForLocation
        // GraphQL -> isZrsAvailableForLocation: ZrsAvailabilityReply! (type)
        public static string IsZrsAvailableForLocation_TypedFieldSpec(ZrsAvailabilityReply fieldSpec)
        {
            string args = "\n(\nserviceTier: $serviceTier\nregion: $region\nsubscriptionId: $subscriptionId\n)";
            return "isZrsAvailableForLocation" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string IsZrsAvailableForLocation_ObjectFieldSpec(object fieldSpecObj)
        {
            return IsZrsAvailableForLocation((ZrsAvailabilityReply)fieldSpecObj);
        }
        public static string IsZrsAvailableForLocation(ZrsAvailabilityReply fieldSpec)
        {
            return IsZrsAvailableForLocation_TypedFieldSpec(fieldSpec);
        }
        public static string IsZrsAvailableForLocation(object fieldSpecObj)
        {
            return IsZrsAvailableForLocation_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IsZrsAvailableForLocationFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ZrsAvailabilityReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Issue? Issue
        // GraphQL -> issue: Issue! (type)
        public static string Issue_TypedFieldSpec(Issue fieldSpec)
        {
            string args = "\n(\nissueId: $issueId\n)";
            return "issue" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Issue_ObjectFieldSpec(object fieldSpecObj)
        {
            return Issue((Issue)fieldSpecObj);
        }
        public static string Issue(Issue fieldSpec)
        {
            return Issue_TypedFieldSpec(fieldSpec);
        }
        public static string Issue(object fieldSpecObj)
        {
            return Issue_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IssueFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Issue() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> IssueConnection? Issues
        // GraphQL -> issues: IssueConnection! (type)
        public static string Issues_TypedFieldSpec(IssueConnection fieldSpec)
        {
            string args = "\n(\nstatus: $status\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "issues" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Issues_ObjectFieldSpec(object fieldSpecObj)
        {
            return Issues((IssueConnection)fieldSpecObj);
        }
        public static string Issues(IssueConnection fieldSpec)
        {
            return Issues_TypedFieldSpec(fieldSpec);
        }
        public static string Issues(object fieldSpecObj)
        {
            return Issues_ObjectFieldSpec(fieldSpecObj);
        }
        public static object IssuesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new IssueConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> K8sAppManifest? K8sAppManifest
        // GraphQL -> k8sAppManifest: K8sAppManifest! (type)
        public static string K8sAppManifest_TypedFieldSpec(K8sAppManifest fieldSpec)
        {
            string args = "\n(\napp: $app\nversion: $version\nretrieveLatestVersion: $retrieveLatestVersion\ntargetVersion: $targetVersion\nk8sClusterId: $k8sClusterId\n)";
            return "k8sAppManifest" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string K8sAppManifest_ObjectFieldSpec(object fieldSpecObj)
        {
            return K8sAppManifest((K8sAppManifest)fieldSpecObj);
        }
        public static string K8sAppManifest(K8sAppManifest fieldSpec)
        {
            return K8sAppManifest_TypedFieldSpec(fieldSpec);
        }
        public static string K8sAppManifest(object fieldSpecObj)
        {
            return K8sAppManifest_ObjectFieldSpec(fieldSpecObj);
        }
        public static object K8sAppManifestFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new K8sAppManifest() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> K8sCluster? K8sCluster
        // GraphQL -> k8sCluster: K8sCluster! (type)
        public static string K8sCluster_TypedFieldSpec(K8sCluster fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "k8sCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string K8sCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return K8sCluster((K8sCluster)fieldSpecObj);
        }
        public static string K8sCluster(K8sCluster fieldSpec)
        {
            return K8sCluster_TypedFieldSpec(fieldSpec);
        }
        public static string K8sCluster(object fieldSpecObj)
        {
            return K8sCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object K8sClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new K8sCluster() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> K8sClusterConnection? K8sClusters
        // GraphQL -> k8sClusters: K8sClusterConnection! (type)
        public static string K8sClusters_TypedFieldSpec(K8sClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "k8sClusters" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string K8sClusters_ObjectFieldSpec(object fieldSpecObj)
        {
            return K8sClusters((K8sClusterConnection)fieldSpecObj);
        }
        public static string K8sClusters(K8sClusterConnection fieldSpec)
        {
            return K8sClusters_TypedFieldSpec(fieldSpec);
        }
        public static string K8sClusters(object fieldSpecObj)
        {
            return K8sClusters_ObjectFieldSpec(fieldSpecObj);
        }
        public static object K8sClustersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new K8sClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> K8sNamespace? K8sNamespace
        // GraphQL -> k8sNamespace: K8sNamespace! (type)
        public static string K8sNamespace_TypedFieldSpec(K8sNamespace fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "k8sNamespace" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string K8sNamespace_ObjectFieldSpec(object fieldSpecObj)
        {
            return K8sNamespace((K8sNamespace)fieldSpecObj);
        }
        public static string K8sNamespace(K8sNamespace fieldSpec)
        {
            return K8sNamespace_TypedFieldSpec(fieldSpec);
        }
        public static string K8sNamespace(object fieldSpecObj)
        {
            return K8sNamespace_ObjectFieldSpec(fieldSpecObj);
        }
        public static object K8sNamespaceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new K8sNamespace() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> K8sNamespaceConnection? K8sNamespaces
        // GraphQL -> k8sNamespaces: K8sNamespaceConnection! (type)
        public static string K8sNamespaces_TypedFieldSpec(K8sNamespaceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nk8sClusterId: $k8sClusterId\n)";
            return "k8sNamespaces" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string K8sNamespaces_ObjectFieldSpec(object fieldSpecObj)
        {
            return K8sNamespaces((K8sNamespaceConnection)fieldSpecObj);
        }
        public static string K8sNamespaces(K8sNamespaceConnection fieldSpec)
        {
            return K8sNamespaces_TypedFieldSpec(fieldSpec);
        }
        public static string K8sNamespaces(object fieldSpecObj)
        {
            return K8sNamespaces_ObjectFieldSpec(fieldSpecObj);
        }
        public static object K8sNamespacesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new K8sNamespaceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> K8sSnapshotInfo? K8sSnapshotInfo
        // GraphQL -> k8sSnapshotInfo: K8sSnapshotInfo! (type)
        public static string K8sSnapshotInfo_TypedFieldSpec(K8sSnapshotInfo fieldSpec)
        {
            string args = "\n(\nsnapshotId: $snapshotId\nnamespaceId: $namespaceId\nisReplica: $isReplica\n)";
            return "k8sSnapshotInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string K8sSnapshotInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return K8sSnapshotInfo((K8sSnapshotInfo)fieldSpecObj);
        }
        public static string K8sSnapshotInfo(K8sSnapshotInfo fieldSpec)
        {
            return K8sSnapshotInfo_TypedFieldSpec(fieldSpec);
        }
        public static string K8sSnapshotInfo(object fieldSpecObj)
        {
            return K8sSnapshotInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object K8sSnapshotInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new K8sSnapshotInfo() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> KnowledgeBaseArticle? KnowledgeBaseArticle
        // GraphQL -> knowledgeBaseArticle: KnowledgeBaseArticle! (type)
        public static string KnowledgeBaseArticle_TypedFieldSpec(KnowledgeBaseArticle fieldSpec)
        {
            string args = "\n(\nid: $id\n)";
            return "knowledgeBaseArticle" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string KnowledgeBaseArticle_ObjectFieldSpec(object fieldSpecObj)
        {
            return KnowledgeBaseArticle((KnowledgeBaseArticle)fieldSpecObj);
        }
        public static string KnowledgeBaseArticle(KnowledgeBaseArticle fieldSpec)
        {
            return KnowledgeBaseArticle_TypedFieldSpec(fieldSpec);
        }
        public static string KnowledgeBaseArticle(object fieldSpecObj)
        {
            return KnowledgeBaseArticle_ObjectFieldSpec(fieldSpecObj);
        }
        public static object KnowledgeBaseArticleFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new KnowledgeBaseArticle() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LambdaSettings? LambdaSettings
        // GraphQL -> lambdaSettings: LambdaSettings! (type)
        public static string LambdaSettings_TypedFieldSpec(LambdaSettings fieldSpec)
        {
            string args = "";
            return "lambdaSettings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LambdaSettings_ObjectFieldSpec(object fieldSpecObj)
        {
            return LambdaSettings((LambdaSettings)fieldSpecObj);
        }
        public static string LambdaSettings(LambdaSettings fieldSpec)
        {
            return LambdaSettings_TypedFieldSpec(fieldSpec);
        }
        public static string LambdaSettings(object fieldSpecObj)
        {
            return LambdaSettings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LambdaSettingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LambdaSettings() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AuthorizedPrincipalConnection? LdapAuthorizedPrincipalConnection
        // GraphQL -> ldapAuthorizedPrincipalConnection: AuthorizedPrincipalConnection! (type)
        public static string LdapAuthorizedPrincipalConnection_TypedFieldSpec(AuthorizedPrincipalConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nsearchText: $searchText\nroleIds: $roleIds\n)";
            return "ldapAuthorizedPrincipalConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LdapAuthorizedPrincipalConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return LdapAuthorizedPrincipalConnection((AuthorizedPrincipalConnection)fieldSpecObj);
        }
        public static string LdapAuthorizedPrincipalConnection(AuthorizedPrincipalConnection fieldSpec)
        {
            return LdapAuthorizedPrincipalConnection_TypedFieldSpec(fieldSpec);
        }
        public static string LdapAuthorizedPrincipalConnection(object fieldSpecObj)
        {
            return LdapAuthorizedPrincipalConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LdapAuthorizedPrincipalConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AuthorizedPrincipalConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LdapIntegrationConnection? LdapIntegrationConnection
        // GraphQL -> ldapIntegrationConnection: LdapIntegrationConnection! (type)
        public static string LdapIntegrationConnection_TypedFieldSpec(LdapIntegrationConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\n)";
            return "ldapIntegrationConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LdapIntegrationConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return LdapIntegrationConnection((LdapIntegrationConnection)fieldSpecObj);
        }
        public static string LdapIntegrationConnection(LdapIntegrationConnection fieldSpec)
        {
            return LdapIntegrationConnection_TypedFieldSpec(fieldSpec);
        }
        public static string LdapIntegrationConnection(object fieldSpecObj)
        {
            return LdapIntegrationConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LdapIntegrationConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LdapIntegrationConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PrincipalConnection? LdapPrincipalConnection
        // GraphQL -> ldapPrincipalConnection: PrincipalConnection! (type)
        public static string LdapPrincipalConnection_TypedFieldSpec(PrincipalConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nid: $id\nsearchText: $searchText\n)";
            return "ldapPrincipalConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LdapPrincipalConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return LdapPrincipalConnection((PrincipalConnection)fieldSpecObj);
        }
        public static string LdapPrincipalConnection(PrincipalConnection fieldSpec)
        {
            return LdapPrincipalConnection_TypedFieldSpec(fieldSpec);
        }
        public static string LdapPrincipalConnection(object fieldSpecObj)
        {
            return LdapPrincipalConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LdapPrincipalConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PrincipalConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LegalHoldSnapshotDetailConnection? LegalHoldSnapshotsForSnappable
        // GraphQL -> legalHoldSnapshotsForSnappable: LegalHoldSnapshotDetailConnection! (type)
        public static string LegalHoldSnapshotsForSnappable_TypedFieldSpec(LegalHoldSnapshotDetailConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ninput: $input\n)";
            return "legalHoldSnapshotsForSnappable" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LegalHoldSnapshotsForSnappable_ObjectFieldSpec(object fieldSpecObj)
        {
            return LegalHoldSnapshotsForSnappable((LegalHoldSnapshotDetailConnection)fieldSpecObj);
        }
        public static string LegalHoldSnapshotsForSnappable(LegalHoldSnapshotDetailConnection fieldSpec)
        {
            return LegalHoldSnapshotsForSnappable_TypedFieldSpec(fieldSpec);
        }
        public static string LegalHoldSnapshotsForSnappable(object fieldSpecObj)
        {
            return LegalHoldSnapshotsForSnappable_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LegalHoldSnapshotsForSnappableFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LegalHoldSnapshotDetailConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LicensesForClusterProductReply? LicensesForClusterProductSummary
        // GraphQL -> licensesForClusterProductSummary: LicensesForClusterProductReply! (type)
        public static string LicensesForClusterProductSummary_TypedFieldSpec(LicensesForClusterProductReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "licensesForClusterProductSummary" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LicensesForClusterProductSummary_ObjectFieldSpec(object fieldSpecObj)
        {
            return LicensesForClusterProductSummary((LicensesForClusterProductReply)fieldSpecObj);
        }
        public static string LicensesForClusterProductSummary(LicensesForClusterProductReply fieldSpec)
        {
            return LicensesForClusterProductSummary_TypedFieldSpec(fieldSpec);
        }
        public static string LicensesForClusterProductSummary(object fieldSpecObj)
        {
            return LicensesForClusterProductSummary_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LicensesForClusterProductSummaryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LicensesForClusterProductReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LinuxFileset? LinuxFileset
        // GraphQL -> linuxFileset: LinuxFileset! (type)
        public static string LinuxFileset_TypedFieldSpec(LinuxFileset fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "linuxFileset" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LinuxFileset_ObjectFieldSpec(object fieldSpecObj)
        {
            return LinuxFileset((LinuxFileset)fieldSpecObj);
        }
        public static string LinuxFileset(LinuxFileset fieldSpec)
        {
            return LinuxFileset_TypedFieldSpec(fieldSpec);
        }
        public static string LinuxFileset(object fieldSpecObj)
        {
            return LinuxFileset_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LinuxFilesetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LinuxFileset() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365AppConnection? ListO365Apps
        // GraphQL -> listO365Apps: O365AppConnection! (type)
        public static string ListO365Apps_TypedFieldSpec(O365AppConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\no365AppFilters: $o365AppFilters\no365AppSortByParam: $o365AppSortByParam\n)";
            return "listO365Apps" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ListO365Apps_ObjectFieldSpec(object fieldSpecObj)
        {
            return ListO365Apps((O365AppConnection)fieldSpecObj);
        }
        public static string ListO365Apps(O365AppConnection fieldSpec)
        {
            return ListO365Apps_TypedFieldSpec(fieldSpec);
        }
        public static string ListO365Apps(object fieldSpecObj)
        {
            return ListO365Apps_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ListO365AppsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365AppConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LockoutConfig? LockoutConfig
        // GraphQL -> lockoutConfig: LockoutConfig! (type)
        public static string LockoutConfig_TypedFieldSpec(LockoutConfig fieldSpec)
        {
            string args = "";
            return "lockoutConfig" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LockoutConfig_ObjectFieldSpec(object fieldSpecObj)
        {
            return LockoutConfig((LockoutConfig)fieldSpecObj);
        }
        public static string LockoutConfig(LockoutConfig fieldSpec)
        {
            return LockoutConfig_TypedFieldSpec(fieldSpec);
        }
        public static string LockoutConfig(object fieldSpecObj)
        {
            return LockoutConfig_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LockoutConfigFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LockoutConfig() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LookupAccountReply? LookupAccount
        // GraphQL -> lookupAccount: LookupAccountReply! (type)
        public static string LookupAccount_TypedFieldSpec(LookupAccountReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "lookupAccount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string LookupAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return LookupAccount((LookupAccountReply)fieldSpecObj);
        }
        public static string LookupAccount(LookupAccountReply fieldSpec)
        {
            return LookupAccount_TypedFieldSpec(fieldSpec);
        }
        public static string LookupAccount(object fieldSpecObj)
        {
            return LookupAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object LookupAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LookupAccountReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> DayToDayModeBackupStats? M365DayToDayModeBackupStats
        // GraphQL -> m365DayToDayModeBackupStats: DayToDayModeBackupStats! (type)
        public static string M365DayToDayModeBackupStats_TypedFieldSpec(DayToDayModeBackupStats fieldSpec)
        {
            string args = "\n(\norgId: $orgId\ndashboardWorkloadType: $dashboardWorkloadType\nbackupStatsTimeRange: $backupStatsTimeRange\n)";
            return "m365DayToDayModeBackupStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string M365DayToDayModeBackupStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return M365DayToDayModeBackupStats((DayToDayModeBackupStats)fieldSpecObj);
        }
        public static string M365DayToDayModeBackupStats(DayToDayModeBackupStats fieldSpec)
        {
            return M365DayToDayModeBackupStats_TypedFieldSpec(fieldSpec);
        }
        public static string M365DayToDayModeBackupStats(object fieldSpecObj)
        {
            return M365DayToDayModeBackupStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object M365DayToDayModeBackupStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new DayToDayModeBackupStats() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> DayToDayModeStats? M365DayToDayModeStats
        // GraphQL -> m365DayToDayModeStats: DayToDayModeStats! (type)
        public static string M365DayToDayModeStats_TypedFieldSpec(DayToDayModeStats fieldSpec)
        {
            string args = "\n(\norgId: $orgId\ndashboardWorkloadType: $dashboardWorkloadType\n)";
            return "m365DayToDayModeStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string M365DayToDayModeStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return M365DayToDayModeStats((DayToDayModeStats)fieldSpecObj);
        }
        public static string M365DayToDayModeStats(DayToDayModeStats fieldSpec)
        {
            return M365DayToDayModeStats_TypedFieldSpec(fieldSpec);
        }
        public static string M365DayToDayModeStats(object fieldSpecObj)
        {
            return M365DayToDayModeStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object M365DayToDayModeStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new DayToDayModeStats() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OnboardingModeBackupStats? M365OnboardingModeBackupStats
        // GraphQL -> m365OnboardingModeBackupStats: OnboardingModeBackupStats! (type)
        public static string M365OnboardingModeBackupStats_TypedFieldSpec(OnboardingModeBackupStats fieldSpec)
        {
            string args = "\n(\norgId: $orgId\ndashboardWorkloadType: $dashboardWorkloadType\nbackupStatsTimeRange: $backupStatsTimeRange\n)";
            return "m365OnboardingModeBackupStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string M365OnboardingModeBackupStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return M365OnboardingModeBackupStats((OnboardingModeBackupStats)fieldSpecObj);
        }
        public static string M365OnboardingModeBackupStats(OnboardingModeBackupStats fieldSpec)
        {
            return M365OnboardingModeBackupStats_TypedFieldSpec(fieldSpec);
        }
        public static string M365OnboardingModeBackupStats(object fieldSpecObj)
        {
            return M365OnboardingModeBackupStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object M365OnboardingModeBackupStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OnboardingModeBackupStats() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OnboardingModeStats? M365OnboardingModeStats
        // GraphQL -> m365OnboardingModeStats: OnboardingModeStats! (type)
        public static string M365OnboardingModeStats_TypedFieldSpec(OnboardingModeStats fieldSpec)
        {
            string args = "\n(\norgId: $orgId\ndashboardWorkloadType: $dashboardWorkloadType\n)";
            return "m365OnboardingModeStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string M365OnboardingModeStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return M365OnboardingModeStats((OnboardingModeStats)fieldSpecObj);
        }
        public static string M365OnboardingModeStats(OnboardingModeStats fieldSpec)
        {
            return M365OnboardingModeStats_TypedFieldSpec(fieldSpec);
        }
        public static string M365OnboardingModeStats(object fieldSpecObj)
        {
            return M365OnboardingModeStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object M365OnboardingModeStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OnboardingModeStats() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> M365OrgBackupLocations? M365OrgBackupLocations
        // GraphQL -> m365OrgBackupLocations: M365OrgBackupLocations! (type)
        public static string M365OrgBackupLocations_TypedFieldSpec(M365OrgBackupLocations fieldSpec)
        {
            string args = "\n(\norgId: $orgId\n)";
            return "m365OrgBackupLocations" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string M365OrgBackupLocations_ObjectFieldSpec(object fieldSpecObj)
        {
            return M365OrgBackupLocations((M365OrgBackupLocations)fieldSpecObj);
        }
        public static string M365OrgBackupLocations(M365OrgBackupLocations fieldSpec)
        {
            return M365OrgBackupLocations_TypedFieldSpec(fieldSpec);
        }
        public static string M365OrgBackupLocations(object fieldSpecObj)
        {
            return M365OrgBackupLocations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object M365OrgBackupLocationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new M365OrgBackupLocations() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> M365OrgOperationModes? M365OrgOperationModes
        // GraphQL -> m365OrgOperationModes: M365OrgOperationModes! (type)
        public static string M365OrgOperationModes_TypedFieldSpec(M365OrgOperationModes fieldSpec)
        {
            string args = "\n(\norgId: $orgId\n)";
            return "m365OrgOperationModes" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string M365OrgOperationModes_ObjectFieldSpec(object fieldSpecObj)
        {
            return M365OrgOperationModes((M365OrgOperationModes)fieldSpecObj);
        }
        public static string M365OrgOperationModes(M365OrgOperationModes fieldSpec)
        {
            return M365OrgOperationModes_TypedFieldSpec(fieldSpec);
        }
        public static string M365OrgOperationModes(object fieldSpecObj)
        {
            return M365OrgOperationModes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object M365OrgOperationModesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new M365OrgOperationModes() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> M365RegionsResp? M365Regions
        // GraphQL -> m365Regions: M365RegionsResp! (type)
        public static string M365Regions_TypedFieldSpec(M365RegionsResp fieldSpec)
        {
            string args = "\n(\norgId: $orgId\n)";
            return "m365Regions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string M365Regions_ObjectFieldSpec(object fieldSpecObj)
        {
            return M365Regions((M365RegionsResp)fieldSpecObj);
        }
        public static string M365Regions(M365RegionsResp fieldSpec)
        {
            return M365Regions_TypedFieldSpec(fieldSpec);
        }
        public static string M365Regions(object fieldSpecObj)
        {
            return M365Regions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object M365RegionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new M365RegionsResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ManagedVolume? ManagedVolume
        // GraphQL -> managedVolume: ManagedVolume! (type)
        public static string ManagedVolume_TypedFieldSpec(ManagedVolume fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "managedVolume" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ManagedVolume_ObjectFieldSpec(object fieldSpecObj)
        {
            return ManagedVolume((ManagedVolume)fieldSpecObj);
        }
        public static string ManagedVolume(ManagedVolume fieldSpec)
        {
            return ManagedVolume_TypedFieldSpec(fieldSpec);
        }
        public static string ManagedVolume(object fieldSpecObj)
        {
            return ManagedVolume_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ManagedVolumeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ManagedVolume() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ManagedVolumeInventoryStats? ManagedVolumeInventoryStats
        // GraphQL -> managedVolumeInventoryStats: ManagedVolumeInventoryStats! (type)
        public static string ManagedVolumeInventoryStats_TypedFieldSpec(ManagedVolumeInventoryStats fieldSpec)
        {
            string args = "";
            return "managedVolumeInventoryStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ManagedVolumeInventoryStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return ManagedVolumeInventoryStats((ManagedVolumeInventoryStats)fieldSpecObj);
        }
        public static string ManagedVolumeInventoryStats(ManagedVolumeInventoryStats fieldSpec)
        {
            return ManagedVolumeInventoryStats_TypedFieldSpec(fieldSpec);
        }
        public static string ManagedVolumeInventoryStats(object fieldSpecObj)
        {
            return ManagedVolumeInventoryStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ManagedVolumeInventoryStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ManagedVolumeInventoryStats() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ManagedVolumeMountConnection? ManagedVolumeLiveMounts
        // GraphQL -> managedVolumeLiveMounts: ManagedVolumeMountConnection! (type)
        public static string ManagedVolumeLiveMounts_TypedFieldSpec(ManagedVolumeMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "managedVolumeLiveMounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ManagedVolumeLiveMounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return ManagedVolumeLiveMounts((ManagedVolumeMountConnection)fieldSpecObj);
        }
        public static string ManagedVolumeLiveMounts(ManagedVolumeMountConnection fieldSpec)
        {
            return ManagedVolumeLiveMounts_TypedFieldSpec(fieldSpec);
        }
        public static string ManagedVolumeLiveMounts(object fieldSpecObj)
        {
            return ManagedVolumeLiveMounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ManagedVolumeLiveMountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ManagedVolumeMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ManagedVolumeConnection? ManagedVolumes
        // GraphQL -> managedVolumes: ManagedVolumeConnection! (type)
        public static string ManagedVolumes_TypedFieldSpec(ManagedVolumeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "managedVolumes" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ManagedVolumes_ObjectFieldSpec(object fieldSpecObj)
        {
            return ManagedVolumes((ManagedVolumeConnection)fieldSpecObj);
        }
        public static string ManagedVolumes(ManagedVolumeConnection fieldSpec)
        {
            return ManagedVolumes_TypedFieldSpec(fieldSpec);
        }
        public static string ManagedVolumes(object fieldSpecObj)
        {
            return ManagedVolumes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ManagedVolumesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ManagedVolumeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetMfaSettingReply? MfaSetting
        // GraphQL -> mfaSetting: GetMfaSettingReply! (type)
        public static string MfaSetting_TypedFieldSpec(GetMfaSettingReply fieldSpec)
        {
            string args = "";
            return "mfaSetting" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MfaSetting_ObjectFieldSpec(object fieldSpecObj)
        {
            return MfaSetting((GetMfaSettingReply)fieldSpecObj);
        }
        public static string MfaSetting(GetMfaSettingReply fieldSpec)
        {
            return MfaSetting_TypedFieldSpec(fieldSpec);
        }
        public static string MfaSetting(object fieldSpecObj)
        {
            return MfaSetting_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MfaSettingFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetMfaSettingReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FeatureListMinimumCdmVersionReply? MinimumCdmVersionForFeatureSet
        // GraphQL -> minimumCdmVersionForFeatureSet: FeatureListMinimumCdmVersionReply! (type)
        public static string MinimumCdmVersionForFeatureSet_TypedFieldSpec(FeatureListMinimumCdmVersionReply fieldSpec)
        {
            string args = "\n(\nfeatureListMinimumCdmVersion: $featureListMinimumCdmVersion\n)";
            return "minimumCdmVersionForFeatureSet" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MinimumCdmVersionForFeatureSet_ObjectFieldSpec(object fieldSpecObj)
        {
            return MinimumCdmVersionForFeatureSet((FeatureListMinimumCdmVersionReply)fieldSpecObj);
        }
        public static string MinimumCdmVersionForFeatureSet(FeatureListMinimumCdmVersionReply fieldSpec)
        {
            return MinimumCdmVersionForFeatureSet_TypedFieldSpec(fieldSpec);
        }
        public static string MinimumCdmVersionForFeatureSet(object fieldSpecObj)
        {
            return MinimumCdmVersionForFeatureSet_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MinimumCdmVersionForFeatureSetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FeatureListMinimumCdmVersionReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongoRecoverableRanges? MongoBulkRecoverableRanges
        // GraphQL -> mongoBulkRecoverableRanges: MongoRecoverableRanges! (type)
        public static string MongoBulkRecoverableRanges_TypedFieldSpec(MongoRecoverableRanges fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mongoBulkRecoverableRanges" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongoBulkRecoverableRanges_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongoBulkRecoverableRanges((MongoRecoverableRanges)fieldSpecObj);
        }
        public static string MongoBulkRecoverableRanges(MongoRecoverableRanges fieldSpec)
        {
            return MongoBulkRecoverableRanges_TypedFieldSpec(fieldSpec);
        }
        public static string MongoBulkRecoverableRanges(object fieldSpecObj)
        {
            return MongoBulkRecoverableRanges_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongoBulkRecoverableRangesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongoRecoverableRanges() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongoCollection? MongoCollection
        // GraphQL -> mongoCollection: MongoCollection! (type)
        public static string MongoCollection_TypedFieldSpec(MongoCollection fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mongoCollection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongoCollection_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongoCollection((MongoCollection)fieldSpecObj);
        }
        public static string MongoCollection(MongoCollection fieldSpec)
        {
            return MongoCollection_TypedFieldSpec(fieldSpec);
        }
        public static string MongoCollection(object fieldSpecObj)
        {
            return MongoCollection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongoCollectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongoCollection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongoCollectionConnection? MongoCollections
        // GraphQL -> mongoCollections: MongoCollectionConnection! (type)
        public static string MongoCollections_TypedFieldSpec(MongoCollectionConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "mongoCollections" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongoCollections_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongoCollections((MongoCollectionConnection)fieldSpecObj);
        }
        public static string MongoCollections(MongoCollectionConnection fieldSpec)
        {
            return MongoCollections_TypedFieldSpec(fieldSpec);
        }
        public static string MongoCollections(object fieldSpecObj)
        {
            return MongoCollections_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongoCollectionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongoCollectionConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongoDatabase? MongoDatabase
        // GraphQL -> mongoDatabase: MongoDatabase! (type)
        public static string MongoDatabase_TypedFieldSpec(MongoDatabase fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mongoDatabase" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongoDatabase_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongoDatabase((MongoDatabase)fieldSpecObj);
        }
        public static string MongoDatabase(MongoDatabase fieldSpec)
        {
            return MongoDatabase_TypedFieldSpec(fieldSpec);
        }
        public static string MongoDatabase(object fieldSpecObj)
        {
            return MongoDatabase_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongoDatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongoDatabase() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongoDatabaseConnection? MongoDatabases
        // GraphQL -> mongoDatabases: MongoDatabaseConnection! (type)
        public static string MongoDatabases_TypedFieldSpec(MongoDatabaseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "mongoDatabases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongoDatabases_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongoDatabases((MongoDatabaseConnection)fieldSpecObj);
        }
        public static string MongoDatabases(MongoDatabaseConnection fieldSpec)
        {
            return MongoDatabases_TypedFieldSpec(fieldSpec);
        }
        public static string MongoDatabases(object fieldSpecObj)
        {
            return MongoDatabases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongoDatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongoDatabaseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongoRecoverableRanges? MongoRecoverableRanges
        // GraphQL -> mongoRecoverableRanges: MongoRecoverableRanges! (type)
        public static string MongoRecoverableRanges_TypedFieldSpec(MongoRecoverableRanges fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mongoRecoverableRanges" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongoRecoverableRanges_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongoRecoverableRanges((MongoRecoverableRanges)fieldSpecObj);
        }
        public static string MongoRecoverableRanges(MongoRecoverableRanges fieldSpec)
        {
            return MongoRecoverableRanges_TypedFieldSpec(fieldSpec);
        }
        public static string MongoRecoverableRanges(object fieldSpecObj)
        {
            return MongoRecoverableRanges_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongoRecoverableRangesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongoRecoverableRanges() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongoSource? MongoSource
        // GraphQL -> mongoSource: MongoSource! (type)
        public static string MongoSource_TypedFieldSpec(MongoSource fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mongoSource" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongoSource_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongoSource((MongoSource)fieldSpecObj);
        }
        public static string MongoSource(MongoSource fieldSpec)
        {
            return MongoSource_TypedFieldSpec(fieldSpec);
        }
        public static string MongoSource(object fieldSpecObj)
        {
            return MongoSource_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongoSourceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongoSource() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongoSourceConnection? MongoSources
        // GraphQL -> mongoSources: MongoSourceConnection! (type)
        public static string MongoSources_TypedFieldSpec(MongoSourceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "mongoSources" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongoSources_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongoSources((MongoSourceConnection)fieldSpecObj);
        }
        public static string MongoSources(MongoSourceConnection fieldSpec)
        {
            return MongoSources_TypedFieldSpec(fieldSpec);
        }
        public static string MongoSources(object fieldSpecObj)
        {
            return MongoSources_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongoSourcesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongoSourceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MosaicRecoveryRangeResponse? MongodbBulkRecoverableRange
        // GraphQL -> mongodbBulkRecoverableRange: MosaicRecoveryRangeResponse! (type)
        public static string MongodbBulkRecoverableRange_TypedFieldSpec(MosaicRecoveryRangeResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mongodbBulkRecoverableRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongodbBulkRecoverableRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongodbBulkRecoverableRange((MosaicRecoveryRangeResponse)fieldSpecObj);
        }
        public static string MongodbBulkRecoverableRange(MosaicRecoveryRangeResponse fieldSpec)
        {
            return MongodbBulkRecoverableRange_TypedFieldSpec(fieldSpec);
        }
        public static string MongodbBulkRecoverableRange(object fieldSpecObj)
        {
            return MongodbBulkRecoverableRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongodbBulkRecoverableRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MosaicRecoveryRangeResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongodbCollection? MongodbCollection
        // GraphQL -> mongodbCollection: MongodbCollection! (type)
        public static string MongodbCollection_TypedFieldSpec(MongodbCollection fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mongodbCollection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongodbCollection_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongodbCollection((MongodbCollection)fieldSpecObj);
        }
        public static string MongodbCollection(MongodbCollection fieldSpec)
        {
            return MongodbCollection_TypedFieldSpec(fieldSpec);
        }
        public static string MongodbCollection(object fieldSpecObj)
        {
            return MongodbCollection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongodbCollectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongodbCollection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetMosaicRecoverableRangeResponse? MongodbCollectionRecoverableRange
        // GraphQL -> mongodbCollectionRecoverableRange: GetMosaicRecoverableRangeResponse! (type)
        public static string MongodbCollectionRecoverableRange_TypedFieldSpec(GetMosaicRecoverableRangeResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mongodbCollectionRecoverableRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongodbCollectionRecoverableRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongodbCollectionRecoverableRange((GetMosaicRecoverableRangeResponse)fieldSpecObj);
        }
        public static string MongodbCollectionRecoverableRange(GetMosaicRecoverableRangeResponse fieldSpec)
        {
            return MongodbCollectionRecoverableRange_TypedFieldSpec(fieldSpec);
        }
        public static string MongodbCollectionRecoverableRange(object fieldSpecObj)
        {
            return MongodbCollectionRecoverableRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongodbCollectionRecoverableRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetMosaicRecoverableRangeResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongodbCollectionConnection? MongodbCollections
        // GraphQL -> mongodbCollections: MongodbCollectionConnection! (type)
        public static string MongodbCollections_TypedFieldSpec(MongodbCollectionConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "mongodbCollections" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongodbCollections_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongodbCollections((MongodbCollectionConnection)fieldSpecObj);
        }
        public static string MongodbCollections(MongodbCollectionConnection fieldSpec)
        {
            return MongodbCollections_TypedFieldSpec(fieldSpec);
        }
        public static string MongodbCollections(object fieldSpecObj)
        {
            return MongodbCollections_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongodbCollectionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongodbCollectionConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongodbDatabase? MongodbDatabase
        // GraphQL -> mongodbDatabase: MongodbDatabase! (type)
        public static string MongodbDatabase_TypedFieldSpec(MongodbDatabase fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mongodbDatabase" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongodbDatabase_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongodbDatabase((MongodbDatabase)fieldSpecObj);
        }
        public static string MongodbDatabase(MongodbDatabase fieldSpec)
        {
            return MongodbDatabase_TypedFieldSpec(fieldSpec);
        }
        public static string MongodbDatabase(object fieldSpecObj)
        {
            return MongodbDatabase_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongodbDatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongodbDatabase() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongodbDatabaseConnection? MongodbDatabases
        // GraphQL -> mongodbDatabases: MongodbDatabaseConnection! (type)
        public static string MongodbDatabases_TypedFieldSpec(MongodbDatabaseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "mongodbDatabases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongodbDatabases_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongodbDatabases((MongodbDatabaseConnection)fieldSpecObj);
        }
        public static string MongodbDatabases(MongodbDatabaseConnection fieldSpec)
        {
            return MongodbDatabases_TypedFieldSpec(fieldSpec);
        }
        public static string MongodbDatabases(object fieldSpecObj)
        {
            return MongodbDatabases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongodbDatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongodbDatabaseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongodbSource? MongodbSource
        // GraphQL -> mongodbSource: MongodbSource! (type)
        public static string MongodbSource_TypedFieldSpec(MongodbSource fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mongodbSource" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongodbSource_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongodbSource((MongodbSource)fieldSpecObj);
        }
        public static string MongodbSource(MongodbSource fieldSpec)
        {
            return MongodbSource_TypedFieldSpec(fieldSpec);
        }
        public static string MongodbSource(object fieldSpecObj)
        {
            return MongodbSource_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongodbSourceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongodbSource() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MongodbSourceConnection? MongodbSources
        // GraphQL -> mongodbSources: MongodbSourceConnection! (type)
        public static string MongodbSources_TypedFieldSpec(MongodbSourceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "mongodbSources" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MongodbSources_ObjectFieldSpec(object fieldSpecObj)
        {
            return MongodbSources((MongodbSourceConnection)fieldSpecObj);
        }
        public static string MongodbSources(MongodbSourceConnection fieldSpec)
        {
            return MongodbSources_TypedFieldSpec(fieldSpec);
        }
        public static string MongodbSources(object fieldSpecObj)
        {
            return MongodbSources_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MongodbSourcesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MongodbSourceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MosaicRecoveryRangeResponse? MosaicBulkRecoveryRange
        // GraphQL -> mosaicBulkRecoveryRange: MosaicRecoveryRangeResponse! (type)
        public static string MosaicBulkRecoveryRange_TypedFieldSpec(MosaicRecoveryRangeResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mosaicBulkRecoveryRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MosaicBulkRecoveryRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return MosaicBulkRecoveryRange((MosaicRecoveryRangeResponse)fieldSpecObj);
        }
        public static string MosaicBulkRecoveryRange(MosaicRecoveryRangeResponse fieldSpec)
        {
            return MosaicBulkRecoveryRange_TypedFieldSpec(fieldSpec);
        }
        public static string MosaicBulkRecoveryRange(object fieldSpecObj)
        {
            return MosaicBulkRecoveryRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MosaicBulkRecoveryRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MosaicRecoveryRangeResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ListVersionResponse? MosaicSnapshots
        // GraphQL -> mosaicSnapshots: ListVersionResponse! (type)
        public static string MosaicSnapshots_TypedFieldSpec(ListVersionResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mosaicSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MosaicSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return MosaicSnapshots((ListVersionResponse)fieldSpecObj);
        }
        public static string MosaicSnapshots(ListVersionResponse fieldSpec)
        {
            return MosaicSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string MosaicSnapshots(object fieldSpecObj)
        {
            return MosaicSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MosaicSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ListVersionResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ListStoreResponse? MosaicStores
        // GraphQL -> mosaicStores: ListStoreResponse! (type)
        public static string MosaicStores_TypedFieldSpec(ListStoreResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mosaicStores" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MosaicStores_ObjectFieldSpec(object fieldSpecObj)
        {
            return MosaicStores((ListStoreResponse)fieldSpecObj);
        }
        public static string MosaicStores(ListStoreResponse fieldSpec)
        {
            return MosaicStores_TypedFieldSpec(fieldSpec);
        }
        public static string MosaicStores(object fieldSpecObj)
        {
            return MosaicStores_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MosaicStoresFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ListStoreResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ListVersionResponse? MosaicVersions
        // GraphQL -> mosaicVersions: ListVersionResponse! (type)
        public static string MosaicVersions_TypedFieldSpec(ListVersionResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mosaicVersions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MosaicVersions_ObjectFieldSpec(object fieldSpecObj)
        {
            return MosaicVersions((ListVersionResponse)fieldSpecObj);
        }
        public static string MosaicVersions(ListVersionResponse fieldSpec)
        {
            return MosaicVersions_TypedFieldSpec(fieldSpec);
        }
        public static string MosaicVersions(object fieldSpecObj)
        {
            return MosaicVersions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MosaicVersionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ListVersionResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlAvailabilityGroup? MssqlAvailabilityGroup
        // GraphQL -> mssqlAvailabilityGroup: MssqlAvailabilityGroup! (type)
        public static string MssqlAvailabilityGroup_TypedFieldSpec(MssqlAvailabilityGroup fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mssqlAvailabilityGroup" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlAvailabilityGroup_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlAvailabilityGroup((MssqlAvailabilityGroup)fieldSpecObj);
        }
        public static string MssqlAvailabilityGroup(MssqlAvailabilityGroup fieldSpec)
        {
            return MssqlAvailabilityGroup_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlAvailabilityGroup(object fieldSpecObj)
        {
            return MssqlAvailabilityGroup_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlAvailabilityGroupFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlAvailabilityGroup() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlInstanceSummaryListResponse? MssqlCompatibleInstances
        // GraphQL -> mssqlCompatibleInstances: MssqlInstanceSummaryListResponse! (type)
        public static string MssqlCompatibleInstances_TypedFieldSpec(MssqlInstanceSummaryListResponse fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\ninput: $input\nsortBy: $sortBy\nfilters: $filters\n)";
            return "mssqlCompatibleInstances" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlCompatibleInstances_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlCompatibleInstances((MssqlInstanceSummaryListResponse)fieldSpecObj);
        }
        public static string MssqlCompatibleInstances(MssqlInstanceSummaryListResponse fieldSpec)
        {
            return MssqlCompatibleInstances_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlCompatibleInstances(object fieldSpecObj)
        {
            return MssqlCompatibleInstances_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlCompatibleInstancesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlInstanceSummaryListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlDatabase? MssqlDatabase
        // GraphQL -> mssqlDatabase: MssqlDatabase! (type)
        public static string MssqlDatabase_TypedFieldSpec(MssqlDatabase fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mssqlDatabase" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlDatabase_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlDatabase((MssqlDatabase)fieldSpecObj);
        }
        public static string MssqlDatabase(MssqlDatabase fieldSpec)
        {
            return MssqlDatabase_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlDatabase(object fieldSpecObj)
        {
            return MssqlDatabase_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlDatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlDatabase() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlDatabaseLiveMountConnection? MssqlDatabaseLiveMounts
        // GraphQL -> mssqlDatabaseLiveMounts: MssqlDatabaseLiveMountConnection! (type)
        public static string MssqlDatabaseLiveMounts_TypedFieldSpec(MssqlDatabaseLiveMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nfilters: $filters\n)";
            return "mssqlDatabaseLiveMounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlDatabaseLiveMounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlDatabaseLiveMounts((MssqlDatabaseLiveMountConnection)fieldSpecObj);
        }
        public static string MssqlDatabaseLiveMounts(MssqlDatabaseLiveMountConnection fieldSpec)
        {
            return MssqlDatabaseLiveMounts_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlDatabaseLiveMounts(object fieldSpecObj)
        {
            return MssqlDatabaseLiveMounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlDatabaseLiveMountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlDatabaseLiveMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlMissedRecoverableRangeListResponse? MssqlDatabaseMissedRecoverableRanges
        // GraphQL -> mssqlDatabaseMissedRecoverableRanges: MssqlMissedRecoverableRangeListResponse! (type)
        public static string MssqlDatabaseMissedRecoverableRanges_TypedFieldSpec(MssqlMissedRecoverableRangeListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mssqlDatabaseMissedRecoverableRanges" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlDatabaseMissedRecoverableRanges_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlDatabaseMissedRecoverableRanges((MssqlMissedRecoverableRangeListResponse)fieldSpecObj);
        }
        public static string MssqlDatabaseMissedRecoverableRanges(MssqlMissedRecoverableRangeListResponse fieldSpec)
        {
            return MssqlDatabaseMissedRecoverableRanges_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlDatabaseMissedRecoverableRanges(object fieldSpecObj)
        {
            return MssqlDatabaseMissedRecoverableRanges_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlDatabaseMissedRecoverableRangesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlMissedRecoverableRangeListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MissedSnapshotListResponse? MssqlDatabaseMissedSnapshots
        // GraphQL -> mssqlDatabaseMissedSnapshots: MissedSnapshotListResponse! (type)
        public static string MssqlDatabaseMissedSnapshots_TypedFieldSpec(MissedSnapshotListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mssqlDatabaseMissedSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlDatabaseMissedSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlDatabaseMissedSnapshots((MissedSnapshotListResponse)fieldSpecObj);
        }
        public static string MssqlDatabaseMissedSnapshots(MissedSnapshotListResponse fieldSpec)
        {
            return MssqlDatabaseMissedSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlDatabaseMissedSnapshots(object fieldSpecObj)
        {
            return MssqlDatabaseMissedSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlDatabaseMissedSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MissedSnapshotListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlRestoreEstimateResult? MssqlDatabaseRestoreEstimate
        // GraphQL -> mssqlDatabaseRestoreEstimate: MssqlRestoreEstimateResult! (type)
        public static string MssqlDatabaseRestoreEstimate_TypedFieldSpec(MssqlRestoreEstimateResult fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mssqlDatabaseRestoreEstimate" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlDatabaseRestoreEstimate_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlDatabaseRestoreEstimate((MssqlRestoreEstimateResult)fieldSpecObj);
        }
        public static string MssqlDatabaseRestoreEstimate(MssqlRestoreEstimateResult fieldSpec)
        {
            return MssqlDatabaseRestoreEstimate_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlDatabaseRestoreEstimate(object fieldSpecObj)
        {
            return MssqlDatabaseRestoreEstimate_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlDatabaseRestoreEstimateFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlRestoreEstimateResult() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlDatabaseConnection? MssqlDatabases
        // GraphQL -> mssqlDatabases: MssqlDatabaseConnection! (type)
        public static string MssqlDatabases_TypedFieldSpec(MssqlDatabaseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "mssqlDatabases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlDatabases_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlDatabases((MssqlDatabaseConnection)fieldSpecObj);
        }
        public static string MssqlDatabases(MssqlDatabaseConnection fieldSpec)
        {
            return MssqlDatabases_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlDatabases(object fieldSpecObj)
        {
            return MssqlDatabases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlDatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlDatabaseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UpdateMssqlDefaultPropertiesReply? MssqlDefaultProperties
        // GraphQL -> mssqlDefaultProperties: UpdateMssqlDefaultPropertiesReply! (type)
        public static string MssqlDefaultProperties_TypedFieldSpec(UpdateMssqlDefaultPropertiesReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mssqlDefaultProperties" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlDefaultProperties_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlDefaultProperties((UpdateMssqlDefaultPropertiesReply)fieldSpecObj);
        }
        public static string MssqlDefaultProperties(UpdateMssqlDefaultPropertiesReply fieldSpec)
        {
            return MssqlDefaultProperties_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlDefaultProperties(object fieldSpecObj)
        {
            return MssqlDefaultProperties_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlDefaultPropertiesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UpdateMssqlDefaultPropertiesReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlDefaultPropertiesOnClusterReply? MssqlDefaultPropertiesOnCluster
        // GraphQL -> mssqlDefaultPropertiesOnCluster: MssqlDefaultPropertiesOnClusterReply! (type)
        public static string MssqlDefaultPropertiesOnCluster_TypedFieldSpec(MssqlDefaultPropertiesOnClusterReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mssqlDefaultPropertiesOnCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlDefaultPropertiesOnCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlDefaultPropertiesOnCluster((MssqlDefaultPropertiesOnClusterReply)fieldSpecObj);
        }
        public static string MssqlDefaultPropertiesOnCluster(MssqlDefaultPropertiesOnClusterReply fieldSpec)
        {
            return MssqlDefaultPropertiesOnCluster_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlDefaultPropertiesOnCluster(object fieldSpecObj)
        {
            return MssqlDefaultPropertiesOnCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlDefaultPropertiesOnClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlDefaultPropertiesOnClusterReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlInstance? MssqlInstance
        // GraphQL -> mssqlInstance: MssqlInstance! (type)
        public static string MssqlInstance_TypedFieldSpec(MssqlInstance fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "mssqlInstance" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlInstance_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlInstance((MssqlInstance)fieldSpecObj);
        }
        public static string MssqlInstance(MssqlInstance fieldSpec)
        {
            return MssqlInstance_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlInstance(object fieldSpecObj)
        {
            return MssqlInstance_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlInstanceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlInstance() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlLogShippingSummaryV2ListResponse? MssqlLogShippingTargets
        // GraphQL -> mssqlLogShippingTargets: MssqlLogShippingSummaryV2ListResponse (type)
        public static string MssqlLogShippingTargets_TypedFieldSpec(MssqlLogShippingSummaryV2ListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mssqlLogShippingTargets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlLogShippingTargets_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlLogShippingTargets((MssqlLogShippingSummaryV2ListResponse)fieldSpecObj);
        }
        public static string MssqlLogShippingTargets(MssqlLogShippingSummaryV2ListResponse fieldSpec)
        {
            return MssqlLogShippingTargets_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlLogShippingTargets(object fieldSpecObj)
        {
            return MssqlLogShippingTargets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlLogShippingTargetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlLogShippingSummaryV2ListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlRecoverableRangeListResponse? MssqlRecoverableRanges
        // GraphQL -> mssqlRecoverableRanges: MssqlRecoverableRangeListResponse! (type)
        public static string MssqlRecoverableRanges_TypedFieldSpec(MssqlRecoverableRangeListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "mssqlRecoverableRanges" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlRecoverableRanges_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlRecoverableRanges((MssqlRecoverableRangeListResponse)fieldSpecObj);
        }
        public static string MssqlRecoverableRanges(MssqlRecoverableRangeListResponse fieldSpec)
        {
            return MssqlRecoverableRanges_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlRecoverableRanges(object fieldSpecObj)
        {
            return MssqlRecoverableRanges_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlRecoverableRangesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlRecoverableRangeListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MssqlTopLevelDescendantTypeConnection? MssqlTopLevelDescendants
        // GraphQL -> mssqlTopLevelDescendants: MssqlTopLevelDescendantTypeConnection! (type)
        public static string MssqlTopLevelDescendants_TypedFieldSpec(MssqlTopLevelDescendantTypeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\ntypeFilter: $typeFilter\nfilter: $filter\n)";
            return "mssqlTopLevelDescendants" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string MssqlTopLevelDescendants_ObjectFieldSpec(object fieldSpecObj)
        {
            return MssqlTopLevelDescendants((MssqlTopLevelDescendantTypeConnection)fieldSpecObj);
        }
        public static string MssqlTopLevelDescendants(MssqlTopLevelDescendantTypeConnection fieldSpec)
        {
            return MssqlTopLevelDescendants_TypedFieldSpec(fieldSpec);
        }
        public static string MssqlTopLevelDescendants(object fieldSpecObj)
        {
            return MssqlTopLevelDescendants_ObjectFieldSpec(fieldSpecObj);
        }
        public static object MssqlTopLevelDescendantsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MssqlTopLevelDescendantTypeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NasFileset? NasFileset
        // GraphQL -> nasFileset: NasFileset! (type)
        public static string NasFileset_TypedFieldSpec(NasFileset fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nasFileset" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NasFileset_ObjectFieldSpec(object fieldSpecObj)
        {
            return NasFileset((NasFileset)fieldSpecObj);
        }
        public static string NasFileset(NasFileset fieldSpec)
        {
            return NasFileset_TypedFieldSpec(fieldSpec);
        }
        public static string NasFileset(object fieldSpecObj)
        {
            return NasFileset_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NasFilesetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NasFileset() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NasNamespace? NasNamespace
        // GraphQL -> nasNamespace: NasNamespace! (type)
        public static string NasNamespace_TypedFieldSpec(NasNamespace fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nasNamespace" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NasNamespace_ObjectFieldSpec(object fieldSpecObj)
        {
            return NasNamespace((NasNamespace)fieldSpecObj);
        }
        public static string NasNamespace(NasNamespace fieldSpec)
        {
            return NasNamespace_TypedFieldSpec(fieldSpec);
        }
        public static string NasNamespace(object fieldSpecObj)
        {
            return NasNamespace_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NasNamespaceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NasNamespace() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NasNamespaceConnection? NasNamespaces
        // GraphQL -> nasNamespaces: NasNamespaceConnection! (type)
        public static string NasNamespaces_TypedFieldSpec(NasNamespaceConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "nasNamespaces" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NasNamespaces_ObjectFieldSpec(object fieldSpecObj)
        {
            return NasNamespaces((NasNamespaceConnection)fieldSpecObj);
        }
        public static string NasNamespaces(NasNamespaceConnection fieldSpec)
        {
            return NasNamespaces_TypedFieldSpec(fieldSpec);
        }
        public static string NasNamespaces(object fieldSpecObj)
        {
            return NasNamespaces_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NasNamespacesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NasNamespaceConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NasShare? NasShare
        // GraphQL -> nasShare: NasShare! (type)
        public static string NasShare_TypedFieldSpec(NasShare fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nasShare" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NasShare_ObjectFieldSpec(object fieldSpecObj)
        {
            return NasShare((NasShare)fieldSpecObj);
        }
        public static string NasShare(NasShare fieldSpec)
        {
            return NasShare_TypedFieldSpec(fieldSpec);
        }
        public static string NasShare(object fieldSpecObj)
        {
            return NasShare_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NasShareFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NasShare() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NasSystem? NasSystem
        // GraphQL -> nasSystem: NasSystem! (type)
        public static string NasSystem_TypedFieldSpec(NasSystem fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nasSystem" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NasSystem_ObjectFieldSpec(object fieldSpecObj)
        {
            return NasSystem((NasSystem)fieldSpecObj);
        }
        public static string NasSystem(NasSystem fieldSpec)
        {
            return NasSystem_TypedFieldSpec(fieldSpec);
        }
        public static string NasSystem(object fieldSpecObj)
        {
            return NasSystem_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NasSystemFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NasSystem() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NasSystemConnection? NasSystems
        // GraphQL -> nasSystems: NasSystemConnection! (type)
        public static string NasSystems_TypedFieldSpec(NasSystemConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "nasSystems" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NasSystems_ObjectFieldSpec(object fieldSpecObj)
        {
            return NasSystems((NasSystemConnection)fieldSpecObj);
        }
        public static string NasSystems(NasSystemConnection fieldSpec)
        {
            return NasSystems_TypedFieldSpec(fieldSpec);
        }
        public static string NasSystems(object fieldSpecObj)
        {
            return NasSystems_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NasSystemsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NasSystemConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmHierarchyObjectConnection? NasTopLevelDescendants
        // GraphQL -> nasTopLevelDescendants: CdmHierarchyObjectConnection! (type)
        public static string NasTopLevelDescendants_TypedFieldSpec(CdmHierarchyObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\ntypeFilter: $typeFilter\nfilter: $filter\n)";
            return "nasTopLevelDescendants" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NasTopLevelDescendants_ObjectFieldSpec(object fieldSpecObj)
        {
            return NasTopLevelDescendants((CdmHierarchyObjectConnection)fieldSpecObj);
        }
        public static string NasTopLevelDescendants(CdmHierarchyObjectConnection fieldSpec)
        {
            return NasTopLevelDescendants_TypedFieldSpec(fieldSpec);
        }
        public static string NasTopLevelDescendants(object fieldSpecObj)
        {
            return NasTopLevelDescendants_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NasTopLevelDescendantsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmHierarchyObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NasVolume? NasVolume
        // GraphQL -> nasVolume: NasVolume! (type)
        public static string NasVolume_TypedFieldSpec(NasVolume fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nasVolume" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NasVolume_ObjectFieldSpec(object fieldSpecObj)
        {
            return NasVolume((NasVolume)fieldSpecObj);
        }
        public static string NasVolume(NasVolume fieldSpec)
        {
            return NasVolume_TypedFieldSpec(fieldSpec);
        }
        public static string NasVolume(object fieldSpecObj)
        {
            return NasVolume_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NasVolumeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NasVolume() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NcdBackEndCapacity? NcdBackEndCapacity
        // GraphQL -> ncdBackEndCapacity: NcdBackEndCapacity (type)
        public static string NcdBackEndCapacity_TypedFieldSpec(NcdBackEndCapacity fieldSpec)
        {
            string args = "\n(\nclusters: $clusters\n)";
            return "ncdBackEndCapacity" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NcdBackEndCapacity_ObjectFieldSpec(object fieldSpecObj)
        {
            return NcdBackEndCapacity((NcdBackEndCapacity)fieldSpecObj);
        }
        public static string NcdBackEndCapacity(NcdBackEndCapacity fieldSpec)
        {
            return NcdBackEndCapacity_TypedFieldSpec(fieldSpec);
        }
        public static string NcdBackEndCapacity(object fieldSpecObj)
        {
            return NcdBackEndCapacity_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NcdBackEndCapacityFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NcdBackEndCapacity() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NcdFrontEndCapacity? NcdFrontEndCapacity
        // GraphQL -> ncdFrontEndCapacity: NcdFrontEndCapacity (type)
        public static string NcdFrontEndCapacity_TypedFieldSpec(NcdFrontEndCapacity fieldSpec)
        {
            string args = "\n(\nclusters: $clusters\n)";
            return "ncdFrontEndCapacity" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NcdFrontEndCapacity_ObjectFieldSpec(object fieldSpecObj)
        {
            return NcdFrontEndCapacity((NcdFrontEndCapacity)fieldSpecObj);
        }
        public static string NcdFrontEndCapacity(NcdFrontEndCapacity fieldSpec)
        {
            return NcdFrontEndCapacity_TypedFieldSpec(fieldSpec);
        }
        public static string NcdFrontEndCapacity(object fieldSpecObj)
        {
            return NcdFrontEndCapacity_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NcdFrontEndCapacityFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NcdFrontEndCapacity() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NcdObjectProtectionStatus? NcdObjectProtectionStatus
        // GraphQL -> ncdObjectProtectionStatus: NcdObjectProtectionStatus (type)
        public static string NcdObjectProtectionStatus_TypedFieldSpec(NcdObjectProtectionStatus fieldSpec)
        {
            string args = "\n(\nclusters: $clusters\n)";
            return "ncdObjectProtectionStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NcdObjectProtectionStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return NcdObjectProtectionStatus((NcdObjectProtectionStatus)fieldSpecObj);
        }
        public static string NcdObjectProtectionStatus(NcdObjectProtectionStatus fieldSpec)
        {
            return NcdObjectProtectionStatus_TypedFieldSpec(fieldSpec);
        }
        public static string NcdObjectProtectionStatus(object fieldSpecObj)
        {
            return NcdObjectProtectionStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NcdObjectProtectionStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NcdObjectProtectionStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NcdVmImageUrl? NcdVmImageUrl
        // GraphQL -> ncdVmImageUrl: NcdVmImageUrl! (type)
        public static string NcdVmImageUrl_TypedFieldSpec(NcdVmImageUrl fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "ncdVmImageUrl" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NcdVmImageUrl_ObjectFieldSpec(object fieldSpecObj)
        {
            return NcdVmImageUrl((NcdVmImageUrl)fieldSpecObj);
        }
        public static string NcdVmImageUrl(NcdVmImageUrl fieldSpec)
        {
            return NcdVmImageUrl_TypedFieldSpec(fieldSpec);
        }
        public static string NcdVmImageUrl(object fieldSpecObj)
        {
            return NcdVmImageUrl_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NcdVmImageUrlFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NcdVmImageUrl() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NetworkThrottleSummaryListResponse? NetworkThrottle
        // GraphQL -> networkThrottle: NetworkThrottleSummaryListResponse! (type)
        public static string NetworkThrottle_TypedFieldSpec(NetworkThrottleSummaryListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "networkThrottle" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NetworkThrottle_ObjectFieldSpec(object fieldSpecObj)
        {
            return NetworkThrottle((NetworkThrottleSummaryListResponse)fieldSpecObj);
        }
        public static string NetworkThrottle(NetworkThrottleSummaryListResponse fieldSpec)
        {
            return NetworkThrottle_TypedFieldSpec(fieldSpec);
        }
        public static string NetworkThrottle(object fieldSpecObj)
        {
            return NetworkThrottle_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NetworkThrottleFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NetworkThrottleSummaryListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NfAnomalyResultConnection? NfAnomalyResults
        // GraphQL -> nfAnomalyResults: NfAnomalyResultConnection! (type)
        public static string NfAnomalyResults_TypedFieldSpec(NfAnomalyResultConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilter: $filter\ntimezoneOffset: $timezoneOffset\n)";
            return "nfAnomalyResults" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NfAnomalyResults_ObjectFieldSpec(object fieldSpecObj)
        {
            return NfAnomalyResults((NfAnomalyResultConnection)fieldSpecObj);
        }
        public static string NfAnomalyResults(NfAnomalyResultConnection fieldSpec)
        {
            return NfAnomalyResults_TypedFieldSpec(fieldSpec);
        }
        public static string NfAnomalyResults(object fieldSpecObj)
        {
            return NfAnomalyResults_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NfAnomalyResultsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NfAnomalyResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NfAnomalyResultGroupedDataConnection? NfAnomalyResultsGrouped
        // GraphQL -> nfAnomalyResultsGrouped: NfAnomalyResultGroupedDataConnection! (type)
        public static string NfAnomalyResultsGrouped_TypedFieldSpec(NfAnomalyResultGroupedDataConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ngroupBy: $groupBy\nfilter: $filter\ntimezoneOffset: $timezoneOffset\n)";
            return "nfAnomalyResultsGrouped" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NfAnomalyResultsGrouped_ObjectFieldSpec(object fieldSpecObj)
        {
            return NfAnomalyResultsGrouped((NfAnomalyResultGroupedDataConnection)fieldSpecObj);
        }
        public static string NfAnomalyResultsGrouped(NfAnomalyResultGroupedDataConnection fieldSpec)
        {
            return NfAnomalyResultsGrouped_TypedFieldSpec(fieldSpec);
        }
        public static string NfAnomalyResultsGrouped(object fieldSpecObj)
        {
            return NfAnomalyResultsGrouped_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NfAnomalyResultsGroupedFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NfAnomalyResultGroupedDataConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NodeRemovalCancelPermissionReply? NodeRemovalCancelPermission
        // GraphQL -> nodeRemovalCancelPermission: NodeRemovalCancelPermissionReply! (type)
        public static string NodeRemovalCancelPermission_TypedFieldSpec(NodeRemovalCancelPermissionReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nodeRemovalCancelPermission" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NodeRemovalCancelPermission_ObjectFieldSpec(object fieldSpecObj)
        {
            return NodeRemovalCancelPermission((NodeRemovalCancelPermissionReply)fieldSpecObj);
        }
        public static string NodeRemovalCancelPermission(NodeRemovalCancelPermissionReply fieldSpec)
        {
            return NodeRemovalCancelPermission_TypedFieldSpec(fieldSpec);
        }
        public static string NodeRemovalCancelPermission(object fieldSpecObj)
        {
            return NodeRemovalCancelPermission_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NodeRemovalCancelPermissionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NodeRemovalCancelPermissionReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NodeToReplaceReply? NodeToReplace
        // GraphQL -> nodeToReplace: NodeToReplaceReply! (type)
        public static string NodeToReplace_TypedFieldSpec(NodeToReplaceReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nodeToReplace" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NodeToReplace_ObjectFieldSpec(object fieldSpecObj)
        {
            return NodeToReplace((NodeToReplaceReply)fieldSpecObj);
        }
        public static string NodeToReplace(NodeToReplaceReply fieldSpec)
        {
            return NodeToReplace_TypedFieldSpec(fieldSpec);
        }
        public static string NodeToReplace(object fieldSpecObj)
        {
            return NodeToReplace_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NodeToReplaceFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NodeToReplaceReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> BrowseResponseListResponse? NutanixBrowseSnapshot
        // GraphQL -> nutanixBrowseSnapshot: BrowseResponseListResponse! (type)
        public static string NutanixBrowseSnapshot_TypedFieldSpec(BrowseResponseListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nutanixBrowseSnapshot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixBrowseSnapshot_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixBrowseSnapshot((BrowseResponseListResponse)fieldSpecObj);
        }
        public static string NutanixBrowseSnapshot(BrowseResponseListResponse fieldSpec)
        {
            return NutanixBrowseSnapshot_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixBrowseSnapshot(object fieldSpecObj)
        {
            return NutanixBrowseSnapshot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixBrowseSnapshotFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new BrowseResponseListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixCategory? NutanixCategory
        // GraphQL -> nutanixCategory: NutanixCategory! (type)
        public static string NutanixCategory_TypedFieldSpec(NutanixCategory fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nutanixCategory" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixCategory_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixCategory((NutanixCategory)fieldSpecObj);
        }
        public static string NutanixCategory(NutanixCategory fieldSpec)
        {
            return NutanixCategory_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixCategory(object fieldSpecObj)
        {
            return NutanixCategory_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixCategoryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixCategory() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixCategoryValue? NutanixCategoryValue
        // GraphQL -> nutanixCategoryValue: NutanixCategoryValue! (type)
        public static string NutanixCategoryValue_TypedFieldSpec(NutanixCategoryValue fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nutanixCategoryValue" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixCategoryValue_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixCategoryValue((NutanixCategoryValue)fieldSpecObj);
        }
        public static string NutanixCategoryValue(NutanixCategoryValue fieldSpec)
        {
            return NutanixCategoryValue_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixCategoryValue(object fieldSpecObj)
        {
            return NutanixCategoryValue_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixCategoryValueFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixCategoryValue() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixCluster? NutanixCluster
        // GraphQL -> nutanixCluster: NutanixCluster! (type)
        public static string NutanixCluster_TypedFieldSpec(NutanixCluster fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nutanixCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixCluster((NutanixCluster)fieldSpecObj);
        }
        public static string NutanixCluster(NutanixCluster fieldSpec)
        {
            return NutanixCluster_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixCluster(object fieldSpecObj)
        {
            return NutanixCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixCluster() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? NutanixClusterAsyncRequestStatus
        // GraphQL -> nutanixClusterAsyncRequestStatus: AsyncRequestStatus! (type)
        public static string NutanixClusterAsyncRequestStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nutanixClusterAsyncRequestStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixClusterAsyncRequestStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixClusterAsyncRequestStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string NutanixClusterAsyncRequestStatus(AsyncRequestStatus fieldSpec)
        {
            return NutanixClusterAsyncRequestStatus_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixClusterAsyncRequestStatus(object fieldSpecObj)
        {
            return NutanixClusterAsyncRequestStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixClusterAsyncRequestStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixContainerListResponse? NutanixClusterContainers
        // GraphQL -> nutanixClusterContainers: NutanixContainerListResponse! (type)
        public static string NutanixClusterContainers_TypedFieldSpec(NutanixContainerListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nutanixClusterContainers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixClusterContainers_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixClusterContainers((NutanixContainerListResponse)fieldSpecObj);
        }
        public static string NutanixClusterContainers(NutanixContainerListResponse fieldSpec)
        {
            return NutanixClusterContainers_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixClusterContainers(object fieldSpecObj)
        {
            return NutanixClusterContainers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixClusterContainersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixContainerListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixNetworkListResponse? NutanixClusterNetworks
        // GraphQL -> nutanixClusterNetworks: NutanixNetworkListResponse! (type)
        public static string NutanixClusterNetworks_TypedFieldSpec(NutanixNetworkListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nutanixClusterNetworks" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixClusterNetworks_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixClusterNetworks((NutanixNetworkListResponse)fieldSpecObj);
        }
        public static string NutanixClusterNetworks(NutanixNetworkListResponse fieldSpec)
        {
            return NutanixClusterNetworks_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixClusterNetworks(object fieldSpecObj)
        {
            return NutanixClusterNetworks_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixClusterNetworksFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixNetworkListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixClusterConnection? NutanixClusters
        // GraphQL -> nutanixClusters: NutanixClusterConnection! (type)
        public static string NutanixClusters_TypedFieldSpec(NutanixClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "nutanixClusters" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixClusters_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixClusters((NutanixClusterConnection)fieldSpecObj);
        }
        public static string NutanixClusters(NutanixClusterConnection fieldSpec)
        {
            return NutanixClusters_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixClusters(object fieldSpecObj)
        {
            return NutanixClusters_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixClustersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixLiveMountConnection? NutanixMounts
        // GraphQL -> nutanixMounts: NutanixLiveMountConnection! (type)
        public static string NutanixMounts_TypedFieldSpec(NutanixLiveMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilters: $filters\nsortBy: $sortBy\n)";
            return "nutanixMounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixMounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixMounts((NutanixLiveMountConnection)fieldSpecObj);
        }
        public static string NutanixMounts(NutanixLiveMountConnection fieldSpec)
        {
            return NutanixMounts_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixMounts(object fieldSpecObj)
        {
            return NutanixMounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixMountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixLiveMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixPrismCentral? NutanixPrismCentral
        // GraphQL -> nutanixPrismCentral: NutanixPrismCentral! (type)
        public static string NutanixPrismCentral_TypedFieldSpec(NutanixPrismCentral fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nutanixPrismCentral" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixPrismCentral_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixPrismCentral((NutanixPrismCentral)fieldSpecObj);
        }
        public static string NutanixPrismCentral(NutanixPrismCentral fieldSpec)
        {
            return NutanixPrismCentral_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixPrismCentral(object fieldSpecObj)
        {
            return NutanixPrismCentral_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixPrismCentralFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixPrismCentral() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixPrismCentralConnection? NutanixPrismCentrals
        // GraphQL -> nutanixPrismCentrals: NutanixPrismCentralConnection! (type)
        public static string NutanixPrismCentrals_TypedFieldSpec(NutanixPrismCentralConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "nutanixPrismCentrals" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixPrismCentrals_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixPrismCentrals((NutanixPrismCentralConnection)fieldSpecObj);
        }
        public static string NutanixPrismCentrals(NutanixPrismCentralConnection fieldSpec)
        {
            return NutanixPrismCentrals_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixPrismCentrals(object fieldSpecObj)
        {
            return NutanixPrismCentrals_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixPrismCentralsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixPrismCentralConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixVmSnapshotDetail? NutanixSnapshotDetail
        // GraphQL -> nutanixSnapshotDetail: NutanixVmSnapshotDetail! (type)
        public static string NutanixSnapshotDetail_TypedFieldSpec(NutanixVmSnapshotDetail fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nutanixSnapshotDetail" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixSnapshotDetail_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixSnapshotDetail((NutanixVmSnapshotDetail)fieldSpecObj);
        }
        public static string NutanixSnapshotDetail(NutanixVmSnapshotDetail fieldSpec)
        {
            return NutanixSnapshotDetail_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixSnapshotDetail(object fieldSpecObj)
        {
            return NutanixSnapshotDetail_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixSnapshotDetailFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixVmSnapshotDetail() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmHierarchyObjectConnection? NutanixTopLevelDescendants
        // GraphQL -> nutanixTopLevelDescendants: CdmHierarchyObjectConnection! (type)
        public static string NutanixTopLevelDescendants_TypedFieldSpec(CdmHierarchyObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\ntypeFilter: $typeFilter\nfilter: $filter\n)";
            return "nutanixTopLevelDescendants" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixTopLevelDescendants_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixTopLevelDescendants((CdmHierarchyObjectConnection)fieldSpecObj);
        }
        public static string NutanixTopLevelDescendants(CdmHierarchyObjectConnection fieldSpec)
        {
            return NutanixTopLevelDescendants_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixTopLevelDescendants(object fieldSpecObj)
        {
            return NutanixTopLevelDescendants_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixTopLevelDescendantsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmHierarchyObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixVm? NutanixVm
        // GraphQL -> nutanixVm: NutanixVm! (type)
        public static string NutanixVm_TypedFieldSpec(NutanixVm fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "nutanixVm" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixVm_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixVm((NutanixVm)fieldSpecObj);
        }
        public static string NutanixVm(NutanixVm fieldSpec)
        {
            return NutanixVm_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixVm(object fieldSpecObj)
        {
            return NutanixVm_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixVmFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixVm() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? NutanixVmAsyncRequestStatus
        // GraphQL -> nutanixVmAsyncRequestStatus: AsyncRequestStatus! (type)
        public static string NutanixVmAsyncRequestStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nutanixVmAsyncRequestStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixVmAsyncRequestStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixVmAsyncRequestStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string NutanixVmAsyncRequestStatus(AsyncRequestStatus fieldSpec)
        {
            return NutanixVmAsyncRequestStatus_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixVmAsyncRequestStatus(object fieldSpecObj)
        {
            return NutanixVmAsyncRequestStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixVmAsyncRequestStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MissedSnapshotListResponse? NutanixVmMissedSnapshots
        // GraphQL -> nutanixVmMissedSnapshots: MissedSnapshotListResponse! (type)
        public static string NutanixVmMissedSnapshots_TypedFieldSpec(MissedSnapshotListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "nutanixVmMissedSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixVmMissedSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixVmMissedSnapshots((MissedSnapshotListResponse)fieldSpecObj);
        }
        public static string NutanixVmMissedSnapshots(MissedSnapshotListResponse fieldSpec)
        {
            return NutanixVmMissedSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixVmMissedSnapshots(object fieldSpecObj)
        {
            return NutanixVmMissedSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixVmMissedSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MissedSnapshotListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NutanixVmConnection? NutanixVms
        // GraphQL -> nutanixVms: NutanixVmConnection! (type)
        public static string NutanixVms_TypedFieldSpec(NutanixVmConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "nutanixVms" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string NutanixVms_ObjectFieldSpec(object fieldSpecObj)
        {
            return NutanixVms((NutanixVmConnection)fieldSpecObj);
        }
        public static string NutanixVms(NutanixVmConnection fieldSpec)
        {
            return NutanixVms_TypedFieldSpec(fieldSpec);
        }
        public static string NutanixVms(object fieldSpecObj)
        {
            return NutanixVms_ObjectFieldSpec(fieldSpecObj);
        }
        public static object NutanixVmsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NutanixVmConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365Calendar? O365Calendar
        // GraphQL -> o365Calendar: O365Calendar! (type)
        public static string O365Calendar_TypedFieldSpec(O365Calendar fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "o365Calendar" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Calendar_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Calendar((O365Calendar)fieldSpecObj);
        }
        public static string O365Calendar(O365Calendar fieldSpec)
        {
            return O365Calendar_TypedFieldSpec(fieldSpec);
        }
        public static string O365Calendar(object fieldSpecObj)
        {
            return O365Calendar_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365CalendarFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365Calendar() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365GroupConnection? O365Groups
        // GraphQL -> o365Groups: O365GroupConnection! (type)
        public static string O365Groups_TypedFieldSpec(O365GroupConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\no365OrgId: $o365OrgId\nsnappableType: $snappableType\n)";
            return "o365Groups" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Groups_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Groups((O365GroupConnection)fieldSpecObj);
        }
        public static string O365Groups(O365GroupConnection fieldSpec)
        {
            return O365Groups_TypedFieldSpec(fieldSpec);
        }
        public static string O365Groups(object fieldSpecObj)
        {
            return O365Groups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365GroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365GroupConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365License? O365License
        // GraphQL -> o365License: O365License! (type)
        public static string O365License_TypedFieldSpec(O365License fieldSpec)
        {
            string args = "";
            return "o365License" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365License_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365License((O365License)fieldSpecObj);
        }
        public static string O365License(O365License fieldSpec)
        {
            return O365License_TypedFieldSpec(fieldSpec);
        }
        public static string O365License(object fieldSpecObj)
        {
            return O365License_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365LicenseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365License() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365Mailbox? O365Mailbox
        // GraphQL -> o365Mailbox: O365Mailbox! (type)
        public static string O365Mailbox_TypedFieldSpec(O365Mailbox fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "o365Mailbox" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Mailbox_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Mailbox((O365Mailbox)fieldSpecObj);
        }
        public static string O365Mailbox(O365Mailbox fieldSpec)
        {
            return O365Mailbox_TypedFieldSpec(fieldSpec);
        }
        public static string O365Mailbox(object fieldSpecObj)
        {
            return O365Mailbox_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365MailboxFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365Mailbox() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365MailboxConnection? O365Mailboxes
        // GraphQL -> o365Mailboxes: O365MailboxConnection! (type)
        public static string O365Mailboxes_TypedFieldSpec(O365MailboxConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\no365OrgId: $o365OrgId\n)";
            return "o365Mailboxes" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Mailboxes_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Mailboxes((O365MailboxConnection)fieldSpecObj);
        }
        public static string O365Mailboxes(O365MailboxConnection fieldSpec)
        {
            return O365Mailboxes_TypedFieldSpec(fieldSpec);
        }
        public static string O365Mailboxes(object fieldSpecObj)
        {
            return O365Mailboxes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365MailboxesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365MailboxConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetImplicitlyAuthorizedAncestorSummariesResponse? O365ObjectAncestors
        // GraphQL -> o365ObjectAncestors: GetImplicitlyAuthorizedAncestorSummariesResponse! (type)
        public static string O365ObjectAncestors_TypedFieldSpec(GetImplicitlyAuthorizedAncestorSummariesResponse fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "o365ObjectAncestors" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365ObjectAncestors_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365ObjectAncestors((GetImplicitlyAuthorizedAncestorSummariesResponse)fieldSpecObj);
        }
        public static string O365ObjectAncestors(GetImplicitlyAuthorizedAncestorSummariesResponse fieldSpec)
        {
            return O365ObjectAncestors_TypedFieldSpec(fieldSpec);
        }
        public static string O365ObjectAncestors(object fieldSpecObj)
        {
            return O365ObjectAncestors_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365ObjectAncestorsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetImplicitlyAuthorizedAncestorSummariesResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365Onedrive? O365Onedrive
        // GraphQL -> o365Onedrive: O365Onedrive! (type)
        public static string O365Onedrive_TypedFieldSpec(O365Onedrive fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "o365Onedrive" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Onedrive_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Onedrive((O365Onedrive)fieldSpecObj);
        }
        public static string O365Onedrive(O365Onedrive fieldSpec)
        {
            return O365Onedrive_TypedFieldSpec(fieldSpec);
        }
        public static string O365Onedrive(object fieldSpecObj)
        {
            return O365Onedrive_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365OnedriveFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365Onedrive() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveConnection? O365Onedrives
        // GraphQL -> o365Onedrives: O365OnedriveConnection! (type)
        public static string O365Onedrives_TypedFieldSpec(O365OnedriveConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\no365OrgId: $o365OrgId\n)";
            return "o365Onedrives" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Onedrives_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Onedrives((O365OnedriveConnection)fieldSpecObj);
        }
        public static string O365Onedrives(O365OnedriveConnection fieldSpec)
        {
            return O365Onedrives_TypedFieldSpec(fieldSpec);
        }
        public static string O365Onedrives(object fieldSpecObj)
        {
            return O365Onedrives_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365OnedrivesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365Org? O365Org
        // GraphQL -> o365Org: O365Org! (type)
        public static string O365Org_TypedFieldSpec(O365Org fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "o365Org" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Org_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Org((O365Org)fieldSpecObj);
        }
        public static string O365Org(O365Org fieldSpec)
        {
            return O365Org_TypedFieldSpec(fieldSpec);
        }
        public static string O365Org(object fieldSpecObj)
        {
            return O365Org_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365OrgFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365Org() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365Org? O365OrgAtSnappableLevel
        // GraphQL -> o365OrgAtSnappableLevel: O365Org! (type)
        public static string O365OrgAtSnappableLevel_TypedFieldSpec(O365Org fieldSpec)
        {
            string args = "\n(\nfid: $fid\nsnappableType: $snappableType\n)";
            return "o365OrgAtSnappableLevel" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365OrgAtSnappableLevel_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365OrgAtSnappableLevel((O365Org)fieldSpecObj);
        }
        public static string O365OrgAtSnappableLevel(O365Org fieldSpec)
        {
            return O365OrgAtSnappableLevel_TypedFieldSpec(fieldSpec);
        }
        public static string O365OrgAtSnappableLevel(object fieldSpecObj)
        {
            return O365OrgAtSnappableLevel_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365OrgAtSnappableLevelFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365Org() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetImplicitlyAuthorizedObjectSummariesResponse? O365OrgSummaries
        // GraphQL -> o365OrgSummaries: GetImplicitlyAuthorizedObjectSummariesResponse! (type)
        public static string O365OrgSummaries_TypedFieldSpec(GetImplicitlyAuthorizedObjectSummariesResponse fieldSpec)
        {
            string args = "";
            return "o365OrgSummaries" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365OrgSummaries_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365OrgSummaries((GetImplicitlyAuthorizedObjectSummariesResponse)fieldSpecObj);
        }
        public static string O365OrgSummaries(GetImplicitlyAuthorizedObjectSummariesResponse fieldSpec)
        {
            return O365OrgSummaries_TypedFieldSpec(fieldSpec);
        }
        public static string O365OrgSummaries(object fieldSpecObj)
        {
            return O365OrgSummaries_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365OrgSummariesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetImplicitlyAuthorizedObjectSummariesResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OrgConnection? O365Orgs
        // GraphQL -> o365Orgs: O365OrgConnection! (type)
        public static string O365Orgs_TypedFieldSpec(O365OrgConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nworkloadHierarchy: $workloadHierarchy\n)";
            return "o365Orgs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Orgs_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Orgs((O365OrgConnection)fieldSpecObj);
        }
        public static string O365Orgs(O365OrgConnection fieldSpec)
        {
            return O365Orgs_TypedFieldSpec(fieldSpec);
        }
        public static string O365Orgs(object fieldSpecObj)
        {
            return O365Orgs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365OrgsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OrgConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ServiceAccountStatusResp? O365ServiceAccount
        // GraphQL -> o365ServiceAccount: O365ServiceAccountStatusResp! (type)
        public static string O365ServiceAccount_TypedFieldSpec(O365ServiceAccountStatusResp fieldSpec)
        {
            string args = "\n(\norgId: $orgId\n)";
            return "o365ServiceAccount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365ServiceAccount_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365ServiceAccount((O365ServiceAccountStatusResp)fieldSpecObj);
        }
        public static string O365ServiceAccount(O365ServiceAccountStatusResp fieldSpec)
        {
            return O365ServiceAccount_TypedFieldSpec(fieldSpec);
        }
        public static string O365ServiceAccount(object fieldSpecObj)
        {
            return O365ServiceAccount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365ServiceAccountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ServiceAccountStatusResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetO365ServiceStatusResp? O365ServiceStatus
        // GraphQL -> o365ServiceStatus: GetO365ServiceStatusResp! (type)
        public static string O365ServiceStatus_TypedFieldSpec(GetO365ServiceStatusResp fieldSpec)
        {
            string args = "\n(\norgID: $orgID\n)";
            return "o365ServiceStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365ServiceStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365ServiceStatus((GetO365ServiceStatusResp)fieldSpecObj);
        }
        public static string O365ServiceStatus(GetO365ServiceStatusResp fieldSpec)
        {
            return O365ServiceStatus_TypedFieldSpec(fieldSpec);
        }
        public static string O365ServiceStatus(object fieldSpecObj)
        {
            return O365ServiceStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365ServiceStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetO365ServiceStatusResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365SharepointDrive? O365SharepointDrive
        // GraphQL -> o365SharepointDrive: O365SharepointDrive! (type)
        public static string O365SharepointDrive_TypedFieldSpec(O365SharepointDrive fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "o365SharepointDrive" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365SharepointDrive_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365SharepointDrive((O365SharepointDrive)fieldSpecObj);
        }
        public static string O365SharepointDrive(O365SharepointDrive fieldSpec)
        {
            return O365SharepointDrive_TypedFieldSpec(fieldSpec);
        }
        public static string O365SharepointDrive(object fieldSpecObj)
        {
            return O365SharepointDrive_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SharepointDriveFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365SharepointDrive() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365SharepointDriveConnection? O365SharepointDrives
        // GraphQL -> o365SharepointDrives: O365SharepointDriveConnection! (type)
        public static string O365SharepointDrives_TypedFieldSpec(O365SharepointDriveConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\no365OrgId: $o365OrgId\n)";
            return "o365SharepointDrives" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365SharepointDrives_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365SharepointDrives((O365SharepointDriveConnection)fieldSpecObj);
        }
        public static string O365SharepointDrives(O365SharepointDriveConnection fieldSpec)
        {
            return O365SharepointDrives_TypedFieldSpec(fieldSpec);
        }
        public static string O365SharepointDrives(object fieldSpecObj)
        {
            return O365SharepointDrives_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SharepointDrivesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365SharepointDriveConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365SharepointList? O365SharepointList
        // GraphQL -> o365SharepointList: O365SharepointList! (type)
        public static string O365SharepointList_TypedFieldSpec(O365SharepointList fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "o365SharepointList" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365SharepointList_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365SharepointList((O365SharepointList)fieldSpecObj);
        }
        public static string O365SharepointList(O365SharepointList fieldSpec)
        {
            return O365SharepointList_TypedFieldSpec(fieldSpec);
        }
        public static string O365SharepointList(object fieldSpecObj)
        {
            return O365SharepointList_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SharepointListFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365SharepointList() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365SharepointListConnection? O365SharepointLists
        // GraphQL -> o365SharepointLists: O365SharepointListConnection! (type)
        public static string O365SharepointLists_TypedFieldSpec(O365SharepointListConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\no365OrgId: $o365OrgId\n)";
            return "o365SharepointLists" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365SharepointLists_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365SharepointLists((O365SharepointListConnection)fieldSpecObj);
        }
        public static string O365SharepointLists(O365SharepointListConnection fieldSpec)
        {
            return O365SharepointLists_TypedFieldSpec(fieldSpec);
        }
        public static string O365SharepointLists(object fieldSpecObj)
        {
            return O365SharepointLists_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SharepointListsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365SharepointListConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365SharepointObjectConnection? O365SharepointObjectList
        // GraphQL -> o365SharepointObjectList: O365SharepointObjectConnection! (type)
        public static string O365SharepointObjectList_TypedFieldSpec(O365SharepointObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nobjectTypeFilter: $objectTypeFilter\nincludeEntireHierarchy: $includeEntireHierarchy\nfid: $fid\n)";
            return "o365SharepointObjectList" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365SharepointObjectList_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365SharepointObjectList((O365SharepointObjectConnection)fieldSpecObj);
        }
        public static string O365SharepointObjectList(O365SharepointObjectConnection fieldSpec)
        {
            return O365SharepointObjectList_TypedFieldSpec(fieldSpec);
        }
        public static string O365SharepointObjectList(object fieldSpecObj)
        {
            return O365SharepointObjectList_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SharepointObjectListFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365SharepointObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365SharepointObjectConnection? O365SharepointObjects
        // GraphQL -> o365SharepointObjects: O365SharepointObjectConnection! (type)
        public static string O365SharepointObjects_TypedFieldSpec(O365SharepointObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nfid: $fid\n)";
            return "o365SharepointObjects" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365SharepointObjects_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365SharepointObjects((O365SharepointObjectConnection)fieldSpecObj);
        }
        public static string O365SharepointObjects(O365SharepointObjectConnection fieldSpec)
        {
            return O365SharepointObjects_TypedFieldSpec(fieldSpec);
        }
        public static string O365SharepointObjects(object fieldSpecObj)
        {
            return O365SharepointObjects_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SharepointObjectsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365SharepointObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365Site? O365SharepointSite
        // GraphQL -> o365SharepointSite: O365Site! (type)
        public static string O365SharepointSite_TypedFieldSpec(O365Site fieldSpec)
        {
            string args = "\n(\nsiteFid: $siteFid\n)";
            return "o365SharepointSite" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365SharepointSite_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365SharepointSite((O365Site)fieldSpecObj);
        }
        public static string O365SharepointSite(O365Site fieldSpec)
        {
            return O365SharepointSite_TypedFieldSpec(fieldSpec);
        }
        public static string O365SharepointSite(object fieldSpecObj)
        {
            return O365SharepointSite_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SharepointSiteFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365Site() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365SiteConnection? O365SharepointSites
        // GraphQL -> o365SharepointSites: O365SiteConnection! (type)
        public static string O365SharepointSites_TypedFieldSpec(O365SiteConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\no365OrgId: $o365OrgId\n)";
            return "o365SharepointSites" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365SharepointSites_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365SharepointSites((O365SiteConnection)fieldSpecObj);
        }
        public static string O365SharepointSites(O365SiteConnection fieldSpec)
        {
            return O365SharepointSites_TypedFieldSpec(fieldSpec);
        }
        public static string O365SharepointSites(object fieldSpecObj)
        {
            return O365SharepointSites_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SharepointSitesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365SiteConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365Site? O365Site
        // GraphQL -> o365Site: O365Site! (type)
        public static string O365Site_TypedFieldSpec(O365Site fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "o365Site" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Site_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Site((O365Site)fieldSpecObj);
        }
        public static string O365Site(O365Site fieldSpec)
        {
            return O365Site_TypedFieldSpec(fieldSpec);
        }
        public static string O365Site(object fieldSpecObj)
        {
            return O365Site_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SiteFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365Site() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365SiteConnection? O365Sites
        // GraphQL -> o365Sites: O365SiteConnection! (type)
        public static string O365Sites_TypedFieldSpec(O365SiteConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\no365OrgId: $o365OrgId\nexcludeChildSites: $excludeChildSites\n)";
            return "o365Sites" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Sites_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Sites((O365SiteConnection)fieldSpecObj);
        }
        public static string O365Sites(O365SiteConnection fieldSpec)
        {
            return O365Sites_TypedFieldSpec(fieldSpec);
        }
        public static string O365Sites(object fieldSpecObj)
        {
            return O365Sites_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365SitesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365SiteConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetO365StorageStatsResp? O365StorageStats
        // GraphQL -> o365StorageStats: GetO365StorageStatsResp! (type)
        public static string O365StorageStats_TypedFieldSpec(GetO365StorageStatsResp fieldSpec)
        {
            string args = "\n(\norgID: $orgID\n)";
            return "o365StorageStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365StorageStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365StorageStats((GetO365StorageStatsResp)fieldSpecObj);
        }
        public static string O365StorageStats(GetO365StorageStatsResp fieldSpec)
        {
            return O365StorageStats_TypedFieldSpec(fieldSpec);
        }
        public static string O365StorageStats(object fieldSpecObj)
        {
            return O365StorageStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365StorageStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetO365StorageStatsResp() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365Teams? O365Team
        // GraphQL -> o365Team: O365Teams! (type)
        public static string O365Team_TypedFieldSpec(O365Teams fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\n)";
            return "o365Team" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Team_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Team((O365Teams)fieldSpecObj);
        }
        public static string O365Team(O365Teams fieldSpec)
        {
            return O365Team_TypedFieldSpec(fieldSpec);
        }
        public static string O365Team(object fieldSpecObj)
        {
            return O365Team_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365TeamFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365Teams() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365TeamsChannelConnection? O365TeamChannels
        // GraphQL -> o365TeamChannels: O365TeamsChannelConnection! (type)
        public static string O365TeamChannels_TypedFieldSpec(O365TeamsChannelConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nexcludeArchived: $excludeArchived\nchannelMembershipTypeFilter: $channelMembershipTypeFilter\nnameFilter: $nameFilter\n)";
            return "o365TeamChannels" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365TeamChannels_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365TeamChannels((O365TeamsChannelConnection)fieldSpecObj);
        }
        public static string O365TeamChannels(O365TeamsChannelConnection fieldSpec)
        {
            return O365TeamChannels_TypedFieldSpec(fieldSpec);
        }
        public static string O365TeamChannels(object fieldSpecObj)
        {
            return O365TeamChannels_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365TeamChannelsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365TeamsChannelConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365TeamConversationsSenderConnection? O365TeamPostedBy
        // GraphQL -> o365TeamPostedBy: O365TeamConversationsSenderConnection! (type)
        public static string O365TeamPostedBy_TypedFieldSpec(O365TeamConversationsSenderConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\no365OrgId: $o365OrgId\nnameFilter: $nameFilter\n)";
            return "o365TeamPostedBy" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365TeamPostedBy_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365TeamPostedBy((O365TeamConversationsSenderConnection)fieldSpecObj);
        }
        public static string O365TeamPostedBy(O365TeamConversationsSenderConnection fieldSpec)
        {
            return O365TeamPostedBy_TypedFieldSpec(fieldSpec);
        }
        public static string O365TeamPostedBy(object fieldSpecObj)
        {
            return O365TeamPostedBy_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365TeamPostedByFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365TeamConversationsSenderConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365TeamsConnection? O365Teams
        // GraphQL -> o365Teams: O365TeamsConnection! (type)
        public static string O365Teams_TypedFieldSpec(O365TeamsConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\no365OrgId: $o365OrgId\n)";
            return "o365Teams" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365Teams_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365Teams((O365TeamsConnection)fieldSpecObj);
        }
        public static string O365Teams(O365TeamsConnection fieldSpec)
        {
            return O365Teams_TypedFieldSpec(fieldSpec);
        }
        public static string O365Teams(object fieldSpecObj)
        {
            return O365Teams_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365TeamsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365TeamsConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365User? O365User
        // GraphQL -> o365User: O365User! (type)
        public static string O365User_TypedFieldSpec(O365User fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "o365User" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365User_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365User((O365User)fieldSpecObj);
        }
        public static string O365User(O365User fieldSpec)
        {
            return O365User_TypedFieldSpec(fieldSpec);
        }
        public static string O365User(object fieldSpecObj)
        {
            return O365User_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365UserFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365User() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365UserDescendantMetadataConnection? O365UserObjects
        // GraphQL -> o365UserObjects: O365UserDescendantMetadataConnection! (type)
        public static string O365UserObjects_TypedFieldSpec(O365UserDescendantMetadataConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nfid: $fid\n)";
            return "o365UserObjects" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string O365UserObjects_ObjectFieldSpec(object fieldSpecObj)
        {
            return O365UserObjects((O365UserDescendantMetadataConnection)fieldSpecObj);
        }
        public static string O365UserObjects(O365UserDescendantMetadataConnection fieldSpec)
        {
            return O365UserObjects_TypedFieldSpec(fieldSpec);
        }
        public static string O365UserObjects(object fieldSpecObj)
        {
            return O365UserObjects_ObjectFieldSpec(fieldSpecObj);
        }
        public static object O365UserObjectsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365UserDescendantMetadataConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OauthCodesForEdgeRegReply? OauthCodesForEdgeReg
        // GraphQL -> oauthCodesForEdgeReg: OauthCodesForEdgeRegReply! (type)
        public static string OauthCodesForEdgeReg_TypedFieldSpec(OauthCodesForEdgeRegReply fieldSpec)
        {
            string args = "\n(\nnumberOfEdges: $numberOfEdges\ncdmOvaLink: $cdmOvaLink\n)";
            return "oauthCodesForEdgeReg" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OauthCodesForEdgeReg_ObjectFieldSpec(object fieldSpecObj)
        {
            return OauthCodesForEdgeReg((OauthCodesForEdgeRegReply)fieldSpecObj);
        }
        public static string OauthCodesForEdgeReg(OauthCodesForEdgeRegReply fieldSpec)
        {
            return OauthCodesForEdgeReg_TypedFieldSpec(fieldSpec);
        }
        public static string OauthCodesForEdgeReg(object fieldSpecObj)
        {
            return OauthCodesForEdgeReg_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OauthCodesForEdgeRegFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OauthCodesForEdgeRegReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FileResultConnection? ObjectFiles
        // GraphQL -> objectFiles: FileResultConnection! (type)
        public static string ObjectFiles_TypedFieldSpec(FileResultConnection fieldSpec)
        {
            string args = "\n(\nfilter: $filter\nsort: $sort\nday: $day\ntimezone: $timezone\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "objectFiles" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ObjectFiles_ObjectFieldSpec(object fieldSpecObj)
        {
            return ObjectFiles((FileResultConnection)fieldSpecObj);
        }
        public static string ObjectFiles(FileResultConnection fieldSpec)
        {
            return ObjectFiles_TypedFieldSpec(fieldSpec);
        }
        public static string ObjectFiles(object fieldSpecObj)
        {
            return ObjectFiles_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ObjectFilesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FileResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ObjectTypeAccessSummaryConnection? ObjectTypeAccessSummary
        // GraphQL -> objectTypeAccessSummary: ObjectTypeAccessSummaryConnection! (type)
        public static string ObjectTypeAccessSummary_TypedFieldSpec(ObjectTypeAccessSummaryConnection fieldSpec)
        {
            string args = "\n(\ntimelineDate: $timelineDate\nhistoricalDeltaDays: $historicalDeltaDays\nincludeWhitelistedResults: $includeWhitelistedResults\nsortOrder: $sortOrder\nfilter: $filter\nsort: $sort\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "objectTypeAccessSummary" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ObjectTypeAccessSummary_ObjectFieldSpec(object fieldSpecObj)
        {
            return ObjectTypeAccessSummary((ObjectTypeAccessSummaryConnection)fieldSpecObj);
        }
        public static string ObjectTypeAccessSummary(ObjectTypeAccessSummaryConnection fieldSpec)
        {
            return ObjectTypeAccessSummary_TypedFieldSpec(fieldSpec);
        }
        public static string ObjectTypeAccessSummary(object fieldSpecObj)
        {
            return ObjectTypeAccessSummary_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ObjectTypeAccessSummaryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ObjectTypeAccessSummaryConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleFileDownloadLink? OracleAcoExampleDownloadLink
        // GraphQL -> oracleAcoExampleDownloadLink: OracleFileDownloadLink! (type)
        public static string OracleAcoExampleDownloadLink_TypedFieldSpec(OracleFileDownloadLink fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleAcoExampleDownloadLink" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleAcoExampleDownloadLink_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleAcoExampleDownloadLink((OracleFileDownloadLink)fieldSpecObj);
        }
        public static string OracleAcoExampleDownloadLink(OracleFileDownloadLink fieldSpec)
        {
            return OracleAcoExampleDownloadLink_TypedFieldSpec(fieldSpec);
        }
        public static string OracleAcoExampleDownloadLink(object fieldSpecObj)
        {
            return OracleAcoExampleDownloadLink_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleAcoExampleDownloadLinkFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleFileDownloadLink() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleAcoParameterList? OracleAcoParameters
        // GraphQL -> oracleAcoParameters: OracleAcoParameterList! (type)
        public static string OracleAcoParameters_TypedFieldSpec(OracleAcoParameterList fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleAcoParameters" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleAcoParameters_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleAcoParameters((OracleAcoParameterList)fieldSpecObj);
        }
        public static string OracleAcoParameters(OracleAcoParameterList fieldSpec)
        {
            return OracleAcoParameters_TypedFieldSpec(fieldSpec);
        }
        public static string OracleAcoParameters(object fieldSpecObj)
        {
            return OracleAcoParameters_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleAcoParametersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleAcoParameterList() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleDataGuardGroup? OracleDataGuardGroup
        // GraphQL -> oracleDataGuardGroup: OracleDataGuardGroup! (type)
        public static string OracleDataGuardGroup_TypedFieldSpec(OracleDataGuardGroup fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "oracleDataGuardGroup" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleDataGuardGroup_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleDataGuardGroup((OracleDataGuardGroup)fieldSpecObj);
        }
        public static string OracleDataGuardGroup(OracleDataGuardGroup fieldSpec)
        {
            return OracleDataGuardGroup_TypedFieldSpec(fieldSpec);
        }
        public static string OracleDataGuardGroup(object fieldSpecObj)
        {
            return OracleDataGuardGroup_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleDataGuardGroupFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleDataGuardGroup() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleDatabase? OracleDatabase
        // GraphQL -> oracleDatabase: OracleDatabase! (type)
        public static string OracleDatabase_TypedFieldSpec(OracleDatabase fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "oracleDatabase" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleDatabase_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleDatabase((OracleDatabase)fieldSpecObj);
        }
        public static string OracleDatabase(OracleDatabase fieldSpec)
        {
            return OracleDatabase_TypedFieldSpec(fieldSpec);
        }
        public static string OracleDatabase(object fieldSpecObj)
        {
            return OracleDatabase_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleDatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleDatabase() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? OracleDatabaseAsyncRequestDetails
        // GraphQL -> oracleDatabaseAsyncRequestDetails: AsyncRequestStatus! (type)
        public static string OracleDatabaseAsyncRequestDetails_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleDatabaseAsyncRequestDetails" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleDatabaseAsyncRequestDetails_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleDatabaseAsyncRequestDetails((AsyncRequestStatus)fieldSpecObj);
        }
        public static string OracleDatabaseAsyncRequestDetails(AsyncRequestStatus fieldSpec)
        {
            return OracleDatabaseAsyncRequestDetails_TypedFieldSpec(fieldSpec);
        }
        public static string OracleDatabaseAsyncRequestDetails(object fieldSpecObj)
        {
            return OracleDatabaseAsyncRequestDetails_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleDatabaseAsyncRequestDetailsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleLogBackupConfig? OracleDatabaseLogBackupConfig
        // GraphQL -> oracleDatabaseLogBackupConfig: OracleLogBackupConfig! (type)
        public static string OracleDatabaseLogBackupConfig_TypedFieldSpec(OracleLogBackupConfig fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleDatabaseLogBackupConfig" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleDatabaseLogBackupConfig_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleDatabaseLogBackupConfig((OracleLogBackupConfig)fieldSpecObj);
        }
        public static string OracleDatabaseLogBackupConfig(OracleLogBackupConfig fieldSpec)
        {
            return OracleDatabaseLogBackupConfig_TypedFieldSpec(fieldSpec);
        }
        public static string OracleDatabaseLogBackupConfig(object fieldSpecObj)
        {
            return OracleDatabaseLogBackupConfig_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleDatabaseLogBackupConfigFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleLogBackupConfig() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleDatabaseConnection? OracleDatabases
        // GraphQL -> oracleDatabases: OracleDatabaseConnection! (type)
        public static string OracleDatabases_TypedFieldSpec(OracleDatabaseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "oracleDatabases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleDatabases_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleDatabases((OracleDatabaseConnection)fieldSpecObj);
        }
        public static string OracleDatabases(OracleDatabaseConnection fieldSpec)
        {
            return OracleDatabases_TypedFieldSpec(fieldSpec);
        }
        public static string OracleDatabases(object fieldSpecObj)
        {
            return OracleDatabases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleDatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleDatabaseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleHost? OracleHost
        // GraphQL -> oracleHost: OracleHost! (type)
        public static string OracleHost_TypedFieldSpec(OracleHost fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "oracleHost" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleHost_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleHost((OracleHost)fieldSpecObj);
        }
        public static string OracleHost(OracleHost fieldSpec)
        {
            return OracleHost_TypedFieldSpec(fieldSpec);
        }
        public static string OracleHost(object fieldSpecObj)
        {
            return OracleHost_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleHostFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleHost() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleLogBackupConfig? OracleHostLogBackupConfig
        // GraphQL -> oracleHostLogBackupConfig: OracleLogBackupConfig! (type)
        public static string OracleHostLogBackupConfig_TypedFieldSpec(OracleLogBackupConfig fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleHostLogBackupConfig" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleHostLogBackupConfig_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleHostLogBackupConfig((OracleLogBackupConfig)fieldSpecObj);
        }
        public static string OracleHostLogBackupConfig(OracleLogBackupConfig fieldSpec)
        {
            return OracleHostLogBackupConfig_TypedFieldSpec(fieldSpec);
        }
        public static string OracleHostLogBackupConfig(object fieldSpecObj)
        {
            return OracleHostLogBackupConfig_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleHostLogBackupConfigFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleLogBackupConfig() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleLiveMountConnection? OracleLiveMounts
        // GraphQL -> oracleLiveMounts: OracleLiveMountConnection! (type)
        public static string OracleLiveMounts_TypedFieldSpec(OracleLiveMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilters: $filters\nsortBy: $sortBy\n)";
            return "oracleLiveMounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleLiveMounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleLiveMounts((OracleLiveMountConnection)fieldSpecObj);
        }
        public static string OracleLiveMounts(OracleLiveMountConnection fieldSpec)
        {
            return OracleLiveMounts_TypedFieldSpec(fieldSpec);
        }
        public static string OracleLiveMounts(object fieldSpecObj)
        {
            return OracleLiveMounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleLiveMountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleLiveMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleMissedRecoverableRangeListResponse? OracleMissedRecoverableRanges
        // GraphQL -> oracleMissedRecoverableRanges: OracleMissedRecoverableRangeListResponse! (type)
        public static string OracleMissedRecoverableRanges_TypedFieldSpec(OracleMissedRecoverableRangeListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleMissedRecoverableRanges" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleMissedRecoverableRanges_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleMissedRecoverableRanges((OracleMissedRecoverableRangeListResponse)fieldSpecObj);
        }
        public static string OracleMissedRecoverableRanges(OracleMissedRecoverableRangeListResponse fieldSpec)
        {
            return OracleMissedRecoverableRanges_TypedFieldSpec(fieldSpec);
        }
        public static string OracleMissedRecoverableRanges(object fieldSpecObj)
        {
            return OracleMissedRecoverableRanges_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleMissedRecoverableRangesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleMissedRecoverableRangeListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> MissedSnapshotListResponse? OracleMissedSnapshots
        // GraphQL -> oracleMissedSnapshots: MissedSnapshotListResponse! (type)
        public static string OracleMissedSnapshots_TypedFieldSpec(MissedSnapshotListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleMissedSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleMissedSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleMissedSnapshots((MissedSnapshotListResponse)fieldSpecObj);
        }
        public static string OracleMissedSnapshots(MissedSnapshotListResponse fieldSpec)
        {
            return OracleMissedSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string OracleMissedSnapshots(object fieldSpecObj)
        {
            return OracleMissedSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleMissedSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new MissedSnapshotListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OraclePdbDetails? OraclePdbDetails
        // GraphQL -> oraclePdbDetails: OraclePdbDetails! (type)
        public static string OraclePdbDetails_TypedFieldSpec(OraclePdbDetails fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oraclePdbDetails" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OraclePdbDetails_ObjectFieldSpec(object fieldSpecObj)
        {
            return OraclePdbDetails((OraclePdbDetails)fieldSpecObj);
        }
        public static string OraclePdbDetails(OraclePdbDetails fieldSpec)
        {
            return OraclePdbDetails_TypedFieldSpec(fieldSpec);
        }
        public static string OraclePdbDetails(object fieldSpecObj)
        {
            return OraclePdbDetails_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OraclePdbDetailsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OraclePdbDetails() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleRac? OracleRac
        // GraphQL -> oracleRac: OracleRac! (type)
        public static string OracleRac_TypedFieldSpec(OracleRac fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "oracleRac" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleRac_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleRac((OracleRac)fieldSpecObj);
        }
        public static string OracleRac(OracleRac fieldSpec)
        {
            return OracleRac_TypedFieldSpec(fieldSpec);
        }
        public static string OracleRac(object fieldSpecObj)
        {
            return OracleRac_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleRacFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleRac() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleLogBackupConfig? OracleRacLogBackupConfig
        // GraphQL -> oracleRacLogBackupConfig: OracleLogBackupConfig! (type)
        public static string OracleRacLogBackupConfig_TypedFieldSpec(OracleLogBackupConfig fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleRacLogBackupConfig" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleRacLogBackupConfig_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleRacLogBackupConfig((OracleLogBackupConfig)fieldSpecObj);
        }
        public static string OracleRacLogBackupConfig(OracleLogBackupConfig fieldSpec)
        {
            return OracleRacLogBackupConfig_TypedFieldSpec(fieldSpec);
        }
        public static string OracleRacLogBackupConfig(object fieldSpecObj)
        {
            return OracleRacLogBackupConfig_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleRacLogBackupConfigFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleLogBackupConfig() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleRecoverableRangeListResponse? OracleRecoverableRanges
        // GraphQL -> oracleRecoverableRanges: OracleRecoverableRangeListResponse! (type)
        public static string OracleRecoverableRanges_TypedFieldSpec(OracleRecoverableRangeListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "oracleRecoverableRanges" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleRecoverableRanges_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleRecoverableRanges((OracleRecoverableRangeListResponse)fieldSpecObj);
        }
        public static string OracleRecoverableRanges(OracleRecoverableRangeListResponse fieldSpec)
        {
            return OracleRecoverableRanges_TypedFieldSpec(fieldSpec);
        }
        public static string OracleRecoverableRanges(object fieldSpecObj)
        {
            return OracleRecoverableRanges_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleRecoverableRangesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleRecoverableRangeListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OracleTopLevelDescendantTypeConnection? OracleTopLevelDescendants
        // GraphQL -> oracleTopLevelDescendants: OracleTopLevelDescendantTypeConnection! (type)
        public static string OracleTopLevelDescendants_TypedFieldSpec(OracleTopLevelDescendantTypeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\ntypeFilter: $typeFilter\nfilter: $filter\n)";
            return "oracleTopLevelDescendants" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OracleTopLevelDescendants_ObjectFieldSpec(object fieldSpecObj)
        {
            return OracleTopLevelDescendants((OracleTopLevelDescendantTypeConnection)fieldSpecObj);
        }
        public static string OracleTopLevelDescendants(OracleTopLevelDescendantTypeConnection fieldSpec)
        {
            return OracleTopLevelDescendants_TypedFieldSpec(fieldSpec);
        }
        public static string OracleTopLevelDescendants(object fieldSpecObj)
        {
            return OracleTopLevelDescendants_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OracleTopLevelDescendantsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OracleTopLevelDescendantTypeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Org? Org
        // GraphQL -> org: Org! (type)
        public static string Org_TypedFieldSpec(Org fieldSpec)
        {
            string args = "\n(\norgId: $orgId\n)";
            return "org" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Org_ObjectFieldSpec(object fieldSpecObj)
        {
            return Org((Org)fieldSpecObj);
        }
        public static string Org(Org fieldSpec)
        {
            return Org_TypedFieldSpec(fieldSpec);
        }
        public static string Org(object fieldSpecObj)
        {
            return Org_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OrgFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Org() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OrgSecurityPolicy? OrgSecurityPolicy
        // GraphQL -> orgSecurityPolicy: OrgSecurityPolicy! (type)
        public static string OrgSecurityPolicy_TypedFieldSpec(OrgSecurityPolicy fieldSpec)
        {
            string args = "";
            return "orgSecurityPolicy" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OrgSecurityPolicy_ObjectFieldSpec(object fieldSpecObj)
        {
            return OrgSecurityPolicy((OrgSecurityPolicy)fieldSpecObj);
        }
        public static string OrgSecurityPolicy(OrgSecurityPolicy fieldSpec)
        {
            return OrgSecurityPolicy_TypedFieldSpec(fieldSpec);
        }
        public static string OrgSecurityPolicy(object fieldSpecObj)
        {
            return OrgSecurityPolicy_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OrgSecurityPolicyFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OrgSecurityPolicy() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OrgConnection? Orgs
        // GraphQL -> orgs: OrgConnection! (type)
        public static string Orgs_TypedFieldSpec(OrgConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nnameFilter: $nameFilter\nmfaEnforcedFilter: $mfaEnforcedFilter\ncrossAccountEnabledFilter: $crossAccountEnabledFilter\n)";
            return "orgs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Orgs_ObjectFieldSpec(object fieldSpecObj)
        {
            return Orgs((OrgConnection)fieldSpecObj);
        }
        public static string Orgs(OrgConnection fieldSpec)
        {
            return Orgs_TypedFieldSpec(fieldSpec);
        }
        public static string Orgs(object fieldSpecObj)
        {
            return Orgs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OrgsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OrgConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OrgsForPrincipalReply? OrgsForPrincipal
        // GraphQL -> orgsForPrincipal: OrgsForPrincipalReply! (type)
        public static string OrgsForPrincipal_TypedFieldSpec(OrgsForPrincipalReply fieldSpec)
        {
            string args = "\n(\norgSearchFilter: $orgSearchFilter\n)";
            return "orgsForPrincipal" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OrgsForPrincipal_ObjectFieldSpec(object fieldSpecObj)
        {
            return OrgsForPrincipal((OrgsForPrincipalReply)fieldSpecObj);
        }
        public static string OrgsForPrincipal(OrgsForPrincipalReply fieldSpec)
        {
            return OrgsForPrincipal_TypedFieldSpec(fieldSpec);
        }
        public static string OrgsForPrincipal(object fieldSpecObj)
        {
            return OrgsForPrincipal_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OrgsForPrincipalFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OrgsForPrincipalReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> OverallRansomwareInvestigationSummary? OverallRansomwareInvestigationSummary
        // GraphQL -> overallRansomwareInvestigationSummary: OverallRansomwareInvestigationSummary! (type)
        public static string OverallRansomwareInvestigationSummary_TypedFieldSpec(OverallRansomwareInvestigationSummary fieldSpec)
        {
            string args = "\n(\nhistoryNumHours: $historyNumHours\n)";
            return "overallRansomwareInvestigationSummary" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string OverallRansomwareInvestigationSummary_ObjectFieldSpec(object fieldSpecObj)
        {
            return OverallRansomwareInvestigationSummary((OverallRansomwareInvestigationSummary)fieldSpecObj);
        }
        public static string OverallRansomwareInvestigationSummary(OverallRansomwareInvestigationSummary fieldSpec)
        {
            return OverallRansomwareInvestigationSummary_TypedFieldSpec(fieldSpec);
        }
        public static string OverallRansomwareInvestigationSummary(object fieldSpecObj)
        {
            return OverallRansomwareInvestigationSummary_ObjectFieldSpec(fieldSpecObj);
        }
        public static object OverallRansomwareInvestigationSummaryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new OverallRansomwareInvestigationSummary() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PasswordComplexityPolicy? PasswordComplexityPolicy
        // GraphQL -> passwordComplexityPolicy: PasswordComplexityPolicy! (type)
        public static string PasswordComplexityPolicy_TypedFieldSpec(PasswordComplexityPolicy fieldSpec)
        {
            string args = "";
            return "passwordComplexityPolicy" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PasswordComplexityPolicy_ObjectFieldSpec(object fieldSpecObj)
        {
            return PasswordComplexityPolicy((PasswordComplexityPolicy)fieldSpecObj);
        }
        public static string PasswordComplexityPolicy(PasswordComplexityPolicy fieldSpec)
        {
            return PasswordComplexityPolicy_TypedFieldSpec(fieldSpec);
        }
        public static string PasswordComplexityPolicy(object fieldSpecObj)
        {
            return PasswordComplexityPolicy_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PasswordComplexityPolicyFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PasswordComplexityPolicy() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PendingAction? PendingAction
        // GraphQL -> pendingAction: pendingAction! (type)
        public static string PendingAction_TypedFieldSpec(PendingAction fieldSpec)
        {
            string args = "\n(\npendingActionId: $pendingActionId\n)";
            return "pendingAction" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PendingAction_ObjectFieldSpec(object fieldSpecObj)
        {
            return PendingAction((PendingAction)fieldSpecObj);
        }
        public static string PendingAction(PendingAction fieldSpec)
        {
            return PendingAction_TypedFieldSpec(fieldSpec);
        }
        public static string PendingAction(object fieldSpecObj)
        {
            return PendingAction_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PendingActionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PendingAction() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PhoenixRolloutProgress? PhoenixRolloutProgress
        // GraphQL -> phoenixRolloutProgress: PhoenixRolloutProgress! (type)
        public static string PhoenixRolloutProgress_TypedFieldSpec(PhoenixRolloutProgress fieldSpec)
        {
            string args = "\n(\norgId: $orgId\n)";
            return "phoenixRolloutProgress" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PhoenixRolloutProgress_ObjectFieldSpec(object fieldSpecObj)
        {
            return PhoenixRolloutProgress((PhoenixRolloutProgress)fieldSpecObj);
        }
        public static string PhoenixRolloutProgress(PhoenixRolloutProgress fieldSpec)
        {
            return PhoenixRolloutProgress_TypedFieldSpec(fieldSpec);
        }
        public static string PhoenixRolloutProgress(object fieldSpecObj)
        {
            return PhoenixRolloutProgress_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PhoenixRolloutProgressFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PhoenixRolloutProgress() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PhysicalHost? PhysicalHost
        // GraphQL -> physicalHost: PhysicalHost! (type)
        public static string PhysicalHost_TypedFieldSpec(PhysicalHost fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "physicalHost" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PhysicalHost_ObjectFieldSpec(object fieldSpecObj)
        {
            return PhysicalHost((PhysicalHost)fieldSpecObj);
        }
        public static string PhysicalHost(PhysicalHost fieldSpec)
        {
            return PhysicalHost_TypedFieldSpec(fieldSpec);
        }
        public static string PhysicalHost(object fieldSpecObj)
        {
            return PhysicalHost_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PhysicalHostFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PhysicalHost() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PhysicalHostConnection? PhysicalHosts
        // GraphQL -> physicalHosts: PhysicalHostConnection! (type)
        public static string PhysicalHosts_TypedFieldSpec(PhysicalHostConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nhostRoot: $hostRoot\nisBulkPolicyAssignmentFlow: $isBulkPolicyAssignmentFlow\n)";
            return "physicalHosts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PhysicalHosts_ObjectFieldSpec(object fieldSpecObj)
        {
            return PhysicalHosts((PhysicalHostConnection)fieldSpecObj);
        }
        public static string PhysicalHosts(PhysicalHostConnection fieldSpec)
        {
            return PhysicalHosts_TypedFieldSpec(fieldSpec);
        }
        public static string PhysicalHosts(object fieldSpecObj)
        {
            return PhysicalHosts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PhysicalHostsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PhysicalHostConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetPipelineHealthReply? PipelineHealthForTimeRange
        // GraphQL -> pipelineHealthForTimeRange: GetPipelineHealthReply! (type)
        public static string PipelineHealthForTimeRange_TypedFieldSpec(GetPipelineHealthReply fieldSpec)
        {
            string args = "\n(\nbeginTime: $beginTime\nendTime: $endTime\n)";
            return "pipelineHealthForTimeRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PipelineHealthForTimeRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return PipelineHealthForTimeRange((GetPipelineHealthReply)fieldSpecObj);
        }
        public static string PipelineHealthForTimeRange(GetPipelineHealthReply fieldSpec)
        {
            return PipelineHealthForTimeRange_TypedFieldSpec(fieldSpec);
        }
        public static string PipelineHealthForTimeRange(object fieldSpecObj)
        {
            return PipelineHealthForTimeRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PipelineHealthForTimeRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetPipelineHealthReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PolarisInventorySubHierarchyRoot? PolarisInventorySubHierarchyRoot
        // GraphQL -> polarisInventorySubHierarchyRoot: PolarisInventorySubHierarchyRoot! (type)
        public static string PolarisInventorySubHierarchyRoot_TypedFieldSpec(PolarisInventorySubHierarchyRoot fieldSpec)
        {
            string args = "\n(\nrootEnum: $rootEnum\n)";
            return "polarisInventorySubHierarchyRoot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PolarisInventorySubHierarchyRoot_ObjectFieldSpec(object fieldSpecObj)
        {
            return PolarisInventorySubHierarchyRoot((PolarisInventorySubHierarchyRoot)fieldSpecObj);
        }
        public static string PolarisInventorySubHierarchyRoot(PolarisInventorySubHierarchyRoot fieldSpec)
        {
            return PolarisInventorySubHierarchyRoot_TypedFieldSpec(fieldSpec);
        }
        public static string PolarisInventorySubHierarchyRoot(object fieldSpecObj)
        {
            return PolarisInventorySubHierarchyRoot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PolarisInventorySubHierarchyRootFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PolarisInventorySubHierarchyRoot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PolarisSnapshot? PolarisSnapshot
        // GraphQL -> polarisSnapshot: PolarisSnapshot! (type)
        public static string PolarisSnapshot_TypedFieldSpec(PolarisSnapshot fieldSpec)
        {
            string args = "\n(\nsnapshotFid: $snapshotFid\n)";
            return "polarisSnapshot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PolarisSnapshot_ObjectFieldSpec(object fieldSpecObj)
        {
            return PolarisSnapshot((PolarisSnapshot)fieldSpecObj);
        }
        public static string PolarisSnapshot(PolarisSnapshot fieldSpec)
        {
            return PolarisSnapshot_TypedFieldSpec(fieldSpec);
        }
        public static string PolarisSnapshot(object fieldSpecObj)
        {
            return PolarisSnapshot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PolarisSnapshotFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PolarisSnapshot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClassificationPolicyDetailConnection? Policies
        // GraphQL -> policies: ClassificationPolicyDetailConnection! (type)
        public static string Policies_TypedFieldSpec(ClassificationPolicyDetailConnection fieldSpec)
        {
            string args = "\n(\npolicyObjectFilter: $policyObjectFilter\nexcludeHierarchyObjectList: $excludeHierarchyObjectList\n)";
            return "policies" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Policies_ObjectFieldSpec(object fieldSpecObj)
        {
            return Policies((ClassificationPolicyDetailConnection)fieldSpecObj);
        }
        public static string Policies(ClassificationPolicyDetailConnection fieldSpec)
        {
            return Policies_TypedFieldSpec(fieldSpec);
        }
        public static string Policies(object fieldSpecObj)
        {
            return Policies_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PoliciesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClassificationPolicyDetailConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClassificationPolicyDetail? Policy
        // GraphQL -> policy: ClassificationPolicyDetail! (type)
        public static string Policy_TypedFieldSpec(ClassificationPolicyDetail fieldSpec)
        {
            string args = "\n(\npolicyId: $policyId\nworkloadTypes: $workloadTypes\nsortBy: $sortBy\nsortOrder: $sortOrder\nclusterIdsFilter: $clusterIdsFilter\nreplicationFilter: $replicationFilter\nsearchObjectName: $searchObjectName\nhierarchyAncestorIdFilter: $hierarchyAncestorIdFilter\npolicyAssignmentType: $policyAssignmentType\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "policy" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Policy_ObjectFieldSpec(object fieldSpecObj)
        {
            return Policy((ClassificationPolicyDetail)fieldSpecObj);
        }
        public static string Policy(ClassificationPolicyDetail fieldSpec)
        {
            return Policy_TypedFieldSpec(fieldSpec);
        }
        public static string Policy(object fieldSpecObj)
        {
            return Policy_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PolicyFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClassificationPolicyDetail() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PolicyDetailConnection? PolicyDetails
        // GraphQL -> policyDetails: PolicyDetailConnection! (type)
        public static string PolicyDetails_TypedFieldSpec(PolicyDetailConnection fieldSpec)
        {
            string args = "";
            return "policyDetails" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PolicyDetails_ObjectFieldSpec(object fieldSpecObj)
        {
            return PolicyDetails((PolicyDetailConnection)fieldSpecObj);
        }
        public static string PolicyDetails(PolicyDetailConnection fieldSpec)
        {
            return PolicyDetails_TypedFieldSpec(fieldSpec);
        }
        public static string PolicyDetails(object fieldSpecObj)
        {
            return PolicyDetails_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PolicyDetailsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PolicyDetailConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PolicyObj? PolicyObj
        // GraphQL -> policyObj: PolicyObj! (type)
        public static string PolicyObj_TypedFieldSpec(PolicyObj fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\nincludeWhitelistedResults: $includeWhitelistedResults\n)";
            return "policyObj" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PolicyObj_ObjectFieldSpec(object fieldSpecObj)
        {
            return PolicyObj((PolicyObj)fieldSpecObj);
        }
        public static string PolicyObj(PolicyObj fieldSpec)
        {
            return PolicyObj_TypedFieldSpec(fieldSpec);
        }
        public static string PolicyObj(object fieldSpecObj)
        {
            return PolicyObj_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PolicyObjFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PolicyObj() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PolicyObjectUsageConnection? PolicyObjectUsages
        // GraphQL -> policyObjectUsages: PolicyObjectUsageConnection! (type)
        public static string PolicyObjectUsages_TypedFieldSpec(PolicyObjectUsageConnection fieldSpec)
        {
            string args = "\n(\nobjectIds: $objectIds\n)";
            return "policyObjectUsages" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PolicyObjectUsages_ObjectFieldSpec(object fieldSpecObj)
        {
            return PolicyObjectUsages((PolicyObjectUsageConnection)fieldSpecObj);
        }
        public static string PolicyObjectUsages(PolicyObjectUsageConnection fieldSpec)
        {
            return PolicyObjectUsages_TypedFieldSpec(fieldSpec);
        }
        public static string PolicyObjectUsages(object fieldSpecObj)
        {
            return PolicyObjectUsages_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PolicyObjectUsagesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PolicyObjectUsageConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PolicyObjConnection? PolicyObjs
        // GraphQL -> policyObjs: PolicyObjConnection! (type)
        public static string PolicyObjs_TypedFieldSpec(PolicyObjConnection fieldSpec)
        {
            string args = "\n(\nday: $day\ntimezone: $timezone\nworkloadTypes: $workloadTypes\nsortBy: $sortBy\nsortOrder: $sortOrder\nanalysisStatusesFilter: $analysisStatusesFilter\npolicyIdsFilter: $policyIdsFilter\nriskLevelsFilter: $riskLevelsFilter\nclusterIdsFilter: $clusterIdsFilter\nsearchObjectName: $searchObjectName\nsubscriptionIdsFilter: $subscriptionIdsFilter\nincludeWhitelistedResults: $includeWhitelistedResults\nsids: $sids\ninsightsMetadataId: $insightsMetadataId\nincludeInsightsMarker: $includeInsightsMarker\nuserAccessObjectsFilter: $userAccessObjectsFilter\nobjectIdsFilter: $objectIdsFilter\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "policyObjs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PolicyObjs_ObjectFieldSpec(object fieldSpecObj)
        {
            return PolicyObjs((PolicyObjConnection)fieldSpecObj);
        }
        public static string PolicyObjs(PolicyObjConnection fieldSpec)
        {
            return PolicyObjs_TypedFieldSpec(fieldSpec);
        }
        public static string PolicyObjs(object fieldSpecObj)
        {
            return PolicyObjs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PolicyObjsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PolicyObjConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PrechecksStatusReply? PrechecksStatus
        // GraphQL -> prechecksStatus: PrechecksStatusReply! (type)
        public static string PrechecksStatus_TypedFieldSpec(PrechecksStatusReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "prechecksStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PrechecksStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return PrechecksStatus((PrechecksStatusReply)fieldSpecObj);
        }
        public static string PrechecksStatus(PrechecksStatusReply fieldSpec)
        {
            return PrechecksStatus_TypedFieldSpec(fieldSpec);
        }
        public static string PrechecksStatus(object fieldSpecObj)
        {
            return PrechecksStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PrechecksStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PrechecksStatusReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PrechecksStatusReply? PrechecksStatusWithNextJobInfo
        // GraphQL -> prechecksStatusWithNextJobInfo: PrechecksStatusReply! (type)
        public static string PrechecksStatusWithNextJobInfo_TypedFieldSpec(PrechecksStatusReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "prechecksStatusWithNextJobInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PrechecksStatusWithNextJobInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return PrechecksStatusWithNextJobInfo((PrechecksStatusReply)fieldSpecObj);
        }
        public static string PrechecksStatusWithNextJobInfo(PrechecksStatusReply fieldSpec)
        {
            return PrechecksStatusWithNextJobInfo_TypedFieldSpec(fieldSpec);
        }
        public static string PrechecksStatusWithNextJobInfo(object fieldSpecObj)
        {
            return PrechecksStatusWithNextJobInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PrechecksStatusWithNextJobInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PrechecksStatusReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> PrivateContainerRegistryReplyType? PrivateContainerRegistry
        // GraphQL -> privateContainerRegistry: PrivateContainerRegistryReplyType! (type)
        public static string PrivateContainerRegistry_TypedFieldSpec(PrivateContainerRegistryReplyType fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "privateContainerRegistry" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string PrivateContainerRegistry_ObjectFieldSpec(object fieldSpecObj)
        {
            return PrivateContainerRegistry((PrivateContainerRegistryReplyType)fieldSpecObj);
        }
        public static string PrivateContainerRegistry(PrivateContainerRegistryReplyType fieldSpec)
        {
            return PrivateContainerRegistry_TypedFieldSpec(fieldSpec);
        }
        public static string PrivateContainerRegistry(object fieldSpecObj)
        {
            return PrivateContainerRegistry_ObjectFieldSpec(fieldSpecObj);
        }
        public static object PrivateContainerRegistryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new PrivateContainerRegistryReplyType() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ProcessedRansomwareInvestigationWorkloadCountReply? ProcessedRansomwareInvestigationWorkloadCount
        // GraphQL -> processedRansomwareInvestigationWorkloadCount: ProcessedRansomwareInvestigationWorkloadCountReply! (type)
        public static string ProcessedRansomwareInvestigationWorkloadCount_TypedFieldSpec(ProcessedRansomwareInvestigationWorkloadCountReply fieldSpec)
        {
            string args = "";
            return "processedRansomwareInvestigationWorkloadCount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ProcessedRansomwareInvestigationWorkloadCount_ObjectFieldSpec(object fieldSpecObj)
        {
            return ProcessedRansomwareInvestigationWorkloadCount((ProcessedRansomwareInvestigationWorkloadCountReply)fieldSpecObj);
        }
        public static string ProcessedRansomwareInvestigationWorkloadCount(ProcessedRansomwareInvestigationWorkloadCountReply fieldSpec)
        {
            return ProcessedRansomwareInvestigationWorkloadCount_TypedFieldSpec(fieldSpec);
        }
        public static string ProcessedRansomwareInvestigationWorkloadCount(object fieldSpecObj)
        {
            return ProcessedRansomwareInvestigationWorkloadCount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ProcessedRansomwareInvestigationWorkloadCountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ProcessedRansomwareInvestigationWorkloadCountReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ProductDocumentation? ProductDocumentation
        // GraphQL -> productDocumentation: ProductDocumentation! (type)
        public static string ProductDocumentation_TypedFieldSpec(ProductDocumentation fieldSpec)
        {
            string args = "\n(\nid: $id\n)";
            return "productDocumentation" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ProductDocumentation_ObjectFieldSpec(object fieldSpecObj)
        {
            return ProductDocumentation((ProductDocumentation)fieldSpecObj);
        }
        public static string ProductDocumentation(ProductDocumentation fieldSpec)
        {
            return ProductDocumentation_TypedFieldSpec(fieldSpec);
        }
        public static string ProductDocumentation(object fieldSpecObj)
        {
            return ProductDocumentation_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ProductDocumentationFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ProductDocumentation() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ProtectedObjectsConnection? ProtectedObjectsConnection
        // GraphQL -> protectedObjectsConnection: ProtectedObjectsConnection! (type)
        public static string ProtectedObjectsConnection_TypedFieldSpec(ProtectedObjectsConnection fieldSpec)
        {
            string args = "\n(\nrootOptionalFid: $rootOptionalFid\nslaIds: $slaIds\nfilter: $filter\nobjectTypeFilter: $objectTypeFilter\nsortBy: $sortBy\nsortOrder: $sortOrder\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "protectedObjectsConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ProtectedObjectsConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return ProtectedObjectsConnection((ProtectedObjectsConnection)fieldSpecObj);
        }
        public static string ProtectedObjectsConnection(ProtectedObjectsConnection fieldSpec)
        {
            return ProtectedObjectsConnection_TypedFieldSpec(fieldSpec);
        }
        public static string ProtectedObjectsConnection(object fieldSpecObj)
        {
            return ProtectedObjectsConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ProtectedObjectsConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ProtectedObjectsConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> QueryDatastoreFreespaceThresholdsReply? QueryDatastoreFreespaceThresholds
        // GraphQL -> queryDatastoreFreespaceThresholds: QueryDatastoreFreespaceThresholdsReply! (type)
        public static string QueryDatastoreFreespaceThresholds_TypedFieldSpec(QueryDatastoreFreespaceThresholdsReply fieldSpec)
        {
            string args = "\n(\nqueryDatastoreFreespaceThresholdsInput: $queryDatastoreFreespaceThresholdsInput\n)";
            return "queryDatastoreFreespaceThresholds" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string QueryDatastoreFreespaceThresholds_ObjectFieldSpec(object fieldSpecObj)
        {
            return QueryDatastoreFreespaceThresholds((QueryDatastoreFreespaceThresholdsReply)fieldSpecObj);
        }
        public static string QueryDatastoreFreespaceThresholds(QueryDatastoreFreespaceThresholdsReply fieldSpec)
        {
            return QueryDatastoreFreespaceThresholds_TypedFieldSpec(fieldSpec);
        }
        public static string QueryDatastoreFreespaceThresholds(object fieldSpecObj)
        {
            return QueryDatastoreFreespaceThresholds_ObjectFieldSpec(fieldSpecObj);
        }
        public static object QueryDatastoreFreespaceThresholdsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new QueryDatastoreFreespaceThresholdsReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterConnection? RadarClusterConnection
        // GraphQL -> radarClusterConnection: ClusterConnection! (type)
        public static string RadarClusterConnection_TypedFieldSpec(ClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\nsortOrder: $sortOrder\nsortBy: $sortBy\n)";
            return "radarClusterConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RadarClusterConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return RadarClusterConnection((ClusterConnection)fieldSpecObj);
        }
        public static string RadarClusterConnection(ClusterConnection fieldSpec)
        {
            return RadarClusterConnection_TypedFieldSpec(fieldSpec);
        }
        public static string RadarClusterConnection(object fieldSpecObj)
        {
            return RadarClusterConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RadarClusterConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ListLocationsReply? RansomwareDetectionWorkloadLocations
        // GraphQL -> ransomwareDetectionWorkloadLocations: ListLocationsReply! (type)
        public static string RansomwareDetectionWorkloadLocations_TypedFieldSpec(ListLocationsReply fieldSpec)
        {
            string args = "\n(\nbeginTime: $beginTime\nendTime: $endTime\nreturnOnlyForAnomalousEntities: $returnOnlyForAnomalousEntities\n)";
            return "ransomwareDetectionWorkloadLocations" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RansomwareDetectionWorkloadLocations_ObjectFieldSpec(object fieldSpecObj)
        {
            return RansomwareDetectionWorkloadLocations((ListLocationsReply)fieldSpecObj);
        }
        public static string RansomwareDetectionWorkloadLocations(ListLocationsReply fieldSpec)
        {
            return RansomwareDetectionWorkloadLocations_TypedFieldSpec(fieldSpec);
        }
        public static string RansomwareDetectionWorkloadLocations(object fieldSpecObj)
        {
            return RansomwareDetectionWorkloadLocations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RansomwareDetectionWorkloadLocationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ListLocationsReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RansomwareInvestigationAnalysisSummaryReply? RansomwareInvestigationAnalysisSummary
        // GraphQL -> ransomwareInvestigationAnalysisSummary: RansomwareInvestigationAnalysisSummaryReply! (type)
        public static string RansomwareInvestigationAnalysisSummary_TypedFieldSpec(RansomwareInvestigationAnalysisSummaryReply fieldSpec)
        {
            string args = "\n(\nstartDay: $startDay\nendDay: $endDay\ntimezone: $timezone\nobjectTypeFilter: $objectTypeFilter\nclusterUuidFilter: $clusterUuidFilter\nslaFidFilter: $slaFidFilter\nhideSuspiciousDataIfNonAnomalous: $hideSuspiciousDataIfNonAnomalous\n)";
            return "ransomwareInvestigationAnalysisSummary" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RansomwareInvestigationAnalysisSummary_ObjectFieldSpec(object fieldSpecObj)
        {
            return RansomwareInvestigationAnalysisSummary((RansomwareInvestigationAnalysisSummaryReply)fieldSpecObj);
        }
        public static string RansomwareInvestigationAnalysisSummary(RansomwareInvestigationAnalysisSummaryReply fieldSpec)
        {
            return RansomwareInvestigationAnalysisSummary_TypedFieldSpec(fieldSpec);
        }
        public static string RansomwareInvestigationAnalysisSummary(object fieldSpecObj)
        {
            return RansomwareInvestigationAnalysisSummary_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RansomwareInvestigationAnalysisSummaryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RansomwareInvestigationAnalysisSummaryReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RansomwareInvestigationEnablementReply? RansomwareInvestigationEnablement
        // GraphQL -> ransomwareInvestigationEnablement: RansomwareInvestigationEnablementReply! (type)
        public static string RansomwareInvestigationEnablement_TypedFieldSpec(RansomwareInvestigationEnablementReply fieldSpec)
        {
            string args = "";
            return "ransomwareInvestigationEnablement" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RansomwareInvestigationEnablement_ObjectFieldSpec(object fieldSpecObj)
        {
            return RansomwareInvestigationEnablement((RansomwareInvestigationEnablementReply)fieldSpecObj);
        }
        public static string RansomwareInvestigationEnablement(RansomwareInvestigationEnablementReply fieldSpec)
        {
            return RansomwareInvestigationEnablement_TypedFieldSpec(fieldSpec);
        }
        public static string RansomwareInvestigationEnablement(object fieldSpecObj)
        {
            return RansomwareInvestigationEnablement_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RansomwareInvestigationEnablementFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RansomwareInvestigationEnablementReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RansomwareResult? RansomwareResult
        // GraphQL -> ransomwareResult: RansomwareResult! (type)
        public static string RansomwareResult_TypedFieldSpec(RansomwareResult fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nmanagedId: $managedId\nsnapshotId: $snapshotId\n)";
            return "ransomwareResult" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RansomwareResult_ObjectFieldSpec(object fieldSpecObj)
        {
            return RansomwareResult((RansomwareResult)fieldSpecObj);
        }
        public static string RansomwareResult(RansomwareResult fieldSpec)
        {
            return RansomwareResult_TypedFieldSpec(fieldSpec);
        }
        public static string RansomwareResult(object fieldSpecObj)
        {
            return RansomwareResult_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RansomwareResultFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RansomwareResult() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RansomwareResult? RansomwareResultOpt
        // GraphQL -> ransomwareResultOpt: RansomwareResult (type)
        public static string RansomwareResultOpt_TypedFieldSpec(RansomwareResult fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nmanagedId: $managedId\nsnapshotId: $snapshotId\n)";
            return "ransomwareResultOpt" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RansomwareResultOpt_ObjectFieldSpec(object fieldSpecObj)
        {
            return RansomwareResultOpt((RansomwareResult)fieldSpecObj);
        }
        public static string RansomwareResultOpt(RansomwareResult fieldSpec)
        {
            return RansomwareResultOpt_TypedFieldSpec(fieldSpec);
        }
        public static string RansomwareResultOpt(object fieldSpecObj)
        {
            return RansomwareResultOpt_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RansomwareResultOptFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RansomwareResult() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RansomwareResultConnection? RansomwareResults
        // GraphQL -> ransomwareResults: RansomwareResultConnection! (type)
        public static string RansomwareResults_TypedFieldSpec(RansomwareResultConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nfilter: $filter\ntimezoneOffset: $timezoneOffset\n)";
            return "ransomwareResults" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RansomwareResults_ObjectFieldSpec(object fieldSpecObj)
        {
            return RansomwareResults((RansomwareResultConnection)fieldSpecObj);
        }
        public static string RansomwareResults(RansomwareResultConnection fieldSpec)
        {
            return RansomwareResults_TypedFieldSpec(fieldSpec);
        }
        public static string RansomwareResults(object fieldSpecObj)
        {
            return RansomwareResults_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RansomwareResultsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RansomwareResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RansomwareResultGroupedDataConnection? RansomwareResultsGrouped
        // GraphQL -> ransomwareResultsGrouped: RansomwareResultGroupedDataConnection! (type)
        public static string RansomwareResultsGrouped_TypedFieldSpec(RansomwareResultGroupedDataConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ngroupBy: $groupBy\nfilter: $filter\ntimezoneOffset: $timezoneOffset\n)";
            return "ransomwareResultsGrouped" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RansomwareResultsGrouped_ObjectFieldSpec(object fieldSpecObj)
        {
            return RansomwareResultsGrouped((RansomwareResultGroupedDataConnection)fieldSpecObj);
        }
        public static string RansomwareResultsGrouped(RansomwareResultGroupedDataConnection fieldSpec)
        {
            return RansomwareResultsGrouped_TypedFieldSpec(fieldSpec);
        }
        public static string RansomwareResultsGrouped(object fieldSpecObj)
        {
            return RansomwareResultsGrouped_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RansomwareResultsGroupedFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RansomwareResultGroupedDataConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RcsAzureArchivalLocationsConsumptionStatsOutput? RcsArchivalLocationsConsumptionStats
        // GraphQL -> rcsArchivalLocationsConsumptionStats: RcsAzureArchivalLocationsConsumptionStatsOutput! (type)
        public static string RcsArchivalLocationsConsumptionStats_TypedFieldSpec(RcsAzureArchivalLocationsConsumptionStatsOutput fieldSpec)
        {
            string args = "\n(\nrcsAzureTargetConsumptionStatsRequest: $rcsAzureTargetConsumptionStatsRequest\n)";
            return "rcsArchivalLocationsConsumptionStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RcsArchivalLocationsConsumptionStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return RcsArchivalLocationsConsumptionStats((RcsAzureArchivalLocationsConsumptionStatsOutput)fieldSpecObj);
        }
        public static string RcsArchivalLocationsConsumptionStats(RcsAzureArchivalLocationsConsumptionStatsOutput fieldSpec)
        {
            return RcsArchivalLocationsConsumptionStats_TypedFieldSpec(fieldSpec);
        }
        public static string RcsArchivalLocationsConsumptionStats(object fieldSpecObj)
        {
            return RcsArchivalLocationsConsumptionStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RcsArchivalLocationsConsumptionStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RcsAzureArchivalLocationsConsumptionStatsOutput() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RcvAccountEntitlement? RcvAccountEntitlement
        // GraphQL -> rcvAccountEntitlement: RcvAccountEntitlement! (type)
        public static string RcvAccountEntitlement_TypedFieldSpec(RcvAccountEntitlement fieldSpec)
        {
            string args = "";
            return "rcvAccountEntitlement" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RcvAccountEntitlement_ObjectFieldSpec(object fieldSpecObj)
        {
            return RcvAccountEntitlement((RcvAccountEntitlement)fieldSpecObj);
        }
        public static string RcvAccountEntitlement(RcvAccountEntitlement fieldSpec)
        {
            return RcvAccountEntitlement_TypedFieldSpec(fieldSpec);
        }
        public static string RcvAccountEntitlement(object fieldSpecObj)
        {
            return RcvAccountEntitlement_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RcvAccountEntitlementFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RcvAccountEntitlement() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RdsInstanceDetailsFromAws? RdsInstanceDetailsFromAws
        // GraphQL -> rdsInstanceDetailsFromAws: RdsInstanceDetailsFromAws! (type)
        public static string RdsInstanceDetailsFromAws_TypedFieldSpec(RdsInstanceDetailsFromAws fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\nrdsInstanceName: $rdsInstanceName\nrdsDatabaseRubrikId: $rdsDatabaseRubrikId\n)";
            return "rdsInstanceDetailsFromAws" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RdsInstanceDetailsFromAws_ObjectFieldSpec(object fieldSpecObj)
        {
            return RdsInstanceDetailsFromAws((RdsInstanceDetailsFromAws)fieldSpecObj);
        }
        public static string RdsInstanceDetailsFromAws(RdsInstanceDetailsFromAws fieldSpec)
        {
            return RdsInstanceDetailsFromAws_TypedFieldSpec(fieldSpec);
        }
        public static string RdsInstanceDetailsFromAws(object fieldSpecObj)
        {
            return RdsInstanceDetailsFromAws_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RdsInstanceDetailsFromAwsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RdsInstanceDetailsFromAws() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> InternalReplicationBandwidthIncomingResponse? ReplicationIncomingStats
        // GraphQL -> replicationIncomingStats: InternalReplicationBandwidthIncomingResponse! (type)
        public static string ReplicationIncomingStats_TypedFieldSpec(InternalReplicationBandwidthIncomingResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "replicationIncomingStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ReplicationIncomingStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return ReplicationIncomingStats((InternalReplicationBandwidthIncomingResponse)fieldSpecObj);
        }
        public static string ReplicationIncomingStats(InternalReplicationBandwidthIncomingResponse fieldSpec)
        {
            return ReplicationIncomingStats_TypedFieldSpec(fieldSpec);
        }
        public static string ReplicationIncomingStats(object fieldSpecObj)
        {
            return ReplicationIncomingStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ReplicationIncomingStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new InternalReplicationBandwidthIncomingResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ReplicationTargetThrottleBypassSummaryListResponse? ReplicationNetworkThrottleBypass
        // GraphQL -> replicationNetworkThrottleBypass: ReplicationTargetThrottleBypassSummaryListResponse! (type)
        public static string ReplicationNetworkThrottleBypass_TypedFieldSpec(ReplicationTargetThrottleBypassSummaryListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "replicationNetworkThrottleBypass" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ReplicationNetworkThrottleBypass_ObjectFieldSpec(object fieldSpecObj)
        {
            return ReplicationNetworkThrottleBypass((ReplicationTargetThrottleBypassSummaryListResponse)fieldSpecObj);
        }
        public static string ReplicationNetworkThrottleBypass(ReplicationTargetThrottleBypassSummaryListResponse fieldSpec)
        {
            return ReplicationNetworkThrottleBypass_TypedFieldSpec(fieldSpec);
        }
        public static string ReplicationNetworkThrottleBypass(object fieldSpecObj)
        {
            return ReplicationNetworkThrottleBypass_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ReplicationNetworkThrottleBypassFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ReplicationTargetThrottleBypassSummaryListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ReplicationNetworkThrottleBypassReply? ReplicationNetworkThrottleBypassById
        // GraphQL -> replicationNetworkThrottleBypassById: ReplicationNetworkThrottleBypassReply! (type)
        public static string ReplicationNetworkThrottleBypassById_TypedFieldSpec(ReplicationNetworkThrottleBypassReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "replicationNetworkThrottleBypassById" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ReplicationNetworkThrottleBypassById_ObjectFieldSpec(object fieldSpecObj)
        {
            return ReplicationNetworkThrottleBypassById((ReplicationNetworkThrottleBypassReply)fieldSpecObj);
        }
        public static string ReplicationNetworkThrottleBypassById(ReplicationNetworkThrottleBypassReply fieldSpec)
        {
            return ReplicationNetworkThrottleBypassById_TypedFieldSpec(fieldSpec);
        }
        public static string ReplicationNetworkThrottleBypassById(object fieldSpecObj)
        {
            return ReplicationNetworkThrottleBypassById_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ReplicationNetworkThrottleBypassByIdFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ReplicationNetworkThrottleBypassReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> InternalReplicationBandwidthOutgoingResponse? ReplicationOutgoingStats
        // GraphQL -> replicationOutgoingStats: InternalReplicationBandwidthOutgoingResponse! (type)
        public static string ReplicationOutgoingStats_TypedFieldSpec(InternalReplicationBandwidthOutgoingResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "replicationOutgoingStats" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ReplicationOutgoingStats_ObjectFieldSpec(object fieldSpecObj)
        {
            return ReplicationOutgoingStats((InternalReplicationBandwidthOutgoingResponse)fieldSpecObj);
        }
        public static string ReplicationOutgoingStats(InternalReplicationBandwidthOutgoingResponse fieldSpec)
        {
            return ReplicationOutgoingStats_TypedFieldSpec(fieldSpec);
        }
        public static string ReplicationOutgoingStats(object fieldSpecObj)
        {
            return ReplicationOutgoingStats_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ReplicationOutgoingStatsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new InternalReplicationBandwidthOutgoingResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ReplicationPairConnection? ReplicationPairs
        // GraphQL -> replicationPairs: ReplicationPairConnection! (type)
        public static string ReplicationPairs_TypedFieldSpec(ReplicationPairConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "replicationPairs" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ReplicationPairs_ObjectFieldSpec(object fieldSpecObj)
        {
            return ReplicationPairs((ReplicationPairConnection)fieldSpecObj);
        }
        public static string ReplicationPairs(ReplicationPairConnection fieldSpec)
        {
            return ReplicationPairs_TypedFieldSpec(fieldSpec);
        }
        public static string ReplicationPairs(object fieldSpecObj)
        {
            return ReplicationPairs_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ReplicationPairsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ReplicationPairConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RowConnection? ReportData
        // GraphQL -> reportData: RowConnection! (type)
        public static string ReportData_TypedFieldSpec(RowConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ndataView: $dataView\ncolumns: $columns\nfilters: $filters\ngroupBy: $groupBy\nsecondaryGroupBy: $secondaryGroupBy\naggregations: $aggregations\nsortBy: $sortBy\nsortOrder: $sortOrder\ntimezone: $timezone\n)";
            return "reportData" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ReportData_ObjectFieldSpec(object fieldSpecObj)
        {
            return ReportData((RowConnection)fieldSpecObj);
        }
        public static string ReportData(RowConnection fieldSpec)
        {
            return ReportData_TypedFieldSpec(fieldSpec);
        }
        public static string ReportData(object fieldSpecObj)
        {
            return ReportData_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ReportDataFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RowConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RoleTemplateConnection? RoleTemplates
        // GraphQL -> roleTemplates: RoleTemplateConnection! (type)
        public static string RoleTemplates_TypedFieldSpec(RoleTemplateConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nnameFilter: $nameFilter\n)";
            return "roleTemplates" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string RoleTemplates_ObjectFieldSpec(object fieldSpecObj)
        {
            return RoleTemplates((RoleTemplateConnection)fieldSpecObj);
        }
        public static string RoleTemplates(RoleTemplateConnection fieldSpec)
        {
            return RoleTemplates_TypedFieldSpec(fieldSpec);
        }
        public static string RoleTemplates(object fieldSpecObj)
        {
            return RoleTemplates_ObjectFieldSpec(fieldSpecObj);
        }
        public static object RoleTemplatesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RoleTemplateConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetS3BucketStateForRecoveryReply? S3BucketStateForRecovery
        // GraphQL -> s3BucketStateForRecovery: GetS3BucketStateForRecoveryReply! (type)
        public static string S3BucketStateForRecovery_TypedFieldSpec(GetS3BucketStateForRecoveryReply fieldSpec)
        {
            string args = "\n(\nbucketName: $bucketName\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\n)";
            return "s3BucketStateForRecovery" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string S3BucketStateForRecovery_ObjectFieldSpec(object fieldSpecObj)
        {
            return S3BucketStateForRecovery((GetS3BucketStateForRecoveryReply)fieldSpecObj);
        }
        public static string S3BucketStateForRecovery(GetS3BucketStateForRecoveryReply fieldSpec)
        {
            return S3BucketStateForRecovery_TypedFieldSpec(fieldSpec);
        }
        public static string S3BucketStateForRecovery(object fieldSpecObj)
        {
            return S3BucketStateForRecovery_ObjectFieldSpec(fieldSpecObj);
        }
        public static object S3BucketStateForRecoveryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetS3BucketStateForRecoveryReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SapHanaDatabase? SapHanaDatabase
        // GraphQL -> sapHanaDatabase: SapHanaDatabase! (type)
        public static string SapHanaDatabase_TypedFieldSpec(SapHanaDatabase fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "sapHanaDatabase" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SapHanaDatabase_ObjectFieldSpec(object fieldSpecObj)
        {
            return SapHanaDatabase((SapHanaDatabase)fieldSpecObj);
        }
        public static string SapHanaDatabase(SapHanaDatabase fieldSpec)
        {
            return SapHanaDatabase_TypedFieldSpec(fieldSpec);
        }
        public static string SapHanaDatabase(object fieldSpecObj)
        {
            return SapHanaDatabase_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SapHanaDatabaseFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SapHanaDatabase() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SapHanaDatabaseConnection? SapHanaDatabases
        // GraphQL -> sapHanaDatabases: SapHanaDatabaseConnection! (type)
        public static string SapHanaDatabases_TypedFieldSpec(SapHanaDatabaseConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "sapHanaDatabases" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SapHanaDatabases_ObjectFieldSpec(object fieldSpecObj)
        {
            return SapHanaDatabases((SapHanaDatabaseConnection)fieldSpecObj);
        }
        public static string SapHanaDatabases(SapHanaDatabaseConnection fieldSpec)
        {
            return SapHanaDatabases_TypedFieldSpec(fieldSpec);
        }
        public static string SapHanaDatabases(object fieldSpecObj)
        {
            return SapHanaDatabases_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SapHanaDatabasesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SapHanaDatabaseConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SapHanaLogSnapshot? SapHanaLogSnapshot
        // GraphQL -> sapHanaLogSnapshot: SapHanaLogSnapshot! (type)
        public static string SapHanaLogSnapshot_TypedFieldSpec(SapHanaLogSnapshot fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "sapHanaLogSnapshot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SapHanaLogSnapshot_ObjectFieldSpec(object fieldSpecObj)
        {
            return SapHanaLogSnapshot((SapHanaLogSnapshot)fieldSpecObj);
        }
        public static string SapHanaLogSnapshot(SapHanaLogSnapshot fieldSpec)
        {
            return SapHanaLogSnapshot_TypedFieldSpec(fieldSpec);
        }
        public static string SapHanaLogSnapshot(object fieldSpecObj)
        {
            return SapHanaLogSnapshot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SapHanaLogSnapshotFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SapHanaLogSnapshot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SapHanaLogSnapshotConnection? SapHanaLogSnapshots
        // GraphQL -> sapHanaLogSnapshots: SapHanaLogSnapshotConnection! (type)
        public static string SapHanaLogSnapshots_TypedFieldSpec(SapHanaLogSnapshotConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilter: $filter\n)";
            return "sapHanaLogSnapshots" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SapHanaLogSnapshots_ObjectFieldSpec(object fieldSpecObj)
        {
            return SapHanaLogSnapshots((SapHanaLogSnapshotConnection)fieldSpecObj);
        }
        public static string SapHanaLogSnapshots(SapHanaLogSnapshotConnection fieldSpec)
        {
            return SapHanaLogSnapshots_TypedFieldSpec(fieldSpec);
        }
        public static string SapHanaLogSnapshots(object fieldSpecObj)
        {
            return SapHanaLogSnapshots_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SapHanaLogSnapshotsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SapHanaLogSnapshotConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SapHanaRecoverableRange? SapHanaRecoverableRange
        // GraphQL -> sapHanaRecoverableRange: SapHanaRecoverableRange! (type)
        public static string SapHanaRecoverableRange_TypedFieldSpec(SapHanaRecoverableRange fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "sapHanaRecoverableRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SapHanaRecoverableRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return SapHanaRecoverableRange((SapHanaRecoverableRange)fieldSpecObj);
        }
        public static string SapHanaRecoverableRange(SapHanaRecoverableRange fieldSpec)
        {
            return SapHanaRecoverableRange_TypedFieldSpec(fieldSpec);
        }
        public static string SapHanaRecoverableRange(object fieldSpecObj)
        {
            return SapHanaRecoverableRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SapHanaRecoverableRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SapHanaRecoverableRange() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SapHanaRecoverableRangeConnection? SapHanaRecoverableRanges
        // GraphQL -> sapHanaRecoverableRanges: SapHanaRecoverableRangeConnection! (type)
        public static string SapHanaRecoverableRanges_TypedFieldSpec(SapHanaRecoverableRangeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilter: $filter\n)";
            return "sapHanaRecoverableRanges" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SapHanaRecoverableRanges_ObjectFieldSpec(object fieldSpecObj)
        {
            return SapHanaRecoverableRanges((SapHanaRecoverableRangeConnection)fieldSpecObj);
        }
        public static string SapHanaRecoverableRanges(SapHanaRecoverableRangeConnection fieldSpec)
        {
            return SapHanaRecoverableRanges_TypedFieldSpec(fieldSpec);
        }
        public static string SapHanaRecoverableRanges(object fieldSpecObj)
        {
            return SapHanaRecoverableRanges_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SapHanaRecoverableRangesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SapHanaRecoverableRangeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SapHanaSystem? SapHanaSystem
        // GraphQL -> sapHanaSystem: SapHanaSystem! (type)
        public static string SapHanaSystem_TypedFieldSpec(SapHanaSystem fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "sapHanaSystem" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SapHanaSystem_ObjectFieldSpec(object fieldSpecObj)
        {
            return SapHanaSystem((SapHanaSystem)fieldSpecObj);
        }
        public static string SapHanaSystem(SapHanaSystem fieldSpec)
        {
            return SapHanaSystem_TypedFieldSpec(fieldSpec);
        }
        public static string SapHanaSystem(object fieldSpecObj)
        {
            return SapHanaSystem_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SapHanaSystemFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SapHanaSystem() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SapHanaSystemConnection? SapHanaSystems
        // GraphQL -> sapHanaSystems: SapHanaSystemConnection! (type)
        public static string SapHanaSystems_TypedFieldSpec(SapHanaSystemConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "sapHanaSystems" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SapHanaSystems_ObjectFieldSpec(object fieldSpecObj)
        {
            return SapHanaSystems((SapHanaSystemConnection)fieldSpecObj);
        }
        public static string SapHanaSystems(SapHanaSystemConnection fieldSpec)
        {
            return SapHanaSystems_TypedFieldSpec(fieldSpec);
        }
        public static string SapHanaSystems(object fieldSpecObj)
        {
            return SapHanaSystems_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SapHanaSystemsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SapHanaSystemConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ScheduledReport? ScheduledReport
        // GraphQL -> scheduledReport: ScheduledReport (type)
        public static string ScheduledReport_TypedFieldSpec(ScheduledReport fieldSpec)
        {
            string args = "\n(\nid: $id\n)";
            return "scheduledReport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ScheduledReport_ObjectFieldSpec(object fieldSpecObj)
        {
            return ScheduledReport((ScheduledReport)fieldSpecObj);
        }
        public static string ScheduledReport(ScheduledReport fieldSpec)
        {
            return ScheduledReport_TypedFieldSpec(fieldSpec);
        }
        public static string ScheduledReport(object fieldSpecObj)
        {
            return ScheduledReport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ScheduledReportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ScheduledReport() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ScheduledReportConnection? ScheduledReports
        // GraphQL -> scheduledReports: ScheduledReportConnection! (type)
        public static string ScheduledReports_TypedFieldSpec(ScheduledReportConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\n)";
            return "scheduledReports" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ScheduledReports_ObjectFieldSpec(object fieldSpecObj)
        {
            return ScheduledReports((ScheduledReportConnection)fieldSpecObj);
        }
        public static string ScheduledReports(ScheduledReportConnection fieldSpec)
        {
            return ScheduledReports_TypedFieldSpec(fieldSpec);
        }
        public static string ScheduledReports(object fieldSpecObj)
        {
            return ScheduledReports_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ScheduledReportsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ScheduledReportConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AzureAdObjectConnection? SearchAzureAdSnapshot
        // GraphQL -> searchAzureAdSnapshot: AzureAdObjectConnection! (type)
        public static string SearchAzureAdSnapshot_TypedFieldSpec(AzureAdObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\ninput: $input\n)";
            return "searchAzureAdSnapshot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SearchAzureAdSnapshot_ObjectFieldSpec(object fieldSpecObj)
        {
            return SearchAzureAdSnapshot((AzureAdObjectConnection)fieldSpecObj);
        }
        public static string SearchAzureAdSnapshot(AzureAdObjectConnection fieldSpec)
        {
            return SearchAzureAdSnapshot_TypedFieldSpec(fieldSpec);
        }
        public static string SearchAzureAdSnapshot(object fieldSpecObj)
        {
            return SearchAzureAdSnapshot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SearchAzureAdSnapshotFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AzureAdObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> DiffResult? SearchFileByPrefix
        // GraphQL -> searchFileByPrefix: DiffResult! (type)
        public static string SearchFileByPrefix_TypedFieldSpec(DiffResult fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nmanagedId: $managedId\nsnapshotId: $snapshotId\nsearchFolderPath: $searchFolderPath\nfilenamePrefix: $filenamePrefix\n)";
            return "searchFileByPrefix" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SearchFileByPrefix_ObjectFieldSpec(object fieldSpecObj)
        {
            return SearchFileByPrefix((DiffResult)fieldSpecObj);
        }
        public static string SearchFileByPrefix(DiffResult fieldSpec)
        {
            return SearchFileByPrefix_TypedFieldSpec(fieldSpec);
        }
        public static string SearchFileByPrefix(object fieldSpecObj)
        {
            return SearchFileByPrefix_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SearchFileByPrefixFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new DiffResult() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SearchResponseListResponse? SearchHost
        // GraphQL -> searchHost: SearchResponseListResponse! (type)
        public static string SearchHost_TypedFieldSpec(SearchResponseListResponse fieldSpec)
        {
            string args = "\n(\nid: $id\npath: $path\n)";
            return "searchHost" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SearchHost_ObjectFieldSpec(object fieldSpecObj)
        {
            return SearchHost((SearchResponseListResponse)fieldSpecObj);
        }
        public static string SearchHost(SearchResponseListResponse fieldSpec)
        {
            return SearchHost_TypedFieldSpec(fieldSpec);
        }
        public static string SearchHost(object fieldSpecObj)
        {
            return SearchHost_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SearchHostFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SearchResponseListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SearchResponseListResponse? SearchNutanixVm
        // GraphQL -> searchNutanixVm: SearchResponseListResponse! (type)
        public static string SearchNutanixVm_TypedFieldSpec(SearchResponseListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "searchNutanixVm" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SearchNutanixVm_ObjectFieldSpec(object fieldSpecObj)
        {
            return SearchNutanixVm((SearchResponseListResponse)fieldSpecObj);
        }
        public static string SearchNutanixVm(SearchResponseListResponse fieldSpec)
        {
            return SearchNutanixVm_TypedFieldSpec(fieldSpec);
        }
        public static string SearchNutanixVm(object fieldSpecObj)
        {
            return SearchNutanixVm_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SearchNutanixVmFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SearchResponseListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnappableConnection? SearchSnappableConnection
        // GraphQL -> searchSnappableConnection: SnappableConnection! (type)
        public static string SearchSnappableConnection_TypedFieldSpec(SnappableConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilter: $filter\n)";
            return "searchSnappableConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SearchSnappableConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return SearchSnappableConnection((SnappableConnection)fieldSpecObj);
        }
        public static string SearchSnappableConnection(SnappableConnection fieldSpec)
        {
            return SearchSnappableConnection_TypedFieldSpec(fieldSpec);
        }
        public static string SearchSnappableConnection(object fieldSpecObj)
        {
            return SearchSnappableConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SearchSnappableConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnappableConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VersionedFileConnection? SearchSnappableVersionedFiles
        // GraphQL -> searchSnappableVersionedFiles: VersionedFileConnection! (type)
        public static string SearchSnappableVersionedFiles_TypedFieldSpec(VersionedFileConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsearchQuery: $searchQuery\n)";
            return "searchSnappableVersionedFiles" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SearchSnappableVersionedFiles_ObjectFieldSpec(object fieldSpecObj)
        {
            return SearchSnappableVersionedFiles((VersionedFileConnection)fieldSpecObj);
        }
        public static string SearchSnappableVersionedFiles(VersionedFileConnection fieldSpec)
        {
            return SearchSnappableVersionedFiles_TypedFieldSpec(fieldSpec);
        }
        public static string SearchSnappableVersionedFiles(object fieldSpecObj)
        {
            return SearchSnappableVersionedFiles_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SearchSnappableVersionedFilesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VersionedFileConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ServiceAccountConnection? ServiceAccounts
        // GraphQL -> serviceAccounts: ServiceAccountConnection! (type)
        public static string ServiceAccounts_TypedFieldSpec(ServiceAccountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nsearchText: $searchText\nroleIds: $roleIds\n)";
            return "serviceAccounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ServiceAccounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return ServiceAccounts((ServiceAccountConnection)fieldSpecObj);
        }
        public static string ServiceAccounts(ServiceAccountConnection fieldSpec)
        {
            return ServiceAccounts_TypedFieldSpec(fieldSpec);
        }
        public static string ServiceAccounts(object fieldSpecObj)
        {
            return ServiceAccounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ServiceAccountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ServiceAccountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ShareFileset? ShareFileset
        // GraphQL -> shareFileset: ShareFileset! (type)
        public static string ShareFileset_TypedFieldSpec(ShareFileset fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "shareFileset" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ShareFileset_ObjectFieldSpec(object fieldSpecObj)
        {
            return ShareFileset((ShareFileset)fieldSpecObj);
        }
        public static string ShareFileset(ShareFileset fieldSpec)
        {
            return ShareFileset_TypedFieldSpec(fieldSpec);
        }
        public static string ShareFileset(object fieldSpecObj)
        {
            return ShareFileset_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ShareFilesetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ShareFileset() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365FullSpObjectConnection? SharepointSiteDescendants
        // GraphQL -> sharepointSiteDescendants: O365FullSpObjectConnection! (type)
        public static string SharepointSiteDescendants_TypedFieldSpec(O365FullSpObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsiteFid: $siteFid\nsnapshotFid: $snapshotFid\nnaturalId: $naturalId\nsharepointSiteSearchFilter: $sharepointSiteSearchFilter\norgId: $orgId\n)";
            return "sharepointSiteDescendants" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SharepointSiteDescendants_ObjectFieldSpec(object fieldSpecObj)
        {
            return SharepointSiteDescendants((O365FullSpObjectConnection)fieldSpecObj);
        }
        public static string SharepointSiteDescendants(O365FullSpObjectConnection fieldSpec)
        {
            return SharepointSiteDescendants_TypedFieldSpec(fieldSpec);
        }
        public static string SharepointSiteDescendants(object fieldSpecObj)
        {
            return SharepointSiteDescendants_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SharepointSiteDescendantsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365FullSpObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365FullSpObjectConnection? SharepointSiteSearch
        // GraphQL -> sharepointSiteSearch: O365FullSpObjectConnection! (type)
        public static string SharepointSiteSearch_TypedFieldSpec(O365FullSpObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsiteFid: $siteFid\norgId: $orgId\nsharepointSiteSearchFilter: $sharepointSiteSearchFilter\n)";
            return "sharepointSiteSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SharepointSiteSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SharepointSiteSearch((O365FullSpObjectConnection)fieldSpecObj);
        }
        public static string SharepointSiteSearch(O365FullSpObjectConnection fieldSpec)
        {
            return SharepointSiteSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SharepointSiteSearch(object fieldSpecObj)
        {
            return SharepointSiteSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SharepointSiteSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365FullSpObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<SlaAuditDetail>? SlaAuditDetail
        // GraphQL -> slaAuditDetail: [SlaAuditDetail!]! (type)
        public static string SlaAuditDetail_TypedFieldSpec(List<SlaAuditDetail> fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nSlaId: $SlaId\nfilter: $filter\ntimezone: $timezone\n)";
            return "slaAuditDetail" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SlaAuditDetail_ObjectFieldSpec(object fieldSpecObj)
        {
            return SlaAuditDetail((List<SlaAuditDetail>)fieldSpecObj);
        }
        public static string SlaAuditDetail(List<SlaAuditDetail> fieldSpec)
        {
            return SlaAuditDetail_TypedFieldSpec(fieldSpec);
        }
        public static string SlaAuditDetail(object fieldSpecObj)
        {
            return SlaAuditDetail_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SlaAuditDetailFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<SlaAuditDetail>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SlaDomainConnection? SlaDomains
        // GraphQL -> slaDomains: SlaDomainConnection! (type)
        public static string SlaDomains_TypedFieldSpec(SlaDomainConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\ncontextFilter: $contextFilter\ncontextFilterInput: $contextFilterInput\nshouldShowSyncStatus: $shouldShowSyncStatus\nshouldShowProtectedObjectCount: $shouldShowProtectedObjectCount\nshouldShowUpgradeInfo: $shouldShowUpgradeInfo\nshowRemoteSlas: $showRemoteSlas\nshouldShowPausedClusters: $shouldShowPausedClusters\n)";
            return "slaDomains" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SlaDomains_ObjectFieldSpec(object fieldSpecObj)
        {
            return SlaDomains((SlaDomainConnection)fieldSpecObj);
        }
        public static string SlaDomains(SlaDomainConnection fieldSpec)
        {
            return SlaDomains_TypedFieldSpec(fieldSpec);
        }
        public static string SlaDomains(object fieldSpecObj)
        {
            return SlaDomains_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SlaDomainsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SlaDomainConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ManagedVolume? SlaManagedVolume
        // GraphQL -> slaManagedVolume: ManagedVolume! (type)
        public static string SlaManagedVolume_TypedFieldSpec(ManagedVolume fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "slaManagedVolume" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SlaManagedVolume_ObjectFieldSpec(object fieldSpecObj)
        {
            return SlaManagedVolume((ManagedVolume)fieldSpecObj);
        }
        public static string SlaManagedVolume(ManagedVolume fieldSpec)
        {
            return SlaManagedVolume_TypedFieldSpec(fieldSpec);
        }
        public static string SlaManagedVolume(object fieldSpecObj)
        {
            return SlaManagedVolume_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SlaManagedVolumeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ManagedVolume() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ManagedVolumeConnection? SlaManagedVolumes
        // GraphQL -> slaManagedVolumes: ManagedVolumeConnection! (type)
        public static string SlaManagedVolumes_TypedFieldSpec(ManagedVolumeConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "slaManagedVolumes" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SlaManagedVolumes_ObjectFieldSpec(object fieldSpecObj)
        {
            return SlaManagedVolumes((ManagedVolumeConnection)fieldSpecObj);
        }
        public static string SlaManagedVolumes(ManagedVolumeConnection fieldSpec)
        {
            return SlaManagedVolumes_TypedFieldSpec(fieldSpec);
        }
        public static string SlaManagedVolumes(object fieldSpecObj)
        {
            return SlaManagedVolumes_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SlaManagedVolumesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ManagedVolumeConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetSmbConfigurationReply? SmbConfiguration
        // GraphQL -> smbConfiguration: GetSmbConfigurationReply! (type)
        public static string SmbConfiguration_TypedFieldSpec(GetSmbConfigurationReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "smbConfiguration" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SmbConfiguration_ObjectFieldSpec(object fieldSpecObj)
        {
            return SmbConfiguration((GetSmbConfigurationReply)fieldSpecObj);
        }
        public static string SmbConfiguration(GetSmbConfigurationReply fieldSpec)
        {
            return SmbConfiguration_TypedFieldSpec(fieldSpec);
        }
        public static string SmbConfiguration(object fieldSpecObj)
        {
            return SmbConfiguration_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SmbConfigurationFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetSmbConfigurationReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SmbDomainConnection? SmbDomains
        // GraphQL -> smbDomains: SmbDomainConnection! (type)
        public static string SmbDomains_TypedFieldSpec(SmbDomainConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilters: $filters\nsortBy: $sortBy\n)";
            return "smbDomains" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SmbDomains_ObjectFieldSpec(object fieldSpecObj)
        {
            return SmbDomains((SmbDomainConnection)fieldSpecObj);
        }
        public static string SmbDomains(SmbDomainConnection fieldSpec)
        {
            return SmbDomains_TypedFieldSpec(fieldSpec);
        }
        public static string SmbDomains(object fieldSpecObj)
        {
            return SmbDomains_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SmbDomainsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SmbDomainConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnappableConnection? SnappableConnection
        // GraphQL -> snappableConnection: SnappableConnection! (type)
        public static string SnappableConnection_TypedFieldSpec(SnappableConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilter: $filter\n)";
            return "snappableConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableConnection((SnappableConnection)fieldSpecObj);
        }
        public static string SnappableConnection(SnappableConnection fieldSpec)
        {
            return SnappableConnection_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableConnection(object fieldSpecObj)
        {
            return SnappableConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnappableConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ExchangeObjectConnection? SnappableContactSearch
        // GraphQL -> snappableContactSearch: O365ExchangeObjectConnection! (type)
        public static string SnappableContactSearch_TypedFieldSpec(O365ExchangeObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\norgId: $orgId\ncontactsSearchFilter: $contactsSearchFilter\n)";
            return "snappableContactSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableContactSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableContactSearch((O365ExchangeObjectConnection)fieldSpecObj);
        }
        public static string SnappableContactSearch(O365ExchangeObjectConnection fieldSpec)
        {
            return SnappableContactSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableContactSearch(object fieldSpecObj)
        {
            return SnappableContactSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableContactSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ExchangeObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ExchangeObjectConnection? SnappableEmailSearch
        // GraphQL -> snappableEmailSearch: O365ExchangeObjectConnection! (type)
        public static string SnappableEmailSearch_TypedFieldSpec(O365ExchangeObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\norgId: $orgId\nsearchFilter: $searchFilter\n)";
            return "snappableEmailSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableEmailSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableEmailSearch((O365ExchangeObjectConnection)fieldSpecObj);
        }
        public static string SnappableEmailSearch(O365ExchangeObjectConnection fieldSpec)
        {
            return SnappableEmailSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableEmailSearch(object fieldSpecObj)
        {
            return SnappableEmailSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableEmailSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ExchangeObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ExchangeObjectConnection? SnappableEventSearch
        // GraphQL -> snappableEventSearch: O365ExchangeObjectConnection! (type)
        public static string SnappableEventSearch_TypedFieldSpec(O365ExchangeObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\norgId: $orgId\ncalendarSearchFilter: $calendarSearchFilter\n)";
            return "snappableEventSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableEventSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableEventSearch((O365ExchangeObjectConnection)fieldSpecObj);
        }
        public static string SnappableEventSearch(O365ExchangeObjectConnection fieldSpec)
        {
            return SnappableEventSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableEventSearch(object fieldSpecObj)
        {
            return SnappableEventSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableEventSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ExchangeObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnappableGroupByConnection? SnappableGroupByConnection
        // GraphQL -> snappableGroupByConnection: SnappableGroupByConnection! (type)
        public static string SnappableGroupByConnection_TypedFieldSpec(SnappableGroupByConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ngroupBy: $groupBy\nfilter: $filter\ntimezoneOffset: $timezoneOffset\nrequestedAggregations: $requestedAggregations\n)";
            return "snappableGroupByConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableGroupByConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableGroupByConnection((SnappableGroupByConnection)fieldSpecObj);
        }
        public static string SnappableGroupByConnection(SnappableGroupByConnection fieldSpec)
        {
            return SnappableGroupByConnection_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableGroupByConnection(object fieldSpecObj)
        {
            return SnappableGroupByConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableGroupByConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnappableGroupByConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? SnappableOnedriveSearch
        // GraphQL -> snappableOnedriveSearch: O365OnedriveObjectConnection! (type)
        public static string SnappableOnedriveSearch_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\norgId: $orgId\nonedriveSearchFilter: $onedriveSearchFilter\n)";
            return "snappableOnedriveSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableOnedriveSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableOnedriveSearch((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string SnappableOnedriveSearch(O365OnedriveObjectConnection fieldSpec)
        {
            return SnappableOnedriveSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableOnedriveSearch(object fieldSpecObj)
        {
            return SnappableOnedriveSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableOnedriveSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? SnappableSharepointDriveSearch
        // GraphQL -> snappableSharepointDriveSearch: O365OnedriveObjectConnection! (type)
        public static string SnappableSharepointDriveSearch_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\norgId: $orgId\nsharepointDriveSearchFilter: $sharepointDriveSearchFilter\nsiteChildId: $siteChildId\nsiteChildType: $siteChildType\n)";
            return "snappableSharepointDriveSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableSharepointDriveSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableSharepointDriveSearch((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string SnappableSharepointDriveSearch(O365OnedriveObjectConnection fieldSpec)
        {
            return SnappableSharepointDriveSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableSharepointDriveSearch(object fieldSpecObj)
        {
            return SnappableSharepointDriveSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableSharepointDriveSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? SnappableSharepointListSearch
        // GraphQL -> snappableSharepointListSearch: O365OnedriveObjectConnection! (type)
        public static string SnappableSharepointListSearch_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\norgId: $orgId\nsharepointDriveSearchFilter: $sharepointDriveSearchFilter\nsiteChildId: $siteChildId\n)";
            return "snappableSharepointListSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableSharepointListSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableSharepointListSearch((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string SnappableSharepointListSearch(O365OnedriveObjectConnection fieldSpec)
        {
            return SnappableSharepointListSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableSharepointListSearch(object fieldSpecObj)
        {
            return SnappableSharepointListSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableSharepointListSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365TeamsConversationsConnection? SnappableTeamsConversationsSearch
        // GraphQL -> snappableTeamsConversationsSearch: O365TeamsConversationsConnection! (type)
        public static string SnappableTeamsConversationsSearch_TypedFieldSpec(O365TeamsConversationsConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\norgId: $orgId\nsnapshotFidOpt: $snapshotFidOpt\nteamConvChannels: $teamConvChannels\nteamsConversationsSearchFilter: $teamsConversationsSearchFilter\n)";
            return "snappableTeamsConversationsSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableTeamsConversationsSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableTeamsConversationsSearch((O365TeamsConversationsConnection)fieldSpecObj);
        }
        public static string SnappableTeamsConversationsSearch(O365TeamsConversationsConnection fieldSpec)
        {
            return SnappableTeamsConversationsSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableTeamsConversationsSearch(object fieldSpecObj)
        {
            return SnappableTeamsConversationsSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableTeamsConversationsSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365TeamsConversationsConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? SnappableTeamsDriveSearch
        // GraphQL -> snappableTeamsDriveSearch: O365OnedriveObjectConnection! (type)
        public static string SnappableTeamsDriveSearch_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\norgId: $orgId\nchannelId: $channelId\nchannelFolderName: $channelFolderName\nteamsDriveSearchFilter: $teamsDriveSearchFilter\n)";
            return "snappableTeamsDriveSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappableTeamsDriveSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappableTeamsDriveSearch((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string SnappableTeamsDriveSearch(O365OnedriveObjectConnection fieldSpec)
        {
            return SnappableTeamsDriveSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnappableTeamsDriveSearch(object fieldSpecObj)
        {
            return SnappableTeamsDriveSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappableTeamsDriveSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> LegalHoldSnappableDetailConnection? SnappablesWithLegalHoldSnapshotsSummary
        // GraphQL -> snappablesWithLegalHoldSnapshotsSummary: LegalHoldSnappableDetailConnection! (type)
        public static string SnappablesWithLegalHoldSnapshotsSummary_TypedFieldSpec(LegalHoldSnappableDetailConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ninput: $input\n)";
            return "snappablesWithLegalHoldSnapshotsSummary" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnappablesWithLegalHoldSnapshotsSummary_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnappablesWithLegalHoldSnapshotsSummary((LegalHoldSnappableDetailConnection)fieldSpecObj);
        }
        public static string SnappablesWithLegalHoldSnapshotsSummary(LegalHoldSnappableDetailConnection fieldSpec)
        {
            return SnappablesWithLegalHoldSnapshotsSummary_TypedFieldSpec(fieldSpec);
        }
        public static string SnappablesWithLegalHoldSnapshotsSummary(object fieldSpecObj)
        {
            return SnappablesWithLegalHoldSnapshotsSummary_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnappablesWithLegalHoldSnapshotsSummaryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new LegalHoldSnappableDetailConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmSnapshot? Snapshot
        // GraphQL -> snapshot: CdmSnapshot! (type)
        public static string Snapshot_TypedFieldSpec(CdmSnapshot fieldSpec)
        {
            string args = "\n(\nsnapshotFid: $snapshotFid\nclusterUuid: $clusterUuid\n)";
            return "snapshot" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Snapshot_ObjectFieldSpec(object fieldSpecObj)
        {
            return Snapshot((CdmSnapshot)fieldSpecObj);
        }
        public static string Snapshot(CdmSnapshot fieldSpec)
        {
            return Snapshot_TypedFieldSpec(fieldSpec);
        }
        public static string Snapshot(object fieldSpecObj)
        {
            return Snapshot_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmSnapshot() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ExchangeObjectConnection? SnapshotEmailSearch
        // GraphQL -> snapshotEmailSearch: O365ExchangeObjectConnection! (type)
        public static string SnapshotEmailSearch_TypedFieldSpec(O365ExchangeObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\norgId: $orgId\nsearchFilter: $searchFilter\n)";
            return "snapshotEmailSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotEmailSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotEmailSearch((O365ExchangeObjectConnection)fieldSpecObj);
        }
        public static string SnapshotEmailSearch(O365ExchangeObjectConnection fieldSpec)
        {
            return SnapshotEmailSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotEmailSearch(object fieldSpecObj)
        {
            return SnapshotEmailSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotEmailSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ExchangeObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365ExchangeObjectConnection? SnapshotEventSearch
        // GraphQL -> snapshotEventSearch: O365ExchangeObjectConnection! (type)
        public static string SnapshotEventSearch_TypedFieldSpec(O365ExchangeObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\norgId: $orgId\ncalendarSearchFilter: $calendarSearchFilter\n)";
            return "snapshotEventSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotEventSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotEventSearch((O365ExchangeObjectConnection)fieldSpecObj);
        }
        public static string SnapshotEventSearch(O365ExchangeObjectConnection fieldSpec)
        {
            return SnapshotEventSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotEventSearch(object fieldSpecObj)
        {
            return SnapshotEventSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotEventSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365ExchangeObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnapshotFileDeltaConnection? SnapshotFilesDelta
        // GraphQL -> snapshotFilesDelta: SnapshotFileDeltaConnection! (type)
        public static string SnapshotFilesDelta_TypedFieldSpec(SnapshotFileDeltaConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\npath: $path\nsnapshotFid: $snapshotFid\nfilter: $filter\nsearchPrefix: $searchPrefix\nquarantineFilters: $quarantineFilters\nworkloadFieldsArg: $workloadFieldsArg\n)";
            return "snapshotFilesDelta" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotFilesDelta_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotFilesDelta((SnapshotFileDeltaConnection)fieldSpecObj);
        }
        public static string SnapshotFilesDelta(SnapshotFileDeltaConnection fieldSpec)
        {
            return SnapshotFilesDelta_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotFilesDelta(object fieldSpecObj)
        {
            return SnapshotFilesDelta_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotFilesDeltaFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnapshotFileDeltaConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnapshotFileDeltaV2Connection? SnapshotFilesDeltaV2
        // GraphQL -> snapshotFilesDeltaV2: SnapshotFileDeltaV2Connection! (type)
        public static string SnapshotFilesDeltaV2_TypedFieldSpec(SnapshotFileDeltaV2Connection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\npath: $path\nsnapshotFid: $snapshotFid\nfilter: $filter\nsearchPrefix: $searchPrefix\nquarantineFilters: $quarantineFilters\nworkloadFieldsArg: $workloadFieldsArg\n)";
            return "snapshotFilesDeltaV2" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotFilesDeltaV2_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotFilesDeltaV2((SnapshotFileDeltaV2Connection)fieldSpecObj);
        }
        public static string SnapshotFilesDeltaV2(SnapshotFileDeltaV2Connection fieldSpec)
        {
            return SnapshotFilesDeltaV2_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotFilesDeltaV2(object fieldSpecObj)
        {
            return SnapshotFilesDeltaV2_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotFilesDeltaV2FieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnapshotFileDeltaV2Connection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GenericSnapshotConnection? SnapshotOfAsnappableConnection
        // GraphQL -> snapshotOfASnappableConnection: GenericSnapshotConnection! (type)
        public static string SnapshotOfAsnappableConnection_TypedFieldSpec(GenericSnapshotConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nworkloadId: $workloadId\nsnapshotFilter: $snapshotFilter\nsortOrder: $sortOrder\nsortBy: $sortBy\ntimeRange: $timeRange\nignoreActiveWorkloadCheck: $ignoreActiveWorkloadCheck\n)";
            return "snapshotOfASnappableConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotOfAsnappableConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotOfAsnappableConnection((GenericSnapshotConnection)fieldSpecObj);
        }
        public static string SnapshotOfAsnappableConnection(GenericSnapshotConnection fieldSpec)
        {
            return SnapshotOfAsnappableConnection_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotOfAsnappableConnection(object fieldSpecObj)
        {
            return SnapshotOfAsnappableConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotOfAsnappableConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GenericSnapshotConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GenericSnapshotConnection? SnapshotOfSnappablesConnection
        // GraphQL -> snapshotOfSnappablesConnection: GenericSnapshotConnection! (type)
        public static string SnapshotOfSnappablesConnection_TypedFieldSpec(GenericSnapshotConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsnappableIds: $snappableIds\nsnapshotFilter: $snapshotFilter\nsortOrder: $sortOrder\nsortBy: $sortBy\ntimeRange: $timeRange\nignoreActiveWorkloadCheck: $ignoreActiveWorkloadCheck\n)";
            return "snapshotOfSnappablesConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotOfSnappablesConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotOfSnappablesConnection((GenericSnapshotConnection)fieldSpecObj);
        }
        public static string SnapshotOfSnappablesConnection(GenericSnapshotConnection fieldSpec)
        {
            return SnapshotOfSnappablesConnection_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotOfSnappablesConnection(object fieldSpecObj)
        {
            return SnapshotOfSnappablesConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotOfSnappablesConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GenericSnapshotConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? SnapshotOnedriveSearch
        // GraphQL -> snapshotOnedriveSearch: O365OnedriveObjectConnection! (type)
        public static string SnapshotOnedriveSearch_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\norgId: $orgId\nonedriveSearchFilter: $onedriveSearchFilter\n)";
            return "snapshotOnedriveSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotOnedriveSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotOnedriveSearch((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string SnapshotOnedriveSearch(O365OnedriveObjectConnection fieldSpec)
        {
            return SnapshotOnedriveSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotOnedriveSearch(object fieldSpecObj)
        {
            return SnapshotOnedriveSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotOnedriveSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnapshotResultConnection? SnapshotResults
        // GraphQL -> snapshotResults: SnapshotResultConnection! (type)
        public static string SnapshotResults_TypedFieldSpec(SnapshotResultConnection fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\nstartTimeMs: $startTimeMs\nendTimeMs: $endTimeMs\n)";
            return "snapshotResults" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotResults_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotResults((SnapshotResultConnection)fieldSpecObj);
        }
        public static string SnapshotResults(SnapshotResultConnection fieldSpec)
        {
            return SnapshotResults_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotResults(object fieldSpecObj)
        {
            return SnapshotResults_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotResultsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnapshotResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> O365OnedriveObjectConnection? SnapshotSharepointDriveSearch
        // GraphQL -> snapshotSharepointDriveSearch: O365OnedriveObjectConnection! (type)
        public static string SnapshotSharepointDriveSearch_TypedFieldSpec(O365OnedriveObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsnappableFid: $snappableFid\nsnapshotFid: $snapshotFid\norgId: $orgId\nsharepointDriveSearchFilter: $sharepointDriveSearchFilter\n)";
            return "snapshotSharepointDriveSearch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotSharepointDriveSearch_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotSharepointDriveSearch((O365OnedriveObjectConnection)fieldSpecObj);
        }
        public static string SnapshotSharepointDriveSearch(O365OnedriveObjectConnection fieldSpec)
        {
            return SnapshotSharepointDriveSearch_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotSharepointDriveSearch(object fieldSpecObj)
        {
            return SnapshotSharepointDriveSearch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotSharepointDriveSearchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new O365OnedriveObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnapshotSummaryConnection? SnapshotsForUnmanagedObject
        // GraphQL -> snapshotsForUnmanagedObject: SnapshotSummaryConnection! (type)
        public static string SnapshotsForUnmanagedObject_TypedFieldSpec(SnapshotSummaryConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ninput: $input\n)";
            return "snapshotsForUnmanagedObject" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnapshotsForUnmanagedObject_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnapshotsForUnmanagedObject((SnapshotSummaryConnection)fieldSpecObj);
        }
        public static string SnapshotsForUnmanagedObject(SnapshotSummaryConnection fieldSpec)
        {
            return SnapshotsForUnmanagedObject_TypedFieldSpec(fieldSpec);
        }
        public static string SnapshotsForUnmanagedObject(object fieldSpecObj)
        {
            return SnapshotsForUnmanagedObject_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnapshotsForUnmanagedObjectFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnapshotSummaryConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnmpConfiguration? SnmpConfigurations
        // GraphQL -> snmpConfigurations: SnmpConfiguration! (type)
        public static string SnmpConfigurations_TypedFieldSpec(SnmpConfiguration fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "snmpConfigurations" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnmpConfigurations_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnmpConfigurations((SnmpConfiguration)fieldSpecObj);
        }
        public static string SnmpConfigurations(SnmpConfiguration fieldSpec)
        {
            return SnmpConfigurations_TypedFieldSpec(fieldSpec);
        }
        public static string SnmpConfigurations(object fieldSpecObj)
        {
            return SnmpConfigurations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnmpConfigurationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnmpConfiguration() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SnoozedDirectoryConnection? SnoozedDirectories
        // GraphQL -> snoozedDirectories: SnoozedDirectoryConnection! (type)
        public static string SnoozedDirectories_TypedFieldSpec(SnoozedDirectoryConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsnoozeStatusFilter: $snoozeStatusFilter\ndirectorySearchFilter: $directorySearchFilter\nfalsePositiveTypeFilter: $falsePositiveTypeFilter\n)";
            return "snoozedDirectories" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SnoozedDirectories_ObjectFieldSpec(object fieldSpecObj)
        {
            return SnoozedDirectories((SnoozedDirectoryConnection)fieldSpecObj);
        }
        public static string SnoozedDirectories(SnoozedDirectoryConnection fieldSpec)
        {
            return SnoozedDirectories_TypedFieldSpec(fieldSpec);
        }
        public static string SnoozedDirectories(object fieldSpecObj)
        {
            return SnoozedDirectories_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SnoozedDirectoriesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SnoozedDirectoryConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SonarContentReportConnection? SonarContentReport
        // GraphQL -> sonarContentReport: SonarContentReportConnection! (type)
        public static string SonarContentReport_TypedFieldSpec(SonarContentReportConnection fieldSpec)
        {
            string args = "\n(\ngroupBy: $groupBy\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilters: $filters\nday: $day\ntimezone: $timezone\nworkloadTypes: $workloadTypes\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "sonarContentReport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SonarContentReport_ObjectFieldSpec(object fieldSpecObj)
        {
            return SonarContentReport((SonarContentReportConnection)fieldSpecObj);
        }
        public static string SonarContentReport(SonarContentReportConnection fieldSpec)
        {
            return SonarContentReport_TypedFieldSpec(fieldSpec);
        }
        public static string SonarContentReport(object fieldSpecObj)
        {
            return SonarContentReport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SonarContentReportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SonarContentReportConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SonarReportConnection? SonarReport
        // GraphQL -> sonarReport: SonarReportConnection! (type)
        public static string SonarReport_TypedFieldSpec(SonarReportConnection fieldSpec)
        {
            string args = "\n(\nsonarReportGroupBy: $sonarReportGroupBy\nfilter: $filter\ntimeFilter: $timeFilter\n)";
            return "sonarReport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SonarReport_ObjectFieldSpec(object fieldSpecObj)
        {
            return SonarReport((SonarReportConnection)fieldSpecObj);
        }
        public static string SonarReport(SonarReportConnection fieldSpec)
        {
            return SonarReport_TypedFieldSpec(fieldSpec);
        }
        public static string SonarReport(object fieldSpecObj)
        {
            return SonarReport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SonarReportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SonarReportConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SonarReportRowConnection? SonarReportRow
        // GraphQL -> sonarReportRow: SonarReportRowConnection! (type)
        public static string SonarReportRow_TypedFieldSpec(SonarReportRowConnection fieldSpec)
        {
            string args = "\n(\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\nendTime: $endTime\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "sonarReportRow" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SonarReportRow_ObjectFieldSpec(object fieldSpecObj)
        {
            return SonarReportRow((SonarReportRowConnection)fieldSpecObj);
        }
        public static string SonarReportRow(SonarReportRowConnection fieldSpec)
        {
            return SonarReportRow_TypedFieldSpec(fieldSpec);
        }
        public static string SonarReportRow(object fieldSpecObj)
        {
            return SonarReportRow_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SonarReportRowFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SonarReportRowConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AccessGroupConnection? SonarUserGroups
        // GraphQL -> sonarUserGroups: AccessGroupConnection! (type)
        public static string SonarUserGroups_TypedFieldSpec(AccessGroupConnection fieldSpec)
        {
            string args = "\n(\nfilter: $filter\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "sonarUserGroups" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SonarUserGroups_ObjectFieldSpec(object fieldSpecObj)
        {
            return SonarUserGroups((AccessGroupConnection)fieldSpecObj);
        }
        public static string SonarUserGroups(AccessGroupConnection fieldSpec)
        {
            return SonarUserGroups_TypedFieldSpec(fieldSpec);
        }
        public static string SonarUserGroups(object fieldSpecObj)
        {
            return SonarUserGroups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SonarUserGroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AccessGroupConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AccessUserConnection? SonarUsers
        // GraphQL -> sonarUsers: AccessUserConnection! (type)
        public static string SonarUsers_TypedFieldSpec(AccessUserConnection fieldSpec)
        {
            string args = "\n(\nsort: $sort\nfilter: $filter\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "sonarUsers" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SonarUsers_ObjectFieldSpec(object fieldSpecObj)
        {
            return SonarUsers((AccessUserConnection)fieldSpecObj);
        }
        public static string SonarUsers(AccessUserConnection fieldSpec)
        {
            return SonarUsers_TypedFieldSpec(fieldSpec);
        }
        public static string SonarUsers(object fieldSpecObj)
        {
            return SonarUsers_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SonarUsersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AccessUserConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? SupportBundle
        // GraphQL -> supportBundle: AsyncRequestStatus! (type)
        public static string SupportBundle_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "supportBundle" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SupportBundle_ObjectFieldSpec(object fieldSpecObj)
        {
            return SupportBundle((AsyncRequestStatus)fieldSpecObj);
        }
        public static string SupportBundle(AsyncRequestStatus fieldSpec)
        {
            return SupportBundle_TypedFieldSpec(fieldSpec);
        }
        public static string SupportBundle(object fieldSpecObj)
        {
            return SupportBundle_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SupportBundleFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SupportUserAccessConnection? SupportUserAccesses
        // GraphQL -> supportUserAccesses: SupportUserAccessConnection! (type)
        public static string SupportUserAccesses_TypedFieldSpec(SupportUserAccessConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilters: $filters\n)";
            return "supportUserAccesses" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SupportUserAccesses_ObjectFieldSpec(object fieldSpecObj)
        {
            return SupportUserAccesses((SupportUserAccessConnection)fieldSpecObj);
        }
        public static string SupportUserAccesses(SupportUserAccessConnection fieldSpec)
        {
            return SupportUserAccesses_TypedFieldSpec(fieldSpec);
        }
        public static string SupportUserAccesses(object fieldSpecObj)
        {
            return SupportUserAccesses_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SupportUserAccessesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SupportUserAccessConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SyslogExportRuleSummaryListResponse? SyslogExportRules
        // GraphQL -> syslogExportRules: SyslogExportRuleSummaryListResponse! (type)
        public static string SyslogExportRules_TypedFieldSpec(SyslogExportRuleSummaryListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "syslogExportRules" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string SyslogExportRules_ObjectFieldSpec(object fieldSpecObj)
        {
            return SyslogExportRules((SyslogExportRuleSummaryListResponse)fieldSpecObj);
        }
        public static string SyslogExportRules(SyslogExportRuleSummaryListResponse fieldSpec)
        {
            return SyslogExportRules_TypedFieldSpec(fieldSpec);
        }
        public static string SyslogExportRules(object fieldSpecObj)
        {
            return SyslogExportRules_ObjectFieldSpec(fieldSpecObj);
        }
        public static object SyslogExportRulesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SyslogExportRuleSummaryListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> TableFilters? TableFilters
        // GraphQL -> tableFilters: TableFilters! (type)
        public static string TableFilters_TypedFieldSpec(TableFilters fieldSpec)
        {
            string args = "";
            return "tableFilters" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string TableFilters_ObjectFieldSpec(object fieldSpecObj)
        {
            return TableFilters((TableFilters)fieldSpecObj);
        }
        public static string TableFilters(TableFilters fieldSpec)
        {
            return TableFilters_TypedFieldSpec(fieldSpec);
        }
        public static string TableFilters(object fieldSpecObj)
        {
            return TableFilters_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TableFiltersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new TableFilters() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> TargetMapping? TargetMapping
        // GraphQL -> targetMapping: TargetMapping! (type)
        public static string TargetMapping_TypedFieldSpec(TargetMapping fieldSpec)
        {
            string args = "\n(\ntargetMappingId: $targetMappingId\n)";
            return "targetMapping" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string TargetMapping_ObjectFieldSpec(object fieldSpecObj)
        {
            return TargetMapping((TargetMapping)fieldSpecObj);
        }
        public static string TargetMapping(TargetMapping fieldSpec)
        {
            return TargetMapping_TypedFieldSpec(fieldSpec);
        }
        public static string TargetMapping(object fieldSpecObj)
        {
            return TargetMapping_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TargetMappingFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new TargetMapping() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> TargetConnection? Targets
        // GraphQL -> targets: TargetConnection! (type)
        public static string Targets_TypedFieldSpec(TargetConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\ncontextFilter: $contextFilter\n)";
            return "targets" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Targets_ObjectFieldSpec(object fieldSpecObj)
        {
            return Targets((TargetConnection)fieldSpecObj);
        }
        public static string Targets(TargetConnection fieldSpec)
        {
            return Targets_TypedFieldSpec(fieldSpec);
        }
        public static string Targets(object fieldSpecObj)
        {
            return Targets_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TargetsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new TargetConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> TaskDetailConnection? TaskDetailConnection
        // GraphQL -> taskDetailConnection: TaskDetailConnection! (type)
        public static string TaskDetailConnection_TypedFieldSpec(TaskDetailConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\nsortBy: $sortBy\nsortOrder: $sortOrder\ntimezoneOffset: $timezoneOffset\n)";
            return "taskDetailConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string TaskDetailConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return TaskDetailConnection((TaskDetailConnection)fieldSpecObj);
        }
        public static string TaskDetailConnection(TaskDetailConnection fieldSpec)
        {
            return TaskDetailConnection_TypedFieldSpec(fieldSpec);
        }
        public static string TaskDetailConnection(object fieldSpecObj)
        {
            return TaskDetailConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TaskDetailConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new TaskDetailConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> TaskDetailGroupByConnection? TaskDetailGroupByConnection
        // GraphQL -> taskDetailGroupByConnection: TaskDetailGroupByConnection! (type)
        public static string TaskDetailGroupByConnection_TypedFieldSpec(TaskDetailGroupByConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nfilter: $filter\ngroupBy: $groupBy\ntimezoneOffset: $timezoneOffset\n)";
            return "taskDetailGroupByConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string TaskDetailGroupByConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return TaskDetailGroupByConnection((TaskDetailGroupByConnection)fieldSpecObj);
        }
        public static string TaskDetailGroupByConnection(TaskDetailGroupByConnection fieldSpec)
        {
            return TaskDetailGroupByConnection_TypedFieldSpec(fieldSpec);
        }
        public static string TaskDetailGroupByConnection(object fieldSpecObj)
        {
            return TaskDetailGroupByConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TaskDetailGroupByConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new TaskDetailGroupByConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> Taskchain? Taskchain
        // GraphQL -> taskchain: Taskchain! (type)
        public static string Taskchain_TypedFieldSpec(Taskchain fieldSpec)
        {
            string args = "\n(\ntaskchainId: $taskchainId\n)";
            return "taskchain" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string Taskchain_ObjectFieldSpec(object fieldSpecObj)
        {
            return Taskchain((Taskchain)fieldSpecObj);
        }
        public static string Taskchain(Taskchain fieldSpec)
        {
            return Taskchain_TypedFieldSpec(fieldSpec);
        }
        public static string Taskchain(object fieldSpecObj)
        {
            return Taskchain_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TaskchainFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new Taskchain() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ThreatHunt? ThreatHuntDetail
        // GraphQL -> threatHuntDetail: ThreatHunt! (type)
        public static string ThreatHuntDetail_TypedFieldSpec(ThreatHunt fieldSpec)
        {
            string args = "\n(\nhuntId: $huntId\n)";
            return "threatHuntDetail" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ThreatHuntDetail_ObjectFieldSpec(object fieldSpecObj)
        {
            return ThreatHuntDetail((ThreatHunt)fieldSpecObj);
        }
        public static string ThreatHuntDetail(ThreatHunt fieldSpec)
        {
            return ThreatHuntDetail_TypedFieldSpec(fieldSpec);
        }
        public static string ThreatHuntDetail(object fieldSpecObj)
        {
            return ThreatHuntDetail_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ThreatHuntDetailFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ThreatHunt() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ThreatHuntResult? ThreatHuntResult
        // GraphQL -> threatHuntResult: ThreatHuntResult! (type)
        public static string ThreatHuntResult_TypedFieldSpec(ThreatHuntResult fieldSpec)
        {
            string args = "\n(\nhuntId: $huntId\nobjectId: $objectId\n)";
            return "threatHuntResult" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ThreatHuntResult_ObjectFieldSpec(object fieldSpecObj)
        {
            return ThreatHuntResult((ThreatHuntResult)fieldSpecObj);
        }
        public static string ThreatHuntResult(ThreatHuntResult fieldSpec)
        {
            return ThreatHuntResult_TypedFieldSpec(fieldSpec);
        }
        public static string ThreatHuntResult(object fieldSpecObj)
        {
            return ThreatHuntResult_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ThreatHuntResultFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ThreatHuntResult() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ThreatHuntSummaryReply? ThreatHuntSummary
        // GraphQL -> threatHuntSummary: ThreatHuntSummaryReply! (type)
        public static string ThreatHuntSummary_TypedFieldSpec(ThreatHuntSummaryReply fieldSpec)
        {
            string args = "\n(\nhuntId: $huntId\n)";
            return "threatHuntSummary" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ThreatHuntSummary_ObjectFieldSpec(object fieldSpecObj)
        {
            return ThreatHuntSummary((ThreatHuntSummaryReply)fieldSpecObj);
        }
        public static string ThreatHuntSummary(ThreatHuntSummaryReply fieldSpec)
        {
            return ThreatHuntSummary_TypedFieldSpec(fieldSpec);
        }
        public static string ThreatHuntSummary(object fieldSpecObj)
        {
            return ThreatHuntSummary_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ThreatHuntSummaryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ThreatHuntSummaryReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ThreatHuntConnection? ThreatHunts
        // GraphQL -> threatHunts: ThreatHuntConnection! (type)
        public static string ThreatHunts_TypedFieldSpec(ThreatHuntConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nbeginTime: $beginTime\nendTime: $endTime\nclusterUuidFilter: $clusterUuidFilter\nstatusFilter: $statusFilter\nmatchesFoundFilter: $matchesFoundFilter\nquarantinedMatchesFilter: $quarantinedMatchesFilter\n)";
            return "threatHunts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ThreatHunts_ObjectFieldSpec(object fieldSpecObj)
        {
            return ThreatHunts((ThreatHuntConnection)fieldSpecObj);
        }
        public static string ThreatHunts(ThreatHuntConnection fieldSpec)
        {
            return ThreatHunts_TypedFieldSpec(fieldSpec);
        }
        public static string ThreatHunts(object fieldSpecObj)
        {
            return ThreatHunts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ThreatHuntsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ThreatHuntConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetTotpStatusReply? TotpConfigStatus
        // GraphQL -> totpConfigStatus: GetTotpStatusReply! (type)
        public static string TotpConfigStatus_TypedFieldSpec(GetTotpStatusReply fieldSpec)
        {
            string args = "\n(\nuserId: $userId\n)";
            return "totpConfigStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string TotpConfigStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return TotpConfigStatus((GetTotpStatusReply)fieldSpecObj);
        }
        public static string TotpConfigStatus(GetTotpStatusReply fieldSpec)
        {
            return TotpConfigStatus_TypedFieldSpec(fieldSpec);
        }
        public static string TotpConfigStatus(object fieldSpecObj)
        {
            return TotpConfigStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TotpConfigStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetTotpStatusReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> TprStatusForNodeRemoval? TprStatusForNodeRemoval
        // GraphQL -> tprStatusForNodeRemoval: TprStatusForNodeRemoval! (type)
        public static string TprStatusForNodeRemoval_TypedFieldSpec(TprStatusForNodeRemoval fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "tprStatusForNodeRemoval" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string TprStatusForNodeRemoval_ObjectFieldSpec(object fieldSpecObj)
        {
            return TprStatusForNodeRemoval((TprStatusForNodeRemoval)fieldSpecObj);
        }
        public static string TprStatusForNodeRemoval(TprStatusForNodeRemoval fieldSpec)
        {
            return TprStatusForNodeRemoval_TypedFieldSpec(fieldSpec);
        }
        public static string TprStatusForNodeRemoval(object fieldSpecObj)
        {
            return TprStatusForNodeRemoval_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TprStatusForNodeRemovalFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new TprStatusForNodeRemoval() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> SupportTunnelInfo? TunnelStatus
        // GraphQL -> tunnelStatus: SupportTunnelInfo! (type)
        public static string TunnelStatus_TypedFieldSpec(SupportTunnelInfo fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "tunnelStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string TunnelStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return TunnelStatus((SupportTunnelInfo)fieldSpecObj);
        }
        public static string TunnelStatus(SupportTunnelInfo fieldSpec)
        {
            return TunnelStatus_TypedFieldSpec(fieldSpec);
        }
        public static string TunnelStatus(object fieldSpecObj)
        {
            return TunnelStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object TunnelStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new SupportTunnelInfo() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UnmanagedObjectDetailConnection? UnmanagedObjects
        // GraphQL -> unmanagedObjects: UnmanagedObjectDetailConnection! (type)
        public static string UnmanagedObjects_TypedFieldSpec(UnmanagedObjectDetailConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\ninput: $input\n)";
            return "unmanagedObjects" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UnmanagedObjects_ObjectFieldSpec(object fieldSpecObj)
        {
            return UnmanagedObjects((UnmanagedObjectDetailConnection)fieldSpecObj);
        }
        public static string UnmanagedObjects(UnmanagedObjectDetailConnection fieldSpec)
        {
            return UnmanagedObjects_TypedFieldSpec(fieldSpec);
        }
        public static string UnmanagedObjects(object fieldSpecObj)
        {
            return UnmanagedObjects_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UnmanagedObjectsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UnmanagedObjectDetailConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UpgradeStatusReply? UpgradeStatus
        // GraphQL -> upgradeStatus: UpgradeStatusReply! (type)
        public static string UpgradeStatus_TypedFieldSpec(UpgradeStatusReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\n)";
            return "upgradeStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UpgradeStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return UpgradeStatus((UpgradeStatusReply)fieldSpecObj);
        }
        public static string UpgradeStatus(UpgradeStatusReply fieldSpec)
        {
            return UpgradeStatus_TypedFieldSpec(fieldSpec);
        }
        public static string UpgradeStatus(object fieldSpecObj)
        {
            return UpgradeStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UpgradeStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UpgradeStatusReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> FileResultConnection? UserActivities
        // GraphQL -> userActivities: FileResultConnection! (type)
        public static string UserActivities_TypedFieldSpec(FileResultConnection fieldSpec)
        {
            string args = "\n(\nfilter: $filter\nsort: $sort\ntimeRange: $timeRange\nuserId: $userId\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\n)";
            return "userActivities" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserActivities_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserActivities((FileResultConnection)fieldSpecObj);
        }
        public static string UserActivities(FileResultConnection fieldSpec)
        {
            return UserActivities_TypedFieldSpec(fieldSpec);
        }
        public static string UserActivities(object fieldSpecObj)
        {
            return UserActivities_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserActivitiesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new FileResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActivityTimelineResultConnection? UserActivityTimeline
        // GraphQL -> userActivityTimeline: ActivityTimelineResultConnection! (type)
        public static string UserActivityTimeline_TypedFieldSpec(ActivityTimelineResultConnection fieldSpec)
        {
            string args = "\n(\nuserId: $userId\nstartDay: $startDay\ntimezone: $timezone\nuniqueActivities: $uniqueActivities\n)";
            return "userActivityTimeline" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserActivityTimeline_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserActivityTimeline((ActivityTimelineResultConnection)fieldSpecObj);
        }
        public static string UserActivityTimeline(ActivityTimelineResultConnection fieldSpec)
        {
            return UserActivityTimeline_TypedFieldSpec(fieldSpec);
        }
        public static string UserActivityTimeline(object fieldSpecObj)
        {
            return UserActivityTimeline_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserActivityTimelineFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActivityTimelineResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AnalyzerAccessUsageConnection? UserAnalyzerAccess
        // GraphQL -> userAnalyzerAccess: AnalyzerAccessUsageConnection! (type)
        public static string UserAnalyzerAccess_TypedFieldSpec(AnalyzerAccessUsageConnection fieldSpec)
        {
            string args = "\n(\nuserId: $userId\nstartDay: $startDay\ntimezone: $timezone\nlimit: $limit\n)";
            return "userAnalyzerAccess" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserAnalyzerAccess_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserAnalyzerAccess((AnalyzerAccessUsageConnection)fieldSpecObj);
        }
        public static string UserAnalyzerAccess(AnalyzerAccessUsageConnection fieldSpec)
        {
            return UserAnalyzerAccess_TypedFieldSpec(fieldSpec);
        }
        public static string UserAnalyzerAccess(object fieldSpecObj)
        {
            return UserAnalyzerAccess_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserAnalyzerAccessFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AnalyzerAccessUsageConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UserAuditConnection? UserAuditConnection
        // GraphQL -> userAuditConnection: UserAuditConnection! (type)
        public static string UserAuditConnection_TypedFieldSpec(UserAuditConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortOrder: $sortOrder\nsortBy: $sortBy\nfilters: $filters\n)";
            return "userAuditConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserAuditConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserAuditConnection((UserAuditConnection)fieldSpecObj);
        }
        public static string UserAuditConnection(UserAuditConnection fieldSpec)
        {
            return UserAuditConnection_TypedFieldSpec(fieldSpec);
        }
        public static string UserAuditConnection(object fieldSpecObj)
        {
            return UserAuditConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserAuditConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UserAuditConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetUserDetailReply? UserDetail
        // GraphQL -> userDetail: GetUserDetailReply! (type)
        public static string UserDetail_TypedFieldSpec(GetUserDetailReply fieldSpec)
        {
            string args = "\n(\nuserId: $userId\nstartDay: $startDay\ntimezone: $timezone\n)";
            return "userDetail" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserDetail_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserDetail((GetUserDetailReply)fieldSpecObj);
        }
        public static string UserDetail(GetUserDetailReply fieldSpec)
        {
            return UserDetail_TypedFieldSpec(fieldSpec);
        }
        public static string UserDetail(object fieldSpecObj)
        {
            return UserDetail_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserDetailFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetUserDetailReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ActivityTimelineResultConnection? UserFileActivityTimeline
        // GraphQL -> userFileActivityTimeline: ActivityTimelineResultConnection! (type)
        public static string UserFileActivityTimeline_TypedFieldSpec(ActivityTimelineResultConnection fieldSpec)
        {
            string args = "\n(\nuserId: $userId\nresource: $resource\nnativePath: $nativePath\nstartDay: $startDay\ntimezone: $timezone\ntimeGranularity: $timeGranularity\n)";
            return "userFileActivityTimeline" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserFileActivityTimeline_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserFileActivityTimeline((ActivityTimelineResultConnection)fieldSpecObj);
        }
        public static string UserFileActivityTimeline(ActivityTimelineResultConnection fieldSpec)
        {
            return UserFileActivityTimeline_TypedFieldSpec(fieldSpec);
        }
        public static string UserFileActivityTimeline(object fieldSpecObj)
        {
            return UserFileActivityTimeline_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserFileActivityTimelineFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ActivityTimelineResultConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<Group>? UserGroups
        // GraphQL -> userGroups: [Group!]! (type)
        public static string UserGroups_TypedFieldSpec(List<Group> fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nroleIdsFilter: $roleIdsFilter\n)";
            return "userGroups" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserGroups_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserGroups((List<Group>)fieldSpecObj);
        }
        public static string UserGroups(List<Group> fieldSpec)
        {
            return UserGroups_TypedFieldSpec(fieldSpec);
        }
        public static string UserGroups(object fieldSpecObj)
        {
            return UserGroups_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserGroupsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<Group>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UserNotifications? UserNotifications
        // GraphQL -> userNotifications: UserNotifications! (type)
        public static string UserNotifications_TypedFieldSpec(UserNotifications fieldSpec)
        {
            string args = "";
            return "userNotifications" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserNotifications_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserNotifications((UserNotifications)fieldSpecObj);
        }
        public static string UserNotifications(UserNotifications fieldSpec)
        {
            return UserNotifications_TypedFieldSpec(fieldSpec);
        }
        public static string UserNotifications(object fieldSpecObj)
        {
            return UserNotifications_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserNotificationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UserNotifications() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetUserSessionManagementConfigReply? UserSessionManagementConfig
        // GraphQL -> userSessionManagementConfig: GetUserSessionManagementConfigReply! (type)
        public static string UserSessionManagementConfig_TypedFieldSpec(GetUserSessionManagementConfigReply fieldSpec)
        {
            string args = "";
            return "userSessionManagementConfig" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserSessionManagementConfig_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserSessionManagementConfig((GetUserSessionManagementConfigReply)fieldSpecObj);
        }
        public static string UserSessionManagementConfig(GetUserSessionManagementConfigReply fieldSpec)
        {
            return UserSessionManagementConfig_TypedFieldSpec(fieldSpec);
        }
        public static string UserSessionManagementConfig(object fieldSpecObj)
        {
            return UserSessionManagementConfig_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserSessionManagementConfigFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetUserSessionManagementConfigReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UserSettings? UserSettings
        // GraphQL -> userSettings: UserSettings! (type)
        public static string UserSettings_TypedFieldSpec(UserSettings fieldSpec)
        {
            string args = "";
            return "userSettings" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UserSettings_ObjectFieldSpec(object fieldSpecObj)
        {
            return UserSettings((UserSettings)fieldSpecObj);
        }
        public static string UserSettings(UserSettings fieldSpec)
        {
            return UserSettings_TypedFieldSpec(fieldSpec);
        }
        public static string UserSettings(object fieldSpecObj)
        {
            return UserSettings_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UserSettingsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UserSettings() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> UserConnection? UsersInCurrentAndDescendantOrganization
        // GraphQL -> usersInCurrentAndDescendantOrganization: UserConnection! (type)
        public static string UsersInCurrentAndDescendantOrganization_TypedFieldSpec(UserConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nsortBy: $sortBy\nfilter: $filter\nshouldIncludeUserWithoutRole: $shouldIncludeUserWithoutRole\n)";
            return "usersInCurrentAndDescendantOrganization" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string UsersInCurrentAndDescendantOrganization_ObjectFieldSpec(object fieldSpecObj)
        {
            return UsersInCurrentAndDescendantOrganization((UserConnection)fieldSpecObj);
        }
        public static string UsersInCurrentAndDescendantOrganization(UserConnection fieldSpec)
        {
            return UsersInCurrentAndDescendantOrganization_TypedFieldSpec(fieldSpec);
        }
        public static string UsersInCurrentAndDescendantOrganization(object fieldSpecObj)
        {
            return UsersInCurrentAndDescendantOrganization_ObjectFieldSpec(fieldSpecObj);
        }
        public static object UsersInCurrentAndDescendantOrganizationFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new UserConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VcenterAdvancedTagPreviewReply? VcenterAdvancedTagPreview
        // GraphQL -> vCenterAdvancedTagPreview: VcenterAdvancedTagPreviewReply! (type)
        public static string VcenterAdvancedTagPreview_TypedFieldSpec(VcenterAdvancedTagPreviewReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vCenterAdvancedTagPreview" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VcenterAdvancedTagPreview_ObjectFieldSpec(object fieldSpecObj)
        {
            return VcenterAdvancedTagPreview((VcenterAdvancedTagPreviewReply)fieldSpecObj);
        }
        public static string VcenterAdvancedTagPreview(VcenterAdvancedTagPreviewReply fieldSpec)
        {
            return VcenterAdvancedTagPreview_TypedFieldSpec(fieldSpec);
        }
        public static string VcenterAdvancedTagPreview(object fieldSpecObj)
        {
            return VcenterAdvancedTagPreview_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VcenterAdvancedTagPreviewFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VcenterAdvancedTagPreviewReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HotAddBandwidthInfo? VcenterHotAddBandwidth
        // GraphQL -> vCenterHotAddBandwidth: HotAddBandwidthInfo! (type)
        public static string VcenterHotAddBandwidth_TypedFieldSpec(HotAddBandwidthInfo fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vCenterHotAddBandwidth" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VcenterHotAddBandwidth_ObjectFieldSpec(object fieldSpecObj)
        {
            return VcenterHotAddBandwidth((HotAddBandwidthInfo)fieldSpecObj);
        }
        public static string VcenterHotAddBandwidth(HotAddBandwidthInfo fieldSpec)
        {
            return VcenterHotAddBandwidth_TypedFieldSpec(fieldSpec);
        }
        public static string VcenterHotAddBandwidth(object fieldSpecObj)
        {
            return VcenterHotAddBandwidth_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VcenterHotAddBandwidthFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HotAddBandwidthInfo() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> HotAddNetworkConfigWithName? VcenterHotAddNetwork
        // GraphQL -> vCenterHotAddNetwork: HotAddNetworkConfigWithName! (type)
        public static string VcenterHotAddNetwork_TypedFieldSpec(HotAddNetworkConfigWithName fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vCenterHotAddNetwork" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VcenterHotAddNetwork_ObjectFieldSpec(object fieldSpecObj)
        {
            return VcenterHotAddNetwork((HotAddNetworkConfigWithName)fieldSpecObj);
        }
        public static string VcenterHotAddNetwork(HotAddNetworkConfigWithName fieldSpec)
        {
            return VcenterHotAddNetwork_TypedFieldSpec(fieldSpec);
        }
        public static string VcenterHotAddNetwork(object fieldSpecObj)
        {
            return VcenterHotAddNetwork_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VcenterHotAddNetworkFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new HotAddNetworkConfigWithName() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> NetworkInfoListResponse? VcenterNetworks
        // GraphQL -> vCenterNetworks: NetworkInfoListResponse! (type)
        public static string VcenterNetworks_TypedFieldSpec(NetworkInfoListResponse fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vCenterNetworks" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VcenterNetworks_ObjectFieldSpec(object fieldSpecObj)
        {
            return VcenterNetworks((NetworkInfoListResponse)fieldSpecObj);
        }
        public static string VcenterNetworks(NetworkInfoListResponse fieldSpec)
        {
            return VcenterNetworks_TypedFieldSpec(fieldSpec);
        }
        public static string VcenterNetworks(object fieldSpecObj)
        {
            return VcenterNetworks_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VcenterNetworksFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new NetworkInfoListResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VcenterPreAddInfo? VcenterPreAddInfo
        // GraphQL -> vCenterPreAddInfo: VcenterPreAddInfo! (type)
        public static string VcenterPreAddInfo_TypedFieldSpec(VcenterPreAddInfo fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vCenterPreAddInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VcenterPreAddInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return VcenterPreAddInfo((VcenterPreAddInfo)fieldSpecObj);
        }
        public static string VcenterPreAddInfo(VcenterPreAddInfo fieldSpec)
        {
            return VcenterPreAddInfo_TypedFieldSpec(fieldSpec);
        }
        public static string VcenterPreAddInfo(object fieldSpecObj)
        {
            return VcenterPreAddInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VcenterPreAddInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VcenterPreAddInfo() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereComputeCluster? VsphereComputeCluster
        // GraphQL -> vSphereComputeCluster: VsphereComputeCluster! (type)
        public static string VsphereComputeCluster_TypedFieldSpec(VsphereComputeCluster fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereComputeCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereComputeCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereComputeCluster((VsphereComputeCluster)fieldSpecObj);
        }
        public static string VsphereComputeCluster(VsphereComputeCluster fieldSpec)
        {
            return VsphereComputeCluster_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereComputeCluster(object fieldSpecObj)
        {
            return VsphereComputeCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereComputeClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereComputeCluster() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereComputeClusterConnection? VsphereComputeClusters
        // GraphQL -> vSphereComputeClusters: VsphereComputeClusterConnection! (type)
        public static string VsphereComputeClusters_TypedFieldSpec(VsphereComputeClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vSphereComputeClusters" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereComputeClusters_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereComputeClusters((VsphereComputeClusterConnection)fieldSpecObj);
        }
        public static string VsphereComputeClusters(VsphereComputeClusterConnection fieldSpec)
        {
            return VsphereComputeClusters_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereComputeClusters(object fieldSpecObj)
        {
            return VsphereComputeClusters_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereComputeClustersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereComputeClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereDatacenter? VsphereDatacenter
        // GraphQL -> vSphereDatacenter: VsphereDatacenter! (type)
        public static string VsphereDatacenter_TypedFieldSpec(VsphereDatacenter fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereDatacenter" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereDatacenter_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereDatacenter((VsphereDatacenter)fieldSpecObj);
        }
        public static string VsphereDatacenter(VsphereDatacenter fieldSpec)
        {
            return VsphereDatacenter_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereDatacenter(object fieldSpecObj)
        {
            return VsphereDatacenter_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereDatacenterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereDatacenter() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereDatastore? VsphereDatastore
        // GraphQL -> vSphereDatastore: VsphereDatastore! (type)
        public static string VsphereDatastore_TypedFieldSpec(VsphereDatastore fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereDatastore" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereDatastore_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereDatastore((VsphereDatastore)fieldSpecObj);
        }
        public static string VsphereDatastore(VsphereDatastore fieldSpec)
        {
            return VsphereDatastore_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereDatastore(object fieldSpecObj)
        {
            return VsphereDatastore_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereDatastoreFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereDatastore() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereDatastoreCluster? VsphereDatastoreCluster
        // GraphQL -> vSphereDatastoreCluster: VsphereDatastoreCluster! (type)
        public static string VsphereDatastoreCluster_TypedFieldSpec(VsphereDatastoreCluster fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereDatastoreCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereDatastoreCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereDatastoreCluster((VsphereDatastoreCluster)fieldSpecObj);
        }
        public static string VsphereDatastoreCluster(VsphereDatastoreCluster fieldSpec)
        {
            return VsphereDatastoreCluster_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereDatastoreCluster(object fieldSpecObj)
        {
            return VsphereDatastoreCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereDatastoreClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereDatastoreCluster() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereDatastoreClusterConnection? VsphereDatastoreClusters
        // GraphQL -> vSphereDatastoreClusters: VsphereDatastoreClusterConnection! (type)
        public static string VsphereDatastoreClusters_TypedFieldSpec(VsphereDatastoreClusterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vSphereDatastoreClusters" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereDatastoreClusters_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereDatastoreClusters((VsphereDatastoreClusterConnection)fieldSpecObj);
        }
        public static string VsphereDatastoreClusters(VsphereDatastoreClusterConnection fieldSpec)
        {
            return VsphereDatastoreClusters_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereDatastoreClusters(object fieldSpecObj)
        {
            return VsphereDatastoreClusters_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereDatastoreClustersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereDatastoreClusterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereDatastoreConnection? VsphereDatastoreConnection
        // GraphQL -> vSphereDatastoreConnection: VsphereDatastoreConnection! (type)
        public static string VsphereDatastoreConnection_TypedFieldSpec(VsphereDatastoreConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vSphereDatastoreConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereDatastoreConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereDatastoreConnection((VsphereDatastoreConnection)fieldSpecObj);
        }
        public static string VsphereDatastoreConnection(VsphereDatastoreConnection fieldSpec)
        {
            return VsphereDatastoreConnection_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereDatastoreConnection(object fieldSpecObj)
        {
            return VsphereDatastoreConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereDatastoreConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereDatastoreConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereFolder? VsphereFolder
        // GraphQL -> vSphereFolder: VsphereFolder! (type)
        public static string VsphereFolder_TypedFieldSpec(VsphereFolder fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereFolder" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereFolder_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereFolder((VsphereFolder)fieldSpecObj);
        }
        public static string VsphereFolder(VsphereFolder fieldSpec)
        {
            return VsphereFolder_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereFolder(object fieldSpecObj)
        {
            return VsphereFolder_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereFolderFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereFolder() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereFolderConnection? VsphereFolders
        // GraphQL -> vSphereFolders: VsphereFolderConnection! (type)
        public static string VsphereFolders_TypedFieldSpec(VsphereFolderConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vSphereFolders" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereFolders_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereFolders((VsphereFolderConnection)fieldSpecObj);
        }
        public static string VsphereFolders(VsphereFolderConnection fieldSpec)
        {
            return VsphereFolders_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereFolders(object fieldSpecObj)
        {
            return VsphereFolders_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereFoldersFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereFolderConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereHost? VsphereHost
        // GraphQL -> vSphereHost: VsphereHost! (type)
        public static string VsphereHost_TypedFieldSpec(VsphereHost fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereHost" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereHost_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereHost((VsphereHost)fieldSpecObj);
        }
        public static string VsphereHost(VsphereHost fieldSpec)
        {
            return VsphereHost_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereHost(object fieldSpecObj)
        {
            return VsphereHost_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereHostFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereHost() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereHostConnection? VsphereHostConnection
        // GraphQL -> vSphereHostConnection: VsphereHostConnection! (type)
        public static string VsphereHostConnection_TypedFieldSpec(VsphereHostConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vSphereHostConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereHostConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereHostConnection((VsphereHostConnection)fieldSpecObj);
        }
        public static string VsphereHostConnection(VsphereHostConnection fieldSpec)
        {
            return VsphereHostConnection_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereHostConnection(object fieldSpecObj)
        {
            return VsphereHostConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereHostConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereHostConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VmwareHostDetail? VsphereHostDetails
        // GraphQL -> vSphereHostDetails: VmwareHostDetail! (type)
        public static string VsphereHostDetails_TypedFieldSpec(VmwareHostDetail fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vSphereHostDetails" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereHostDetails_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereHostDetails((VmwareHostDetail)fieldSpecObj);
        }
        public static string VsphereHostDetails(VmwareHostDetail fieldSpec)
        {
            return VsphereHostDetails_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereHostDetails(object fieldSpecObj)
        {
            return VsphereHostDetails_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereHostDetailsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VmwareHostDetail() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> List<VsphereHost>? VsphereHostsByFids
        // GraphQL -> vSphereHostsByFids: [VsphereHost!]! (type)
        public static string VsphereHostsByFids_TypedFieldSpec(List<VsphereHost> fieldSpec)
        {
            string args = "\n(\nfids: $fids\n)";
            return "vSphereHostsByFids" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereHostsByFids_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereHostsByFids((List<VsphereHost>)fieldSpecObj);
        }
        public static string VsphereHostsByFids(List<VsphereHost> fieldSpec)
        {
            return VsphereHostsByFids_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereHostsByFids(object fieldSpecObj)
        {
            return VsphereHostsByFids_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereHostsByFidsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new List<VsphereHost>() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereLiveMountConnection? VsphereLiveMounts
        // GraphQL -> vSphereLiveMounts: VsphereLiveMountConnection! (type)
        public static string VsphereLiveMounts_TypedFieldSpec(VsphereLiveMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilter: $filter\nsortBy: $sortBy\n)";
            return "vSphereLiveMounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereLiveMounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereLiveMounts((VsphereLiveMountConnection)fieldSpecObj);
        }
        public static string VsphereLiveMounts(VsphereLiveMountConnection fieldSpec)
        {
            return VsphereLiveMounts_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereLiveMounts(object fieldSpecObj)
        {
            return VsphereLiveMounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereLiveMountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereLiveMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereMount? VsphereMount
        // GraphQL -> vSphereMount: VsphereMount! (type)
        public static string VsphereMount_TypedFieldSpec(VsphereMount fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereMount" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereMount_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereMount((VsphereMount)fieldSpecObj);
        }
        public static string VsphereMount(VsphereMount fieldSpec)
        {
            return VsphereMount_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereMount(object fieldSpecObj)
        {
            return VsphereMount_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereMountFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereMount() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereMountConnection? VsphereMountConnection
        // GraphQL -> vSphereMountConnection: VsphereMountConnection! (type)
        public static string VsphereMountConnection_TypedFieldSpec(VsphereMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilter: $filter\nsortBy: $sortBy\nsortOrder: $sortOrder\n)";
            return "vSphereMountConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereMountConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereMountConnection((VsphereMountConnection)fieldSpecObj);
        }
        public static string VsphereMountConnection(VsphereMountConnection fieldSpec)
        {
            return VsphereMountConnection_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereMountConnection(object fieldSpecObj)
        {
            return VsphereMountConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereMountConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereNetwork? VsphereNetwork
        // GraphQL -> vSphereNetwork: VsphereNetwork! (type)
        public static string VsphereNetwork_TypedFieldSpec(VsphereNetwork fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereNetwork" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereNetwork_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereNetwork((VsphereNetwork)fieldSpecObj);
        }
        public static string VsphereNetwork(VsphereNetwork fieldSpec)
        {
            return VsphereNetwork_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereNetwork(object fieldSpecObj)
        {
            return VsphereNetwork_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereNetworkFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereNetwork() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereResourcePool? VsphereResourcePool
        // GraphQL -> vSphereResourcePool: VsphereResourcePool! (type)
        public static string VsphereResourcePool_TypedFieldSpec(VsphereResourcePool fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereResourcePool" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereResourcePool_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereResourcePool((VsphereResourcePool)fieldSpecObj);
        }
        public static string VsphereResourcePool(VsphereResourcePool fieldSpec)
        {
            return VsphereResourcePool_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereResourcePool(object fieldSpecObj)
        {
            return VsphereResourcePool_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereResourcePoolFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereResourcePool() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmHierarchyObjectConnection? VsphereRootRecoveryHierarchy
        // GraphQL -> vSphereRootRecoveryHierarchy: CdmHierarchyObjectConnection! (type)
        public static string VsphereRootRecoveryHierarchy_TypedFieldSpec(CdmHierarchyObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vSphereRootRecoveryHierarchy" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereRootRecoveryHierarchy_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereRootRecoveryHierarchy((CdmHierarchyObjectConnection)fieldSpecObj);
        }
        public static string VsphereRootRecoveryHierarchy(CdmHierarchyObjectConnection fieldSpec)
        {
            return VsphereRootRecoveryHierarchy_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereRootRecoveryHierarchy(object fieldSpecObj)
        {
            return VsphereRootRecoveryHierarchy_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereRootRecoveryHierarchyFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmHierarchyObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereTag? VsphereTag
        // GraphQL -> vSphereTag: VsphereTag! (type)
        public static string VsphereTag_TypedFieldSpec(VsphereTag fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereTag" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereTag_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereTag((VsphereTag)fieldSpecObj);
        }
        public static string VsphereTag(VsphereTag fieldSpec)
        {
            return VsphereTag_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereTag(object fieldSpecObj)
        {
            return VsphereTag_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereTagFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereTag() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereTagCategory? VsphereTagCategory
        // GraphQL -> vSphereTagCategory: VsphereTagCategory! (type)
        public static string VsphereTagCategory_TypedFieldSpec(VsphereTagCategory fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereTagCategory" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereTagCategory_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereTagCategory((VsphereTagCategory)fieldSpecObj);
        }
        public static string VsphereTagCategory(VsphereTagCategory fieldSpec)
        {
            return VsphereTagCategory_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereTagCategory(object fieldSpecObj)
        {
            return VsphereTagCategory_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereTagCategoryFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereTagCategory() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> CdmHierarchyObjectConnection? VsphereTopLevelDescendantsConnection
        // GraphQL -> vSphereTopLevelDescendantsConnection: CdmHierarchyObjectConnection! (type)
        public static string VsphereTopLevelDescendantsConnection_TypedFieldSpec(CdmHierarchyObjectConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\ntypeFilter: $typeFilter\nfilter: $filter\n)";
            return "vSphereTopLevelDescendantsConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereTopLevelDescendantsConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereTopLevelDescendantsConnection((CdmHierarchyObjectConnection)fieldSpecObj);
        }
        public static string VsphereTopLevelDescendantsConnection(CdmHierarchyObjectConnection fieldSpec)
        {
            return VsphereTopLevelDescendantsConnection_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereTopLevelDescendantsConnection(object fieldSpecObj)
        {
            return VsphereTopLevelDescendantsConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereTopLevelDescendantsConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new CdmHierarchyObjectConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereVcenter? VsphereVcenter
        // GraphQL -> vSphereVCenter: VsphereVcenter! (type)
        public static string VsphereVcenter_TypedFieldSpec(VsphereVcenter fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereVCenter" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVcenter_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVcenter((VsphereVcenter)fieldSpecObj);
        }
        public static string VsphereVcenter(VsphereVcenter fieldSpec)
        {
            return VsphereVcenter_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVcenter(object fieldSpecObj)
        {
            return VsphereVcenter_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVcenterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereVcenter() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereVcenterConnection? VsphereVcenterConnection
        // GraphQL -> vSphereVCenterConnection: VsphereVcenterConnection! (type)
        public static string VsphereVcenterConnection_TypedFieldSpec(VsphereVcenterConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vSphereVCenterConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVcenterConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVcenterConnection((VsphereVcenterConnection)fieldSpecObj);
        }
        public static string VsphereVcenterConnection(VsphereVcenterConnection fieldSpec)
        {
            return VsphereVcenterConnection_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVcenterConnection(object fieldSpecObj)
        {
            return VsphereVcenterConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVcenterConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereVcenterConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? VsphereVmAsyncRequestStatus
        // GraphQL -> vSphereVMAsyncRequestStatus: AsyncRequestStatus! (type)
        public static string VsphereVmAsyncRequestStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nid: $id\n)";
            return "vSphereVMAsyncRequestStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVmAsyncRequestStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVmAsyncRequestStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string VsphereVmAsyncRequestStatus(AsyncRequestStatus fieldSpec)
        {
            return VsphereVmAsyncRequestStatus_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVmAsyncRequestStatus(object fieldSpecObj)
        {
            return VsphereVmAsyncRequestStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVmAsyncRequestStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereVm? VsphereVmNew
        // GraphQL -> vSphereVmNew: VsphereVm! (type)
        public static string VsphereVmNew_TypedFieldSpec(VsphereVm fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "vSphereVmNew" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVmNew_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVmNew((VsphereVm)fieldSpecObj);
        }
        public static string VsphereVmNew(VsphereVm fieldSpec)
        {
            return VsphereVmNew_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVmNew(object fieldSpecObj)
        {
            return VsphereVmNew_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVmNewFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereVm() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereVmConnection? VsphereVmNewConnection
        // GraphQL -> vSphereVmNewConnection: VsphereVmConnection! (type)
        public static string VsphereVmNewConnection_TypedFieldSpec(VsphereVmConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vSphereVmNewConnection" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVmNewConnection_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVmNewConnection((VsphereVmConnection)fieldSpecObj);
        }
        public static string VsphereVmNewConnection(VsphereVmConnection fieldSpec)
        {
            return VsphereVmNewConnection_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVmNewConnection(object fieldSpecObj)
        {
            return VsphereVmNewConnection_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVmNewConnectionFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereVmConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidateAwsNativeRdsClusterNameForExportReply? ValidateAwsNativeRdsClusterNameForExport
        // GraphQL -> validateAwsNativeRdsClusterNameForExport: ValidateAwsNativeRdsClusterNameForExportReply! (type)
        public static string ValidateAwsNativeRdsClusterNameForExport_TypedFieldSpec(ValidateAwsNativeRdsClusterNameForExportReply fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\nrdsClusterName: $rdsClusterName\n)";
            return "validateAwsNativeRdsClusterNameForExport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ValidateAwsNativeRdsClusterNameForExport_ObjectFieldSpec(object fieldSpecObj)
        {
            return ValidateAwsNativeRdsClusterNameForExport((ValidateAwsNativeRdsClusterNameForExportReply)fieldSpecObj);
        }
        public static string ValidateAwsNativeRdsClusterNameForExport(ValidateAwsNativeRdsClusterNameForExportReply fieldSpec)
        {
            return ValidateAwsNativeRdsClusterNameForExport_TypedFieldSpec(fieldSpec);
        }
        public static string ValidateAwsNativeRdsClusterNameForExport(object fieldSpecObj)
        {
            return ValidateAwsNativeRdsClusterNameForExport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ValidateAwsNativeRdsClusterNameForExportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidateAwsNativeRdsClusterNameForExportReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidateAwsNativeRdsInstanceNameForExportReply? ValidateAwsNativeRdsInstanceNameForExport
        // GraphQL -> validateAwsNativeRdsInstanceNameForExport: ValidateAwsNativeRdsInstanceNameForExportReply! (type)
        public static string ValidateAwsNativeRdsInstanceNameForExport_TypedFieldSpec(ValidateAwsNativeRdsInstanceNameForExportReply fieldSpec)
        {
            string args = "\n(\nawsAccountRubrikId: $awsAccountRubrikId\nregion: $region\nrdsInstanceName: $rdsInstanceName\n)";
            return "validateAwsNativeRdsInstanceNameForExport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ValidateAwsNativeRdsInstanceNameForExport_ObjectFieldSpec(object fieldSpecObj)
        {
            return ValidateAwsNativeRdsInstanceNameForExport((ValidateAwsNativeRdsInstanceNameForExportReply)fieldSpecObj);
        }
        public static string ValidateAwsNativeRdsInstanceNameForExport(ValidateAwsNativeRdsInstanceNameForExportReply fieldSpec)
        {
            return ValidateAwsNativeRdsInstanceNameForExport_TypedFieldSpec(fieldSpec);
        }
        public static string ValidateAwsNativeRdsInstanceNameForExport(object fieldSpecObj)
        {
            return ValidateAwsNativeRdsInstanceNameForExport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ValidateAwsNativeRdsInstanceNameForExportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidateAwsNativeRdsInstanceNameForExportReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidateAzureSubnetsForCloudAccountExocomputeReply? ValidateAzureCloudAccountExocomputeConfigurations
        // GraphQL -> validateAzureCloudAccountExocomputeConfigurations: ValidateAzureSubnetsForCloudAccountExocomputeReply! (type)
        public static string ValidateAzureCloudAccountExocomputeConfigurations_TypedFieldSpec(ValidateAzureSubnetsForCloudAccountExocomputeReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "validateAzureCloudAccountExocomputeConfigurations" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ValidateAzureCloudAccountExocomputeConfigurations_ObjectFieldSpec(object fieldSpecObj)
        {
            return ValidateAzureCloudAccountExocomputeConfigurations((ValidateAzureSubnetsForCloudAccountExocomputeReply)fieldSpecObj);
        }
        public static string ValidateAzureCloudAccountExocomputeConfigurations(ValidateAzureSubnetsForCloudAccountExocomputeReply fieldSpec)
        {
            return ValidateAzureCloudAccountExocomputeConfigurations_TypedFieldSpec(fieldSpec);
        }
        public static string ValidateAzureCloudAccountExocomputeConfigurations(object fieldSpecObj)
        {
            return ValidateAzureCloudAccountExocomputeConfigurations_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ValidateAzureCloudAccountExocomputeConfigurationsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidateAzureSubnetsForCloudAccountExocomputeReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidateAzureNativeSqlDatabaseDbNameForExportReply? ValidateAzureNativeSqlDatabaseDbNameForExport
        // GraphQL -> validateAzureNativeSqlDatabaseDbNameForExport: ValidateAzureNativeSqlDatabaseDbNameForExportReply! (type)
        public static string ValidateAzureNativeSqlDatabaseDbNameForExport_TypedFieldSpec(ValidateAzureNativeSqlDatabaseDbNameForExportReply fieldSpec)
        {
            string args = "\n(\nazureSqlDatabaseName: $azureSqlDatabaseName\nazureSqlDatabaseServerRubrikId: $azureSqlDatabaseServerRubrikId\n)";
            return "validateAzureNativeSqlDatabaseDbNameForExport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ValidateAzureNativeSqlDatabaseDbNameForExport_ObjectFieldSpec(object fieldSpecObj)
        {
            return ValidateAzureNativeSqlDatabaseDbNameForExport((ValidateAzureNativeSqlDatabaseDbNameForExportReply)fieldSpecObj);
        }
        public static string ValidateAzureNativeSqlDatabaseDbNameForExport(ValidateAzureNativeSqlDatabaseDbNameForExportReply fieldSpec)
        {
            return ValidateAzureNativeSqlDatabaseDbNameForExport_TypedFieldSpec(fieldSpec);
        }
        public static string ValidateAzureNativeSqlDatabaseDbNameForExport(object fieldSpecObj)
        {
            return ValidateAzureNativeSqlDatabaseDbNameForExport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ValidateAzureNativeSqlDatabaseDbNameForExportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidateAzureNativeSqlDatabaseDbNameForExportReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidateAzureNativeSqlManagedInstanceDbNameForExportReply? ValidateAzureNativeSqlManagedInstanceDbNameForExport
        // GraphQL -> validateAzureNativeSqlManagedInstanceDbNameForExport: ValidateAzureNativeSqlManagedInstanceDbNameForExportReply! (type)
        public static string ValidateAzureNativeSqlManagedInstanceDbNameForExport_TypedFieldSpec(ValidateAzureNativeSqlManagedInstanceDbNameForExportReply fieldSpec)
        {
            string args = "\n(\nazureSqlDatabaseName: $azureSqlDatabaseName\nazureSqlManagedInstanceServerRubrikId: $azureSqlManagedInstanceServerRubrikId\n)";
            return "validateAzureNativeSqlManagedInstanceDbNameForExport" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ValidateAzureNativeSqlManagedInstanceDbNameForExport_ObjectFieldSpec(object fieldSpecObj)
        {
            return ValidateAzureNativeSqlManagedInstanceDbNameForExport((ValidateAzureNativeSqlManagedInstanceDbNameForExportReply)fieldSpecObj);
        }
        public static string ValidateAzureNativeSqlManagedInstanceDbNameForExport(ValidateAzureNativeSqlManagedInstanceDbNameForExportReply fieldSpec)
        {
            return ValidateAzureNativeSqlManagedInstanceDbNameForExport_TypedFieldSpec(fieldSpec);
        }
        public static string ValidateAzureNativeSqlManagedInstanceDbNameForExport(object fieldSpecObj)
        {
            return ValidateAzureNativeSqlManagedInstanceDbNameForExport_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ValidateAzureNativeSqlManagedInstanceDbNameForExportFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidateAzureNativeSqlManagedInstanceDbNameForExportReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ClusterLicenseCapacityValidations? ValidateClusterLicenseCapacity
        // GraphQL -> validateClusterLicenseCapacity: ClusterLicenseCapacityValidations! (type)
        public static string ValidateClusterLicenseCapacity_TypedFieldSpec(ClusterLicenseCapacityValidations fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "validateClusterLicenseCapacity" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ValidateClusterLicenseCapacity_ObjectFieldSpec(object fieldSpecObj)
        {
            return ValidateClusterLicenseCapacity((ClusterLicenseCapacityValidations)fieldSpecObj);
        }
        public static string ValidateClusterLicenseCapacity(ClusterLicenseCapacityValidations fieldSpec)
        {
            return ValidateClusterLicenseCapacity_TypedFieldSpec(fieldSpec);
        }
        public static string ValidateClusterLicenseCapacity(object fieldSpecObj)
        {
            return ValidateClusterLicenseCapacity_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ValidateClusterLicenseCapacityFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ClusterLicenseCapacityValidations() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> ValidateOrgNameReply? ValidateOrgName
        // GraphQL -> validateOrgName: ValidateOrgNameReply! (type)
        public static string ValidateOrgName_TypedFieldSpec(ValidateOrgNameReply fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "validateOrgName" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string ValidateOrgName_ObjectFieldSpec(object fieldSpecObj)
        {
            return ValidateOrgName((ValidateOrgNameReply)fieldSpecObj);
        }
        public static string ValidateOrgName(ValidateOrgNameReply fieldSpec)
        {
            return ValidateOrgName_TypedFieldSpec(fieldSpec);
        }
        public static string ValidateOrgName(object fieldSpecObj)
        {
            return ValidateOrgName_ObjectFieldSpec(fieldSpecObj);
        }
        public static object ValidateOrgNameFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new ValidateOrgNameReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VappInstantRecoveryOptions? VappSnapshotInstantRecoveryOptions
        // GraphQL -> vappSnapshotInstantRecoveryOptions: VappInstantRecoveryOptions! (type)
        public static string VappSnapshotInstantRecoveryOptions_TypedFieldSpec(VappInstantRecoveryOptions fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vappSnapshotInstantRecoveryOptions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VappSnapshotInstantRecoveryOptions_ObjectFieldSpec(object fieldSpecObj)
        {
            return VappSnapshotInstantRecoveryOptions((VappInstantRecoveryOptions)fieldSpecObj);
        }
        public static string VappSnapshotInstantRecoveryOptions(VappInstantRecoveryOptions fieldSpec)
        {
            return VappSnapshotInstantRecoveryOptions_TypedFieldSpec(fieldSpec);
        }
        public static string VappSnapshotInstantRecoveryOptions(object fieldSpecObj)
        {
            return VappSnapshotInstantRecoveryOptions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VappSnapshotInstantRecoveryOptionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VappInstantRecoveryOptions() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VappTemplateExportOptionsUnion? VappTemplateSnapshotExportOptions
        // GraphQL -> vappTemplateSnapshotExportOptions: VappTemplateExportOptionsUnion! (type)
        public static string VappTemplateSnapshotExportOptions_TypedFieldSpec(VappTemplateExportOptionsUnion fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vappTemplateSnapshotExportOptions" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VappTemplateSnapshotExportOptions_ObjectFieldSpec(object fieldSpecObj)
        {
            return VappTemplateSnapshotExportOptions((VappTemplateExportOptionsUnion)fieldSpecObj);
        }
        public static string VappTemplateSnapshotExportOptions(VappTemplateExportOptionsUnion fieldSpec)
        {
            return VappTemplateSnapshotExportOptions_TypedFieldSpec(fieldSpec);
        }
        public static string VappTemplateSnapshotExportOptions(object fieldSpecObj)
        {
            return VappTemplateSnapshotExportOptions_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VappTemplateSnapshotExportOptionsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VappTemplateExportOptionsUnion() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VsphereVmConnection? VcdVappVms
        // GraphQL -> vcdVappVms: VsphereVmConnection! (type)
        public static string VcdVappVms_TypedFieldSpec(VsphereVmConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nsortBy: $sortBy\nsortOrder: $sortOrder\nfilter: $filter\n)";
            return "vcdVappVms" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VcdVappVms_ObjectFieldSpec(object fieldSpecObj)
        {
            return VcdVappVms((VsphereVmConnection)fieldSpecObj);
        }
        public static string VcdVappVms(VsphereVmConnection fieldSpec)
        {
            return VcdVappVms_TypedFieldSpec(fieldSpec);
        }
        public static string VcdVappVms(object fieldSpecObj)
        {
            return VcdVappVms_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VcdVappVmsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VsphereVmConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> AsyncRequestStatus? VcenterAsyncRequestStatus
        // GraphQL -> vcenterAsyncRequestStatus: AsyncRequestStatus! (type)
        public static string VcenterAsyncRequestStatus_TypedFieldSpec(AsyncRequestStatus fieldSpec)
        {
            string args = "\n(\ninput: $input\n)";
            return "vcenterAsyncRequestStatus" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VcenterAsyncRequestStatus_ObjectFieldSpec(object fieldSpecObj)
        {
            return VcenterAsyncRequestStatus((AsyncRequestStatus)fieldSpecObj);
        }
        public static string VcenterAsyncRequestStatus(AsyncRequestStatus fieldSpec)
        {
            return VcenterAsyncRequestStatus_TypedFieldSpec(fieldSpec);
        }
        public static string VcenterAsyncRequestStatus(object fieldSpecObj)
        {
            return VcenterAsyncRequestStatus_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VcenterAsyncRequestStatusFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new AsyncRequestStatus() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VerifySlaWithReplicationToClusterResponse? VerifySlaWithReplicationToCluster
        // GraphQL -> verifySlaWithReplicationToCluster: VerifySlaWithReplicationToClusterResponse! (type)
        public static string VerifySlaWithReplicationToCluster_TypedFieldSpec(VerifySlaWithReplicationToClusterResponse fieldSpec)
        {
            string args = "\n(\ncdmClusterUUID: $cdmClusterUUID\nincludeArchived: $includeArchived\n)";
            return "verifySlaWithReplicationToCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VerifySlaWithReplicationToCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return VerifySlaWithReplicationToCluster((VerifySlaWithReplicationToClusterResponse)fieldSpecObj);
        }
        public static string VerifySlaWithReplicationToCluster(VerifySlaWithReplicationToClusterResponse fieldSpec)
        {
            return VerifySlaWithReplicationToCluster_TypedFieldSpec(fieldSpec);
        }
        public static string VerifySlaWithReplicationToCluster(object fieldSpecObj)
        {
            return VerifySlaWithReplicationToCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VerifySlaWithReplicationToClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VerifySlaWithReplicationToClusterResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> VolumeGroupLiveMountConnection? VolumeGroupMounts
        // GraphQL -> volumeGroupMounts: VolumeGroupLiveMountConnection! (type)
        public static string VolumeGroupMounts_TypedFieldSpec(VolumeGroupLiveMountConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nfilters: $filters\nsortBy: $sortBy\n)";
            return "volumeGroupMounts" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VolumeGroupMounts_ObjectFieldSpec(object fieldSpecObj)
        {
            return VolumeGroupMounts((VolumeGroupLiveMountConnection)fieldSpecObj);
        }
        public static string VolumeGroupMounts(VolumeGroupLiveMountConnection fieldSpec)
        {
            return VolumeGroupMounts_TypedFieldSpec(fieldSpec);
        }
        public static string VolumeGroupMounts(object fieldSpecObj)
        {
            return VolumeGroupMounts_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VolumeGroupMountsFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new VolumeGroupLiveMountConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RecoverableRangeResponse? VsphereVmMissedRecoverableRange
        // GraphQL -> vsphereVMMissedRecoverableRange: RecoverableRangeResponse! (type)
        public static string VsphereVmMissedRecoverableRange_TypedFieldSpec(RecoverableRangeResponse fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\nbeforeTime: $beforeTime\nafterTime: $afterTime\n)";
            return "vsphereVMMissedRecoverableRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVmMissedRecoverableRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVmMissedRecoverableRange((RecoverableRangeResponse)fieldSpecObj);
        }
        public static string VsphereVmMissedRecoverableRange(RecoverableRangeResponse fieldSpec)
        {
            return VsphereVmMissedRecoverableRange_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVmMissedRecoverableRange(object fieldSpecObj)
        {
            return VsphereVmMissedRecoverableRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVmMissedRecoverableRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RecoverableRangeResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> RecoverableRangeResponse? VsphereVmRecoverableRange
        // GraphQL -> vsphereVMRecoverableRange: RecoverableRangeResponse! (type)
        public static string VsphereVmRecoverableRange_TypedFieldSpec(RecoverableRangeResponse fieldSpec)
        {
            string args = "\n(\nsnappableFid: $snappableFid\nbeforeTime: $beforeTime\nafterTime: $afterTime\n)";
            return "vsphereVMRecoverableRange" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVmRecoverableRange_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVmRecoverableRange((RecoverableRangeResponse)fieldSpecObj);
        }
        public static string VsphereVmRecoverableRange(RecoverableRangeResponse fieldSpec)
        {
            return VsphereVmRecoverableRange_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVmRecoverableRange(object fieldSpecObj)
        {
            return VsphereVmRecoverableRange_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVmRecoverableRangeFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new RecoverableRangeResponse() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> BatchVmwareVmRecoverableRanges? VsphereVmRecoverableRangeInBatch
        // GraphQL -> vsphereVMRecoverableRangeInBatch: BatchVmwareVmRecoverableRanges! (type)
        public static string VsphereVmRecoverableRangeInBatch_TypedFieldSpec(BatchVmwareVmRecoverableRanges fieldSpec)
        {
            string args = "\n(\nrequestInfo: $requestInfo\n)";
            return "vsphereVMRecoverableRangeInBatch" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVmRecoverableRangeInBatch_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVmRecoverableRangeInBatch((BatchVmwareVmRecoverableRanges)fieldSpecObj);
        }
        public static string VsphereVmRecoverableRangeInBatch(BatchVmwareVmRecoverableRanges fieldSpec)
        {
            return VsphereVmRecoverableRangeInBatch_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVmRecoverableRangeInBatch(object fieldSpecObj)
        {
            return VsphereVmRecoverableRangeInBatch_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVmRecoverableRangeInBatchFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new BatchVmwareVmRecoverableRanges() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> BatchVmwareCdpLiveInfo? VsphereVmwareCdpLiveInfo
        // GraphQL -> vsphereVmwareCdpLiveInfo: BatchVmwareCdpLiveInfo! (type)
        public static string VsphereVmwareCdpLiveInfo_TypedFieldSpec(BatchVmwareCdpLiveInfo fieldSpec)
        {
            string args = "\n(\nids: $ids\n)";
            return "vsphereVmwareCdpLiveInfo" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string VsphereVmwareCdpLiveInfo_ObjectFieldSpec(object fieldSpecObj)
        {
            return VsphereVmwareCdpLiveInfo((BatchVmwareCdpLiveInfo)fieldSpecObj);
        }
        public static string VsphereVmwareCdpLiveInfo(BatchVmwareCdpLiveInfo fieldSpec)
        {
            return VsphereVmwareCdpLiveInfo_TypedFieldSpec(fieldSpec);
        }
        public static string VsphereVmwareCdpLiveInfo(object fieldSpecObj)
        {
            return VsphereVmwareCdpLiveInfo_ObjectFieldSpec(fieldSpecObj);
        }
        public static object VsphereVmwareCdpLiveInfoFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new BatchVmwareCdpLiveInfo() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> WindowsCluster? WindowsCluster
        // GraphQL -> windowsCluster: WindowsCluster! (type)
        public static string WindowsCluster_TypedFieldSpec(WindowsCluster fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "windowsCluster" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string WindowsCluster_ObjectFieldSpec(object fieldSpecObj)
        {
            return WindowsCluster((WindowsCluster)fieldSpecObj);
        }
        public static string WindowsCluster(WindowsCluster fieldSpec)
        {
            return WindowsCluster_TypedFieldSpec(fieldSpec);
        }
        public static string WindowsCluster(object fieldSpecObj)
        {
            return WindowsCluster_ObjectFieldSpec(fieldSpecObj);
        }
        public static object WindowsClusterFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new WindowsCluster() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> WindowsFileset? WindowsFileset
        // GraphQL -> windowsFileset: WindowsFileset! (type)
        public static string WindowsFileset_TypedFieldSpec(WindowsFileset fieldSpec)
        {
            string args = "\n(\nfid: $fid\n)";
            return "windowsFileset" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string WindowsFileset_ObjectFieldSpec(object fieldSpecObj)
        {
            return WindowsFileset((WindowsFileset)fieldSpecObj);
        }
        public static string WindowsFileset(WindowsFileset fieldSpec)
        {
            return WindowsFileset_TypedFieldSpec(fieldSpec);
        }
        public static string WindowsFileset(object fieldSpecObj)
        {
            return WindowsFileset_ObjectFieldSpec(fieldSpecObj);
        }
        public static object WindowsFilesetFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new WindowsFileset() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> GetWorkloadAlertSettingReply? WorkloadAlertSetting
        // GraphQL -> workloadAlertSetting: GetWorkloadAlertSettingReply! (type)
        public static string WorkloadAlertSetting_TypedFieldSpec(GetWorkloadAlertSettingReply fieldSpec)
        {
            string args = "\n(\nclusterUuid: $clusterUuid\nworkloadId: $workloadId\n)";
            return "workloadAlertSetting" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string WorkloadAlertSetting_ObjectFieldSpec(object fieldSpecObj)
        {
            return WorkloadAlertSetting((GetWorkloadAlertSettingReply)fieldSpecObj);
        }
        public static string WorkloadAlertSetting(GetWorkloadAlertSettingReply fieldSpec)
        {
            return WorkloadAlertSetting_TypedFieldSpec(fieldSpec);
        }
        public static string WorkloadAlertSetting(object fieldSpecObj)
        {
            return WorkloadAlertSetting_ObjectFieldSpec(fieldSpecObj);
        }
        public static object WorkloadAlertSettingFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new GetWorkloadAlertSettingReply() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        //      C# -> WorkloadAnomalyConnection? WorkloadAnomalies
        // GraphQL -> workloadAnomalies: WorkloadAnomalyConnection! (type)
        public static string WorkloadAnomalies_TypedFieldSpec(WorkloadAnomalyConnection fieldSpec)
        {
            string args = "\n(\nfirst: $first\nafter: $after\nlast: $last\nbefore: $before\nbeginTime: $beginTime\nendTime: $endTime\nworkloadNameSearch: $workloadNameSearch\nobjectTypeFilter: $objectTypeFilter\nclusterUuidFilter: $clusterUuidFilter\nslaFidFilter: $slaFidFilter\nencryptionFilter: $encryptionFilter\nseverityFilter: $severityFilter\nanalyzerGroupFilter: $analyzerGroupFilter\nsortBy: $sortBy\nsortOrder: $sortOrder\norderParentsFirst: $orderParentsFirst\nblueprintRecoveryTypes: $blueprintRecoveryTypes\nlocationsFilter: $locationsFilter\nresolutionStatusFilter: $resolutionStatusFilter\n)";
            return "workloadAnomalies" + args + "\n{\n" +
                    fieldSpec.AsFieldSpec() +
                    "}\n";
        }
        public static string WorkloadAnomalies_ObjectFieldSpec(object fieldSpecObj)
        {
            return WorkloadAnomalies((WorkloadAnomalyConnection)fieldSpecObj);
        }
        public static string WorkloadAnomalies(WorkloadAnomalyConnection fieldSpec)
        {
            return WorkloadAnomalies_TypedFieldSpec(fieldSpec);
        }
        public static string WorkloadAnomalies(object fieldSpecObj)
        {
            return WorkloadAnomalies_ObjectFieldSpec(fieldSpecObj);
        }
        public static object WorkloadAnomaliesFieldSpec(ExplorationContext? ec=null)
        {
            if(ec==null) {
                ec = new ExplorationContext();
            }
            var fieldSpecObj = new WorkloadAnomalyConnection() ;
            fieldSpecObj.ApplyExploratoryFieldSpec(ec);
            return fieldSpecObj;
        }

        #endregion

    } // class Query
    #endregion
}