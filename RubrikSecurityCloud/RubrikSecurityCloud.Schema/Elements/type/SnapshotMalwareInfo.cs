// SnapshotMalwareInfo.cs
//
// This generated file is part of the Rubrik PowerShell SDK.
// Manual changes to this file may be lost.

#nullable enable
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using System.Reflection;
using System.Text.RegularExpressions;
using RubrikSecurityCloud;

namespace RubrikSecurityCloud.Types
{
    #region SnapshotMalwareInfo
    public class SnapshotMalwareInfo: BaseType
    {
        #region members

        //      C# -> AnomalyConfidenceEnum? AnomalyConfidence
        // GraphQL -> anomalyConfidence: AnomalyConfidenceEnum! (enum)
        [JsonProperty("anomalyConfidence")]
        public AnomalyConfidenceEnum? AnomalyConfidence { get; set; }

        //      C# -> DateTime? Date
        // GraphQL -> date: DateTime (scalar)
        [JsonProperty("date")]
        public DateTime? Date { get; set; }

        //      C# -> System.String? ErrInfo
        // GraphQL -> errInfo: String! (scalar)
        [JsonProperty("errInfo")]
        public System.String? ErrInfo { get; set; }

        //      C# -> System.String? HuntId
        // GraphQL -> huntId: String! (scalar)
        [JsonProperty("huntId")]
        public System.String? HuntId { get; set; }

        //      C# -> System.String? HuntName
        // GraphQL -> huntName: String! (scalar)
        [JsonProperty("huntName")]
        public System.String? HuntName { get; set; }

        //      C# -> System.Boolean? IsAnomaly
        // GraphQL -> isAnomaly: Boolean! (scalar)
        [JsonProperty("isAnomaly")]
        public System.Boolean? IsAnomaly { get; set; }

        //      C# -> System.Boolean? IsMalwareHunt
        // GraphQL -> isMalwareHunt: Boolean! (scalar)
        [JsonProperty("isMalwareHunt")]
        public System.Boolean? IsMalwareHunt { get; set; }

        //      C# -> System.Boolean? IsQuarantined
        // GraphQL -> isQuarantined: Boolean! (scalar)
        [JsonProperty("isQuarantined")]
        public System.Boolean? IsQuarantined { get; set; }

        //      C# -> System.String? MalwareHuntInfo
        // GraphQL -> malwareHuntInfo: String! (scalar)
        [JsonProperty("malwareHuntInfo")]
        public System.String? MalwareHuntInfo { get; set; }

        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        [JsonProperty("snapshotId")]
        public System.String? SnapshotId { get; set; }

        //      C# -> System.Int64? SuspiciousFileCount
        // GraphQL -> suspiciousFileCount: Long! (scalar)
        [JsonProperty("suspiciousFileCount")]
        public System.Int64? SuspiciousFileCount { get; set; }

        //      C# -> System.String? WorkloadFid
        // GraphQL -> workloadFid: String! (scalar)
        [JsonProperty("workloadFid")]
        public System.String? WorkloadFid { get; set; }


        #endregion

    #region methods

    public override string GetGqlTypeName() {
        return "SnapshotMalwareInfo";
    }

    public SnapshotMalwareInfo Set(
        AnomalyConfidenceEnum? AnomalyConfidence = null,
        DateTime? Date = null,
        System.String? ErrInfo = null,
        System.String? HuntId = null,
        System.String? HuntName = null,
        System.Boolean? IsAnomaly = null,
        System.Boolean? IsMalwareHunt = null,
        System.Boolean? IsQuarantined = null,
        System.String? MalwareHuntInfo = null,
        System.String? SnapshotId = null,
        System.Int64? SuspiciousFileCount = null,
        System.String? WorkloadFid = null
    ) 
    {
        if ( AnomalyConfidence != null ) {
            this.AnomalyConfidence = AnomalyConfidence;
        }
        if ( Date != null ) {
            this.Date = Date;
        }
        if ( ErrInfo != null ) {
            this.ErrInfo = ErrInfo;
        }
        if ( HuntId != null ) {
            this.HuntId = HuntId;
        }
        if ( HuntName != null ) {
            this.HuntName = HuntName;
        }
        if ( IsAnomaly != null ) {
            this.IsAnomaly = IsAnomaly;
        }
        if ( IsMalwareHunt != null ) {
            this.IsMalwareHunt = IsMalwareHunt;
        }
        if ( IsQuarantined != null ) {
            this.IsQuarantined = IsQuarantined;
        }
        if ( MalwareHuntInfo != null ) {
            this.MalwareHuntInfo = MalwareHuntInfo;
        }
        if ( SnapshotId != null ) {
            this.SnapshotId = SnapshotId;
        }
        if ( SuspiciousFileCount != null ) {
            this.SuspiciousFileCount = SuspiciousFileCount;
        }
        if ( WorkloadFid != null ) {
            this.WorkloadFid = WorkloadFid;
        }
        return this;
    }

        //[JsonIgnore]
    // AsFieldSpec returns a string that denotes what
    // fields are not null, recursively for non-scalar fields.
    public override string AsFieldSpec(int indent=0)
    {
        string ind = new string(' ', indent*2);
        string s = "";
        //      C# -> AnomalyConfidenceEnum? AnomalyConfidence
        // GraphQL -> anomalyConfidence: AnomalyConfidenceEnum! (enum)
        if (this.AnomalyConfidence != null) {
            s += ind + "anomalyConfidence\n" ;
        }
        //      C# -> DateTime? Date
        // GraphQL -> date: DateTime (scalar)
        if (this.Date != null) {
            s += ind + "date\n" ;
        }
        //      C# -> System.String? ErrInfo
        // GraphQL -> errInfo: String! (scalar)
        if (this.ErrInfo != null) {
            s += ind + "errInfo\n" ;
        }
        //      C# -> System.String? HuntId
        // GraphQL -> huntId: String! (scalar)
        if (this.HuntId != null) {
            s += ind + "huntId\n" ;
        }
        //      C# -> System.String? HuntName
        // GraphQL -> huntName: String! (scalar)
        if (this.HuntName != null) {
            s += ind + "huntName\n" ;
        }
        //      C# -> System.Boolean? IsAnomaly
        // GraphQL -> isAnomaly: Boolean! (scalar)
        if (this.IsAnomaly != null) {
            s += ind + "isAnomaly\n" ;
        }
        //      C# -> System.Boolean? IsMalwareHunt
        // GraphQL -> isMalwareHunt: Boolean! (scalar)
        if (this.IsMalwareHunt != null) {
            s += ind + "isMalwareHunt\n" ;
        }
        //      C# -> System.Boolean? IsQuarantined
        // GraphQL -> isQuarantined: Boolean! (scalar)
        if (this.IsQuarantined != null) {
            s += ind + "isQuarantined\n" ;
        }
        //      C# -> System.String? MalwareHuntInfo
        // GraphQL -> malwareHuntInfo: String! (scalar)
        if (this.MalwareHuntInfo != null) {
            s += ind + "malwareHuntInfo\n" ;
        }
        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        if (this.SnapshotId != null) {
            s += ind + "snapshotId\n" ;
        }
        //      C# -> System.Int64? SuspiciousFileCount
        // GraphQL -> suspiciousFileCount: Long! (scalar)
        if (this.SuspiciousFileCount != null) {
            s += ind + "suspiciousFileCount\n" ;
        }
        //      C# -> System.String? WorkloadFid
        // GraphQL -> workloadFid: String! (scalar)
        if (this.WorkloadFid != null) {
            s += ind + "workloadFid\n" ;
        }
        return s;
    }


    
    public override void ApplyExploratoryFieldSpec(ExplorationContext ec)
    {
        //      C# -> AnomalyConfidenceEnum? AnomalyConfidence
        // GraphQL -> anomalyConfidence: AnomalyConfidenceEnum! (enum)
        if (this.AnomalyConfidence == null && ec.Includes("anomalyConfidence",true))
        {
            this.AnomalyConfidence = new AnomalyConfidenceEnum();
        }
        //      C# -> DateTime? Date
        // GraphQL -> date: DateTime (scalar)
        if (this.Date == null && ec.Includes("date",true))
        {
            this.Date = new DateTime();
        }
        //      C# -> System.String? ErrInfo
        // GraphQL -> errInfo: String! (scalar)
        if (this.ErrInfo == null && ec.Includes("errInfo",true))
        {
            this.ErrInfo = "FETCH";
        }
        //      C# -> System.String? HuntId
        // GraphQL -> huntId: String! (scalar)
        if (this.HuntId == null && ec.Includes("huntId",true))
        {
            this.HuntId = "FETCH";
        }
        //      C# -> System.String? HuntName
        // GraphQL -> huntName: String! (scalar)
        if (this.HuntName == null && ec.Includes("huntName",true))
        {
            this.HuntName = "FETCH";
        }
        //      C# -> System.Boolean? IsAnomaly
        // GraphQL -> isAnomaly: Boolean! (scalar)
        if (this.IsAnomaly == null && ec.Includes("isAnomaly",true))
        {
            this.IsAnomaly = true;
        }
        //      C# -> System.Boolean? IsMalwareHunt
        // GraphQL -> isMalwareHunt: Boolean! (scalar)
        if (this.IsMalwareHunt == null && ec.Includes("isMalwareHunt",true))
        {
            this.IsMalwareHunt = true;
        }
        //      C# -> System.Boolean? IsQuarantined
        // GraphQL -> isQuarantined: Boolean! (scalar)
        if (this.IsQuarantined == null && ec.Includes("isQuarantined",true))
        {
            this.IsQuarantined = true;
        }
        //      C# -> System.String? MalwareHuntInfo
        // GraphQL -> malwareHuntInfo: String! (scalar)
        if (this.MalwareHuntInfo == null && ec.Includes("malwareHuntInfo",true))
        {
            this.MalwareHuntInfo = "FETCH";
        }
        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        if (this.SnapshotId == null && ec.Includes("snapshotId",true))
        {
            this.SnapshotId = "FETCH";
        }
        //      C# -> System.Int64? SuspiciousFileCount
        // GraphQL -> suspiciousFileCount: Long! (scalar)
        if (this.SuspiciousFileCount == null && ec.Includes("suspiciousFileCount",true))
        {
            this.SuspiciousFileCount = new System.Int64();
        }
        //      C# -> System.String? WorkloadFid
        // GraphQL -> workloadFid: String! (scalar)
        if (this.WorkloadFid == null && ec.Includes("workloadFid",true))
        {
            this.WorkloadFid = "FETCH";
        }
    }


    #endregion

    } // class SnapshotMalwareInfo
    
    #endregion

    public static class ListSnapshotMalwareInfoExtensions
    {
        // This SDK uses the convention of defining field specs as
        // the collection of fields that are not null in an object.
        // When creating a field spec from an (non-list) object,
        // all fields (including nested objects) that are not null are
        // included in the fieldspec.
        // When creating a fieldspec from a list of objects,
        // we arbitrarily choose to use the fieldspec of the first item
        // in the list. This is not a perfect solution, but it is a
        // reasonable one.
        // When creating a fieldspec from a list of interfaces,
        // we include the fieldspec of each item in the list
        // as an inline fragment (... on)
        public static string AsFieldSpec(
            this List<SnapshotMalwareInfo> list,
            int indent=0)
        {
            return list[0].AsFieldSpec(indent);
        }

        public static void ApplyExploratoryFieldSpec(
            this List<SnapshotMalwareInfo> list, 
            ExplorationContext ec)
        {
            if ( list.Count == 0 ) {
                list.Add(new SnapshotMalwareInfo());
            }
            list[0].ApplyExploratoryFieldSpec(ec);
        }

        public static void Fetch(this List<SnapshotMalwareInfo> list)
        {
            list.ApplyExploratoryFieldSpec(new ExplorationContext());
        }
    }


} // namespace RubrikSecurityCloud.Types