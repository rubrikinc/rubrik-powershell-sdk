// MalwareScanInSnapshotResult.cs
//
// This generated file is part of the Rubrik PowerShell SDK.
// Manual changes to this file may be lost.

#nullable enable
using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel.DataAnnotations;
using Newtonsoft.Json;
using System.Reflection;
using System.Text.RegularExpressions;
using RubrikSecurityCloud;

namespace RubrikSecurityCloud.Types
{
    #region MalwareScanInSnapshotResult
    public class MalwareScanInSnapshotResult: BaseType
    {
        #region members

        //      C# -> MalwareScanInSnapshotStatus? Status
        // GraphQL -> status: MalwareScanInSnapshotStatus! (enum)
        [JsonProperty("status")]
        public MalwareScanInSnapshotStatus? Status { get; set; }

        //      C# -> System.Boolean? IsSnapshotExpired
        // GraphQL -> isSnapshotExpired: Boolean! (scalar)
        [JsonProperty("isSnapshotExpired")]
        public System.Boolean? IsSnapshotExpired { get; set; }

        //      C# -> System.String? LastJobId
        // GraphQL -> lastJobId: String (scalar)
        [JsonProperty("lastJobId")]
        public System.String? LastJobId { get; set; }

        //      C# -> DateTime? SnapshotDate
        // GraphQL -> snapshotDate: DateTime (scalar)
        [JsonProperty("snapshotDate")]
        public DateTime? SnapshotDate { get; set; }

        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        [JsonProperty("snapshotId")]
        public System.String? SnapshotId { get; set; }

        //      C# -> List<MalwareMatch>? Matches
        // GraphQL -> matches: [MalwareMatch!]! (type)
        [JsonProperty("matches")]
        public List<MalwareMatch>? Matches { get; set; }

        //      C# -> QuarantineSpec? QuarantineDetails
        // GraphQL -> quarantineDetails: QuarantineSpec (type)
        [JsonProperty("quarantineDetails")]
        public QuarantineSpec? QuarantineDetails { get; set; }

        //      C# -> MalwareScanStats? ScanStats
        // GraphQL -> scanStats: MalwareScanStats (type)
        [JsonProperty("scanStats")]
        public MalwareScanStats? ScanStats { get; set; }


        #endregion

    #region methods

    public override string GetGqlTypeName() {
        return "MalwareScanInSnapshotResult";
    }

    public MalwareScanInSnapshotResult Set(
        MalwareScanInSnapshotStatus? Status = null,
        System.Boolean? IsSnapshotExpired = null,
        System.String? LastJobId = null,
        DateTime? SnapshotDate = null,
        System.String? SnapshotId = null,
        List<MalwareMatch>? Matches = null,
        QuarantineSpec? QuarantineDetails = null,
        MalwareScanStats? ScanStats = null
    ) 
    {
        if ( Status != null ) {
            this.Status = Status;
        }
        if ( IsSnapshotExpired != null ) {
            this.IsSnapshotExpired = IsSnapshotExpired;
        }
        if ( LastJobId != null ) {
            this.LastJobId = LastJobId;
        }
        if ( SnapshotDate != null ) {
            this.SnapshotDate = SnapshotDate;
        }
        if ( SnapshotId != null ) {
            this.SnapshotId = SnapshotId;
        }
        if ( Matches != null ) {
            this.Matches = Matches;
        }
        if ( QuarantineDetails != null ) {
            this.QuarantineDetails = QuarantineDetails;
        }
        if ( ScanStats != null ) {
            this.ScanStats = ScanStats;
        }
        return this;
    }

        //[JsonIgnore]
    // AsFieldSpec returns a string that denotes what
    // fields are not null, recursively for non-scalar fields.
    public override string AsFieldSpec(FieldSpecConfig? conf=null)
    {
        conf=(conf==null)?new FieldSpecConfig():conf;
        if (this.IsComposite() && ! conf.IgnoreComposition) {
            return InterfaceHelper.CompositeAsFieldSpec((BaseType)this, conf);
        }
        string ind = conf.IndentStr();
        string s = "";
        //      C# -> MalwareScanInSnapshotStatus? Status
        // GraphQL -> status: MalwareScanInSnapshotStatus! (enum)
        if (this.Status != null) {
            if (conf.Flat) {
                s += conf.Prefix + "status\n" ;
            } else {
                s += ind + "status\n" ;
            }
        }
        //      C# -> System.Boolean? IsSnapshotExpired
        // GraphQL -> isSnapshotExpired: Boolean! (scalar)
        if (this.IsSnapshotExpired != null) {
            if (conf.Flat) {
                s += conf.Prefix + "isSnapshotExpired\n" ;
            } else {
                s += ind + "isSnapshotExpired\n" ;
            }
        }
        //      C# -> System.String? LastJobId
        // GraphQL -> lastJobId: String (scalar)
        if (this.LastJobId != null) {
            if (conf.Flat) {
                s += conf.Prefix + "lastJobId\n" ;
            } else {
                s += ind + "lastJobId\n" ;
            }
        }
        //      C# -> DateTime? SnapshotDate
        // GraphQL -> snapshotDate: DateTime (scalar)
        if (this.SnapshotDate != null) {
            if (conf.Flat) {
                s += conf.Prefix + "snapshotDate\n" ;
            } else {
                s += ind + "snapshotDate\n" ;
            }
        }
        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        if (this.SnapshotId != null) {
            if (conf.Flat) {
                s += conf.Prefix + "snapshotId\n" ;
            } else {
                s += ind + "snapshotId\n" ;
            }
        }
        //      C# -> List<MalwareMatch>? Matches
        // GraphQL -> matches: [MalwareMatch!]! (type)
        if (this.Matches != null) {
            var fspec = this.Matches.AsFieldSpec(conf.Child("matches"));
            if(fspec.Replace(" ", "").Replace("\n", "").Length > 0) {
                if (conf.Flat) {
                    s += conf.Prefix + fspec;
                } else {
                    s += ind + "matches" + " " + "{\n" + fspec + ind + "}\n" ;
                }
            }
        }
        //      C# -> QuarantineSpec? QuarantineDetails
        // GraphQL -> quarantineDetails: QuarantineSpec (type)
        if (this.QuarantineDetails != null) {
            var fspec = this.QuarantineDetails.AsFieldSpec(conf.Child("quarantineDetails"));
            if(fspec.Replace(" ", "").Replace("\n", "").Length > 0) {
                if (conf.Flat) {
                    s += conf.Prefix + fspec;
                } else {
                    s += ind + "quarantineDetails" + " " + "{\n" + fspec + ind + "}\n" ;
                }
            }
        }
        //      C# -> MalwareScanStats? ScanStats
        // GraphQL -> scanStats: MalwareScanStats (type)
        if (this.ScanStats != null) {
            var fspec = this.ScanStats.AsFieldSpec(conf.Child("scanStats"));
            if(fspec.Replace(" ", "").Replace("\n", "").Length > 0) {
                if (conf.Flat) {
                    s += conf.Prefix + fspec;
                } else {
                    s += ind + "scanStats" + " " + "{\n" + fspec + ind + "}\n" ;
                }
            }
        }
        return s;
    }


    
    public override void ApplyExploratoryFieldSpec(ExplorationContext ec)
    {
        //      C# -> MalwareScanInSnapshotStatus? Status
        // GraphQL -> status: MalwareScanInSnapshotStatus! (enum)
        if (ec.Includes("status",true))
        {
            if(this.Status == null) {

                this.Status = new MalwareScanInSnapshotStatus();

            } else {


            }
        }
        else if (this.Status != null && ec.Excludes("status",true))
        {
            this.Status = null;
        }
        //      C# -> System.Boolean? IsSnapshotExpired
        // GraphQL -> isSnapshotExpired: Boolean! (scalar)
        if (ec.Includes("isSnapshotExpired",true))
        {
            if(this.IsSnapshotExpired == null) {

                this.IsSnapshotExpired = true;

            } else {


            }
        }
        else if (this.IsSnapshotExpired != null && ec.Excludes("isSnapshotExpired",true))
        {
            this.IsSnapshotExpired = null;
        }
        //      C# -> System.String? LastJobId
        // GraphQL -> lastJobId: String (scalar)
        if (ec.Includes("lastJobId",true))
        {
            if(this.LastJobId == null) {

                this.LastJobId = "FETCH";

            } else {


            }
        }
        else if (this.LastJobId != null && ec.Excludes("lastJobId",true))
        {
            this.LastJobId = null;
        }
        //      C# -> DateTime? SnapshotDate
        // GraphQL -> snapshotDate: DateTime (scalar)
        if (ec.Includes("snapshotDate",true))
        {
            if(this.SnapshotDate == null) {

                this.SnapshotDate = new DateTime();

            } else {


            }
        }
        else if (this.SnapshotDate != null && ec.Excludes("snapshotDate",true))
        {
            this.SnapshotDate = null;
        }
        //      C# -> System.String? SnapshotId
        // GraphQL -> snapshotId: String! (scalar)
        if (ec.Includes("snapshotId",true))
        {
            if(this.SnapshotId == null) {

                this.SnapshotId = "FETCH";

            } else {


            }
        }
        else if (this.SnapshotId != null && ec.Excludes("snapshotId",true))
        {
            this.SnapshotId = null;
        }
        //      C# -> List<MalwareMatch>? Matches
        // GraphQL -> matches: [MalwareMatch!]! (type)
        if (ec.Includes("matches",false))
        {
            if(this.Matches == null) {

                this.Matches = new List<MalwareMatch>();
                this.Matches.ApplyExploratoryFieldSpec(ec.NewChild("matches"));

            } else {

                this.Matches.ApplyExploratoryFieldSpec(ec.NewChild("matches"));

            }
        }
        else if (this.Matches != null && ec.Excludes("matches",false))
        {
            this.Matches = null;
        }
        //      C# -> QuarantineSpec? QuarantineDetails
        // GraphQL -> quarantineDetails: QuarantineSpec (type)
        if (ec.Includes("quarantineDetails",false))
        {
            if(this.QuarantineDetails == null) {

                this.QuarantineDetails = new QuarantineSpec();
                this.QuarantineDetails.ApplyExploratoryFieldSpec(ec.NewChild("quarantineDetails"));

            } else {

                this.QuarantineDetails.ApplyExploratoryFieldSpec(ec.NewChild("quarantineDetails"));

            }
        }
        else if (this.QuarantineDetails != null && ec.Excludes("quarantineDetails",false))
        {
            this.QuarantineDetails = null;
        }
        //      C# -> MalwareScanStats? ScanStats
        // GraphQL -> scanStats: MalwareScanStats (type)
        if (ec.Includes("scanStats",false))
        {
            if(this.ScanStats == null) {

                this.ScanStats = new MalwareScanStats();
                this.ScanStats.ApplyExploratoryFieldSpec(ec.NewChild("scanStats"));

            } else {

                this.ScanStats.ApplyExploratoryFieldSpec(ec.NewChild("scanStats"));

            }
        }
        else if (this.ScanStats != null && ec.Excludes("scanStats",false))
        {
            this.ScanStats = null;
        }
    }


    #endregion

    } // class MalwareScanInSnapshotResult
    
    #endregion

    public static class ListMalwareScanInSnapshotResultExtensions
    {
        // This SDK uses the convention of defining field specs as
        // the collection of properties that are not null in an object.
        // When creating a field spec for an object, we look at whether
        // the object is a list or not, and whether it implements an interface
        // or not. The following are the possible combinations:
        // S or L: single object or list object
        // SD or II: self-defined or interface-implementing
        // | S/L | SD/II | How fied spec is created
        // |-----|-------|-------------------------
        // | S   | SD    | all properties (including nested objects) that are not null are included in the field spec.
        // | L   | SD    | the field spec of the first item in the list is used. Other items are ignored.
        // | S   | II    | same as S-SD if object is not composite. If object is composite, the field spec of each item in the composition is included as an inline fragment (... on)
        // | L   | II    | the field spec of each item in the list is included as an inline fragment (... on)
        //
        // Note that L-II means that each item in the list is II (not the list itself).
        // This function handles L-SD and L-II cases.
        public static string AsFieldSpec(
            this List<MalwareScanInSnapshotResult> list,
            FieldSpecConfig? conf=null)
        {
            conf=(conf==null)?new FieldSpecConfig():conf;
            return list[0].AsFieldSpec(conf.Child(ignoreComposition: true)); // L-SD
        }

        public static List<string> SelectedFields(this List<MalwareScanInSnapshotResult> list)
        {
            return StringUtils.FieldSpecStringToList(
                list.AsFieldSpec(new FieldSpecConfig { Flat = true }));
        }



        public static void ApplyExploratoryFieldSpec(
            this List<MalwareScanInSnapshotResult> list, 
            ExplorationContext ec)
        {
            if ( list.Count == 0 ) {
                list.Add(new MalwareScanInSnapshotResult());
            }
            list[0].ApplyExploratoryFieldSpec(ec);
        }

        public static void SelectForRetrieval(this List<MalwareScanInSnapshotResult> list)
        {
            list.ApplyExploratoryFieldSpec(new ExplorationContext());
        }
    }


} // namespace RubrikSecurityCloud.Types