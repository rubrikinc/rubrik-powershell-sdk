<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RubrikSecurityCloud.PowerShell</name>
    </assembly>
    <members>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc">
             <summary>
             Establishes a user session with Rubrik Security Cloud
             </summary>
             <description>
             The Connect-Rsc Cmdlet is used to connect to the Rubrik Security Cloud (RSC) API.
             RSC then returns a unique token to represent the user's credentials for subsequent calls.
             The token is stored securly in a .NET object within this PowerShell session.
             The recommended authentication method is a Rsc Service Account.
             Service Account credentials may be provided as parameters, or stored
             in an encrypted credential file, using Set-RscServiceAccountFile.
             Service Account .json files (unencryped) are not supported.
             </description>
             <example>
             Connect to Rubrik Security Cloud, using the URL, Client Id and Client Secret
             <code>Connect-Rsc -Server mycompany.my.rubrik.com -ClientId xxxxxxxxx -ClientSecret xxxxxxxxx</code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in the default RSC credential store in the user profile
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json
             Connect-Rsc
             </code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in a location other than the default RSC credential store.
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json -OutputFilePath rubrik_service_account.xml
             Connect-Rsc -ServiceAccountFile rubrik_service_account.xml
             </code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in a location held in the OS environment variable RSC_SERVICE_ACCOUNT_FILE
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json -OutputFilePath $ENV:RSC_SERVICE_ACCOUNT_FILE
             Connect-Rsc -FromEnv
             </code>
             </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.IfNeeded">
            <summary>
            Connect if there is no existing connection
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.FromEnv">
            <summary>
            Use a service account, which path is stored in an environment variable
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ServiceAccountFile">
            <summary>
            Used to specify the service account file downloaded from Rubrik Security Cloud
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.Server">
            <summary>
            FQDN or the Rubrik Security Cloud Instance. I.e. mycompany.my.rubrik.com
            This can also be found in the JSON file downloaded from RSC when creating the Service Account
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ClientId">
            <summary>
            The Service Account ClientId.
            This can be found as "client_id" in the JSON file downloaded from RSC when creating the Service Account
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ClientSecret">
            <summary>
            The Service Account ClientSecret in SecureString format.
            The ClientSecret can be found as "client_secret" in the JSON file downloaded from RSC when creating the Service Account
            Convert the JSON plain text field into a secure string with:
            $secret = $(Get-Content service_account_file.json | ConvertFrom-Json).client_secret | ConvertTo-SecureString -AsPlainText
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet">
            <summary>
            Return info about SDK cmdlets
            </summary>
            <description>
            Look up a GraphQL Operation and
            return info about the cmdlet that implements it.
            </description>
            <example>
            Retrieve the name of the cmdlet that implements the
            GraphQL query clusterConnection
            <code>
            PS> Get-RscCmdlet clusterConnection
            </code>
            </example>
            <example>
            Retrieve info for a GraphQL operation that is
            not implemented by a cmdlet.
            <code>
            PS> Get-RscCmdlet notImplementedOperation
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.ExistingGqlRootFieldName">
            <summary>
            The name of the GraphQL Operation to look up.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.AnyGqlRootFieldName">
            <summary>
            The name of the GraphQL Operation to look up.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.Locations">
            <summary>
            Info about the various locations the SDK uses
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset">
            <summary>
            Retrieve one or more filsets managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscFileset cmdlet is used to get one or more filesets
            known to RSC. The -FilesetId parameter will return a single fileset.
            All other parameters will return a list of matching filesets.
            When -FilesetId is NOT specified, -HostId is required.
            -HostId can accept a value from the pipeline
            </description>
            <example>
            Get a list of all filesets on a specified host
            <code> Get-RscFileset -HostId xxxxx-xxxxx-xxxxx-xxxxx </code>
            </example>
            <example>
            Get a list of all filesets on a specified host, filtered by name
            <code> Get-RscFileset -HostId xxxxx-xxxxx-xxxxx-xxxxx -Name etc </code>
            </example>
            <example>
            Get a list of all filesets on a host, providing the host via the pipeline
            <code> Get-RscHost -OsType Linux -First 1 | Get-RscFileset </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.HostId">
            <summary>
            The Id of the Physical Host to get filesets for
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.FilesetId">
            <summary>
            Get a fileset using its ID
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate">
            <summary>
            Retrieve one or more filset templates managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscFileset cmdlet is used to get one or more fileset templates
            known to RSC. The -Id parameter will return a template. All other
            parameters will return a list of matching templates.
            Returns Windows and Linux fileset templates.
            </description>
            <example>
            Get a list of all Linux fileset templates.
            <code>Get-RscFilesetTemplate -OsType Linux </code>
            </example>
            <example>
            Get a list of Windows fileset templates, matching a name pattern.
            <code>Get-RscFilesetTemplate -OsType Windows -Name myWinTemplate</code>
            </example>
            <example>
            Get a template by Id, with default fields selected.
            <code>Get-RscFilesetTemplate -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.OsType">
            <summary>
            Operating system type of fileset templates to return.
            Valid values are: "Windows" and "Linux".
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Id">
            <summary>
            Get a physical host using its ID
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Field">
            <summary>
            Activate selected fields based on not-null properties
            of the input fields object
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost">
            <summary>
            Retrieve one or more physical hosts managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscHost cmdlet is used to get one or more physical hosts
            known to RSC. The -Id parameter will return a single host. All other
            parameters will return a list of matching hosts.
            </description>
            <example>
            Get a list of all Linux from the RSC instance.
            <code>Get-RscHost -OsType Linux </code>
            </example>
            <example>
            Get a list of Windows Hosts, matching a name pattern.
            <code>Get-RscHost -OsType Windows -Name myWindowsServer</code>
            </example>
            <example>
            Get a host by Id, with default fields selected.
            <code>Get-RscHost -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.OsType">
            <summary>
            Operating system type of hosts to return. Valid values are
            "Windows" and "Linux".
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Relics">
            <summary>
            Include only items that are relics
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Replicated">
            <summary>
            Include only items that are replicated
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.IsBulkPolicyAssignmentFlow">
            <summary>
            Indicates whether request is bulk policy assignment flow.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Id">
            <summary>
            Get a physical host using its ID
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Field">
            <summary>
            Activate selected fields based on not-null properties
            of the input fields object
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot">
            <summary>
            Retrieves all of the snapshots (backups) for any given object
            </summary>
            <description>
            The Get-RscSnapshot cmdlet is used to query the RSC instance for all
            known snapshots (backups) for a protected object.
            Multiple objects to be piped into this function is not yet supported
            </description>
            <example>
            Get the snapshot list for an object by the object Id
            <code>Get-RscSnapshot -Id 'xxxxxx-xxxxx-xxxxxx-xxxxx'</code>
            </example>
            <example>
            Get the snapshots for vSphere VM from pipeline
            <code>
            $vm = Get-RscVsphereVm -Id xxxxxx-xxxxxx-xxxxxx-xxxxxx
            $vm | Get-RscSnapshot
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.SnappableId">
            <summary>
            The ID of the snappable object to get a list of snapshots for.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.First">
            <summary>
            Return only the first # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.SnapshotId">
            <summary>
            Retreive a single CDM snapshot by ID. PolarisSnapshot is not yet supported.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.ClusterUUID">
            <summary>
            Ensure that the snapshot returned belongs to a specific CDM Cluster.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType">
            <summary>
            Return a valid empty .NET object for the
            RubrikSecurityCloud.PowerShell SDK
            </summary>
            <description>
            Return a valid empty .NET object for the
            RubrikSecurityCloud.PowerShell SDK.
            
            The cmdlet will return a .NET object by name.
            The -ListAvailable parameter will return a list of
            valid RubrikSecurityCloud.Types.
            </description>
            <example>
            Get a list of all available Rsc .NET types
            <code>
            PS C:\> Get-RscType -ListAvailable
            </code>
            </example>
            <example>
            Get a list of available Rsc .NET types filtered by name
            <code>
            PS C:\> Get-RscType -ListAvailable -FilterByName "accountsetting"
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name
            <code>
            PS C:\> Get-RscType -Name "AccountSetting"
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name. Initialize the 'IsEulaAccepted' property
            <code>
            PS C:\> Get-RscType -Name "AccountSetting" -InitialProperties @("IsEulaAccepted")
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name. Initialize the 'IsEulaAccepted' property
            with a specific value.
            <code>
            PS C:\> Get-RscType -Name "AccountSetting" -InitialValues @{"IsEulaAccepted"= $false}
            </code>
            </example>
            <example>
            Get a list of all available Rsc .NET Interfaces
            <code>
            PS C:\> Get-RscType -ListAvailable -Interfaces
            </code>
            </example>
            <example>
            Get a list of all available Rsc .NET Interfaces filtered by name
            <code>
            PS C:\> Get-RscType -ListAvailable -Interfaces -FilterByName "mssql"
            </code>
            </example>
            <example>
            Get a list of all Rsc .NET types that implement the
            MssqlTopLevelDescendantType interface
            <code>
            PS C:\> Get-RscType -Interface MssqlTopLevelDescendantType
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Name">
            <summary>
            The name of the Rsc Type to return
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.InitialProperties">
            <summary>
            Specify an array of string containing the names of the
            properties to initialize.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.InitialValues">
            <summary>
            Specify a hashtable mapping the requested
            fields to their values.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.ListAvailable">
            <summary>
            Used to request a list of valid Rsc Type Names.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.FilterByName">
            <summary>
            Optional to filter results by name.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Interfaces">
            <summary>
            Flag to specify if interfaces should be returned.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Interface">
            <summary>
            Used to request a list of types implementing a given interface.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVersion">
            <summary>
            Returns the Rubrik Security Cloud Server version, as well a the
            Rubrik Security Cloud PowerShell SDK schema version. Ideally these
            values should match for maximum SDK compatibility. 
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm">
            <summary>
            Retrieve one or more vSphere Virtual Machines (VMs) managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscVsphereVm cmdlet is used to get one or more vSphere VMs
            known to RSC. The -Id parameter will return a single VM. All other
            parameters will return a list of matching VMs.
            </description>
            <example>
            Get a list of all vSphere VMs from the RSC instance.
            <code>Get-RscVsphereVm</code>
            </example>
            <example>
            Get a list of vSphere VMs, matching a name pattern.
            <code>Get-RscVsphereVm -Name devVM</code>
            </example>
            <example>
            Get a vSphere VM by Id, with default fields selected.
            <code>Get-RscVsphereVm -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
            <example>
            Get a vSphere VM by Id, with custom fields selected (Id, Name, and
            GuestOsType).
            <code>
            $myFields = Get-RscType -Name VSphereVm
            $myFields.Id = "FETCH"
            $myFields.Name = "FETCH"
            $myFields.GuestOsType = "FETCH"
            Get-RscVsphereVm -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d -Fields $myFields
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Name">
            <summary>
            Filter VMs by Name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Id">
            <summary>
            Retrieve a single known VM by Id
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Fields">
            <summary>
            An object to use as a field selector for the query.
            Values from the API for fields set to not-null values in this object
            will be returned. To be used only with -Id parameter.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc">
            <summary>
            Send a query to the RSC API.
            </summary>
            <description>
            There are 2 usages of this cmdlet:
            - Send a query obtained from a `New-RscQuery*` cmdlet.
            - Send a raw GraphQL query.
            </description>
            <example>
            Send a query obtained from a `New-RscQuery*` cmdlet.
            It is equivalent to calling `Invoke()` on the query object.
            <code>
            New-RscQueryGetVsphereVmList -Name "my-vm" | Invoke-Rsc
            # or
            $query = New-RscQueryGetVsphereVmList -Name "my-vm"
            $query.Invoke()
            </code>
            </example>
            <example>
            Read GraphQL query from gql file
            <code>
            Get-Content -Path ./Samples/queryAccountOwners -Raw | Invoke-Rsc
            </code>
            </example>
            <example>
            Pass GraphQL query as parameter.
            <code>
            Invoke-Rsc -GqlQuery "mutation DeleteWebhookMutation(`$id: Int!) { deleteWebhook(input: {id: `$id}) }" -Var @{id = 1}
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.GqlQuery">
            <summary>
            The GQL query to send to the RSC API.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.Var">
            <summary>
            The variables to supply to the GraphQL query.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.ProcessRecord_Query">
            <summary>
            Send a query object (obtained from a `New-RscQuery*` cmdlet).
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.ProcessRecord_NativeGQL">
            <summary>
            Send a raw GraphQL query to the RSC API.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.FetchAndCollatePages(RubrikSecurityCloud.RscQuery)">
            <summary>
            Collate pages of results.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuery.RootFieldKind">
            <summary>
            The kind of root field this object is:
            a Query, a Mutation, or something unknown.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAccount">
             <summary>
             Create a new RscQuery object for any of the 14
             operations in the 'Account' API domain:
             CreateOrg, CreateOrgSwitchSession, CreateRole, CreateUser, CreateUserWithPassword, DeleteOrg, DeleteRole, DeleteTotpConfig, DeleteTotpConfigs, DeleteUsers, GenerateTotpSecret, MutateRole, UpdateOrg, or UpdateRole.
             </summary>
             <description>
             New-RscMutationAccount creates a new
             mutation object for operations
             in the 'Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 14 operations
             in the 'Account' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateOrg, CreateOrgSwitchSession, CreateRole, CreateUser, CreateUserWithPassword, DeleteOrg, DeleteRole, DeleteTotpConfig, DeleteTotpConfigs, DeleteUsers, GenerateTotpSecret, MutateRole, UpdateOrg, or UpdateRole.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAccount -CreateOrg).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAccount -CreateOrg).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateOrg operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateOrg
             
             $query = New-RscMutationAccount -CreateOrg
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	fullName = $someString
             	# REQUIRED
             	description = $someString
             	# REQUIRED
             	authDomainConfig = $someTenantAuthDomainConfig # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TenantAuthDomainConfig]) for enum values.
             	# REQUIRED
             	shouldEnforceMfaForAll = $someBoolean
             	# REQUIRED
             	isEnvoyRequired = $someBoolean
             	# REQUIRED
             	allowedClusters = @(
             		$someString
             	)
             	# OPTIONAL
             	existingUsers = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	userInvites = @(
             		@{
             			# REQUIRED
             			email = $someString
             			# REQUIRED
             			note = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# REQUIRED
             	permissions = @(
             		@{
             			# REQUIRED
             			operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             			# REQUIRED
             			objectsForHierarchyTypes = @(
             				@{
             					# REQUIRED
             					objectIds = @(
             						$someString
             					)
             					# REQUIRED
             					snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             				}
             			)
             		}
             	)
             	# REQUIRED
             	selfServicePermissions = @(
             		@{
             			# OPTIONAL
             			inventoryRoot = $someInventorySubHierarchyRootEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventorySubHierarchyRootEnum]) for enum values.
             			# REQUIRED
             			inventoryWorkloadType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			# REQUIRED
             			operations = @(
             				$someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             			)
             			# OPTIONAL
             			hierarchyRoot = $someString
             		}
             	)
             	# OPTIONAL
             	existingSsoGroups = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	newSsoGroups = @(
             		@{
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	isServiceAccountEnabled = $someBoolean
             	# OPTIONAL
             	isServiceAccountDisabled = $someBoolean
             	# OPTIONAL
             	crossAccountCapabilities = @(
             		$someCrossAccountCapability # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CrossAccountCapability]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOrgReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOrgSwitchSession operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateOrgSwitchSession
             
             $query = New-RscMutationAccount -CreateOrgSwitchSession
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOrgSwitchSessionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateRole operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateRole
             
             $query = New-RscMutationAccount -CreateRole
             
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.description = $someString
             # REQUIRED
             $query.Var.permissions = @(
             	@{
             		# REQUIRED
             		operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             		# REQUIRED
             		objectsForHierarchyTypes = @(
             			@{
             				# REQUIRED
             				objectIds = @(
             					$someString
             				)
             				# REQUIRED
             				snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			}
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateUser operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateUser
             
             $query = New-RscMutationAccount -CreateUser
             
             # REQUIRED
             $query.Var.email = $someString
             # REQUIRED
             $query.Var.roleIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateUserWithPassword operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateUserWithPassword
             
             $query = New-RscMutationAccount -CreateUserWithPassword
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	email = $someString
             	# OPTIONAL
             	password = $someString
             	# OPTIONAL
             	roleIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteOrg operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteOrg
             
             $query = New-RscMutationAccount -DeleteOrg
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	organizationId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteRole operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteRole
             
             $query = New-RscMutationAccount -DeleteRole
             
             # REQUIRED
             $query.Var.roleId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTotpConfig operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteTotpConfig
             
             $query = New-RscMutationAccount -DeleteTotpConfig
             
             # REQUIRED
             $query.Var.userId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTotpConfigs operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteTotpConfigs
             
             $query = New-RscMutationAccount -DeleteTotpConfigs
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	userIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteUsers operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteUsers
             
             $query = New-RscMutationAccount -DeleteUsers
             
             # REQUIRED
             $query.Var.ids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GenerateTotpSecret operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: GenerateTotpSecret
             
             $query = New-RscMutationAccount -GenerateTotpSecret
             
             # REQUIRED
             $query.Var.userId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GenerateTotpSecretReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MutateRole operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: MutateRole
             
             $query = New-RscMutationAccount -MutateRole
             
             # OPTIONAL
             $query.Var.roleId = $someString
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.description = $someString
             # REQUIRED
             $query.Var.permissions = @(
             	@{
             		# REQUIRED
             		operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             		# REQUIRED
             		objectsForHierarchyTypes = @(
             			@{
             				# REQUIRED
             				objectIds = @(
             					$someString
             				)
             				# REQUIRED
             				snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			}
             		)
             }
             )
             # REQUIRED
             $query.Var.protectableClusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateOrg operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: UpdateOrg
             
             $query = New-RscMutationAccount -UpdateOrg
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	organizationId = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	fullName = $someString
             	# REQUIRED
             	description = $someString
             	# REQUIRED
             	authDomainConfig = $someTenantAuthDomainConfig # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TenantAuthDomainConfig]) for enum values.
             	# REQUIRED
             	shouldEnforceMfaForAll = $someBoolean
             	# REQUIRED
             	isEnvoyRequired = $someBoolean
             	# REQUIRED
             	allowedClusters = @(
             		$someString
             	)
             	# OPTIONAL
             	existingUsers = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	userInvites = @(
             		@{
             			# REQUIRED
             			email = $someString
             			# REQUIRED
             			note = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# REQUIRED
             	permissions = @(
             		@{
             			# REQUIRED
             			operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             			# REQUIRED
             			objectsForHierarchyTypes = @(
             				@{
             					# REQUIRED
             					objectIds = @(
             						$someString
             					)
             					# REQUIRED
             					snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             				}
             			)
             		}
             	)
             	# REQUIRED
             	selfServicePermissions = @(
             		@{
             			# OPTIONAL
             			inventoryRoot = $someInventorySubHierarchyRootEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventorySubHierarchyRootEnum]) for enum values.
             			# REQUIRED
             			inventoryWorkloadType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			# REQUIRED
             			operations = @(
             				$someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             			)
             			# OPTIONAL
             			hierarchyRoot = $someString
             		}
             	)
             	# OPTIONAL
             	existingSsoGroups = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	newSsoGroups = @(
             		@{
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	isServiceAccountEnabled = $someBoolean
             	# OPTIONAL
             	isServiceAccountDisabled = $someBoolean
             	# OPTIONAL
             	crossAccountCapabilities = @(
             		$someCrossAccountCapability # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CrossAccountCapability]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateOrgReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateRole operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: UpdateRole
             
             $query = New-RscMutationAccount -UpdateRole
             
             # REQUIRED
             $query.Var.roleId = $someString
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.description = $someString
             # REQUIRED
             $query.Var.permissions = @(
             	@{
             		# REQUIRED
             		operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             		# REQUIRED
             		objectsForHierarchyTypes = @(
             			@{
             				# REQUIRED
             				objectIds = @(
             					$someString
             				)
             				# REQUIRED
             				snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			}
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationActiveDirectory">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Active Directory' API domain:
             CreateLiveMount, CreateUnmount, ModifyLiveMount, or RestoreObjects.
             </summary>
             <description>
             New-RscMutationActiveDirectory creates a new
             mutation object for operations
             in the 'Active Directory' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Active Directory' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateLiveMount, CreateUnmount, ModifyLiveMount, or RestoreObjects.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActiveDirectory -CreateLiveMount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActiveDirectory -CreateLiveMount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateLiveMount operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: CreateLiveMount
             
             $query = New-RscMutationActiveDirectory -CreateLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		validUsers = @(
             			$someString
             		)
             		# OPTIONAL
             		validIps = @(
             			$someString
             		)
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		domainName = $someString
             		# OPTIONAL
             		subnet = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateUnmount operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: CreateUnmount
             
             $query = New-RscMutationActiveDirectory -CreateUnmount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ModifyLiveMount operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: ModifyLiveMount
             
             $query = New-RscMutationActiveDirectory -ModifyLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		validIps = @(
             			$someString
             		)
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		subnet = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreObjects operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: RestoreObjects
             
             $query = New-RscMutationActiveDirectory -RestoreObjects
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		shouldMergeLinkedAttrs = $someBoolean
             		# OPTIONAL
             		userRestoreOptions = @{
             			# OPTIONAL
             			shouldEnableUser = $someBoolean
             			# OPTIONAL
             			shouldChangePassword = $someBoolean
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			passwordOptions = $someActiveDirectoryUserPasswordRecoveryOption # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryUserPasswordRecoveryOption]) for enum values.
             		}
             		# OPTIONAL
             		restoreToDifferentContainer = $someString
             		# OPTIONAL
             		shouldContinueOnError = $someBoolean
             		# OPTIONAL
             		clearUpAttrsIfNullInBackup = $someBoolean
             		# OPTIONAL
             		credsForRestore = @{
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		shouldCreateMissingParents = $someBoolean
             		# OPTIONAL
             		containerRestoreOptions = @{
             			# OPTIONAL
             			shouldDeleteExtraObjects = $someBoolean
             			# OPTIONAL
             			shouldOnlyRecreateMissingObjects = $someBoolean
             		}
             		# OPTIONAL
             		locationId = $someString
             		# OPTIONAL
             		nameConflict = $someActiveDirectoryObjectNameConflictOption # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryObjectNameConflictOption]) for enum values.
             		# OPTIONAL
             		objectMovedOptions = $someActiveDirectoryObjectMovedOption # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryObjectMovedOption]) for enum values.
             		# REQUIRED
             		domainControllerRecoveryObjects = @(
             			@{
             				# OPTIONAL
             				objectType = $someActiveDirectoryObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryObjectType]) for enum values.
             				# REQUIRED
             				dnt = $someInt64
             			}
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationActivitySeries">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'Activity series' API domain:
             Cancel, DownloadUserCsv, or DownloadUserFileCsv.
             </summary>
             <description>
             New-RscMutationActivitySeries creates a new
             mutation object for operations
             in the 'Activity series' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'Activity series' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Cancel, DownloadUserCsv, or DownloadUserFileCsv.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActivitySeries -Cancel).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActivitySeries -Cancel).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Cancel operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: Cancel
             
             $query = New-RscMutationActivitySeries -Cancel
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	activitySeriesId = $someString
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadUserCsv operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: DownloadUserCsv
             
             $query = New-RscMutationActivitySeries -DownloadUserCsv
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filters = @{
             		# OPTIONAL
             		openAccessTypes = @(
             			$someOpenAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OpenAccessType]) for enum values.
             		)
             		# OPTIONAL
             		stalenessTypes = @(
             			$someStalenessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StalenessType]) for enum values.
             		)
             		# OPTIONAL
             		analyzerGroupIds = @(
             			$someString
             		)
             		# OPTIONAL
             		clusterIds = @(
             			$someString
             		)
             		# OPTIONAL
             		pathPrefix = $someString
             		# OPTIONAL
             		snappableTypes = @(
             			$someString
             		)
             		# OPTIONAL
             		searchText = $someString
             		# OPTIONAL
             		whitelistEnabled = $someBoolean
             		# OPTIONAL
             		fileCountTypes = @(
             			$someFileCountType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileCountType]) for enum values.
             		)
             		# OPTIONAL
             		accessTypes = @(
             			$someAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AccessType]) for enum values.
             		)
             		# OPTIONAL
             		activityTypes = @(
             			$someActivityAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityAccessType]) for enum values.
             		)
             		# OPTIONAL
             		objectIds = @(
             			$someString
             		)
             		# OPTIONAL
             		inodeTypes = @(
             			$someInodeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InodeType]) for enum values.
             		)
             		# REQUIRED
             		objectTypes = @(
             			$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             		)
             	}
             	# REQUIRED
             	day = $someString
             	# REQUIRED
             	timezone = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadCsvReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadUserFileCsv operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: DownloadUserFileCsv
             
             $query = New-RscMutationActivitySeries -DownloadUserFileCsv
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	userId = $someString
             	# REQUIRED
             	snapshot = @{
             		# OPTIONAL
             		snappableFid = $someString
             		# OPTIONAL
             		snapshotFid = $someString
             	}
             	# REQUIRED
             	nativePath = $someString
             	# REQUIRED
             	timezone = $someString
             	# REQUIRED
             	startDay = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadCsvReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationArchival">
             <summary>
             Create a new RscQuery object for any of the 16
             operations in the 'Archival' API domain:
             CreateGlacierReaderTarget, CreateManualTargetMapping, CreateS3CompatibleReaderTarget, CreateS3CompatibleTarget, DeleteTarget, DeleteTargetMapping, DisableTarget, EnableTarget, PauseTarget, PromoteReaderTarget, RefreshReaderTarget, ResumeTarget, UpdateGlacierTarget, UpdateManualTargetMapping, UpdateS3CompatibleTarget, or UpgradeCdmManagedTarget.
             </summary>
             <description>
             New-RscMutationArchival creates a new
             mutation object for operations
             in the 'Archival' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 16 operations
             in the 'Archival' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateGlacierReaderTarget, CreateManualTargetMapping, CreateS3CompatibleReaderTarget, CreateS3CompatibleTarget, DeleteTarget, DeleteTargetMapping, DisableTarget, EnableTarget, PauseTarget, PromoteReaderTarget, RefreshReaderTarget, ResumeTarget, UpdateGlacierTarget, UpdateManualTargetMapping, UpdateS3CompatibleTarget, or UpgradeCdmManagedTarget.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationArchival -CreateGlacierReaderTarget).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationArchival -CreateGlacierReaderTarget).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateGlacierReaderTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: CreateGlacierReaderTarget
             
             $query = New-RscMutationArchival -CreateGlacierReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	vaultName = $someString
             	# REQUIRED
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	encryptionPassword = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	retrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateManualTargetMapping operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: CreateManualTargetMapping
             
             $query = New-RscMutationArchival -CreateManualTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	type = $someTargetType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TargetType]) for enum values.
             	# OPTIONAL
             	archivalLocationClusterMappings = @(
             		@{
             			# OPTIONAL
             			locationId = $someString
             			# OPTIONAL
             			clusterUuid = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateS3CompatibleReaderTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: CreateS3CompatibleReaderTarget
             
             $query = New-RscMutationArchival -CreateS3CompatibleReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	secretKey = $someString
             	# REQUIRED
             	endpoint = $someString
             	# REQUIRED
             	bucketPrefix = $someString
             	# REQUIRED
             	numberOfBuckets = $someInt
             	# REQUIRED
             	encryptionKeyInDer = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# REQUIRED
             	useSystemProxy = $someBoolean
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             	# OPTIONAL
             	subType = $someS3CompatibleSubType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.S3CompatibleSubType]) for enum values.
             	# OPTIONAL
             	encryptionPassword = $someString
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		bucketLockDurationDays = $someInt
             	}
             	# OPTIONAL
             	ibmDetails = @{
             		# OPTIONAL
             		provisioningCode = $someString
             		# OPTIONAL
             		deploymentType = $someIbmDeploymentType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IbmDeploymentType]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateS3CompatibleTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: CreateS3CompatibleTarget
             
             $query = New-RscMutationArchival -CreateS3CompatibleTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	secretKey = $someString
             	# REQUIRED
             	endpoint = $someString
             	# REQUIRED
             	bucketPrefix = $someString
             	# REQUIRED
             	numberOfBuckets = $someInt
             	# REQUIRED
             	encryptionKeyInDer = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# REQUIRED
             	useSystemProxy = $someBoolean
             	# OPTIONAL
             	subType = $someS3CompatibleSubType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.S3CompatibleSubType]) for enum values.
             	# OPTIONAL
             	encryptionPassword = $someString
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		bucketLockDurationDays = $someInt
             	}
             	# OPTIONAL
             	ibmDetails = @{
             		# OPTIONAL
             		provisioningCode = $someString
             		# OPTIONAL
             		deploymentType = $someIbmDeploymentType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IbmDeploymentType]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: DeleteTarget
             
             $query = New-RscMutationArchival -DeleteTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTargetMapping operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: DeleteTargetMapping
             
             $query = New-RscMutationArchival -DeleteTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DisableTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: DisableTarget
             
             $query = New-RscMutationArchival -DisableTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DisableTargetReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: EnableTarget
             
             $query = New-RscMutationArchival -EnableTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: EnableTargetReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PauseTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: PauseTarget
             
             $query = New-RscMutationArchival -PauseTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PauseTargetReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PromoteReaderTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: PromoteReaderTarget
             
             $query = New-RscMutationArchival -PromoteReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	locationId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshReaderTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: RefreshReaderTarget
             
             $query = New-RscMutationArchival -RefreshReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	localDataSourceIds = @(
             		$someString
             	)
             	# OPTIONAL
             	archivalDataSourceIds = @(
             		$someString
             	)
             	# OPTIONAL
             	locationId = $someString
             	# OPTIONAL
             	externalLocationId = $someString
             	# OPTIONAL
             	clusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResumeTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: ResumeTarget
             
             $query = New-RscMutationArchival -ResumeTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResumeTargetReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateGlacierTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: UpdateGlacierTarget
             
             $query = New-RscMutationArchival -UpdateGlacierTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	retrievalTier = $someAwsRetrievalTier # Call 