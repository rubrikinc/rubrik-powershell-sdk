<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RubrikSecurityCloud.PowerShell</name>
    </assembly>
    <members>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc">
             <summary>
             Establishes a user session with Rubrik Security Cloud
             </summary>
             <description>
             The Connect-Rsc Cmdlet is used to connect to the Rubrik Security Cloud (RSC) API.
             RSC then returns a unique token to represent the user's credentials for subsequent calls.
             The token is stored securly in a .NET object within this PowerShell session.
             The recommended authentication method is a Rsc Service Account.
             Service Account credentials may be provided as parameters, or stored
             in an encrypted credential file, using Set-RscServiceAccountFile.
             Service Account .json files (unencryped) are not supported.
             </description>
             <example>
             Connect to Rubrik Security Cloud, using the URL, Client Id and Client Secret
             <code>Connect-Rsc -Server mycompany.my.rubrik.com -ClientId xxxxxxxxx -ClientSecret xxxxxxxxx</code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in the default RSC credential store in the user profile
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json
             Connect-Rsc
             </code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in a location other than the default RSC credential store.
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json -OutputFilePath rubrik_service_account.xml
             Connect-Rsc -ServiceAccountFile rubrik_service_account.xml
             </code>
             </example>
             <example>
             Connect to Rubrik Security Cloud, using a service account file,
             stored in a location held in the OS environment variable RSC_SERVICE_ACCOUNT_FILE
             The service account file can be downloaded from the Rsc Web UI.
             <code>
             Set-RscServiceAccountFile -InputFilePath rubrik_service_account.json -OutputFilePath $ENV:RSC_SERVICE_ACCOUNT_FILE
             Connect-Rsc -FromEnv
             </code>
             </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.IfNeeded">
            <summary>
            Connect if there is no existing connection
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.FromEnv">
            <summary>
            Use a service account, which path is stored in an environment variable
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ServiceAccountFile">
            <summary>
            Used to specify the service account file downloaded from Rubrik Security Cloud
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.Server">
            <summary>
            FQDN or the Rubrik Security Cloud Instance. I.e. mycompany.my.rubrik.com
            This can also be found in the JSON file downloaded from RSC when creating the Service Account
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ClientId">
            <summary>
            The Service Account ClientId.
            This can be found as "client_id" in the JSON file downloaded from RSC when creating the Service Account
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Connect_Rsc.ClientSecret">
            <summary>
            The Service Account ClientSecret in SecureString format.
            The ClientSecret can be found as "client_secret" in the JSON file downloaded from RSC when creating the Service Account
            Convert the JSON plain text field into a secure string with:
            $secret = $(Get-Content service_account_file.json | ConvertFrom-Json).client_secret | ConvertTo-SecureString -AsPlainText
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet">
            <summary>
            Return info about SDK cmdlets
            </summary>
            <description>
            Look up a GraphQL Operation and
            return info about the cmdlet that implements it.
            </description>
            <example>
            Retrieve the name of the cmdlet that implements the
            GraphQL query clusterConnection
            <code>
            PS> Get-RscCmdlet clusterConnection
            </code>
            </example>
            <example>
            Retrieve info for a GraphQL operation that is
            not implemented by a cmdlet.
            <code>
            PS> Get-RscCmdlet notImplementedOperation
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.ExistingGqlRootFieldName">
            <summary>
            The name of the GraphQL Operation to look up.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.AnyGqlRootFieldName">
            <summary>
            The name of the GraphQL Operation to look up.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscCmdlet.Locations">
            <summary>
            Info about the various locations the SDK uses
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset">
            <summary>
            Retrieve one or more filsets managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscFileset cmdlet is used to get one or more filesets
            known to RSC. The -FilesetId parameter will return a single fileset.
            All other parameters will return a list of matching filesets.
            When -FilesetId is NOT specified, -HostId is required.
            -HostId can accept a value from the pipeline
            </description>
            <example>
            Get a list of all filesets on a specified host
            <code> Get-RscFileset -HostId xxxxx-xxxxx-xxxxx-xxxxx </code>
            </example>
            <example>
            Get a list of all filesets on a specified host, filtered by name
            <code> Get-RscFileset -HostId xxxxx-xxxxx-xxxxx-xxxxx -Name etc </code>
            </example>
            <example>
            Get a list of all filesets on a host, providing the host via the pipeline
            <code> Get-RscHost -OsType Linux -First 1 | Get-RscFileset </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.HostId">
            <summary>
            The Id of the Physical Host to get filesets for
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFileset.FilesetId">
            <summary>
            Get a fileset using its ID
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate">
            <summary>
            Retrieve one or more filset templates managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscFileset cmdlet is used to get one or more fileset templates
            known to RSC. The -Id parameter will return a template. All other
            parameters will return a list of matching templates.
            Returns Windows and Linux fileset templates.
            </description>
            <example>
            Get a list of all Linux fileset templates.
            <code>Get-RscFilesetTemplate -OsType Linux </code>
            </example>
            <example>
            Get a list of Windows fileset templates, matching a name pattern.
            <code>Get-RscFilesetTemplate -OsType Windows -Name myWinTemplate</code>
            </example>
            <example>
            Get a template by Id, with default fields selected.
            <code>Get-RscFilesetTemplate -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.OsType">
            <summary>
            Operating system type of fileset templates to return.
            Valid values are: "Windows" and "Linux".
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Id">
            <summary>
            Get a physical host using its ID
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscFilesetTemplate.Field">
            <summary>
            Activate selected fields based on not-null properties
            of the input fields object
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost">
            <summary>
            Retrieve one or more physical hosts managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscHost cmdlet is used to get one or more physical hosts
            known to RSC. The -Id parameter will return a single host. All other
            parameters will return a list of matching hosts.
            </description>
            <example>
            Get a list of all Linux from the RSC instance.
            <code>Get-RscHost -OsType Linux </code>
            </example>
            <example>
            Get a list of Windows Hosts, matching a name pattern.
            <code>Get-RscHost -OsType Windows -Name myWindowsServer</code>
            </example>
            <example>
            Get a host by Id, with default fields selected.
            <code>Get-RscHost -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.OsType">
            <summary>
            Operating system type of hosts to return. Valid values are
            "Windows" and "Linux".
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Name">
            <summary>
            Filter results by name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.First">
            <summary>
            Return only the fist # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Relics">
            <summary>
            Include only items that are relics
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Replicated">
            <summary>
            Include only items that are replicated
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.SortBy">
            <summary>
            Sort by field name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.SortOrder">
            <summary>
            Sort Order
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.IsBulkPolicyAssignmentFlow">
            <summary>
            Indicates whether request is bulk policy assignment flow.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Id">
            <summary>
            Get a physical host using its ID
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscHost.Field">
            <summary>
            Activate selected fields based on not-null properties
            of the input fields object
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot">
            <summary>
            Retrieves all of the snapshots (backups) for any given object
            </summary>
            <description>
            The Get-RscSnapshot cmdlet is used to query the RSC instance for all
            known snapshots (backups) for a protected object.
            Multiple objects to be piped into this function is not yet supported
            </description>
            <example>
            Get the snapshot list for an object by the object Id
            <code>Get-RscSnapshot -Id 'xxxxxx-xxxxx-xxxxxx-xxxxx'</code>
            </example>
            <example>
            Get the snapshots for vSphere VM from pipeline
            <code>
            $vm = Get-RscVsphereVm -Id xxxxxx-xxxxxx-xxxxxx-xxxxxx
            $vm | Get-RscSnapshot
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.SnappableId">
            <summary>
            The ID of the snappable object to get a list of snapshots for.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.First">
            <summary>
            Return only the first # of results
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.SnapshotId">
            <summary>
            Retreive a single CDM snapshot by ID. PolarisSnapshot is not yet supported.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscSnapshot.ClusterUUID">
            <summary>
            Ensure that the snapshot returned belongs to a specific CDM Cluster.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType">
            <summary>
            Return a valid empty .NET object for the
            RubrikSecurityCloud.PowerShell SDK
            </summary>
            <description>
            Return a valid empty .NET object for the
            RubrikSecurityCloud.PowerShell SDK.
            
            The cmdlet will return a .NET object by name.
            The -ListAvailable parameter will return a list of
            valid RubrikSecurityCloud.Types.
            </description>
            <example>
            Get a list of all available Rsc .NET types
            <code>
            PS C:\> Get-RscType -ListAvailable
            </code>
            </example>
            <example>
            Get a list of available Rsc .NET types filtered by name
            <code>
            PS C:\> Get-RscType -ListAvailable -FilterByName "accountsetting"
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name
            <code>
            PS C:\> Get-RscType -Name "AccountSetting"
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name. Initialize the 'IsEulaAccepted' property
            <code>
            PS C:\> Get-RscType -Name "AccountSetting" -InitialProperties @("IsEulaAccepted")
            </code>
            </example>
            <example>
            Get an empty object that is compliant with the Rsc Type
            specified by name. Initialize the 'IsEulaAccepted' property
            with a specific value.
            <code>
            PS C:\> Get-RscType -Name "AccountSetting" -InitialValues @{"IsEulaAccepted"= $false}
            </code>
            </example>
            <example>
            Get a list of all available Rsc .NET Interfaces
            <code>
            PS C:\> Get-RscType -ListAvailable -Interfaces
            </code>
            </example>
            <example>
            Get a list of all available Rsc .NET Interfaces filtered by name
            <code>
            PS C:\> Get-RscType -ListAvailable -Interfaces -FilterByName "mssql"
            </code>
            </example>
            <example>
            Get a list of all Rsc .NET types that implement the
            MssqlTopLevelDescendantType interface
            <code>
            PS C:\> Get-RscType -Interface MssqlTopLevelDescendantType
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Name">
            <summary>
            The name of the Rsc Type to return
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.InitialProperties">
            <summary>
            Specify an array of string containing the names of the
            properties to initialize.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.InitialValues">
            <summary>
            Specify a hashtable mapping the requested
            fields to their values.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.ListAvailable">
            <summary>
            Used to request a list of valid Rsc Type Names.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.FilterByName">
            <summary>
            Optional to filter results by name.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Interfaces">
            <summary>
            Flag to specify if interfaces should be returned.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscType.Interface">
            <summary>
            Used to request a list of types implementing a given interface.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVersion">
            <summary>
            Returns the Rubrik Security Cloud Server version, as well a the
            Rubrik Security Cloud PowerShell SDK schema version. Ideally these
            values should match for maximum SDK compatibility. 
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm">
            <summary>
            Retrieve one or more vSphere Virtual Machines (VMs) managed by
            Rubrik Security Cloud (Rsc).
            </summary>
            <description>
            The Get-RscVsphereVm cmdlet is used to get one or more vSphere VMs
            known to RSC. The -Id parameter will return a single VM. All other
            parameters will return a list of matching VMs.
            </description>
            <example>
            Get a list of all vSphere VMs from the RSC instance.
            <code>Get-RscVsphereVm</code>
            </example>
            <example>
            Get a list of vSphere VMs, matching a name pattern.
            <code>Get-RscVsphereVm -Name devVM</code>
            </example>
            <example>
            Get a vSphere VM by Id, with default fields selected.
            <code>Get-RscVsphereVm -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d</code>
            </example>
            <example>
            Get a vSphere VM by Id, with custom fields selected (Id, Name, and
            GuestOsType).
            <code>
            $myFields = Get-RscType -Name VSphereVm
            $myFields.Id = "FETCH"
            $myFields.Name = "FETCH"
            $myFields.GuestOsType = "FETCH"
            Get-RscVsphereVm -Id 76254be7-baa4-5145-a4b7-a7a7773ad97d -Fields $myFields
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Name">
            <summary>
            Filter VMs by Name
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Id">
            <summary>
            Retrieve a single known VM by Id
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Get_RscVsphereVm.Fields">
            <summary>
            An object to use as a field selector for the query.
            Values from the API for fields set to not-null values in this object
            will be returned. To be used only with -Id parameter.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc">
            <summary>
            Send a query to the RSC API.
            </summary>
            <description>
            There are 2 usages of this cmdlet:
            - Send a query obtained from a `New-RscQuery*` cmdlet.
            - Send a raw GraphQL query.
            </description>
            <example>
            Send a query obtained from a `New-RscQuery*` cmdlet.
            It is equivalent to calling `Invoke()` on the query object.
            <code>
            New-RscQueryGetVsphereVmList -Name "my-vm" | Invoke-Rsc
            # or
            $query = New-RscQueryGetVsphereVmList -Name "my-vm"
            $query.Invoke()
            </code>
            </example>
            <example>
            Read GraphQL query from gql file
            <code>
            Get-Content -Path ./Samples/queryAccountOwners -Raw | Invoke-Rsc
            </code>
            </example>
            <example>
            Pass GraphQL query as parameter.
            <code>
            Invoke-Rsc -GqlQuery "mutation DeleteWebhookMutation(`$id: Int!) { deleteWebhook(input: {id: `$id}) }" -Var @{id = 1}
            </code>
            </example>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.GqlQuery">
            <summary>
            The GQL query to send to the RSC API.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.Var">
            <summary>
            The variables to supply to the GraphQL query.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.ProcessRecord_Query">
            <summary>
            Send a query object (obtained from a `New-RscQuery*` cmdlet).
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.ProcessRecord_NativeGQL">
            <summary>
            Send a raw GraphQL query to the RSC API.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Cmdlets.Invoke_Rsc.FetchAndCollatePages(RubrikSecurityCloud.RscQuery)">
            <summary>
            Collate pages of results.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuery.RootFieldKind">
            <summary>
            The kind of root field this object is:
            a Query, a Mutation, or something unknown.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAccount">
             <summary>
             Create a new RscQuery object for any of the 14
             operations in the 'Account' API domain:
             CreateOrg, CreateOrgSwitchSession, CreateRole, CreateUser, CreateUserWithPassword, DeleteOrg, DeleteRole, DeleteTotpConfig, DeleteTotpConfigs, DeleteUsers, GenerateTotpSecret, MutateRole, UpdateOrg, or UpdateRole.
             </summary>
             <description>
             New-RscMutationAccount creates a new
             mutation object for operations
             in the 'Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 14 operations
             in the 'Account' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateOrg, CreateOrgSwitchSession, CreateRole, CreateUser, CreateUserWithPassword, DeleteOrg, DeleteRole, DeleteTotpConfig, DeleteTotpConfigs, DeleteUsers, GenerateTotpSecret, MutateRole, UpdateOrg, or UpdateRole.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAccount -CreateOrg).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAccount -CreateOrg).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateOrg operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateOrg
             
             $query = New-RscMutationAccount -CreateOrg
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	fullName = $someString
             	# REQUIRED
             	description = $someString
             	# REQUIRED
             	authDomainConfig = $someTenantAuthDomainConfig # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TenantAuthDomainConfig]) for enum values.
             	# REQUIRED
             	shouldEnforceMfaForAll = $someBoolean
             	# REQUIRED
             	isEnvoyRequired = $someBoolean
             	# REQUIRED
             	allowedClusters = @(
             		$someString
             	)
             	# OPTIONAL
             	existingUsers = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	userInvites = @(
             		@{
             			# REQUIRED
             			email = $someString
             			# REQUIRED
             			note = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# REQUIRED
             	permissions = @(
             		@{
             			# REQUIRED
             			operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             			# REQUIRED
             			objectsForHierarchyTypes = @(
             				@{
             					# REQUIRED
             					objectIds = @(
             						$someString
             					)
             					# REQUIRED
             					snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             				}
             			)
             		}
             	)
             	# REQUIRED
             	selfServicePermissions = @(
             		@{
             			# OPTIONAL
             			inventoryRoot = $someInventorySubHierarchyRootEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventorySubHierarchyRootEnum]) for enum values.
             			# REQUIRED
             			inventoryWorkloadType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			# REQUIRED
             			operations = @(
             				$someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             			)
             			# OPTIONAL
             			hierarchyRoot = $someString
             		}
             	)
             	# OPTIONAL
             	existingSsoGroups = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	newSsoGroups = @(
             		@{
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	isServiceAccountEnabled = $someBoolean
             	# OPTIONAL
             	isServiceAccountDisabled = $someBoolean
             	# OPTIONAL
             	crossAccountCapabilities = @(
             		$someCrossAccountCapability # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CrossAccountCapability]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOrgReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOrgSwitchSession operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateOrgSwitchSession
             
             $query = New-RscMutationAccount -CreateOrgSwitchSession
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOrgSwitchSessionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateRole operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateRole
             
             $query = New-RscMutationAccount -CreateRole
             
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.description = $someString
             # REQUIRED
             $query.Var.permissions = @(
             	@{
             		# REQUIRED
             		operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             		# REQUIRED
             		objectsForHierarchyTypes = @(
             			@{
             				# REQUIRED
             				objectIds = @(
             					$someString
             				)
             				# REQUIRED
             				snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			}
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateUser operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateUser
             
             $query = New-RscMutationAccount -CreateUser
             
             # REQUIRED
             $query.Var.email = $someString
             # REQUIRED
             $query.Var.roleIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateUserWithPassword operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CreateUserWithPassword
             
             $query = New-RscMutationAccount -CreateUserWithPassword
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	email = $someString
             	# OPTIONAL
             	password = $someString
             	# OPTIONAL
             	roleIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteOrg operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteOrg
             
             $query = New-RscMutationAccount -DeleteOrg
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	organizationId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteRole operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteRole
             
             $query = New-RscMutationAccount -DeleteRole
             
             # REQUIRED
             $query.Var.roleId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTotpConfig operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteTotpConfig
             
             $query = New-RscMutationAccount -DeleteTotpConfig
             
             # REQUIRED
             $query.Var.userId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTotpConfigs operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteTotpConfigs
             
             $query = New-RscMutationAccount -DeleteTotpConfigs
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	userIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteUsers operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: DeleteUsers
             
             $query = New-RscMutationAccount -DeleteUsers
             
             # REQUIRED
             $query.Var.ids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GenerateTotpSecret operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: GenerateTotpSecret
             
             $query = New-RscMutationAccount -GenerateTotpSecret
             
             # REQUIRED
             $query.Var.userId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GenerateTotpSecretReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MutateRole operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: MutateRole
             
             $query = New-RscMutationAccount -MutateRole
             
             # OPTIONAL
             $query.Var.roleId = $someString
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.description = $someString
             # REQUIRED
             $query.Var.permissions = @(
             	@{
             		# REQUIRED
             		operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             		# REQUIRED
             		objectsForHierarchyTypes = @(
             			@{
             				# REQUIRED
             				objectIds = @(
             					$someString
             				)
             				# REQUIRED
             				snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			}
             		)
             }
             )
             # REQUIRED
             $query.Var.protectableClusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateOrg operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: UpdateOrg
             
             $query = New-RscMutationAccount -UpdateOrg
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	organizationId = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	fullName = $someString
             	# REQUIRED
             	description = $someString
             	# REQUIRED
             	authDomainConfig = $someTenantAuthDomainConfig # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TenantAuthDomainConfig]) for enum values.
             	# REQUIRED
             	shouldEnforceMfaForAll = $someBoolean
             	# REQUIRED
             	isEnvoyRequired = $someBoolean
             	# REQUIRED
             	allowedClusters = @(
             		$someString
             	)
             	# OPTIONAL
             	existingUsers = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	userInvites = @(
             		@{
             			# REQUIRED
             			email = $someString
             			# REQUIRED
             			note = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# REQUIRED
             	permissions = @(
             		@{
             			# REQUIRED
             			operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             			# REQUIRED
             			objectsForHierarchyTypes = @(
             				@{
             					# REQUIRED
             					objectIds = @(
             						$someString
             					)
             					# REQUIRED
             					snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             				}
             			)
             		}
             	)
             	# REQUIRED
             	selfServicePermissions = @(
             		@{
             			# OPTIONAL
             			inventoryRoot = $someInventorySubHierarchyRootEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventorySubHierarchyRootEnum]) for enum values.
             			# REQUIRED
             			inventoryWorkloadType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			# REQUIRED
             			operations = @(
             				$someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             			)
             			# OPTIONAL
             			hierarchyRoot = $someString
             		}
             	)
             	# OPTIONAL
             	existingSsoGroups = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	newSsoGroups = @(
             		@{
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			isOrgAdmin = $someBoolean
             		}
             	)
             	# OPTIONAL
             	isServiceAccountEnabled = $someBoolean
             	# OPTIONAL
             	isServiceAccountDisabled = $someBoolean
             	# OPTIONAL
             	crossAccountCapabilities = @(
             		$someCrossAccountCapability # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CrossAccountCapability]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateOrgReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateRole operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: UpdateRole
             
             $query = New-RscMutationAccount -UpdateRole
             
             # REQUIRED
             $query.Var.roleId = $someString
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.description = $someString
             # REQUIRED
             $query.Var.permissions = @(
             	@{
             		# REQUIRED
             		operation = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             		# REQUIRED
             		objectsForHierarchyTypes = @(
             			@{
             				# REQUIRED
             				objectIds = @(
             					$someString
             				)
             				# REQUIRED
             				snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             			}
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationActiveDirectory">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Active Directory' API domain:
             CreateLiveMount, CreateUnmount, ModifyLiveMount, or RestoreObjects.
             </summary>
             <description>
             New-RscMutationActiveDirectory creates a new
             mutation object for operations
             in the 'Active Directory' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Active Directory' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateLiveMount, CreateUnmount, ModifyLiveMount, or RestoreObjects.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActiveDirectory -CreateLiveMount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActiveDirectory -CreateLiveMount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateLiveMount operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: CreateLiveMount
             
             $query = New-RscMutationActiveDirectory -CreateLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		validUsers = @(
             			$someString
             		)
             		# OPTIONAL
             		validIps = @(
             			$someString
             		)
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		domainName = $someString
             		# OPTIONAL
             		subnet = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateUnmount operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: CreateUnmount
             
             $query = New-RscMutationActiveDirectory -CreateUnmount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ModifyLiveMount operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: ModifyLiveMount
             
             $query = New-RscMutationActiveDirectory -ModifyLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		validIps = @(
             			$someString
             		)
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		subnet = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreObjects operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: RestoreObjects
             
             $query = New-RscMutationActiveDirectory -RestoreObjects
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		shouldMergeLinkedAttrs = $someBoolean
             		# OPTIONAL
             		userRestoreOptions = @{
             			# OPTIONAL
             			shouldEnableUser = $someBoolean
             			# OPTIONAL
             			shouldChangePassword = $someBoolean
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			passwordOptions = $someActiveDirectoryUserPasswordRecoveryOption # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryUserPasswordRecoveryOption]) for enum values.
             		}
             		# OPTIONAL
             		restoreToDifferentContainer = $someString
             		# OPTIONAL
             		shouldContinueOnError = $someBoolean
             		# OPTIONAL
             		clearUpAttrsIfNullInBackup = $someBoolean
             		# OPTIONAL
             		credsForRestore = @{
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		shouldCreateMissingParents = $someBoolean
             		# OPTIONAL
             		containerRestoreOptions = @{
             			# OPTIONAL
             			shouldDeleteExtraObjects = $someBoolean
             			# OPTIONAL
             			shouldOnlyRecreateMissingObjects = $someBoolean
             		}
             		# OPTIONAL
             		locationId = $someString
             		# OPTIONAL
             		nameConflict = $someActiveDirectoryObjectNameConflictOption # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryObjectNameConflictOption]) for enum values.
             		# OPTIONAL
             		objectMovedOptions = $someActiveDirectoryObjectMovedOption # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryObjectMovedOption]) for enum values.
             		# REQUIRED
             		domainControllerRecoveryObjects = @(
             			@{
             				# OPTIONAL
             				objectType = $someActiveDirectoryObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryObjectType]) for enum values.
             				# REQUIRED
             				dnt = $someInt64
             			}
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationActivitySeries">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'Activity series' API domain:
             Cancel, DownloadUserCsv, or DownloadUserFileCsv.
             </summary>
             <description>
             New-RscMutationActivitySeries creates a new
             mutation object for operations
             in the 'Activity series' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'Activity series' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Cancel, DownloadUserCsv, or DownloadUserFileCsv.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActivitySeries -Cancel).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationActivitySeries -Cancel).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Cancel operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: Cancel
             
             $query = New-RscMutationActivitySeries -Cancel
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	activitySeriesId = $someString
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadUserCsv operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: DownloadUserCsv
             
             $query = New-RscMutationActivitySeries -DownloadUserCsv
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filters = @{
             		# OPTIONAL
             		openAccessTypes = @(
             			$someOpenAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OpenAccessType]) for enum values.
             		)
             		# OPTIONAL
             		stalenessTypes = @(
             			$someStalenessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StalenessType]) for enum values.
             		)
             		# OPTIONAL
             		analyzerGroupIds = @(
             			$someString
             		)
             		# OPTIONAL
             		clusterIds = @(
             			$someString
             		)
             		# OPTIONAL
             		pathPrefix = $someString
             		# OPTIONAL
             		snappableTypes = @(
             			$someString
             		)
             		# OPTIONAL
             		searchText = $someString
             		# OPTIONAL
             		whitelistEnabled = $someBoolean
             		# OPTIONAL
             		fileCountTypes = @(
             			$someFileCountType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileCountType]) for enum values.
             		)
             		# OPTIONAL
             		accessTypes = @(
             			$someAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AccessType]) for enum values.
             		)
             		# OPTIONAL
             		activityTypes = @(
             			$someActivityAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityAccessType]) for enum values.
             		)
             		# OPTIONAL
             		objectIds = @(
             			$someString
             		)
             		# OPTIONAL
             		inodeTypes = @(
             			$someInodeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InodeType]) for enum values.
             		)
             		# REQUIRED
             		objectTypes = @(
             			$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             		)
             	}
             	# REQUIRED
             	day = $someString
             	# REQUIRED
             	timezone = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadCsvReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadUserFileCsv operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: DownloadUserFileCsv
             
             $query = New-RscMutationActivitySeries -DownloadUserFileCsv
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	userId = $someString
             	# REQUIRED
             	snapshot = @{
             		# OPTIONAL
             		snappableFid = $someString
             		# OPTIONAL
             		snapshotFid = $someString
             	}
             	# REQUIRED
             	nativePath = $someString
             	# REQUIRED
             	timezone = $someString
             	# REQUIRED
             	startDay = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadCsvReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationArchival">
             <summary>
             Create a new RscQuery object for any of the 16
             operations in the 'Archival' API domain:
             CreateGlacierReaderTarget, CreateManualTargetMapping, CreateS3CompatibleReaderTarget, CreateS3CompatibleTarget, DeleteTarget, DeleteTargetMapping, DisableTarget, EnableTarget, PauseTarget, PromoteReaderTarget, RefreshReaderTarget, ResumeTarget, UpdateGlacierTarget, UpdateManualTargetMapping, UpdateS3CompatibleTarget, or UpgradeCdmManagedTarget.
             </summary>
             <description>
             New-RscMutationArchival creates a new
             mutation object for operations
             in the 'Archival' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 16 operations
             in the 'Archival' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateGlacierReaderTarget, CreateManualTargetMapping, CreateS3CompatibleReaderTarget, CreateS3CompatibleTarget, DeleteTarget, DeleteTargetMapping, DisableTarget, EnableTarget, PauseTarget, PromoteReaderTarget, RefreshReaderTarget, ResumeTarget, UpdateGlacierTarget, UpdateManualTargetMapping, UpdateS3CompatibleTarget, or UpgradeCdmManagedTarget.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationArchival -CreateGlacierReaderTarget).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationArchival -CreateGlacierReaderTarget).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateGlacierReaderTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: CreateGlacierReaderTarget
             
             $query = New-RscMutationArchival -CreateGlacierReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	vaultName = $someString
             	# REQUIRED
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	encryptionPassword = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	retrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateManualTargetMapping operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: CreateManualTargetMapping
             
             $query = New-RscMutationArchival -CreateManualTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	type = $someTargetType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TargetType]) for enum values.
             	# OPTIONAL
             	archivalLocationClusterMappings = @(
             		@{
             			# OPTIONAL
             			locationId = $someString
             			# OPTIONAL
             			clusterUuid = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateS3CompatibleReaderTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: CreateS3CompatibleReaderTarget
             
             $query = New-RscMutationArchival -CreateS3CompatibleReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	secretKey = $someString
             	# REQUIRED
             	endpoint = $someString
             	# REQUIRED
             	bucketPrefix = $someString
             	# REQUIRED
             	numberOfBuckets = $someInt
             	# REQUIRED
             	encryptionKeyInDer = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# REQUIRED
             	useSystemProxy = $someBoolean
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             	# OPTIONAL
             	subType = $someS3CompatibleSubType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.S3CompatibleSubType]) for enum values.
             	# OPTIONAL
             	encryptionPassword = $someString
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		bucketLockDurationDays = $someInt
             	}
             	# OPTIONAL
             	ibmDetails = @{
             		# OPTIONAL
             		provisioningCode = $someString
             		# OPTIONAL
             		deploymentType = $someIbmDeploymentType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IbmDeploymentType]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateS3CompatibleTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: CreateS3CompatibleTarget
             
             $query = New-RscMutationArchival -CreateS3CompatibleTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	secretKey = $someString
             	# REQUIRED
             	endpoint = $someString
             	# REQUIRED
             	bucketPrefix = $someString
             	# REQUIRED
             	numberOfBuckets = $someInt
             	# REQUIRED
             	encryptionKeyInDer = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# REQUIRED
             	useSystemProxy = $someBoolean
             	# OPTIONAL
             	subType = $someS3CompatibleSubType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.S3CompatibleSubType]) for enum values.
             	# OPTIONAL
             	encryptionPassword = $someString
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		bucketLockDurationDays = $someInt
             	}
             	# OPTIONAL
             	ibmDetails = @{
             		# OPTIONAL
             		provisioningCode = $someString
             		# OPTIONAL
             		deploymentType = $someIbmDeploymentType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IbmDeploymentType]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: DeleteTarget
             
             $query = New-RscMutationArchival -DeleteTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTargetMapping operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: DeleteTargetMapping
             
             $query = New-RscMutationArchival -DeleteTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DisableTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: DisableTarget
             
             $query = New-RscMutationArchival -DisableTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DisableTargetReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: EnableTarget
             
             $query = New-RscMutationArchival -EnableTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: EnableTargetReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PauseTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: PauseTarget
             
             $query = New-RscMutationArchival -PauseTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PauseTargetReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PromoteReaderTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: PromoteReaderTarget
             
             $query = New-RscMutationArchival -PromoteReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	locationId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshReaderTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: RefreshReaderTarget
             
             $query = New-RscMutationArchival -RefreshReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	localDataSourceIds = @(
             		$someString
             	)
             	# OPTIONAL
             	archivalDataSourceIds = @(
             		$someString
             	)
             	# OPTIONAL
             	locationId = $someString
             	# OPTIONAL
             	externalLocationId = $someString
             	# OPTIONAL
             	clusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResumeTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: ResumeTarget
             
             $query = New-RscMutationArchival -ResumeTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResumeTargetReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateGlacierTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: UpdateGlacierTarget
             
             $query = New-RscMutationArchival -UpdateGlacierTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	retrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# OPTIONAL
             	cloudAccountId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateManualTargetMapping operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: UpdateManualTargetMapping
             
             $query = New-RscMutationArchival -UpdateManualTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	archivalLocationClusterMappings = @(
             		@{
             			# OPTIONAL
             			locationId = $someString
             			# OPTIONAL
             			clusterUuid = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateS3CompatibleTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: UpdateS3CompatibleTarget
             
             $query = New-RscMutationArchival -UpdateS3CompatibleTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	accessKey = $someString
             	# OPTIONAL
             	secretKey = $someString
             	# OPTIONAL
             	endpoint = $someString
             	# OPTIONAL
             	numberOfBuckets = $someInt
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	useSystemProxy = $someBoolean
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		bucketLockDurationDays = $someInt
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeCdmManagedTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: UpgradeCdmManagedTarget
             
             $query = New-RscMutationArchival -UpgradeCdmManagedTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	fids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAws">
             <summary>
             Create a new RscQuery object for any of the 33
             operations in the 'AWS' API domain:
             AddAuthenticationServerBasedCloudAccount, AddIamUserBasedCloudAccount, BulkDeleteCloudAccountWithoutCft, CreateAccount, CreateAutomaticTargetMapping, CreateCloudNativeStorageSetting, CreateCluster, CreateComputeSetting, CreateExocomputeConfigs, CreateReaderTarget, CreateTarget, DeleteComputeSetting, DeleteExocomputeConfigs, ExocomputeClusterConnect, FinalizeCloudAccountDeletion, FinalizeCloudAccountProtection, PatchAuthenticationServerBasedCloudAccount, PatchIamUserBasedCloudAccount, PrepareCloudAccountDeletion, PrepareFeatureUpdateForCloudAccount, RegisterFeatureArtifacts, StartExocomputeDisableJob, UpdateAccount, UpdateAutomaticTargetMapping, UpdateCloudAccount, UpdateCloudAccountFeature, UpdateCloudNativeStorageSetting, UpdateComputeSetting, UpdateExocomputeConfigs, UpdateTarget, UpgradeCloudAccountFeaturesWithoutCft, UpgradeIamUserBasedCloudAccountPermissions, or ValidateAndCreateCloudAccount.
             </summary>
             <description>
             New-RscMutationAws creates a new
             mutation object for operations
             in the 'AWS' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 33 operations
             in the 'AWS' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddAuthenticationServerBasedCloudAccount, AddIamUserBasedCloudAccount, BulkDeleteCloudAccountWithoutCft, CreateAccount, CreateAutomaticTargetMapping, CreateCloudNativeStorageSetting, CreateCluster, CreateComputeSetting, CreateExocomputeConfigs, CreateReaderTarget, CreateTarget, DeleteComputeSetting, DeleteExocomputeConfigs, ExocomputeClusterConnect, FinalizeCloudAccountDeletion, FinalizeCloudAccountProtection, PatchAuthenticationServerBasedCloudAccount, PatchIamUserBasedCloudAccount, PrepareCloudAccountDeletion, PrepareFeatureUpdateForCloudAccount, RegisterFeatureArtifacts, StartExocomputeDisableJob, UpdateAccount, UpdateAutomaticTargetMapping, UpdateCloudAccount, UpdateCloudAccountFeature, UpdateCloudNativeStorageSetting, UpdateComputeSetting, UpdateExocomputeConfigs, UpdateTarget, UpgradeCloudAccountFeaturesWithoutCft, UpgradeIamUserBasedCloudAccountPermissions, or ValidateAndCreateCloudAccount.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAws -AddAuthenticationServerBasedCloudAccount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAws -AddAuthenticationServerBasedCloudAccount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddAuthenticationServerBasedCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: AddAuthenticationServerBasedCloudAccount
             
             $query = New-RscMutationAws -AddAuthenticationServerBasedCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	# REQUIRED
             	awsAccountName = $someString
             	# OPTIONAL
             	awsRegions = @(
             		$someAwsAuthServerBasedCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsAuthServerBasedCloudAccountRegion]) for enum values.
             	)
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	nativeId = $someString
             	# OPTIONAL
             	agencyName = $someString
             	# OPTIONAL
             	roleName = $someString
             	# OPTIONAL
             	authServerHostName = $someString
             	# OPTIONAL
             	authServerUserClientCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             	# OPTIONAL
             	authServerCaCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             	# OPTIONAL
             	awsCaCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAwsAuthenticationServerBasedCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddIamUserBasedCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: AddIamUserBasedCloudAccount
             
             $query = New-RscMutationAws -AddIamUserBasedCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	accessKey = $someString
             	# OPTIONAL
             	secretKey = $someString
             	# REQUIRED
             	nativeId = $someString
             	# REQUIRED
             	cloudAccountName = $someString
             	# OPTIONAL
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	# OPTIONAL
             	awsRegions = @(
             		$someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	roleArn = $someString
             	# OPTIONAL
             	externalArtifactMap = @(
             		@{
             			# OPTIONAL
             			externalArtifactKey = $someAwsCloudExternalArtifact # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudExternalArtifact]) for enum values.
             			# OPTIONAL
             			externalArtifactValue = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAwsIamUserBasedCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkDeleteCloudAccountWithoutCft operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: BulkDeleteCloudAccountWithoutCft
             
             $query = New-RscMutationAws -BulkDeleteCloudAccountWithoutCft
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsNativeId = $someString
             	# OPTIONAL
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkDeleteAwsCloudAccountWithoutCftReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CreateAccount
             
             $query = New-RscMutationAws -CreateAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	secretKey = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAutomaticTargetMapping operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CreateAutomaticTargetMapping
             
             $query = New-RscMutationAws -CreateAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	bucketPrefix = $someString
             	# REQUIRED
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# REQUIRED
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             	# OPTIONAL
             	rsaKey = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCloudNativeStorageSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CreateCloudNativeStorageSetting
             
             $query = New-RscMutationAws -CreateCloudNativeStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	bucketPrefix = $someString
             	# REQUIRED
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# OPTIONAL
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             	# REQUIRED
             	cloudNativeLocTemplateType = $someCloudNativeLocTemplateType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLocTemplateType]) for enum values.
             	# OPTIONAL
             	bucketTags = @{
             		# REQUIRED
             		tagList = @(
             			@{
             				# REQUIRED
             				key = $someString
             				# REQUIRED
             				value = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCloudNativeAwsStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCluster operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CreateCluster
             
             $query = New-RscMutationAws -CreateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	isEsType = $someBoolean
             	# OPTIONAL
             	keepClusterOnFailure = $someBoolean
             	# OPTIONAL
             	region = $someString
             	# OPTIONAL
             	disableApiTermination = $someBoolean
             	# OPTIONAL
             	clusterConfig = @{
             		# OPTIONAL
             		userEmail = $someString
             		# OPTIONAL
             		adminPassword = $someString
             		# OPTIONAL
             		clusterName = $someString
             		# OPTIONAL
             		numNodes = $someInt
             		# OPTIONAL
             		dnsSearchDomains = @(
             			$someString
             		)
             		# OPTIONAL
             		dnsNameServers = @(
             			$someString
             		)
             		# OPTIONAL
             		ntpServers = @(
             			$someString
             		)
             		# OPTIONAL
             		azureEsConfig = @{
             			# OPTIONAL
             			storageAccount = $someString
             			# OPTIONAL
             			resourceGroup = $someString
             			# OPTIONAL
             			storageSecret = $someString
             			# OPTIONAL
             			containerName = $someString
             			# OPTIONAL
             			shouldCreateContainer = $someBoolean
             			# OPTIONAL
             			enableImmutability = $someBoolean
             			# OPTIONAL
             			managedIdentity = @{
             				# OPTIONAL
             				name = $someString
             				# OPTIONAL
             				clientId = $someString
             				# OPTIONAL
             				resourceGroup = $someString
             			}
             		}
             		# OPTIONAL
             		awsEsConfig = @{
             			# OPTIONAL
             			bucketName = $someString
             			# OPTIONAL
             			shouldCreateBucket = $someBoolean
             			# OPTIONAL
             			enableObjectLock = $someBoolean
             			# OPTIONAL
             			enableImmutability = $someBoolean
             		}
             	}
             	# OPTIONAL
             	vmConfig = @{
             		# OPTIONAL
             		cdmVersion = $someString
             		# OPTIONAL
             		nodeSizeGb = $someInt
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		tags = $someString
             		# OPTIONAL
             		imageId = $someString
             		# OPTIONAL
             		instanceProfileName = $someString
             		# OPTIONAL
             		cdmProduct = $someString
             		# OPTIONAL
             		vmType = $someVmType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VmType]) for enum values.
             		# OPTIONAL
             		securityGroups = @(
             			$someString
             		)
             		# OPTIONAL
             		instanceType = $someAwsInstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsInstanceType]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateComputeSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CreateComputeSetting
             
             $query = New-RscMutationAws -CreateComputeSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	subnetId = $someString
             	# OPTIONAL
             	vpcId = $someString
             	# OPTIONAL
             	securityGroupId = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	isSecurityGroupPolarisManaged = $someBoolean
             	# OPTIONAL
             	clusterInterfaceCidrs = @(
             		@{
             			# OPTIONAL
             			clusterName = $someString
             			# OPTIONAL
             			clusterId = $someString
             			# OPTIONAL
             			interfaceCidr = @(
             				@{
             					# OPTIONAL
             					interfaceType = $someInterfaceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InterfaceType]) for enum values.
             					# OPTIONAL
             					cidr = $someString
             					# OPTIONAL
             					selected = $someBoolean
             				}
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsComputeSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateExocomputeConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CreateExocomputeConfigs
             
             $query = New-RscMutationAws -CreateExocomputeConfigs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	configs = @(
             		@{
             			# REQUIRED
             			region = $someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             			# OPTIONAL
             			clusterSecurityGroupId = $someString
             			# OPTIONAL
             			vpcId = $someString
             			# OPTIONAL
             			nodeSecurityGroupId = $someString
             			# OPTIONAL
             			subnets = @(
             				@{
             					# REQUIRED
             					subnetId = $someString
             					# REQUIRED
             					availabilityZone = $someString
             				}
             			)
             			# OPTIONAL
             			isRscManaged = $someBoolean
             			# OPTIONAL
             			clusterName = $someString
             		}
             	)
             	# OPTIONAL
             	triggerHealthCheck = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateAwsExocomputeConfigsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateReaderTarget operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CreateReaderTarget
             
             $query = New-RscMutationAws -CreateReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	bucketName = $someString
             	# REQUIRED
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# REQUIRED
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             	# OPTIONAL
             	rsaKey = $someString
             	# OPTIONAL
             	encryptionPassword = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             	# OPTIONAL
             	cloudComputeSettings = @{
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		vpcId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             	}
             	# OPTIONAL
             	awsRetrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             	# OPTIONAL
             	s3Endpoint = $someString
             	# OPTIONAL
             	kmsEndpoint = $someString
             	# OPTIONAL
             	computeProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateTarget operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CreateTarget
             
             $query = New-RscMutationAws -CreateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	bucketName = $someString
             	# REQUIRED
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# REQUIRED
             	region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             	# OPTIONAL
             	rsaKey = $someString
             	# OPTIONAL
             	encryptionPassword = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             	# OPTIONAL
             	cloudComputeSettings = @{
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		vpcId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             	}
             	# OPTIONAL
             	computeProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsRetrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# OPTIONAL
             	s3Endpoint = $someString
             	# OPTIONAL
             	kmsEndpoint = $someString
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteComputeSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: DeleteComputeSetting
             
             $query = New-RscMutationAws -DeleteComputeSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteExocomputeConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: DeleteExocomputeConfigs
             
             $query = New-RscMutationAws -DeleteExocomputeConfigs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	configIdsToBeDeleted = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteAwsExocomputeConfigsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExocomputeClusterConnect operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: ExocomputeClusterConnect
             
             $query = New-RscMutationAws -ExocomputeClusterConnect
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterName = $someString
             	# REQUIRED
             	exocomputeConfigId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsExocomputeClusterConnectReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FinalizeCloudAccountDeletion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: FinalizeCloudAccountDeletion
             
             $query = New-RscMutationAws -FinalizeCloudAccountDeletion
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FinalizeAwsCloudAccountDeletionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FinalizeCloudAccountProtection operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: FinalizeCloudAccountProtection
             
             $query = New-RscMutationAws -FinalizeCloudAccountProtection
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	action = $someCloudAccountAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountAction]) for enum values.
             	# OPTIONAL
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	awsAdminAccount = @{
             		# OPTIONAL
             		id = $someString
             		# OPTIONAL
             		nativeId = $someString
             		# OPTIONAL
             		accountName = $someString
             		# OPTIONAL
             		seamlessFlowEnabled = $someBoolean
             		# OPTIONAL
             		cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	}
             	# REQUIRED
             	awsChildAccounts = @(
             		@{
             			# OPTIONAL
             			id = $someString
             			# OPTIONAL
             			nativeId = $someString
             			# OPTIONAL
             			accountName = $someString
             			# OPTIONAL
             			seamlessFlowEnabled = $someBoolean
             			# OPTIONAL
             			cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	awsRegions = @(
             		$someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	stackName = $someString
             	# OPTIONAL
             	stackSetName = $someString
             	# OPTIONAL
             	externalId = $someString
             	# OPTIONAL
             	featureVersion = @(
             		@{
             			# REQUIRED
             			feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# OPTIONAL
             			version = $someInt
             			# OPTIONAL
             			permissionsGroupVersions = @(
             				@{
             					# REQUIRED
             					permissionsGroup = $somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             					# OPTIONAL
             					version = $someInt
             				}
             			)
             		}
             	)
             	# OPTIONAL
             	featuresWithPermissionsGroups = @(
             		@{
             			# OPTIONAL
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# OPTIONAL
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FinalizeAwsCloudAccountProtectionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchAuthenticationServerBasedCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: PatchAuthenticationServerBasedCloudAccount
             
             $query = New-RscMutationAws -PatchAuthenticationServerBasedCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsCloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# OPTIONAL
             	awsRegions = @{
             		# REQUIRED
             		regions = @(
             			$someAwsAuthServerBasedCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsAuthServerBasedCloudAccountRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	roleName = @{
             		# REQUIRED
             		name = $someString
             	}
             	# OPTIONAL
             	authServerUserClientCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             	# OPTIONAL
             	authServerCaCertId = @{
             		# REQUIRED
             		id = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchIamUserBasedCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: PatchIamUserBasedCloudAccount
             
             $query = New-RscMutationAws -PatchIamUserBasedCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsCloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# OPTIONAL
             	awsRegions = @{
             		# REQUIRED
             		regions = @(
             			$someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	awsUserKeys = @{
             		# REQUIRED
             		accessKey = $someString
             		# REQUIRED
             		secretKey = $someString
             	}
             	# OPTIONAL
             	awsRoleArn = @{
             		# REQUIRED
             		roleArn = $someString
             	}
             	# OPTIONAL
             	externalArtifactMap = @(
             		@{
             			# OPTIONAL
             			externalArtifactKey = $someAwsCloudExternalArtifact # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudExternalArtifact]) for enum values.
             			# OPTIONAL
             			externalArtifactValue = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrepareCloudAccountDeletion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: PrepareCloudAccountDeletion
             
             $query = New-RscMutationAws -PrepareCloudAccountDeletion
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrepareAwsCloudAccountDeletionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrepareFeatureUpdateForCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: PrepareFeatureUpdateForCloudAccount
             
             $query = New-RscMutationAws -PrepareFeatureUpdateForCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# OPTIONAL
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	featuresWithPermissionsGroups = @(
             		@{
             			# OPTIONAL
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# OPTIONAL
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrepareFeatureUpdateForAwsCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterFeatureArtifacts operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: RegisterFeatureArtifacts
             
             $query = New-RscMutationAws -RegisterFeatureArtifacts
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsArtifacts = @(
             		@{
             			# REQUIRED
             			awsNativeId = $someString
             			# REQUIRED
             			externalArtifacts = @(
             				@{
             					# REQUIRED
             					externalArtifactValue = $someString
             					# OPTIONAL
             					externalArtifactKey = $someAwsCloudExternalArtifact # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudExternalArtifact]) for enum values.
             				}
             			)
             			# REQUIRED
             			features = @(
             				$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			)
             		}
             	)
             	# OPTIONAL
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RegisterAwsFeatureArtifactsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExocomputeDisableJob operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: StartExocomputeDisableJob
             
             $query = New-RscMutationAws -StartExocomputeDisableJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpdateAccount
             
             $query = New-RscMutationAws -UpdateAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	secretKey = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAutomaticTargetMapping operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpdateAutomaticTargetMapping
             
             $query = New-RscMutationAws -UpdateAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpdateCloudAccount
             
             $query = New-RscMutationAws -UpdateCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# OPTIONAL
             	awsAccountName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudAccountFeature operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpdateCloudAccountFeature
             
             $query = New-RscMutationAws -UpdateCloudAccountFeature
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	action = $someCloudAccountAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountAction]) for enum values.
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# OPTIONAL
             	awsRegions = @(
             		$someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	roleArn = $someString
             	# OPTIONAL
             	stackArn = $someString
             	# OPTIONAL
             	awsAccountName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateAwsCloudAccountFeatureReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudNativeStorageSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpdateCloudNativeStorageSetting
             
             $query = New-RscMutationAws -UpdateCloudNativeStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# OPTIONAL
             	kmsMasterKeyId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCloudNativeAwsStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateComputeSetting operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpdateComputeSetting
             
             $query = New-RscMutationAws -UpdateComputeSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	subnetId = $someString
             	# OPTIONAL
             	vpcId = $someString
             	# OPTIONAL
             	securityGroupId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsComputeSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateExocomputeConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpdateExocomputeConfigs
             
             $query = New-RscMutationAws -UpdateExocomputeConfigs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	configs = @(
             		@{
             			# REQUIRED
             			region = $someAwsCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudAccountRegion]) for enum values.
             			# OPTIONAL
             			clusterSecurityGroupId = $someString
             			# OPTIONAL
             			vpcId = $someString
             			# OPTIONAL
             			nodeSecurityGroupId = $someString
             			# OPTIONAL
             			subnets = @(
             				@{
             					# REQUIRED
             					subnetId = $someString
             					# REQUIRED
             					availabilityZone = $someString
             				}
             			)
             			# OPTIONAL
             			isRscManaged = $someBoolean
             			# OPTIONAL
             			clusterName = $someString
             		}
             	)
             	# OPTIONAL
             	triggerHealthCheck = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateAwsExocomputeConfigsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpdateTarget
             
             $query = New-RscMutationAws -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	storageClass = $someAwsStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsStorageClass]) for enum values.
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsComputeSettingsId = $someString
             	# OPTIONAL
             	cloudComputeSettings = @{
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		vpcId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             	}
             	# OPTIONAL
             	computeProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	awsRetrievalTier = $someAwsRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRetrievalTier]) for enum values.
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# OPTIONAL
             	s3Endpoint = $someString
             	# OPTIONAL
             	kmsEndpoint = $someString
             	# OPTIONAL
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeCloudAccountFeaturesWithoutCft operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpgradeCloudAccountFeaturesWithoutCft
             
             $query = New-RscMutationAws -UpgradeCloudAccountFeaturesWithoutCft
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsCloudAccountId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeIamUserBasedCloudAccountPermissions operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: UpgradeIamUserBasedCloudAccountPermissions
             
             $query = New-RscMutationAws -UpgradeIamUserBasedCloudAccountPermissions
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsCloudAccountId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateAndCreateCloudAccount operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: ValidateAndCreateCloudAccount
             
             $query = New-RscMutationAws -ValidateAndCreateCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	action = $someCloudAccountAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountAction]) for enum values.
             	# OPTIONAL
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	awsAdminAccount = @{
             		# OPTIONAL
             		id = $someString
             		# OPTIONAL
             		nativeId = $someString
             		# OPTIONAL
             		accountName = $someString
             		# OPTIONAL
             		seamlessFlowEnabled = $someBoolean
             		# OPTIONAL
             		cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	}
             	# REQUIRED
             	awsChildAccounts = @(
             		@{
             			# OPTIONAL
             			id = $someString
             			# OPTIONAL
             			nativeId = $someString
             			# OPTIONAL
             			accountName = $someString
             			# OPTIONAL
             			seamlessFlowEnabled = $someBoolean
             			# OPTIONAL
             			cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	awsRoleCustomization = @{
             		# OPTIONAL
             		crossAccountRoleName = $someString
             		# OPTIONAL
             		crossAccountRolePath = $someString
             		# OPTIONAL
             		masterRoleName = $someString
             		# OPTIONAL
             		masterRolePath = $someString
             		# OPTIONAL
             		workerRoleName = $someString
             		# OPTIONAL
             		workerRolePath = $someString
             		# OPTIONAL
             		instanceProfileName = $someString
             		# OPTIONAL
             		instanceProfilePath = $someString
             		# OPTIONAL
             		ec2RecoveryRolePath = $someString
             	}
             	# OPTIONAL
             	featuresWithPermissionsGroups = @(
             		@{
             			# OPTIONAL
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# OPTIONAL
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAndCreateAwsCloudAccountReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAwsNative">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'AWS Native' API domain:
             ExcludeEbsVolumesFromSnapshot, StartAccountDisableJob, StartCreateEbsVolumeSnapshotsJob, StartEc2InstanceSnapshotsJob, StartExportEbsVolumeSnapshotJob, StartRdsInstanceSnapshotsJob, StartRefreshAccountsJob, or StartRestoreEc2InstanceSnapshotJob.
             </summary>
             <description>
             New-RscMutationAwsNative creates a new
             mutation object for operations
             in the 'AWS Native' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'AWS Native' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ExcludeEbsVolumesFromSnapshot, StartAccountDisableJob, StartCreateEbsVolumeSnapshotsJob, StartEc2InstanceSnapshotsJob, StartExportEbsVolumeSnapshotJob, StartRdsInstanceSnapshotsJob, StartRefreshAccountsJob, or StartRestoreEc2InstanceSnapshotJob.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAwsNative -ExcludeEbsVolumesFromSnapshot).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAwsNative -ExcludeEbsVolumesFromSnapshot).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ExcludeEbsVolumesFromSnapshot operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: ExcludeEbsVolumesFromSnapshot
             
             $query = New-RscMutationAwsNative -ExcludeEbsVolumesFromSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsNativeEc2InstanceId = $someString
             	# REQUIRED
             	volumeIdExclusions = @(
             		@{
             			# REQUIRED
             			volumeId = $someString
             			# REQUIRED
             			isExcluded = $someBoolean
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartAccountDisableJob operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: StartAccountDisableJob
             
             $query = New-RscMutationAwsNative -StartAccountDisableJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsAccountRubrikId = $someString
             	# REQUIRED
             	shouldDeleteNativeSnapshots = $someBoolean
             	# REQUIRED
             	awsNativeProtectionFeature = $someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCreateEbsVolumeSnapshotsJob operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: StartCreateEbsVolumeSnapshotsJob
             
             $query = New-RscMutationAwsNative -StartCreateEbsVolumeSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ebsVolumeIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartEc2InstanceSnapshotsJob operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: StartEc2InstanceSnapshotsJob
             
             $query = New-RscMutationAwsNative -StartEc2InstanceSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ec2InstanceIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportEbsVolumeSnapshotJob operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: StartExportEbsVolumeSnapshotJob
             
             $query = New-RscMutationAwsNative -StartExportEbsVolumeSnapshotJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	destinationAwsAccountRubrikId = $someString
             	# REQUIRED
             	destinationRegionNativeId = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             	# REQUIRED
             	volumeName = $someString
             	# REQUIRED
             	volumeSize = $someInt
             	# REQUIRED
             	volumeType = $someAwsNativeEbsVolumeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEbsVolumeType]) for enum values.
             	# REQUIRED
             	availabilityZone = $someString
             	# REQUIRED
             	iops = $someInt
             	# REQUIRED
             	shouldCopyTags = $someBoolean
             	# REQUIRED
             	shouldReplaceAttached = $someBoolean
             	# OPTIONAL
             	kmsKeyId = $someString
             	# OPTIONAL
             	snapshotType = $someSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRdsInstanceSnapshotsJob operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: StartRdsInstanceSnapshotsJob
             
             $query = New-RscMutationAwsNative -StartRdsInstanceSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	rdsInstanceIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRefreshAccountsJob operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: StartRefreshAccountsJob
             
             $query = New-RscMutationAwsNative -StartRefreshAccountsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsAccountRubrikIds = @(
             		$someString
             	)
             	# REQUIRED
             	awsNativeProtectionFeatures = @(
             		$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRestoreEc2InstanceSnapshotJob operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: StartRestoreEc2InstanceSnapshotJob
             
             $query = New-RscMutationAwsNative -StartRestoreEc2InstanceSnapshotJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	shouldPowerOn = $someBoolean
             	# REQUIRED
             	shouldRestoreTags = $someBoolean
             	# OPTIONAL
             	snapshotTypeToUseIfSourceExpired = $someSnapshotTypeToUseIfSourceExpired # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotTypeToUseIfSourceExpired]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAzure">
             <summary>
             Create a new RscQuery object for any of the 42
             operations in the 'Azure' API domain:
             AddCloudAccount, AddCloudAccountExocomputeConfigurations, AddCloudAccountWithoutOauth, BackupAdDirectory, CompleteAdAppSetup, CompleteAdAppUpdate, CompleteCloudAccountOauth, CreateAccount, CreateAutomaticTargetMapping, CreateCloudNativeRcvStorageSetting, CreateCloudNativeStorageSetting, CreateCluster, CreateReaderTarget, CreateSaasAppAad, CreateTarget, DeleteAdDirectory, DeleteCloudAccount, DeleteCloudAccountExocomputeConfigurations, DeleteCloudAccountWithoutOauth, MapCloudAccountExocomputeSubscription, MapCloudAccountToPersistentStorageLocation, OauthConsentComplete, OauthConsentKickoff, RestoreAdObjectsWithPasswords, SetCloudAccountCustomerAppCredentials, StartAdAppSetup, StartAdAppUpdate, StartCloudAccountOauth, StartDisableCloudAccountJob, StartExportSqlDatabaseDbJob, StartExportSqlManagedInstanceDbJob, UnmapCloudAccountExocomputeSubscription, UnmapPersistentStorageSubscription, UpdateAccount, UpdateAutomaticTargetMapping, UpdateCloudAccount, UpdateCloudNativeRcvStorageSetting, UpdateCloudNativeStorageSetting, UpdateCustomerAppPermissionForSql, UpdateTarget, UpgradeCloudAccount, or UpgradeCloudAccountPermissionsWithoutOauth.
             </summary>
             <description>
             New-RscMutationAzure creates a new
             mutation object for operations
             in the 'Azure' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 42 operations
             in the 'Azure' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddCloudAccount, AddCloudAccountExocomputeConfigurations, AddCloudAccountWithoutOauth, BackupAdDirectory, CompleteAdAppSetup, CompleteAdAppUpdate, CompleteCloudAccountOauth, CreateAccount, CreateAutomaticTargetMapping, CreateCloudNativeRcvStorageSetting, CreateCloudNativeStorageSetting, CreateCluster, CreateReaderTarget, CreateSaasAppAad, CreateTarget, DeleteAdDirectory, DeleteCloudAccount, DeleteCloudAccountExocomputeConfigurations, DeleteCloudAccountWithoutOauth, MapCloudAccountExocomputeSubscription, MapCloudAccountToPersistentStorageLocation, OauthConsentComplete, OauthConsentKickoff, RestoreAdObjectsWithPasswords, SetCloudAccountCustomerAppCredentials, StartAdAppSetup, StartAdAppUpdate, StartCloudAccountOauth, StartDisableCloudAccountJob, StartExportSqlDatabaseDbJob, StartExportSqlManagedInstanceDbJob, UnmapCloudAccountExocomputeSubscription, UnmapPersistentStorageSubscription, UpdateAccount, UpdateAutomaticTargetMapping, UpdateCloudAccount, UpdateCloudNativeRcvStorageSetting, UpdateCloudNativeStorageSetting, UpdateCustomerAppPermissionForSql, UpdateTarget, UpgradeCloudAccount, or UpgradeCloudAccountPermissionsWithoutOauth.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzure -AddCloudAccount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzure -AddCloudAccount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddCloudAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AddCloudAccount
             
             $query = New-RscMutationAzure -AddCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	tenantDomainName = $someString
             	# REQUIRED
             	subscriptions = @(
             		@{
             			# REQUIRED
             			features = @(
             				@{
             					# OPTIONAL
             					resourceGroup = @{
             						# REQUIRED
             						name = $someString
             						# OPTIONAL
             						tags = @{
             							# REQUIRED
             							tagList = @(
             								@{
             									# REQUIRED
             									key = $someString
             									# REQUIRED
             									value = $someString
             								}
             							)
             						}
             						# REQUIRED
             						region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             					}
             					# REQUIRED
             					featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             					# OPTIONAL
             					permissionsGroups = @(
             						$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             					)
             				}
             			)
             			# REQUIRED
             			subscription = @{
             				# REQUIRED
             				nativeId = $someString
             				# REQUIRED
             				name = $someString
             			}
             		}
             	)
             	# REQUIRED
             	regions = @(
             		$someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAzureCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddCloudAccountExocomputeConfigurations operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AddCloudAccountExocomputeConfigurations
             
             $query = New-RscMutationAzure -AddCloudAccountExocomputeConfigurations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	azureExocomputeRegionConfigs = @(
             		@{
             			# REQUIRED
             			region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             			# REQUIRED
             			subnetNativeId = $someString
             			# REQUIRED
             			isRscManaged = $someBoolean
             			# OPTIONAL
             			podSubnetNativeId = $someString
             			# OPTIONAL
             			podOverlayNetworkCidr = $someString
             		}
             	)
             	# OPTIONAL
             	triggerHealthCheck = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAzureCloudAccountExocomputeConfigurationsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddCloudAccountWithoutOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AddCloudAccountWithoutOauth
             
             $query = New-RscMutationAzure -AddCloudAccountWithoutOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantDomainName = $someString
             	# REQUIRED
             	subscriptions = @(
             		@{
             			# REQUIRED
             			features = @(
             				@{
             					# REQUIRED
             					policyVersion = $someInt
             					# OPTIONAL
             					resourceGroup = @{
             						# REQUIRED
             						name = $someString
             						# OPTIONAL
             						tags = @{
             							# REQUIRED
             							tagList = @(
             								@{
             									# REQUIRED
             									key = $someString
             									# REQUIRED
             									value = $someString
             								}
             							)
             						}
             						# REQUIRED
             						region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             					}
             					# OPTIONAL
             					specificFeatureInput = @{
             						# REQUIRED
             						userAssignedManagedIdentityInput = @{
             							# REQUIRED
             							name = $someString
             							# REQUIRED
             							resourceGroupName = $someString
             							# REQUIRED
             							principalId = $someString
             							# REQUIRED
             							region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             						}
             					}
             					# REQUIRED
             					featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             					# OPTIONAL
             					permissionsGroups = @(
             						@{
             							# REQUIRED
             							permissionsGroup = $somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             							# OPTIONAL
             							version = $someInt
             						}
             					)
             				}
             			)
             			# REQUIRED
             			subscription = @{
             				# REQUIRED
             				nativeId = $someString
             				# REQUIRED
             				name = $someString
             			}
             		}
             	)
             	# REQUIRED
             	regions = @(
             		$someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAzureCloudAccountWithoutOauthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupAdDirectory operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: BackupAdDirectory
             
             $query = New-RscMutationAzure -BackupAdDirectory
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFids = @(
             		$someString
             	)
             	# OPTIONAL
             	snapshotRetentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CreateOnDemandJobReply&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CompleteAdAppSetup operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CompleteAdAppSetup
             
             $query = New-RscMutationAzure -CompleteAdAppSetup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	domainName = $someString
             	# REQUIRED
             	stateToken = $someString
             	# OPTIONAL
             	kmsSpec = @{
             		# OPTIONAL
             		cloudType = $someO365AzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AzureCloudType]) for enum values.
             		# OPTIONAL
             		tenantId = $someString
             		# OPTIONAL
             		kmsId = $someString
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecret = $someString
             		# OPTIONAL
             		keyName = $someString
             		# OPTIONAL
             		kekNameColossus = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CompleteAzureAdAppSetupReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CompleteAdAppUpdate operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CompleteAdAppUpdate
             
             $query = New-RscMutationAzure -CompleteAdAppUpdate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             	# REQUIRED
             	stateToken = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CompleteCloudAccountOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CompleteCloudAccountOauth
             
             $query = New-RscMutationAzure -CompleteCloudAccountOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	tenantDomainName = $someString
             	# REQUIRED
             	authorizationCode = $someString
             	# REQUIRED
             	redirectUrl = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	appId = $someString
             	# OPTIONAL
             	appSecretKey = $someString
             	# REQUIRED
             	shouldSkipPermissionChecks = $someBoolean
             	# OPTIONAL
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             	# OPTIONAL
             	resource = $someAzureOauthResource # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureOauthResource]) for enum values.
             	# OPTIONAL
             	performBasicOauth = $someBoolean
             	# OPTIONAL
             	shouldKeepRefreshToken = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CompleteAzureCloudAccountOauthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateAccount
             
             $query = New-RscMutationAzure -CreateAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# REQUIRED
             	subscriptionId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAutomaticTargetMapping operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateAutomaticTargetMapping
             
             $query = New-RscMutationAzure -CreateAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	storageAccountName = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	containerNamePrefix = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	instanceType = $someInstanceTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InstanceTypeEnum]) for enum values.
             	# REQUIRED
             	rsaKey = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCloudNativeRcvStorageSetting operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateCloudNativeRcvStorageSetting
             
             $query = New-RscMutationAzure -CreateCloudNativeRcvStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             	# REQUIRED
             	cloudNativeLocTemplateType = $someCloudNativeLocTemplateType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLocTemplateType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCloudNativeRcvAzureStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCloudNativeStorageSetting operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateCloudNativeStorageSetting
             
             $query = New-RscMutationAzure -CreateCloudNativeStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	storageAccountName = $someString
             	# REQUIRED
             	containerName = $someString
             	# OPTIONAL
             	storageAccountTags = @{
             		# REQUIRED
             		tagList = @(
             			@{
             				# REQUIRED
             				key = $someString
             				# REQUIRED
             				value = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	storageAccountRegion = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             	# REQUIRED
             	storageTier = $someAzureStorageTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureStorageTier]) for enum values.
             	# REQUIRED
             	redundancy = $someAzureRedundancy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRedundancy]) for enum values.
             	# REQUIRED
             	subscriptionNativeId = $someString
             	# REQUIRED
             	cloudNativeLocTemplateType = $someCloudNativeLocTemplateType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLocTemplateType]) for enum values.
             	# OPTIONAL
             	cmkInfo = @(
             		@{
             			# OPTIONAL
             			keyVaultName = $someString
             			# OPTIONAL
             			keyName = $someString
             			# OPTIONAL
             			region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		}
             	)
             	# OPTIONAL
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCloudNativeAzureStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCluster operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateCluster
             
             $query = New-RscMutationAzure -CreateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	isEsType = $someBoolean
             	# OPTIONAL
             	keepClusterOnFailure = $someBoolean
             	# OPTIONAL
             	clusterConfig = @{
             		# OPTIONAL
             		userEmail = $someString
             		# OPTIONAL
             		adminPassword = $someString
             		# OPTIONAL
             		clusterName = $someString
             		# OPTIONAL
             		numNodes = $someInt
             		# OPTIONAL
             		dnsSearchDomains = @(
             			$someString
             		)
             		# OPTIONAL
             		dnsNameServers = @(
             			$someString
             		)
             		# OPTIONAL
             		ntpServers = @(
             			$someString
             		)
             		# OPTIONAL
             		azureEsConfig = @{
             			# OPTIONAL
             			storageAccount = $someString
             			# OPTIONAL
             			resourceGroup = $someString
             			# OPTIONAL
             			storageSecret = $someString
             			# OPTIONAL
             			containerName = $someString
             			# OPTIONAL
             			shouldCreateContainer = $someBoolean
             			# OPTIONAL
             			enableImmutability = $someBoolean
             			# OPTIONAL
             			managedIdentity = @{
             				# OPTIONAL
             				name = $someString
             				# OPTIONAL
             				clientId = $someString
             				# OPTIONAL
             				resourceGroup = $someString
             			}
             		}
             		# OPTIONAL
             		awsEsConfig = @{
             			# OPTIONAL
             			bucketName = $someString
             			# OPTIONAL
             			shouldCreateBucket = $someBoolean
             			# OPTIONAL
             			enableObjectLock = $someBoolean
             			# OPTIONAL
             			enableImmutability = $someBoolean
             		}
             	}
             	# OPTIONAL
             	vmConfig = @{
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		cdmVersion = $someString
             		# OPTIONAL
             		location = $someString
             		# OPTIONAL
             		nodeSizeGb = $someInt
             		# OPTIONAL
             		networkResourceGroup = $someString
             		# OPTIONAL
             		vnetResourceGroup = $someString
             		# OPTIONAL
             		networkSecurityGroup = $someString
             		# OPTIONAL
             		networkSecurityResourceGroup = $someString
             		# OPTIONAL
             		vnet = $someString
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		tags = $someString
             		# OPTIONAL
             		vmImage = $someString
             		# OPTIONAL
             		cdmProduct = $someString
             		# OPTIONAL
             		vmType = $someVmType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VmType]) for enum values.
             		# OPTIONAL
             		instanceType = $someAzureInstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureInstanceType]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateReaderTarget operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateReaderTarget
             
             $query = New-RscMutationAzure -CreateReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	storageAccountName = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	containerName = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	instanceType = $someInstanceTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InstanceTypeEnum]) for enum values.
             	# REQUIRED
             	rsaKey = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             	# OPTIONAL
             	retrievalTier = $someAzureRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRetrievalTier]) for enum values.
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateSaasAppAad operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateSaasAppAad
             
             $query = New-RscMutationAzure -CreateSaasAppAad
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateAzureSaasAppAadReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateTarget operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CreateTarget
             
             $query = New-RscMutationAzure -CreateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	storageAccountName = $someString
             	# REQUIRED
             	accessKey = $someString
             	# REQUIRED
             	containerName = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	instanceType = $someInstanceTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InstanceTypeEnum]) for enum values.
             	# REQUIRED
             	rsaKey = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# OPTIONAL
             	retrievalTier = $someAzureRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRetrievalTier]) for enum values.
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAdDirectory operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteAdDirectory
             
             $query = New-RscMutationAzure -DeleteAdDirectory
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCloudAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteCloudAccount
             
             $query = New-RscMutationAzure -DeleteCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# REQUIRED
             	azureSubscriptionRubrikIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteAzureCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCloudAccountExocomputeConfigurations operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteCloudAccountExocomputeConfigurations
             
             $query = New-RscMutationAzure -DeleteCloudAccountExocomputeConfigurations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteAzureCloudAccountExocomputeConfigurationsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCloudAccountWithoutOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DeleteCloudAccountWithoutOauth
             
             $query = New-RscMutationAzure -DeleteCloudAccountWithoutOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# REQUIRED
             	azureSubscriptionRubrikIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteAzureCloudAccountWithoutOauthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MapCloudAccountExocomputeSubscription operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: MapCloudAccountExocomputeSubscription
             
             $query = New-RscMutationAzure -MapCloudAccountExocomputeSubscription
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             	# REQUIRED
             	exocomputeCloudAccountId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MapAzureCloudAccountExocomputeSubscriptionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MapCloudAccountToPersistentStorageLocation operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: MapCloudAccountToPersistentStorageLocation
             
             $query = New-RscMutationAzure -MapCloudAccountToPersistentStorageLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             	# REQUIRED
             	persistentStorageId = $someString
             	# REQUIRED
             	azureNativeProtectionFeature = $someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MapAzureCloudAccountToPersistentStorageLocationReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthConsentComplete operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: OauthConsentComplete
             
             $query = New-RscMutationAzure -OauthConsentComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantId = $someString
             	# REQUIRED
             	code = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	redirectUrl = $someString
             	# OPTIONAL
             	azureAppId = $someString
             	# OPTIONAL
             	azureAppSecret = $someString
             	# REQUIRED
             	azureCloudType = $someO365AzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthConsentKickoff operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: OauthConsentKickoff
             
             $query = New-RscMutationAzure -OauthConsentKickoff
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureOauthConsentKickoffReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreAdObjectsWithPasswords operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: RestoreAdObjectsWithPasswords
             
             $query = New-RscMutationAzure -RestoreAdObjectsWithPasswords
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             	# REQUIRED
             	snapshotFid = $someString
             	# REQUIRED
             	passwordByUserIdMap = @(
             		@{
             			# REQUIRED
             			userId = $someString
             			# REQUIRED
             			password = $someString
             		}
             	)
             	# REQUIRED
             	objectTypeToIdMap = @(
             		@{
             			# REQUIRED
             			objectId = $someString
             			# REQUIRED
             			azureAdObjectType = $someAzureAdObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectType]) for enum values.
             		}
             	)
             	# REQUIRED
             	forceChangePasswordWithMfa = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RestoreAzureAdObjectsWithPasswordsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetCloudAccountCustomerAppCredentials operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SetCloudAccountCustomerAppCredentials
             
             $query = New-RscMutationAzure -SetCloudAccountCustomerAppCredentials
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	appId = $someString
             	# REQUIRED
             	appSecretKey = $someString
             	# OPTIONAL
             	appTenantId = $someString
             	# OPTIONAL
             	appName = $someString
             	# OPTIONAL
             	tenantDomainName = $someString
             	# REQUIRED
             	shouldReplace = $someBoolean
             	# REQUIRED
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartAdAppSetup operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartAdAppSetup
             
             $query = New-RscMutationAzure -StartAdAppSetup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	domainName = $someString
             	# REQUIRED
             	region = $someAzureAdRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdRegion]) for enum values.
             	# OPTIONAL
             	azureAdApp = @{
             		# OPTIONAL
             		clientId = $someString
             		# OPTIONAL
             		clientSecret = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartAzureAdAppSetupReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartAdAppUpdate operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartAdAppUpdate
             
             $query = New-RscMutationAzure -StartAdAppUpdate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             	# OPTIONAL
             	azureAdApp = @{
             		# OPTIONAL
             		clientId = $someString
             		# OPTIONAL
             		clientSecret = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartAzureAdAppUpdateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCloudAccountOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartCloudAccountOauth
             
             $query = New-RscMutationAzure -StartCloudAccountOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	tenantDomainName = $someString
             	# OPTIONAL
             	azureCloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartAzureCloudAccountOauthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartDisableCloudAccountJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartDisableCloudAccountJob
             
             $query = New-RscMutationAzure -StartDisableCloudAccountJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportSqlDatabaseDbJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartExportSqlDatabaseDbJob
             
             $query = New-RscMutationAzure -StartExportSqlDatabaseDbJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sourceDatabaseRubrikId = $someString
             	# REQUIRED
             	destinationDatabaseName = $someString
             	# OPTIONAL
             	destinationServerRubrikId = $someString
             	# OPTIONAL
             	elasticPoolName = $someString
             	# REQUIRED
             	shouldExportTags = $someBoolean
             	# OPTIONAL
             	azureSqlDatabaseDbPitExportInput = @{
             		# REQUIRED
             		restorePointInTime = $someDateTime
             		# OPTIONAL
             		dbBackupRedundancy = $someAzureSqlBackupStorageRedundancyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlBackupStorageRedundancyType]) for enum values.
             	}
             	# OPTIONAL
             	azureSqlDatabaseDbLtrExportInput = @{
             		# REQUIRED
             		sourceSnapshotRubrikId = $someString
             		# REQUIRED
             		destinationResourceGroupName = $someString
             		# REQUIRED
             		destinationServerName = $someString
             		# REQUIRED
             		destinationRegionName = $someString
             		# OPTIONAL
             		dbBackupRedundancy = $someAzureSqlBackupStorageRedundancyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlBackupStorageRedundancyType]) for enum values.
             	}
             	# OPTIONAL
             	persistentBackupExportInput = @{
             		# REQUIRED
             		sourceSnapshotRubrikId = $someString
             		# OPTIONAL
             		destinationServerCredentials = @{
             			# REQUIRED
             			login = $someString
             			# REQUIRED
             			password = $someString
             		}
             		# OPTIONAL
             		authMechanism = $someSqlAuthenticationMechanism # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SqlAuthenticationMechanism]) for enum values.
             		# OPTIONAL
             		sessionId = $someString
             		# OPTIONAL
             		dbBackupRedundancy = $someAzureSqlBackupStorageRedundancyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlBackupStorageRedundancyType]) for enum values.
             	}
             	# OPTIONAL
             	serviceTier = $someString
             	# OPTIONAL
             	serviceObjectiveName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportSqlManagedInstanceDbJob operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StartExportSqlManagedInstanceDbJob
             
             $query = New-RscMutationAzure -StartExportSqlManagedInstanceDbJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sourceManagedInstanceDatabaseRubrikId = $someString
             	# OPTIONAL
             	destinationManagedInstanceRubrikId = $someString
             	# REQUIRED
             	destinationDatabaseName = $someString
             	# REQUIRED
             	destinationManagedInstanceName = $someString
             	# REQUIRED
             	destinationResourceGroupName = $someString
             	# OPTIONAL
             	azureSqlManagedInstanceDbPitExportInput = @{
             		# REQUIRED
             		restorePointInTime = $someDateTime
             	}
             	# OPTIONAL
             	azureSqlManagedInstanceDbLtrExportInput = @{
             		# REQUIRED
             		sourceSnapshotRubrikId = $someString
             		# REQUIRED
             		destinationRegionName = $someString
             	}
             	# OPTIONAL
             	persistentBackupExportInput = @{
             		# REQUIRED
             		sourceSnapshotRubrikId = $someString
             		# OPTIONAL
             		destinationServerCredentials = @{
             			# REQUIRED
             			login = $someString
             			# REQUIRED
             			password = $someString
             		}
             		# OPTIONAL
             		authMechanism = $someSqlAuthenticationMechanism # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SqlAuthenticationMechanism]) for enum values.
             		# OPTIONAL
             		sessionId = $someString
             		# OPTIONAL
             		dbBackupRedundancy = $someAzureSqlBackupStorageRedundancyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlBackupStorageRedundancyType]) for enum values.
             	}
             	# OPTIONAL
             	serviceTier = $someString
             	# OPTIONAL
             	serviceObjectiveName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmapCloudAccountExocomputeSubscription operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UnmapCloudAccountExocomputeSubscription
             
             $query = New-RscMutationAzure -UnmapCloudAccountExocomputeSubscription
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UnmapAzureCloudAccountExocomputeSubscriptionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmapPersistentStorageSubscription operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UnmapPersistentStorageSubscription
             
             $query = New-RscMutationAzure -UnmapPersistentStorageSubscription
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	applicationCloudAccountIds = @(
             		$someString
             	)
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# REQUIRED
             	unmappingValidationType = $someUnmappingValidationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmappingValidationType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateAccount
             
             $query = New-RscMutationAzure -UpdateAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	subscriptionId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAutomaticTargetMapping operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateAutomaticTargetMapping
             
             $query = New-RscMutationAzure -UpdateAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	storageAccountName = $someString
             	# OPTIONAL
             	accessKey = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateCloudAccount
             
             $query = New-RscMutationAzure -UpdateCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	subscriptions = @(
             		@{
             			# OPTIONAL
             			id = $someString
             			# OPTIONAL
             			name = $someString
             		}
             	)
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	regionsToAdd = @(
             		$someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             	)
             	# OPTIONAL
             	regionsToRemove = @(
             		$someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateAzureCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudNativeRcvStorageSetting operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateCloudNativeRcvStorageSetting
             
             $query = New-RscMutationAzure -UpdateCloudNativeRcvStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	name = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCloudNativeRcvAzureStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCloudNativeStorageSetting operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateCloudNativeStorageSetting
             
             $query = New-RscMutationAzure -UpdateCloudNativeStorageSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	storageAccountTags = @{
             		# REQUIRED
             		tagList = @(
             			@{
             				# REQUIRED
             				key = $someString
             				# REQUIRED
             				value = $someString
             			}
             		)
             	}
             	# REQUIRED
             	storageTier = $someAzureStorageTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureStorageTier]) for enum values.
             	# OPTIONAL
             	cmkInfo = @(
             		@{
             			# OPTIONAL
             			keyVaultName = $someString
             			# OPTIONAL
             			keyName = $someString
             			# OPTIONAL
             			region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCloudNativeAzureStorageSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCustomerAppPermissionForSql operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateCustomerAppPermissionForSql
             
             $query = New-RscMutationAzure -UpdateCustomerAppPermissionForSql
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpdateTarget
             
             $query = New-RscMutationAzure -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	storageAccountName = $someString
             	# OPTIONAL
             	accessKey = $someString
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	computeSettings = @{
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecretKey = $someString
             		# OPTIONAL
             		region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             		# OPTIONAL
             		generalPurposeStorageName = $someString
             		# OPTIONAL
             		generalPurposeStorageContainer = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		virtualNetworkId = $someString
             		# OPTIONAL
             		subnetId = $someString
             		# OPTIONAL
             		securityGroupId = $someString
             		# OPTIONAL
             		computeProxySettings = @{
             			# OPTIONAL
             			proxyServer = $someString
             			# OPTIONAL
             			portNumber = $someInt
             			# OPTIONAL
             			username = $someString
             			# OPTIONAL
             			password = $someString
             			# OPTIONAL
             			protocol = $someString
             		}
             		# OPTIONAL
             		cloudAccountId = $someString
             	}
             	# OPTIONAL
             	proxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	immutabilitySettings = @{
             		# OPTIONAL
             		lockDurationDays = $someInt
             	}
             	# OPTIONAL
             	retrievalTier = $someAzureRetrievalTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRetrievalTier]) for enum values.
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeCloudAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpgradeCloudAccount
             
             $query = New-RscMutationAzure -UpgradeCloudAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# OPTIONAL
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	featuresToUpgrade = @(
             		@{
             			# REQUIRED
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# REQUIRED
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             		}
             	)
             	# REQUIRED
             	azureSubscriptionRubrikIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpgradeAzureCloudAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeCloudAccountPermissionsWithoutOauth operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: UpgradeCloudAccountPermissionsWithoutOauth
             
             $query = New-RscMutationAzure -UpgradeCloudAccountPermissionsWithoutOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# OPTIONAL
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# OPTIONAL
             	featureToUpgrade = @(
             		@{
             			# REQUIRED
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# REQUIRED
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpgradeAzureCloudAccountPermissionsWithoutOauthReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAzureNative">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Azure Native' API domain:
             ExcludeManagedDisksFromSnapshot, StartCreateManagedDiskSnapshotsJob, StartCreateVirtualMachineSnapshotsJob, StartDisableSubscriptionProtectionJob, StartExportManagedDiskJob, StartExportVirtualMachineJob, StartRefreshSubscriptionsJob, or StartRestoreVirtualMachineJob.
             </summary>
             <description>
             New-RscMutationAzureNative creates a new
             mutation object for operations
             in the 'Azure Native' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Azure Native' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ExcludeManagedDisksFromSnapshot, StartCreateManagedDiskSnapshotsJob, StartCreateVirtualMachineSnapshotsJob, StartDisableSubscriptionProtectionJob, StartExportManagedDiskJob, StartExportVirtualMachineJob, StartRefreshSubscriptionsJob, or StartRestoreVirtualMachineJob.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzureNative -ExcludeManagedDisksFromSnapshot).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzureNative -ExcludeManagedDisksFromSnapshot).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ExcludeManagedDisksFromSnapshot operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ExcludeManagedDisksFromSnapshot
             
             $query = New-RscMutationAzureNative -ExcludeManagedDisksFromSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	virtualMachineRubrikId = $someString
             	# REQUIRED
             	managedDiskExclusions = @(
             		@{
             			# REQUIRED
             			managedDiskRubrikId = $someString
             			# REQUIRED
             			isExcludedFromSnapshot = $someBoolean
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCreateManagedDiskSnapshotsJob operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: StartCreateManagedDiskSnapshotsJob
             
             $query = New-RscMutationAzureNative -StartCreateManagedDiskSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	managedDiskRubrikIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCreateVirtualMachineSnapshotsJob operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: StartCreateVirtualMachineSnapshotsJob
             
             $query = New-RscMutationAzureNative -StartCreateVirtualMachineSnapshotsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	virtualMachineRubrikIds = @(
             		$someString
             	)
             	# OPTIONAL
             	retentionSlaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartDisableSubscriptionProtectionJob operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: StartDisableSubscriptionProtectionJob
             
             $query = New-RscMutationAzureNative -StartDisableSubscriptionProtectionJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	azureSubscriptionRubrikId = $someString
             	# REQUIRED
             	shouldDeleteNativeSnapshots = $someBoolean
             	# REQUIRED
             	azureNativeProtectionFeature = $someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportManagedDiskJob operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: StartExportManagedDiskJob
             
             $query = New-RscMutationAzureNative -StartExportManagedDiskJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	diskName = $someString
             	# OPTIONAL
             	diskEncryptionSetNativeId = $someString
             	# REQUIRED
             	diskStorageTier = $someAzureNativeManagedDiskType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeManagedDiskType]) for enum values.
             	# REQUIRED
             	diskSize = $someInt
             	# REQUIRED
             	resourceGroup = $someString
             	# REQUIRED
             	destinationRegion = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             	# OPTIONAL
             	destinationAvailabilityZone = $someString
             	# OPTIONAL
             	destinationSubscriptionRubrikId = $someString
             	# REQUIRED
             	shouldExportTags = $someBoolean
             	# REQUIRED
             	shouldReplaceAttachedManagedDisk = $someBoolean
             	# OPTIONAL
             	shouldUseReplica = $someBoolean
             	# OPTIONAL
             	snapshotType = $someAzureSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSnapshotType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportVirtualMachineJob operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: StartExportVirtualMachineJob
             
             $query = New-RscMutationAzureNative -StartExportVirtualMachineJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	virtualMachineName = $someString
             	# OPTIONAL
             	diskEncryptionSetNativeId = $someString
             	# REQUIRED
             	resourceGroupName = $someString
             	# REQUIRED
             	destinationRegion = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             	# OPTIONAL
             	destinationAvailabilityZone = $someString
             	# OPTIONAL
             	destinationSubscriptionRubrikId = $someString
             	# REQUIRED
             	virtualMachineSize = $someString
             	# REQUIRED
             	subnetNativeId = $someString
             	# OPTIONAL
             	networkSecurityGroupNativeId = $someString
             	# REQUIRED
             	shouldExportTags = $someBoolean
             	# REQUIRED
             	shouldPowerOff = $someBoolean
             	# OPTIONAL
             	shouldUseReplica = $someBoolean
             	# OPTIONAL
             	availabilitySetNativeId = $someString
             	# OPTIONAL
             	shouldEnableAcceleratedNetworking = $someBoolean
             	# OPTIONAL
             	snapshotType = $someAzureSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSnapshotType]) for enum values.
             	# OPTIONAL
             	recoveryDiskIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRefreshSubscriptionsJob operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: StartRefreshSubscriptionsJob
             
             $query = New-RscMutationAzureNative -StartRefreshSubscriptionsJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	azureSubscriptionRubrikIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRestoreVirtualMachineJob operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: StartRestoreVirtualMachineJob
             
             $query = New-RscMutationAzureNative -StartRestoreVirtualMachineJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	shouldPowerOn = $someBoolean
             	# REQUIRED
             	shouldRestoreTags = $someBoolean
             	# OPTIONAL
             	snapshotTypeToUseIfSourceExpired = $someSnapshotTypeForRestoreIfSourceExpired # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotTypeForRestoreIfSourceExpired]) for enum values.
             	# OPTIONAL
             	recoveryDiskIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationAzureO365">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'Azure Office365' API domain:
             ['SetupExocompute'].
             </summary>
             <description>
             New-RscMutationAzureO365 creates a new
             mutation object for operations
             in the 'Azure Office365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'Azure Office365' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['SetupExocompute'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzureO365 -SetupExocompute).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationAzureO365 -SetupExocompute).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the SetupExocompute operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: SetupExocompute
             
             $query = New-RscMutationAzureO365 -SetupExocompute
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.exocomputeConfig = @{
             	# REQUIRED
             	regionName = $someString
             	# OPTIONAL
             	newGroupConfig = @{
             		# OPTIONAL
             		name = $someString
             	}
             	# OPTIONAL
             	existingGroupConfig = @{
             		# OPTIONAL
             		name = $someString
             	}
             	# OPTIONAL
             	newComputeConfig = @{
             		# OPTIONAL
             		vnetName = $someString
             		# OPTIONAL
             		subnetName = $someString
             		# OPTIONAL
             		securityGroupName = $someString
             	}
             	# OPTIONAL
             	existingComputeConfig = @{
             		# OPTIONAL
             		vnetId = $someString
             		# OPTIONAL
             		subnetId = $someString
             	}
             	# OPTIONAL
             	newStorageAccountConfig = @{
             		# OPTIONAL
             		name = $someString
             		# OPTIONAL
             		tier = $someStorageAccountTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageAccountTier]) for enum values.
             		# OPTIONAL
             		sku = $someStorageAccountSku # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageAccountSku]) for enum values.
             		# OPTIONAL
             		storages = @(
             			@{
             				# OPTIONAL
             				name = $someString
             				# OPTIONAL
             				tier = $someStorageAccountTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageAccountTier]) for enum values.
             				# OPTIONAL
             				sku = $someStorageAccountSku # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageAccountSku]) for enum values.
             				# OPTIONAL
             				containerImmutabilityStatus = $someColossusStorageContainerImmutabilityStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColossusStorageContainerImmutabilityStatus]) for enum values.
             				# OPTIONAL
             				versioningEnabled = $someBoolean
             			}
             		)
             	}
             	# OPTIONAL
             	existingStorageAccountConfig = @{
             		# OPTIONAL
             		id = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SetupAzureO365ExocomputeResp
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationCassandra">
             <summary>
             Create a new RscQuery object for any of the 5
             operations in the 'Cassandra' API domain:
             BulkDeleteSources, CreateSource, DeleteSource, RecoverSource, or UpdateSource.
             </summary>
             <description>
             New-RscMutationCassandra creates a new
             mutation object for operations
             in the 'Cassandra' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 5 operations
             in the 'Cassandra' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkDeleteSources, CreateSource, DeleteSource, RecoverSource, or UpdateSource.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCassandra -BulkDeleteSources).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCassandra -BulkDeleteSources).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkDeleteSources operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: BulkDeleteSources
             
             $query = New-RscMutationCassandra -BulkDeleteSources
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceType = $someV2BulkDeleteMosaicSourcesRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2BulkDeleteMosaicSourcesRequestSourceType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# REQUIRED
             		sourceNames = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateSource operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: CreateSource
             
             $query = New-RscMutationCassandra -CreateSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# OPTIONAL
             		cassandraYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		dseYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		enableSsl = $someBoolean
             		# OPTIONAL
             		httpsCertificate = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		jmxPassword = $someString
             		# OPTIONAL
             		jmxUser = $someString
             		# OPTIONAL
             		parameterEncoded = $someBoolean
             		# OPTIONAL
             		sourceAuthKey = $someString
             		# OPTIONAL
             		sourceAuthKeyfile = $someString
             		# OPTIONAL
             		sourceAuthPassphrase = $someString
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sourceHttpsPort = $someString
             		# OPTIONAL
             		sourcePassword = $someString
             		# OPTIONAL
             		sourcePort = $someString
             		# OPTIONAL
             		sourceRpcPort = $someString
             		# OPTIONAL
             		sourceSshPort = $someString
             		# OPTIONAL
             		sourceUser = $someString
             		# OPTIONAL
             		sslCaCerts = $someString
             		# OPTIONAL
             		sslCertfile = $someString
             		# OPTIONAL
             		sslKeyfile = $someString
             		# REQUIRED
             		sourceType = $someSourceSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSourceType]) for enum values.
             		# OPTIONAL
             		sslCertReqs = $someSourceSslCertReqs # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSslCertReqs]) for enum values.
             		# REQUIRED
             		sourceIp = @(
             			$someString
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSource operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: DeleteSource
             
             $query = New-RscMutationCassandra -DeleteSource
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceType = $someV2DeleteMosaicSourceRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2DeleteMosaicSourceRequestSourceType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverSource operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: RecoverSource
             
             $query = New-RscMutationCassandra -RecoverSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryData = @{
             		# OPTIONAL
             		destinationManagementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# OPTIONAL
             		destinationSourceName = $someString
             		# OPTIONAL
             		keyspaceConfig = $someString
             		# OPTIONAL
             		maxDiskUsage = $someString
             		# OPTIONAL
             		restoreDbUserPwd = $someString
             		# OPTIONAL
             		restoreDbUsername = $someString
             		# OPTIONAL
             		startTimestamp = $someInt
             		# OPTIONAL
             		targetEncryptionKey = $someString
             		# OPTIONAL
             		targetQuery = $someString
             		# OPTIONAL
             		sourceType = $someMosaicRetrieveRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicRetrieveRequestSourceType]) for enum values.
             		# REQUIRED
             		destinationPath = $someString
             		# REQUIRED
             		managementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# REQUIRED
             		parameterEncoded = $someBoolean
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		versionTime = $someInt
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateSource operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: UpdateSource
             
             $query = New-RscMutationCassandra -UpdateSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# OPTIONAL
             		cassandraYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		dseYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		enableSsl = $someBoolean
             		# OPTIONAL
             		httpsCertificate = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		jmxPassword = $someString
             		# OPTIONAL
             		jmxUser = $someString
             		# OPTIONAL
             		parameterEncoded = $someBoolean
             		# OPTIONAL
             		sourceAuthKey = $someString
             		# OPTIONAL
             		sourceAuthKeyfile = $someString
             		# OPTIONAL
             		sourceAuthPassphrase = $someString
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sourceHttpsPort = $someString
             		# OPTIONAL
             		sourcePassword = $someString
             		# OPTIONAL
             		sourcePort = $someString
             		# OPTIONAL
             		sourceRpcPort = $someString
             		# OPTIONAL
             		sourceSshPort = $someString
             		# OPTIONAL
             		sourceUser = $someString
             		# OPTIONAL
             		sslCaCerts = $someString
             		# OPTIONAL
             		sslCertfile = $someString
             		# OPTIONAL
             		sslKeyfile = $someString
             		# REQUIRED
             		sourceType = $someSourceSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSourceType]) for enum values.
             		# OPTIONAL
             		sslCertReqs = $someSourceSslCertReqs # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSslCertReqs]) for enum values.
             		# REQUIRED
             		sourceIp = @(
             			$someString
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationCertificate">
             <summary>
             Create a new RscQuery object for any of the 12
             operations in the 'Certificates' API domain:
             AddClusterCertificate, AddGlobalCertificate, Delete, DeleteCsr, DeleteGlobalCertificate, GenerateCsr, MarkAgentSecondary, SetSso, SetWebSigned, Update, UpdateGlobalCertificate, or UpdateHost.
             </summary>
             <description>
             New-RscMutationCertificate creates a new
             mutation object for operations
             in the 'Certificates' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 12 operations
             in the 'Certificates' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddClusterCertificate, AddGlobalCertificate, Delete, DeleteCsr, DeleteGlobalCertificate, GenerateCsr, MarkAgentSecondary, SetSso, SetWebSigned, Update, UpdateGlobalCertificate, or UpdateHost.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCertificate -AddClusterCertificate).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCertificate -AddClusterCertificate).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddClusterCertificate operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: AddClusterCertificate
             
             $query = New-RscMutationCertificate -AddClusterCertificate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	certImportRequest = @{
             		# OPTIONAL
             		csrId = $someString
             		# OPTIONAL
             		description = $someString
             		# OPTIONAL
             		privateKey = $someString
             		# OPTIONAL
             		isTrusted = $someBoolean
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		pemFile = $someString
             	}
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddClusterCertificateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddGlobalCertificate operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: AddGlobalCertificate
             
             $query = New-RscMutationCertificate -AddGlobalCertificate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	privateKey = $someString
             	# REQUIRED
             	certificate = $someString
             	# OPTIONAL
             	clusters = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			isTrusted = $someBoolean
             		}
             	)
             	# OPTIONAL
             	csrFid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddGlobalCertificateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: Delete
             
             $query = New-RscMutationCertificate -Delete
             
             # REQUIRED
             $query.Var.certificateId = $someInt64
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCsr operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: DeleteCsr
             
             $query = New-RscMutationCertificate -DeleteCsr
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	csrFids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteGlobalCertificate operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: DeleteGlobalCertificate
             
             $query = New-RscMutationCertificate -DeleteGlobalCertificate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	certificateId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteGlobalCertificateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GenerateCsr operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: GenerateCsr
             
             $query = New-RscMutationCertificate -GenerateCsr
             
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.hostnames = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.organization = $someString
             # OPTIONAL
             $query.Var.organizationUnit = $someString
             # OPTIONAL
             $query.Var.country = $someString
             # OPTIONAL
             $query.Var.state = $someString
             # OPTIONAL
             $query.Var.city = $someString
             # OPTIONAL
             $query.Var.email = $someString
             # OPTIONAL
             $query.Var.surname = $someString
             # OPTIONAL
             $query.Var.userId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Csr
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MarkAgentSecondary operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: MarkAgentSecondary
             
             $query = New-RscMutationCertificate -MarkAgentSecondary
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	certId = $someString
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MarkAgentSecondaryCertificateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetSso operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: SetSso
             
             $query = New-RscMutationCertificate -SetSso
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	certificateId = $someInt
             	# REQUIRED
             	certificateType = $someSsoCertificateType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SsoCertificateType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetWebSigned operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: SetWebSigned
             
             $query = New-RscMutationCertificate -SetWebSigned
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	certificatePayload = @{
             		# REQUIRED
             		certificateId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: Update
             
             $query = New-RscMutationCertificate -Update
             
             # REQUIRED
             $query.Var.certificateId = $someInt64
             # OPTIONAL
             $query.Var.name = $someString
             # OPTIONAL
             $query.Var.description = $someString
             # OPTIONAL
             $query.Var.certificate = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateGlobalCertificate operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: UpdateGlobalCertificate
             
             $query = New-RscMutationCertificate -UpdateGlobalCertificate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	certificateId = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# REQUIRED
             	clusters = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			isTrusted = $someBoolean
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateGlobalCertificateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateHost operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: UpdateHost
             
             $query = New-RscMutationCertificate -UpdateHost
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCertificateHostReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationCloudAccount">
             <summary>
             Create a new RscQuery object for any of the 2
             operations in the 'Cloud Account' API domain:
             MapExocomputeAccount, or UnmapExocomputeAccount.
             </summary>
             <description>
             New-RscMutationCloudAccount creates a new
             mutation object for operations
             in the 'Cloud Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 2 operations
             in the 'Cloud Account' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: MapExocomputeAccount, or UnmapExocomputeAccount.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCloudAccount -MapExocomputeAccount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCloudAccount -MapExocomputeAccount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the MapExocomputeAccount operation
             of the 'Cloud Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudAccount
             # API Operation: MapExocomputeAccount
             
             $query = New-RscMutationCloudAccount -MapExocomputeAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             	# REQUIRED
             	exocomputeCloudAccountId = $someString
             	# REQUIRED
             	cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MapCloudAccountExocomputeAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmapExocomputeAccount operation
             of the 'Cloud Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudAccount
             # API Operation: UnmapExocomputeAccount
             
             $query = New-RscMutationCloudAccount -UnmapExocomputeAccount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountIds = @(
             		$someString
             	)
             	# REQUIRED
             	cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UnmapCloudAccountExocomputeAccountReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationCloudNative">
             <summary>
             Create a new RscQuery object for any of the 13
             operations in the 'Cloud Native' API domain:
             AddSqlServerBackupCredentials, CheckRbaConnectivity, ClearSqlServerBackupCredentials, CreateLabelRule, CreateTagRule, DeleteLabelRule, DeleteTagRule, DownloadFiles, SetupSqlServerBackup, StartSnapshotsIndexJob, UpdateIndexingStatus, UpdateLabelRule, or UpdateTagRule.
             </summary>
             <description>
             New-RscMutationCloudNative creates a new
             mutation object for operations
             in the 'Cloud Native' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 13 operations
             in the 'Cloud Native' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddSqlServerBackupCredentials, CheckRbaConnectivity, ClearSqlServerBackupCredentials, CreateLabelRule, CreateTagRule, DeleteLabelRule, DeleteTagRule, DownloadFiles, SetupSqlServerBackup, StartSnapshotsIndexJob, UpdateIndexingStatus, UpdateLabelRule, or UpdateTagRule.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCloudNative -AddSqlServerBackupCredentials).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCloudNative -AddSqlServerBackupCredentials).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddSqlServerBackupCredentials operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: AddSqlServerBackupCredentials
             
             $query = New-RscMutationCloudNative -AddSqlServerBackupCredentials
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	objectIds = @(
             		$someString
             	)
             	# REQUIRED
             	workloadType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             	# REQUIRED
             	backupCredentials = @{
             		# REQUIRED
             		login = $someString
             		# REQUIRED
             		password = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddCloudNativeSqlServerBackupCredentialsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckRbaConnectivity operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: CheckRbaConnectivity
             
             $query = New-RscMutationCloudNative -CheckRbaConnectivity
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudNativeCheckRbaConnectivityReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClearSqlServerBackupCredentials operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: ClearSqlServerBackupCredentials
             
             $query = New-RscMutationCloudNative -ClearSqlServerBackupCredentials
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	objectIds = @(
             		$someString
             	)
             	# REQUIRED
             	workloadType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClearCloudNativeSqlServerBackupCredentialsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateLabelRule operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: CreateLabelRule
             
             $query = New-RscMutationCloudNative -CreateLabelRule
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	objectType = $someCloudNativeLabelObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLabelObjectType]) for enum values.
             	# REQUIRED
             	labelRuleName = $someString
             	# REQUIRED
             	label = @{
             		# REQUIRED
             		labelKey = $someString
             		# REQUIRED
             		labelValue = $someString
             		# REQUIRED
             		matchAllValues = $someBoolean
             	}
             	# REQUIRED
             	slaAssignType = $someTagRuleSlaAssignType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagRuleSlaAssignType]) for enum values.
             	# OPTIONAL
             	slaId = $someString
             	# OPTIONAL
             	cloudNativeAccountIds = @{
             		# OPTIONAL
             		awsNativeAccountIds = @(
             			$someString
             		)
             		# OPTIONAL
             		azureNativeSubscriptionIds = @(
             			$someString
             		)
             		# OPTIONAL
             		gcpNativeProjectIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	applyToAllCloudAccounts = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCloudNativeLabelRuleReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateTagRule operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: CreateTagRule
             
             $query = New-RscMutationCloudNative -CreateTagRule
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	objectType = $someCloudNativeTagObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagObjectType]) for enum values.
             	# REQUIRED
             	tagRuleName = $someString
             	# REQUIRED
             	tag = @{
             		# REQUIRED
             		tagKey = $someString
             		# REQUIRED
             		tagValue = $someString
             		# REQUIRED
             		matchAllValues = $someBoolean
             	}
             	# REQUIRED
             	slaAssignType = $someTagRuleSlaAssignType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagRuleSlaAssignType]) for enum values.
             	# OPTIONAL
             	slaId = $someString
             	# OPTIONAL
             	cloudNativeAccountIds = @{
             		# OPTIONAL
             		awsNativeAccountIds = @(
             			$someString
             		)
             		# OPTIONAL
             		azureNativeSubscriptionIds = @(
             			$someString
             		)
             		# OPTIONAL
             		gcpNativeProjectIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	applyToAllCloudAccounts = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCloudNativeTagRuleReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteLabelRule operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: DeleteLabelRule
             
             $query = New-RscMutationCloudNative -DeleteLabelRule
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ruleId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteTagRule operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: DeleteTagRule
             
             $query = New-RscMutationCloudNative -DeleteTagRule
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ruleId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadFiles operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: DownloadFiles
             
             $query = New-RscMutationCloudNative -DownloadFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	filePaths = @(
             		$someString
             	)
             	# OPTIONAL
             	snapshotType = $someSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotType]) for enum values.
             	# REQUIRED
             	fileRecoveryLocationDetails = @{
             		# OPTIONAL
             		cloudDownloadLocationDetails = @{
             			# REQUIRED
             			downloadLocation = $someString
             			# REQUIRED
             			createDownloadLocation = $someBoolean
             			# OPTIONAL
             			tags = @(
             				@{
             					# REQUIRED
             					tagKey = $someString
             					# REQUIRED
             					tagValue = $someString
             					# REQUIRED
             					matchAllValues = $someBoolean
             				}
             			)
             		}
             		# OPTIONAL
             		vmDownloadLocationDetails = @{
             			# REQUIRED
             			id = $someString
             			# OPTIONAL
             			pathToRecover = $someString
             		}
             	}
             	# REQUIRED
             	downloadType = $someFileDownloadType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileDownloadType]) for enum values.
             	# OPTIONAL
             	exocomputeCloudNativeAccountId = $someString
             	# OPTIONAL
             	exocomputeRegion = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadFilesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetupSqlServerBackup operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: SetupSqlServerBackup
             
             $query = New-RscMutationCloudNative -SetupSqlServerBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	databaseIds = @(
             		$someString
             	)
             	# OPTIONAL
             	adminCredentials = @{
             		# REQUIRED
             		login = $someString
             		# REQUIRED
             		password = $someString
             	}
             	# OPTIONAL
             	authMechanism = $someSqlAuthenticationMechanism # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SqlAuthenticationMechanism]) for enum values.
             	# OPTIONAL
             	sessionId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartSnapshotsIndexJob operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: StartSnapshotsIndexJob
             
             $query = New-RscMutationCloudNative -StartSnapshotsIndexJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateIndexingStatus operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: UpdateIndexingStatus
             
             $query = New-RscMutationCloudNative -UpdateIndexingStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadIds = @(
             		$someString
             	)
             	# REQUIRED
             	isIndexingEnabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCloudNativeIndexingStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateLabelRule operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: UpdateLabelRule
             
             $query = New-RscMutationCloudNative -UpdateLabelRule
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	labelRuleId = $someString
             	# REQUIRED
             	labelRuleName = $someString
             	# REQUIRED
             	slaAssignType = $someTagRuleSlaAssignType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagRuleSlaAssignType]) for enum values.
             	# OPTIONAL
             	slaId = $someString
             	# OPTIONAL
             	cloudNativeAccountIds = @{
             		# OPTIONAL
             		awsNativeAccountIds = @(
             			$someString
             		)
             		# OPTIONAL
             		azureNativeSubscriptionIds = @(
             			$someString
             		)
             		# OPTIONAL
             		gcpNativeProjectIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	applyToAllCloudAccounts = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTagRule operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: UpdateTagRule
             
             $query = New-RscMutationCloudNative -UpdateTagRule
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tagRuleId = $someString
             	# REQUIRED
             	tagRuleName = $someString
             	# REQUIRED
             	slaAssignType = $someTagRuleSlaAssignType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagRuleSlaAssignType]) for enum values.
             	# OPTIONAL
             	slaId = $someString
             	# OPTIONAL
             	cloudNativeAccountIds = @{
             		# OPTIONAL
             		awsNativeAccountIds = @(
             			$someString
             		)
             		# OPTIONAL
             		azureNativeSubscriptionIds = @(
             			$someString
             		)
             		# OPTIONAL
             		gcpNativeProjectIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	applyToAllCloudAccounts = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationCluster">
             <summary>
             Create a new RscQuery object for any of the 12
             operations in the 'Cluster' API domain:
             AddClusterNodes, AddNodesToCloud, GenerateClusterRegistrationToken, RecoverCloud, RegisterCloud, RemoveCdm, RemoveClusterNodes, UpdateClusterDefaultAddress, UpdateClusterLocation, UpdateClusterNtpServers, UpdateClusterSettings, or UpdatePreviewerClusterConfig.
             </summary>
             <description>
             New-RscMutationCluster creates a new
             mutation object for operations
             in the 'Cluster' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 12 operations
             in the 'Cluster' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddClusterNodes, AddNodesToCloud, GenerateClusterRegistrationToken, RecoverCloud, RegisterCloud, RemoveCdm, RemoveClusterNodes, UpdateClusterDefaultAddress, UpdateClusterLocation, UpdateClusterNtpServers, UpdateClusterSettings, or UpdatePreviewerClusterConfig.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCluster -AddClusterNodes).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCluster -AddClusterNodes).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddClusterNodes operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: AddClusterNodes
             
             $query = New-RscMutationCluster -AddClusterNodes
             
             # REQUIRED
             $query.Var.AddClusterNodesInput = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	nodesMap = @(
             		@{
             			# OPTIONAL
             			key = $someString
             			# REQUIRED
             			value = @{
             				# OPTIONAL
             				dataIpConfig = @{
             					# OPTIONAL
             					vlan = $someInt
             					# REQUIRED
             					address = $someString
             					# REQUIRED
             					gateway = $someString
             					# REQUIRED
             					netmask = $someString
             				}
             				# REQUIRED
             				ipmiIpConfig = @{
             					# OPTIONAL
             					vlan = $someInt
             					# REQUIRED
             					address = $someString
             					# REQUIRED
             					gateway = $someString
             					# REQUIRED
             					netmask = $someString
             				}
             				# REQUIRED
             				managementIpConfig = @{
             					# OPTIONAL
             					vlan = $someInt
             					# REQUIRED
             					address = $someString
             					# REQUIRED
             					gateway = $someString
             					# REQUIRED
             					netmask = $someString
             				}
             				# OPTIONAL
             				vlanIpConfigs = @(
             					@{
             						# REQUIRED
             						ip = $someString
             						# REQUIRED
             						vlan = $someInt
             					}
             				)
             			}
             		}
             	)
             	# REQUIRED
             	request = @{
             		# OPTIONAL
             		encryptionPassword = $someString
             		# OPTIONAL
             		isIpv4ManualDiscoveryMode = $someBoolean
             		# OPTIONAL
             		isLinkLocalIpv4Mode = $someBoolean
             		# REQUIRED
             		ipmiPassword = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddClusterNodesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddNodesToCloud operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: AddNodesToCloud
             
             $query = New-RscMutationCluster -AddNodesToCloud
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	numberOfNodes = $someInt
             	# OPTIONAL
             	awsImageId = $someString
             	# OPTIONAL
             	azureImageName = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	vendor = $someCcpVendorType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CcpVendorType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	shouldKeepResourcesOnFailure = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GenerateClusterRegistrationToken operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: GenerateClusterRegistrationToken
             
             $query = New-RscMutationCluster -GenerateClusterRegistrationToken
             
             # OPTIONAL
             $query.Var.input = @{
             	# OPTIONAL
             	managedByPolaris = $someBoolean
             	# OPTIONAL
             	nodeConfigs = @(
             		@{
             			# OPTIONAL
             			id = $someString
             			# OPTIONAL
             			manufactureTime = $someDateTime
             			# OPTIONAL
             			serial = $someString
             			# OPTIONAL
             			systemUuid = $someString
             			# OPTIONAL
             			teleportToken = $someString
             			# OPTIONAL
             			clusterUuid = $someString
             			# OPTIONAL
             			platform = $someString
             			# OPTIONAL
             			capacity = $someString
             			# OPTIONAL
             			isEntitled = $someBoolean
             		}
             	)
             	# OPTIONAL
             	isOfflineRegistration = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterRegistrationToken
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverCloud operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RecoverCloud
             
             $query = New-RscMutationCluster -RecoverCloud
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	adminPassword = $someString
             	# OPTIONAL
             	userEmail = $someString
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	azureEsResourceGroup = $someString
             	# OPTIONAL
             	azureVmConfig = @{
             		# OPTIONAL
             		resourceGroup = $someString
             		# OPTIONAL
             		cdmVersion = $someString
             		# OPTIONAL
             		location = $someString
             		# OPTIONAL
             		nodeSizeGb = $someInt
             		# OPTIONAL
             		networkResourceGroup = $someString
             		# OPTIONAL
             		vnetResourceGroup = $someString
             		# OPTIONAL
             		networkSecurityGroup = $someString
             		# OPTIONAL
             		networkSecurityResourceGroup = $someString
             		# OPTIONAL
             		vnet = $someString
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		tags = $someString
             		# OPTIONAL
             		vmImage = $someString
             		# OPTIONAL
             		cdmProduct = $someString
             		# OPTIONAL
             		vmType = $someVmType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VmType]) for enum values.
             		# OPTIONAL
             		instanceType = $someAzureInstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureInstanceType]) for enum values.
             	}
             	# OPTIONAL
             	awsVmConfig = @{
             		# OPTIONAL
             		cdmVersion = $someString
             		# OPTIONAL
             		nodeSizeGb = $someInt
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		tags = $someString
             		# OPTIONAL
             		imageId = $someString
             		# OPTIONAL
             		instanceProfileName = $someString
             		# OPTIONAL
             		cdmProduct = $someString
             		# OPTIONAL
             		vmType = $someVmType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VmType]) for enum values.
             		# OPTIONAL
             		securityGroups = @(
             			$someString
             		)
             		# OPTIONAL
             		instanceType = $someAwsInstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsInstanceType]) for enum values.
             	}
             	# OPTIONAL
             	awsRegion = $someString
             	# REQUIRED
             	shouldDisableAwsApiTermination = $someBoolean
             	# REQUIRED
             	shouldKeepClusterOnFailure = $someBoolean
             	# OPTIONAL
             	ntpServers = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterCloud operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RegisterCloud
             
             $query = New-RscMutationCluster -RegisterCloud
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RegisterCloudClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveCdm operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RemoveCdm
             
             $query = New-RscMutationCluster -RemoveCdm
             
             # REQUIRED
             $query.Var.clusterUUID = $someString
             # REQUIRED
             $query.Var.isForce = $someBoolean
             # OPTIONAL
             $query.Var.expireInDays = $someInt64
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveClusterNodes operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RemoveClusterNodes
             
             $query = New-RscMutationCluster -RemoveClusterNodes
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	nodeIds = @(
             		$someString
             	)
             	# OPTIONAL
             	useQuickDrain = $someBoolean
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	nodeMetadata = @(
             		@{
             			# OPTIONAL
             			nodeId = $someString
             			# OPTIONAL
             			chassisId = $someString
             			# OPTIONAL
             			platform = $someClusterNodePlatformType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterNodePlatformType]) for enum values.
             			# OPTIONAL
             			status = $someClusterNodeStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterNodeStatus]) for enum values.
             			# OPTIONAL
             			useQuickDrain = $someBoolean
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CcProvisionJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateClusterDefaultAddress operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: UpdateClusterDefaultAddress
             
             $query = New-RscMutationCluster -UpdateClusterDefaultAddress
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	address = $someString
             	# OPTIONAL
             	port = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateClusterDefaultAddressReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateClusterLocation operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: UpdateClusterLocation
             
             $query = New-RscMutationCluster -UpdateClusterLocation
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.clusterLocation = @{
             	# REQUIRED
             	address = $someString
             	# REQUIRED
             	latitude = $someSingle
             	# REQUIRED
             	longitude = $someSingle
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Cluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateClusterNtpServers operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: UpdateClusterNtpServers
             
             $query = New-RscMutationCluster -UpdateClusterNtpServers
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	ntpServerConfigs = @(
             		@{
             			# OPTIONAL
             			symmetricKey = @{
             				# REQUIRED
             				key = $someString
             				# REQUIRED
             				keyId = $someInt
             				# REQUIRED
             				keyType = $someString
             			}
             			# REQUIRED
             			server = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateClusterSettings operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: UpdateClusterSettings
             
             $query = New-RscMutationCluster -UpdateClusterSettings
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUpdate = @{
             		# OPTIONAL
             		acceptedEulaVersion = $someString
             		# OPTIONAL
             		geolocation = @{
             			# REQUIRED
             			address = $someString
             		}
             		# OPTIONAL
             		name = $someString
             		# OPTIONAL
             		timezone = @{
             			# REQUIRED
             			timezone = $someClusterTimezoneType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTimezoneType]) for enum values.
             		}
             	}
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateClusterSettingsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdatePreviewerClusterConfig operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: UpdatePreviewerClusterConfig
             
             $query = New-RscMutationCluster -UpdatePreviewerClusterConfig
             
             # REQUIRED
             $query.Var.previewerClusterConfig = @{
             	# OPTIONAL
             	clusterId = $someString
             	# OPTIONAL
             	enabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Cluster
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationCrossAccount">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'Cross Account' API domain:
             AddCrossAccountServiceConsumer, CreateCrossAccountPair, or CreateCrossAccountRegOauthPayload.
             </summary>
             <description>
             New-RscMutationCrossAccount creates a new
             mutation object for operations
             in the 'Cross Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'Cross Account' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddCrossAccountServiceConsumer, CreateCrossAccountPair, or CreateCrossAccountRegOauthPayload.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCrossAccount -AddCrossAccountServiceConsumer).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationCrossAccount -AddCrossAccountServiceConsumer).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddCrossAccountServiceConsumer operation
             of the 'Cross Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CrossAccount
             # API Operation: AddCrossAccountServiceConsumer
             
             $query = New-RscMutationCrossAccount -AddCrossAccountServiceConsumer
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	crossAccountId = $someString
             	# REQUIRED
             	fqdn = $someString
             	# REQUIRED
             	serviceConsumerSa = @{
             		# OPTIONAL
             		clientId = $someString
             		# OPTIONAL
             		clientSecret = $someString
             		# OPTIONAL
             		accessTokenUrl = $someString
             	}
             	# REQUIRED
             	isRefresh = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddCrossAccountServiceConsumerReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCrossAccountPair operation
             of the 'Cross Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CrossAccount
             # API Operation: CreateCrossAccountPair
             
             $query = New-RscMutationCrossAccount -CreateCrossAccountPair
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	code = $someString
             	# REQUIRED
             	state = $someString
             	# REQUIRED
             	fqdn = $someString
             	# REQUIRED
             	isRefresh = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCrossAccountRegOauthPayload operation
             of the 'Cross Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CrossAccount
             # API Operation: CreateCrossAccountRegOauthPayload
             
             $query = New-RscMutationCrossAccount -CreateCrossAccountRegOauthPayload
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	fqdn = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCrossAccountRegOauthPayloadReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationDb2">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'Db2' API domain:
             AddInstance, CreateOnDemandBackup, DeleteDatabase, DeleteInstance, DiscoverInstance, DownloadSnapshot, DownloadSnapshotsForPointInTimeRecovery, ExpireDownloadedSnapshots, PatchDatabase, PatchInstance, or RefreshDatabase.
             </summary>
             <description>
             New-RscMutationDb2 creates a new
             mutation object for operations
             in the 'Db2' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'Db2' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddInstance, CreateOnDemandBackup, DeleteDatabase, DeleteInstance, DiscoverInstance, DownloadSnapshot, DownloadSnapshotsForPointInTimeRecovery, ExpireDownloadedSnapshots, PatchDatabase, PatchInstance, or RefreshDatabase.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationDb2 -AddInstance).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationDb2 -AddInstance).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddInstance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: AddInstance
             
             $query = New-RscMutationDb2 -AddInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	db2InstanceRequestConfig = @{
             		# REQUIRED
             		hostIds = @(
             			$someString
             		)
             		# REQUIRED
             		instanceName = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddDb2InstanceReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandBackup operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: CreateOnDemandBackup
             
             $query = New-RscMutationDb2 -CreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteDatabase operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DeleteDatabase
             
             $query = New-RscMutationDb2 -DeleteDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteInstance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DeleteInstance
             
             $query = New-RscMutationDb2 -DeleteInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DiscoverInstance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DiscoverInstance
             
             $query = New-RscMutationDb2 -DiscoverInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshot operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DownloadSnapshot
             
             $query = New-RscMutationDb2 -DownloadSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshotsForPointInTimeRecovery operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DownloadSnapshotsForPointInTimeRecovery
             
             $query = New-RscMutationDb2 -DownloadSnapshotsForPointInTimeRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	downloadConfig = @{
             		# OPTIONAL
             		pointInTime = $someDateTime
             		# REQUIRED
             		preferredLocationId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExpireDownloadedSnapshots operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: ExpireDownloadedSnapshots
             
             $query = New-RscMutationDb2 -ExpireDownloadedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# OPTIONAL
             	shouldExpireLogsOnly = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchDatabase operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: PatchDatabase
             
             $query = New-RscMutationDb2 -PatchDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	db2DatabaseConfig = @{
             		# OPTIONAL
             		backupParallelism = $someInt
             		# OPTIONAL
             		backupSessions = $someInt
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PatchDb2DatabaseReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchInstance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: PatchInstance
             
             $query = New-RscMutationDb2 -PatchInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	db2InstanceRequestConfig = @{
             		# OPTIONAL
             		hostIds = @(
             			$someString
             		)
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		instanceName = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PatchDb2InstanceReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshDatabase operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: RefreshDatabase
             
             $query = New-RscMutationDb2 -RefreshDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationDownload">
             <summary>
             Create a new RscQuery object for any of the 17
             operations in the 'Report Download' API domain:
             ActiveDirectorySnapshotFromLocation, AuditLogCsvAsync, ExchangeSnapshot, FilesetSnapshot, FilesetSnapshotFromLocation, ObjectFilesCsv, ObjectsListCsv, ReportCsvAsync, ReportPdfAsync, ResultsCsv, SapHanaSnapshot, SapHanaSnapshotFromLocation, SapHanaSnapshotsForPointInTimeRecovery, SnapshotResultsCsv, ThreatHuntCsv, VolumeGroupSnapshotFiles, or VolumeGroupSnapshotFromLocation.
             </summary>
             <description>
             New-RscMutationDownload creates a new
             mutation object for operations
             in the 'Report Download' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 17 operations
             in the 'Report Download' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ActiveDirectorySnapshotFromLocation, AuditLogCsvAsync, ExchangeSnapshot, FilesetSnapshot, FilesetSnapshotFromLocation, ObjectFilesCsv, ObjectsListCsv, ReportCsvAsync, ReportPdfAsync, ResultsCsv, SapHanaSnapshot, SapHanaSnapshotFromLocation, SapHanaSnapshotsForPointInTimeRecovery, SnapshotResultsCsv, ThreatHuntCsv, VolumeGroupSnapshotFiles, or VolumeGroupSnapshotFromLocation.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationDownload -ActiveDirectorySnapshotFromLocation).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationDownload -ActiveDirectorySnapshotFromLocation).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ActiveDirectorySnapshotFromLocation operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: ActiveDirectorySnapshotFromLocation
             
             $query = New-RscMutationDownload -ActiveDirectorySnapshotFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AuditLogCsvAsync operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: AuditLogCsvAsync
             
             $query = New-RscMutationDownload -AuditLogCsvAsync
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filters = @{
             		# OPTIONAL
             		activityObjectType = @(
             			$someActivityObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		objectType = @(
             			$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		excludedObjectTypes = @(
             			$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		lastActivityStatus = @(
             			$someActivityStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		lastActivityType = @(
             			$someActivityTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		slaDomainId = @(
             			$someString
             		)
             		# OPTIONAL
             		clusterType = @(
             			$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		clusterId = @(
             			$someString
             		)
             		# OPTIONAL
             		timeRange = @{
             			# OPTIONAL
             			relativeTimeRange = @{
             				# REQUIRED
             				magnitude = $someInt
             				# REQUIRED
             				unit = $someTimeUnitEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TimeUnitEnum]) for enum values.
             			}
             			# OPTIONAL
             			absoluteTimeRange = @{
             				# REQUIRED
             				start = $someDateTime
             				# REQUIRED
             				end = $someDateTime
             			}
             		}
             		# OPTIONAL
             		slaTimeRange = $someSlaComplianceTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaComplianceTimeRange]) for enum values.
             		# OPTIONAL
             		orgId = @(
             			$someString
             		)
             		# OPTIONAL
             		managedId = @(
             			$someString
             		)
             		# OPTIONAL
             		isAnomaly = $someBoolean
             		# OPTIONAL
             		searchTerm = $someString
             		# OPTIONAL
             		complianceStatus = @(
             			$someComplianceStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ComplianceStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		protectionStatus = @(
             			$someProtectionStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProtectionStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		failoverStatus = @(
             			$someFailoverStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		failoverType = $someFailoverTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverTypeEnum]) for enum values.
             		# OPTIONAL
             		source = @(
             			$someString
             		)
             		# OPTIONAL
             		targetSite = @(
             			$someString
             		)
             		# OPTIONAL
             		userAuditObjectType = @(
             			$someUserAuditObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		userAuditType = @(
             			$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		userAuditStatus = @(
             			$someUserAuditStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		replicationSource = @(
             			$someString
             		)
             		# OPTIONAL
             		clusterLocation = @(
             			$someString
             		)
             		# OPTIONAL
             		taskCategory = @(
             			$someString
             		)
             		# OPTIONAL
             		taskStatus = @(
             			$someString
             		)
             		# OPTIONAL
             		taskType = @(
             			$someString
             		)
             		# OPTIONAL
             		policyId = @(
             			$someString
             		)
             		# OPTIONAL
             		sonarObjectTypes = @(
             			$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		shouldApplyWhitelists = $someBoolean
             		# OPTIONAL
             		date = $someDateTime
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncDownloadReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExchangeSnapshot operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: ExchangeSnapshot
             
             $query = New-RscMutationDownload -ExchangeSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FilesetSnapshot operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: FilesetSnapshot
             
             $query = New-RscMutationDownload -FilesetSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FilesetSnapshotFromLocation operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: FilesetSnapshotFromLocation
             
             $query = New-RscMutationDownload -FilesetSnapshotFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectFilesCsv operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: ObjectFilesCsv
             
             $query = New-RscMutationDownload -ObjectFilesCsv
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filters = @{
             		# OPTIONAL
             		openAccessTypes = @(
             			$someOpenAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OpenAccessType]) for enum values.
             		)
             		# OPTIONAL
             		stalenessTypes = @(
             			$someStalenessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StalenessType]) for enum values.
             		)
             		# OPTIONAL
             		analyzerGroupIds = @(
             			$someString
             		)
             		# OPTIONAL
             		clusterIds = @(
             			$someString
             		)
             		# OPTIONAL
             		pathPrefix = $someString
             		# OPTIONAL
             		snappableTypes = @(
             			$someString
             		)
             		# OPTIONAL
             		searchText = $someString
             		# OPTIONAL
             		whitelistEnabled = $someBoolean
             		# OPTIONAL
             		fileCountTypes = @(
             			$someFileCountType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileCountType]) for enum values.
             		)
             		# OPTIONAL
             		accessTypes = @(
             			$someAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AccessType]) for enum values.
             		)
             		# OPTIONAL
             		activityTypes = @(
             			$someActivityAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityAccessType]) for enum values.
             		)
             		# OPTIONAL
             		objectIds = @(
             			$someString
             		)
             		# OPTIONAL
             		inodeTypes = @(
             			$someInodeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InodeType]) for enum values.
             		)
             		# REQUIRED
             		objectTypes = @(
             			$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             		)
             	}
             	# REQUIRED
             	day = $someString
             	# REQUIRED
             	timezone = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadCsvReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectsListCsv operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: ObjectsListCsv
             
             $query = New-RscMutationDownload -ObjectsListCsv
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	day = $someString
             	# REQUIRED
             	timezone = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadCsvReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReportCsvAsync operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: ReportCsvAsync
             
             $query = New-RscMutationDownload -ReportCsvAsync
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt
             	# OPTIONAL
             	config = @{
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             		# OPTIONAL
             		charts = @(
             			@{
             				# REQUIRED
             				name = $someString
             				# REQUIRED
             				focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             				# OPTIONAL
             				groupBy = @(
             					$someGroupByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupByFieldEnum]) for enum values.
             				)
             			}
             		)
             		# OPTIONAL
             		tables = @(
             			@{
             				# REQUIRED
             				name = $someString
             				# REQUIRED
             				focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             				# OPTIONAL
             				groupBy = @(
             					$someGroupByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupByFieldEnum]) for enum values.
             				)
             				# REQUIRED
             				selectedColumns = @(
             					$someReportTableColumnEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportTableColumnEnum]) for enum values.
             				)
             				# OPTIONAL
             				sortBy = $someSortByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortByFieldEnum]) for enum values.
             				# OPTIONAL
             				sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             			}
             		)
             		# REQUIRED
             		filters = @{
             			# OPTIONAL
             			activityObjectType = @(
             				$someActivityObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			objectType = @(
             				$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			excludedObjectTypes = @(
             				$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			lastActivityStatus = @(
             				$someActivityStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			lastActivityType = @(
             				$someActivityTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			slaDomainId = @(
             				$someString
             			)
             			# OPTIONAL
             			clusterType = @(
             				$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			clusterId = @(
             				$someString
             			)
             			# OPTIONAL
             			timeRange = @{
             				# OPTIONAL
             				relativeTimeRange = @{
             					# REQUIRED
             					magnitude = $someInt
             					# REQUIRED
             					unit = $someTimeUnitEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TimeUnitEnum]) for enum values.
             				}
             				# OPTIONAL
             				absoluteTimeRange = @{
             					# REQUIRED
             					start = $someDateTime
             					# REQUIRED
             					end = $someDateTime
             				}
             			}
             			# OPTIONAL
             			slaTimeRange = $someSlaComplianceTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaComplianceTimeRange]) for enum values.
             			# OPTIONAL
             			orgId = @(
             				$someString
             			)
             			# OPTIONAL
             			managedId = @(
             				$someString
             			)
             			# OPTIONAL
             			isAnomaly = $someBoolean
             			# OPTIONAL
             			searchTerm = $someString
             			# OPTIONAL
             			complianceStatus = @(
             				$someComplianceStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ComplianceStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			protectionStatus = @(
             				$someProtectionStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProtectionStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			failoverStatus = @(
             				$someFailoverStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			failoverType = $someFailoverTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverTypeEnum]) for enum values.
             			# OPTIONAL
             			source = @(
             				$someString
             			)
             			# OPTIONAL
             			targetSite = @(
             				$someString
             			)
             			# OPTIONAL
             			userAuditObjectType = @(
             				$someUserAuditObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			userAuditType = @(
             				$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			userAuditStatus = @(
             				$someUserAuditStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			replicationSource = @(
             				$someString
             			)
             			# OPTIONAL
             			clusterLocation = @(
             				$someString
             			)
             			# OPTIONAL
             			taskCategory = @(
             				$someString
             			)
             			# OPTIONAL
             			taskStatus = @(
             				$someString
             			)
             			# OPTIONAL
             			taskType = @(
             				$someString
             			)
             			# OPTIONAL
             			policyId = @(
             				$someString
             			)
             			# OPTIONAL
             			sonarObjectTypes = @(
             				$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			shouldApplyWhitelists = $someBoolean
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		isHidden = $someBoolean
             		# OPTIONAL
             		isReadOnly = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncDownloadReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReportPdfAsync operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: ReportPdfAsync
             
             $query = New-RscMutationDownload -ReportPdfAsync
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt
             	# OPTIONAL
             	config = @{
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             		# OPTIONAL
             		charts = @(
             			@{
             				# REQUIRED
             				name = $someString
             				# REQUIRED
             				focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             				# OPTIONAL
             				groupBy = @(
             					$someGroupByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupByFieldEnum]) for enum values.
             				)
             			}
             		)
             		# OPTIONAL
             		tables = @(
             			@{
             				# REQUIRED
             				name = $someString
             				# REQUIRED
             				focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             				# OPTIONAL
             				groupBy = @(
             					$someGroupByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupByFieldEnum]) for enum values.
             				)
             				# REQUIRED
             				selectedColumns = @(
             					$someReportTableColumnEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportTableColumnEnum]) for enum values.
             				)
             				# OPTIONAL
             				sortBy = $someSortByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortByFieldEnum]) for enum values.
             				# OPTIONAL
             				sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             			}
             		)
             		# REQUIRED
             		filters = @{
             			# OPTIONAL
             			activityObjectType = @(
             				$someActivityObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			objectType = @(
             				$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			excludedObjectTypes = @(
             				$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			lastActivityStatus = @(
             				$someActivityStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			lastActivityType = @(
             				$someActivityTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			slaDomainId = @(
             				$someString
             			)
             			# OPTIONAL
             			clusterType = @(
             				$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			clusterId = @(
             				$someString
             			)
             			# OPTIONAL
             			timeRange = @{
             				# OPTIONAL
             				relativeTimeRange = @{
             					# REQUIRED
             					magnitude = $someInt
             					# REQUIRED
             					unit = $someTimeUnitEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TimeUnitEnum]) for enum values.
             				}
             				# OPTIONAL
             				absoluteTimeRange = @{
             					# REQUIRED
             					start = $someDateTime
             					# REQUIRED
             					end = $someDateTime
             				}
             			}
             			# OPTIONAL
             			slaTimeRange = $someSlaComplianceTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaComplianceTimeRange]) for enum values.
             			# OPTIONAL
             			orgId = @(
             				$someString
             			)
             			# OPTIONAL
             			managedId = @(
             				$someString
             			)
             			# OPTIONAL
             			isAnomaly = $someBoolean
             			# OPTIONAL
             			searchTerm = $someString
             			# OPTIONAL
             			complianceStatus = @(
             				$someComplianceStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ComplianceStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			protectionStatus = @(
             				$someProtectionStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProtectionStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			failoverStatus = @(
             				$someFailoverStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			failoverType = $someFailoverTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverTypeEnum]) for enum values.
             			# OPTIONAL
             			source = @(
             				$someString
             			)
             			# OPTIONAL
             			targetSite = @(
             				$someString
             			)
             			# OPTIONAL
             			userAuditObjectType = @(
             				$someUserAuditObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			userAuditType = @(
             				$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			userAuditStatus = @(
             				$someUserAuditStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			replicationSource = @(
             				$someString
             			)
             			# OPTIONAL
             			clusterLocation = @(
             				$someString
             			)
             			# OPTIONAL
             			taskCategory = @(
             				$someString
             			)
             			# OPTIONAL
             			taskStatus = @(
             				$someString
             			)
             			# OPTIONAL
             			taskType = @(
             				$someString
             			)
             			# OPTIONAL
             			policyId = @(
             				$someString
             			)
             			# OPTIONAL
             			sonarObjectTypes = @(
             				$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			shouldApplyWhitelists = $someBoolean
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		isHidden = $someBoolean
             		# OPTIONAL
             		isReadOnly = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncDownloadReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResultsCsv operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: ResultsCsv
             
             $query = New-RscMutationDownload -ResultsCsv
             
             # REQUIRED
             $query.Var.crawlId = $someString
             # OPTIONAL
             $query.Var.downloadFilter = @{
             	# OPTIONAL
             	analyzerGroupIds = @(
             		$someString
             	)
             	# OPTIONAL
             	browseDirectorySnappablePath = @{
             		# OPTIONAL
             		snappableFid = $someString
             		# OPTIONAL
             		stdPath = $someString
             	}
             	# OPTIONAL
             	listFileResultsSnappablePaths = @(
             		@{
             			# OPTIONAL
             			snappableFid = $someString
             			# OPTIONAL
             			stdPath = $someString
             		}
             	)
             	# OPTIONAL
             	listFileResultsSnappableTypes = @(
             		$someString
             	)
             	# OPTIONAL
             	listFileResultsSearchText = $someString
             	# OPTIONAL
             	whitelistEnabled = $someBoolean
             	# REQUIRED
             	fileType = $someFileCountType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileCountType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadResultsCsvReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SapHanaSnapshot operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: SapHanaSnapshot
             
             $query = New-RscMutationDownload -SapHanaSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SapHanaSnapshotFromLocation operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: SapHanaSnapshotFromLocation
             
             $query = New-RscMutationDownload -SapHanaSnapshotFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SapHanaSnapshotsForPointInTimeRecovery operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: SapHanaSnapshotsForPointInTimeRecovery
             
             $query = New-RscMutationDownload -SapHanaSnapshotsForPointInTimeRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	downloadConfig = @{
             		# OPTIONAL
             		pointInTime = $someDateTime
             		# REQUIRED
             		preferredLocationId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnapshotResultsCsv operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: SnapshotResultsCsv
             
             $query = New-RscMutationDownload -SnapshotResultsCsv
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.downloadFilter = @{
             	# OPTIONAL
             	analyzerGroupIds = @(
             		$someString
             	)
             	# OPTIONAL
             	browseDirectorySnappablePath = @{
             		# OPTIONAL
             		snappableFid = $someString
             		# OPTIONAL
             		stdPath = $someString
             	}
             	# OPTIONAL
             	listFileResultsSnappablePaths = @(
             		@{
             			# OPTIONAL
             			snappableFid = $someString
             			# OPTIONAL
             			stdPath = $someString
             		}
             	)
             	# OPTIONAL
             	listFileResultsSnappableTypes = @(
             		$someString
             	)
             	# OPTIONAL
             	listFileResultsSearchText = $someString
             	# OPTIONAL
             	whitelistEnabled = $someBoolean
             	# REQUIRED
             	fileType = $someFileCountType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileCountType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadCsvReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ThreatHuntCsv operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: ThreatHuntCsv
             
             $query = New-RscMutationDownload -ThreatHuntCsv
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	huntId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadThreatHuntCsvReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VolumeGroupSnapshotFiles operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: VolumeGroupSnapshotFiles
             
             $query = New-RscMutationDownload -VolumeGroupSnapshotFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	nextSnapshotFid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		paths = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	deltaTypeFilter = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VolumeGroupSnapshotFromLocation operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: VolumeGroupSnapshotFromLocation
             
             $query = New-RscMutationDownload -VolumeGroupSnapshotFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationExchange">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Microsoft Exchange' API domain:
             BulkUpdateDag, CreateMount, CreateOnDemandBackup, or DeleteSnapshotMount.
             </summary>
             <description>
             New-RscMutationExchange creates a new
             mutation object for operations
             in the 'Microsoft Exchange' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Microsoft Exchange' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkUpdateDag, CreateMount, CreateOnDemandBackup, or DeleteSnapshotMount.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationExchange -BulkUpdateDag).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationExchange -BulkUpdateDag).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkUpdateDag operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: BulkUpdateDag
             
             $query = New-RscMutationExchange -BulkUpdateDag
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	dagUpdateProperties = @(
             		@{
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			updateProperties = @{
             				# REQUIRED
             				backupPreference = $someExchangeBackupPreference # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ExchangeBackupPreference]) for enum values.
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: V1BulkUpdateExchangeDagResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateMount operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: CreateMount
             
             $query = New-RscMutationExchange -CreateMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		smbDomainName = $someString
             		# OPTIONAL
             		smbValidIps = @(
             			$someString
             		)
             		# OPTIONAL
             		smbValidUsers = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandBackup operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: CreateOnDemandBackup
             
             $query = New-RscMutationExchange -CreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		forceFullSnapshot = $someBoolean
             		# OPTIONAL
             		baseOnDemandSnapshotConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshotMount operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: DeleteSnapshotMount
             
             $query = New-RscMutationExchange -DeleteSnapshotMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationFailoverCluster">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Failover Cluster' API domain:
             BulkDelete, BulkDeleteApp, Create, CreateApp, Delete, DeleteApp, Update, or UpdateApp.
             </summary>
             <description>
             New-RscMutationFailoverCluster creates a new
             mutation object for operations
             in the 'Failover Cluster' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Failover Cluster' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkDelete, BulkDeleteApp, Create, CreateApp, Delete, DeleteApp, Update, or UpdateApp.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationFailoverCluster -BulkDelete).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationFailoverCluster -BulkDelete).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkDelete operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: BulkDelete
             
             $query = New-RscMutationFailoverCluster -BulkDelete
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	ids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkDeleteApp operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: BulkDeleteApp
             
             $query = New-RscMutationFailoverCluster -BulkDeleteApp
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	ids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Create operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: Create
             
             $query = New-RscMutationFailoverCluster -Create
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# REQUIRED
             		hostIds = @(
             			$someString
             		)
             		# REQUIRED
             		name = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateFailoverClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateApp operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: CreateApp
             
             $query = New-RscMutationFailoverCluster -CreateApp
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# REQUIRED
             		failoverClusterType = $someFailoverClusterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverClusterType]) for enum values.
             		# REQUIRED
             		failoverClusterAppSource = @{
             			# OPTIONAL
             			nodeOrders = @(
             				@{
             					# OPTIONAL
             					nodeName = $someString
             					# REQUIRED
             					nodeId = $someString
             					# REQUIRED
             					order = $someInt
             				}
             			)
             			# OPTIONAL
             			virtualIps = @(
             				$someString
             			)
             			# OPTIONAL
             			vips = @(
             				$someString
             			)
             		}
             		# REQUIRED
             		failoverClusterId = $someString
             		# REQUIRED
             		name = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateFailoverClusterAppReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: Delete
             
             $query = New-RscMutationFailoverCluster -Delete
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteApp operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: DeleteApp
             
             $query = New-RscMutationFailoverCluster -DeleteApp
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: Update
             
             $query = New-RscMutationFailoverCluster -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# REQUIRED
             		hostIds = @(
             			$someString
             		)
             		# REQUIRED
             		name = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateFailoverClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateApp operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: UpdateApp
             
             $query = New-RscMutationFailoverCluster -UpdateApp
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# REQUIRED
             		failoverClusterType = $someFailoverClusterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverClusterType]) for enum values.
             		# REQUIRED
             		failoverClusterAppSource = @{
             			# OPTIONAL
             			nodeOrders = @(
             				@{
             					# OPTIONAL
             					nodeName = $someString
             					# REQUIRED
             					nodeId = $someString
             					# REQUIRED
             					order = $someInt
             				}
             			)
             			# OPTIONAL
             			virtualIps = @(
             				$someString
             			)
             			# OPTIONAL
             			vips = @(
             				$someString
             			)
             		}
             		# REQUIRED
             		failoverClusterId = $someString
             		# REQUIRED
             		name = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateFailoverClusterAppReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationFileset">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Fileset' API domain:
             BulkCreate, BulkCreateTemplates, BulkDelete, BulkDeleteTemplate, BulkUpdateTemplate, or RecoverFiles.
             </summary>
             <description>
             New-RscMutationFileset creates a new
             mutation object for operations
             in the 'Fileset' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Fileset' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkCreate, BulkCreateTemplates, BulkDelete, BulkDeleteTemplate, BulkUpdateTemplate, or RecoverFiles.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationFileset -BulkCreate).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationFileset -BulkCreate).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkCreate operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: BulkCreate
             
             $query = New-RscMutationFileset -BulkCreate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	definitions = @(
             		@{
             			# OPTIONAL
             			arraySpec = @{
             				# OPTIONAL
             				proxyHostId = $someString
             			}
             			# OPTIONAL
             			hostId = $someString
             			# OPTIONAL
             			isPassthrough = $someBoolean
             			# OPTIONAL
             			shareId = $someString
             			# OPTIONAL
             			enableHardlinkSupport = $someBoolean
             			# OPTIONAL
             			enableSymlinkResolution = $someBoolean
             			# OPTIONAL
             			failoverClusterAppId = $someString
             			# OPTIONAL
             			snapMirrorLabelForFullBackup = $someString
             			# OPTIONAL
             			snapMirrorLabelForIncrementalBackup = $someString
             			# OPTIONAL
             			isManagedByPolaris = $someBoolean
             			# OPTIONAL
             			isPolarisNasModel = $someBoolean
             			# REQUIRED
             			templateId = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkCreateFilesetsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkCreateTemplates operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: BulkCreateTemplates
             
             $query = New-RscMutationFileset -BulkCreateTemplates
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	definitions = @(
             		@{
             			# OPTIONAL
             			backupScriptErrorHandling = $someString
             			# OPTIONAL
             			backupScriptTimeout = $someInt64
             			# OPTIONAL
             			exceptions = @(
             				$someString
             			)
             			# OPTIONAL
             			excludes = @(
             				$someString
             			)
             			# OPTIONAL
             			isArrayEnabled = $someBoolean
             			# OPTIONAL
             			postBackupScript = $someString
             			# OPTIONAL
             			preBackupScript = $someString
             			# OPTIONAL
             			isCreatedByKupr = $someBoolean
             			# OPTIONAL
             			isCreatedByPolarisNas = $someBoolean
             			# OPTIONAL
             			filesetOptions = @{
             				# OPTIONAL
             				allowBackupHiddenFoldersInNetworkMounts = $someBoolean
             				# OPTIONAL
             				allowBackupNetworkMounts = $someBoolean
             				# OPTIONAL
             				useWindowsVss = $someBoolean
             			}
             			# OPTIONAL
             			operatingSystemType = $someFilesetTemplateCreateOperatingSystemType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FilesetTemplateCreateOperatingSystemType]) for enum values.
             			# OPTIONAL
             			shareType = $someFilesetTemplateCreateShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FilesetTemplateCreateShareType]) for enum values.
             			# REQUIRED
             			includes = @(
             				$someString
             			)
             			# REQUIRED
             			name = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkCreateFilesetTemplatesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkDelete operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: BulkDelete
             
             $query = New-RscMutationFileset -BulkDelete
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	ids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkDeleteTemplate operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: BulkDeleteTemplate
             
             $query = New-RscMutationFileset -BulkDeleteTemplate
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	ids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkUpdateTemplate operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: BulkUpdateTemplate
             
             $query = New-RscMutationFileset -BulkUpdateTemplate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	definitions = @(
             		@{
             			# OPTIONAL
             			backupScriptErrorHandling = $someString
             			# OPTIONAL
             			backupScriptTimeout = $someInt64
             			# OPTIONAL
             			exceptions = @(
             				$someString
             			)
             			# OPTIONAL
             			excludes = @(
             				$someString
             			)
             			# OPTIONAL
             			includes = @(
             				$someString
             			)
             			# OPTIONAL
             			name = $someString
             			# OPTIONAL
             			postBackupScript = $someString
             			# OPTIONAL
             			preBackupScript = $someString
             			# OPTIONAL
             			isCreatedByKupr = $someBoolean
             			# OPTIONAL
             			isCreatedByPolarisNas = $someBoolean
             			# OPTIONAL
             			filesetOptions = @{
             				# OPTIONAL
             				allowBackupHiddenFoldersInNetworkMounts = $someBoolean
             				# OPTIONAL
             				allowBackupNetworkMounts = $someBoolean
             				# OPTIONAL
             				useWindowsVss = $someBoolean
             			}
             			# OPTIONAL
             			operatingSystemType = $someFilesetTemplatePatchOperatingSystemType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FilesetTemplatePatchOperatingSystemType]) for enum values.
             			# OPTIONAL
             			shareType = $someFilesetTemplatePatchShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FilesetTemplatePatchShareType]) for enum values.
             			# REQUIRED
             			id = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateFilesetTemplateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverFiles operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: RecoverFiles
             
             $query = New-RscMutationFileset -RecoverFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotFid = $someString
             	# OPTIONAL
             	nextSnapshotFid = $someString
             	# REQUIRED
             	restorePathPairList = @(
             		@{
             			# OPTIONAL
             			path = $someString
             			# OPTIONAL
             			restorePath = $someString
             		}
             	)
             	# OPTIONAL
             	deltaTypeFilter = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		ignoreErrors = $someBoolean
             		# OPTIONAL
             		shouldRecreateDirectoryStructure = $someBoolean
             		# REQUIRED
             		restoreConfig = @(
             			@{
             				# OPTIONAL
             				restorePathPair = @{
             					# OPTIONAL
             					restorePath = $someString
             					# REQUIRED
             					path = $someString
             				}
             			}
             		)
             	}
             	# REQUIRED
             	shareType = $someShareTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ShareTypeEnum]) for enum values.
             	# REQUIRED
             	osType = $someGuestOsType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GuestOsType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationGcp">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'Google Cloud Platform' API domain:
             CloudAccountAddManualAuthProject, CloudAccountAddProjects, CloudAccountDeleteProjects, CloudAccountOauthComplete, CloudAccountOauthInitiate, CloudAccountUpgradeProjects, CreateReaderTarget, CreateTarget, SetDefaultServiceAccountJwtConfig, UpdateTarget, or UpgradeCloudAccountPermissionsWithoutOauth.
             </summary>
             <description>
             New-RscMutationGcp creates a new
             mutation object for operations
             in the 'Google Cloud Platform' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'Google Cloud Platform' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CloudAccountAddManualAuthProject, CloudAccountAddProjects, CloudAccountDeleteProjects, CloudAccountOauthComplete, CloudAccountOauthInitiate, CloudAccountUpgradeProjects, CreateReaderTarget, CreateTarget, SetDefaultServiceAccountJwtConfig, UpdateTarget, or UpgradeCloudAccountPermissionsWithoutOauth.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationGcp -CloudAccountAddManualAuthProject).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationGcp -CloudAccountAddManualAuthProject).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CloudAccountAddManualAuthProject operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountAddManualAuthProject
             
             $query = New-RscMutationGcp -CloudAccountAddManualAuthProject
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	gcpNativeProjectId = $someString
             	# REQUIRED
             	gcpProjectName = $someString
             	# REQUIRED
             	gcpProjectNumber = $someInt64
             	# OPTIONAL
             	organizationName = $someString
             	# OPTIONAL
             	serviceAccountJwtConfig = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountAddProjects operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountAddProjects
             
             $query = New-RscMutationGcp -CloudAccountAddProjects
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	nativeProtectionProjectIds = @(
             		$someString
             	)
             	# REQUIRED
             	sharedVpcHostProjectIds = @(
             		$someString
             	)
             	# REQUIRED
             	cloudAccountsProjectIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpCloudAccountAddProjectsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountDeleteProjects operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountDeleteProjects
             
             $query = New-RscMutationGcp -CloudAccountDeleteProjects
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sessionId = $someString
             	# REQUIRED
             	nativeProtectionProjectIds = @(
             		$someString
             	)
             	# REQUIRED
             	sharedVpcHostProjectIds = @(
             		$someString
             	)
             	# REQUIRED
             	cloudAccountsProjectIds = @(
             		$someString
             	)
             	# REQUIRED
             	skipResourceDeletion = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpCloudAccountDeleteProjectsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountOauthComplete operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountOauthComplete
             
             $query = New-RscMutationGcp -CloudAccountOauthComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	authorizationCode = $someString
             	# REQUIRED
             	redirectUrl = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpCloudAccountOauthCompleteReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountOauthInitiate operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountOauthInitiate
             
             $query = New-RscMutationGcp -CloudAccountOauthInitiate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	customerUrl = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpCloudAccountOauthInitiateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountUpgradeProjects operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountUpgradeProjects
             
             $query = New-RscMutationGcp -CloudAccountUpgradeProjects
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	projectIds = @(
             		$someString
             	)
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpCloudAccountUpgradeProjectsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateReaderTarget operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CreateReaderTarget
             
             $query = New-RscMutationGcp -CreateReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	region = $someGcpRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpRegion]) for enum values.
             	# REQUIRED
             	storageClass = $someGcpStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpStorageClass]) for enum values.
             	# REQUIRED
             	bucket = $someString
             	# REQUIRED
             	encryptionPassword = $someString
             	# REQUIRED
             	serviceAccountJsonKey = $someString
             	# OPTIONAL
             	archivalProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateTarget operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CreateTarget
             
             $query = New-RscMutationGcp -CreateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	region = $someGcpRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpRegion]) for enum values.
             	# REQUIRED
             	storageClass = $someGcpStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpStorageClass]) for enum values.
             	# REQUIRED
             	bucket = $someString
             	# REQUIRED
             	encryptionPassword = $someString
             	# REQUIRED
             	serviceAccountJsonKey = $someString
             	# OPTIONAL
             	archivalProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# REQUIRED
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetDefaultServiceAccountJwtConfig operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: SetDefaultServiceAccountJwtConfig
             
             $query = New-RscMutationGcp -SetDefaultServiceAccountJwtConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	serviceAccountName = $someString
             	# REQUIRED
             	serviceAccountJwtConfig = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: UpdateTarget
             
             $query = New-RscMutationGcp -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	region = $someGcpRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpRegion]) for enum values.
             	# OPTIONAL
             	storageClass = $someGcpStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpStorageClass]) for enum values.
             	# OPTIONAL
             	bucket = $someString
             	# OPTIONAL
             	encryptionPassword = $someString
             	# OPTIONAL
             	serviceAccountJsonKey = $someString
             	# OPTIONAL
             	archivalProxySettings = @{
             		# OPTIONAL
             		proxyServer = $someString
             		# OPTIONAL
             		portNumber = $someInt
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		protocol = $someString
             	}
             	# OPTIONAL
             	bypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeCloudAccountPermissionsWithoutOauth operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: UpgradeCloudAccountPermissionsWithoutOauth
             
             $query = New-RscMutationGcp -UpgradeCloudAccountPermissionsWithoutOauth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpgradeGcpCloudAccountPermissionsWithoutOauthReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationGcpNative">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Google Cloud Platform Native' API domain:
             DisableProject, ExcludeDisksFromInstanceSnapshot, ExportDisk, ExportGceInstance, RefreshProjects, or RestoreGceInstance.
             </summary>
             <description>
             New-RscMutationGcpNative creates a new
             mutation object for operations
             in the 'Google Cloud Platform Native' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Google Cloud Platform Native' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: DisableProject, ExcludeDisksFromInstanceSnapshot, ExportDisk, ExportGceInstance, RefreshProjects, or RestoreGceInstance.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationGcpNative -DisableProject).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationGcpNative -DisableProject).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the DisableProject operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: DisableProject
             
             $query = New-RscMutationGcpNative -DisableProject
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	projectId = $someString
             	# REQUIRED
             	shouldDeleteNativeSnapshots = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExcludeDisksFromInstanceSnapshot operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: ExcludeDisksFromInstanceSnapshot
             
             $query = New-RscMutationGcpNative -ExcludeDisksFromInstanceSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	instanceId = $someString
             	# REQUIRED
             	diskIdToIsExcluded = @(
             		@{
             			# REQUIRED
             			diskId = $someString
             			# REQUIRED
             			isExcluded = $someBoolean
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportDisk operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: ExportDisk
             
             $query = New-RscMutationGcpNative -ExportDisk
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	targetRegion = $someString
             	# OPTIONAL
             	targetZone = $someString
             	# REQUIRED
             	targetDiskName = $someString
             	# REQUIRED
             	targetDiskType = $someString
             	# REQUIRED
             	targetDiskSizeGb = $someInt
             	# REQUIRED
             	replaceAttached = $someBoolean
             	# OPTIONAL
             	replicaZones = @(
             		$someString
             	)
             	# REQUIRED
             	shouldCopyLabels = $someBoolean
             	# REQUIRED
             	shouldAddRubrikLabels = $someBoolean
             	# REQUIRED
             	diskEncryptionType = $someDiskEncryptionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DiskEncryptionType]) for enum values.
             	# OPTIONAL
             	kmsCryptoKey = @{
             		# OPTIONAL
             		projectNativeId = $someString
             		# OPTIONAL
             		location = $someString
             		# OPTIONAL
             		keyRing = $someString
             		# OPTIONAL
             		key = $someString
             	}
             	# OPTIONAL
             	kmsCryptoKeyResourceId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportGceInstance operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: ExportGceInstance
             
             $query = New-RscMutationGcpNative -ExportGceInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	targetZone = $someString
             	# REQUIRED
             	targetInstanceName = $someString
             	# REQUIRED
             	targetMachineType = $someString
             	# REQUIRED
             	targetSubnetName = $someString
             	# OPTIONAL
             	targetNetworkTags = @(
             		$someString
             	)
             	# REQUIRED
             	shouldPowerOff = $someBoolean
             	# REQUIRED
             	shouldCopyLabels = $someBoolean
             	# REQUIRED
             	shouldAddRubrikLabels = $someBoolean
             	# OPTIONAL
             	sharedVpcHostProjectNativeId = $someString
             	# REQUIRED
             	diskEncryptionType = $someDiskEncryptionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DiskEncryptionType]) for enum values.
             	# OPTIONAL
             	kmsCryptoKey = @{
             		# OPTIONAL
             		projectNativeId = $someString
             		# OPTIONAL
             		location = $someString
             		# OPTIONAL
             		keyRing = $someString
             		# OPTIONAL
             		key = $someString
             	}
             	# OPTIONAL
             	kmsCryptoKeyResourceId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshProjects operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: RefreshProjects
             
             $query = New-RscMutationGcpNative -RefreshProjects
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	projectIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreGceInstance operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: RestoreGceInstance
             
             $query = New-RscMutationGcpNative -RestoreGceInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	shouldAddRubrikLabels = $someBoolean
             	# REQUIRED
             	shouldRestoreLabels = $someBoolean
             	# REQUIRED
             	shouldStartRestoredInstance = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationHost">
             <summary>
             Create a new RscQuery object for any of the 7
             operations in the 'Host' API domain:
             BulkDelete, BulkRefresh, BulkRegister, BulkRegisterAsync, BulkUpdate, ChangeVfd, or Refresh.
             </summary>
             <description>
             New-RscMutationHost creates a new
             mutation object for operations
             in the 'Host' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 7 operations
             in the 'Host' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkDelete, BulkRefresh, BulkRegister, BulkRegisterAsync, BulkUpdate, ChangeVfd, or Refresh.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationHost -BulkDelete).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationHost -BulkDelete).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkDelete operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: BulkDelete
             
             $query = New-RscMutationHost -BulkDelete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkRefresh operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: BulkRefresh
             
             $query = New-RscMutationHost -BulkRefresh
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ids = @(
             		$someString
             	)
             	# REQUIRED
             	shouldRunAsynchronously = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkRefreshHostsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkRegister operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: BulkRegister
             
             $query = New-RscMutationHost -BulkRegister
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	hosts = @(
             		@{
             			# OPTIONAL
             			hasAgent = $someBoolean
             			# OPTIONAL
             			nasConfig = @{
             				# OPTIONAL
             				apiCertificate = $someString
             				# OPTIONAL
             				apiEndpoint = $someString
             				# OPTIONAL
             				apiHostname = $someString
             				# OPTIONAL
             				apiPassword = $someString
             				# OPTIONAL
             				apiToken = $someString
             				# OPTIONAL
             				apiUsername = $someString
             				# OPTIONAL
             				zoneName = $someString
             				# OPTIONAL
             				isSnapdiffEnabled = $someBoolean
             				# OPTIONAL
             				isIsilonChangelistEnabled = $someBoolean
             				# OPTIONAL
             				isNetAppSnapDiffEnabled = $someBoolean
             				# OPTIONAL
             				isShareAutoDiscoveryEnabled = $someBoolean
             				# OPTIONAL
             				isNutanixCftEnabled = $someBoolean
             				# REQUIRED
             				vendorType = $someString
             			}
             			# OPTIONAL
             			oracleQueryUser = $someString
             			# OPTIONAL
             			oracleSysDbaUser = $someString
             			# OPTIONAL
             			organizationId = $someString
             			# OPTIONAL
             			alias = $someString
             			# OPTIONAL
             			hdfsConfig = @{
             				# OPTIONAL
             				hdfsBaseConfig = @{
             					# OPTIONAL
             					apiToken = $someString
             					# OPTIONAL
             					kerberosTicket = $someString
             					# OPTIONAL
             					nameservices = $someString
             					# OPTIONAL
             					username = $someString
             					# REQUIRED
             					hosts = @(
             						@{
             							# REQUIRED
             							hostname = $someString
             							# REQUIRED
             							port = $someInt
             						}
             					)
             				}
             			}
             			# OPTIONAL
             			isOracleHost = $someBoolean
             			# OPTIONAL
             			orgNetworkId = $someString
             			# REQUIRED
             			hostname = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkRegisterHostReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkRegisterAsync operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: BulkRegisterAsync
             
             $query = New-RscMutationHost -BulkRegisterAsync
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	hosts = @(
             		@{
             			# OPTIONAL
             			hasAgent = $someBoolean
             			# OPTIONAL
             			nasConfig = @{
             				# OPTIONAL
             				apiCertificate = $someString
             				# OPTIONAL
             				apiEndpoint = $someString
             				# OPTIONAL
             				apiHostname = $someString
             				# OPTIONAL
             				apiPassword = $someString
             				# OPTIONAL
             				apiToken = $someString
             				# OPTIONAL
             				apiUsername = $someString
             				# OPTIONAL
             				zoneName = $someString
             				# OPTIONAL
             				isSnapdiffEnabled = $someBoolean
             				# OPTIONAL
             				isIsilonChangelistEnabled = $someBoolean
             				# OPTIONAL
             				isNetAppSnapDiffEnabled = $someBoolean
             				# OPTIONAL
             				isShareAutoDiscoveryEnabled = $someBoolean
             				# OPTIONAL
             				isNutanixCftEnabled = $someBoolean
             				# REQUIRED
             				vendorType = $someString
             			}
             			# OPTIONAL
             			oracleQueryUser = $someString
             			# OPTIONAL
             			oracleSysDbaUser = $someString
             			# OPTIONAL
             			organizationId = $someString
             			# OPTIONAL
             			alias = $someString
             			# OPTIONAL
             			hdfsConfig = @{
             				# OPTIONAL
             				hdfsBaseConfig = @{
             					# OPTIONAL
             					apiToken = $someString
             					# OPTIONAL
             					kerberosTicket = $someString
             					# OPTIONAL
             					nameservices = $someString
             					# OPTIONAL
             					username = $someString
             					# REQUIRED
             					hosts = @(
             						@{
             							# REQUIRED
             							hostname = $someString
             							# REQUIRED
             							port = $someInt
             						}
             					)
             				}
             			}
             			# OPTIONAL
             			isOracleHost = $someBoolean
             			# OPTIONAL
             			orgNetworkId = $someString
             			# REQUIRED
             			hostname = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkRegisterHostAsyncReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkUpdate operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: BulkUpdate
             
             $query = New-RscMutationHost -BulkUpdate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	hostUpdateProperties = @(
             		@{
             			# REQUIRED
             			hostId = $someString
             			# REQUIRED
             			updateProperties = @{
             				# OPTIONAL
             				compressionEnabled = $someBoolean
             				# OPTIONAL
             				hostVfdDriverInstalled = $someBoolean
             				# OPTIONAL
             				hostname = $someString
             				# OPTIONAL
             				mssqlCbtDriverInstalled = $someBoolean
             				# OPTIONAL
             				nasConfig = @{
             					# OPTIONAL
             					apiCertificate = $someString
             					# OPTIONAL
             					apiEndpoint = $someString
             					# OPTIONAL
             					apiHostname = $someString
             					# OPTIONAL
             					apiPassword = $someString
             					# OPTIONAL
             					apiToken = $someString
             					# OPTIONAL
             					apiUsername = $someString
             					# OPTIONAL
             					zoneName = $someString
             					# OPTIONAL
             					isSnapdiffEnabled = $someBoolean
             					# OPTIONAL
             					isIsilonChangelistEnabled = $someBoolean
             					# OPTIONAL
             					isNetAppSnapDiffEnabled = $someBoolean
             					# OPTIONAL
             					isShareAutoDiscoveryEnabled = $someBoolean
             					# OPTIONAL
             					isNutanixCftEnabled = $someBoolean
             					# REQUIRED
             					vendorType = $someString
             				}
             				# OPTIONAL
             				oracleQueryUser = $someString
             				# OPTIONAL
             				oracleSysDbaUser = $someString
             				# OPTIONAL
             				alias = $someString
             				# OPTIONAL
             				hdfsConfig = @{
             					# OPTIONAL
             					hdfsBaseConfig = @{
             						# OPTIONAL
             						apiToken = $someString
             						# OPTIONAL
             						kerberosTicket = $someString
             						# OPTIONAL
             						nameservices = $someString
             						# OPTIONAL
             						username = $someString
             						# REQUIRED
             						hosts = @(
             							@{
             								# REQUIRED
             								hostname = $someString
             								# REQUIRED
             								port = $someInt
             							}
             						)
             					}
             				}
             				# OPTIONAL
             				isOracleHost = $someBoolean
             				# OPTIONAL
             				isUpdateCertAndAgentIdEnabled = $someBoolean
             				# OPTIONAL
             				isRefreshPaused = $someBoolean
             				# OPTIONAL
             				hostVfdEnabled = $someHostVfdInstallConfig # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HostVfdInstallConfig]) for enum values.
             				# OPTIONAL
             				mssqlCbtEnabled = $someMssqlCbtStatusType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlCbtStatusType]) for enum values.
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateHostReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ChangeVfd operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: ChangeVfd
             
             $query = New-RscMutationHost -ChangeVfd
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		hostIds = @(
             			$someString
             		)
             		# REQUIRED
             		install = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ChangeVfdOnHostReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Refresh operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: Refresh
             
             $query = New-RscMutationHost -Refresh
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RefreshHostReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationHyperv">
             <summary>
             Create a new RscQuery object for any of the 24
             operations in the 'Microsoft Hyper-V' API domain:
             BatchExportVm, BatchInstantRecoverVm, BatchMountVm, BatchOnDemandBackupVm, CreateVirtualMachineSnapshotMount, DeleteAllSnapshots, DeleteVirtualMachineSnapshot, DeleteVirtualMachineSnapshotMount, DownloadSnapshotFromLocation, DownloadVirtualMachineSnapshot, DownloadVirtualMachineSnapshotFiles, ExportVirtualMachine, InplaceExportVirtualMachine, InstantRecoverVirtualMachineSnapshot, OnDemandSnapshot, RefreshScvmm, RefreshServer, RegisterAgentVirtualMachine, RegisterScvmm, RestoreVirtualMachineSnapshotFiles, ScvmmDelete, ScvmmUpdate, UpdateVirtualMachine, or UpdateVirtualMachineSnapshotMount.
             </summary>
             <description>
             New-RscMutationHyperv creates a new
             mutation object for operations
             in the 'Microsoft Hyper-V' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 24 operations
             in the 'Microsoft Hyper-V' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BatchExportVm, BatchInstantRecoverVm, BatchMountVm, BatchOnDemandBackupVm, CreateVirtualMachineSnapshotMount, DeleteAllSnapshots, DeleteVirtualMachineSnapshot, DeleteVirtualMachineSnapshotMount, DownloadSnapshotFromLocation, DownloadVirtualMachineSnapshot, DownloadVirtualMachineSnapshotFiles, ExportVirtualMachine, InplaceExportVirtualMachine, InstantRecoverVirtualMachineSnapshot, OnDemandSnapshot, RefreshScvmm, RefreshServer, RegisterAgentVirtualMachine, RegisterScvmm, RestoreVirtualMachineSnapshotFiles, ScvmmDelete, ScvmmUpdate, UpdateVirtualMachine, or UpdateVirtualMachineSnapshotMount.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationHyperv -BatchExportVm).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationHyperv -BatchExportVm).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BatchExportVm operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: BatchExportVm
             
             $query = New-RscMutationHyperv -BatchExportVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				exportConfig = @{
             					# OPTIONAL
             					disableNetwork = $someBoolean
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					powerOn = $someBoolean
             					# OPTIONAL
             					removeNetworkDevices = $someBoolean
             					# OPTIONAL
             					vmName = $someString
             					# REQUIRED
             					path = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchExportHypervVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchInstantRecoverVm operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: BatchInstantRecoverVm
             
             $query = New-RscMutationHyperv -BatchInstantRecoverVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# REQUIRED
             				instantRecoveryConfig = @{
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					vmName = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchInstantRecoverHypervVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchMountVm operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: BatchMountVm
             
             $query = New-RscMutationHyperv -BatchMountVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				mountConfig = @{
             					# OPTIONAL
             					disableNetwork = $someBoolean
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					powerOn = $someBoolean
             					# OPTIONAL
             					removeNetworkDevices = $someBoolean
             					# OPTIONAL
             					vmName = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchMountHypervVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchOnDemandBackupVm operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: BatchOnDemandBackupVm
             
             $query = New-RscMutationHyperv -BatchOnDemandBackupVm
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	userNote = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		vms = @(
             			@{
             				# OPTIONAL
             				backupConfig = @{
             					# OPTIONAL
             					slaId = $someString
             				}
             				# OPTIONAL
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchOnDemandBackupHypervVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateVirtualMachineSnapshotMount operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: CreateVirtualMachineSnapshotMount
             
             $query = New-RscMutationHyperv -CreateVirtualMachineSnapshotMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		disableNetwork = $someBoolean
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		powerOn = $someBoolean
             		# OPTIONAL
             		removeNetworkDevices = $someBoolean
             		# OPTIONAL
             		vmName = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAllSnapshots operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DeleteAllSnapshots
             
             $query = New-RscMutationHyperv -DeleteAllSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteVirtualMachineSnapshot operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DeleteVirtualMachineSnapshot
             
             $query = New-RscMutationHyperv -DeleteVirtualMachineSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	location = $someInternalDeleteHypervVirtualMachineSnapshotRequestLocation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalDeleteHypervVirtualMachineSnapshotRequestLocation]) for enum values.
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteVirtualMachineSnapshotMount operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DeleteVirtualMachineSnapshotMount
             
             $query = New-RscMutationHyperv -DeleteVirtualMachineSnapshotMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	force = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshotFromLocation operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DownloadSnapshotFromLocation
             
             $query = New-RscMutationHyperv -DownloadSnapshotFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadVirtualMachineSnapshot operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DownloadVirtualMachineSnapshot
             
             $query = New-RscMutationHyperv -DownloadVirtualMachineSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadVirtualMachineSnapshotFiles operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: DownloadVirtualMachineSnapshotFiles
             
             $query = New-RscMutationHyperv -DownloadVirtualMachineSnapshotFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		paths = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportVirtualMachine operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ExportVirtualMachine
             
             $query = New-RscMutationHyperv -ExportVirtualMachine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		disableNetwork = $someBoolean
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		powerOn = $someBoolean
             		# OPTIONAL
             		removeNetworkDevices = $someBoolean
             		# OPTIONAL
             		vmName = $someString
             		# REQUIRED
             		path = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InplaceExportVirtualMachine operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: InplaceExportVirtualMachine
             
             $query = New-RscMutationHyperv -InplaceExportVirtualMachine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		exportVmPath = $someString
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		shouldKeepHypervSnapshotAfterRecovery = $someBoolean
             		# OPTIONAL
             		shouldKeepHypervVmCopyAfterRecovery = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InstantRecoverVirtualMachineSnapshot operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: InstantRecoverVirtualMachineSnapshot
             
             $query = New-RscMutationHyperv -InstantRecoverVirtualMachineSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		vmName = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OnDemandSnapshot operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: OnDemandSnapshot
             
             $query = New-RscMutationHyperv -OnDemandSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshScvmm operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RefreshScvmm
             
             $query = New-RscMutationHyperv -RefreshScvmm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshServer operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RefreshServer
             
             $query = New-RscMutationHyperv -RefreshServer
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterAgentVirtualMachine operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RegisterAgentVirtualMachine
             
             $query = New-RscMutationHyperv -RegisterAgentVirtualMachine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterScvmm operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RegisterScvmm
             
             $query = New-RscMutationHyperv -RegisterScvmm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	scvmm = @{
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		runAsAccount = $someString
             		# REQUIRED
             		shouldDeployAgent = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreVirtualMachineSnapshotFiles operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: RestoreVirtualMachineSnapshotFiles
             
             $query = New-RscMutationHyperv -RestoreVirtualMachineSnapshotFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetVirtualMachineId = $someString
             		# REQUIRED
             		restoreConfig = @(
             			@{
             				# REQUIRED
             				path = $someString
             				# REQUIRED
             				restorePath = $someString
             			}
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScvmmDelete operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ScvmmDelete
             
             $query = New-RscMutationHyperv -ScvmmDelete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScvmmUpdate operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ScvmmUpdate
             
             $query = New-RscMutationHyperv -ScvmmUpdate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		runAsAccount = $someString
             		# OPTIONAL
             		shouldDeployAgent = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervScvmmUpdateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateVirtualMachine operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: UpdateVirtualMachine
             
             $query = New-RscMutationHyperv -UpdateVirtualMachine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	vmUpdateProperties = @{
             		# OPTIONAL
             		cloudInstantiationSpec = @{
             			# REQUIRED
             			imageRetentionInSeconds = $someInt64
             		}
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		virtualDiskIdsExcludedFromSnapshot = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateHypervVirtualMachineReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateVirtualMachineSnapshotMount operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: UpdateVirtualMachineSnapshotMount
             
             $query = New-RscMutationHyperv -UpdateVirtualMachineSnapshotMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		powerStatus = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateHypervVirtualMachineSnapshotMountReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationIntegration">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Integration' API domain:
             CreateIntegration, CreateIntegrations, DeleteIntegration, DeleteIntegrations, UpdateIntegration, or UpdateIntegrations.
             </summary>
             <description>
             New-RscMutationIntegration creates a new
             mutation object for operations
             in the 'Integration' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Integration' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateIntegration, CreateIntegrations, DeleteIntegration, DeleteIntegrations, UpdateIntegration, or UpdateIntegrations.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationIntegration -CreateIntegration).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationIntegration -CreateIntegration).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateIntegration operation
             of the 'Integration' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Integration
             # API Operation: CreateIntegration
             
             $query = New-RscMutationIntegration -CreateIntegration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	integrationType = $someIntegrationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IntegrationType]) for enum values.
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		dataLossPrevention = @{
             			# OPTIONAL
             			policies = @(
             				$someString
             			)
             			# OPTIONAL
             			genericNas = @{
             				# REQUIRED
             				workloadId = $someString
             				# REQUIRED
             				shareType = $someDlpConfigShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigShareType]) for enum values.
             				# REQUIRED
             				shareId = $someString
             				# REQUIRED
             				path = $someString
             			}
             			# OPTIONAL
             			vmwareVm = @{
             				# REQUIRED
             				workloadId = $someString
             				# REQUIRED
             				osType = $someDlpConfigOsType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigOsType]) for enum values.
             				# REQUIRED
             				path = $someString
             			}
             			# OPTIONAL
             			serviceAccountId = $someString
             			# OPTIONAL
             			serviceAccountName = $someString
             			# OPTIONAL
             			status = @{
             				# OPTIONAL
             				code = $someDlpStatusCode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpStatusCode]) for enum values.
             			}
             			# REQUIRED
             			targetType = $someDlpConfigTargetType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigTargetType]) for enum values.
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateIntegrationReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateIntegrations operation
             of the 'Integration' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Integration
             # API Operation: CreateIntegrations
             
             $query = New-RscMutationIntegration -CreateIntegrations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	integrations = @(
             		@{
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			integrationType = $someIntegrationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IntegrationType]) for enum values.
             			# REQUIRED
             			config = @{
             				# OPTIONAL
             				dataLossPrevention = @{
             					# OPTIONAL
             					policies = @(
             						$someString
             					)
             					# OPTIONAL
             					genericNas = @{
             						# REQUIRED
             						workloadId = $someString
             						# REQUIRED
             						shareType = $someDlpConfigShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigShareType]) for enum values.
             						# REQUIRED
             						shareId = $someString
             						# REQUIRED
             						path = $someString
             					}
             					# OPTIONAL
             					vmwareVm = @{
             						# REQUIRED
             						workloadId = $someString
             						# REQUIRED
             						osType = $someDlpConfigOsType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigOsType]) for enum values.
             						# REQUIRED
             						path = $someString
             					}
             					# OPTIONAL
             					serviceAccountId = $someString
             					# OPTIONAL
             					serviceAccountName = $someString
             					# OPTIONAL
             					status = @{
             						# OPTIONAL
             						code = $someDlpStatusCode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpStatusCode]) for enum values.
             					}
             					# REQUIRED
             					targetType = $someDlpConfigTargetType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigTargetType]) for enum values.
             				}
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateIntegrationsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteIntegration operation
             of the 'Integration' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Integration
             # API Operation: DeleteIntegration
             
             $query = New-RscMutationIntegration -DeleteIntegration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt64
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteIntegrations operation
             of the 'Integration' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Integration
             # API Operation: DeleteIntegrations
             
             $query = New-RscMutationIntegration -DeleteIntegrations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ids = @(
             		$someInt64
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateIntegration operation
             of the 'Integration' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Integration
             # API Operation: UpdateIntegration
             
             $query = New-RscMutationIntegration -UpdateIntegration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt64
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	integrationType = $someIntegrationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IntegrationType]) for enum values.
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		dataLossPrevention = @{
             			# OPTIONAL
             			policies = @(
             				$someString
             			)
             			# OPTIONAL
             			genericNas = @{
             				# REQUIRED
             				workloadId = $someString
             				# REQUIRED
             				shareType = $someDlpConfigShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigShareType]) for enum values.
             				# REQUIRED
             				shareId = $someString
             				# REQUIRED
             				path = $someString
             			}
             			# OPTIONAL
             			vmwareVm = @{
             				# REQUIRED
             				workloadId = $someString
             				# REQUIRED
             				osType = $someDlpConfigOsType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigOsType]) for enum values.
             				# REQUIRED
             				path = $someString
             			}
             			# OPTIONAL
             			serviceAccountId = $someString
             			# OPTIONAL
             			serviceAccountName = $someString
             			# OPTIONAL
             			status = @{
             				# OPTIONAL
             				code = $someDlpStatusCode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpStatusCode]) for enum values.
             			}
             			# REQUIRED
             			targetType = $someDlpConfigTargetType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigTargetType]) for enum values.
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateIntegrations operation
             of the 'Integration' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Integration
             # API Operation: UpdateIntegrations
             
             $query = New-RscMutationIntegration -UpdateIntegrations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	integrations = @(
             		@{
             			# REQUIRED
             			id = $someInt64
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			integrationType = $someIntegrationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IntegrationType]) for enum values.
             			# REQUIRED
             			config = @{
             				# OPTIONAL
             				dataLossPrevention = @{
             					# OPTIONAL
             					policies = @(
             						$someString
             					)
             					# OPTIONAL
             					genericNas = @{
             						# REQUIRED
             						workloadId = $someString
             						# REQUIRED
             						shareType = $someDlpConfigShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigShareType]) for enum values.
             						# REQUIRED
             						shareId = $someString
             						# REQUIRED
             						path = $someString
             					}
             					# OPTIONAL
             					vmwareVm = @{
             						# REQUIRED
             						workloadId = $someString
             						# REQUIRED
             						osType = $someDlpConfigOsType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigOsType]) for enum values.
             						# REQUIRED
             						path = $someString
             					}
             					# OPTIONAL
             					serviceAccountId = $someString
             					# OPTIONAL
             					serviceAccountName = $someString
             					# OPTIONAL
             					status = @{
             						# OPTIONAL
             						code = $someDlpStatusCode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpStatusCode]) for enum values.
             					}
             					# REQUIRED
             					targetType = $someDlpConfigTargetType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DlpConfigTargetType]) for enum values.
             				}
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationK8s">
             <summary>
             Create a new RscQuery object for any of the 7
             operations in the 'Kubernetes' API domain:
             ArchiveCluster, CreateAgentManifest, CreateCluster, CreateNamespaceSnapshots, ExportNamespace, RefreshCluster, or RestoreNamespace.
             </summary>
             <description>
             New-RscMutationK8s creates a new
             mutation object for operations
             in the 'Kubernetes' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 7 operations
             in the 'Kubernetes' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ArchiveCluster, CreateAgentManifest, CreateCluster, CreateNamespaceSnapshots, ExportNamespace, RefreshCluster, or RestoreNamespace.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationK8s -ArchiveCluster).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationK8s -ArchiveCluster).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ArchiveCluster operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: ArchiveCluster
             
             $query = New-RscMutationK8s -ArchiveCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ArchiveK8sClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAgentManifest operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: CreateAgentManifest
             
             $query = New-RscMutationK8s -CreateAgentManifest
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterId = $someString
             	# REQUIRED
             	timeoutMinutes = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateK8sAgentManifestReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCluster operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: CreateCluster
             
             $query = New-RscMutationK8s -CreateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cdmClusterId = $someString
             	# REQUIRED
             	hostList = @(
             		$someString
             	)
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	port = $someInt
             	# REQUIRED
             	rbsPortRanges = @(
             		@{
             			# OPTIONAL
             			portMin = $someInt
             			# OPTIONAL
             			portMax = $someInt
             		}
             	)
             	# OPTIONAL
             	userDrivenPortRanges = @(
             		@{
             			# OPTIONAL
             			portMin = $someInt
             			# OPTIONAL
             			portMax = $someInt
             		}
             	)
             	# REQUIRED
             	type = $someK8sClusterProtoType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.K8sClusterProtoType]) for enum values.
             	# OPTIONAL
             	proxyUrl = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateK8sClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateNamespaceSnapshots operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: CreateNamespaceSnapshots
             
             $query = New-RscMutationK8s -CreateNamespaceSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotInput = @(
             		@{
             			# REQUIRED
             			namespaceId = $someString
             			# OPTIONAL
             			onDemandSnapshotSlaId = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CreateOnDemandJobReply&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportNamespace operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: ExportNamespace
             
             $query = New-RscMutationK8s -ExportNamespace
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotUuid = $someString
             	# REQUIRED
             	targetClusterUuid = $someString
             	# REQUIRED
             	targetNamespaceName = $someString
             	# OPTIONAL
             	labelSelector = @{
             		# OPTIONAL
             		matchExpressions = @(
             			@{
             				# OPTIONAL
             				key = $someString
             				# OPTIONAL
             				operator = $someString
             				# OPTIONAL
             				values = @(
             					$someString
             				)
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshCluster operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: RefreshCluster
             
             $query = New-RscMutationK8s -RefreshCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	k8sClusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreNamespace operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: RestoreNamespace
             
             $query = New-RscMutationK8s -RestoreNamespace
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotUuid = $someString
             	# REQUIRED
             	targetClusterUuid = $someString
             	# REQUIRED
             	targetNamespaceName = $someString
             	# OPTIONAL
             	labelSelector = @{
             		# OPTIONAL
             		matchExpressions = @(
             			@{
             				# OPTIONAL
             				key = $someString
             				# OPTIONAL
             				operator = $someString
             				# OPTIONAL
             				values = @(
             					$someString
             				)
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationLdap">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'LDAP' API domain:
             DeletePrincipals, RemoveIntegration, SetMfaSetting, or UpdateIntegration.
             </summary>
             <description>
             New-RscMutationLdap creates a new
             mutation object for operations
             in the 'LDAP' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'LDAP' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: DeletePrincipals, RemoveIntegration, SetMfaSetting, or UpdateIntegration.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationLdap -DeletePrincipals).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationLdap -DeletePrincipals).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the DeletePrincipals operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ldap
             # API Operation: DeletePrincipals
             
             $query = New-RscMutationLdap -DeletePrincipals
             
             # REQUIRED
             $query.Var.principalIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveIntegration operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ldap
             # API Operation: RemoveIntegration
             
             $query = New-RscMutationLdap -RemoveIntegration
             
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetMfaSetting operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ldap
             # API Operation: SetMfaSetting
             
             $query = New-RscMutationLdap -SetMfaSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	ldapId = $someString
             	# OPTIONAL
             	isTotpEnforced = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateIntegration operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ldap
             # API Operation: UpdateIntegration
             
             $query = New-RscMutationLdap -UpdateIntegration
             
             # OPTIONAL
             $query.Var.id = $someString
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.bindUserName = $someString
             # REQUIRED
             $query.Var.bindUserPassword = $someString
             # OPTIONAL
             $query.Var.baseDn = $someString
             # OPTIONAL
             $query.Var.trustedCerts = $someString
             # OPTIONAL
             $query.Var.dynamicDnsName = $someString
             # OPTIONAL
             $query.Var.ldapServers = @(
             	@{
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		useTls = $someBoolean
             }
             )
             # OPTIONAL
             $query.Var.userSearchFilter = $someString
             # OPTIONAL
             $query.Var.userNameAttr = $someString
             # OPTIONAL
             $query.Var.groupMembershipAttr = $someString
             # OPTIONAL
             $query.Var.groupSearchFilter = $someString
             # OPTIONAL
             $query.Var.groupMemberAttr = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationM365">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Microsoft 365' API domain:
             BackupMailbox, BackupOnedrive, BackupSharepointDrive, or BackupTeam.
             </summary>
             <description>
             New-RscMutationM365 creates a new
             mutation object for operations
             in the 'Microsoft 365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Microsoft 365' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BackupMailbox, BackupOnedrive, BackupSharepointDrive, or BackupTeam.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationM365 -BackupMailbox).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationM365 -BackupMailbox).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BackupMailbox operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: BackupMailbox
             
             $query = New-RscMutationM365 -BackupMailbox
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CreateOnDemandJobReply&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupOnedrive operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: BackupOnedrive
             
             $query = New-RscMutationM365 -BackupOnedrive
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CreateOnDemandJobReply&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupSharepointDrive operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: BackupSharepointDrive
             
             $query = New-RscMutationM365 -BackupSharepointDrive
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CreateOnDemandJobReply&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupTeam operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: BackupTeam
             
             $query = New-RscMutationM365 -BackupTeam
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CreateOnDemandJobReply&gt;
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationManagedVolume">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'Managed Volume' API domain:
             Add, BeginSnapshot, Delete, DeleteSnapshotExport, DownloadFiles, DownloadFromLocation, EndSnapshot, ExportSnapshot, Resize, TakeOnDemandSnapshot, or Update.
             </summary>
             <description>
             New-RscMutationManagedVolume creates a new
             mutation object for operations
             in the 'Managed Volume' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'Managed Volume' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Add, BeginSnapshot, Delete, DeleteSnapshotExport, DownloadFiles, DownloadFromLocation, EndSnapshot, ExportSnapshot, Resize, TakeOnDemandSnapshot, or Update.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationManagedVolume -Add).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationManagedVolume -Add).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Add operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: Add
             
             $query = New-RscMutationManagedVolume -Add
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	managedVolumeConfig = @{
             		# OPTIONAL
             		numChannels = $someInt
             		# OPTIONAL
             		subnet = $someString
             		# OPTIONAL
             		slaClientConfig = @{
             			# OPTIONAL
             			postBackupScriptOnBackupFailure = @{
             				# OPTIONAL
             				timeout = $someInt64
             				# REQUIRED
             				scriptCommand = $someString
             			}
             			# OPTIONAL
             			postBackupScriptOnBackupSuccess = @{
             				# OPTIONAL
             				timeout = $someInt64
             				# REQUIRED
             				scriptCommand = $someString
             			}
             			# OPTIONAL
             			preBackupScript = @{
             				# OPTIONAL
             				timeout = $someInt64
             				# REQUIRED
             				scriptCommand = $someString
             			}
             			# OPTIONAL
             			shouldCancelBackupOnPreBackupScriptFailure = $someBoolean
             			# OPTIONAL
             			shouldEnableLogExport = $someBoolean
             			# REQUIRED
             			backupScript = @{
             				# OPTIONAL
             				timeout = $someInt64
             				# REQUIRED
             				scriptCommand = $someString
             			}
             			# REQUIRED
             			channelHostMountPaths = @(
             				$someString
             			)
             			# REQUIRED
             			clientHostId = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		applicationTag = $someManagedVolumeApplicationTag # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedVolumeApplicationTag]) for enum values.
             		# OPTIONAL
             		mvType = $someCdmManagedVolumeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmManagedVolumeType]) for enum values.
             		# REQUIRED
             		exportConfig = @{
             			# OPTIONAL
             			subnet = $someString
             			# OPTIONAL
             			managedVolumePatchConfig = @{
             				# OPTIONAL
             				hostPatterns = @(
             					$someString
             				)
             				# OPTIONAL
             				nodeHint = @(
             					$someString
             				)
             				# OPTIONAL
             				smbDomainName = $someString
             				# OPTIONAL
             				smbValidIps = @(
             					$someString
             				)
             				# OPTIONAL
             				smbValidUsers = @(
             					$someString
             				)
             			}
             			# OPTIONAL
             			shareType = $someManagedVolumeShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedVolumeShareType]) for enum values.
             		}
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		volumeSize = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddManagedVolumeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BeginSnapshot operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: BeginSnapshot
             
             $query = New-RscMutationManagedVolume -BeginSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		isAsync = $someBoolean
             		# OPTIONAL
             		managedVolumeSnapshotReferenceWrapper = @{
             			# OPTIONAL
             			reference = @{
             				# OPTIONAL
             				managedVolumeSnapshotReferenceDefinition = @{
             					# OPTIONAL
             					managedVolumeSnapshotReferencePatch = @{
             						# OPTIONAL
             						expiryDurationInMinutes = $someInt
             					}
             					# REQUIRED
             					ownerId = $someString
             				}
             				# REQUIRED
             				refId = $someString
             			}
             		}
             	}
             	# OPTIONAL
             	ownerId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BeginManagedVolumeSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: Delete
             
             $query = New-RscMutationManagedVolume -Delete
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	preserveSnapshots = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteManagedVolumeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshotExport operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: DeleteSnapshotExport
             
             $query = New-RscMutationManagedVolume -DeleteSnapshotExport
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadFiles operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: DownloadFiles
             
             $query = New-RscMutationManagedVolume -DownloadFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		paths = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadFromLocation operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: DownloadFromLocation
             
             $query = New-RscMutationManagedVolume -DownloadFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EndSnapshot operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: EndSnapshot
             
             $query = New-RscMutationManagedVolume -EndSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	params = @{
             		# OPTIONAL
             		isAsync = $someBoolean
             		# OPTIONAL
             		retentionConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# OPTIONAL
             	endSnapshotDelayInSeconds = $someInt
             	# OPTIONAL
             	ownerId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: EndManagedVolumeSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshot operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: ExportSnapshot
             
             $query = New-RscMutationManagedVolume -ExportSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	params = @{
             		# OPTIONAL
             		shouldDownloadToLocal = $someBoolean
             		# OPTIONAL
             		managedVolumeExportConfig = @{
             			# OPTIONAL
             			subnet = $someString
             			# OPTIONAL
             			managedVolumePatchConfig = @{
             				# OPTIONAL
             				hostPatterns = @(
             					$someString
             				)
             				# OPTIONAL
             				nodeHint = @(
             					$someString
             				)
             				# OPTIONAL
             				smbDomainName = $someString
             				# OPTIONAL
             				smbValidIps = @(
             					$someString
             				)
             				# OPTIONAL
             				smbValidUsers = @(
             					$someString
             				)
             			}
             			# OPTIONAL
             			shareType = $someManagedVolumeShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedVolumeShareType]) for enum values.
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Resize operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: Resize
             
             $query = New-RscMutationManagedVolume -Resize
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	size = @{
             		# OPTIONAL
             		newSize = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeOnDemandSnapshot operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: TakeOnDemandSnapshot
             
             $query = New-RscMutationManagedVolume -TakeOnDemandSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		retentionConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: Update
             
             $query = New-RscMutationManagedVolume -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	update = @{
             		# OPTIONAL
             		config = @{
             			# OPTIONAL
             			hostPatterns = @(
             				$someString
             			)
             			# OPTIONAL
             			nodeHint = @(
             				$someString
             			)
             			# OPTIONAL
             			smbDomainName = $someString
             			# OPTIONAL
             			smbValidIps = @(
             				$someString
             			)
             			# OPTIONAL
             			smbValidUsers = @(
             				$someString
             			)
             		}
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		name = $someString
             		# OPTIONAL
             		volumeSize = $someInt64
             		# OPTIONAL
             		slaClientConfig = @{
             			# OPTIONAL
             			backupScriptCommand = $someString
             			# OPTIONAL
             			backupScriptTimeout = $someInt64
             			# OPTIONAL
             			channelHostMountPaths = @(
             				$someString
             			)
             			# OPTIONAL
             			clientHostId = $someString
             			# OPTIONAL
             			postBackupScriptOnBackupFailureCommand = $someString
             			# OPTIONAL
             			postBackupScriptOnBackupFailureTimeout = $someInt64
             			# OPTIONAL
             			postBackupScriptOnBackupSuccessCommand = $someString
             			# OPTIONAL
             			postBackupScriptOnBackupSuccessTimeout = $someInt64
             			# OPTIONAL
             			preBackupScriptCommand = $someString
             			# OPTIONAL
             			preBackupScriptTimeout = $someInt64
             			# OPTIONAL
             			shouldCancelBackupOnPreBackupScriptFailure = $someBoolean
             			# OPTIONAL
             			username = $someString
             			# REQUIRED
             			shouldDisablePostBackupScriptOnBackupFailure = $someBoolean
             			# REQUIRED
             			shouldDisablePostBackupScriptOnBackupSuccess = $someBoolean
             			# REQUIRED
             			shouldDisablePreBackupScript = $someBoolean
             		}
             		# OPTIONAL
             		subnet = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateManagedVolumeReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationMisc">
             <summary>
             Create a new RscQuery object for any of the 119
             operations in the 'Miscellaneous' API domain:
             AddAdGroupsToHierarchy, AddConfiguredGroupToHierarchy, AddInventoryWorkloads, AddRoleAssignments, AddVlan, AddVmAppConsistentSpecs, ArchiveCrawl, AssignProtection, BatchDeassignRoleFromUserGroups, BulkCreateNasFilesets, CancelDownloadPackage, CancelScheduledUpgrade, CancelTaskchain, ChangePassword, CreateCustomAnalyzer, CreateGuestCredential, CreateOnDemandVolumeGroupBackup, CreateVappsInstantRecovery, DeactivateCustomAnalyzer, DeleteAdGroupsFromHierarchy, DeleteDistributionListDigestBatch, DeleteEventDigest, DeleteGuestCredentialById, DeleteLogShipping, DeleteVolumeGroupMount, DisableSupportUserAccess, EnableAutomaticFmdUpload, EnableDisableAppConsistency, EnableSupportUserAccess, ExcludeVmDisks, GenerateConfigProtectionRestoreForm, GenerateSupportBundle, GetDownloadUrl, HideRevealNasNamespaces, HideRevealNasShares, InstallIoFilter, InviteSsoGroup, ListCidrsForComputeSetting, LockUsersByAdmin, LogoutFromRubrikSupportPortal, MakePrimary, ModifyIpmi, MountDisk, NotificationForGetLicense, RecoverCloudDirectMultiPaths, RecoverCloudDirectPath, RefreshDomain, RefreshGlobalManagerConnectivityStatus, RemoveDisk, RemoveInventoryWorkloads, RemovePrivateEndpointList, RemoveProxyConfig, RemoveVlans, ReseedLogShippingSecondary, ResetAllOrgUsersPasswords, ResetUsersPasswordsWithUserIds, ResizeDisk, ResolveAnomaly, ResolveVolumeGroupsConflict, RetryBackup, RetryDownloadPackageJob, RevokeAllOrgRoles, RunCustomAnalyzer, ScheduleUpgradeBatchJob, SetAnalyzerRisks, SetBundleApprovalStatus, SetCustomerTags, SetDatastoreFreespaceThresholds, SetIpWhitelistEnabled, SetMfaSetting, SetPrivateContainerRegistry, SetTotpConfig, SetUpgradeType, SetUserLevelTotpEnforcement, SetWorkloadAlertSetting, SetupDisk, StartCrawl, StartDownloadPackageBatchJob, StartExportRdsInstanceJob, StartPeriodicUpgradePrechecksOnDemandJob, StartUpgradeBatchJob, StartVolumeGroupMount, StopJobInstance, StopJobInstanceFromEventSeries, SupportPortalLogin, SwitchProductToOnboardingMode, TriggerCloudComputeConnectivityCheck, TriggerExocomputeHealthCheck, UninstallIoFilter, UnlockUsersByAdmin, UnmountDisk, UpdateAccountOwner, UpdateAuthDomainUsersHiddenStatus, UpdateBadDiskLedStatus, UpdateConfiguredGroup, UpdateCustomAnalyzer, UpdateCustomerAppPermissions, UpdateDistributionListDigest, UpdateDnsServersAndSearchDomains, UpdateEventDigest, UpdateFloatingIps, UpdateGuestCredential, UpdateInsightState, UpdateIpWhitelist, UpdateLambdaSettings, UpdateLockoutConfig, UpdateManagedIdentities, UpdateNasShares, UpdateNetworkThrottle, UpdateProxyConfig, UpdateRoleAssignments, UpdateSupportUserAccess, UpdateTunnelStatus, UpdateVolumeGroup, UpdateWhitelistedAnalyzers, UpgradeIoFilter, UpgradeToRsc, ValidateAndSaveCustomerKmsInfo, or WarmSearchCache.
             </summary>
             <description>
             New-RscMutationMisc creates a new
             mutation object for operations
             in the 'Miscellaneous' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 119 operations
             in the 'Miscellaneous' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddAdGroupsToHierarchy, AddConfiguredGroupToHierarchy, AddInventoryWorkloads, AddRoleAssignments, AddVlan, AddVmAppConsistentSpecs, ArchiveCrawl, AssignProtection, BatchDeassignRoleFromUserGroups, BulkCreateNasFilesets, CancelDownloadPackage, CancelScheduledUpgrade, CancelTaskchain, ChangePassword, CreateCustomAnalyzer, CreateGuestCredential, CreateOnDemandVolumeGroupBackup, CreateVappsInstantRecovery, DeactivateCustomAnalyzer, DeleteAdGroupsFromHierarchy, DeleteDistributionListDigestBatch, DeleteEventDigest, DeleteGuestCredentialById, DeleteLogShipping, DeleteVolumeGroupMount, DisableSupportUserAccess, EnableAutomaticFmdUpload, EnableDisableAppConsistency, EnableSupportUserAccess, ExcludeVmDisks, GenerateConfigProtectionRestoreForm, GenerateSupportBundle, GetDownloadUrl, HideRevealNasNamespaces, HideRevealNasShares, InstallIoFilter, InviteSsoGroup, ListCidrsForComputeSetting, LockUsersByAdmin, LogoutFromRubrikSupportPortal, MakePrimary, ModifyIpmi, MountDisk, NotificationForGetLicense, RecoverCloudDirectMultiPaths, RecoverCloudDirectPath, RefreshDomain, RefreshGlobalManagerConnectivityStatus, RemoveDisk, RemoveInventoryWorkloads, RemovePrivateEndpointList, RemoveProxyConfig, RemoveVlans, ReseedLogShippingSecondary, ResetAllOrgUsersPasswords, ResetUsersPasswordsWithUserIds, ResizeDisk, ResolveAnomaly, ResolveVolumeGroupsConflict, RetryBackup, RetryDownloadPackageJob, RevokeAllOrgRoles, RunCustomAnalyzer, ScheduleUpgradeBatchJob, SetAnalyzerRisks, SetBundleApprovalStatus, SetCustomerTags, SetDatastoreFreespaceThresholds, SetIpWhitelistEnabled, SetMfaSetting, SetPrivateContainerRegistry, SetTotpConfig, SetUpgradeType, SetUserLevelTotpEnforcement, SetWorkloadAlertSetting, SetupDisk, StartCrawl, StartDownloadPackageBatchJob, StartExportRdsInstanceJob, StartPeriodicUpgradePrechecksOnDemandJob, StartUpgradeBatchJob, StartVolumeGroupMount, StopJobInstance, StopJobInstanceFromEventSeries, SupportPortalLogin, SwitchProductToOnboardingMode, TriggerCloudComputeConnectivityCheck, TriggerExocomputeHealthCheck, UninstallIoFilter, UnlockUsersByAdmin, UnmountDisk, UpdateAccountOwner, UpdateAuthDomainUsersHiddenStatus, UpdateBadDiskLedStatus, UpdateConfiguredGroup, UpdateCustomAnalyzer, UpdateCustomerAppPermissions, UpdateDistributionListDigest, UpdateDnsServersAndSearchDomains, UpdateEventDigest, UpdateFloatingIps, UpdateGuestCredential, UpdateInsightState, UpdateIpWhitelist, UpdateLambdaSettings, UpdateLockoutConfig, UpdateManagedIdentities, UpdateNasShares, UpdateNetworkThrottle, UpdateProxyConfig, UpdateRoleAssignments, UpdateSupportUserAccess, UpdateTunnelStatus, UpdateVolumeGroup, UpdateWhitelistedAnalyzers, UpgradeIoFilter, UpgradeToRsc, ValidateAndSaveCustomerKmsInfo, or WarmSearchCache.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMisc -AddAdGroupsToHierarchy).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMisc -AddAdGroupsToHierarchy).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddAdGroupsToHierarchy operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AddAdGroupsToHierarchy
             
             $query = New-RscMutationMisc -AddAdGroupsToHierarchy
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	naturalIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddConfiguredGroupToHierarchy operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AddConfiguredGroupToHierarchy
             
             $query = New-RscMutationMisc -AddConfiguredGroupToHierarchy
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	displayName = $someString
             	# OPTIONAL
             	wildcard = $someString
             	# REQUIRED
             	pdls = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddConfiguredGroupToHierarchyReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddInventoryWorkloads operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AddInventoryWorkloads
             
             $query = New-RscMutationMisc -AddInventoryWorkloads
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	inventoryCards = @(
             		$someInventoryCard # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventoryCard]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddRoleAssignments operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AddRoleAssignments
             
             $query = New-RscMutationMisc -AddRoleAssignments
             
             # OPTIONAL
             $query.Var.userIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.groupIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.roleIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddVlan operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AddVlan
             
             $query = New-RscMutationMisc -AddVlan
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	vlanInfo = @{
             		# REQUIRED
             		interfaces = @(
             			@{
             				# REQUIRED
             				ip = $someString
             				# REQUIRED
             				node = $someString
             			}
             		)
             		# REQUIRED
             		netmask = $someString
             		# REQUIRED
             		vlan = $someInt
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AddVmAppConsistentSpecs operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AddVmAppConsistentSpecs
             
             $query = New-RscMutationMisc -AddVmAppConsistentSpecs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableIds = @(
             		$someString
             	)
             	# OPTIONAL
             	preSnapshotScriptPath = $someString
             	# OPTIONAL
             	preSnapshotScriptTimeoutInSeconds = $someInt
             	# OPTIONAL
             	postSnapshotScriptPath = $someString
             	# OPTIONAL
             	postSnapshotScriptTimeoutInSeconds = $someInt
             	# REQUIRED
             	cancelBackupIfPreScriptFails = $someBoolean
             	# REQUIRED
             	objectType = $someCloudNativeVmAppConsistentObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeVmAppConsistentObjectType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddVmAppConsistentSpecsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ArchiveCrawl operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ArchiveCrawl
             
             $query = New-RscMutationMisc -ArchiveCrawl
             
             # REQUIRED
             $query.Var.crawlId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignProtection operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AssignProtection
             
             $query = New-RscMutationMisc -AssignProtection
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	globalSlaOptionalFid = $someString
             	# REQUIRED
             	globalSlaAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             	# REQUIRED
             	objectIds = @(
             		$someString
             	)
             	# REQUIRED
             	backupInput = @{
             		# OPTIONAL
             		mosaicBackupStoreInfo = @{
             			# OPTIONAL
             			storeName = $someString
             		}
             		# OPTIONAL
             		mosaicMonitorInfo = @{
             			# OPTIONAL
             			isEnabled = $someBoolean
             			# OPTIONAL
             			frequency = $someInt
             			# OPTIONAL
             			frequencyUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             		}
             		# OPTIONAL
             		shouldBackupIndex = $someBoolean
             		# OPTIONAL
             		shouldDelete = $someBoolean
             		# OPTIONAL
             		shouldDeleteData = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaAssignResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchDeassignRoleFromUserGroups operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: BatchDeassignRoleFromUserGroups
             
             $query = New-RscMutationMisc -BatchDeassignRoleFromUserGroups
             
             # REQUIRED
             $query.Var.userGroupToRoles = @(
             	@{
             		# OPTIONAL
             		userGroupId = $someString
             		# OPTIONAL
             		roleIds = @(
             			$someString
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkCreateNasFilesets operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: BulkCreateNasFilesets
             
             $query = New-RscMutationMisc -BulkCreateNasFilesets
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bulkRequest = @{
             		# OPTIONAL
             		isHardlinkSupportEnabled = $someBoolean
             		# OPTIONAL
             		isPassthrough = $someBoolean
             		# REQUIRED
             		filesetTemplate = @{
             			# OPTIONAL
             			backupScriptErrorHandling = $someString
             			# OPTIONAL
             			backupScriptTimeout = $someInt64
             			# OPTIONAL
             			exceptions = @(
             				$someString
             			)
             			# OPTIONAL
             			excludes = @(
             				$someString
             			)
             			# OPTIONAL
             			isArrayEnabled = $someBoolean
             			# OPTIONAL
             			postBackupScript = $someString
             			# OPTIONAL
             			preBackupScript = $someString
             			# OPTIONAL
             			isCreatedByKupr = $someBoolean
             			# OPTIONAL
             			isCreatedByPolarisNas = $someBoolean
             			# OPTIONAL
             			filesetOptions = @{
             				# OPTIONAL
             				allowBackupHiddenFoldersInNetworkMounts = $someBoolean
             				# OPTIONAL
             				allowBackupNetworkMounts = $someBoolean
             				# OPTIONAL
             				useWindowsVss = $someBoolean
             			}
             			# OPTIONAL
             			operatingSystemType = $someFilesetTemplateCreateOperatingSystemType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FilesetTemplateCreateOperatingSystemType]) for enum values.
             			# OPTIONAL
             			shareType = $someFilesetTemplateCreateShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FilesetTemplateCreateShareType]) for enum values.
             			# REQUIRED
             			includes = @(
             				$someString
             			)
             			# REQUIRED
             			name = $someString
             		}
             		# REQUIRED
             		nasShareIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkCreateNasFilesetsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CancelDownloadPackage operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CancelDownloadPackage
             
             $query = New-RscMutationMisc -CancelDownloadPackage
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CancelJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CancelScheduledUpgrade operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CancelScheduledUpgrade
             
             $query = New-RscMutationMisc -CancelScheduledUpgrade
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CancelJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CancelTaskchain operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CancelTaskchain
             
             $query = New-RscMutationMisc -CancelTaskchain
             
             # REQUIRED
             $query.Var.taskchainId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ChangePassword operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ChangePassword
             
             $query = New-RscMutationMisc -ChangePassword
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	email = $someString
             	# OPTIONAL
             	password = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCustomAnalyzer operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CreateCustomAnalyzer
             
             $query = New-RscMutationMisc -CreateCustomAnalyzer
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	analyzerType = $someAnalyzerTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnalyzerTypeEnum]) for enum values.
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	dictionaryCsv = $someString
             	# OPTIONAL
             	dictionary = @(
             		$someString
             	)
             	# OPTIONAL
             	regex = $someString
             	# OPTIONAL
             	analyzerRiskInstance = @{
             		# OPTIONAL
             		analyzerId = $someString
             		# OPTIONAL
             		riskVersion = $someInt
             		# OPTIONAL
             		risk = $someRiskLevelType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RiskLevelType]) for enum values.
             	}
             	# OPTIONAL
             	risk = $someRiskLevelType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RiskLevelType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Analyzer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateGuestCredential operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CreateGuestCredential
             
             $query = New-RscMutationMisc -CreateGuestCredential
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	definition = @{
             		# OPTIONAL
             		domain = $someString
             		# OPTIONAL
             		baseGuestCredential = @{
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		description = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateGuestCredentialReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandVolumeGroupBackup operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CreateOnDemandVolumeGroupBackup
             
             $query = New-RscMutationMisc -CreateOnDemandVolumeGroupBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		volumeIdsIncludedInSnapshot = @(
             			$someString
             		)
             		# OPTIONAL
             		baseOnDemandSnapshotConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateVappsInstantRecovery operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CreateVappsInstantRecovery
             
             $query = New-RscMutationMisc -CreateVappsInstantRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	inputs = @(
             		@{
             			# REQUIRED
             			config = @{
             				# OPTIONAL
             				shouldPowerOnVmsAfterRecovery = $someBoolean
             				# REQUIRED
             				vmsToRestore = @(
             					@{
             						# OPTIONAL
             						storagePolicyId = $someString
             						# REQUIRED
             						name = $someString
             						# REQUIRED
             						networkConnections = @(
             							@{
             								# OPTIONAL
             								ipAddress = $someString
             								# OPTIONAL
             								macAddress = $someString
             								# OPTIONAL
             								vappNetworkName = $someString
             								# OPTIONAL
             								networkAdapterType = $someString
             								# REQUIRED
             								addressingMode = $someVappVmIpAddressingMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VappVmIpAddressingMode]) for enum values.
             								# REQUIRED
             								isConnected = $someBoolean
             								# REQUIRED
             								nicIndex = $someInt
             							}
             						)
             						# REQUIRED
             						vcdMoid = $someString
             					}
             				)
             			}
             			# REQUIRED
             			snapshotId = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateVappsInstantRecoveryReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeactivateCustomAnalyzer operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeactivateCustomAnalyzer
             
             $query = New-RscMutationMisc -DeactivateCustomAnalyzer
             
             # REQUIRED
             $query.Var.analyzerId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAdGroupsFromHierarchy operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeleteAdGroupsFromHierarchy
             
             $query = New-RscMutationMisc -DeleteAdGroupsFromHierarchy
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	groupIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteDistributionListDigestBatch operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeleteDistributionListDigestBatch
             
             $query = New-RscMutationMisc -DeleteDistributionListDigestBatch
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	digestIds = @(
             		$someInt
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteEventDigest operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeleteEventDigest
             
             $query = New-RscMutationMisc -DeleteEventDigest
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	recipientUserIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteGuestCredentialById operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeleteGuestCredentialById
             
             $query = New-RscMutationMisc -DeleteGuestCredentialById
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteLogShipping operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeleteLogShipping
             
             $query = New-RscMutationMisc -DeleteLogShipping
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	deleteSecondaryDatabase = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteVolumeGroupMount operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeleteVolumeGroupMount
             
             $query = New-RscMutationMisc -DeleteVolumeGroupMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DisableSupportUserAccess operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DisableSupportUserAccess
             
             $query = New-RscMutationMisc -DisableSupportUserAccess
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someInt
             	# OPTIONAL
             	impersonatedUserId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableAutomaticFmdUpload operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: EnableAutomaticFmdUpload
             
             $query = New-RscMutationMisc -EnableAutomaticFmdUpload
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterId = $someString
             	# REQUIRED
             	enabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: EnableAutomaticFmdUploadReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableDisableAppConsistency operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: EnableDisableAppConsistency
             
             $query = New-RscMutationMisc -EnableDisableAppConsistency
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadIds = @(
             		$someString
             	)
             	# REQUIRED
             	enable = $someBoolean
             	# REQUIRED
             	objectType = $someCloudNativeVmAppConsistentObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeVmAppConsistentObjectType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: EnableDisableAppConsistencyReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableSupportUserAccess operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: EnableSupportUserAccess
             
             $query = New-RscMutationMisc -EnableSupportUserAccess
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	impersonatedUserId = $someString
             	# OPTIONAL
             	ticketNumber = $someString
             	# OPTIONAL
             	durationInHours = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExcludeVmDisks operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ExcludeVmDisks
             
             $query = New-RscMutationMisc -ExcludeVmDisks
             
             # REQUIRED
             $query.Var.input = @(
             	@{
             		# REQUIRED
             		virtualDiskFid = $someString
             		# REQUIRED
             		excludeFromSnapshots = $someBoolean
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GenerateConfigProtectionRestoreForm operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GenerateConfigProtectionRestoreForm
             
             $query = New-RscMutationMisc -GenerateConfigProtectionRestoreForm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	restoreFormRequest = @{
             		# REQUIRED
             		backupFileName = $someString
             		# REQUIRED
             		encryptionPassword = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GenerateConfigProtectionRestoreFormReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GenerateSupportBundle operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GenerateSupportBundle
             
             $query = New-RscMutationMisc -GenerateSupportBundle
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	definitions = @{
             		# OPTIONAL
             		eventId = $someString
             		# OPTIONAL
             		requestIds = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetDownloadUrl operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetDownloadUrl
             
             $query = New-RscMutationMisc -GetDownloadUrl
             
             # REQUIRED
             $query.Var.downloadId = $someInt64
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UserDownloadUrl
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HideRevealNasNamespaces operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: HideRevealNasNamespaces
             
             $query = New-RscMutationMisc -HideRevealNasNamespaces
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	hideNasNamespacesRequest = @{
             		# REQUIRED
             		action = $someHideRevealAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HideRevealAction]) for enum values.
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HideRevealNasShares operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: HideRevealNasShares
             
             $query = New-RscMutationMisc -HideRevealNasShares
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	hideNasSharesRequest = @{
             		# REQUIRED
             		action = $someHideRevealAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HideRevealAction]) for enum values.
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InstallIoFilter operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: InstallIoFilter
             
             $query = New-RscMutationMisc -InstallIoFilter
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	fqdnInfo = @{
             		# REQUIRED
             		fqdn = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InviteSsoGroup operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: InviteSsoGroup
             
             $query = New-RscMutationMisc -InviteSsoGroup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	groupName = $someString
             	# REQUIRED
             	roleIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ListCidrsForComputeSetting operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ListCidrsForComputeSetting
             
             $query = New-RscMutationMisc -ListCidrsForComputeSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ListCidrsForComputeSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LockUsersByAdmin operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: LockUsersByAdmin
             
             $query = New-RscMutationMisc -LockUsersByAdmin
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	userIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogoutFromRubrikSupportPortal operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: LogoutFromRubrikSupportPortal
             
             $query = New-RscMutationMisc -LogoutFromRubrikSupportPortal
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SupportPortalLogoutReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MakePrimary operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: MakePrimary
             
             $query = New-RscMutationMisc -MakePrimary
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	hosts = @{
             		# OPTIONAL
             		ids = @(
             			$someString
             		)
             		# OPTIONAL
             		oldPrimaryClusterUuid = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ModifyIpmi operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ModifyIpmi
             
             $query = New-RscMutationMisc -ModifyIpmi
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		access = @{
             			# OPTIONAL
             			https = $someBoolean
             			# OPTIONAL
             			iKvm = $someBoolean
             		}
             		# OPTIONAL
             		password = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ModifyIpmiReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountDisk operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: MountDisk
             
             $query = New-RscMutationMisc -MountDisk
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	targetWorkloadId = $someString
             	# REQUIRED
             	snapshotType = $someSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotType]) for enum values.
             	# REQUIRED
             	mountDiskIds = @(
             		$someString
             	)
             	# REQUIRED
             	workloadType = $someCloudNativeObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeObjectType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MountDiskReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NotificationForGetLicense operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: NotificationForGetLicense
             
             $query = New-RscMutationMisc -NotificationForGetLicense
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NotificationForGetLicenseReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverCloudDirectMultiPaths operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RecoverCloudDirectMultiPaths
             
             $query = New-RscMutationMisc -RecoverCloudDirectMultiPaths
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotFid = $someString
             	# REQUIRED
             	restorePathPairList = @(
             		@{
             			# REQUIRED
             			srcPath = $someString
             			# REQUIRED
             			dstPath = $someString
             		}
             	)
             	# OPTIONAL
             	dstExportId = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverCloudDirectPath operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RecoverCloudDirectPath
             
             $query = New-RscMutationMisc -RecoverCloudDirectPath
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotFid = $someString
             	# REQUIRED
             	srcPath = $someString
             	# OPTIONAL
             	dstPath = $someString
             	# OPTIONAL
             	dstExportId = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshDomain operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RefreshDomain
             
             $query = New-RscMutationMisc -RefreshDomain
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshGlobalManagerConnectivityStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RefreshGlobalManagerConnectivityStatus
             
             $query = New-RscMutationMisc -RefreshGlobalManagerConnectivityStatus
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalManagerConnectivity
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveDisk operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RemoveDisk
             
             $query = New-RscMutationMisc -RemoveDisk
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	diskId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveInventoryWorkloads operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RemoveInventoryWorkloads
             
             $query = New-RscMutationMisc -RemoveInventoryWorkloads
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	inventoryCards = @(
             		$someInventoryCard # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventoryCard]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemovePrivateEndpointList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RemovePrivateEndpointList
             
             $query = New-RscMutationMisc -RemovePrivateEndpointList
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	privateEndpointId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveProxyConfig operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RemoveProxyConfig
             
             $query = New-RscMutationMisc -RemoveProxyConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemoveVlans operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RemoveVlans
             
             $query = New-RscMutationMisc -RemoveVlans
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	vlanIds = @(
             		$someInt
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RemoveVlansReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReseedLogShippingSecondary operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ReseedLogShippingSecondary
             
             $query = New-RscMutationMisc -ReseedLogShippingSecondary
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		mssqlLogShippingTargetStateOptions = @{
             			# OPTIONAL
             			shouldDisconnectStandbyUsers = $someBoolean
             			# REQUIRED
             			state = $someMssqlLogShippingOkState # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlLogShippingOkState]) for enum values.
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResetAllOrgUsersPasswords operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ResetAllOrgUsersPasswords
             
             $query = New-RscMutationMisc -ResetAllOrgUsersPasswords
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResetUsersPasswordsWithUserIds operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ResetUsersPasswordsWithUserIds
             
             $query = New-RscMutationMisc -ResetUsersPasswordsWithUserIds
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	userIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResizeDisk operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ResizeDisk
             
             $query = New-RscMutationMisc -ResizeDisk
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	diskId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResolveAnomaly operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ResolveAnomaly
             
             $query = New-RscMutationMisc -ResolveAnomaly
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	anomalyType = $someAnomalyType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnomalyType]) for enum values.
             	# REQUIRED
             	workloadId = $someString
             	# REQUIRED
             	anomalyId = $someString
             	# OPTIONAL
             	falsePositiveReport = @{
             		# REQUIRED
             		falsePositiveType = $someAnomalyFalsePositiveType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnomalyFalsePositiveType]) for enum values.
             		# OPTIONAL
             		otherReason = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResolveVolumeGroupsConflict operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ResolveVolumeGroupsConflict
             
             $query = New-RscMutationMisc -ResolveVolumeGroupsConflict
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RetryBackup operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RetryBackup
             
             $query = New-RscMutationMisc -RetryBackup
             
             # REQUIRED
             $query.Var.backupObjects = @(
             	@{
             		# OPTIONAL
             		objectFid = $someString
             		# OPTIONAL
             		eventSeriesId = $someString
             		# OPTIONAL
             		monitoringId = $someString
             }
             )
             # OPTIONAL
             $query.Var.backupRunConfig = @{
             	# OPTIONAL
             	runNow = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RetryBackupResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RetryDownloadPackageJob operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RetryDownloadPackageJob
             
             $query = New-RscMutationMisc -RetryDownloadPackageJob
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadPackageReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RevokeAllOrgRoles operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RevokeAllOrgRoles
             
             $query = New-RscMutationMisc -RevokeAllOrgRoles
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	userIds = @(
             		$someString
             	)
             	# OPTIONAL
             	groupIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RunCustomAnalyzer operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RunCustomAnalyzer
             
             $query = New-RscMutationMisc -RunCustomAnalyzer
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	dictionaryCsv = $someString
             	# OPTIONAL
             	regex = $someString
             	# OPTIONAL
             	content = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RunCustomAnalyzerReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScheduleUpgradeBatchJob operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ScheduleUpgradeBatchJob
             
             $query = New-RscMutationMisc -ScheduleUpgradeBatchJob
             
             # REQUIRED
             $query.Var.listClusterUuid = @(
             	$someString
             )
             # REQUIRED
             $query.Var.mode = $someString
             # REQUIRED
             $query.Var.action = $someActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActionType]) for enum values.
             # REQUIRED
             $query.Var.version = $someString
             # REQUIRED
             $query.Var.scheduleAt = $someDateTime
             # OPTIONAL
             $query.Var.context_tag = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;UpgradeJobReplyWithUuid&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetAnalyzerRisks operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetAnalyzerRisks
             
             $query = New-RscMutationMisc -SetAnalyzerRisks
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	risks = @(
             		@{
             			# OPTIONAL
             			analyzerId = $someString
             			# OPTIONAL
             			risk = $someRiskLevelType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RiskLevelType]) for enum values.
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SetAnalyzerRisksReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetBundleApprovalStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetBundleApprovalStatus
             
             $query = New-RscMutationMisc -SetBundleApprovalStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bundleVersion = $someString
             	# REQUIRED
             	approvalStatus = $someExoBundleApprovalStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ExoBundleApprovalStatus]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetCustomerTags operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetCustomerTags
             
             $query = New-RscMutationMisc -SetCustomerTags
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             	# REQUIRED
             	customerTags = @{
             		# REQUIRED
             		tagList = @(
             			@{
             				# REQUIRED
             				key = $someString
             				# REQUIRED
             				value = $someString
             			}
             		)
             	}
             	# REQUIRED
             	shouldOverrideResourceTags = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetDatastoreFreespaceThresholds operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetDatastoreFreespaceThresholds
             
             $query = New-RscMutationMisc -SetDatastoreFreespaceThresholds
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	thresholds = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			datastoreFreespaceThreshold = @{
             				# OPTIONAL
             				vmId = $someString
             				# REQUIRED
             				threshold = $someSingle
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SetDatastoreFreespaceThresholdsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetIpWhitelistEnabled operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetIpWhitelistEnabled
             
             $query = New-RscMutationMisc -SetIpWhitelistEnabled
             
             # REQUIRED
             $query.Var.enabled = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetMfaSetting operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetMfaSetting
             
             $query = New-RscMutationMisc -SetMfaSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	isTotpEnforcedGlobal = $someBoolean
             	# OPTIONAL
             	totpReminderHours = $someInt
             	# OPTIONAL
             	mfaRememberHours = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetPrivateContainerRegistry operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetPrivateContainerRegistry
             
             $query = New-RscMutationMisc -SetPrivateContainerRegistry
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	exocomputeAccountId = $someString
             	# REQUIRED
             	registryUrl = $someString
             	# OPTIONAL
             	pcrAwsImagePullDetails = @{
             		# OPTIONAL
             		awsNativeId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetTotpConfig operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetTotpConfig
             
             $query = New-RscMutationMisc -SetTotpConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	userId = $someString
             	# OPTIONAL
             	secret = $someString
             	# OPTIONAL
             	otp = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetUpgradeType operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetUpgradeType
             
             $query = New-RscMutationMisc -SetUpgradeType
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	upgradeType = $someUpgradeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UpgradeType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SetUpgradeTypeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetUserLevelTotpEnforcement operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetUserLevelTotpEnforcement
             
             $query = New-RscMutationMisc -SetUserLevelTotpEnforcement
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	userIds = @(
             		$someString
             	)
             	# OPTIONAL
             	isEnforced = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetWorkloadAlertSetting operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetWorkloadAlertSetting
             
             $query = New-RscMutationMisc -SetWorkloadAlertSetting
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterId = $someString
             	# OPTIONAL
             	workloadFid = $someString
             	# OPTIONAL
             	enabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SetWorkloadAlertSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetupDisk operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SetupDisk
             
             $query = New-RscMutationMisc -SetupDisk
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	diskId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DiskInfo
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartCrawl operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: StartCrawl
             
             $query = New-RscMutationMisc -StartCrawl
             
             # REQUIRED
             $query.Var.name = $someString
             # REQUIRED
             $query.Var.resources = @(
             	@{
             		# OPTIONAL
             		snappableFid = $someString
             		# OPTIONAL
             		snapshotFid = $someString
             }
             )
             # REQUIRED
             $query.Var.analyzerGroups = @(
             	@{
             		# OPTIONAL
             		groupType = $someAnalyzerGroupTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnalyzerGroupTypeEnum]) for enum values.
             		# OPTIONAL
             		id = $someString
             		# OPTIONAL
             		name = $someString
             		# OPTIONAL
             		analyzers = @(
             			@{
             				# OPTIONAL
             				analyzerType = $someAnalyzerTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnalyzerTypeEnum]) for enum values.
             				# OPTIONAL
             				id = $someString
             				# OPTIONAL
             				name = $someString
             				# OPTIONAL
             				dictionaryCsv = $someString
             				# OPTIONAL
             				dictionary = @(
             					$someString
             				)
             				# OPTIONAL
             				regex = $someString
             				# OPTIONAL
             				analyzerRiskInstance = @{
             					# OPTIONAL
             					analyzerId = $someString
             					# OPTIONAL
             					riskVersion = $someInt
             					# OPTIONAL
             					risk = $someRiskLevelType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RiskLevelType]) for enum values.
             				}
             				# OPTIONAL
             				risk = $someRiskLevelType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RiskLevelType]) for enum values.
             			}
             		)
             }
             )
             # OPTIONAL
             $query.Var.extWhiteList = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartCrawlReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartDownloadPackageBatchJob operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: StartDownloadPackageBatchJob
             
             $query = New-RscMutationMisc -StartDownloadPackageBatchJob
             
             # REQUIRED
             $query.Var.listClusterUuid = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.downloadVersion = $someString
             # REQUIRED
             $query.Var.packageUrl = $someString
             # REQUIRED
             $query.Var.md5checksum = $someString
             # OPTIONAL
             $query.Var.size = $someInt64
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;DownloadPackageReplyWithUuid&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartExportRdsInstanceJob operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: StartExportRdsInstanceJob
             
             $query = New-RscMutationMisc -StartExportRdsInstanceJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	rdsInstanceId = $someString
             	# REQUIRED
             	isPointInTime = $someBoolean
             	# OPTIONAL
             	snapshotId = $someString
             	# OPTIONAL
             	exportTime = $someDateTime
             	# REQUIRED
             	dbInstanceName = $someString
             	# REQUIRED
             	destinationAwsNativeAccountId = $someString
             	# REQUIRED
             	destinationRegionNativeId = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             	# REQUIRED
             	dbInstanceClass = $someAwsNativeRdsDbInstanceClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbInstanceClass]) for enum values.
             	# OPTIONAL
             	databaseInstanceClass = $someString
             	# OPTIONAL
             	primaryAz = $someString
             	# REQUIRED
             	port = $someInt64
             	# OPTIONAL
             	optionGroupName = $someString
             	# OPTIONAL
             	parameterGroupName = $someString
             	# OPTIONAL
             	subnetGroupName = $someString
             	# OPTIONAL
             	storageType = $someAwsNativeRdsStorageType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsStorageType]) for enum values.
             	# OPTIONAL
             	securityGroupIds = @(
             		$someString
             	)
             	# OPTIONAL
             	iops = $someInt
             	# REQUIRED
             	isPubliclyAccessible = $someBoolean
             	# REQUIRED
             	shouldExportTags = $someBoolean
             	# REQUIRED
             	isMultiAz = $someBoolean
             	# OPTIONAL
             	kmsKeyId = $someString
             	# OPTIONAL
             	subnetIds = @(
             		$someString
             	)
             	# OPTIONAL
             	snapshotType = $someSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotType]) for enum values.
             	# OPTIONAL
             	dbClusterName = $someString
             	# OPTIONAL
             	dbClusterParameterGroupName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartPeriodicUpgradePrechecksOnDemandJob operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: StartPeriodicUpgradePrechecksOnDemandJob
             
             $query = New-RscMutationMisc -StartPeriodicUpgradePrechecksOnDemandJob
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrechecksJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartUpgradeBatchJob operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: StartUpgradeBatchJob
             
             $query = New-RscMutationMisc -StartUpgradeBatchJob
             
             # REQUIRED
             $query.Var.listClusterUuid = @(
             	$someString
             )
             # REQUIRED
             $query.Var.mode = $someString
             # REQUIRED
             $query.Var.action = $someActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActionType]) for enum values.
             # REQUIRED
             $query.Var.version = $someString
             # OPTIONAL
             $query.Var.context_tag = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;UpgradeJobReplyWithUuid&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartVolumeGroupMount operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: StartVolumeGroupMount
             
             $query = New-RscMutationMisc -StartVolumeGroupMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		smbDomainName = $someString
             		# OPTIONAL
             		smbValidIps = @(
             			$someString
             		)
             		# OPTIONAL
             		smbValidUsers = @(
             			$someString
             		)
             		# OPTIONAL
             		targetHostId = $someString
             		# REQUIRED
             		volumeConfigs = @(
             			@{
             				# OPTIONAL
             				mountPointOnHost = $someString
             				# REQUIRED
             				volumeId = $someString
             			}
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StopJobInstance operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: StopJobInstance
             
             $query = New-RscMutationMisc -StopJobInstance
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	jobInstanceId = $someString
             	# OPTIONAL
             	eventSeriesId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StopJobInstanceReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StopJobInstanceFromEventSeries operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: StopJobInstanceFromEventSeries
             
             $query = New-RscMutationMisc -StopJobInstanceFromEventSeries
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	eventSeriesId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SupportPortalLogin operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SupportPortalLogin
             
             $query = New-RscMutationMisc -SupportPortalLogin
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	account = $someString
             	# OPTIONAL
             	hostname = $someString
             	# OPTIONAL
             	organizationId = $someString
             	# REQUIRED
             	username = $someString
             	# REQUIRED
             	password = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SupportPortalLoginReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SwitchProductToOnboardingMode operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SwitchProductToOnboardingMode
             
             $query = New-RscMutationMisc -SwitchProductToOnboardingMode
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	orgId = $someString
             	# REQUIRED
             	workloadType = $someM365DashboardWorkloadType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.M365DashboardWorkloadType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SwitchProductToOnboardingModeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TriggerCloudComputeConnectivityCheck operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TriggerCloudComputeConnectivityCheck
             
             $query = New-RscMutationMisc -TriggerCloudComputeConnectivityCheck
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	shouldCheckCloudConnectivityForCloudOut = $someBoolean
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	shouldCheckCloudConnectivityForCloudOn = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TriggerExocomputeHealthCheck operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TriggerExocomputeHealthCheck
             
             $query = New-RscMutationMisc -TriggerExocomputeHealthCheck
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             	# REQUIRED
             	exocomputeConfigId = $someString
             	# OPTIONAL
             	nodeType = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TriggerExocomputeHealthCheckReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UninstallIoFilter operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UninstallIoFilter
             
             $query = New-RscMutationMisc -UninstallIoFilter
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnlockUsersByAdmin operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UnlockUsersByAdmin
             
             $query = New-RscMutationMisc -UnlockUsersByAdmin
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	userIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmountDisk operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UnmountDisk
             
             $query = New-RscMutationMisc -UnmountDisk
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	liveMountId = $someInt64
             	# REQUIRED
             	mountIds = @(
             		$someInt64
             	)
             	# REQUIRED
             	targetWorkloadId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAccountOwner operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateAccountOwner
             
             $query = New-RscMutationMisc -UpdateAccountOwner
             
             # REQUIRED
             $query.Var.userId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAuthDomainUsersHiddenStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateAuthDomainUsersHiddenStatus
             
             $query = New-RscMutationMisc -UpdateAuthDomainUsersHiddenStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	userIds = @(
             		$someString
             	)
             	# REQUIRED
             	isHidden = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateBadDiskLedStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateBadDiskLedStatus
             
             $query = New-RscMutationMisc -UpdateBadDiskLedStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	diskSerial = $someString
             	# OPTIONAL
             	turnOff = $someBoolean
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	nodeId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateBadDiskLedStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateConfiguredGroup operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateConfiguredGroup
             
             $query = New-RscMutationMisc -UpdateConfiguredGroup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	groupId = $someString
             	# OPTIONAL
             	updatedDisplayName = $someString
             	# OPTIONAL
             	updatedWildcard = $someString
             	# REQUIRED
             	updatedPdls = @(
             		$someString
             	)
             	# REQUIRED
             	performArchival = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCustomAnalyzer operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateCustomAnalyzer
             
             $query = New-RscMutationMisc -UpdateCustomAnalyzer
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	analyzerType = $someAnalyzerTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnalyzerTypeEnum]) for enum values.
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	dictionaryCsv = $someString
             	# OPTIONAL
             	dictionary = @(
             		$someString
             	)
             	# OPTIONAL
             	regex = $someString
             	# OPTIONAL
             	analyzerRiskInstance = @{
             		# OPTIONAL
             		analyzerId = $someString
             		# OPTIONAL
             		riskVersion = $someInt
             		# OPTIONAL
             		risk = $someRiskLevelType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RiskLevelType]) for enum values.
             	}
             	# OPTIONAL
             	risk = $someRiskLevelType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RiskLevelType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Analyzer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCustomerAppPermissions operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateCustomerAppPermissions
             
             $query = New-RscMutationMisc -UpdateCustomerAppPermissions
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	appPermissions = @(
             		$someAzureAppPermission # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAppPermission]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCustomerAppPermissionsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateDistributionListDigest operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateDistributionListDigest
             
             $query = New-RscMutationMisc -UpdateDistributionListDigest
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	digestName = $someString
             	# OPTIONAL
             	frequencyHours = $someInt
             	# OPTIONAL
             	isImmediate = $someBoolean
             	# OPTIONAL
             	includeAudits = $someBoolean
             	# OPTIONAL
             	includeEvents = $someBoolean
             	# REQUIRED
             	eventDigestConfig = @{
             		# OPTIONAL
             		objectType = @(
             			$someActivityObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		activityStatus = @(
             			$someActivityStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		activityType = @(
             			$someString
             		)
             		# OPTIONAL
             		auditType = @(
             			$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		activitySeverity = @(
             			$someActivitySeverityEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivitySeverityEnum]) for enum values.
             		)
             		# OPTIONAL
             		clusters = @(
             			$someString
             		)
             		# OPTIONAL
             		emailAddresses = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	recipientUserIds = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateDistributionListDigestReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateDnsServersAndSearchDomains operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateDnsServersAndSearchDomains
             
             $query = New-RscMutationMisc -UpdateDnsServersAndSearchDomains
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	servers = @(
             		$someString
             	)
             	# REQUIRED
             	domains = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateEventDigest operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateEventDigest
             
             $query = New-RscMutationMisc -UpdateEventDigest
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	digestName = $someString
             	# OPTIONAL
             	frequencyHours = $someInt
             	# OPTIONAL
             	isImmediate = $someBoolean
             	# OPTIONAL
             	includeAudits = $someBoolean
             	# OPTIONAL
             	includeEvents = $someBoolean
             	# REQUIRED
             	eventDigestConfig = @{
             		# OPTIONAL
             		objectType = @(
             			$someActivityObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		activityStatus = @(
             			$someActivityStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		activityType = @(
             			$someString
             		)
             		# OPTIONAL
             		auditType = @(
             			$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		activitySeverity = @(
             			$someActivitySeverityEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivitySeverityEnum]) for enum values.
             		)
             		# OPTIONAL
             		clusters = @(
             			$someString
             		)
             		# OPTIONAL
             		emailAddresses = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	recipientUserIds = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateEventDigestReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateFloatingIps operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateFloatingIps
             
             $query = New-RscMutationMisc -UpdateFloatingIps
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	newClusterIps = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateFloatingIpsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateGuestCredential operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateGuestCredential
             
             $query = New-RscMutationMisc -UpdateGuestCredential
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	definition = @{
             		# OPTIONAL
             		domain = $someString
             		# OPTIONAL
             		baseGuestCredential = @{
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		description = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateGuestCredentialReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateInsightState operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateInsightState
             
             $query = New-RscMutationMisc -UpdateInsightState
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	insightId = $someString
             	# OPTIONAL
             	isDismissed = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateInsightStateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateIpWhitelist operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateIpWhitelist
             
             $query = New-RscMutationMisc -UpdateIpWhitelist
             
             # REQUIRED
             $query.Var.whitelistMode = $someWhitelistModeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WhitelistModeEnum]) for enum values.
             # REQUIRED
             $query.Var.ipCidrs = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateLambdaSettings operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateLambdaSettings
             
             $query = New-RscMutationMisc -UpdateLambdaSettings
             
             # OPTIONAL
             $query.Var.anomalyThreshold = $someSingle
             # OPTIONAL
             $query.Var.ransomwareThreshold = $someSingle
             # OPTIONAL
             $query.Var.isAnomalyAlertEnabled = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LambdaSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateLockoutConfig operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateLockoutConfig
             
             $query = New-RscMutationMisc -UpdateLockoutConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	loginAttemptsLimit = $someInt
             	# OPTIONAL
             	selfServiceTokenValidityInMins = $someInt
             	# OPTIONAL
             	selfServiceAttemptsLimit = $someInt
             	# OPTIONAL
             	isSelfServiceEnabled = $someBoolean
             	# OPTIONAL
             	accountAutoUnlockDurationInMins = $someInt
             	# OPTIONAL
             	isBruteForceLockoutEnabled = $someBoolean
             	# OPTIONAL
             	isAutoUnlockFeatureEnabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateLockoutConfigReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateManagedIdentities operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateManagedIdentities
             
             $query = New-RscMutationMisc -UpdateManagedIdentities
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	managedIdentity = @{
             		# OPTIONAL
             		name = $someString
             		# OPTIONAL
             		clientId = $someString
             		# OPTIONAL
             		resourceGroup = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateManagedIdentitiesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateNasShares operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateNasShares
             
             $query = New-RscMutationMisc -UpdateNasShares
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	updateNasSharesRequest = @{
             		# REQUIRED
             		nasShareProperties = @(
             			@{
             				# OPTIONAL
             				isIsilonChangelistEnabled = $someBoolean
             				# REQUIRED
             				id = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateNetworkThrottle operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateNetworkThrottle
             
             $query = New-RscMutationMisc -UpdateNetworkThrottle
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	throttleUpdate = @{
             		# OPTIONAL
             		defaultThrottleLimit = $someSingle
             		# OPTIONAL
             		isEnabled = $someBoolean
             		# OPTIONAL
             		scheduledThrottles = @(
             			@{
             				# REQUIRED
             				daysOfWeek = @(
             					$someInt
             				)
             				# REQUIRED
             				endTime = $someInt64
             				# REQUIRED
             				startTime = $someInt64
             				# REQUIRED
             				throttleLimit = $someSingle
             			}
             		)
             		# OPTIONAL
             		networkInterface = $someString
             		# OPTIONAL
             		archivalThrottlePort = $someInt
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateNetworkThrottleReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateProxyConfig operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateProxyConfig
             
             $query = New-RscMutationMisc -UpdateProxyConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	proxy = @{
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		username = $someString
             		# REQUIRED
             		host = $someString
             		# REQUIRED
             		protocol = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateProxyConfigReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateRoleAssignments operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateRoleAssignments
             
             $query = New-RscMutationMisc -UpdateRoleAssignments
             
             # OPTIONAL
             $query.Var.userIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.groupIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.roleIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateSupportUserAccess operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateSupportUserAccess
             
             $query = New-RscMutationMisc -UpdateSupportUserAccess
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someInt
             	# OPTIONAL
             	impersonatedUserId = $someString
             	# OPTIONAL
             	newDurationInHours = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTunnelStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateTunnelStatus
             
             $query = New-RscMutationMisc -UpdateTunnelStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		inactivityTimeoutInSeconds = $someInt64
             		# REQUIRED
             		isTunnelEnabled = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateTunnelStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateVolumeGroup operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateVolumeGroup
             
             $query = New-RscMutationMisc -UpdateVolumeGroup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	patchProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		isPaused = $someBoolean
             		# OPTIONAL
             		volumeIdsIncludedInSnapshots = @(
             			$someString
             		)
             		# OPTIONAL
             		forceFull = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateVolumeGroupReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateWhitelistedAnalyzers operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpdateWhitelistedAnalyzers
             
             $query = New-RscMutationMisc -UpdateWhitelistedAnalyzers
             
             # REQUIRED
             $query.Var.stdPath = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.analyzerIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.runAsync = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeIoFilter operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpgradeIoFilter
             
             $query = New-RscMutationMisc -UpgradeIoFilter
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	fqdnInfo = @{
             		# REQUIRED
             		fqdn = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeToRsc operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpgradeToRsc
             
             $query = New-RscMutationMisc -UpgradeToRsc
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateAndSaveCustomerKmsInfo operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ValidateAndSaveCustomerKmsInfo
             
             $query = New-RscMutationMisc -ValidateAndSaveCustomerKmsInfo
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	kmsSpec = @{
             		# OPTIONAL
             		cloudType = $someO365AzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AzureCloudType]) for enum values.
             		# OPTIONAL
             		tenantId = $someString
             		# OPTIONAL
             		kmsId = $someString
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecret = $someString
             		# OPTIONAL
             		keyName = $someString
             		# OPTIONAL
             		kekNameColossus = $someString
             	}
             	# REQUIRED
             	appSecret = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAndSaveCustomerKmsInfoReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WarmSearchCache operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: WarmSearchCache
             
             $query = New-RscMutationMisc -WarmSearchCache
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadFid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationMongo">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Mongo' API domain:
             AddSource, DeleteSource, DiscoverSource, PatchSource, RecoverSource, or RetryAddSource.
             </summary>
             <description>
             New-RscMutationMongo creates a new
             mutation object for operations
             in the 'Mongo' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Mongo' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddSource, DeleteSource, DiscoverSource, PatchSource, RecoverSource, or RetryAddSource.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMongo -AddSource).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMongo -AddSource).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: AddSource
             
             $query = New-RscMutationMongo -AddSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	mongoSourceAddRequestConfig = @{
             		# OPTIONAL
             		caCertfilePath = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sslKeyfilePath = $someString
             		# OPTIONAL
             		sslCertfilePath = $someString
             		# REQUIRED
             		mongoType = $someMongoType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoType]) for enum values.
             		# OPTIONAL
             		sourceAuthenticationType = $someMongoAuthenticationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoAuthenticationType]) for enum values.
             		# OPTIONAL
             		sslCertificateRequired = $someMongoSslCertificateRequirement # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoSslCertificateRequirement]) for enum values.
             		# REQUIRED
             		mongoClientHosts = @(
             			@{
             				# REQUIRED
             				configurationPort = $someInt
             				# REQUIRED
             				hostId = $someString
             			}
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddMongoSourceReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DeleteSource
             
             $query = New-RscMutationMongo -DeleteSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DiscoverSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: DiscoverSource
             
             $query = New-RscMutationMongo -DiscoverSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: PatchSource
             
             $query = New-RscMutationMongo -PatchSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	mongoSourcePatchRequestConfig = @{
             		# OPTIONAL
             		caCertfilePath = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sslKeyfilePath = $someString
             		# OPTIONAL
             		sslCertfilePath = $someString
             		# OPTIONAL
             		sourceAuthenticationType = $someMongoAuthenticationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoAuthenticationType]) for enum values.
             		# OPTIONAL
             		sslCertificateRequired = $someMongoSslCertificateRequirement # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoSslCertificateRequirement]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: RecoverSource
             
             $query = New-RscMutationMongo -RecoverSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	input = @{
             		# OPTIONAL
             		prefix = $someString
             		# OPTIONAL
             		restoreDbPassword = $someString
             		# OPTIONAL
             		restoreDbUsername = $someString
             		# OPTIONAL
             		shouldDropExistingCollection = $someBoolean
             		# OPTIONAL
             		sourceCollectionIds = @(
             			$someString
             		)
             		# OPTIONAL
             		sourceDatabaseIds = @(
             			$someString
             		)
             		# OPTIONAL
             		targetCollectionName = $someString
             		# OPTIONAL
             		targetDatabaseName = $someString
             		# OPTIONAL
             		versionTime = $someDateTime
             		# OPTIONAL
             		restoreThrottleInBytesPerSecond = $someInt64
             		# OPTIONAL
             		isRestoreWithIndex = $someBoolean
             		# OPTIONAL
             		targetAuthenticationType = $someMongoAuthenticationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoAuthenticationType]) for enum values.
             		# REQUIRED
             		sourceMongoClusterId = $someString
             		# REQUIRED
             		targetMongoClusterId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RetryAddSource operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: RetryAddSource
             
             $query = New-RscMutationMongo -RetryAddSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	mongoSourceRequestConfig = @{
             		# OPTIONAL
             		caCertfilePath = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sslKeyfilePath = $someString
             		# OPTIONAL
             		sslCertfilePath = $someString
             		# REQUIRED
             		mongoType = $someMongoType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoType]) for enum values.
             		# OPTIONAL
             		sourceAuthenticationType = $someMongoAuthenticationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoAuthenticationType]) for enum values.
             		# OPTIONAL
             		sslCertificateRequired = $someMongoSslCertificateRequirement # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MongoSslCertificateRequirement]) for enum values.
             		# REQUIRED
             		mongoClientHosts = @(
             			@{
             				# REQUIRED
             				configurationPort = $someInt
             				# REQUIRED
             				hostId = $someString
             			}
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationMongoDb">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Mongo DB' API domain:
             AssignSlaToCollection, BulkDeleteSources, CreateSource, DeleteSource, RecoverSource, or UpdateSource.
             </summary>
             <description>
             New-RscMutationMongoDb creates a new
             mutation object for operations
             in the 'Mongo DB' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Mongo DB' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AssignSlaToCollection, BulkDeleteSources, CreateSource, DeleteSource, RecoverSource, or UpdateSource.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMongoDb -AssignSlaToCollection).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMongoDb -AssignSlaToCollection).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AssignSlaToCollection operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: AssignSlaToCollection
             
             $query = New-RscMutationMongoDb -AssignSlaToCollection
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	input = @{
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             		# REQUIRED
             		slaId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkDeleteSources operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: BulkDeleteSources
             
             $query = New-RscMutationMongoDb -BulkDeleteSources
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceType = $someV2BulkDeleteMosaicSourcesRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2BulkDeleteMosaicSourcesRequestSourceType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# REQUIRED
             		sourceNames = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateSource operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: CreateSource
             
             $query = New-RscMutationMongoDb -CreateSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# OPTIONAL
             		cassandraYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		dseYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		enableSsl = $someBoolean
             		# OPTIONAL
             		httpsCertificate = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		jmxPassword = $someString
             		# OPTIONAL
             		jmxUser = $someString
             		# OPTIONAL
             		parameterEncoded = $someBoolean
             		# OPTIONAL
             		sourceAuthKey = $someString
             		# OPTIONAL
             		sourceAuthKeyfile = $someString
             		# OPTIONAL
             		sourceAuthPassphrase = $someString
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sourceHttpsPort = $someString
             		# OPTIONAL
             		sourcePassword = $someString
             		# OPTIONAL
             		sourcePort = $someString
             		# OPTIONAL
             		sourceRpcPort = $someString
             		# OPTIONAL
             		sourceSshPort = $someString
             		# OPTIONAL
             		sourceUser = $someString
             		# OPTIONAL
             		sslCaCerts = $someString
             		# OPTIONAL
             		sslCertfile = $someString
             		# OPTIONAL
             		sslKeyfile = $someString
             		# REQUIRED
             		sourceType = $someSourceSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSourceType]) for enum values.
             		# OPTIONAL
             		sslCertReqs = $someSourceSslCertReqs # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSslCertReqs]) for enum values.
             		# REQUIRED
             		sourceIp = @(
             			$someString
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSource operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: DeleteSource
             
             $query = New-RscMutationMongoDb -DeleteSource
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceType = $someV2DeleteMosaicSourceRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2DeleteMosaicSourceRequestSourceType]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverSource operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: RecoverSource
             
             $query = New-RscMutationMongoDb -RecoverSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryData = @{
             		# OPTIONAL
             		destinationManagementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# OPTIONAL
             		destinationSourceName = $someString
             		# OPTIONAL
             		keyspaceConfig = $someString
             		# OPTIONAL
             		maxDiskUsage = $someString
             		# OPTIONAL
             		restoreDbUserPwd = $someString
             		# OPTIONAL
             		restoreDbUsername = $someString
             		# OPTIONAL
             		startTimestamp = $someInt
             		# OPTIONAL
             		targetEncryptionKey = $someString
             		# OPTIONAL
             		targetQuery = $someString
             		# OPTIONAL
             		sourceType = $someMosaicRetrieveRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicRetrieveRequestSourceType]) for enum values.
             		# REQUIRED
             		destinationPath = $someString
             		# REQUIRED
             		managementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# REQUIRED
             		parameterEncoded = $someBoolean
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		versionTime = $someInt
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateSource operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: UpdateSource
             
             $query = New-RscMutationMongoDb -UpdateSource
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sourceData = @{
             		# OPTIONAL
             		async = $someBoolean
             		# OPTIONAL
             		cassandraYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		dseYaml = @(
             			$someString
             		)
             		# OPTIONAL
             		enableSsl = $someBoolean
             		# OPTIONAL
             		httpsCertificate = $someString
             		# OPTIONAL
             		ignoreSecondaries = @(
             			$someString
             		)
             		# OPTIONAL
             		jmxPassword = $someString
             		# OPTIONAL
             		jmxUser = $someString
             		# OPTIONAL
             		parameterEncoded = $someBoolean
             		# OPTIONAL
             		sourceAuthKey = $someString
             		# OPTIONAL
             		sourceAuthKeyfile = $someString
             		# OPTIONAL
             		sourceAuthPassphrase = $someString
             		# OPTIONAL
             		sourceDriverPassword = $someString
             		# OPTIONAL
             		sourceDriverUser = $someString
             		# OPTIONAL
             		sourceHttpsPort = $someString
             		# OPTIONAL
             		sourcePassword = $someString
             		# OPTIONAL
             		sourcePort = $someString
             		# OPTIONAL
             		sourceRpcPort = $someString
             		# OPTIONAL
             		sourceSshPort = $someString
             		# OPTIONAL
             		sourceUser = $someString
             		# OPTIONAL
             		sslCaCerts = $someString
             		# OPTIONAL
             		sslCertfile = $someString
             		# OPTIONAL
             		sslKeyfile = $someString
             		# REQUIRED
             		sourceType = $someSourceSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSourceType]) for enum values.
             		# OPTIONAL
             		sslCertReqs = $someSourceSslCertReqs # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SourceSslCertReqs]) for enum values.
             		# REQUIRED
             		sourceIp = @(
             			$someString
             		)
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationMosaic">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'Mosaic' API domain:
             AddStore, DeleteStore, or UpdateStore.
             </summary>
             <description>
             New-RscMutationMosaic creates a new
             mutation object for operations
             in the 'Mosaic' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'Mosaic' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddStore, DeleteStore, or UpdateStore.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMosaic -AddStore).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMosaic -AddStore).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddStore operation
             of the 'Mosaic' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mosaic
             # API Operation: AddStore
             
             $query = New-RscMutationMosaic -AddStore
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	addStoreData = @{
             		# OPTIONAL
             		accessKeyId = $someString
             		# OPTIONAL
             		nfsServer = $someString
             		# OPTIONAL
             		nfsServerMountPath = $someString
             		# OPTIONAL
             		secretKey = $someString
             		# OPTIONAL
             		skipKeyFileConfig = $someBoolean
             		# REQUIRED
             		storeType = $someMosaicAddStoreRequestStoreType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicAddStoreRequestStoreType]) for enum values.
             		# REQUIRED
             		storeName = $someString
             		# REQUIRED
             		storeUrl = $someString
             	}
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteStore operation
             of the 'Mosaic' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mosaic
             # API Operation: DeleteStore
             
             $query = New-RscMutationMosaic -DeleteStore
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	storeName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateStore operation
             of the 'Mosaic' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mosaic
             # API Operation: UpdateStore
             
             $query = New-RscMutationMosaic -UpdateStore
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	modifyStoreData = @{
             		# OPTIONAL
             		accessKeyId = $someString
             		# OPTIONAL
             		secretKey = $someString
             		# OPTIONAL
             		skipKeyFileConfig = $someBoolean
             		# REQUIRED
             		storeName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicAsyncResponse
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationMssql">
             <summary>
             Create a new RscQuery object for any of the 17
             operations in the 'Microsoft SQL Server' API domain:
             AssignSlaDomainProperties, AssignSlaDomainPropertiesAsync, BrowseDatabaseSnapshot, BulkCreateOnDemandBackup, BulkUpdateDbs, CreateLiveMount, CreateLogShippingConfiguration, CreateOnDemandBackup, DeleteDbSnapshots, DeleteLiveMount, DownloadDatabaseBackupFiles, DownloadDatabaseFilesFromArchivalLocation, ExportDatabase, RestoreDatabase, TakeLogBackup, UpdateDefaultProperties, or UpdateLogShippingConfiguration.
             </summary>
             <description>
             New-RscMutationMssql creates a new
             mutation object for operations
             in the 'Microsoft SQL Server' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 17 operations
             in the 'Microsoft SQL Server' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AssignSlaDomainProperties, AssignSlaDomainPropertiesAsync, BrowseDatabaseSnapshot, BulkCreateOnDemandBackup, BulkUpdateDbs, CreateLiveMount, CreateLogShippingConfiguration, CreateOnDemandBackup, DeleteDbSnapshots, DeleteLiveMount, DownloadDatabaseBackupFiles, DownloadDatabaseFilesFromArchivalLocation, ExportDatabase, RestoreDatabase, TakeLogBackup, UpdateDefaultProperties, or UpdateLogShippingConfiguration.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMssql -AssignSlaDomainProperties).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationMssql -AssignSlaDomainProperties).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AssignSlaDomainProperties operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: AssignSlaDomainProperties
             
             $query = New-RscMutationMssql -AssignSlaDomainProperties
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	updateInfo = @{
             		# OPTIONAL
             		shouldApplyToExistingSnapshots = $someBoolean
             		# OPTIONAL
             		shouldApplyToNonPolicySnapshots = $someBoolean
             		# OPTIONAL
             		mssqlSlaPatchProperties = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			useConfiguredDefaultLogRetention = $someBoolean
             			# OPTIONAL
             			mssqlSlaRelatedProperties = @{
             				# OPTIONAL
             				copyOnly = $someBoolean
             				# OPTIONAL
             				logBackupFrequencyInSeconds = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				hostLogRetention = $someInt
             			}
             		}
             		# OPTIONAL
             		existingSnapshotRetention = $someExistingSnapshotRetention # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ExistingSnapshotRetention]) for enum values.
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignSlaDomainPropertiesAsync operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: AssignSlaDomainPropertiesAsync
             
             $query = New-RscMutationMssql -AssignSlaDomainPropertiesAsync
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	updateInfo = @{
             		# OPTIONAL
             		shouldApplyToExistingSnapshots = $someBoolean
             		# OPTIONAL
             		shouldApplyToNonPolicySnapshots = $someBoolean
             		# OPTIONAL
             		mssqlSlaPatchProperties = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			useConfiguredDefaultLogRetention = $someBoolean
             			# OPTIONAL
             			mssqlSlaRelatedProperties = @{
             				# OPTIONAL
             				copyOnly = $someBoolean
             				# OPTIONAL
             				logBackupFrequencyInSeconds = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				hostLogRetention = $someInt
             			}
             		}
             		# OPTIONAL
             		existingSnapshotRetention = $someExistingSnapshotRetention # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ExistingSnapshotRetention]) for enum values.
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AssignMssqlSlaDomainPropertiesAsyncReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseDatabaseSnapshot operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: BrowseDatabaseSnapshot
             
             $query = New-RscMutationMssql -BrowseDatabaseSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		endPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# OPTIONAL
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		startPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		backupType = $someMssqlBackupType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlBackupType]) for enum values.
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BrowseMssqlDatabaseSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkCreateOnDemandBackup operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: BulkCreateOnDemandBackup
             
             $query = New-RscMutationMssql -BulkCreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		availabilityGroupIds = @(
             			$someString
             		)
             		# OPTIONAL
             		databaseIds = @(
             			$someString
             		)
             		# OPTIONAL
             		forceFullSnapshot = $someBoolean
             		# OPTIONAL
             		hostIds = @(
             			$someString
             		)
             		# OPTIONAL
             		instanceIds = @(
             			$someString
             		)
             		# OPTIONAL
             		windowsClusterIds = @(
             			$someString
             		)
             		# OPTIONAL
             		baseOnDemandSnapshotConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkUpdateDbs operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: BulkUpdateDbs
             
             $query = New-RscMutationMssql -BulkUpdateDbs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	dbsUpdateProperties = @(
             		@{
             			# REQUIRED
             			databaseId = $someString
             			# REQUIRED
             			updateProperties = @{
             				# OPTIONAL
             				configuredSlaDomainId = $someString
             				# OPTIONAL
             				maxDataStreams = $someInt
             				# OPTIONAL
             				postBackupScript = @{
             					# REQUIRED
             					scriptErrorAction = $someScriptErrorAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ScriptErrorAction]) for enum values.
             					# REQUIRED
             					scriptPath = $someString
             					# REQUIRED
             					timeoutMs = $someInt64
             				}
             				# OPTIONAL
             				preBackupScript = @{
             					# REQUIRED
             					scriptErrorAction = $someScriptErrorAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ScriptErrorAction]) for enum values.
             					# REQUIRED
             					scriptPath = $someString
             					# REQUIRED
             					timeoutMs = $someInt64
             				}
             				# OPTIONAL
             				isPaused = $someBoolean
             				# OPTIONAL
             				shouldForceFull = $someBoolean
             				# OPTIONAL
             				mssqlNonSlaProperties = @{
             					# OPTIONAL
             					copyOnly = $someBoolean
             					# OPTIONAL
             					logBackupFrequencyInSeconds = $someInt
             					# OPTIONAL
             					logRetentionHours = $someInt
             				}
             				# OPTIONAL
             				mssqlSlaPatchProperties = @{
             					# OPTIONAL
             					configuredSlaDomainId = $someString
             					# OPTIONAL
             					useConfiguredDefaultLogRetention = $someBoolean
             					# OPTIONAL
             					mssqlSlaRelatedProperties = @{
             						# OPTIONAL
             						copyOnly = $someBoolean
             						# OPTIONAL
             						logBackupFrequencyInSeconds = $someInt
             						# OPTIONAL
             						logRetentionHours = $someInt
             						# OPTIONAL
             						hasLogConfigFromSla = $someBoolean
             						# OPTIONAL
             						hostLogRetention = $someInt
             					}
             				}
             				# OPTIONAL
             				mssqlSlaRelatedProperties = @{
             					# OPTIONAL
             					copyOnly = $someBoolean
             					# OPTIONAL
             					logBackupFrequencyInSeconds = $someInt
             					# OPTIONAL
             					logRetentionHours = $someInt
             					# OPTIONAL
             					hasLogConfigFromSla = $someBoolean
             					# OPTIONAL
             					hostLogRetention = $someInt
             				}
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateMssqlDbsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateLiveMount operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: CreateLiveMount
             
             $query = New-RscMutationMssql -CreateLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetInstanceId = $someString
             		# OPTIONAL
             		recoveryModel = $someMssqlDatabaseRecoveryModel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlDatabaseRecoveryModel]) for enum values.
             		# REQUIRED
             		mountedDatabaseName = $someString
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateLogShippingConfiguration operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: CreateLogShippingConfiguration
             
             $query = New-RscMutationMssql -CreateLogShippingConfiguration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		makeupReseedLimit = $someInt
             		# OPTIONAL
             		mssqlLogShippingCreateConfig = @{
             			# OPTIONAL
             			maxDataStreams = $someInt
             			# OPTIONAL
             			targetDataFilePath = $someString
             			# OPTIONAL
             			targetFilePaths = @(
             				@{
             					# OPTIONAL
             					newFilename = $someString
             					# OPTIONAL
             					newLogicalName = $someString
             					# REQUIRED
             					exportPath = $someString
             					# REQUIRED
             					logicalName = $someString
             				}
             			)
             			# OPTIONAL
             			targetLogFilePath = $someString
             			# OPTIONAL
             			mssqlLogShippingTargetStateOptions = @{
             				# OPTIONAL
             				shouldDisconnectStandbyUsers = $someBoolean
             				# REQUIRED
             				state = $someMssqlLogShippingOkState # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlLogShippingOkState]) for enum values.
             			}
             			# REQUIRED
             			targetDatabaseName = $someString
             			# REQUIRED
             			targetInstanceId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandBackup operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: CreateOnDemandBackup
             
             $query = New-RscMutationMssql -CreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		forceFullSnapshot = $someBoolean
             		# OPTIONAL
             		baseOnDemandSnapshotConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteDbSnapshots operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DeleteDbSnapshots
             
             $query = New-RscMutationMssql -DeleteDbSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteLiveMount operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DeleteLiveMount
             
             $query = New-RscMutationMssql -DeleteLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	force = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadDatabaseBackupFiles operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DownloadDatabaseBackupFiles
             
             $query = New-RscMutationMssql -DownloadDatabaseBackupFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		items = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadDatabaseFilesFromArchivalLocation operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DownloadDatabaseFilesFromArchivalLocation
             
             $query = New-RscMutationMssql -DownloadDatabaseFilesFromArchivalLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportDatabase operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: ExportDatabase
             
             $query = New-RscMutationMssql -ExportDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		allowOverwrite = $someBoolean
             		# OPTIONAL
             		finishRecovery = $someBoolean
             		# OPTIONAL
             		maxDataStreams = $someInt
             		# OPTIONAL
             		targetDataFilePath = $someString
             		# OPTIONAL
             		targetFilePaths = @(
             			@{
             				# OPTIONAL
             				newFilename = $someString
             				# OPTIONAL
             				newLogicalName = $someString
             				# REQUIRED
             				exportPath = $someString
             				# REQUIRED
             				logicalName = $someString
             			}
             		)
             		# OPTIONAL
             		targetLogFilePath = $someString
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# REQUIRED
             		targetDatabaseName = $someString
             		# REQUIRED
             		targetInstanceId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreDatabase operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: RestoreDatabase
             
             $query = New-RscMutationMssql -RestoreDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		finishRecovery = $someBoolean
             		# OPTIONAL
             		maxDataStreams = $someInt
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			lsnPoint = @{
             				# OPTIONAL
             				recoveryForkGuid = $someString
             				# REQUIRED
             				lsn = $someString
             			}
             			# OPTIONAL
             			timestampMs = $someInt64
             			# OPTIONAL
             			date = $someDateTime
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeLogBackup operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: TakeLogBackup
             
             $query = New-RscMutationMssql -TakeLogBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateDefaultProperties operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: UpdateDefaultProperties
             
             $query = New-RscMutationMssql -UpdateDefaultProperties
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	defaultProperties = @{
             		# OPTIONAL
             		cbtStatus = $someBoolean
             		# OPTIONAL
             		logBackupFrequencyInSeconds = $someInt64
             		# OPTIONAL
             		logRetentionTimeInHours = $someInt
             		# OPTIONAL
             		shouldUseDefaultBackupLocation = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateMssqlDefaultPropertiesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateLogShippingConfiguration operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: UpdateLogShippingConfiguration
             
             $query = New-RscMutationMssql -UpdateLogShippingConfiguration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		makeupReseedLimit = $someInt
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateMssqlLogShippingConfigurationReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationNas">
             <summary>
             Create a new RscQuery object for any of the 5
             operations in the 'NAS' API domain:
             BulkDeleteNasSystems, DeleteNasSystem, RefreshNasSystems, RegisterNasSystem, or UpdateNasSystem.
             </summary>
             <description>
             New-RscMutationNas creates a new
             mutation object for operations
             in the 'NAS' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 5 operations
             in the 'NAS' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkDeleteNasSystems, DeleteNasSystem, RefreshNasSystems, RegisterNasSystem, or UpdateNasSystem.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationNas -BulkDeleteNasSystems).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationNas -BulkDeleteNasSystems).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkDeleteNasSystems operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: BulkDeleteNasSystems
             
             $query = New-RscMutationNas -BulkDeleteNasSystems
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bulkDeleteNasSystemRequest = @{
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteNasSystem operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: DeleteNasSystem
             
             $query = New-RscMutationNas -DeleteNasSystem
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshNasSystems operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: RefreshNasSystems
             
             $query = New-RscMutationNas -RefreshNasSystems
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	discoverNasSystemRequest = @{
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RefreshNasSystemsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterNasSystem operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: RegisterNasSystem
             
             $query = New-RscMutationNas -RegisterNasSystem
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	nasSystem = @{
             		# OPTIONAL
             		genericNasSystemParameters = @{
             			# OPTIONAL
             			smbCredentials = @{
             				# REQUIRED
             				password = $someString
             				# REQUIRED
             				username = $someString
             			}
             			# REQUIRED
             			hasNfsSupport = $someBoolean
             			# REQUIRED
             			hasSmbSupport = $someBoolean
             		}
             		# OPTIONAL
             		isIsilonChangelistEnabled = $someBoolean
             		# OPTIONAL
             		nasTmpApiCredentials = @{
             			# OPTIONAL
             			apiCertificate = $someString
             			# OPTIONAL
             			apiPassword = $someString
             			# OPTIONAL
             			apiUsername = $someString
             			# OPTIONAL
             			certificateId = $someString
             		}
             		# OPTIONAL
             		nasFlashBladeApiCredentials = @{
             			# OPTIONAL
             			apiCertificate = $someString
             			# OPTIONAL
             			certificateId = $someString
             			# OPTIONAL
             			smbCredentials = @{
             				# REQUIRED
             				password = $someString
             				# REQUIRED
             				username = $someString
             			}
             			# REQUIRED
             			apiToken = $someString
             			# REQUIRED
             			hasSmbSupport = $someBoolean
             		}
             		# OPTIONAL
             		nutanixFileServerParameters = @{
             			# OPTIONAL
             			apiCertificate = $someString
             			# OPTIONAL
             			certificateId = $someString
             			# OPTIONAL
             			smbCredentials = @{
             				# REQUIRED
             				password = $someString
             				# REQUIRED
             				username = $someString
             			}
             			# OPTIONAL
             			apiPassword = $someString
             			# OPTIONAL
             			apiUsername = $someString
             			# REQUIRED
             			hasSmbSupport = $someBoolean
             		}
             		# REQUIRED
             		nasVendorType = $someNasVendorType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NasVendorType]) for enum values.
             		# REQUIRED
             		hostname = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RegisterNasSystemReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateNasSystem operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: UpdateNasSystem
             
             $query = New-RscMutationNas -UpdateNasSystem
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	nasSystemUpdateProperties = @{
             		# OPTIONAL
             		genericNasSystemParameters = @{
             			# OPTIONAL
             			smbCredentials = @{
             				# REQUIRED
             				password = $someString
             				# REQUIRED
             				username = $someString
             			}
             			# REQUIRED
             			hasNfsSupport = $someBoolean
             			# REQUIRED
             			hasSmbSupport = $someBoolean
             		}
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		isIsilonChangelistEnabled = $someBoolean
             		# OPTIONAL
             		nasApiCredentials = @{
             			# OPTIONAL
             			apiCertificate = $someString
             			# OPTIONAL
             			apiPassword = $someString
             			# OPTIONAL
             			apiUsername = $someString
             			# OPTIONAL
             			certificateId = $someString
             		}
             		# OPTIONAL
             		nasFlashBladeApiCredentials = @{
             			# OPTIONAL
             			apiCertificate = $someString
             			# OPTIONAL
             			certificateId = $someString
             			# OPTIONAL
             			smbCredentials = @{
             				# REQUIRED
             				password = $someString
             				# REQUIRED
             				username = $someString
             			}
             			# REQUIRED
             			apiToken = $someString
             			# REQUIRED
             			hasSmbSupport = $someBoolean
             		}
             		# OPTIONAL
             		nutanixFileServerParameters = @{
             			# OPTIONAL
             			apiCertificate = $someString
             			# OPTIONAL
             			certificateId = $someString
             			# OPTIONAL
             			smbCredentials = @{
             				# REQUIRED
             				password = $someString
             				# REQUIRED
             				username = $someString
             			}
             			# OPTIONAL
             			apiPassword = $someString
             			# OPTIONAL
             			apiUsername = $someString
             			# REQUIRED
             			hasSmbSupport = $someBoolean
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateNasSystemReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationNfs">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'NFS' API domain:
             CreateReaderTarget, CreateTarget, or UpdateTarget.
             </summary>
             <description>
             New-RscMutationNfs creates a new
             mutation object for operations
             in the 'NFS' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'NFS' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateReaderTarget, CreateTarget, or UpdateTarget.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationNfs -CreateReaderTarget).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationNfs -CreateReaderTarget).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateReaderTarget operation
             of the 'NFS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nfs
             # API Operation: CreateReaderTarget
             
             $query = New-RscMutationNfs -CreateReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	host = $someString
             	# REQUIRED
             	exportDir = $someString
             	# OPTIONAL
             	nfsVersion = $someInt
             	# REQUIRED
             	nfsAuthType = $someAuthTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuthTypeEnum]) for enum values.
             	# OPTIONAL
             	otherNfsOptions = $someString
             	# REQUIRED
             	fileLockPeriodInSeconds = $someInt
             	# REQUIRED
             	destinationFolder = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	encryptionPassword = $someString
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateTarget operation
             of the 'NFS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nfs
             # API Operation: CreateTarget
             
             $query = New-RscMutationNfs -CreateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	host = $someString
             	# REQUIRED
             	exportDir = $someString
             	# OPTIONAL
             	nfsVersion = $someInt
             	# REQUIRED
             	nfsAuthType = $someAuthTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuthTypeEnum]) for enum values.
             	# OPTIONAL
             	otherNfsOptions = $someString
             	# REQUIRED
             	fileLockPeriodInSeconds = $someInt
             	# REQUIRED
             	destinationFolder = $someString
             	# REQUIRED
             	isConsolidationEnabled = $someBoolean
             	# OPTIONAL
             	encryptionPassword = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'NFS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nfs
             # API Operation: UpdateTarget
             
             $query = New-RscMutationNfs -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	host = $someString
             	# OPTIONAL
             	exportDir = $someString
             	# OPTIONAL
             	nfsAuthType = $someAuthTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuthTypeEnum]) for enum values.
             	# OPTIONAL
             	fileLockPeriodInSeconds = $someInt
             	# OPTIONAL
             	isConsolidationEnabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationNutanix">
             <summary>
             Create a new RscQuery object for any of the 25
             operations in the 'Nutanix' API domain:
             BatchExportVm, BatchMountVm, BulkOnDemandSnapshotVm, CreateCluster, CreateOnDemandBackup, CreatePrismCentral, DeleteCluster, DeleteMountV1, DeletePrismCentral, DeleteSnapshot, DeleteSnapshots, DownloadFilesSnapshot, DownloadSnapshot, DownloadVmFromLocation, ExportSnapshot, MigrateMountV1, MountSnapshotV1, PatchMountV1, RefreshCluster, RefreshPrismCentral, RegisterAgentVm, RestoreFilesSnapshot, UpdateCluster, UpdatePrismCentral, or UpdateVm.
             </summary>
             <description>
             New-RscMutationNutanix creates a new
             mutation object for operations
             in the 'Nutanix' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 25 operations
             in the 'Nutanix' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BatchExportVm, BatchMountVm, BulkOnDemandSnapshotVm, CreateCluster, CreateOnDemandBackup, CreatePrismCentral, DeleteCluster, DeleteMountV1, DeletePrismCentral, DeleteSnapshot, DeleteSnapshots, DownloadFilesSnapshot, DownloadSnapshot, DownloadVmFromLocation, ExportSnapshot, MigrateMountV1, MountSnapshotV1, PatchMountV1, RefreshCluster, RefreshPrismCentral, RegisterAgentVm, RestoreFilesSnapshot, UpdateCluster, UpdatePrismCentral, or UpdateVm.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationNutanix -BatchExportVm).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationNutanix -BatchExportVm).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BatchExportVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: BatchExportVm
             
             $query = New-RscMutationNutanix -BatchExportVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				exportConfig = @{
             					# OPTIONAL
             					nutanixClusterId = $someString
             					# OPTIONAL
             					powerOn = $someBoolean
             					# OPTIONAL
             					removeNetworkDevices = $someBoolean
             					# OPTIONAL
             					vmName = $someString
             					# OPTIONAL
             					keepMacAddresses = $someBoolean
             					# OPTIONAL
             					nicNetworkUuids = @(
             						$someString
             					)
             					# REQUIRED
             					containerNaturalId = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchExportNutanixVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchMountVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: BatchMountVm
             
             $query = New-RscMutationNutanix -BatchMountVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				mountConfig = @{
             					# OPTIONAL
             					containerNaturalId = $someString
             					# OPTIONAL
             					nutanixClusterId = $someString
             					# OPTIONAL
             					shouldMigrateImmediately = $someBoolean
             					# OPTIONAL
             					shouldPowerOn = $someBoolean
             					# OPTIONAL
             					shouldRemoveNetwork = $someBoolean
             					# OPTIONAL
             					targetNetwork = $someString
             					# OPTIONAL
             					vmName = $someString
             					# OPTIONAL
             					keepMacAddresses = $someBoolean
             					# OPTIONAL
             					nicNetworkUuids = @(
             						$someString
             					)
             					# REQUIRED
             					shouldDisableMigration = $someBoolean
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchMountNutanixVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkOnDemandSnapshotVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: BulkOnDemandSnapshotVm
             
             $query = New-RscMutationNutanix -BulkOnDemandSnapshotVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		vms = @(
             			@{
             				# REQUIRED
             				backupConfig = @{
             					# OPTIONAL
             					slaId = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkOnDemandSnapshotNutanixVmReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateCluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: CreateCluster
             
             $query = New-RscMutationNutanix -CreateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	nutanixClusterConfig = @{
             		# REQUIRED
             		caCerts = $someString
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		nutanixClusterUuid = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandBackup operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: CreateOnDemandBackup
             
             $query = New-RscMutationNutanix -CreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreatePrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: CreatePrismCentral
             
             $query = New-RscMutationNutanix -CreatePrismCentral
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	prismCentralConfig = @{
             		# REQUIRED
             		caCerts = $someString
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             	# REQUIRED
             	prismElementCdmTuple = @(
             		@{
             			# REQUIRED
             			nutanixClusterId = $someString
             			# REQUIRED
             			cdmClusterId = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeleteCluster
             
             $query = New-RscMutationNutanix -DeleteCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteMountV1 operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeleteMountV1
             
             $query = New-RscMutationNutanix -DeleteMountV1
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeletePrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeletePrismCentral
             
             $query = New-RscMutationNutanix -DeletePrismCentral
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeleteSnapshot
             
             $query = New-RscMutationNutanix -DeleteSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	location = $someInternalDeleteNutanixSnapshotRequestLocation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalDeleteNutanixSnapshotRequestLocation]) for enum values.
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshots operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DeleteSnapshots
             
             $query = New-RscMutationNutanix -DeleteSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadFilesSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DownloadFilesSnapshot
             
             $query = New-RscMutationNutanix -DownloadFilesSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# REQUIRED
             		paths = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DownloadSnapshot
             
             $query = New-RscMutationNutanix -DownloadSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadVmFromLocation operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: DownloadVmFromLocation
             
             $query = New-RscMutationNutanix -DownloadVmFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: ExportSnapshot
             
             $query = New-RscMutationNutanix -ExportSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		nutanixClusterId = $someString
             		# OPTIONAL
             		powerOn = $someBoolean
             		# OPTIONAL
             		removeNetworkDevices = $someBoolean
             		# OPTIONAL
             		vmName = $someString
             		# OPTIONAL
             		keepMacAddresses = $someBoolean
             		# OPTIONAL
             		nicNetworkUuids = @(
             			$someString
             		)
             		# REQUIRED
             		containerNaturalId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MigrateMountV1 operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: MigrateMountV1
             
             $query = New-RscMutationNutanix -MigrateMountV1
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountSnapshotV1 operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: MountSnapshotV1
             
             $query = New-RscMutationNutanix -MountSnapshotV1
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		containerNaturalId = $someString
             		# OPTIONAL
             		nutanixClusterId = $someString
             		# OPTIONAL
             		shouldMigrateImmediately = $someBoolean
             		# OPTIONAL
             		shouldPowerOn = $someBoolean
             		# OPTIONAL
             		shouldRemoveNetwork = $someBoolean
             		# OPTIONAL
             		targetNetwork = $someString
             		# OPTIONAL
             		vmName = $someString
             		# OPTIONAL
             		keepMacAddresses = $someBoolean
             		# OPTIONAL
             		nicNetworkUuids = @(
             			$someString
             		)
             		# REQUIRED
             		shouldDisableMigration = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchMountV1 operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: PatchMountV1
             
             $query = New-RscMutationNutanix -PatchMountV1
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		shouldPowerOn = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PatchNutanixMountV1Reply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshCluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: RefreshCluster
             
             $query = New-RscMutationNutanix -RefreshCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshPrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: RefreshPrismCentral
             
             $query = New-RscMutationNutanix -RefreshPrismCentral
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterAgentVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: RegisterAgentVm
             
             $query = New-RscMutationNutanix -RegisterAgentVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreFilesSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: RestoreFilesSnapshot
             
             $query = New-RscMutationNutanix -RestoreFilesSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetVirtualMachineId = $someString
             		# REQUIRED
             		restoreConfig = @(
             			@{
             				# REQUIRED
             				path = $someString
             				# REQUIRED
             				restorePath = $someString
             			}
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: UpdateCluster
             
             $query = New-RscMutationNutanix -UpdateCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	patchProperties = @{
             		# OPTIONAL
             		caCerts = $someString
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		snapshotConsistencyMandate = $someCdmNutanixSnapshotConsistencyMandate # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmNutanixSnapshotConsistencyMandate]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateNutanixClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdatePrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: UpdatePrismCentral
             
             $query = New-RscMutationNutanix -UpdatePrismCentral
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	patchProperties = @{
             		# OPTIONAL
             		caCerts = $someString
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		nutanixClusters = @(
             			@{
             				# OPTIONAL
             				name = $someString
             				# REQUIRED
             				clusterUuid = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateNutanixPrismCentralReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: UpdateVm
             
             $query = New-RscMutationNutanix -UpdateVm
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	vmPatchProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		excludedDiskIds = @(
             			$someString
             		)
             		# OPTIONAL
             		isPaused = $someBoolean
             		# OPTIONAL
             		postBackupScript = @{
             			# REQUIRED
             			failureHandling = $someNutanixVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixVirtualMachineScriptDetailFailureHandling]) for enum values.
             			# REQUIRED
             			scriptPath = $someString
             			# REQUIRED
             			timeoutMs = $someInt64
             		}
             		# OPTIONAL
             		postSnapScript = @{
             			# REQUIRED
             			failureHandling = $someNutanixVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixVirtualMachineScriptDetailFailureHandling]) for enum values.
             			# REQUIRED
             			scriptPath = $someString
             			# REQUIRED
             			timeoutMs = $someInt64
             		}
             		# OPTIONAL
             		preBackupScript = @{
             			# REQUIRED
             			failureHandling = $someNutanixVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixVirtualMachineScriptDetailFailureHandling]) for enum values.
             			# REQUIRED
             			scriptPath = $someString
             			# REQUIRED
             			timeoutMs = $someInt64
             		}
             		# OPTIONAL
             		snapshotConsistencyMandate = $someCdmNutanixSnapshotConsistencyMandate # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmNutanixSnapshotConsistencyMandate]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationO365">
             <summary>
             Create a new RscQuery object for any of the 31
             operations in the 'Office 365' API domain:
             AddOrg, BackupMailbox, BackupOnedrive, BackupSharePointSite, BackupSharepointDrive, BackupSharepointList, BackupTeam, CreateAppComplete, CreateAppKickoff, DeleteAzureApp, DeleteOrg, DeleteServiceAccount, EnableSharePoint, EnableTeams, ExportMailbox, InsertCustomerApp, OauthConsentComplete, OauthConsentKickoff, PdlGroups, RefreshOrg, RestoreMailbox, RestoreSnappable, RestoreTeamsConversations, RestoreTeamsFiles, SaaSSetupKickoff, SaasSetupComplete, SetServiceAccount, SetupKickoff, UpdateAppAuthStatus, UpdateAppPermissions, or UpdateOrgCustomName.
             </summary>
             <description>
             New-RscMutationO365 creates a new
             mutation object for operations
             in the 'Office 365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 31 operations
             in the 'Office 365' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddOrg, BackupMailbox, BackupOnedrive, BackupSharePointSite, BackupSharepointDrive, BackupSharepointList, BackupTeam, CreateAppComplete, CreateAppKickoff, DeleteAzureApp, DeleteOrg, DeleteServiceAccount, EnableSharePoint, EnableTeams, ExportMailbox, InsertCustomerApp, OauthConsentComplete, OauthConsentKickoff, PdlGroups, RefreshOrg, RestoreMailbox, RestoreSnappable, RestoreTeamsConversations, RestoreTeamsFiles, SaaSSetupKickoff, SaasSetupComplete, SetServiceAccount, SetupKickoff, UpdateAppAuthStatus, UpdateAppPermissions, or UpdateOrgCustomName.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationO365 -AddOrg).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationO365 -AddOrg).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddOrg operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: AddOrg
             
             $query = New-RscMutationO365 -AddOrg
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantId = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	exocomputeClusterId = $someString
             	# REQUIRED
             	appTypes = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddO365OrgResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupMailbox operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupMailbox
             
             $query = New-RscMutationO365 -BackupMailbox
             
             # REQUIRED
             $query.Var.mailboxIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupOnedrive operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupOnedrive
             
             $query = New-RscMutationO365 -BackupOnedrive
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupSharePointSite operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupSharePointSite
             
             $query = New-RscMutationO365 -BackupSharePointSite
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	siteFid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupSharepointDrive operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupSharepointDrive
             
             $query = New-RscMutationO365 -BackupSharepointDrive
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupSharepointList operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupSharepointList
             
             $query = New-RscMutationO365 -BackupSharepointList
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BackupTeam operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BackupTeam
             
             $query = New-RscMutationO365 -BackupTeam
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAppComplete operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: CreateAppComplete
             
             $query = New-RscMutationO365 -CreateAppComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	appClientId = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	tenantId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAppKickoff operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: CreateAppKickoff
             
             $query = New-RscMutationO365 -CreateAppKickoff
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	appType = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateO365AppKickoffResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAzureApp operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: DeleteAzureApp
             
             $query = New-RscMutationO365 -DeleteAzureApp
             
             # REQUIRED
             $query.Var.o365AppClientId = $someString
             # REQUIRED
             $query.Var.o365AppType = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteOrg operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: DeleteOrg
             
             $query = New-RscMutationO365 -DeleteOrg
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteServiceAccount operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: DeleteServiceAccount
             
             $query = New-RscMutationO365 -DeleteServiceAccount
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableSharePoint operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: EnableSharePoint
             
             $query = New-RscMutationO365 -EnableSharePoint
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	exocomputeClusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableTeams operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: EnableTeams
             
             $query = New-RscMutationO365 -EnableTeams
             
             # REQUIRED
             $query.Var.exocomputeClusterId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportMailbox operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ExportMailbox
             
             $query = New-RscMutationO365 -ExportMailbox
             
             # REQUIRED
             $query.Var.exportConfig = @{
             	# OPTIONAL
             	orgUuid = $someString
             	# REQUIRED
             	fromMailboxUuid = $someString
             	# REQUIRED
             	toMailboxUuid = $someString
             	# OPTIONAL
             	snapshotUuid = $someString
             	# REQUIRED
             	exportConfigs = @(
             		@{
             			# REQUIRED
             			SnapshotUUID = $someString
             			# OPTIONAL
             			EmailID = $someString
             			# OPTIONAL
             			FolderID = $someString
             		}
             	)
             	# OPTIONAL
             	actionType = $someO365RestoreActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365RestoreActionType]) for enum values.
             	# OPTIONAL
             	inplaceRestoreConfig = @{
             		# REQUIRED
             		nameCollisionRule = $someNameCollisionRule # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NameCollisionRule]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InsertCustomerApp operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: InsertCustomerApp
             
             $query = New-RscMutationO365 -InsertCustomerApp
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	appType = $someString
             	# REQUIRED
             	appClientId = $someString
             	# REQUIRED
             	appClientSecret = $someString
             	# REQUIRED
             	subscriptionId = $someString
             	# OPTIONAL
             	base64AppCertificate = $someString
             	# OPTIONAL
             	base64AppPrivateKey = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthConsentComplete operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OauthConsentComplete
             
             $query = New-RscMutationO365 -OauthConsentComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantId = $someString
             	# REQUIRED
             	code = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	redirectUrl = $someString
             	# REQUIRED
             	resourceNaturalId = $someString
             	# OPTIONAL
             	resourceId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OauthConsentCompleteReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthConsentKickoff operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OauthConsentKickoff
             
             $query = New-RscMutationO365 -OauthConsentKickoff
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	appType = $someString
             	# OPTIONAL
             	resourceId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OauthConsentKickoffReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PdlGroups operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: PdlGroups
             
             $query = New-RscMutationO365 -PdlGroups
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	pdlAndWorkloadPairs = @(
             		@{
             			# REQUIRED
             			pdl = $someString
             			# REQUIRED
             			workload = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365PdlGroupsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshOrg operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RefreshOrg
             
             $query = New-RscMutationO365 -RefreshOrg
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreMailbox operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RestoreMailbox
             
             $query = New-RscMutationO365 -RestoreMailbox
             
             # REQUIRED
             $query.Var.restoreConfig = @{
             	# OPTIONAL
             	orgUuid = $someString
             	# REQUIRED
             	mailboxUuid = $someString
             	# OPTIONAL
             	snapshotUuid = $someString
             	# REQUIRED
             	restoreConfigs = @(
             		@{
             			# REQUIRED
             			SnapshotUUID = $someString
             			# OPTIONAL
             			EmailID = $someString
             			# OPTIONAL
             			FolderID = $someString
             		}
             	)
             	# REQUIRED
             	actionType = $someO365RestoreActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365RestoreActionType]) for enum values.
             	# OPTIONAL
             	inplaceRestoreConfig = @{
             		# REQUIRED
             		nameCollisionRule = $someNameCollisionRule # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NameCollisionRule]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreSnappable operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RestoreSnappable
             
             $query = New-RscMutationO365 -RestoreSnappable
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snappableType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             	# REQUIRED
             	sourceSnappableUuid = $someString
             	# REQUIRED
             	destinationSnappableUuid = $someString
             	# REQUIRED
             	restoreConfig = @{
             		# OPTIONAL
             		destinationOrgUuid = $someString
             		# OPTIONAL
             		SharePointDriveRestoreConfig = @{
             			# REQUIRED
             			driveRestoreConfig = @{
             				# REQUIRED
             				filesToRestore = @(
             					@{
             						# REQUIRED
             						fileId = $someString
             						# REQUIRED
             						fileName = $someString
             						# REQUIRED
             						fileSnapshotsToRestore = @(
             							@{
             								# REQUIRED
             								snapshotId = $someString
             								# REQUIRED
             								snapshotNum = $someInt
             								# REQUIRED
             								fileSize = $someInt64
             							}
             						)
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				foldersToRestore = @(
             					@{
             						# REQUIRED
             						folderId = $someString
             						# REQUIRED
             						folderName = $someString
             						# REQUIRED
             						folderSize = $someInt64
             						# REQUIRED
             						snapshotId = $someString
             						# REQUIRED
             						snapshotNum = $someInt
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				restoreFolderPath = $someString
             			}
             			# OPTIONAL
             			docLibName = $someString
             			# OPTIONAL
             			parentSiteUuid = $someString
             		}
             		# OPTIONAL
             		sharePointListRestoreConfig = @{
             			# REQUIRED
             			itemsToRestore = @(
             				@{
             					# REQUIRED
             					itemId = $someString
             					# REQUIRED
             					itemName = $someString
             					# REQUIRED
             					itemSnapshotsToRestore = @(
             						@{
             							# REQUIRED
             							snapshotId = $someString
             							# REQUIRED
             							snapshotNum = $someInt
             						}
             					)
             				}
             			)
             			# REQUIRED
             			foldersToRestore = @(
             				@{
             					# REQUIRED
             					folderId = $someString
             					# REQUIRED
             					folderName = $someString
             					# REQUIRED
             					folderSize = $someInt64
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             					# OPTIONAL
             					channelInfo = @{
             						# REQUIRED
             						TeamID = $someString
             						# OPTIONAL
             						ChannelID = $someString
             						# OPTIONAL
             						ChannelName = $someString
             						# OPTIONAL
             						ChannelFolderName = $someString
             						# OPTIONAL
             						ChannelNaturalId = $someString
             						# REQUIRED
             						channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             					}
             				}
             			)
             			# REQUIRED
             			restoreFolderPath = $someString
             			# OPTIONAL
             			listName = $someString
             			# OPTIONAL
             			parentSiteUuid = $someString
             		}
             		# OPTIONAL
             		sharePointFullRestoreConfig = @{
             			# OPTIONAL
             			spObjectToRestore = @{
             				# REQUIRED
             				objectSharepointId = $someString
             				# OPTIONAL
             				objectId = $someString
             				# REQUIRED
             				objectName = $someString
             				# OPTIONAL
             				objectType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             				# REQUIRED
             				snapshotId = $someString
             				# REQUIRED
             				snapshotNum = $someInt
             				# OPTIONAL
             				siteOwnerEmail = $someString
             			}
             			# OPTIONAL
             			spItemsToRestore = @{
             				# REQUIRED
             				sharepointId = $someString
             				# OPTIONAL
             				objectId = $someString
             				# OPTIONAL
             				snappableType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             				# REQUIRED
             				listItems = @(
             					@{
             						# REQUIRED
             						itemId = $someString
             						# REQUIRED
             						itemName = $someString
             						# REQUIRED
             						itemSnapshotsToRestore = @(
             							@{
             								# REQUIRED
             								snapshotId = $someString
             								# REQUIRED
             								snapshotNum = $someInt
             							}
             						)
             					}
             				)
             				# REQUIRED
             				folderItems = @(
             					@{
             						# REQUIRED
             						folderId = $someString
             						# REQUIRED
             						folderName = $someString
             						# REQUIRED
             						folderSize = $someInt64
             						# REQUIRED
             						snapshotId = $someString
             						# REQUIRED
             						snapshotNum = $someInt
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				fileItems = @(
             					@{
             						# REQUIRED
             						fileId = $someString
             						# REQUIRED
             						fileName = $someString
             						# REQUIRED
             						fileSnapshotsToRestore = @(
             							@{
             								# REQUIRED
             								snapshotId = $someString
             								# REQUIRED
             								snapshotNum = $someInt
             								# REQUIRED
             								fileSize = $someInt64
             							}
             						)
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				arePageLibraryItems = $someBoolean
             			}
             			# OPTIONAL
             			targetObjectUuid = $someString
             			# OPTIONAL
             			targetObjectType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             			# REQUIRED
             			shouldCreateNewObject = $someBoolean
             			# OPTIONAL
             			newObjectType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             			# OPTIONAL
             			newObjectName = $someString
             		}
             		# OPTIONAL
             		OneDriveRestoreConfig = @{
             			# REQUIRED
             			filesToRestore = @(
             				@{
             					# REQUIRED
             					fileId = $someString
             					# REQUIRED
             					fileName = $someString
             					# REQUIRED
             					fileSnapshotsToRestore = @(
             						@{
             							# REQUIRED
             							snapshotId = $someString
             							# REQUIRED
             							snapshotNum = $someInt
             							# REQUIRED
             							fileSize = $someInt64
             						}
             					)
             					# OPTIONAL
             					channelInfo = @{
             						# REQUIRED
             						TeamID = $someString
             						# OPTIONAL
             						ChannelID = $someString
             						# OPTIONAL
             						ChannelName = $someString
             						# OPTIONAL
             						ChannelFolderName = $someString
             						# OPTIONAL
             						ChannelNaturalId = $someString
             						# REQUIRED
             						channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             					}
             				}
             			)
             			# REQUIRED
             			foldersToRestore = @(
             				@{
             					# REQUIRED
             					folderId = $someString
             					# REQUIRED
             					folderName = $someString
             					# REQUIRED
             					folderSize = $someInt64
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             					# OPTIONAL
             					channelInfo = @{
             						# REQUIRED
             						TeamID = $someString
             						# OPTIONAL
             						ChannelID = $someString
             						# OPTIONAL
             						ChannelName = $someString
             						# OPTIONAL
             						ChannelFolderName = $someString
             						# OPTIONAL
             						ChannelNaturalId = $someString
             						# REQUIRED
             						channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             					}
             				}
             			)
             			# REQUIRED
             			restoreFolderPath = $someString
             		}
             		# OPTIONAL
             		TeamsRestoreConfig = @{
             			# OPTIONAL
             			filesRestoreConfig = @{
             				# REQUIRED
             				filesToRestore = @(
             					@{
             						# REQUIRED
             						fileId = $someString
             						# REQUIRED
             						fileName = $someString
             						# REQUIRED
             						fileSnapshotsToRestore = @(
             							@{
             								# REQUIRED
             								snapshotId = $someString
             								# REQUIRED
             								snapshotNum = $someInt
             								# REQUIRED
             								fileSize = $someInt64
             							}
             						)
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				foldersToRestore = @(
             					@{
             						# REQUIRED
             						folderId = $someString
             						# REQUIRED
             						folderName = $someString
             						# REQUIRED
             						folderSize = $someInt64
             						# REQUIRED
             						snapshotId = $someString
             						# REQUIRED
             						snapshotNum = $someInt
             						# OPTIONAL
             						channelInfo = @{
             							# REQUIRED
             							TeamID = $someString
             							# OPTIONAL
             							ChannelID = $someString
             							# OPTIONAL
             							ChannelName = $someString
             							# OPTIONAL
             							ChannelFolderName = $someString
             							# OPTIONAL
             							ChannelNaturalId = $someString
             							# REQUIRED
             							channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             						}
             					}
             				)
             				# REQUIRED
             				restoreFolderPath = $someString
             			}
             			# OPTIONAL
             			conversationsRestoreConfig = @{
             				# OPTIONAL
             				SearchFilter = @{
             					# OPTIONAL
             					PostedTime = @{
             						# OPTIONAL
             						FromTime = $someInt64
             						# OPTIONAL
             						UntilTime = $someInt64
             					}
             					# OPTIONAL
             					PostedBy = $someString
             					# OPTIONAL
             					SnapshotId = $someString
             				}
             				# OPTIONAL
             				ChannelInfoForFullRestore = @{
             					# REQUIRED
             					TeamID = $someString
             					# OPTIONAL
             					ChannelID = $someString
             					# OPTIONAL
             					ChannelName = $someString
             					# OPTIONAL
             					ChannelFolderName = $someString
             					# OPTIONAL
             					ChannelFolderId = $someString
             					# OPTIONAL
             					ChannelNaturalId = $someString
             				}
             				# REQUIRED
             				RefreshTokenEncrypted = $someString
             				# REQUIRED
             				O365AppID = $someString
             				# REQUIRED
             				ChannelsToRestore = @(
             					@{
             						# REQUIRED
             						TeamID = $someString
             						# OPTIONAL
             						ChannelID = $someString
             						# OPTIONAL
             						ChannelName = $someString
             						# OPTIONAL
             						ChannelFolderName = $someString
             						# OPTIONAL
             						ChannelFolderId = $someString
             						# OPTIONAL
             						ChannelNaturalId = $someString
             					}
             				)
             				# REQUIRED
             				ShouldRestoreFileAttachments = $someBoolean
             			}
             			# OPTIONAL
             			destChannelInfo = @{
             				# REQUIRED
             				TeamID = $someString
             				# OPTIONAL
             				ChannelID = $someString
             				# OPTIONAL
             				ChannelName = $someString
             				# OPTIONAL
             				ChannelFolderName = $someString
             				# OPTIONAL
             				ChannelNaturalId = $someString
             				# REQUIRED
             				channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             			}
             			# REQUIRED
             			shouldCreateDestChannel = $someBoolean
             			# REQUIRED
             			channelType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             			# REQUIRED
             			restoreLatestPermissions = $someBoolean
             			# REQUIRED
             			snapshotSequenceNum = $someInt
             		}
             		# OPTIONAL
             		MailboxRestoreConfig = @{
             			# OPTIONAL
             			SnapshotUUID = $someString
             			# REQUIRED
             			RestoreConfigs = @(
             				@{
             					# REQUIRED
             					SnapshotUUID = $someString
             					# OPTIONAL
             					EmailID = $someString
             					# OPTIONAL
             					FolderID = $someString
             				}
             			)
             		}
             		# OPTIONAL
             		calendarRestoreConfig = @{
             			# REQUIRED
             			eventsToRestore = @(
             				@{
             					# REQUIRED
             					eventId = $someString
             					# REQUIRED
             					snapshotId = $someString
             				}
             			)
             			# REQUIRED
             			calendarsToRestore = @(
             				@{
             					# REQUIRED
             					calendarId = $someString
             					# REQUIRED
             					snapshotId = $someString
             				}
             			)
             			# REQUIRED
             			calendarGroupsToRestore = @(
             				@{
             					# REQUIRED
             					calendarGroupId = $someString
             					# REQUIRED
             					snapshotId = $someString
             				}
             			)
             		}
             		# OPTIONAL
             		contactsRestoreConfig = @{
             			# REQUIRED
             			contactsToRestore = @(
             				@{
             					# REQUIRED
             					contactId = $someString
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             				}
             			)
             			# REQUIRED
             			contactFoldersToRestore = @(
             				@{
             					# REQUIRED
             					contactFolderId = $someString
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             				}
             			)
             		}
             		# OPTIONAL
             		inplaceRestoreConfig = @{
             			# REQUIRED
             			nameCollisionRule = $someNameCollisionRule # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NameCollisionRule]) for enum values.
             		}
             		# OPTIONAL
             		failedItemsRecoveryConfig = @{
             			# REQUIRED
             			failedItemsInstanceId = $someString
             		}
             	}
             	# REQUIRED
             	actionType = $someO365RestoreActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365RestoreActionType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreTeamsConversations operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RestoreTeamsConversations
             
             $query = New-RscMutationO365 -RestoreTeamsConversations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	teamUuid = $someString
             	# OPTIONAL
             	destTeamsChannelInfo = @{
             		# REQUIRED
             		TeamID = $someString
             		# OPTIONAL
             		ChannelID = $someString
             		# OPTIONAL
             		ChannelName = $someString
             		# OPTIONAL
             		ChannelFolderName = $someString
             		# OPTIONAL
             		ChannelNaturalId = $someString
             		# REQUIRED
             		channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	}
             	# REQUIRED
             	shouldCreateDestChannel = $someBoolean
             	# OPTIONAL
             	channelInfoForFullRestore = @{
             		# REQUIRED
             		naturalId = $someString
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		folderId = $someString
             		# REQUIRED
             		membershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	}
             	# REQUIRED
             	shouldRestoreFileAttachments = $someBoolean
             	# REQUIRED
             	teamChannels = @(
             		@{
             			# REQUIRED
             			naturalId = $someString
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			folderId = $someString
             			# REQUIRED
             			membershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	teamsConversationsSearchFilter = @{
             		# OPTIONAL
             		postedTime = @{
             			# OPTIONAL
             			fromTime = $someDateTime
             			# OPTIONAL
             			untilTime = $someDateTime
             		}
             		# OPTIONAL
             		channelNaturalId = $someString
             		# OPTIONAL
             		postedBy = $someString
             		# OPTIONAL
             		snapshotId = $someString
             		# OPTIONAL
             		parentId = $someString
             		# OPTIONAL
             		convId = $someString
             		# OPTIONAL
             		snapshotNum = $someInt
             		# OPTIONAL
             		includeArchived = $someBoolean
             		# OPTIONAL
             		fetchAllPostSenders = $someString
             		# OPTIONAL
             		skipPostsAttachments = $someBoolean
             	}
             	# REQUIRED
             	refreshTokenEncrypted = $someString
             	# REQUIRED
             	o365AppId = $someString
             	# REQUIRED
             	channelRecoveryType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# REQUIRED
             	recoverWithLatestPermissions = $someBoolean
             	# REQUIRED
             	snapshotSequenceNum = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreTeamsFiles operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: RestoreTeamsFiles
             
             $query = New-RscMutationO365 -RestoreTeamsFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filesToRestore = @(
             		@{
             			# REQUIRED
             			fileId = $someString
             			# REQUIRED
             			fileName = $someString
             			# REQUIRED
             			fileSnapshotsToRestore = @(
             				@{
             					# REQUIRED
             					snapshotId = $someString
             					# REQUIRED
             					snapshotNum = $someInt
             					# REQUIRED
             					fileSize = $someInt64
             				}
             			)
             			# OPTIONAL
             			channelInfo = @{
             				# REQUIRED
             				TeamID = $someString
             				# OPTIONAL
             				ChannelID = $someString
             				# OPTIONAL
             				ChannelName = $someString
             				# OPTIONAL
             				ChannelFolderName = $someString
             				# OPTIONAL
             				ChannelNaturalId = $someString
             				# REQUIRED
             				channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             			}
             		}
             	)
             	# REQUIRED
             	foldersToRestore = @(
             		@{
             			# REQUIRED
             			folderId = $someString
             			# REQUIRED
             			folderName = $someString
             			# REQUIRED
             			folderSize = $someInt64
             			# REQUIRED
             			snapshotId = $someString
             			# REQUIRED
             			snapshotNum = $someInt
             			# OPTIONAL
             			channelInfo = @{
             				# REQUIRED
             				TeamID = $someString
             				# OPTIONAL
             				ChannelID = $someString
             				# OPTIONAL
             				ChannelName = $someString
             				# OPTIONAL
             				ChannelFolderName = $someString
             				# OPTIONAL
             				ChannelNaturalId = $someString
             				# REQUIRED
             				channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             			}
             		}
             	)
             	# OPTIONAL
             	destTeamsChannelInfo = @{
             		# REQUIRED
             		TeamID = $someString
             		# OPTIONAL
             		ChannelID = $someString
             		# OPTIONAL
             		ChannelName = $someString
             		# OPTIONAL
             		ChannelFolderName = $someString
             		# OPTIONAL
             		ChannelNaturalId = $someString
             		# REQUIRED
             		channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	}
             	# REQUIRED
             	shouldCreateDestChannel = $someBoolean
             	# REQUIRED
             	actionType = $someO365RestoreActionType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365RestoreActionType]) for enum values.
             	# REQUIRED
             	channelRecoveryType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# REQUIRED
             	recoverWithLatestPermissions = $someBoolean
             	# REQUIRED
             	snapshotSequenceNum = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateOnDemandJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SaaSSetupKickoff operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SaaSSetupKickoff
             
             $query = New-RscMutationO365 -SaaSSetupKickoff
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SaasSetupKickoffReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SaasSetupComplete operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SaasSetupComplete
             
             $query = New-RscMutationO365 -SaasSetupComplete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	tenantId = $someString
             	# REQUIRED
             	regionName = $someString
             	# REQUIRED
             	stateToken = $someString
             	# REQUIRED
             	appTypes = @(
             		$someString
             	)
             	# OPTIONAL
             	kmsSpec = @{
             		# OPTIONAL
             		cloudType = $someO365AzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AzureCloudType]) for enum values.
             		# OPTIONAL
             		tenantId = $someString
             		# OPTIONAL
             		kmsId = $someString
             		# OPTIONAL
             		appId = $someString
             		# OPTIONAL
             		appSecret = $someString
             		# OPTIONAL
             		keyName = $someString
             		# OPTIONAL
             		kekNameColossus = $someString
             	}
             	# REQUIRED
             	storeBackupInSameRegionAsData = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddO365OrgResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetServiceAccount operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SetServiceAccount
             
             $query = New-RscMutationO365 -SetServiceAccount
             
             # REQUIRED
             $query.Var.username = $someString
             # REQUIRED
             $query.Var.appPassword = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetupKickoff operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SetupKickoff
             
             $query = New-RscMutationO365 -SetupKickoff
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SetupKickoffResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAppAuthStatus operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: UpdateAppAuthStatus
             
             $query = New-RscMutationO365 -UpdateAppAuthStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	o365OrgId = $someString
             	# REQUIRED
             	o365AppId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateO365AppAuthStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAppPermissions operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: UpdateAppPermissions
             
             $query = New-RscMutationO365 -UpdateAppPermissions
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	o365AppType = $someO365AppType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365AppType]) for enum values.
             	# REQUIRED
             	o365AppId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateOrgCustomName operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: UpdateOrgCustomName
             
             $query = New-RscMutationO365 -UpdateOrgCustomName
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgUuid = $someString
             	# REQUIRED
             	customName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateO365OrgCustomNameReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationOracle">
             <summary>
             Create a new RscQuery object for any of the 18
             operations in the 'Oracle' API domain:
             BulkUpdateDatabases, BulkUpdateHosts, BulkUpdateRacs, CreatePdbRestore, DeleteAllDatabaseSnapshots, DeleteMount, DownloadDatabaseSnapshot, ExportDatabase, ExportTablespace, InstantRecoverSnapshot, MountDatabase, RefreshDatabase, RestoreLogs, TakeOnDemandDatabaseSnapshot, TakeOnDemandLogSnapshot, UpdateDataGuardGroup, ValidateAcoFile, or ValidateDatabaseBackups.
             </summary>
             <description>
             New-RscMutationOracle creates a new
             mutation object for operations
             in the 'Oracle' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 18 operations
             in the 'Oracle' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkUpdateDatabases, BulkUpdateHosts, BulkUpdateRacs, CreatePdbRestore, DeleteAllDatabaseSnapshots, DeleteMount, DownloadDatabaseSnapshot, ExportDatabase, ExportTablespace, InstantRecoverSnapshot, MountDatabase, RefreshDatabase, RestoreLogs, TakeOnDemandDatabaseSnapshot, TakeOnDemandLogSnapshot, UpdateDataGuardGroup, ValidateAcoFile, or ValidateDatabaseBackups.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationOracle -BulkUpdateDatabases).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationOracle -BulkUpdateDatabases).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkUpdateDatabases operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: BulkUpdateDatabases
             
             $query = New-RscMutationOracle -BulkUpdateDatabases
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bulkUpdateProperties = @{
             		# OPTIONAL
             		oracleUpdate = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			hostMount = $someString
             			# OPTIONAL
             			logBackupFrequencyInMinutes = $someInt
             			# OPTIONAL
             			logRetentionHours = $someInt
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			hostLogRetentionHours = $someInt
             			# OPTIONAL
             			configuredSlaDomainIdDeprecated = $someString
             			# OPTIONAL
             			nodeOrder = @(
             				@{
             					# REQUIRED
             					nodeName = $someString
             					# REQUIRED
             					order = $someInt
             				}
             			)
             			# OPTIONAL
             			shouldDistributeBackupsAutomatically = $someBoolean
             			# OPTIONAL
             			oracleUpdateCommon = @{
             				# OPTIONAL
             				hostLogRetentionHours = $someInt
             				# OPTIONAL
             				hostMount = $someString
             				# OPTIONAL
             				logBackupFrequencyInMinutes = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				numChannels = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				shouldEnableHighFileCountSupport = $someBoolean
             				# OPTIONAL
             				shouldUseSecureThriftForDataTransfer = $someBoolean
             				# OPTIONAL
             				sectionSizeInGb = $someInt
             				# OPTIONAL
             				isPaused = $someBoolean
             			}
             		}
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateOracleDatabasesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkUpdateHosts operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: BulkUpdateHosts
             
             $query = New-RscMutationOracle -BulkUpdateHosts
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bulkUpdateProperties = @{
             		# OPTIONAL
             		oracleUpdate = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			hostMount = $someString
             			# OPTIONAL
             			logBackupFrequencyInMinutes = $someInt
             			# OPTIONAL
             			logRetentionHours = $someInt
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			hostLogRetentionHours = $someInt
             			# OPTIONAL
             			configuredSlaDomainIdDeprecated = $someString
             			# OPTIONAL
             			nodeOrder = @(
             				@{
             					# REQUIRED
             					nodeName = $someString
             					# REQUIRED
             					order = $someInt
             				}
             			)
             			# OPTIONAL
             			shouldDistributeBackupsAutomatically = $someBoolean
             			# OPTIONAL
             			oracleUpdateCommon = @{
             				# OPTIONAL
             				hostLogRetentionHours = $someInt
             				# OPTIONAL
             				hostMount = $someString
             				# OPTIONAL
             				logBackupFrequencyInMinutes = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				numChannels = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				shouldEnableHighFileCountSupport = $someBoolean
             				# OPTIONAL
             				shouldUseSecureThriftForDataTransfer = $someBoolean
             				# OPTIONAL
             				sectionSizeInGb = $someInt
             				# OPTIONAL
             				isPaused = $someBoolean
             			}
             		}
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateOracleHostsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkUpdateRacs operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: BulkUpdateRacs
             
             $query = New-RscMutationOracle -BulkUpdateRacs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	bulkUpdateProperties = @{
             		# OPTIONAL
             		oracleUpdate = @{
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			hostMount = $someString
             			# OPTIONAL
             			logBackupFrequencyInMinutes = $someInt
             			# OPTIONAL
             			logRetentionHours = $someInt
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			hostLogRetentionHours = $someInt
             			# OPTIONAL
             			configuredSlaDomainIdDeprecated = $someString
             			# OPTIONAL
             			nodeOrder = @(
             				@{
             					# REQUIRED
             					nodeName = $someString
             					# REQUIRED
             					order = $someInt
             				}
             			)
             			# OPTIONAL
             			shouldDistributeBackupsAutomatically = $someBoolean
             			# OPTIONAL
             			oracleUpdateCommon = @{
             				# OPTIONAL
             				hostLogRetentionHours = $someInt
             				# OPTIONAL
             				hostMount = $someString
             				# OPTIONAL
             				logBackupFrequencyInMinutes = $someInt
             				# OPTIONAL
             				logRetentionHours = $someInt
             				# OPTIONAL
             				numChannels = $someInt
             				# OPTIONAL
             				hasLogConfigFromSla = $someBoolean
             				# OPTIONAL
             				shouldEnableHighFileCountSupport = $someBoolean
             				# OPTIONAL
             				shouldUseSecureThriftForDataTransfer = $someBoolean
             				# OPTIONAL
             				sectionSizeInGb = $someInt
             				# OPTIONAL
             				isPaused = $someBoolean
             			}
             		}
             		# REQUIRED
             		ids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BulkUpdateOracleRacsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreatePdbRestore operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: CreatePdbRestore
             
             $query = New-RscMutationOracle -CreatePdbRestore
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		pdbsToRestore = @(
             			$someString
             		)
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAllDatabaseSnapshots operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DeleteAllDatabaseSnapshots
             
             $query = New-RscMutationOracle -DeleteAllDatabaseSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteMount operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DeleteMount
             
             $query = New-RscMutationOracle -DeleteMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	force = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadDatabaseSnapshot operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DownloadDatabaseSnapshot
             
             $query = New-RscMutationOracle -DownloadDatabaseSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportDatabase operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: ExportDatabase
             
             $query = New-RscMutationOracle -ExportDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	request = @{
             		# REQUIRED
             		config = @{
             			# OPTIONAL
             			restoreFilesPath = $someString
             			# OPTIONAL
             			shouldRestoreFilesOnly = $someBoolean
             			# OPTIONAL
             			targetMountPath = $someString
             			# OPTIONAL
             			advancedRecoveryConfigBase64 = $someString
             			# OPTIONAL
             			archiveLogPath = $someString
             			# OPTIONAL
             			cloneDbName = $someString
             			# OPTIONAL
             			customPfilePath = $someString
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			postScriptPath = $someString
             			# OPTIONAL
             			preScriptPath = $someString
             			# OPTIONAL
             			shouldStopRecoveryOnPreScriptFailure = $someBoolean
             			# OPTIONAL
             			pdbsToClone = @(
             				$someString
             			)
             			# OPTIONAL
             			shouldSkipDropDbInUndo = $someBoolean
             			# OPTIONAL
             			targetRacHostIds = @(
             				$someString
             			)
             			# OPTIONAL
             			targetRacPrimaryHostId = $someString
             			# OPTIONAL
             			shouldAllowRenameToSource = $someBoolean
             			# REQUIRED
             			recoveryPoint = @{
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				timestampMs = $someInt64
             			}
             			# REQUIRED
             			targetOracleHostOrRacId = $someString
             		}
             		# REQUIRED
             		id = $someString
             	}
             	# OPTIONAL
             	advancedRecoveryConfigMap = @(
             		@{
             			# OPTIONAL
             			key = $someString
             			# OPTIONAL
             			value = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportTablespace operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: ExportTablespace
             
             $query = New-RscMutationOracle -ExportTablespace
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		exposeAllLogs = $someBoolean
             		# REQUIRED
             		auxiliaryDestinationPath = $someString
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             		# REQUIRED
             		tablespaceName = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InstantRecoverSnapshot operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: InstantRecoverSnapshot
             
             $query = New-RscMutationOracle -InstantRecoverSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		numChannels = $someInt
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountDatabase operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: MountDatabase
             
             $query = New-RscMutationOracle -MountDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	request = @{
             		# REQUIRED
             		config = @{
             			# OPTIONAL
             			shouldMountFilesOnly = $someBoolean
             			# OPTIONAL
             			targetMountPath = $someString
             			# OPTIONAL
             			advancedRecoveryConfigBase64 = $someString
             			# OPTIONAL
             			customPfilePath = $someString
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			postScriptPath = $someString
             			# OPTIONAL
             			preScriptPath = $someString
             			# OPTIONAL
             			shouldStopRecoveryOnPreScriptFailure = $someBoolean
             			# OPTIONAL
             			pdbsToLiveMount = @(
             				$someString
             			)
             			# OPTIONAL
             			targetRacHostIds = @(
             				$someString
             			)
             			# OPTIONAL
             			lmDbName = $someString
             			# OPTIONAL
             			targetRacPrimaryHostId = $someString
             			# OPTIONAL
             			shouldAllowRenameToSource = $someBoolean
             			# REQUIRED
             			recoveryPoint = @{
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				timestampMs = $someInt64
             			}
             			# REQUIRED
             			targetOracleHostOrRacId = $someString
             		}
             		# REQUIRED
             		id = $someString
             	}
             	# OPTIONAL
             	advancedRecoveryConfigMap = @(
             		@{
             			# OPTIONAL
             			key = $someString
             			# OPTIONAL
             			value = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RefreshDatabase operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: RefreshDatabase
             
             $query = New-RscMutationOracle -RefreshDatabase
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreLogs operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: RestoreLogs
             
             $query = New-RscMutationOracle -RestoreLogs
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetMountPath = $someString
             		# REQUIRED
             		oracleLogRecoveryRange = @{
             			# OPTIONAL
             			oracleTimeRange = @{
             				# OPTIONAL
             				endTime = $someDateTime
             				# OPTIONAL
             				startTime = $someDateTime
             			}
             		}
             		# REQUIRED
             		shouldMountFilesOnly = $someBoolean
             		# REQUIRED
             		targetOracleHostOrRacId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeOnDemandDatabaseSnapshot operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: TakeOnDemandDatabaseSnapshot
             
             $query = New-RscMutationOracle -TakeOnDemandDatabaseSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		forceFullSnapshot = $someBoolean
             		# OPTIONAL
             		baseOnDemandSnapshotConfig = @{
             			# OPTIONAL
             			slaId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeOnDemandLogSnapshot operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: TakeOnDemandLogSnapshot
             
             $query = New-RscMutationOracle -TakeOnDemandLogSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateDataGuardGroup operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: UpdateDataGuardGroup
             
             $query = New-RscMutationOracle -UpdateDataGuardGroup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		preferredDgMemberUniqueNames = @(
             			$someString
             		)
             		# OPTIONAL
             		shouldBackupFromPrimaryOnly = $someBoolean
             		# OPTIONAL
             		oracleUpdateCommon = @{
             			# OPTIONAL
             			hostLogRetentionHours = $someInt
             			# OPTIONAL
             			hostMount = $someString
             			# OPTIONAL
             			logBackupFrequencyInMinutes = $someInt
             			# OPTIONAL
             			logRetentionHours = $someInt
             			# OPTIONAL
             			numChannels = $someInt
             			# OPTIONAL
             			hasLogConfigFromSla = $someBoolean
             			# OPTIONAL
             			shouldEnableHighFileCountSupport = $someBoolean
             			# OPTIONAL
             			shouldUseSecureThriftForDataTransfer = $someBoolean
             			# OPTIONAL
             			sectionSizeInGb = $someInt
             			# OPTIONAL
             			isPaused = $someBoolean
             		}
             		# OPTIONAL
             		shouldUseSepsWallet = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleDbDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateAcoFile operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: ValidateAcoFile
             
             $query = New-RscMutationOracle -ValidateAcoFile
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	acoContentsBase64 = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	isLiveMount = $someBoolean
             	# REQUIRED
             	dbId = $someString
             	# OPTIONAL
             	isDifferentTargetDbName = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateOracleAcoFileReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateDatabaseBackups operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: ValidateDatabaseBackups
             
             $query = New-RscMutationOracle -ValidateDatabaseBackups
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		numChannels = $someInt
             		# OPTIONAL
             		sgaMaxSizeInMb = $someInt64
             		# OPTIONAL
             		targetMountPath = $someString
             		# OPTIONAL
             		targetOracleHome = $someString
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             		# REQUIRED
             		targetOracleHostOrRacId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationPolicy">
             <summary>
             Create a new RscQuery object for any of the 12
             operations in the 'Policy' API domain:
             AddPolicyObjects, CreatePolicy, DeactivatePolicy, GetHealthMonitorPolicyStatus, RemovePolicyObjects, SeedEnabledPolicies, SeedInitialPolicies, SetPasswordComplexityPolicy, UpdateAutoEnablePolicyClusterConfig, UpdateHealthMonitorPolicyStatus, UpdateOrgSecurityPolicy, or UpdatePolicy.
             </summary>
             <description>
             New-RscMutationPolicy creates a new
             mutation object for operations
             in the 'Policy' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 12 operations
             in the 'Policy' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddPolicyObjects, CreatePolicy, DeactivatePolicy, GetHealthMonitorPolicyStatus, RemovePolicyObjects, SeedEnabledPolicies, SeedInitialPolicies, SetPasswordComplexityPolicy, UpdateAutoEnablePolicyClusterConfig, UpdateHealthMonitorPolicyStatus, UpdateOrgSecurityPolicy, or UpdatePolicy.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationPolicy -AddPolicyObjects).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationPolicy -AddPolicyObjects).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddPolicyObjects operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: AddPolicyObjects
             
             $query = New-RscMutationPolicy -AddPolicyObjects
             
             # REQUIRED
             $query.Var.policyIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.objectIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.objectRootIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.clusterIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreatePolicy operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: CreatePolicy
             
             $query = New-RscMutationPolicy -CreatePolicy
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	colorEnum = $someClassificationPolicyColor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClassificationPolicyColor]) for enum values.
             	# OPTIONAL
             	mode = $someClassificationPolicyMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClassificationPolicyMode]) for enum values.
             	# OPTIONAL
             	analyzerIds = @(
             		$someString
             	)
             	# OPTIONAL
             	updateName = $someBoolean
             	# OPTIONAL
             	updateDescription = $someBoolean
             	# OPTIONAL
             	updateMode = $someBoolean
             	# OPTIONAL
             	updateAnalyzerIds = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClassificationPolicyDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeactivatePolicy operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: DeactivatePolicy
             
             $query = New-RscMutationPolicy -DeactivatePolicy
             
             # REQUIRED
             $query.Var.policyId = $someString
             # REQUIRED
             $query.Var.runAsync = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetHealthMonitorPolicyStatus operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: GetHealthMonitorPolicyStatus
             
             $query = New-RscMutationPolicy -GetHealthMonitorPolicyStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	hasDetailedStatus = $someBoolean
             	# OPTIONAL
             	nodeIds = @(
             		$someString
             	)
             	# OPTIONAL
             	policyIds = @(
             		$someString
             	)
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetHealthMonitorPolicyStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RemovePolicyObjects operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: RemovePolicyObjects
             
             $query = New-RscMutationPolicy -RemovePolicyObjects
             
             # REQUIRED
             $query.Var.policyIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.objectIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.objectRootIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.clusterIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.runAsync = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SeedEnabledPolicies operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: SeedEnabledPolicies
             
             $query = New-RscMutationPolicy -SeedEnabledPolicies
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SeedEnabledPoliciesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SeedInitialPolicies operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: SeedInitialPolicies
             
             $query = New-RscMutationPolicy -SeedInitialPolicies
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SeedInitialPoliciesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SetPasswordComplexityPolicy operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: SetPasswordComplexityPolicy
             
             $query = New-RscMutationPolicy -SetPasswordComplexityPolicy
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	policy = @{
             		# REQUIRED
             		lengthPolicy = @{
             			# OPTIONAL
             			minValue = $someInt
             			# OPTIONAL
             			maxValue = $someInt
             			# OPTIONAL
             			defaultValue = $someInt
             			# REQUIRED
             			isActive = $someBoolean
             		}
             		# REQUIRED
             		lowercasePolicy = @{
             			# OPTIONAL
             			minValue = $someInt
             			# OPTIONAL
             			maxValue = $someInt
             			# OPTIONAL
             			defaultValue = $someInt
             			# REQUIRED
             			isActive = $someBoolean
             		}
             		# REQUIRED
             		uppercasePolicy = @{
             			# OPTIONAL
             			minValue = $someInt
             			# OPTIONAL
             			maxValue = $someInt
             			# OPTIONAL
             			defaultValue = $someInt
             			# REQUIRED
             			isActive = $someBoolean
             		}
             		# REQUIRED
             		specialCharsPolicy = @{
             			# OPTIONAL
             			minValue = $someInt
             			# OPTIONAL
             			maxValue = $someInt
             			# OPTIONAL
             			defaultValue = $someInt
             			# REQUIRED
             			isActive = $someBoolean
             		}
             		# REQUIRED
             		numericPolicy = @{
             			# OPTIONAL
             			minValue = $someInt
             			# OPTIONAL
             			maxValue = $someInt
             			# OPTIONAL
             			defaultValue = $someInt
             			# REQUIRED
             			isActive = $someBoolean
             		}
             		# REQUIRED
             		passwordReusePolicy = @{
             			# OPTIONAL
             			minValue = $someInt
             			# OPTIONAL
             			maxValue = $someInt
             			# OPTIONAL
             			defaultValue = $someInt
             			# REQUIRED
             			isActive = $someBoolean
             		}
             		# REQUIRED
             		passwordExpirationPolicy = @{
             			# OPTIONAL
             			minValue = $someInt
             			# OPTIONAL
             			maxValue = $someInt
             			# OPTIONAL
             			defaultValue = $someInt
             			# REQUIRED
             			isActive = $someBoolean
             		}
             		# OPTIONAL
             		leakedDetectionPolicy = @{
             			# OPTIONAL
             			minValue = $someInt
             			# OPTIONAL
             			maxValue = $someInt
             			# OPTIONAL
             			defaultValue = $someInt
             			# REQUIRED
             			isActive = $someBoolean
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAutoEnablePolicyClusterConfig operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: UpdateAutoEnablePolicyClusterConfig
             
             $query = New-RscMutationPolicy -UpdateAutoEnablePolicyClusterConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterId = $someString
             	# OPTIONAL
             	enabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateAutoEnablePolicyClusterConfigReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateHealthMonitorPolicyStatus operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: UpdateHealthMonitorPolicyStatus
             
             $query = New-RscMutationPolicy -UpdateHealthMonitorPolicyStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	runRequest = @{
             		# OPTIONAL
             		nodeIds = @(
             			$someString
             		)
             		# REQUIRED
             		policyIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateHealthMonitorPolicyStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateOrgSecurityPolicy operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: UpdateOrgSecurityPolicy
             
             $query = New-RscMutationPolicy -UpdateOrgSecurityPolicy
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	disallowWeakerPolicy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdatePolicy operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: UpdatePolicy
             
             $query = New-RscMutationPolicy -UpdatePolicy
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	colorEnum = $someClassificationPolicyColor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClassificationPolicyColor]) for enum values.
             	# OPTIONAL
             	mode = $someClassificationPolicyMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClassificationPolicyMode]) for enum values.
             	# OPTIONAL
             	analyzerIds = @(
             		$someString
             	)
             	# OPTIONAL
             	updateName = $someBoolean
             	# OPTIONAL
             	updateDescription = $someBoolean
             	# OPTIONAL
             	updateMode = $someBoolean
             	# OPTIONAL
             	updateAnalyzerIds = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClassificationPolicyDetail
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationRansomware">
             <summary>
             Create a new RscQuery object for any of the 2
             operations in the 'Ransomware' API domain:
             BulkUpdateInvestigationStatus, or TriggerDetection.
             </summary>
             <description>
             New-RscMutationRansomware creates a new
             mutation object for operations
             in the 'Ransomware' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 2 operations
             in the 'Ransomware' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkUpdateInvestigationStatus, or TriggerDetection.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationRansomware -BulkUpdateInvestigationStatus).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationRansomware -BulkUpdateInvestigationStatus).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkUpdateInvestigationStatus operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: BulkUpdateInvestigationStatus
             
             $query = New-RscMutationRansomware -BulkUpdateInvestigationStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	entities = @(
             		@{
             			# REQUIRED
             			entityType = $someDataThreatAnalyticsEnablementEntity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DataThreatAnalyticsEnablementEntity]) for enum values.
             			# REQUIRED
             			entityId = $someString
             		}
             	)
             	# REQUIRED
             	isRansomwareMonitoringEnabled = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TriggerDetection operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: TriggerDetection
             
             $query = New-RscMutationRansomware -TriggerDetection
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterUuid = $someString
             	# OPTIONAL
             	snapshotId = $someString
             	# OPTIONAL
             	managedId = $someString
             	# OPTIONAL
             	previousSnapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TriggerRansomwareDetectionReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationRcs">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'RCS' API domain:
             CreateAutomaticRcsTargetMapping, CreateRcsReaderTarget, CreateRcsTarget, or UpdateRcsAutomaticTargetMapping.
             </summary>
             <description>
             New-RscMutationRcs creates a new
             mutation object for operations
             in the 'RCS' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'RCS' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateAutomaticRcsTargetMapping, CreateRcsReaderTarget, CreateRcsTarget, or UpdateRcsAutomaticTargetMapping.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationRcs -CreateAutomaticRcsTargetMapping).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationRcs -CreateAutomaticRcsTargetMapping).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateAutomaticRcsTargetMapping operation
             of the 'RCS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcs
             # API Operation: CreateAutomaticRcsTargetMapping
             
             $query = New-RscMutationRcs -CreateAutomaticRcsTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	region = $someRcsRegionEnumType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RcsRegionEnumType]) for enum values.
             	# OPTIONAL
             	rsaKey = $someString
             	# REQUIRED
             	tier = $someRcsTierEnumType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RcsTierEnumType]) for enum values.
             	# REQUIRED
             	lockDurationDays = $someInt64
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	ipMapping = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			ips = @(
             				$someString
             			)
             		}
             	)
             	# OPTIONAL
             	shouldBypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateRcsReaderTarget operation
             of the 'RCS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcs
             # API Operation: CreateRcsReaderTarget
             
             $query = New-RscMutationRcs -CreateRcsReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	readerLocationName = $someString
             	# REQUIRED
             	rcsArchivalLocationName = $someString
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateRcsTarget operation
             of the 'RCS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcs
             # API Operation: CreateRcsTarget
             
             $query = New-RscMutationRcs -CreateRcsTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	tier = $someRcsTierEnumType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RcsTierEnumType]) for enum values.
             	# REQUIRED
             	instanceType = $someInstanceTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InstanceTypeEnum]) for enum values.
             	# REQUIRED
             	rsaKey = $someString
             	# REQUIRED
             	region = $someRcsRegionEnumType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RcsRegionEnumType]) for enum values.
             	# REQUIRED
             	spaceUsageAlertThreshold = $someInt
             	# REQUIRED
             	lockDurationDays = $someInt64
             	# OPTIONAL
             	shouldBypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateRcsAutomaticTargetMapping operation
             of the 'RCS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcs
             # API Operation: UpdateRcsAutomaticTargetMapping
             
             $query = New-RscMutationRcs -UpdateRcsAutomaticTargetMapping
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# REQUIRED
             	lockDurationDays = $someInt64
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	shouldBypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationRcv">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'RCV' API domain:
             CreateLocationsFromTemplate, CreatePrivateEndpointApprovalRequest, or UpdateTarget.
             </summary>
             <description>
             New-RscMutationRcv creates a new
             mutation object for operations
             in the 'RCV' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'RCV' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateLocationsFromTemplate, CreatePrivateEndpointApprovalRequest, or UpdateTarget.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationRcv -CreateLocationsFromTemplate).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationRcv -CreateLocationsFromTemplate).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateLocationsFromTemplate operation
             of the 'RCV' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcv
             # API Operation: CreateLocationsFromTemplate
             
             $query = New-RscMutationRcv -CreateLocationsFromTemplate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	region = $someRcsRegionEnumType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RcsRegionEnumType]) for enum values.
             	# REQUIRED
             	tier = $someRcsTierEnumType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RcsTierEnumType]) for enum values.
             	# REQUIRED
             	lockDurationDays = $someInt64
             	# OPTIONAL
             	clusterUuidList = @(
             		$someString
             	)
             	# OPTIONAL
             	ipMapping = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			ips = @(
             				$someString
             			)
             		}
             	)
             	# OPTIONAL
             	shouldBypassProxy = $someBoolean
             	# OPTIONAL
             	rsaKey = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Target&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreatePrivateEndpointApprovalRequest operation
             of the 'RCV' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcv
             # API Operation: CreatePrivateEndpointApprovalRequest
             
             $query = New-RscMutationRcv -CreatePrivateEndpointApprovalRequest
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	privateEndpointId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateRcvPrivateEndpointApprovalRequestReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'RCV' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcv
             # API Operation: UpdateTarget
             
             $query = New-RscMutationRcv -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# REQUIRED
             	lockDurationDays = $someInt64
             	# OPTIONAL
             	ipMapping = @{
             		# REQUIRED
             		clusterUuid = $someString
             		# REQUIRED
             		ips = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	shouldBypassProxy = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationReplication">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Replication' API domain:
             CreatePair, DeletePair, DisablePause, EnablePause, UpdateNetworkThrottleBypass, or UpdateTarget.
             </summary>
             <description>
             New-RscMutationReplication creates a new
             mutation object for operations
             in the 'Replication' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Replication' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreatePair, DeletePair, DisablePause, EnablePause, UpdateNetworkThrottleBypass, or UpdateTarget.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationReplication -CreatePair).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationReplication -CreatePair).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreatePair operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: CreatePair
             
             $query = New-RscMutationReplication -CreatePair
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceGateway = @{
             		# REQUIRED
             		address = $someString
             		# REQUIRED
             		ports = @(
             			$someInt
             		)
             	}
             	# OPTIONAL
             	targetGateway = @{
             		# REQUIRED
             		address = $someString
             		# REQUIRED
             		ports = @(
             			$someInt
             		)
             	}
             	# OPTIONAL
             	targetNetworkInterface = @{
             		# OPTIONAL
             		type = $someReplicationInterfaceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationInterfaceType]) for enum values.
             	}
             	# OPTIONAL
             	isCrossAccount = $someBoolean
             	# REQUIRED
             	sourceClusterUuid = $someString
             	# REQUIRED
             	targetClusterUuid = $someString
             	# REQUIRED
             	setupType = $someReplicationSetupType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationSetupType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeletePair operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: DeletePair
             
             $query = New-RscMutationReplication -DeletePair
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sourceClusterUuid = $someString
             	# REQUIRED
             	targetClusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DisablePause operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: DisablePause
             
             $query = New-RscMutationReplication -DisablePause
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	disablePerLocationPause = @{
             		# REQUIRED
             		shouldSkipOldSnapshots = $someBoolean
             		# REQUIRED
             		sourceClusterUuids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnablePause operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: EnablePause
             
             $query = New-RscMutationReplication -EnablePause
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	enablePerLocationPause = @{
             		# OPTIONAL
             		shouldPauseImmediately = $someBoolean
             		# REQUIRED
             		shouldCancelImmediately = $someBoolean
             		# REQUIRED
             		sourceClusterUuids = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateNetworkThrottleBypass operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: UpdateNetworkThrottleBypass
             
             $query = New-RscMutationReplication -UpdateNetworkThrottleBypass
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		shouldBypassReplicationThrottle = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: UpdateTarget
             
             $query = New-RscMutationReplication -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	sourceGateway = @{
             		# REQUIRED
             		address = $someString
             		# REQUIRED
             		ports = @(
             			$someInt
             		)
             	}
             	# OPTIONAL
             	targetGateway = @{
             		# REQUIRED
             		address = $someString
             		# REQUIRED
             		ports = @(
             			$someInt
             		)
             	}
             	# OPTIONAL
             	targetNetworkInterface = @{
             		# OPTIONAL
             		type = $someReplicationInterfaceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationInterfaceType]) for enum values.
             	}
             	# OPTIONAL
             	isCrossAccount = $someBoolean
             	# REQUIRED
             	sourceClusterUuid = $someString
             	# REQUIRED
             	targetClusterUuid = $someString
             	# REQUIRED
             	setupType = $someReplicationSetupType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationSetupType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationReport">
             <summary>
             Create a new RscQuery object for any of the 10
             operations in the 'Report' API domain:
             CreateCustom, CreateScheduled, DeleteCustom, DeleteScheduledReport, SendPdf, SendScheduledReportAsync, StartClusterMigrationJob, UpdateCustom, UpdateDatabaseLogingPropertiesForCluster, or UpdateScheduledReport.
             </summary>
             <description>
             New-RscMutationReport creates a new
             mutation object for operations
             in the 'Report' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 10 operations
             in the 'Report' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateCustom, CreateScheduled, DeleteCustom, DeleteScheduledReport, SendPdf, SendScheduledReportAsync, StartClusterMigrationJob, UpdateCustom, UpdateDatabaseLogingPropertiesForCluster, or UpdateScheduledReport.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationReport -CreateCustom).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationReport -CreateCustom).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateCustom operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: CreateCustom
             
             $query = New-RscMutationReport -CreateCustom
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             	# OPTIONAL
             	charts = @(
             		@{
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             			# OPTIONAL
             			groupBy = @(
             				$someGroupByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupByFieldEnum]) for enum values.
             			)
             		}
             	)
             	# OPTIONAL
             	tables = @(
             		@{
             			# REQUIRED
             			name = $someString
             			# REQUIRED
             			focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             			# OPTIONAL
             			groupBy = @(
             				$someGroupByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupByFieldEnum]) for enum values.
             			)
             			# REQUIRED
             			selectedColumns = @(
             				$someReportTableColumnEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportTableColumnEnum]) for enum values.
             			)
             			# OPTIONAL
             			sortBy = $someSortByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortByFieldEnum]) for enum values.
             			# OPTIONAL
             			sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             		}
             	)
             	# REQUIRED
             	filters = @{
             		# OPTIONAL
             		activityObjectType = @(
             			$someActivityObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		objectType = @(
             			$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		excludedObjectTypes = @(
             			$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		lastActivityStatus = @(
             			$someActivityStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		lastActivityType = @(
             			$someActivityTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		slaDomainId = @(
             			$someString
             		)
             		# OPTIONAL
             		clusterType = @(
             			$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		clusterId = @(
             			$someString
             		)
             		# OPTIONAL
             		timeRange = @{
             			# OPTIONAL
             			relativeTimeRange = @{
             				# REQUIRED
             				magnitude = $someInt
             				# REQUIRED
             				unit = $someTimeUnitEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TimeUnitEnum]) for enum values.
             			}
             			# OPTIONAL
             			absoluteTimeRange = @{
             				# REQUIRED
             				start = $someDateTime
             				# REQUIRED
             				end = $someDateTime
             			}
             		}
             		# OPTIONAL
             		slaTimeRange = $someSlaComplianceTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaComplianceTimeRange]) for enum values.
             		# OPTIONAL
             		orgId = @(
             			$someString
             		)
             		# OPTIONAL
             		managedId = @(
             			$someString
             		)
             		# OPTIONAL
             		isAnomaly = $someBoolean
             		# OPTIONAL
             		searchTerm = $someString
             		# OPTIONAL
             		complianceStatus = @(
             			$someComplianceStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ComplianceStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		protectionStatus = @(
             			$someProtectionStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProtectionStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		failoverStatus = @(
             			$someFailoverStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		failoverType = $someFailoverTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverTypeEnum]) for enum values.
             		# OPTIONAL
             		source = @(
             			$someString
             		)
             		# OPTIONAL
             		targetSite = @(
             			$someString
             		)
             		# OPTIONAL
             		userAuditObjectType = @(
             			$someUserAuditObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		userAuditType = @(
             			$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		userAuditStatus = @(
             			$someUserAuditStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditStatusEnum]) for enum values.
             		)
             		# OPTIONAL
             		replicationSource = @(
             			$someString
             		)
             		# OPTIONAL
             		clusterLocation = @(
             			$someString
             		)
             		# OPTIONAL
             		taskCategory = @(
             			$someString
             		)
             		# OPTIONAL
             		taskStatus = @(
             			$someString
             		)
             		# OPTIONAL
             		taskType = @(
             			$someString
             		)
             		# OPTIONAL
             		policyId = @(
             			$someString
             		)
             		# OPTIONAL
             		sonarObjectTypes = @(
             			$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		shouldApplyWhitelists = $someBoolean
             		# OPTIONAL
             		date = $someDateTime
             	}
             	# OPTIONAL
             	isHidden = $someBoolean
             	# OPTIONAL
             	isReadOnly = $someBoolean
             }
             # OPTIONAL
             $query.Var.reportRoom = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateCustomReportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateScheduled operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: CreateScheduled
             
             $query = New-RscMutationReport -CreateScheduled
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	reportId = $someInt
             	# REQUIRED
             	title = $someString
             	# OPTIONAL
             	dailyTime = $someDateTime
             	# OPTIONAL
             	weeklyTime = $someDateTime
             	# OPTIONAL
             	monthlyDate = $someInt
             	# OPTIONAL
             	monthlyTime = $someDateTime
             	# REQUIRED
             	rubrikRecipientUserIds = @(
             		$someString
             	)
             	# REQUIRED
             	nonRubrikRecipientEmails = @(
             		$someString
             	)
             	# OPTIONAL
             	updateCreator = $someBoolean
             	# OPTIONAL
             	weeklyDays = @(
             		$someWeekDay # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WeekDay]) for enum values.
             	)
             	# OPTIONAL
             	attachmentTypes = @(
             		$someReportAttachmentType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportAttachmentType]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateScheduledReportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCustom operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: DeleteCustom
             
             $query = New-RscMutationReport -DeleteCustom
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteScheduledReport operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: DeleteScheduledReport
             
             $query = New-RscMutationReport -DeleteScheduledReport
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt
             	# OPTIONAL
             	reportId = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SendPdf operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: SendPdf
             
             $query = New-RscMutationReport -SendPdf
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	rubrikRecipientUserIds = @(
             		$someString
             	)
             	# REQUIRED
             	nonRubrikRecipientEmailIds = @(
             		$someString
             	)
             	# REQUIRED
             	password = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SendPdfReportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SendScheduledReportAsync operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: SendScheduledReportAsync
             
             $query = New-RscMutationReport -SendScheduledReportAsync
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	reportId = $someInt
             	# OPTIONAL
             	rubrikUserIds = @(
             		$someString
             	)
             	# OPTIONAL
             	nonRubrikUserEmails = @(
             		$someString
             	)
             	# OPTIONAL
             	attachmentTypes = @(
             		$someReportAttachmentType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportAttachmentType]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncDownloadReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartClusterMigrationJob operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: StartClusterMigrationJob
             
             $query = New-RscMutationReport -StartClusterMigrationJob
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterUuid = $someString
             	# OPTIONAL
             	shouldDeleteCdmSchedules = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartClusterReportMigrationJobReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateCustom operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: UpdateCustom
             
             $query = New-RscMutationReport -UpdateCustom
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             		# OPTIONAL
             		charts = @(
             			@{
             				# REQUIRED
             				name = $someString
             				# REQUIRED
             				focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             				# OPTIONAL
             				groupBy = @(
             					$someGroupByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupByFieldEnum]) for enum values.
             				)
             			}
             		)
             		# OPTIONAL
             		tables = @(
             			@{
             				# REQUIRED
             				name = $someString
             				# REQUIRED
             				focus = $someReportFocusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportFocusEnum]) for enum values.
             				# OPTIONAL
             				groupBy = @(
             					$someGroupByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupByFieldEnum]) for enum values.
             				)
             				# REQUIRED
             				selectedColumns = @(
             					$someReportTableColumnEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportTableColumnEnum]) for enum values.
             				)
             				# OPTIONAL
             				sortBy = $someSortByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortByFieldEnum]) for enum values.
             				# OPTIONAL
             				sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             			}
             		)
             		# REQUIRED
             		filters = @{
             			# OPTIONAL
             			activityObjectType = @(
             				$someActivityObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			objectType = @(
             				$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			excludedObjectTypes = @(
             				$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			lastActivityStatus = @(
             				$someActivityStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			lastActivityType = @(
             				$someActivityTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			slaDomainId = @(
             				$someString
             			)
             			# OPTIONAL
             			clusterType = @(
             				$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			clusterId = @(
             				$someString
             			)
             			# OPTIONAL
             			timeRange = @{
             				# OPTIONAL
             				relativeTimeRange = @{
             					# REQUIRED
             					magnitude = $someInt
             					# REQUIRED
             					unit = $someTimeUnitEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TimeUnitEnum]) for enum values.
             				}
             				# OPTIONAL
             				absoluteTimeRange = @{
             					# REQUIRED
             					start = $someDateTime
             					# REQUIRED
             					end = $someDateTime
             				}
             			}
             			# OPTIONAL
             			slaTimeRange = $someSlaComplianceTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaComplianceTimeRange]) for enum values.
             			# OPTIONAL
             			orgId = @(
             				$someString
             			)
             			# OPTIONAL
             			managedId = @(
             				$someString
             			)
             			# OPTIONAL
             			isAnomaly = $someBoolean
             			# OPTIONAL
             			searchTerm = $someString
             			# OPTIONAL
             			complianceStatus = @(
             				$someComplianceStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ComplianceStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			protectionStatus = @(
             				$someProtectionStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProtectionStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			failoverStatus = @(
             				$someFailoverStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			failoverType = $someFailoverTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FailoverTypeEnum]) for enum values.
             			# OPTIONAL
             			source = @(
             				$someString
             			)
             			# OPTIONAL
             			targetSite = @(
             				$someString
             			)
             			# OPTIONAL
             			userAuditObjectType = @(
             				$someUserAuditObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			userAuditType = @(
             				$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			userAuditStatus = @(
             				$someUserAuditStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditStatusEnum]) for enum values.
             			)
             			# OPTIONAL
             			replicationSource = @(
             				$someString
             			)
             			# OPTIONAL
             			clusterLocation = @(
             				$someString
             			)
             			# OPTIONAL
             			taskCategory = @(
             				$someString
             			)
             			# OPTIONAL
             			taskStatus = @(
             				$someString
             			)
             			# OPTIONAL
             			taskType = @(
             				$someString
             			)
             			# OPTIONAL
             			policyId = @(
             				$someString
             			)
             			# OPTIONAL
             			sonarObjectTypes = @(
             				$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			shouldApplyWhitelists = $someBoolean
             			# OPTIONAL
             			date = $someDateTime
             		}
             		# OPTIONAL
             		isHidden = $someBoolean
             		# OPTIONAL
             		isReadOnly = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateCustomReportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateDatabaseLogingPropertiesForCluster operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: UpdateDatabaseLogingPropertiesForCluster
             
             $query = New-RscMutationReport -UpdateDatabaseLogingPropertiesForCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	properties = @{
             		# OPTIONAL
             		enableDelayNotification = $someBoolean
             		# OPTIONAL
             		logDelayThresholdInMin = $someInt64
             		# OPTIONAL
             		logDelayNotificationFrequencyInMin = $someInt64
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DbLogReportProperties
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateScheduledReport operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: UpdateScheduledReport
             
             $query = New-RscMutationReport -UpdateScheduledReport
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		reportId = $someInt
             		# REQUIRED
             		title = $someString
             		# OPTIONAL
             		dailyTime = $someDateTime
             		# OPTIONAL
             		weeklyTime = $someDateTime
             		# OPTIONAL
             		monthlyDate = $someInt
             		# OPTIONAL
             		monthlyTime = $someDateTime
             		# REQUIRED
             		rubrikRecipientUserIds = @(
             			$someString
             		)
             		# REQUIRED
             		nonRubrikRecipientEmails = @(
             			$someString
             		)
             		# OPTIONAL
             		updateCreator = $someBoolean
             		# OPTIONAL
             		weeklyDays = @(
             			$someWeekDay # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WeekDay]) for enum values.
             		)
             		# OPTIONAL
             		attachmentTypes = @(
             			$someReportAttachmentType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReportAttachmentType]) for enum values.
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateScheduledReportReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationSapHana">
             <summary>
             Create a new RscQuery object for any of the 10
             operations in the 'SAP HANA' API domain:
             AddSystem, ConfigureRestore, CreateOnDemandBackup, CreateOnDemandStorageSnapshot, CreateSystemRefresh, DeleteDbSnapshot, DeleteSystem, ExpireDownloadedSnapshots, PatchSystem, or UnconfigureRestore.
             </summary>
             <description>
             New-RscMutationSapHana creates a new
             mutation object for operations
             in the 'SAP HANA' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 10 operations
             in the 'SAP HANA' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddSystem, ConfigureRestore, CreateOnDemandBackup, CreateOnDemandStorageSnapshot, CreateSystemRefresh, DeleteDbSnapshot, DeleteSystem, ExpireDownloadedSnapshots, PatchSystem, or UnconfigureRestore.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSapHana -AddSystem).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSapHana -AddSystem).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddSystem operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: AddSystem
             
             $query = New-RscMutationSapHana -AddSystem
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	sapHanaSystem = @{
             		# OPTIONAL
             		dataPathSpec = @{
             			# OPTIONAL
             			dataPathType = $someSapHanaDataPathType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SapHanaDataPathType]) for enum values.
             		}
             		# OPTIONAL
             		sslInfo = @{
             			# OPTIONAL
             			cryptoLibPath = $someString
             			# OPTIONAL
             			hostNameInCertificate = $someString
             			# OPTIONAL
             			shouldEncrypt = $someBoolean
             			# OPTIONAL
             			shouldValidateCertificate = $someBoolean
             			# OPTIONAL
             			trustStorePath = $someString
             			# REQUIRED
             			encryptionProvider = $someSapHanaSslInfoEncryptionProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SapHanaSslInfoEncryptionProvider]) for enum values.
             			# REQUIRED
             			keyStorePath = $someString
             		}
             		# OPTIONAL
             		authTypeSpec = @{
             			# REQUIRED
             			authType = $someSapHanaSystemAuthTypeSpecAuthType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SapHanaSystemAuthTypeSpecAuthType]) for enum values.
             		}
             		# OPTIONAL
             		azureFeatureId = $someString
             		# REQUIRED
             		hostIds = @(
             			$someString
             		)
             		# REQUIRED
             		instanceNumber = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		sid = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddSapHanaSystemReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ConfigureRestore operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: ConfigureRestore
             
             $query = New-RscMutationSapHana -ConfigureRestore
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	sourceConfig = @{
             		# OPTIONAL
             		snappableId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandBackup operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: CreateOnDemandBackup
             
             $query = New-RscMutationSapHana -CreateOnDemandBackup
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateOnDemandStorageSnapshot operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: CreateOnDemandStorageSnapshot
             
             $query = New-RscMutationSapHana -CreateOnDemandStorageSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateSystemRefresh operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: CreateSystemRefresh
             
             $query = New-RscMutationSapHana -CreateSystemRefresh
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteDbSnapshot operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: DeleteDbSnapshot
             
             $query = New-RscMutationSapHana -DeleteDbSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSystem operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: DeleteSystem
             
             $query = New-RscMutationSapHana -DeleteSystem
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExpireDownloadedSnapshots operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: ExpireDownloadedSnapshots
             
             $query = New-RscMutationSapHana -ExpireDownloadedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# OPTIONAL
             	shouldExpireLogsOnly = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PatchSystem operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: PatchSystem
             
             $query = New-RscMutationSapHana -PatchSystem
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		configuredSlaDomainId = $someString
             		# OPTIONAL
             		hostIds = @(
             			$someString
             		)
             		# OPTIONAL
             		instanceNumber = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		sid = $someString
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		sslInfo = @{
             			# OPTIONAL
             			cryptoLibPath = $someString
             			# OPTIONAL
             			hostNameInCertificate = $someString
             			# OPTIONAL
             			shouldEncrypt = $someBoolean
             			# OPTIONAL
             			shouldValidateCertificate = $someBoolean
             			# OPTIONAL
             			trustStorePath = $someString
             			# REQUIRED
             			encryptionProvider = $someSapHanaSslInfoEncryptionProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SapHanaSslInfoEncryptionProvider]) for enum values.
             			# REQUIRED
             			keyStorePath = $someString
             		}
             		# OPTIONAL
             		authTypeSpec = @{
             			# REQUIRED
             			authType = $someSapHanaSystemAuthTypeSpecAuthType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SapHanaSystemAuthTypeSpecAuthType]) for enum values.
             		}
             		# OPTIONAL
             		azureFeatureId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PatchSapHanaSystemReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnconfigureRestore operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: UnconfigureRestore
             
             $query = New-RscMutationSapHana -UnconfigureRestore
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationServiceAccount">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Service Account' API domain:
             Create, Delete, Rotate, or Update.
             </summary>
             <description>
             New-RscMutationServiceAccount creates a new
             mutation object for operations
             in the 'Service Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Service Account' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Create, Delete, Rotate, or Update.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationServiceAccount -Create).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationServiceAccount -Create).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Create operation
             of the 'Service Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ServiceAccount
             # API Operation: Create
             
             $query = New-RscMutationServiceAccount -Create
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# REQUIRED
             	roleIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateServiceAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'Service Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ServiceAccount
             # API Operation: Delete
             
             $query = New-RscMutationServiceAccount -Delete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	ids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Rotate operation
             of the 'Service Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ServiceAccount
             # API Operation: Rotate
             
             $query = New-RscMutationServiceAccount -Rotate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RotateServiceAccountSecretReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'Service Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ServiceAccount
             # API Operation: Update
             
             $query = New-RscMutationServiceAccount -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	description = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateServiceAccountReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationSharepoint">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'Sharepoint' API domain:
             ['ExcludeObjectsFromProtection'].
             </summary>
             <description>
             New-RscMutationSharepoint creates a new
             mutation object for operations
             in the 'Sharepoint' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'Sharepoint' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['ExcludeObjectsFromProtection'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSharepoint -ExcludeObjectsFromProtection).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSharepoint -ExcludeObjectsFromProtection).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ExcludeObjectsFromProtection operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: ExcludeObjectsFromProtection
             
             $query = New-RscMutationSharepoint -ExcludeObjectsFromProtection
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	orgId = $someString
             	# REQUIRED
             	exclusions = @(
             		@{
             			# REQUIRED
             			siteFid = $someString
             			# REQUIRED
             			excludedObjects = @(
             				@{
             					# REQUIRED
             					fid = $someString
             					# REQUIRED
             					name = $someString
             					# REQUIRED
             					url = $someString
             					# REQUIRED
             					objectType = $someSharePointDescendantType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointDescendantType]) for enum values.
             				}
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationSla">
             <summary>
             Create a new RscQuery object for any of the 9
             operations in the 'SLA' API domain:
             Assign, AssignRetentionToSnappables, AssignRetentionToSnapshots, AssignsForSnappableHierarchies, CreateGlobal, ExportManagedVolumeSnapshot, GetPendingAssignments, Pause, or UpdateGlobal.
             </summary>
             <description>
             New-RscMutationSla creates a new
             mutation object for operations
             in the 'SLA' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 9 operations
             in the 'SLA' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Assign, AssignRetentionToSnappables, AssignRetentionToSnapshots, AssignsForSnappableHierarchies, CreateGlobal, ExportManagedVolumeSnapshot, GetPendingAssignments, Pause, or UpdateGlobal.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSla -Assign).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSla -Assign).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Assign operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: Assign
             
             $query = New-RscMutationSla -Assign
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	slaDomainAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             	# OPTIONAL
             	slaOptionalId = $someString
             	# REQUIRED
             	objectIds = @(
             		$someString
             	)
             	# OPTIONAL
             	applicableWorkloadType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             	# OPTIONAL
             	shouldApplyToExistingSnapshots = $someBoolean
             	# OPTIONAL
             	shouldApplyToNonPolicySnapshots = $someBoolean
             	# OPTIONAL
             	existingSnapshotRetention = $someGlobalExistingSnapshotRetention # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalExistingSnapshotRetention]) for enum values.
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaAssignResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignRetentionToSnappables operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: AssignRetentionToSnappables
             
             $query = New-RscMutationSla -AssignRetentionToSnappables
             
             # OPTIONAL
             $query.Var.globalSlaOptionalFid = $someString
             # REQUIRED
             $query.Var.globalSlaAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             # REQUIRED
             $query.Var.objectIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.applicableSnappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             # OPTIONAL
             $query.Var.shouldApplyToNonPolicySnapshots = $someBoolean
             # OPTIONAL
             $query.Var.userNote = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaAssignResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignRetentionToSnapshots operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: AssignRetentionToSnapshots
             
             $query = New-RscMutationSla -AssignRetentionToSnapshots
             
             # OPTIONAL
             $query.Var.globalSlaOptionalFid = $someString
             # REQUIRED
             $query.Var.globalSlaAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             # REQUIRED
             $query.Var.snapshotFids = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.userNote = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaAssignResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AssignsForSnappableHierarchies operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: AssignsForSnappableHierarchies
             
             $query = New-RscMutationSla -AssignsForSnappableHierarchies
             
             # OPTIONAL
             $query.Var.globalSlaOptionalFid = $someString
             # REQUIRED
             $query.Var.globalSlaAssignType = $someSlaAssignTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaAssignTypeEnum]) for enum values.
             # REQUIRED
             $query.Var.objectIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.applicableSnappableTypes = @(
             	$someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             )
             # OPTIONAL
             $query.Var.shouldApplyToExistingSnapshots = $someBoolean
             # OPTIONAL
             $query.Var.shouldApplyToNonPolicySnapshots = $someBoolean
             # OPTIONAL
             $query.Var.globalExistingSnapshotRetention = $someGlobalExistingSnapshotRetention # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalExistingSnapshotRetention]) for enum values.
             # OPTIONAL
             $query.Var.userNote = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SlaAssignResult&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateGlobal operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: CreateGlobal
             
             $query = New-RscMutationSla -CreateGlobal
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	snapshotSchedule = @{
             		# OPTIONAL
             		minute = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		hourly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		daily = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		weekly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfWeek = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             		}
             		# OPTIONAL
             		monthly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfMonth = $someDayOfMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfMonth]) for enum values.
             		}
             		# OPTIONAL
             		quarterly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfQuarter = $someDayOfQuarter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfQuarter]) for enum values.
             			# OPTIONAL
             			quarterStartMonth = $someMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Month]) for enum values.
             		}
             		# OPTIONAL
             		yearly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfYear = $someDayOfYear # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfYear]) for enum values.
             			# OPTIONAL
             			yearStartMonth = $someMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Month]) for enum values.
             		}
             	}
             	# OPTIONAL
             	replicationSpecInput = @{
             		# OPTIONAL
             		replicationType = $someReplicationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationType]) for enum values.
             		# OPTIONAL
             		specificReplicationSpecInput = @{
             			# OPTIONAL
             			unidirectionalSpecInput = @{
             				# OPTIONAL
             				replicationTargetId = $someString
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			bidirectionalSpecInput = @{
             				# OPTIONAL
             				replicationSpec1 = @{
             					# OPTIONAL
             					replicationTargetId = $someString
             					# OPTIONAL
             					retention = $someInt
             					# OPTIONAL
             					retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             				# OPTIONAL
             				replicationSpec2 = @{
             					# OPTIONAL
             					replicationTargetId = $someString
             					# OPTIONAL
             					retention = $someInt
             					# OPTIONAL
             					retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             			# OPTIONAL
             			cloudRegionSpecInput = @{
             				# OPTIONAL
             				replicationTargetRegion = $someString
             				# OPTIONAL
             				cloudProvider = $someCloudProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudProvider]) for enum values.
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			cloudLocationSpecInput = @{
             				# OPTIONAL
             				replicationTargetId = $someString
             				# OPTIONAL
             				cloudProvider = $someCloudProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudProvider]) for enum values.
             				# OPTIONAL
             				retentionDuration = @{
             					# OPTIONAL
             					duration = $someInt
             					# OPTIONAL
             					unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             		}
             	}
             	# OPTIONAL
             	localRetentionLimit = @{
             		# OPTIONAL
             		duration = $someInt
             		# OPTIONAL
             		unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             	}
             	# OPTIONAL
             	firstFullBackupWindows = @(
             		@{
             			# OPTIONAL
             			durationInHours = $someInt
             			# OPTIONAL
             			startTimeAttributes = @{
             				# OPTIONAL
             				dayOfWeek = @{
             					# OPTIONAL
             					day = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             				}
             				# OPTIONAL
             				hour = $someInt
             				# OPTIONAL
             				minute = $someInt
             			}
             		}
             	)
             	# OPTIONAL
             	backupWindows = @(
             		@{
             			# OPTIONAL
             			durationInHours = $someInt
             			# OPTIONAL
             			startTimeAttributes = @{
             				# OPTIONAL
             				dayOfWeek = @{
             					# OPTIONAL
             					day = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             				}
             				# OPTIONAL
             				hour = $someInt
             				# OPTIONAL
             				minute = $someInt
             			}
             		}
             	)
             	# OPTIONAL
             	logConfig = @{
             		# OPTIONAL
             		slaLogFrequencyConfig = @{
             			# OPTIONAL
             			retention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             	}
             	# OPTIONAL
             	objectSpecificConfigsInput = @{
             		# OPTIONAL
             		sapHanaConfigInput = @{
             			# OPTIONAL
             			incrementalFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			differentialFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			storageSnapshotConfig = @{
             				# OPTIONAL
             				frequency = @{
             					# OPTIONAL
             					duration = $someInt
             					# OPTIONAL
             					unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             				# OPTIONAL
             				retention = @{
             					# OPTIONAL
             					duration = $someInt
             					# OPTIONAL
             					unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             		}
             		# OPTIONAL
             		awsRdsConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		vmwareVmConfigInput = @{
             			# OPTIONAL
             			logRetentionSeconds = $someInt64
             		}
             		# OPTIONAL
             		azureSqlDatabaseDbConfigInput = @{
             			# OPTIONAL
             			logRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		azureSqlManagedInstanceDbConfigInput = @{
             			# OPTIONAL
             			logRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		db2ConfigInput = @{
             			# OPTIONAL
             			incrementalFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			differentialFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		mssqlConfigInput = @{
             			# OPTIONAL
             			frequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		oracleConfigInput = @{
             			# OPTIONAL
             			frequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			hostLogRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		mongoConfigInput = @{
             			# OPTIONAL
             			logFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		azureBlobConfigInput = @{
             			# OPTIONAL
             			continuousBackupRetentionInDays = $someInt
             			# OPTIONAL
             			backupLocationId = $someString
             		}
             		# OPTIONAL
             		awsNativeS3SlaConfigInput = @{
             			# OPTIONAL
             			archivalLocationId = $someString
             			# OPTIONAL
             			continuousBackupRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		managedVolumeSlaConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		postgresDbClusterSlaConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             	}
             	# OPTIONAL
             	archivalSpecs = @(
             		@{
             			# OPTIONAL
             			archivalGroupId = $someString
             			# OPTIONAL
             			threshold = $someInt
             			# OPTIONAL
             			thresholdUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			# OPTIONAL
             			archivalTieringSpecInput = @{
             				# OPTIONAL
             				isInstantTieringEnabled = $someBoolean
             				# OPTIONAL
             				minAccessibleDurationInSeconds = $someInt64
             				# OPTIONAL
             				coldStorageClass = $someColdStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColdStorageClass]) for enum values.
             				# OPTIONAL
             				shouldTierExistingSnapshots = $someBoolean
             			}
             			# OPTIONAL
             			frequencies = @(
             				$someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			)
             			# OPTIONAL
             			archivalLocationToClusterMapping = @(
             				@{
             					# OPTIONAL
             					clusterUuid = $someString
             					# OPTIONAL
             					locationId = $someString
             				}
             			)
             		}
             	)
             	# OPTIONAL
             	replicationSpecsV2 = @(
             		@{
             			# OPTIONAL
             			clusterUuid = $someString
             			# OPTIONAL
             			storageSettingId = $someString
             			# OPTIONAL
             			retentionDuration = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			awsAccount = $someString
             			# OPTIONAL
             			azureSubscription = $someString
             			# OPTIONAL
             			replicationLocalRetentionDuration = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			cascadingArchivalSpecs = @(
             				@{
             					# OPTIONAL
             					archivalLocationId = $someString
             					# OPTIONAL
             					archivalThreshold = @{
             						# OPTIONAL
             						duration = $someInt
             						# OPTIONAL
             						unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             					}
             					# OPTIONAL
             					archivalTieringSpecInput = @{
             						# OPTIONAL
             						isInstantTieringEnabled = $someBoolean
             						# OPTIONAL
             						minAccessibleDurationInSeconds = $someInt64
             						# OPTIONAL
             						coldStorageClass = $someColdStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColdStorageClass]) for enum values.
             						# OPTIONAL
             						shouldTierExistingSnapshots = $someBoolean
             					}
             					# OPTIONAL
             					frequency = @(
             						$someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             					)
             				}
             			)
             			# OPTIONAL
             			awsRegion = $someAwsNativeRegionForReplication # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegionForReplication]) for enum values.
             			# OPTIONAL
             			azureRegion = $someAzureNativeRegionForReplication # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegionForReplication]) for enum values.
             		}
             	)
             	# OPTIONAL
             	objectTypes = @(
             		$someSlaObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaObjectType]) for enum values.
             	)
             	# OPTIONAL
             	isRetentionLockedSla = $someBoolean
             	# OPTIONAL
             	retentionLockMode = $someRetentionLockMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionLockMode]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalSlaReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportManagedVolumeSnapshot operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: ExportManagedVolumeSnapshot
             
             $query = New-RscMutationSla -ExportManagedVolumeSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	params = @{
             		# OPTIONAL
             		shouldDownloadToLocal = $someBoolean
             		# OPTIONAL
             		managedVolumeSlaExportConfig = @{
             			# OPTIONAL
             			managedVolumeExportConfig = @{
             				# OPTIONAL
             				subnet = $someString
             				# OPTIONAL
             				managedVolumePatchConfig = @{
             					# OPTIONAL
             					hostPatterns = @(
             						$someString
             					)
             					# OPTIONAL
             					nodeHint = @(
             						$someString
             					)
             					# OPTIONAL
             					smbDomainName = $someString
             					# OPTIONAL
             					smbValidIps = @(
             						$someString
             					)
             					# OPTIONAL
             					smbValidUsers = @(
             						$someString
             					)
             				}
             				# OPTIONAL
             				shareType = $someManagedVolumeShareType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedVolumeShareType]) for enum values.
             			}
             			# REQUIRED
             			hostId = $someString
             			# REQUIRED
             			hostMountPaths = @(
             				$someString
             			)
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetPendingAssignments operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: GetPendingAssignments
             
             $query = New-RscMutationSla -GetPendingAssignments
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	pendingAssignmentsRequest = @{
             		# REQUIRED
             		objectIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetPendingSlaAssignmentsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Pause operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: Pause
             
             $query = New-RscMutationSla -Pause
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	slaId = $someString
             	# REQUIRED
             	clusterUuids = @(
             		$someString
             	)
             	# REQUIRED
             	pauseSla = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PauseSlaReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateGlobal operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: UpdateGlobal
             
             $query = New-RscMutationSla -UpdateGlobal
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	snapshotSchedule = @{
             		# OPTIONAL
             		minute = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		hourly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		daily = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		weekly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfWeek = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             		}
             		# OPTIONAL
             		monthly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfMonth = $someDayOfMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfMonth]) for enum values.
             		}
             		# OPTIONAL
             		quarterly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfQuarter = $someDayOfQuarter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfQuarter]) for enum values.
             			# OPTIONAL
             			quarterStartMonth = $someMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Month]) for enum values.
             		}
             		# OPTIONAL
             		yearly = @{
             			# OPTIONAL
             			basicSchedule = @{
             				# OPTIONAL
             				frequency = $someInt
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			dayOfYear = $someDayOfYear # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfYear]) for enum values.
             			# OPTIONAL
             			yearStartMonth = $someMonth # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Month]) for enum values.
             		}
             	}
             	# OPTIONAL
             	stateVersion = $someInt64
             	# OPTIONAL
             	replicationSpecInput = @{
             		# OPTIONAL
             		replicationType = $someReplicationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationType]) for enum values.
             		# OPTIONAL
             		specificReplicationSpecInput = @{
             			# OPTIONAL
             			unidirectionalSpecInput = @{
             				# OPTIONAL
             				replicationTargetId = $someString
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			bidirectionalSpecInput = @{
             				# OPTIONAL
             				replicationSpec1 = @{
             					# OPTIONAL
             					replicationTargetId = $someString
             					# OPTIONAL
             					retention = $someInt
             					# OPTIONAL
             					retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             				# OPTIONAL
             				replicationSpec2 = @{
             					# OPTIONAL
             					replicationTargetId = $someString
             					# OPTIONAL
             					retention = $someInt
             					# OPTIONAL
             					retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             			# OPTIONAL
             			cloudRegionSpecInput = @{
             				# OPTIONAL
             				replicationTargetRegion = $someString
             				# OPTIONAL
             				cloudProvider = $someCloudProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudProvider]) for enum values.
             				# OPTIONAL
             				retention = $someInt
             				# OPTIONAL
             				retentionUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			cloudLocationSpecInput = @{
             				# OPTIONAL
             				replicationTargetId = $someString
             				# OPTIONAL
             				cloudProvider = $someCloudProvider # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudProvider]) for enum values.
             				# OPTIONAL
             				retentionDuration = @{
             					# OPTIONAL
             					duration = $someInt
             					# OPTIONAL
             					unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             		}
             	}
             	# OPTIONAL
             	localRetentionLimit = @{
             		# OPTIONAL
             		duration = $someInt
             		# OPTIONAL
             		unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             	}
             	# OPTIONAL
             	firstFullBackupWindows = @(
             		@{
             			# OPTIONAL
             			durationInHours = $someInt
             			# OPTIONAL
             			startTimeAttributes = @{
             				# OPTIONAL
             				dayOfWeek = @{
             					# OPTIONAL
             					day = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             				}
             				# OPTIONAL
             				hour = $someInt
             				# OPTIONAL
             				minute = $someInt
             			}
             		}
             	)
             	# OPTIONAL
             	backupWindows = @(
             		@{
             			# OPTIONAL
             			durationInHours = $someInt
             			# OPTIONAL
             			startTimeAttributes = @{
             				# OPTIONAL
             				dayOfWeek = @{
             					# OPTIONAL
             					day = $someDayOfWeek # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DayOfWeek]) for enum values.
             				}
             				# OPTIONAL
             				hour = $someInt
             				# OPTIONAL
             				minute = $someInt
             			}
             		}
             	)
             	# OPTIONAL
             	logConfig = @{
             		# OPTIONAL
             		slaLogFrequencyConfig = @{
             			# OPTIONAL
             			retention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             	}
             	# OPTIONAL
             	objectSpecificConfigsInput = @{
             		# OPTIONAL
             		sapHanaConfigInput = @{
             			# OPTIONAL
             			incrementalFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			differentialFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			storageSnapshotConfig = @{
             				# OPTIONAL
             				frequency = @{
             					# OPTIONAL
             					duration = $someInt
             					# OPTIONAL
             					unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             				# OPTIONAL
             				retention = @{
             					# OPTIONAL
             					duration = $someInt
             					# OPTIONAL
             					unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             				}
             			}
             		}
             		# OPTIONAL
             		awsRdsConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		vmwareVmConfigInput = @{
             			# OPTIONAL
             			logRetentionSeconds = $someInt64
             		}
             		# OPTIONAL
             		azureSqlDatabaseDbConfigInput = @{
             			# OPTIONAL
             			logRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		azureSqlManagedInstanceDbConfigInput = @{
             			# OPTIONAL
             			logRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		db2ConfigInput = @{
             			# OPTIONAL
             			incrementalFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			differentialFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		mssqlConfigInput = @{
             			# OPTIONAL
             			frequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		oracleConfigInput = @{
             			# OPTIONAL
             			frequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			hostLogRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		mongoConfigInput = @{
             			# OPTIONAL
             			logFrequency = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		azureBlobConfigInput = @{
             			# OPTIONAL
             			continuousBackupRetentionInDays = $someInt
             			# OPTIONAL
             			backupLocationId = $someString
             		}
             		# OPTIONAL
             		awsNativeS3SlaConfigInput = @{
             			# OPTIONAL
             			archivalLocationId = $someString
             			# OPTIONAL
             			continuousBackupRetentionInDays = $someInt
             		}
             		# OPTIONAL
             		managedVolumeSlaConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             		# OPTIONAL
             		postgresDbClusterSlaConfigInput = @{
             			# OPTIONAL
             			logRetention = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             		}
             	}
             	# OPTIONAL
             	shouldApplyToExistingSnapshots = @{
             		# OPTIONAL
             		value = $someBoolean
             	}
             	# OPTIONAL
             	shouldApplyToNonPolicySnapshots = @{
             		# OPTIONAL
             		value = $someBoolean
             	}
             	# OPTIONAL
             	userNote = $someString
             	# OPTIONAL
             	archivalSpecs = @(
             		@{
             			# OPTIONAL
             			archivalGroupId = $someString
             			# OPTIONAL
             			threshold = $someInt
             			# OPTIONAL
             			thresholdUnit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			# OPTIONAL
             			archivalTieringSpecInput = @{
             				# OPTIONAL
             				isInstantTieringEnabled = $someBoolean
             				# OPTIONAL
             				minAccessibleDurationInSeconds = $someInt64
             				# OPTIONAL
             				coldStorageClass = $someColdStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColdStorageClass]) for enum values.
             				# OPTIONAL
             				shouldTierExistingSnapshots = $someBoolean
             			}
             			# OPTIONAL
             			frequencies = @(
             				$someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			)
             			# OPTIONAL
             			archivalLocationToClusterMapping = @(
             				@{
             					# OPTIONAL
             					clusterUuid = $someString
             					# OPTIONAL
             					locationId = $someString
             				}
             			)
             		}
             	)
             	# OPTIONAL
             	replicationSpecsV2 = @(
             		@{
             			# OPTIONAL
             			clusterUuid = $someString
             			# OPTIONAL
             			storageSettingId = $someString
             			# OPTIONAL
             			retentionDuration = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			awsAccount = $someString
             			# OPTIONAL
             			azureSubscription = $someString
             			# OPTIONAL
             			replicationLocalRetentionDuration = @{
             				# OPTIONAL
             				duration = $someInt
             				# OPTIONAL
             				unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             			}
             			# OPTIONAL
             			cascadingArchivalSpecs = @(
             				@{
             					# OPTIONAL
             					archivalLocationId = $someString
             					# OPTIONAL
             					archivalThreshold = @{
             						# OPTIONAL
             						duration = $someInt
             						# OPTIONAL
             						unit = $someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             					}
             					# OPTIONAL
             					archivalTieringSpecInput = @{
             						# OPTIONAL
             						isInstantTieringEnabled = $someBoolean
             						# OPTIONAL
             						minAccessibleDurationInSeconds = $someInt64
             						# OPTIONAL
             						coldStorageClass = $someColdStorageClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ColdStorageClass]) for enum values.
             						# OPTIONAL
             						shouldTierExistingSnapshots = $someBoolean
             					}
             					# OPTIONAL
             					frequency = @(
             						$someRetentionUnit # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionUnit]) for enum values.
             					)
             				}
             			)
             			# OPTIONAL
             			awsRegion = $someAwsNativeRegionForReplication # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegionForReplication]) for enum values.
             			# OPTIONAL
             			azureRegion = $someAzureNativeRegionForReplication # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegionForReplication]) for enum values.
             		}
             	)
             	# OPTIONAL
             	objectTypes = @(
             		$someSlaObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaObjectType]) for enum values.
             	)
             	# OPTIONAL
             	isRetentionLockedSla = $someBoolean
             	# OPTIONAL
             	retentionLockMode = $someRetentionLockMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RetentionLockMode]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalSlaReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationSmb">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'SMB' API domain:
             AddAndJoinDomain, DeleteDomain, JoinDomain, or PutConfiguration.
             </summary>
             <description>
             New-RscMutationSmb creates a new
             mutation object for operations
             in the 'SMB' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'SMB' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddAndJoinDomain, DeleteDomain, JoinDomain, or PutConfiguration.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSmb -AddAndJoinDomain).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSmb -AddAndJoinDomain).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddAndJoinDomain operation
             of the 'SMB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Smb
             # API Operation: AddAndJoinDomain
             
             $query = New-RscMutationSmb -AddAndJoinDomain
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		smbDomainJoinRequest = @{
             			# OPTIONAL
             			computerAccountName = $someString
             			# OPTIONAL
             			creationOrganizationUnit = $someString
             			# OPTIONAL
             			domainControllers = @(
             				$someString
             			)
             			# OPTIONAL
             			isStickySmbService = $someBoolean
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# REQUIRED
             		name = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddAndJoinSmbDomainReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteDomain operation
             of the 'SMB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Smb
             # API Operation: DeleteDomain
             
             $query = New-RscMutationSmb -DeleteDomain
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	domainName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the JoinDomain operation
             of the 'SMB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Smb
             # API Operation: JoinDomain
             
             $query = New-RscMutationSmb -JoinDomain
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		computerAccountName = $someString
             		# OPTIONAL
             		creationOrganizationUnit = $someString
             		# OPTIONAL
             		domainControllers = @(
             			$someString
             		)
             		# OPTIONAL
             		isStickySmbService = $someBoolean
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             	# REQUIRED
             	domainName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PutConfiguration operation
             of the 'SMB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Smb
             # API Operation: PutConfiguration
             
             $query = New-RscMutationSmb -PutConfiguration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		enforceSmbSecurity = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PutSmbConfigurationReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationSnapshot">
             <summary>
             Create a new RscQuery object for any of the 16
             operations in the 'Snapshot' API domain:
             BatchQuarantine, BatchReleaseFromQuarantine, BulkTierExistings, CreateDomainController, CreateDownloadForVolumeGroup, CreateFileset, DeleteCloudWorkloadSnapshot, DeleteFilesetSnapshots, FilesetDownloadFiles, FilesetExportFiles, RestoreDomainController, RestoreVolumeGroupFiles, StartEc2InstanceExportJob, StartRecoverS3Job, TakeOnDemand, or UploadDatabaseToBlobstore.
             </summary>
             <description>
             New-RscMutationSnapshot creates a new
             mutation object for operations
             in the 'Snapshot' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 16 operations
             in the 'Snapshot' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BatchQuarantine, BatchReleaseFromQuarantine, BulkTierExistings, CreateDomainController, CreateDownloadForVolumeGroup, CreateFileset, DeleteCloudWorkloadSnapshot, DeleteFilesetSnapshots, FilesetDownloadFiles, FilesetExportFiles, RestoreDomainController, RestoreVolumeGroupFiles, StartEc2InstanceExportJob, StartRecoverS3Job, TakeOnDemand, or UploadDatabaseToBlobstore.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSnapshot -BatchQuarantine).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSnapshot -BatchQuarantine).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BatchQuarantine operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: BatchQuarantine
             
             $query = New-RscMutationSnapshot -BatchQuarantine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	quarantineSpecs = @(
             		@{
             			# REQUIRED
             			snapshotId = $someString
             			# REQUIRED
             			filesDetails = @(
             				@{
             					# REQUIRED
             					fileName = $someString
             				}
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchQuarantineSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchReleaseFromQuarantine operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: BatchReleaseFromQuarantine
             
             $query = New-RscMutationSnapshot -BatchReleaseFromQuarantine
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	quarantineSpecs = @(
             		@{
             			# REQUIRED
             			snapshotId = $someString
             			# REQUIRED
             			filesDetails = @(
             				@{
             					# REQUIRED
             					fileName = $someString
             				}
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchReleaseFromQuarantineSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BulkTierExistings operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: BulkTierExistings
             
             $query = New-RscMutationSnapshot -BulkTierExistings
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	objectTierInfo = @{
             		# OPTIONAL
             		locationId = $someString
             		# REQUIRED
             		objectIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateDomainController operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: CreateDomainController
             
             $query = New-RscMutationSnapshot -CreateDomainController
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateDownloadForVolumeGroup operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: CreateDownloadForVolumeGroup
             
             $query = New-RscMutationSnapshot -CreateDownloadForVolumeGroup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateFileset operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: CreateFileset
             
             $query = New-RscMutationSnapshot -CreateFileset
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteCloudWorkloadSnapshot operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: DeleteCloudWorkloadSnapshot
             
             $query = New-RscMutationSnapshot -DeleteCloudWorkloadSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteFilesetSnapshots operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: DeleteFilesetSnapshots
             
             $query = New-RscMutationSnapshot -DeleteFilesetSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ResponseSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FilesetDownloadFiles operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: FilesetDownloadFiles
             
             $query = New-RscMutationSnapshot -FilesetDownloadFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	nextSnapshotFid = $someString
             	# OPTIONAL
             	userNote = $someString
             	# OPTIONAL
             	zipPassword = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		legalHoldDownloadConfig = @{
             			# REQUIRED
             			isLegalHoldDownload = $someBoolean
             		}
             		# OPTIONAL
             		zipPassword = $someString
             		# REQUIRED
             		sourceDirs = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	deltaTypeFilter = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FilesetExportFiles operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: FilesetExportFiles
             
             $query = New-RscMutationSnapshot -FilesetExportFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	nextSnapshotFid = $someString
             	# OPTIONAL
             	deltaTypeFilter = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		ignoreErrors = $someBoolean
             		# OPTIONAL
             		shareId = $someString
             		# OPTIONAL
             		shouldRecreateDirectoryStructure = $someBoolean
             		# REQUIRED
             		exportPathPairs = @(
             			@{
             				# OPTIONAL
             				exportPathPair = @{
             					# REQUIRED
             					dstPath = $someString
             					# REQUIRED
             					srcPath = $someString
             				}
             			}
             		)
             	}
             	# REQUIRED
             	shareType = $someShareTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ShareTypeEnum]) for enum values.
             	# REQUIRED
             	osType = $someGuestOsType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GuestOsType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreDomainController operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: RestoreDomainController
             
             $query = New-RscMutationSnapshot -RestoreDomainController
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		snapshotForAuthoritativeRestore = $someString
             		# REQUIRED
             		domainControllerRestoreConfigs = @(
             			@{
             				# OPTIONAL
             				hostId = $someString
             				# REQUIRED
             				snapshotId = $someString
             			}
             		)
             		# REQUIRED
             		shouldPerformAuthoritativeAdObjectsRestore = $someBoolean
             		# REQUIRED
             		shouldPerformAuthoritativeSysvolRestore = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RestoreVolumeGroupFiles operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: RestoreVolumeGroupFiles
             
             $query = New-RscMutationSnapshot -RestoreVolumeGroupFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	nextSnapshotFid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetHostId = $someString
             		# REQUIRED
             		restoreConfigs = @(
             			@{
             				# REQUIRED
             				path = $someString
             				# REQUIRED
             				restorePath = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	deltaTypeFilter = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartEc2InstanceExportJob operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: StartEc2InstanceExportJob
             
             $query = New-RscMutationSnapshot -StartEc2InstanceExportJob
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	destinationAwsAccountRubrikId = $someString
             	# REQUIRED
             	instanceType = $someAwsNativeEc2InstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEc2InstanceType]) for enum values.
             	# REQUIRED
             	instanceName = $someString
             	# REQUIRED
             	securityGroupIds = @(
             		$someString
             	)
             	# REQUIRED
             	subnetId = $someString
             	# REQUIRED
             	destinationRegionId = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             	# REQUIRED
             	shouldCopyTags = $someBoolean
             	# OPTIONAL
             	kmsKeyId = $someString
             	# OPTIONAL
             	sshKeyPairName = $someString
             	# OPTIONAL
             	exportInstanceInPoweredOffState = $someBoolean
             	# OPTIONAL
             	snapshotType = $someSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotType]) for enum values.
             	# OPTIONAL
             	amiId = $someString
             	# OPTIONAL
             	iamInstanceProfileArn = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartRecoverS3Job operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: StartRecoverS3Job
             
             $query = New-RscMutationSnapshot -StartRecoverS3Job
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadId = $someString
             	# OPTIONAL
             	snapshotId = $someString
             	# OPTIONAL
             	restoreDate = $someDateTime
             	# REQUIRED
             	destinationBucketArn = $someString
             	# REQUIRED
             	shouldRecoverFullBucket = $someBoolean
             	# REQUIRED
             	objectKeys = @(
             		$someString
             	)
             	# OPTIONAL
             	targetAwsAccountRubrikId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TakeOnDemand operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: TakeOnDemand
             
             $query = New-RscMutationSnapshot -TakeOnDemand
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	workloadIds = @(
             		$someString
             	)
             	# REQUIRED
             	slaId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TakeOnDemandSnapshotReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UploadDatabaseToBlobstore operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: UploadDatabaseToBlobstore
             
             $query = New-RscMutationSnapshot -UploadDatabaseToBlobstore
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# OPTIONAL
             	targetStorageAccountConfigInput = @{
             		# REQUIRED
             		subscriptionCloudAccountId = $someString
             		# REQUIRED
             		resourceGroupName = $someString
             		# REQUIRED
             		storageAccountName = $someString
             		# OPTIONAL
             		tags = @{
             			# REQUIRED
             			tagList = @(
             				@{
             					# REQUIRED
             					key = $someString
             					# REQUIRED
             					value = $someString
             				}
             			)
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncJobStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationSnmp">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'SNMP' API domain:
             ['UpdateConfig'].
             </summary>
             <description>
             New-RscMutationSnmp creates a new
             mutation object for operations
             in the 'SNMP' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'SNMP' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['UpdateConfig'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSnmp -UpdateConfig).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSnmp -UpdateConfig).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the UpdateConfig operation
             of the 'SNMP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snmp
             # API Operation: UpdateConfig
             
             $query = New-RscMutationSnmp -UpdateConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	snmpConfigV50 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			$someString
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV51 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			$someString
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV52 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV53 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV60 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV70 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV80 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV81 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV90 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV91 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# OPTIONAL
             	snmpConfigV92 = @{
             		# OPTIONAL
             		communityString = $someString
             		# OPTIONAL
             		trapReceiverConfigs = @(
             			@{
             				# OPTIONAL
             				user = $someString
             				# OPTIONAL
             				securityLevel = $someSnmpSecurityLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnmpSecurityLevel]) for enum values.
             				# REQUIRED
             				address = $someString
             				# REQUIRED
             				port = $someInt
             			}
             		)
             		# OPTIONAL
             		users = @(
             			@{
             				# REQUIRED
             				authPassword = $someString
             				# REQUIRED
             				privPassword = $someString
             				# REQUIRED
             				username = $someString
             			}
             		)
             		# REQUIRED
             		isEnabled = $someBoolean
             		# REQUIRED
             		snmpAgentPort = $someInt
             	}
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateSnmpConfigReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationStorageArray">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Storage Arrays' API domain:
             Add, Delete, Refresh, or Update.
             </summary>
             <description>
             New-RscMutationStorageArray creates a new
             mutation object for operations
             in the 'Storage Arrays' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Storage Arrays' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Add, Delete, Refresh, or Update.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationStorageArray -Add).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationStorageArray -Add).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Add operation
             of the 'Storage Arrays' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    StorageArray
             # API Operation: Add
             
             $query = New-RscMutationStorageArray -Add
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	configs = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			definition = @{
             				# OPTIONAL
             				caCerts = $someString
             				# OPTIONAL
             				certificateId = $someString
             				# REQUIRED
             				arrayType = $someStorageArrayType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageArrayType]) for enum values.
             				# REQUIRED
             				hostname = $someString
             				# REQUIRED
             				password = $someString
             				# REQUIRED
             				username = $someString
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddStorageArraysReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'Storage Arrays' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    StorageArray
             # API Operation: Delete
             
             $query = New-RscMutationStorageArray -Delete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	inputs = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			id = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DeleteStorageArraysReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Refresh operation
             of the 'Storage Arrays' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    StorageArray
             # API Operation: Refresh
             
             $query = New-RscMutationStorageArray -Refresh
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	inputs = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			id = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RefreshStorageArraysReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'Storage Arrays' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    StorageArray
             # API Operation: Update
             
             $query = New-RscMutationStorageArray -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	configs = @(
             		@{
             			# REQUIRED
             			clusterUuid = $someString
             			# REQUIRED
             			id = $someString
             			# REQUIRED
             			definition = @{
             				# OPTIONAL
             				caCerts = $someString
             				# OPTIONAL
             				certificateId = $someString
             				# REQUIRED
             				arrayType = $someStorageArrayType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StorageArrayType]) for enum values.
             				# REQUIRED
             				hostname = $someString
             				# REQUIRED
             				password = $someString
             				# REQUIRED
             				username = $someString
             			}
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateStorageArraysReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationSyslog">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Syslog' API domain:
             AddExportRule, DeleteExportRule, TestExportRule, or UpdateExportRule.
             </summary>
             <description>
             New-RscMutationSyslog creates a new
             mutation object for operations
             in the 'Syslog' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Syslog' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AddExportRule, DeleteExportRule, TestExportRule, or UpdateExportRule.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSyslog -AddExportRule).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationSyslog -AddExportRule).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AddExportRule operation
             of the 'Syslog' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Syslog
             # API Operation: AddExportRule
             
             $query = New-RscMutationSyslog -AddExportRule
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	syslogExportRuleV51 = @{
             		# OPTIONAL
             		syslogCertificateInfo = @{
             			# OPTIONAL
             			serverCertificate = $someString
             			# OPTIONAL
             			serverCertificateName = $someString
             		}
             		# OPTIONAL
             		syslogExportRuleFull = @{
             			# OPTIONAL
             			certificateId = $someString
             			# REQUIRED
             			facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             			# REQUIRED
             			protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             			# REQUIRED
             			severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             			# REQUIRED
             			enableTls = $someBoolean
             			# REQUIRED
             			hostname = $someString
             			# REQUIRED
             			port = $someInt
             		}
             	}
             	# OPTIONAL
             	syslogExportRuleV52 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV53 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV60 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV70 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV80 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV81 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV90 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV91 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV92 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AddSyslogExportRuleReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteExportRule operation
             of the 'Syslog' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Syslog
             # API Operation: DeleteExportRule
             
             $query = New-RscMutationSyslog -DeleteExportRule
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TestExportRule operation
             of the 'Syslog' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Syslog
             # API Operation: TestExportRule
             
             $query = New-RscMutationSyslog -TestExportRule
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	syslogExportRuleV51 = @{
             		# OPTIONAL
             		syslogCertificateInfo = @{
             			# OPTIONAL
             			serverCertificate = $someString
             			# OPTIONAL
             			serverCertificateName = $someString
             		}
             		# OPTIONAL
             		syslogExportRuleFull = @{
             			# OPTIONAL
             			certificateId = $someString
             			# REQUIRED
             			facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             			# REQUIRED
             			protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             			# REQUIRED
             			severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             			# REQUIRED
             			enableTls = $someBoolean
             			# REQUIRED
             			hostname = $someString
             			# REQUIRED
             			port = $someInt
             		}
             	}
             	# OPTIONAL
             	syslogExportRuleV52 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV53 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV60 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV70 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV80 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV81 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV90 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV91 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# OPTIONAL
             	syslogExportRuleV92 = @{
             		# OPTIONAL
             		certificateId = $someString
             		# REQUIRED
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# REQUIRED
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# REQUIRED
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		# REQUIRED
             		enableTls = $someBoolean
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		port = $someInt
             	}
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TestSyslogExportRuleReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateExportRule operation
             of the 'Syslog' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Syslog
             # API Operation: UpdateExportRule
             
             $query = New-RscMutationSyslog -UpdateExportRule
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	syslogSettingsV51 = @{
             		# OPTIONAL
             		syslogCertificateInfo = @{
             			# OPTIONAL
             			serverCertificate = $someString
             			# OPTIONAL
             			serverCertificateName = $someString
             		}
             		# OPTIONAL
             		syslogExportRulePartial = @{
             			# OPTIONAL
             			enableTls = $someBoolean
             			# OPTIONAL
             			hostname = $someString
             			# OPTIONAL
             			port = $someInt
             			# OPTIONAL
             			certificateId = $someString
             			# OPTIONAL
             			facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             			# OPTIONAL
             			protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             			# OPTIONAL
             			severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             		}
             	}
             	# OPTIONAL
             	syslogSettingsV52 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# OPTIONAL
             	syslogSettingsV53 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# OPTIONAL
             	syslogSettingsV60 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# OPTIONAL
             	syslogSettingsV70 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# OPTIONAL
             	syslogSettingsV80 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# OPTIONAL
             	syslogSettingsV81 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# OPTIONAL
             	syslogSettingsV90 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# OPTIONAL
             	syslogSettingsV91 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# OPTIONAL
             	syslogSettingsV92 = @{
             		# OPTIONAL
             		enableTls = $someBoolean
             		# OPTIONAL
             		hostname = $someString
             		# OPTIONAL
             		port = $someInt
             		# OPTIONAL
             		certificateId = $someString
             		# OPTIONAL
             		facility = $someSyslogFacility # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogFacility]) for enum values.
             		# OPTIONAL
             		protocol = $someTransportLayerProtocol # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TransportLayerProtocol]) for enum values.
             		# OPTIONAL
             		severity = $someSyslogSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SyslogSeverity]) for enum values.
             	}
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateSyslogExportRuleReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationTape">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'Tape' API domain:
             CreateReaderTarget, CreateTarget, or UpdateTarget.
             </summary>
             <description>
             New-RscMutationTape creates a new
             mutation object for operations
             in the 'Tape' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'Tape' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CreateReaderTarget, CreateTarget, or UpdateTarget.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationTape -CreateReaderTarget).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationTape -CreateReaderTarget).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CreateReaderTarget operation
             of the 'Tape' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Tape
             # API Operation: CreateReaderTarget
             
             $query = New-RscMutationTape -CreateReaderTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	hostName = $someString
             	# REQUIRED
             	hostPort = $someInt
             	# REQUIRED
             	integralVolumeName = $someString
             	# REQUIRED
             	destinationFolderName = $someString
             	# REQUIRED
             	username = $someString
             	# REQUIRED
             	password = $someString
             	# REQUIRED
             	encryptionPassword = $someString
             	# REQUIRED
             	readerRetrievalMethod = $someReaderRetrievalMethod # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReaderRetrievalMethod]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateTarget operation
             of the 'Tape' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Tape
             # API Operation: CreateTarget
             
             $query = New-RscMutationTape -CreateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	hostName = $someString
             	# REQUIRED
             	hostPort = $someInt
             	# REQUIRED
             	integralVolumeName = $someString
             	# REQUIRED
             	destinationFolderName = $someString
             	# REQUIRED
             	username = $someString
             	# REQUIRED
             	password = $someString
             	# REQUIRED
             	encryptionPassword = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateTarget operation
             of the 'Tape' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Tape
             # API Operation: UpdateTarget
             
             $query = New-RscMutationTape -UpdateTarget
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	hostName = $someString
             	# OPTIONAL
             	hostPort = $someInt
             	# OPTIONAL
             	username = $someString
             	# OPTIONAL
             	password = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationThreat">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'Threat' API domain:
             CancelHunt, EnableMonitoring, or StartHunt.
             </summary>
             <description>
             New-RscMutationThreat creates a new
             mutation object for operations
             in the 'Threat' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'Threat' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CancelHunt, EnableMonitoring, or StartHunt.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationThreat -CancelHunt).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationThreat -CancelHunt).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CancelHunt operation
             of the 'Threat' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Threat
             # API Operation: CancelHunt
             
             $query = New-RscMutationThreat -CancelHunt
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	huntId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnableMonitoring operation
             of the 'Threat' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Threat
             # API Operation: EnableMonitoring
             
             $query = New-RscMutationThreat -EnableMonitoring
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	status = @{
             		# REQUIRED
             		entityId = $someString
             		# REQUIRED
             		entityType = $someThreatMonitoringEnablementEntity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ThreatMonitoringEnablementEntity]) for enum values.
             		# REQUIRED
             		enabled = $someBoolean
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StartHunt operation
             of the 'Threat' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Threat
             # API Operation: StartHunt
             
             $query = New-RscMutationThreat -StartHunt
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	notes = $someString
             	# OPTIONAL
             	fileScanCriteria = @{
             		# OPTIONAL
             		fileSizeLimits = @{
             			# OPTIONAL
             			maximumSizeInBytes = $someInt64
             			# OPTIONAL
             			minimumSizeInBytes = $someInt64
             		}
             		# OPTIONAL
             		fileTimeLimits = @{
             			# OPTIONAL
             			earliestCreationTime = $someDateTime
             			# OPTIONAL
             			earliestModificationTime = $someDateTime
             			# OPTIONAL
             			latestCreationTime = $someDateTime
             			# OPTIONAL
             			latestModificationTime = $someDateTime
             		}
             		# OPTIONAL
             		pathFilter = @{
             			# OPTIONAL
             			exceptions = @(
             				$someString
             			)
             			# OPTIONAL
             			excludes = @(
             				$someString
             			)
             			# OPTIONAL
             			includes = @(
             				$someString
             			)
             		}
             	}
             	# REQUIRED
             	indicatorsOfCompromise = @(
             		@{
             			# REQUIRED
             			iocKind = $someIndicatorOfCompromiseKind # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IndicatorOfCompromiseKind]) for enum values.
             			# REQUIRED
             			iocValue = $someString
             		}
             	)
             	# OPTIONAL
             	maxMatchesPerSnapshot = $someInt
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	objectFids = @(
             		$someString
             	)
             	# OPTIONAL
             	requestedMatchDetails = @{
             		# OPTIONAL
             		requestedHashTypes = @(
             			$someHashType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HashType]) for enum values.
             		)
             	}
             	# OPTIONAL
             	shouldTrustFilesystemTimeInfo = $someBoolean
             	# OPTIONAL
             	snapshotScanLimit = @{
             		# OPTIONAL
             		endTime = $someDateTime
             		# OPTIONAL
             		maxSnapshotsPerObject = $someInt
             		# OPTIONAL
             		snapshotsToScanPerObject = @(
             			@{
             				# REQUIRED
             				id = $someString
             				# REQUIRED
             				snapshots = @(
             					$someString
             				)
             			}
             		)
             		# OPTIONAL
             		startTime = $someDateTime
             	}
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StartThreatHuntReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationVcenter">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'VMware vSphere vCenter' API domain:
             Create, Delete, Refresh, Update, UpdateHotAddBandwidth, or UpdateHotAddNetwork.
             </summary>
             <description>
             New-RscMutationVcenter creates a new
             mutation object for operations
             in the 'VMware vSphere vCenter' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'VMware vSphere vCenter' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Create, Delete, Refresh, Update, UpdateHotAddBandwidth, or UpdateHotAddNetwork.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVcenter -Create).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVcenter -Create).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Create operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: Create
             
             $query = New-RscMutationVcenter -Create
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	vcenterDetail = @{
             		# OPTIONAL
             		caCerts = $someString
             		# OPTIONAL
             		computeVisibilityFilter = @(
             			@{
             				# OPTIONAL
             				isVmwareMetroStorageCluster = $someBoolean
             				# REQUIRED
             				hostGroupFilter = @(
             					$someString
             				)
             				# REQUIRED
             				id = $someString
             			}
             		)
             		# OPTIONAL
             		shouldEnableHotAddProxyForOnPrem = $someBoolean
             		# OPTIONAL
             		orgNetworkId = $someString
             		# OPTIONAL
             		conflictResolutionAuthz = $someVcenterConfigV2ConflictResolutionAuthz # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VcenterConfigV2ConflictResolutionAuthz]) for enum values.
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateVsphereVcenterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: Delete
             
             $query = New-RscMutationVcenter -Delete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Refresh operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: Refresh
             
             $query = New-RscMutationVcenter -Refresh
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	fid = $someString
             	# OPTIONAL
             	shouldDiagnose = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: Update
             
             $query = New-RscMutationVcenter -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	updateProperties = @{
             		# OPTIONAL
             		caCerts = $someString
             		# OPTIONAL
             		computeVisibilityFilter = @(
             			@{
             				# OPTIONAL
             				isVmwareMetroStorageCluster = $someBoolean
             				# REQUIRED
             				hostGroupFilter = @(
             					$someString
             				)
             				# REQUIRED
             				id = $someString
             			}
             		)
             		# OPTIONAL
             		shouldEnableHotAddProxyForOnPrem = $someBoolean
             		# OPTIONAL
             		conflictResolutionAuthz = $someVcenterConfigConflictResolutionAuthz # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VcenterConfigConflictResolutionAuthz]) for enum values.
             		# REQUIRED
             		hostname = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateVcenterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateHotAddBandwidth operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: UpdateHotAddBandwidth
             
             $query = New-RscMutationVcenter -UpdateHotAddBandwidth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	hotAddBandwidthInfo = @{
             		# REQUIRED
             		exportLimit = $someInt
             		# REQUIRED
             		ingestLimit = $someInt
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateHotAddNetwork operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: UpdateHotAddNetwork
             
             $query = New-RscMutationVcenter -UpdateHotAddNetwork
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	hotAddNetworkInfo = @{
             		# OPTIONAL
             		staticIpInfo = @{
             			# OPTIONAL
             			dnsServers = @(
             				$someString
             			)
             			# OPTIONAL
             			gateway = $someString
             			# REQUIRED
             			ipAddresses = @(
             				$someString
             			)
             			# REQUIRED
             			subnetMask = $someString
             		}
             		# REQUIRED
             		networkId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationVmware">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'VMware' API domain:
             ['DownloadSnapshotFromLocation'].
             </summary>
             <description>
             New-RscMutationVmware creates a new
             mutation object for operations
             in the 'VMware' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'VMware' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['DownloadSnapshotFromLocation'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVmware -DownloadSnapshotFromLocation).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVmware -DownloadSnapshotFromLocation).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the DownloadSnapshotFromLocation operation
             of the 'VMware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vmware
             # API Operation: DownloadSnapshotFromLocation
             
             $query = New-RscMutationVmware -DownloadSnapshotFromLocation
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	downloadConfig = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	locationId = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationVsphere">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'VMware vSphere' API domain:
             BulkOnDemandSnapshot, CreateAdvancedTag, DeleteAdvancedTag, DeleteLiveMount, DownloadVirtualMachineFiles, ExportSnapshotToStandaloneHostV2, OnDemandSnapshot, or UpdateAdvancedTag.
             </summary>
             <description>
             New-RscMutationVsphere creates a new
             mutation object for operations
             in the 'VMware vSphere' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'VMware vSphere' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkOnDemandSnapshot, CreateAdvancedTag, DeleteAdvancedTag, DeleteLiveMount, DownloadVirtualMachineFiles, ExportSnapshotToStandaloneHostV2, OnDemandSnapshot, or UpdateAdvancedTag.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVsphere -BulkOnDemandSnapshot).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVsphere -BulkOnDemandSnapshot).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkOnDemandSnapshot operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: BulkOnDemandSnapshot
             
             $query = New-RscMutationVsphere -BulkOnDemandSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             		# REQUIRED
             		vms = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CreateAdvancedTag operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: CreateAdvancedTag
             
             $query = New-RscMutationVsphere -CreateAdvancedTag
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filterInfo = @{
             		# OPTIONAL
             		description = $someString
             		# REQUIRED
             		condition = $someString
             		# REQUIRED
             		name = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateVsphereAdvancedTagReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteAdvancedTag operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: DeleteAdvancedTag
             
             $query = New-RscMutationVsphere -DeleteAdvancedTag
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filterId = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteLiveMount operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: DeleteLiveMount
             
             $query = New-RscMutationVsphere -DeleteLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	force = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadVirtualMachineFiles operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: DownloadVirtualMachineFiles
             
             $query = New-RscMutationVsphere -DownloadVirtualMachineFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		fileNamesToDownload = @(
             			$someString
             		)
             		# REQUIRED
             		vmId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshotToStandaloneHostV2 operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: ExportSnapshotToStandaloneHostV2
             
             $query = New-RscMutationVsphere -ExportSnapshotToStandaloneHostV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptions = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# REQUIRED
             		datastoreName = $someString
             		# REQUIRED
             		hostIpAddress = $someString
             		# REQUIRED
             		hostPassword = $someString
             		# REQUIRED
             		hostUsername = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OnDemandSnapshot operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: OnDemandSnapshot
             
             $query = New-RscMutationVsphere -OnDemandSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		slaId = $someString
             	}
             	# REQUIRED
             	id = $someString
             	# OPTIONAL
             	userNote = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpdateAdvancedTag operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: UpdateAdvancedTag
             
             $query = New-RscMutationVsphere -UpdateAdvancedTag
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	filterId = $someString
             	# REQUIRED
             	filterInfo = @{
             		# OPTIONAL
             		description = $someString
             		# REQUIRED
             		condition = $someString
             		# REQUIRED
             		name = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateVsphereAdvancedTagReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationVsphereVm">
             <summary>
             Create a new RscQuery object for any of the 24
             operations in the 'VMware vSphere VM' API domain:
             BatchExport, BatchExportV3, BatchInPlaceRecovery, DeleteSnapshot, DownloadSnapshot, DownloadSnapshotFiles, ExcludeVmDisks, ExportSnapshotV2, ExportSnapshotV3, ExportSnapshotWithDownloadFromCloud, InitiateBatchInstantRecovery, InitiateBatchLiveMountV2, InitiateDiskMount, InitiateInPlaceRecovery, InitiateInstantRecoveryV2, InitiateLiveMountV2, ListEsxiDatastores, MountRelocate, MountRelocateV2, PowerOnOffLiveMount, RecoverFiles, RecoverFilesNew, RegisterAgent, or Update.
             </summary>
             <description>
             New-RscMutationVsphereVm creates a new
             mutation object for operations
             in the 'VMware vSphere VM' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 24 operations
             in the 'VMware vSphere VM' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BatchExport, BatchExportV3, BatchInPlaceRecovery, DeleteSnapshot, DownloadSnapshot, DownloadSnapshotFiles, ExcludeVmDisks, ExportSnapshotV2, ExportSnapshotV3, ExportSnapshotWithDownloadFromCloud, InitiateBatchInstantRecovery, InitiateBatchLiveMountV2, InitiateDiskMount, InitiateInPlaceRecovery, InitiateInstantRecoveryV2, InitiateLiveMountV2, ListEsxiDatastores, MountRelocate, MountRelocateV2, PowerOnOffLiveMount, RecoverFiles, RecoverFilesNew, RegisterAgent, or Update.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVsphereVm -BatchExport).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationVsphereVm -BatchExport).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BatchExport operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: BatchExport
             
             $query = New-RscMutationVsphereVm -BatchExport
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					shouldRecoverTags = $someBoolean
             					# OPTIONAL
             					unregisterVm = $someBoolean
             					# OPTIONAL
             					clusterId = $someString
             					# OPTIONAL
             					resourcePoolId = $someString
             					# OPTIONAL
             					vNicBindings = @(
             						@{
             							# REQUIRED
             							backingNetworkInfo = @{
             								# REQUIRED
             								moid = $someString
             								# REQUIRED
             								name = $someString
             							}
             							# REQUIRED
             							networkDeviceInfo = @{
             								# REQUIRED
             								key = $someInt
             								# REQUIRED
             								name = $someString
             							}
             						}
             					)
             					# OPTIONAL
             					shouldUseHotAddProxy = $someBoolean
             					# OPTIONAL
             					mountExportSnapshotJobCommonOptionsV2 = @{
             						# OPTIONAL
             						disableNetwork = $someBoolean
             						# OPTIONAL
             						keepMacAddresses = $someBoolean
             						# OPTIONAL
             						powerOn = $someBoolean
             						# OPTIONAL
             						removeNetworkDevices = $someBoolean
             						# OPTIONAL
             						vmName = $someString
             					}
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             					# OPTIONAL
             					folderId = $someString
             					# OPTIONAL
             					contentLibraryId = $someString
             					# OPTIONAL
             					shouldConvertToTemplate = $someBoolean
             					# REQUIRED
             					datastoreId = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchExportV3 operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: BatchExportV3
             
             $query = New-RscMutationVsphereVm -BatchExportV3
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					clusterId = $someString
             					# OPTIONAL
             					diskDeviceKeyToStorageId = @(
             						@{
             							# OPTIONAL
             							storageLocationId = $someString
             							# REQUIRED
             							deviceKey = $someInt
             						}
             					)
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					resourcePoolId = $someString
             					# OPTIONAL
             					shouldRecoverTags = $someBoolean
             					# OPTIONAL
             					shouldUseHotAddProxy = $someBoolean
             					# OPTIONAL
             					storageLocationId = $someString
             					# OPTIONAL
             					unregisterVm = $someBoolean
             					# OPTIONAL
             					vNicBindings = @(
             						@{
             							# REQUIRED
             							backingNetworkInfo = @{
             								# REQUIRED
             								moid = $someString
             								# REQUIRED
             								name = $someString
             							}
             							# REQUIRED
             							networkDeviceInfo = @{
             								# REQUIRED
             								key = $someInt
             								# REQUIRED
             								name = $someString
             							}
             						}
             					)
             					# OPTIONAL
             					mountExportSnapshotJobCommonOptionsV2 = @{
             						# OPTIONAL
             						disableNetwork = $someBoolean
             						# OPTIONAL
             						keepMacAddresses = $someBoolean
             						# OPTIONAL
             						powerOn = $someBoolean
             						# OPTIONAL
             						removeNetworkDevices = $someBoolean
             						# OPTIONAL
             						vmName = $someString
             					}
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             					# OPTIONAL
             					folderId = $someString
             					# OPTIONAL
             					contentLibraryId = $someString
             					# OPTIONAL
             					shouldConvertToTemplate = $someBoolean
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BatchInPlaceRecovery operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: BatchInPlaceRecovery
             
             $query = New-RscMutationVsphereVm -BatchInPlaceRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					shouldKeepVsphereSnapshotAfterRecovery = $someBoolean
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeleteSnapshot operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: DeleteSnapshot
             
             $query = New-RscMutationVsphereVm -DeleteSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	location = $someDeleteVmwareSnapshotRequestLocation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeleteVmwareSnapshotRequestLocation]) for enum values.
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshot operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: DownloadSnapshot
             
             $query = New-RscMutationVsphereVm -DownloadSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadSnapshotFiles operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: DownloadSnapshotFiles
             
             $query = New-RscMutationVsphereVm -DownloadSnapshotFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotFid = $someString
             	# REQUIRED
             	paths = @(
             		$someString
             	)
             	# OPTIONAL
             	deltaTypeFilter = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             	# OPTIONAL
             	nextSnapshotFid = $someString
             	# OPTIONAL
             	isLegalHoldDownload = $someBoolean
             	# OPTIONAL
             	userNote = $someString
             	# OPTIONAL
             	zipPassword = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExcludeVmDisks operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: ExcludeVmDisks
             
             $query = New-RscMutationVsphereVm -ExcludeVmDisks
             
             # REQUIRED
             $query.Var.input = @(
             	@{
             		# REQUIRED
             		virtualDiskFid = $someString
             		# OPTIONAL
             		excludeFromSnapshots = $someBoolean
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshotV2 operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: ExportSnapshotV2
             
             $query = New-RscMutationVsphereVm -ExportSnapshotV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		unregisterVm = $someBoolean
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		shouldUseHotAddProxy = $someBoolean
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		contentLibraryId = $someString
             		# OPTIONAL
             		shouldConvertToTemplate = $someBoolean
             		# REQUIRED
             		datastoreId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshotV3 operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: ExportSnapshotV3
             
             $query = New-RscMutationVsphereVm -ExportSnapshotV3
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		diskDeviceKeyToStorageId = @(
             			@{
             				# OPTIONAL
             				storageLocationId = $someString
             				# REQUIRED
             				deviceKey = $someInt
             			}
             		)
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		shouldUseHotAddProxy = $someBoolean
             		# OPTIONAL
             		storageLocationId = $someString
             		# OPTIONAL
             		unregisterVm = $someBoolean
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		contentLibraryId = $someString
             		# OPTIONAL
             		shouldConvertToTemplate = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportSnapshotWithDownloadFromCloud operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: ExportSnapshotWithDownloadFromCloud
             
             $query = New-RscMutationVsphereVm -ExportSnapshotWithDownloadFromCloud
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		unregisterVm = $someBoolean
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		shouldUseHotAddProxy = $someBoolean
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		contentLibraryId = $someString
             		# OPTIONAL
             		shouldConvertToTemplate = $someBoolean
             		# REQUIRED
             		datastoreId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateBatchInstantRecovery operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: InitiateBatchInstantRecovery
             
             $query = New-RscMutationVsphereVm -InitiateBatchInstantRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					preserveMoid = $someBoolean
             					# OPTIONAL
             					shouldRecoverTags = $someBoolean
             					# OPTIONAL
             					vlan = $someInt
             					# OPTIONAL
             					clusterId = $someString
             					# OPTIONAL
             					resourcePoolId = $someString
             					# OPTIONAL
             					vNicBindings = @(
             						@{
             							# REQUIRED
             							backingNetworkInfo = @{
             								# REQUIRED
             								moid = $someString
             								# REQUIRED
             								name = $someString
             							}
             							# REQUIRED
             							networkDeviceInfo = @{
             								# REQUIRED
             								key = $someInt
             								# REQUIRED
             								name = $someString
             							}
             						}
             					)
             					# OPTIONAL
             					mountExportSnapshotJobCommonOptionsV2 = @{
             						# OPTIONAL
             						disableNetwork = $someBoolean
             						# OPTIONAL
             						keepMacAddresses = $someBoolean
             						# OPTIONAL
             						powerOn = $someBoolean
             						# OPTIONAL
             						removeNetworkDevices = $someBoolean
             						# OPTIONAL
             						vmName = $someString
             					}
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             					# OPTIONAL
             					migrationConfig = @{
             						# OPTIONAL
             						diskDeviceKeyToStorageId = @(
             							@{
             								# OPTIONAL
             								storageLocationId = $someString
             								# REQUIRED
             								deviceKey = $someInt
             							}
             						)
             						# OPTIONAL
             						storageLocationId = $someString
             						# OPTIONAL
             						computeClusterId = $someString
             						# OPTIONAL
             						hostId = $someString
             						# OPTIONAL
             						networkDeviceKeyToNetworkName = @(
             							@{
             								# REQUIRED
             								deviceKey = $someInt
             								# REQUIRED
             								networkName = $someString
             							}
             						)
             						# OPTIONAL
             						resourcePoolId = $someString
             					}
             					# OPTIONAL
             					shouldMigrateImmediately = $someBoolean
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateBatchLiveMountV2 operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: InitiateBatchLiveMountV2
             
             $query = New-RscMutationVsphereVm -InitiateBatchLiveMountV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		snapshots = @(
             			@{
             				# OPTIONAL
             				snapshotAfterDate = $someDateTime
             				# OPTIONAL
             				snapshotBeforeDate = $someDateTime
             				# OPTIONAL
             				snapshotId = $someString
             				# OPTIONAL
             				vmNamePrefix = $someString
             				# REQUIRED
             				config = @{
             					# OPTIONAL
             					createDatastoreOnly = $someBoolean
             					# OPTIONAL
             					dataStoreName = $someString
             					# OPTIONAL
             					hostId = $someString
             					# OPTIONAL
             					shouldRecoverTags = $someBoolean
             					# OPTIONAL
             					vlan = $someInt
             					# OPTIONAL
             					clusterId = $someString
             					# OPTIONAL
             					resourcePoolId = $someString
             					# OPTIONAL
             					vNicBindings = @(
             						@{
             							# REQUIRED
             							backingNetworkInfo = @{
             								# REQUIRED
             								moid = $someString
             								# REQUIRED
             								name = $someString
             							}
             							# REQUIRED
             							networkDeviceInfo = @{
             								# REQUIRED
             								key = $someInt
             								# REQUIRED
             								name = $someString
             							}
             						}
             					)
             					# OPTIONAL
             					migrationConfig = @{
             						# OPTIONAL
             						diskDeviceKeyToStorageId = @(
             							@{
             								# OPTIONAL
             								storageLocationId = $someString
             								# REQUIRED
             								deviceKey = $someInt
             							}
             						)
             						# OPTIONAL
             						storageLocationId = $someString
             						# OPTIONAL
             						computeClusterId = $someString
             						# OPTIONAL
             						hostId = $someString
             						# OPTIONAL
             						networkDeviceKeyToNetworkName = @(
             							@{
             								# REQUIRED
             								deviceKey = $someInt
             								# REQUIRED
             								networkName = $someString
             							}
             						)
             						# OPTIONAL
             						resourcePoolId = $someString
             					}
             					# OPTIONAL
             					shouldMigrateImmediately = $someBoolean
             					# OPTIONAL
             					mountExportSnapshotJobCommonOptionsV2 = @{
             						# OPTIONAL
             						disableNetwork = $someBoolean
             						# OPTIONAL
             						keepMacAddresses = $someBoolean
             						# OPTIONAL
             						powerOn = $someBoolean
             						# OPTIONAL
             						removeNetworkDevices = $someBoolean
             						# OPTIONAL
             						vmName = $someString
             					}
             					# OPTIONAL
             					requiredRecoveryParameters = @{
             						# OPTIONAL
             						recoveryPoint = $someDateTime
             						# OPTIONAL
             						snapshotId = $someString
             					}
             					# OPTIONAL
             					folderId = $someString
             				}
             				# REQUIRED
             				vmId = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateDiskMount operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: InitiateDiskMount
             
             $query = New-RscMutationVsphereVm -InitiateDiskMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		targetVmId = $someString
             		# OPTIONAL
             		vlan = $someInt
             		# OPTIONAL
             		vmdkIds = @(
             			$someString
             		)
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateInPlaceRecovery operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: InitiateInPlaceRecovery
             
             $query = New-RscMutationVsphereVm -InitiateInPlaceRecovery
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		shouldKeepVsphereSnapshotAfterRecovery = $someBoolean
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateInstantRecoveryV2 operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: InitiateInstantRecoveryV2
             
             $query = New-RscMutationVsphereVm -InitiateInstantRecoveryV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		preserveMoid = $someBoolean
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		vlan = $someInt
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		migrationConfig = @{
             			# OPTIONAL
             			diskDeviceKeyToStorageId = @(
             				@{
             					# OPTIONAL
             					storageLocationId = $someString
             					# REQUIRED
             					deviceKey = $someInt
             				}
             			)
             			# OPTIONAL
             			storageLocationId = $someString
             			# OPTIONAL
             			computeClusterId = $someString
             			# OPTIONAL
             			hostId = $someString
             			# OPTIONAL
             			networkDeviceKeyToNetworkName = @(
             				@{
             					# REQUIRED
             					deviceKey = $someInt
             					# REQUIRED
             					networkName = $someString
             				}
             			)
             			# OPTIONAL
             			resourcePoolId = $someString
             		}
             		# OPTIONAL
             		shouldMigrateImmediately = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InitiateLiveMountV2 operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: InitiateLiveMountV2
             
             $query = New-RscMutationVsphereVm -InitiateLiveMountV2
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	config = @{
             		# OPTIONAL
             		createDatastoreOnly = $someBoolean
             		# OPTIONAL
             		dataStoreName = $someString
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		shouldRecoverTags = $someBoolean
             		# OPTIONAL
             		vlan = $someInt
             		# OPTIONAL
             		clusterId = $someString
             		# OPTIONAL
             		resourcePoolId = $someString
             		# OPTIONAL
             		vNicBindings = @(
             			@{
             				# REQUIRED
             				backingNetworkInfo = @{
             					# REQUIRED
             					moid = $someString
             					# REQUIRED
             					name = $someString
             				}
             				# REQUIRED
             				networkDeviceInfo = @{
             					# REQUIRED
             					key = $someInt
             					# REQUIRED
             					name = $someString
             				}
             			}
             		)
             		# OPTIONAL
             		migrationConfig = @{
             			# OPTIONAL
             			diskDeviceKeyToStorageId = @(
             				@{
             					# OPTIONAL
             					storageLocationId = $someString
             					# REQUIRED
             					deviceKey = $someInt
             				}
             			)
             			# OPTIONAL
             			storageLocationId = $someString
             			# OPTIONAL
             			computeClusterId = $someString
             			# OPTIONAL
             			hostId = $someString
             			# OPTIONAL
             			networkDeviceKeyToNetworkName = @(
             				@{
             					# REQUIRED
             					deviceKey = $someInt
             					# REQUIRED
             					networkName = $someString
             				}
             			)
             			# OPTIONAL
             			resourcePoolId = $someString
             		}
             		# OPTIONAL
             		shouldMigrateImmediately = $someBoolean
             		# OPTIONAL
             		mountExportSnapshotJobCommonOptionsV2 = @{
             			# OPTIONAL
             			disableNetwork = $someBoolean
             			# OPTIONAL
             			keepMacAddresses = $someBoolean
             			# OPTIONAL
             			powerOn = $someBoolean
             			# OPTIONAL
             			removeNetworkDevices = $someBoolean
             			# OPTIONAL
             			vmName = $someString
             		}
             		# OPTIONAL
             		requiredRecoveryParameters = @{
             			# OPTIONAL
             			recoveryPoint = $someDateTime
             			# OPTIONAL
             			snapshotId = $someString
             		}
             		# OPTIONAL
             		folderId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ListEsxiDatastores operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: ListEsxiDatastores
             
             $query = New-RscMutationVsphereVm -ListEsxiDatastores
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	loginInfo = @{
             		# REQUIRED
             		ip = $someString
             		# REQUIRED
             		password = $someString
             		# REQUIRED
             		username = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVmListEsxiDatastoresReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountRelocate operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: MountRelocate
             
             $query = New-RscMutationVsphereVm -MountRelocate
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# REQUIRED
             		datastoreId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountRelocateV2 operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: MountRelocateV2
             
             $query = New-RscMutationVsphereVm -MountRelocateV2
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		diskDeviceKeyToStorageId = @(
             			@{
             				# OPTIONAL
             				storageLocationId = $someString
             				# REQUIRED
             				deviceKey = $someInt
             			}
             		)
             		# OPTIONAL
             		storageLocationId = $someString
             		# OPTIONAL
             		computeClusterId = $someString
             		# OPTIONAL
             		hostId = $someString
             		# OPTIONAL
             		networkDeviceKeyToNetworkName = @(
             			@{
             				# REQUIRED
             				deviceKey = $someInt
             				# REQUIRED
             				networkName = $someString
             			}
             		)
             		# OPTIONAL
             		resourcePoolId = $someString
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PowerOnOffLiveMount operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: PowerOnOffLiveMount
             
             $query = New-RscMutationVsphereVm -PowerOnOffLiveMount
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		shouldForce = $someBoolean
             		# REQUIRED
             		powerStatus = $someBoolean
             	}
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVmPowerOnOffLiveMountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverFiles operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: RecoverFiles
             
             $query = New-RscMutationVsphereVm -RecoverFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotFid = $someString
             	# REQUIRED
             	restoreConfig = @{
             		# OPTIONAL
             		restoreFilesConfig = @(
             			@{
             				# OPTIONAL
             				path = $someString
             				# OPTIONAL
             				restorePath = $someString
             			}
             		)
             		# OPTIONAL
             		domainName = $someString
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		shouldIgnoreErrors = $someBoolean
             		# OPTIONAL
             		shouldSaveCredentials = $someBoolean
             		# OPTIONAL
             		shouldUseAgent = $someBoolean
             		# OPTIONAL
             		shouldRestoreXAttrs = $someBoolean
             		# OPTIONAL
             		deltaTypeFilter = @(
             			$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             		)
             		# OPTIONAL
             		nextSnapshotFid = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereAsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverFilesNew operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: RecoverFilesNew
             
             $query = New-RscMutationVsphereVm -RecoverFilesNew
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	config = @{
             		# OPTIONAL
             		domainName = $someString
             		# OPTIONAL
             		ignoreErrors = $someBoolean
             		# OPTIONAL
             		password = $someString
             		# OPTIONAL
             		shouldSaveCredentials = $someBoolean
             		# OPTIONAL
             		username = $someString
             		# OPTIONAL
             		destObjectId = $someString
             		# OPTIONAL
             		shouldRestoreXAttrs = $someBoolean
             		# OPTIONAL
             		shouldUseAgent = $someBoolean
             		# OPTIONAL
             		guestCredentialId = $someString
             		# OPTIONAL
             		description = $someString
             		# OPTIONAL
             		shouldUseMountDisks = $someBoolean
             		# REQUIRED
             		restoreConfig = @(
             			@{
             				# OPTIONAL
             				restorePathPair = @{
             					# OPTIONAL
             					restorePath = $someString
             					# REQUIRED
             					path = $someString
             				}
             			}
             		)
             	}
             	# OPTIONAL
             	deltaRequest = @{
             		# REQUIRED
             		nextSnapshotFid = $someString
             		# REQUIRED
             		deltaTypeFilter = @(
             			$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegisterAgent operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: RegisterAgent
             
             $query = New-RscMutationVsphereVm -RegisterAgent
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: Update
             
             $query = New-RscMutationVsphereVm -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	vmUpdateProperties = @{
             		# OPTIONAL
             		guestCredential = @{
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		shouldRefreshCacheAfterUpdate = $someBoolean
             		# OPTIONAL
             		guestCredentialId = $someString
             		# OPTIONAL
             		virtualMachineUpdate = @{
             			# OPTIONAL
             			cloudInstantiationSpec = @{
             				# REQUIRED
             				imageRetentionInSeconds = $someInt64
             			}
             			# OPTIONAL
             			configuredSlaDomainId = $someString
             			# OPTIONAL
             			isArrayIntegrationEnabled = $someBoolean
             			# OPTIONAL
             			isVmPaused = $someBoolean
             			# OPTIONAL
             			maxNestedVsphereSnapshots = $someInt
             			# OPTIONAL
             			postBackupScript = @{
             				# REQUIRED
             				failureHandling = $someVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VirtualMachineScriptDetailFailureHandling]) for enum values.
             				# REQUIRED
             				scriptPath = $someString
             				# REQUIRED
             				timeoutMs = $someInt64
             			}
             			# OPTIONAL
             			postSnapScript = @{
             				# REQUIRED
             				failureHandling = $someVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VirtualMachineScriptDetailFailureHandling]) for enum values.
             				# REQUIRED
             				scriptPath = $someString
             				# REQUIRED
             				timeoutMs = $someInt64
             			}
             			# OPTIONAL
             			preBackupScript = @{
             				# REQUIRED
             				failureHandling = $someVirtualMachineScriptDetailFailureHandling # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VirtualMachineScriptDetailFailureHandling]) for enum values.
             				# REQUIRED
             				scriptPath = $someString
             				# REQUIRED
             				timeoutMs = $someInt64
             			}
             			# OPTIONAL
             			throttlingSettings = @{
             				# OPTIONAL
             				cpuUtilizationThreshold = $someInt
             				# OPTIONAL
             				datastoreIoLatencyThreshold = $someInt
             				# OPTIONAL
             				ioLatencyThreshold = $someInt
             			}
             			# OPTIONAL
             			snapshotConsistencyMandate = $someVirtualMachineUpdateSnapshotConsistencyMandate # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VirtualMachineUpdateSnapshotConsistencyMandate]) for enum values.
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RequestSuccess
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscMutationWebhook">
             <summary>
             Create a new RscQuery object for any of the 5
             operations in the 'Webhook' API domain:
             Create, Delete, Test, TestExisting, or Update.
             </summary>
             <description>
             New-RscMutationWebhook creates a new
             mutation object for operations
             in the 'Webhook' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 5 operations
             in the 'Webhook' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Create, Delete, Test, TestExisting, or Update.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationWebhook -Create).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscMutationWebhook -Create).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Create operation
             of the 'Webhook' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Webhook
             # API Operation: Create
             
             $query = New-RscMutationWebhook -Create
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	serverCertificate = $someString
             	# OPTIONAL
             	serviceAccountId = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	url = $someString
             	# REQUIRED
             	subscriptionType = @{
             		# OPTIONAL
             		eventTypes = @(
             			$someActivityTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		auditTypes = @(
             			$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		isSubscribedToAllEvents = $someBoolean
             		# OPTIONAL
             		isSubscribedToAllAudits = $someBoolean
             	}
             	# REQUIRED
             	subscriptionSeverity = @{
             		# OPTIONAL
             		eventSeverities = @(
             			$someActivitySeverityEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivitySeverityEnum]) for enum values.
             		)
             		# OPTIONAL
             		auditSeverities = @(
             			$someUserAuditSeverityEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditSeverityEnum]) for enum values.
             		)
             	}
             	# REQUIRED
             	providerType = $someProviderType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProviderType]) for enum values.
             	# OPTIONAL
             	authInfo = @{
             		# REQUIRED
             		authType = $someAuthenticationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuthenticationType]) for enum values.
             		# OPTIONAL
             		token = $someString
             		# OPTIONAL
             		userCredentials = @{
             			# REQUIRED
             			username = $someString
             			# REQUIRED
             			password = $someString
             		}
             		# OPTIONAL
             		customHeader = @{
             			# REQUIRED
             			headerKey = $someString
             			# REQUIRED
             			headerValue = $someString
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CreateWebhookReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Delete operation
             of the 'Webhook' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Webhook
             # API Operation: Delete
             
             $query = New-RscMutationWebhook -Delete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Test operation
             of the 'Webhook' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Webhook
             # API Operation: Test
             
             $query = New-RscMutationWebhook -Test
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	serverCertificate = $someString
             	# REQUIRED
             	providerType = $someProviderType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProviderType]) for enum values.
             	# OPTIONAL
             	authInfo = @{
             		# REQUIRED
             		authType = $someAuthenticationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuthenticationType]) for enum values.
             		# OPTIONAL
             		token = $someString
             		# OPTIONAL
             		userCredentials = @{
             			# REQUIRED
             			username = $someString
             			# REQUIRED
             			password = $someString
             		}
             		# OPTIONAL
             		customHeader = @{
             			# REQUIRED
             			headerKey = $someString
             			# REQUIRED
             			headerValue = $someString
             		}
             	}
             	# REQUIRED
             	url = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TestWebhookReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TestExisting operation
             of the 'Webhook' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Webhook
             # API Operation: TestExisting
             
             $query = New-RscMutationWebhook -TestExisting
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TestExistingWebhookReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Update operation
             of the 'Webhook' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Webhook
             # API Operation: Update
             
             $query = New-RscMutationWebhook -Update
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	serverCertificate = $someString
             	# OPTIONAL
             	serviceAccountId = $someString
             	# REQUIRED
             	id = $someInt
             	# OPTIONAL
             	subscriptionType = @{
             		# OPTIONAL
             		eventTypes = @(
             			$someActivityTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		auditTypes = @(
             			$someUserAuditTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		isSubscribedToAllEvents = $someBoolean
             		# OPTIONAL
             		isSubscribedToAllAudits = $someBoolean
             	}
             	# OPTIONAL
             	subscriptionSeverity = @{
             		# OPTIONAL
             		eventSeverities = @(
             			$someActivitySeverityEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivitySeverityEnum]) for enum values.
             		)
             		# OPTIONAL
             		auditSeverities = @(
             			$someUserAuditSeverityEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditSeverityEnum]) for enum values.
             		)
             	}
             	# OPTIONAL
             	providerType = $someProviderType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProviderType]) for enum values.
             	# OPTIONAL
             	authInfo = @{
             		# REQUIRED
             		authType = $someAuthenticationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuthenticationType]) for enum values.
             		# OPTIONAL
             		token = $someString
             		# OPTIONAL
             		userCredentials = @{
             			# REQUIRED
             			username = $someString
             			# REQUIRED
             			password = $someString
             		}
             		# OPTIONAL
             		customHeader = @{
             			# REQUIRED
             			headerKey = $someString
             			# REQUIRED
             			headerValue = $someString
             		}
             	}
             	# OPTIONAL
             	status = $someWebhookStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WebhookStatus]) for enum values.
             	# OPTIONAL
             	url = $someString
             	# OPTIONAL
             	shouldSendTestEvent = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateWebhookReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAccount">
             <summary>
             Create a new RscQuery object for any of the 9
             operations in the 'Account' API domain:
             CurrentUser, CurrentUserLoginContext, EnabledFeatures, Id, Lookup, Owners, Products, Settings, or Users.
             </summary>
             <description>
             New-RscQueryAccount creates a new
             query object for operations
             in the 'Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 9 operations
             in the 'Account' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CurrentUser, CurrentUserLoginContext, EnabledFeatures, Id, Lookup, Owners, Products, Settings, or Users.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAccount -CurrentUser).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAccount -CurrentUser).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CurrentUser operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CurrentUser
             
             $query = New-RscQueryAccount -CurrentUser
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: User
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CurrentUserLoginContext operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: CurrentUserLoginContext
             
             $query = New-RscQueryAccount -CurrentUserLoginContext
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UserLoginContext
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EnabledFeatures operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: EnabledFeatures
             
             $query = New-RscQueryAccount -EnabledFeatures
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AllEnabledFeaturesForAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Id operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Id
             
             $query = New-RscQueryAccount -Id
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Lookup operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Lookup
             
             $query = New-RscQueryAccount -Lookup
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	includeExpiryDate = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LookupAccountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Owners operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Owners
             
             $query = New-RscQueryAccount -Owners
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;User&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Products operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Products
             
             $query = New-RscQueryAccount -Products
             
             # REQUIRED
             $query.Var.nameFilter = @(
             	$someProductName # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProductName]) for enum values.
             )
             # REQUIRED
             $query.Var.typeFilter = @(
             	$someProductType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProductType]) for enum values.
             )
             # REQUIRED
             $query.Var.stateFilter = @(
             	$someProductState # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProductState]) for enum values.
             )
             # OPTIONAL
             $query.Var.startDateArg = $someDateTime
             # OPTIONAL
             $query.Var.endDateArg = $someDateTime
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AccountProduct&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Settings operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Settings
             
             $query = New-RscQueryAccount -Settings
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AccountSetting
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Users operation
             of the 'Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Account
             # API Operation: Users
             
             $query = New-RscQueryAccount -Users
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;User&gt;
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryActiveDirectory">
             <summary>
             Create a new RscQuery object for any of the 5
             operations in the 'Active Directory' API domain:
             Domain, DomainController, DomainControllers, Domains, or SearchSnapshots.
             </summary>
             <description>
             New-RscQueryActiveDirectory creates a new
             query object for operations
             in the 'Active Directory' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 5 operations
             in the 'Active Directory' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Domain, DomainController, DomainControllers, Domains, or SearchSnapshots.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryActiveDirectory -Domain).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryActiveDirectory -Domain).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Domain operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: Domain
             
             $query = New-RscQueryActiveDirectory -Domain
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActiveDirectoryDomain
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DomainController operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: DomainController
             
             $query = New-RscQueryActiveDirectory -DomainController
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActiveDirectoryDomainController
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DomainControllers operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: DomainControllers
             
             $query = New-RscQueryActiveDirectory -DomainControllers
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActiveDirectoryDomainControllerConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Domains operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: Domains
             
             $query = New-RscQueryActiveDirectory -Domains
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActiveDirectoryDomainConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SearchSnapshots operation
             of the 'Active Directory' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActiveDirectory
             # API Operation: SearchSnapshots
             
             $query = New-RscQueryActiveDirectory -SearchSnapshots
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.id = $someString
             # OPTIONAL
             $query.Var.snapshotAfterDate = $someDateTime
             # OPTIONAL
             $query.Var.snapshotBeforeDate = $someDateTime
             # REQUIRED
             $query.Var.name = $someString
             # OPTIONAL
             $query.Var.activeDirectoryObjectType = $someActiveDirectoryObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActiveDirectoryObjectType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActiveDirectorySnappableSearchResponseConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryActivitySeries">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Activity series' API domain:
             ActivitySeries, List, UserFileTimeline, or UserTimeline.
             </summary>
             <description>
             New-RscQueryActivitySeries creates a new
             query object for operations
             in the 'Activity series' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Activity series' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ActivitySeries, List, UserFileTimeline, or UserTimeline.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryActivitySeries -ActivitySeries).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryActivitySeries -ActivitySeries).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ActivitySeries operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: ActivitySeries
             
             $query = New-RscQueryActivitySeries -ActivitySeries
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	activitySeriesId = $someString
             	# OPTIONAL
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActivitySeries
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the List operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: List
             
             $query = New-RscQueryActivitySeries -List
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someActivitySeriesSortField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivitySeriesSortField]) for enum values.
             # OPTIONAL
             $query.Var.filters = @{
             	# OPTIONAL
             	lastActivityStatus = @(
             		$someEventStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventStatus]) for enum values.
             	)
             	# OPTIONAL
             	lastActivityType = @(
             		$someEventType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventType]) for enum values.
             	)
             	# OPTIONAL
             	severity = @(
             		$someEventSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventSeverity]) for enum values.
             	)
             	# OPTIONAL
             	objectName = $someString
             	# OPTIONAL
             	objectType = @(
             		$someEventObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventObjectType]) for enum values.
             	)
             	# OPTIONAL
             	startTimeGt = $someDateTime
             	# OPTIONAL
             	startTimeLt = $someDateTime
             	# OPTIONAL
             	lastUpdatedTimeGt = $someDateTime
             	# OPTIONAL
             	lastUpdatedTimeLt = $someDateTime
             	# OPTIONAL
             	clusterId = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterType = @(
             		$someEventClusterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EventClusterType]) for enum values.
             	)
             	# OPTIONAL
             	objectFid = @(
             		$someString
             	)
             	# OPTIONAL
             	ancestorId = $someString
             	# OPTIONAL
             	searchTerm = $someString
             	# OPTIONAL
             	orgIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActivitySeriesConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserFileTimeline operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: UserFileTimeline
             
             $query = New-RscQueryActivitySeries -UserFileTimeline
             
             # REQUIRED
             $query.Var.userId = $someString
             # OPTIONAL
             $query.Var.resource = @{
             	# OPTIONAL
             	snappableFid = $someString
             	# OPTIONAL
             	snapshotFid = $someString
             }
             # REQUIRED
             $query.Var.nativePath = $someString
             # REQUIRED
             $query.Var.startDay = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             # REQUIRED
             $query.Var.timeGranularity = $someTimeGranularity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TimeGranularity]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActivityTimelineResultConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserTimeline operation
             of the 'Activity series' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ActivitySeries
             # API Operation: UserTimeline
             
             $query = New-RscQueryActivitySeries -UserTimeline
             
             # REQUIRED
             $query.Var.userId = $someString
             # REQUIRED
             $query.Var.startDay = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             # REQUIRED
             $query.Var.uniqueActivities = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ActivityTimelineResultConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryArchival">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Archival' API domain:
             HierarchyObjectRecoveryTarget, IsTotpMandatoryInTargetVersion, RcsLocationsConsumptionStats, StorageUsage, Target, TargetMapping, TargetMappings, or Targets.
             </summary>
             <description>
             New-RscQueryArchival creates a new
             query object for operations
             in the 'Archival' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Archival' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: HierarchyObjectRecoveryTarget, IsTotpMandatoryInTargetVersion, RcsLocationsConsumptionStats, StorageUsage, Target, TargetMapping, TargetMappings, or Targets.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryArchival -HierarchyObjectRecoveryTarget).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryArchival -HierarchyObjectRecoveryTarget).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the HierarchyObjectRecoveryTarget operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: HierarchyObjectRecoveryTarget
             
             $query = New-RscQueryArchival -HierarchyObjectRecoveryTarget
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HierarchyObject
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsTotpMandatoryInTargetVersion operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: IsTotpMandatoryInTargetVersion
             
             $query = New-RscQueryArchival -IsTotpMandatoryInTargetVersion
             
             # REQUIRED
             $query.Var.version = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RcsLocationsConsumptionStats operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: RcsLocationsConsumptionStats
             
             $query = New-RscQueryArchival -RcsLocationsConsumptionStats
             
             # REQUIRED
             $query.Var.rcsAzureTargetConsumptionStatsRequest = @{
             	# REQUIRED
             	locationIds = @(
             		$someString
             	)
             	# REQUIRED
             	metricName = $someRcsConsumptionMetricNameType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RcsConsumptionMetricNameType]) for enum values.
             	# OPTIONAL
             	doForecasting = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RcsAzureArchivalLocationsConsumptionStatsOutput
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StorageUsage operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: StorageUsage
             
             $query = New-RscQueryArchival -StorageUsage
             
             # REQUIRED
             $query.Var.input = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ArchivalStorageUsage&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Target operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: Target
             
             $query = New-RscQueryArchival -Target
             
             # REQUIRED
             $query.Var.input = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Target
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TargetMapping operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: TargetMapping
             
             $query = New-RscQueryArchival -TargetMapping
             
             # REQUIRED
             $query.Var.targetMappingId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetMapping
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TargetMappings operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: TargetMappings
             
             $query = New-RscQueryArchival -TargetMappings
             
             # OPTIONAL
             $query.Var.sortBy = $someArchivalGroupQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ArchivalGroupQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someTargetMappingQueryFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TargetMappingQueryFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             # OPTIONAL
             $query.Var.isRcsStatsRequired = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;TargetMapping&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Targets operation
             of the 'Archival' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Archival
             # API Operation: Targets
             
             $query = New-RscQueryArchival -Targets
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someArchivalLocationQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ArchivalLocationQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someTargetQueryFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TargetQueryFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TargetConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAws">
             <summary>
             Create a new RscQuery object for any of the 28
             operations in the 'AWS' API domain:
             ArtifactsToDelete, AvailabilityZonesByRegion, CdmVersions, CloudAccountConfigs, CloudAccountListSecurityGroups, CloudAccountListSubnets, CloudAccountListVpcs, CloudAccountWithFeatures, CloudAccountsWithFeatures, ComputeSettings, DbParameterGroupsByRegion, DbSubnetGroupsByRegion, Ec2KeyPairsByRegion, ExocomputeConfigs, InstanceProfileNames, IsS3BucketNameAvailable, KmsEncryptionKeysByRegion, OptionGroupsByRegion, PermissionPolicies, RdsInstanceDetails, Regions, S3BucketStateForRecovery, S3Buckets, S3BucketsDetails, SupportedRdsDatabaseInstanceClasses, TrustPolicy, Vpcs, or VpcsByRegion.
             </summary>
             <description>
             New-RscQueryAws creates a new
             query object for operations
             in the 'AWS' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 28 operations
             in the 'AWS' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ArtifactsToDelete, AvailabilityZonesByRegion, CdmVersions, CloudAccountConfigs, CloudAccountListSecurityGroups, CloudAccountListSubnets, CloudAccountListVpcs, CloudAccountWithFeatures, CloudAccountsWithFeatures, ComputeSettings, DbParameterGroupsByRegion, DbSubnetGroupsByRegion, Ec2KeyPairsByRegion, ExocomputeConfigs, InstanceProfileNames, IsS3BucketNameAvailable, KmsEncryptionKeysByRegion, OptionGroupsByRegion, PermissionPolicies, RdsInstanceDetails, Regions, S3BucketStateForRecovery, S3Buckets, S3BucketsDetails, SupportedRdsDatabaseInstanceClasses, TrustPolicy, Vpcs, or VpcsByRegion.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAws -ArtifactsToDelete).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAws -ArtifactsToDelete).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ArtifactsToDelete operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: ArtifactsToDelete
             
             $query = New-RscQueryAws -ArtifactsToDelete
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	awsNativeId = $someString
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsArtifactsToDelete
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AvailabilityZonesByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: AvailabilityZonesByRegion
             
             $query = New-RscQueryAws -AvailabilityZonesByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmVersions operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CdmVersions
             
             $query = New-RscQueryAws -CdmVersions
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	region = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsCdmVersion&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CloudAccountConfigs
             
             $query = New-RscQueryAws -CloudAccountConfigs
             
             # REQUIRED
             $query.Var.awsCloudAccountsArg = @{
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# REQUIRED
             	statusFilters = @(
             		$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             	)
             	# OPTIONAL
             	awsAdminAccountFilter = $someString
             	# OPTIONAL
             	columnSearchFilter = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsFeatureConfig&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountListSecurityGroups operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CloudAccountListSecurityGroups
             
             $query = New-RscQueryAws -CloudAccountListSecurityGroups
             
             # REQUIRED
             $query.Var.cloudAccountUuid = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             # REQUIRED
             $query.Var.vpcID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsCloudAccountListSecurityGroupsResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountListSubnets operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CloudAccountListSubnets
             
             $query = New-RscQueryAws -CloudAccountListSubnets
             
             # REQUIRED
             $query.Var.cloudAccountUuid = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             # REQUIRED
             $query.Var.vpcID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsCloudAccountListSubnetsResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountListVpcs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CloudAccountListVpcs
             
             $query = New-RscQueryAws -CloudAccountListVpcs
             
             # REQUIRED
             $query.Var.cloudAccountUuid = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.region = $someAwsRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsCloudAccountListVpcResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountWithFeatures operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CloudAccountWithFeatures
             
             $query = New-RscQueryAws -CloudAccountWithFeatures
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.awsCloudAccountArg = @{
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsCloudAccountWithFeatures
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountsWithFeatures operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: CloudAccountsWithFeatures
             
             $query = New-RscQueryAws -CloudAccountsWithFeatures
             
             # REQUIRED
             $query.Var.awsCloudAccountsArg = @{
             	# REQUIRED
             	feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	# REQUIRED
             	statusFilters = @(
             		$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             	)
             	# OPTIONAL
             	awsAdminAccountFilter = $someString
             	# OPTIONAL
             	columnSearchFilter = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsCloudAccountWithFeatures&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ComputeSettings operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: ComputeSettings
             
             $query = New-RscQueryAws -ComputeSettings
             
             # REQUIRED
             $query.Var.computeSettingId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsComputeSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbParameterGroupsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: DbParameterGroupsByRegion
             
             $query = New-RscQueryAws -DbParameterGroupsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.dbEngine = $someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             # REQUIRED
             $query.Var.dbEngineVersion = $someString
             # OPTIONAL
             $query.Var.rdsType = $someAwsNativeRdsType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;DbParameterGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DbSubnetGroupsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: DbSubnetGroupsByRegion
             
             $query = New-RscQueryAws -DbSubnetGroupsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SubnetGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Ec2KeyPairsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: Ec2KeyPairsByRegion
             
             $query = New-RscQueryAws -Ec2KeyPairsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExocomputeConfigs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: ExocomputeConfigs
             
             $query = New-RscQueryAws -ExocomputeConfigs
             
             # REQUIRED
             $query.Var.awsNativeAccountIdOrNamePrefix = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsExocomputeConfig&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InstanceProfileNames operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: InstanceProfileNames
             
             $query = New-RscQueryAws -InstanceProfileNames
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.region = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsS3BucketNameAvailable operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: IsS3BucketNameAvailable
             
             $query = New-RscQueryAws -IsS3BucketNameAvailable
             
             # REQUIRED
             $query.Var.bucketName = $someString
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the KmsEncryptionKeysByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: KmsEncryptionKeysByRegion
             
             $query = New-RscQueryAws -KmsEncryptionKeysByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;KmsEncryptionKey&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OptionGroupsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: OptionGroupsByRegion
             
             $query = New-RscQueryAws -OptionGroupsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.dbEngine = $someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             # REQUIRED
             $query.Var.dbEngineVersion = $someString
             # REQUIRED
             $query.Var.majorEngineVersion = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;OptionGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PermissionPolicies operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: PermissionPolicies
             
             $query = New-RscQueryAws -PermissionPolicies
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	# OPTIONAL
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# OPTIONAL
             	featureSpecificDetails = @{
             		# OPTIONAL
             		ec2RecoveryRolePath = $someString
             	}
             	# OPTIONAL
             	featuresWithPermissionsGroups = @(
             		@{
             			# OPTIONAL
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             			# OPTIONAL
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;PermissionPolicy&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RdsInstanceDetails operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: RdsInstanceDetails
             
             $query = New-RscQueryAws -RdsInstanceDetails
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.rdsInstanceName = $someString
             # OPTIONAL
             $query.Var.rdsDatabaseRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RdsInstanceDetailsFromAws
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Regions operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: Regions
             
             $query = New-RscQueryAws -Regions
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsCloudAccountRegion&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the S3BucketStateForRecovery operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: S3BucketStateForRecovery
             
             $query = New-RscQueryAws -S3BucketStateForRecovery
             
             # REQUIRED
             $query.Var.bucketName = $someString
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetS3BucketStateForRecoveryReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the S3Buckets operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: S3Buckets
             
             $query = New-RscQueryAws -S3Buckets
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the S3BucketsDetails operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: S3BucketsDetails
             
             $query = New-RscQueryAws -S3BucketsDetails
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # OPTIONAL
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;S3BucketDetails&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SupportedRdsDatabaseInstanceClasses operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: SupportedRdsDatabaseInstanceClasses
             
             $query = New-RscQueryAws -SupportedRdsDatabaseInstanceClasses
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.dbEngine = $someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             # OPTIONAL
             $query.Var.dbEngineVersion = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TrustPolicy operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: TrustPolicy
             
             $query = New-RscQueryAws -TrustPolicy
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudType = $someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             	# REQUIRED
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# REQUIRED
             	awsNativeAccounts = @(
             		@{
             			# OPTIONAL
             			externalId = $someString
             			# REQUIRED
             			id = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsTrustPolicy
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vpcs operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: Vpcs
             
             $query = New-RscQueryAws -Vpcs
             
             # OPTIONAL
             $query.Var.awsAccountRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsVpc&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VpcsByRegion operation
             of the 'AWS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Aws
             # API Operation: VpcsByRegion
             
             $query = New-RscQueryAws -VpcsByRegion
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsVpc&gt;
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAwsNative">
             <summary>
             Create a new RscQuery object for any of the 19
             operations in the 'AWS Native' API domain:
             Account, Accounts, AmiTypeForArchivedSnapshotExport, EbsVolume, EbsVolumes, EbsVolumesByName, Ec2Instance, Ec2Instances, Ec2InstancesByName, IsEbsVolumeSnapshotRestorable, IsRdsInstanceLaunchConfigurationValid, RdsExportDefaults, RdsInstance, RdsInstances, RdsPointInTimeRestoreWindow, Root, S3Bucket, ValidateRdsClusterNameForExport, or ValidateRdsInstanceNameForExport.
             </summary>
             <description>
             New-RscQueryAwsNative creates a new
             query object for operations
             in the 'AWS Native' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 19 operations
             in the 'AWS Native' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Account, Accounts, AmiTypeForArchivedSnapshotExport, EbsVolume, EbsVolumes, EbsVolumesByName, Ec2Instance, Ec2Instances, Ec2InstancesByName, IsEbsVolumeSnapshotRestorable, IsRdsInstanceLaunchConfigurationValid, RdsExportDefaults, RdsInstance, RdsInstances, RdsPointInTimeRestoreWindow, Root, S3Bucket, ValidateRdsClusterNameForExport, or ValidateRdsInstanceNameForExport.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAwsNative -Account).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAwsNative -Account).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Account operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: Account
             
             $query = New-RscQueryAwsNative -Account
             
             # REQUIRED
             $query.Var.awsNativeAccountRubrikId = $someString
             # REQUIRED
             $query.Var.awsNativeProtectionFeature = $someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Accounts operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: Accounts
             
             $query = New-RscQueryAwsNative -Accounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeAccountSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeAccountSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.accountFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	cloudTypeFilter = @{
             		# REQUIRED
             		cloudTypes = @(
             			$someAwsCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudType]) for enum values.
             		)
             	}
             }
             # OPTIONAL
             $query.Var.authorizedOperationFilter = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             # REQUIRED
             $query.Var.awsNativeProtectionFeature = $someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeAccountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AmiTypeForArchivedSnapshotExport operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: AmiTypeForArchivedSnapshotExport
             
             $query = New-RscQueryAwsNative -AmiTypeForArchivedSnapshotExport
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	destinationRegionId = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             	# REQUIRED
             	destinationAwsAccountRubrikId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AmiTypeForAwsNativeArchivedSnapshotExportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EbsVolume operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: EbsVolume
             
             $query = New-RscQueryAwsNative -EbsVolume
             
             # REQUIRED
             $query.Var.ebsVolumeRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEbsVolume
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EbsVolumes operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: EbsVolumes
             
             $query = New-RscQueryAwsNative -EbsVolumes
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeEbsVolumeSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEbsVolumeSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.ebsVolumeFilters = @{
             	# OPTIONAL
             	nameOrIdSubstringFilter = @{
             		# REQUIRED
             		nameOrIdSubstring = $someString
             	}
             	# OPTIONAL
             	fileRecoveryStatusFilter = @{
             		# REQUIRED
             		statuses = @(
             			$someAwsNativeFileRecoveryStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeFileRecoveryStatus]) for enum values.
             		)
             	}
             	# OPTIONAL
             	typeFilter = @{
             		# REQUIRED
             		ebsVolumeTypes = @(
             			$someAwsNativeEbsVolumeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEbsVolumeType]) for enum values.
             		)
             	}
             	# OPTIONAL
             	attachedInstanceFilter = @{
             		# REQUIRED
             		ec2InstanceIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	accountFilter = @{
             		# REQUIRED
             		accountIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	orgFilter = @{
             		# REQUIRED
             		orgIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEbsVolumeConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EbsVolumesByName operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: EbsVolumesByName
             
             $query = New-RscQueryAwsNative -EbsVolumesByName
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeEbsVolumeSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEbsVolumeSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # REQUIRED
             $query.Var.ebsVolumeName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEbsVolumeConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Ec2Instance operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: Ec2Instance
             
             $query = New-RscQueryAwsNative -Ec2Instance
             
             # REQUIRED
             $query.Var.ec2InstanceRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEc2Instance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Ec2Instances operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: Ec2Instances
             
             $query = New-RscQueryAwsNative -Ec2Instances
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeEc2InstanceSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEc2InstanceSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.descendantTypeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.ec2InstanceFilters = @{
             	# OPTIONAL
             	nameOrIdSubstringFilter = @{
             		# REQUIRED
             		nameOrIdSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	accountFilter = @{
             		# REQUIRED
             		accountIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	fileRecoveryStatusFilter = @{
             		# REQUIRED
             		statuses = @(
             			$someAwsNativeFileRecoveryStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeFileRecoveryStatus]) for enum values.
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	typeFilter = @{
             		# REQUIRED
             		ec2InstanceTypes = @(
             			$someAwsNativeEc2InstanceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEc2InstanceType]) for enum values.
             		)
             	}
             	# OPTIONAL
             	vpcFilter = @{
             		# REQUIRED
             		vpcIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	appProtectionStatusFilter = @{
             		# REQUIRED
             		isProtectionSetup = $someBoolean
             	}
             	# OPTIONAL
             	rbsStatusFilter = @{
             		# REQUIRED
             		status = $someCloudInstanceRbsConnectionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudInstanceRbsConnectionStatus]) for enum values.
             	}
             	# OPTIONAL
             	orgFilter = @{
             		# REQUIRED
             		orgIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEc2InstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Ec2InstancesByName operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: Ec2InstancesByName
             
             $query = New-RscQueryAwsNative -Ec2InstancesByName
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeEc2InstanceSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeEc2InstanceSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # REQUIRED
             $query.Var.ec2InstanceName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeEc2InstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsEbsVolumeSnapshotRestorable operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: IsEbsVolumeSnapshotRestorable
             
             $query = New-RscQueryAwsNative -IsEbsVolumeSnapshotRestorable
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: IsVolumeSnapshotRestorableReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsRdsInstanceLaunchConfigurationValid operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: IsRdsInstanceLaunchConfigurationValid
             
             $query = New-RscQueryAwsNative -IsRdsInstanceLaunchConfigurationValid
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.dbEngine = $someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             # REQUIRED
             $query.Var.dbEngineVersion = $someString
             # REQUIRED
             $query.Var.dbClass = $someAwsNativeRdsDbInstanceClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbInstanceClass]) for enum values.
             # OPTIONAL
             $query.Var.databaseInstanceClass = $someString
             # OPTIONAL
             $query.Var.primaryAz = $someString
             # OPTIONAL
             $query.Var.storageType = $someAwsNativeRdsStorageType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsStorageType]) for enum values.
             # REQUIRED
             $query.Var.isMultiAz = $someBoolean
             # OPTIONAL
             $query.Var.kmsKeyId = $someString
             # OPTIONAL
             $query.Var.iops = $someInt
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RdsExportDefaults operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: RdsExportDefaults
             
             $query = New-RscQueryAwsNative -RdsExportDefaults
             
             # REQUIRED
             $query.Var.rdsInstanceRubrikId = $someString
             # OPTIONAL
             $query.Var.snapshotId = $someString
             # REQUIRED
             $query.Var.isPointInTime = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RdsInstanceExportDefaults
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RdsInstance operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: RdsInstance
             
             $query = New-RscQueryAwsNative -RdsInstance
             
             # REQUIRED
             $query.Var.rdsInstanceRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeRdsInstance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RdsInstances operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: RdsInstances
             
             $query = New-RscQueryAwsNative -RdsInstances
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAwsNativeRdsInstanceSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsInstanceSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.rdsInstanceFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	accountFilter = @{
             		# REQUIRED
             		accountIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	vpcFilter = @{
             		# REQUIRED
             		vpcIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	dbEngineFilter = @{
             		# REQUIRED
             		dbEngines = @(
             			$someAwsNativeRdsDbEngine # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbEngine]) for enum values.
             		)
             	}
             	# OPTIONAL
             	dbInstanceClassFilter = @{
             		# REQUIRED
             		dbInstanceClasses = @(
             			$someAwsNativeRdsDbInstanceClass # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRdsDbInstanceClass]) for enum values.
             		)
             	}
             	# OPTIONAL
             	orgFilter = @{
             		# REQUIRED
             		orgIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeRdsInstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RdsPointInTimeRestoreWindow operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: RdsPointInTimeRestoreWindow
             
             $query = New-RscQueryAwsNative -RdsPointInTimeRestoreWindow
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.rdsInstanceName = $someString
             # OPTIONAL
             $query.Var.rdsDatabaseRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeRdsPointInTimeRestoreWindow
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Root operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: Root
             
             $query = New-RscQueryAwsNative -Root
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeRoot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the S3Bucket operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: S3Bucket
             
             $query = New-RscQueryAwsNative -S3Bucket
             
             # REQUIRED
             $query.Var.s3BucketRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AwsNativeS3Bucket
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateRdsClusterNameForExport operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: ValidateRdsClusterNameForExport
             
             $query = New-RscQueryAwsNative -ValidateRdsClusterNameForExport
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.rdsClusterName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAwsNativeRdsClusterNameForExportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateRdsInstanceNameForExport operation
             of the 'AWS Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AwsNative
             # API Operation: ValidateRdsInstanceNameForExport
             
             $query = New-RscQueryAwsNative -ValidateRdsInstanceNameForExport
             
             # REQUIRED
             $query.Var.awsAccountRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.rdsInstanceName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAwsNativeRdsInstanceNameForExportReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAzure">
             <summary>
             Create a new RscQuery object for any of the 44
             operations in the 'Azure' API domain:
             AdDirectories, AdDirectory, AdObjectsByType, ArmTemplatesByFeature, CdmVersions, CheckPersistentStorageSubscriptionCanUnmap, CloudAccountMissingPermissions, CloudAccountPermissionConfig, CloudAccountSubnetsByRegion, CloudAccountSubscriptionWithFeatures, CloudAccountSubscriptionsByFeature, CloudAccountTenant, CloudAccountTenantWithExoConfigs, CloudAccountTenants, DiskEncryptionSetsByRegion, EncryptionKeys, ExocomputeConfigsInAccount, HasRelicAdSnapshot, HostedAzureRegions, IsStorageAccountNameAvailable, KeyVaultsByRegion, ManagedIdentities, Nsgs, Regions, ResourceGroups, SearchAdSnapshot, SqlDatabase, SqlDatabaseDbPointInTimeRestoreWindowFromAzure, SqlDatabaseServer, SqlDatabaseServerElasticPools, SqlDatabaseServers, SqlDatabases, SqlManagedInstanceDatabase, SqlManagedInstanceDatabases, SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure, SqlManagedInstanceServer, SqlManagedInstanceServers, StorageAccounts, StorageAccountsByRegion, Subnets, SubscriptionWithExocomputeMappings, Subscriptions, VNets, or ValidateCloudAccountExocomputeConfigurations.
             </summary>
             <description>
             New-RscQueryAzure creates a new
             query object for operations
             in the 'Azure' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 44 operations
             in the 'Azure' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AdDirectories, AdDirectory, AdObjectsByType, ArmTemplatesByFeature, CdmVersions, CheckPersistentStorageSubscriptionCanUnmap, CloudAccountMissingPermissions, CloudAccountPermissionConfig, CloudAccountSubnetsByRegion, CloudAccountSubscriptionWithFeatures, CloudAccountSubscriptionsByFeature, CloudAccountTenant, CloudAccountTenantWithExoConfigs, CloudAccountTenants, DiskEncryptionSetsByRegion, EncryptionKeys, ExocomputeConfigsInAccount, HasRelicAdSnapshot, HostedAzureRegions, IsStorageAccountNameAvailable, KeyVaultsByRegion, ManagedIdentities, Nsgs, Regions, ResourceGroups, SearchAdSnapshot, SqlDatabase, SqlDatabaseDbPointInTimeRestoreWindowFromAzure, SqlDatabaseServer, SqlDatabaseServerElasticPools, SqlDatabaseServers, SqlDatabases, SqlManagedInstanceDatabase, SqlManagedInstanceDatabases, SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure, SqlManagedInstanceServer, SqlManagedInstanceServers, StorageAccounts, StorageAccountsByRegion, Subnets, SubscriptionWithExocomputeMappings, Subscriptions, VNets, or ValidateCloudAccountExocomputeConfigurations.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzure -AdDirectories).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzure -AdDirectories).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AdDirectories operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AdDirectories
             
             $query = New-RscQueryAzure -AdDirectories
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureAdDirectoryConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AdDirectory operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AdDirectory
             
             $query = New-RscQueryAzure -AdDirectory
             
             # REQUIRED
             $query.Var.workloadFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureAdDirectory
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AdObjectsByType operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: AdObjectsByType
             
             $query = New-RscQueryAzure -AdObjectsByType
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortByOption = @(
             	$someAzureAdObjectSearchType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectSearchType]) for enum values.
             )
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	workloadFid = $someString
             	# REQUIRED
             	azureAdObjectType = $someAzureAdObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureAdObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ArmTemplatesByFeature operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ArmTemplatesByFeature
             
             $query = New-RscQueryAzure -ArmTemplatesByFeature
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	customerTenantDomainName = $someString
             	# OPTIONAL
             	features = @(
             		$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             	)
             	# REQUIRED
             	operationType = $someCloudAccountOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountOperation]) for enum values.
             	# REQUIRED
             	cloudType = $someAzureCloudType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudType]) for enum values.
             	# OPTIONAL
             	featuresToInclude = @(
             		@{
             			# OPTIONAL
             			permissionsGroups = @(
             				$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             			)
             			# REQUIRED
             			featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureArmTemplateByFeature&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmVersions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CdmVersions
             
             $query = New-RscQueryAzure -CdmVersions
             
             # REQUIRED
             $query.Var.cdmVersionRequest = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	location = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureCdmVersion&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckPersistentStorageSubscriptionCanUnmap operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CheckPersistentStorageSubscriptionCanUnmap
             
             $query = New-RscQueryAzure -CheckPersistentStorageSubscriptionCanUnmap
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.unmappingValidationType = $someUnmappingValidationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmappingValidationType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CheckAzurePersistentStorageSubscriptionCanUnmapReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountMissingPermissions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountMissingPermissions
             
             $query = New-RscQueryAzure -CloudAccountMissingPermissions
             
             # REQUIRED
             $query.Var.sessionId = $someString
             # REQUIRED
             $query.Var.subscriptionIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.cloudAccountAction = $someCloudAccountAction # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountAction]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureSubscriptionMissingPermissions&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountPermissionConfig operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountPermissionConfig
             
             $query = New-RscQueryAzure -CloudAccountPermissionConfig
             
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureCloudAccountPermissionConfigResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountSubnetsByRegion operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountSubnetsByRegion
             
             $query = New-RscQueryAzure -CloudAccountSubnetsByRegion
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeSubnet&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountSubscriptionWithFeatures operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountSubscriptionWithFeatures
             
             $query = New-RscQueryAzure -CloudAccountSubscriptionWithFeatures
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureCloudAccountSubscriptionWithFeatures
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountSubscriptionsByFeature operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountSubscriptionsByFeature
             
             $query = New-RscQueryAzure -CloudAccountSubscriptionsByFeature
             
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.subscriptionStatusFilters = @(
             	$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureSubscriptionWithFeaturesType&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountTenant operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountTenant
             
             $query = New-RscQueryAzure -CloudAccountTenant
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.subscriptionStatusFilters = @(
             	$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             )
             # REQUIRED
             $query.Var.subscriptionSearchText = $someString
             # OPTIONAL
             $query.Var.subscriptionIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureCloudAccountTenant
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountTenantWithExoConfigs operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountTenantWithExoConfigs
             
             $query = New-RscQueryAzure -CloudAccountTenantWithExoConfigs
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.subscriptionStatusFilters = @(
             	$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             )
             # REQUIRED
             $query.Var.subscriptionSearchText = $someString
             # OPTIONAL
             $query.Var.subscriptionIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureCloudAccountTenantWithExoConfigs
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountTenants operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: CloudAccountTenants
             
             $query = New-RscQueryAzure -CloudAccountTenants
             
             # OPTIONAL
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.includeSubscriptionDetails = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureCloudAccountTenant&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DiskEncryptionSetsByRegion operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: DiskEncryptionSetsByRegion
             
             $query = New-RscQueryAzure -DiskEncryptionSetsByRegion
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeDiskEncryptionSet&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EncryptionKeys operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: EncryptionKeys
             
             $query = New-RscQueryAzure -EncryptionKeys
             
             # REQUIRED
             $query.Var.azureEncryptionKeysInput = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	keyVaultName = $someString
             	# REQUIRED
             	resourceGroupName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureEncryptionKey&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExocomputeConfigsInAccount operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ExocomputeConfigsInAccount
             
             $query = New-RscQueryAzure -ExocomputeConfigsInAccount
             
             # OPTIONAL
             $query.Var.azureExocomputeSearchQuery = $someString
             # OPTIONAL
             $query.Var.cloudAccountIDs = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureExocomputeConfigsInAccount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HasRelicAdSnapshot operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: HasRelicAdSnapshot
             
             $query = New-RscQueryAzure -HasRelicAdSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	domainName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HasRelicAzureAdSnapshotReplyType
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostedAzureRegions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: HostedAzureRegions
             
             $query = New-RscQueryAzure -HostedAzureRegions
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureRegionsResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsStorageAccountNameAvailable operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: IsStorageAccountNameAvailable
             
             $query = New-RscQueryAzure -IsStorageAccountNameAvailable
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.storageAccountName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the KeyVaultsByRegion operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: KeyVaultsByRegion
             
             $query = New-RscQueryAzure -KeyVaultsByRegion
             
             # REQUIRED
             $query.Var.azureKeyVaultsInput = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	region = $someAzureRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureRegion]) for enum values.
             	# OPTIONAL
             	userAssignedManagedIdentityPrincipalId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureKeyVault&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedIdentities operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ManagedIdentities
             
             $query = New-RscQueryAzure -ManagedIdentities
             
             # REQUIRED
             $query.Var.managedIdentitiesRequest = @{
             	# REQUIRED
             	cloudAccountId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureManagedIdentity&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Nsgs operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: Nsgs
             
             $query = New-RscQueryAzure -Nsgs
             
             # REQUIRED
             $query.Var.nsgRequest = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	resourceGroup = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Regions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: Regions
             
             $query = New-RscQueryAzure -Regions
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RegionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResourceGroups operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ResourceGroups
             
             $query = New-RscQueryAzure -ResourceGroups
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.azureSubscriptionNativeId = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureResourceGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SearchAdSnapshot operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SearchAdSnapshot
             
             $query = New-RscQueryAzure -SearchAdSnapshot
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             	# REQUIRED
             	azureAdSearchKeyword = $someString
             	# REQUIRED
             	workloadFid = $someString
             	# REQUIRED
             	azureAdObjectType = $someAzureAdObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectType]) for enum values.
             	# REQUIRED
             	azureAdSearchKeywordType = $someAzureAdObjectSearchType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureAdObjectSearchType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureAdObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabase operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabase
             
             $query = New-RscQueryAzure -SqlDatabase
             
             # REQUIRED
             $query.Var.azureSqlDatabaseRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlDatabaseDb
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabaseDbPointInTimeRestoreWindowFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabaseDbPointInTimeRestoreWindowFromAzure
             
             $query = New-RscQueryAzure -SqlDatabaseDbPointInTimeRestoreWindowFromAzure
             
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseServerName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeSqlDatabasePointInTimeRestoreWindow
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabaseServer operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabaseServer
             
             $query = New-RscQueryAzure -SqlDatabaseServer
             
             # REQUIRED
             $query.Var.azureSqlDatabaseServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlDatabaseServer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabaseServerElasticPools operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabaseServerElasticPools
             
             $query = New-RscQueryAzure -SqlDatabaseServerElasticPools
             
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseServerName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureSqlDatabaseServerElasticPool&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabaseServers operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabaseServers
             
             $query = New-RscQueryAzure -SqlDatabaseServers
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureSqlDatabaseServerSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlDatabaseServerSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.azureSqlDatabaseServerFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlDatabaseServerConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlDatabases operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlDatabases
             
             $query = New-RscQueryAzure -SqlDatabases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureSqlDatabaseSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlDatabaseSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.azureSqlDatabaseFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	serverFilter = @{
             		# REQUIRED
             		serverNames = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlDatabaseDbConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceDatabase operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceDatabase
             
             $query = New-RscQueryAzure -SqlManagedInstanceDatabase
             
             # REQUIRED
             $query.Var.azureSqlManagedInstanceDatabaseRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlManagedInstanceDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceDatabases operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceDatabases
             
             $query = New-RscQueryAzure -SqlManagedInstanceDatabases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureSqlManagedInstanceDatabaseSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlManagedInstanceDatabaseSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.azureSqlManagedInstanceDatabaseFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	serverFilter = @{
             		# REQUIRED
             		serverNames = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlManagedInstanceDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure
             
             $query = New-RscQueryAzure -SqlManagedInstanceDbPointInTimeRestoreWindowFromAzure
             
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.azureSqlManagedInstanceName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeSqlDatabasePointInTimeRestoreWindow
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceServer operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceServer
             
             $query = New-RscQueryAzure -SqlManagedInstanceServer
             
             # REQUIRED
             $query.Var.azureSqlManagedInstanceServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlManagedInstanceServer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlManagedInstanceServers operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SqlManagedInstanceServers
             
             $query = New-RscQueryAzure -SqlManagedInstanceServers
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureSqlManagedInstanceServerSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureSqlManagedInstanceServerSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.azureSqlManagedInstanceServerFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSqlManagedInstanceServerConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StorageAccounts operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StorageAccounts
             
             $query = New-RscQueryAzure -StorageAccounts
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.regionName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: StorageAccountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StorageAccountsByRegion operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: StorageAccountsByRegion
             
             $query = New-RscQueryAzure -StorageAccountsByRegion
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	region = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureStorageAccountCcprovision&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Subnets operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: Subnets
             
             $query = New-RscQueryAzure -Subnets
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.vNetId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SubnetConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SubscriptionWithExocomputeMappings operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: SubscriptionWithExocomputeMappings
             
             $query = New-RscQueryAzure -SubscriptionWithExocomputeMappings
             
             # OPTIONAL
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             # OPTIONAL
             $query.Var.exocomputeSubscriptionIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureSubscriptionWithExocomputeMapping&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Subscriptions operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: Subscriptions
             
             $query = New-RscQueryAzure -Subscriptions
             
             # REQUIRED
             $query.Var.tenantId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureSubscriptionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VNets operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: VNets
             
             $query = New-RscQueryAzure -VNets
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.regionName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VnetConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateCloudAccountExocomputeConfigurations operation
             of the 'Azure' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Azure
             # API Operation: ValidateCloudAccountExocomputeConfigurations
             
             $query = New-RscQueryAzure -ValidateCloudAccountExocomputeConfigurations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	cloudAccountId = $someString
             	# REQUIRED
             	azureExocomputeRegionConfigs = @(
             		@{
             			# REQUIRED
             			region = $someAzureCloudAccountRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureCloudAccountRegion]) for enum values.
             			# REQUIRED
             			subnetNativeId = $someString
             			# REQUIRED
             			isRscManaged = $someBoolean
             			# OPTIONAL
             			podSubnetNativeId = $someString
             			# OPTIONAL
             			podOverlayNetworkCidr = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAzureSubnetsForCloudAccountExocomputeReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAzureNative">
             <summary>
             Create a new RscQuery object for any of the 23
             operations in the 'Azure Native' API domain:
             AvailabilitySetsByRegionFromAzure, DoesResourceGroupExist, ExportCompatibleDiskTypesByRegionFromAzure, ExportCompatibleVmSizesByRegionFromAzure, IsManagedDiskSnapshotRestorable, IsSqlDatabaseSnapshotPersistent, ManagedDisk, ManagedDisks, ResourceGroup, ResourceGroups, ResourceGroupsInfoIfExist, Root, SecurityGroupsByRegionFromAzure, StorageAccountsFromAzure, SubnetsByRegionFromAzure, Subscription, Subscriptions, ValidateSqlDatabaseDbNameForExport, ValidateSqlManagedInstanceDbNameForExport, VirtualMachine, VirtualMachineSizes, VirtualMachines, or VirtualNetworks.
             </summary>
             <description>
             New-RscQueryAzureNative creates a new
             query object for operations
             in the 'Azure Native' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 23 operations
             in the 'Azure Native' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AvailabilitySetsByRegionFromAzure, DoesResourceGroupExist, ExportCompatibleDiskTypesByRegionFromAzure, ExportCompatibleVmSizesByRegionFromAzure, IsManagedDiskSnapshotRestorable, IsSqlDatabaseSnapshotPersistent, ManagedDisk, ManagedDisks, ResourceGroup, ResourceGroups, ResourceGroupsInfoIfExist, Root, SecurityGroupsByRegionFromAzure, StorageAccountsFromAzure, SubnetsByRegionFromAzure, Subscription, Subscriptions, ValidateSqlDatabaseDbNameForExport, ValidateSqlManagedInstanceDbNameForExport, VirtualMachine, VirtualMachineSizes, VirtualMachines, or VirtualNetworks.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzureNative -AvailabilitySetsByRegionFromAzure).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzureNative -AvailabilitySetsByRegionFromAzure).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AvailabilitySetsByRegionFromAzure operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: AvailabilitySetsByRegionFromAzure
             
             $query = New-RscQueryAzureNative -AvailabilitySetsByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeAvailabilitySet&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DoesResourceGroupExist operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: DoesResourceGroupExist
             
             $query = New-RscQueryAzureNative -DoesResourceGroupExist
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.azureSubscriptionNativeId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportCompatibleDiskTypesByRegionFromAzure operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ExportCompatibleDiskTypesByRegionFromAzure
             
             $query = New-RscQueryAzureNative -ExportCompatibleDiskTypesByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeExportCompatibleDiskTypes&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExportCompatibleVmSizesByRegionFromAzure operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ExportCompatibleVmSizesByRegionFromAzure
             
             $query = New-RscQueryAzureNative -ExportCompatibleVmSizesByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.vmSnapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeExportCompatibleVmSizes&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsManagedDiskSnapshotRestorable operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: IsManagedDiskSnapshotRestorable
             
             $query = New-RscQueryAzureNative -IsManagedDiskSnapshotRestorable
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.diskSnapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsSqlDatabaseSnapshotPersistent operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: IsSqlDatabaseSnapshotPersistent
             
             $query = New-RscQueryAzureNative -IsSqlDatabaseSnapshotPersistent
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedDisk operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ManagedDisk
             
             $query = New-RscQueryAzureNative -ManagedDisk
             
             # REQUIRED
             $query.Var.azureManagedDiskRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeManagedDisk
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedDisks operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ManagedDisks
             
             $query = New-RscQueryAzureNative -ManagedDisks
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureNativeDiskSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeDiskSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.diskFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	diskTypeFilter = @{
             		# REQUIRED
             		diskTypes = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	attachedVmFilter = @{
             		# REQUIRED
             		virtualMachineIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	exocomputeConnectedFilter = @{
             		# REQUIRED
             		isConnected = $someBoolean
             	}
             	# OPTIONAL
             	fileIndexingFilter = @{
             		# REQUIRED
             		statuses = @(
             			$someAzureNativeFileIndexingStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeFileIndexingStatus]) for enum values.
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeManagedDiskConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResourceGroup operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ResourceGroup
             
             $query = New-RscQueryAzureNative -ResourceGroup
             
             # REQUIRED
             $query.Var.resourceGroupId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeResourceGroup
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResourceGroups operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ResourceGroups
             
             $query = New-RscQueryAzureNative -ResourceGroups
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureNativeCommonResourceGroupSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeCommonResourceGroupSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.commonResourceGroupFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             }
             # OPTIONAL
             $query.Var.protectedObjectTypes = @(
             	$someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             )
             # OPTIONAL
             $query.Var.azureNativeProtectionFeatures = @(
             	$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeResourceGroupConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResourceGroupsInfoIfExist operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ResourceGroupsInfoIfExist
             
             $query = New-RscQueryAzureNative -ResourceGroupsInfoIfExist
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	sessionId = $someString
             	# REQUIRED
             	resourceGroupInputs = @(
             		@{
             			# REQUIRED
             			subscriptionNativeId = $someString
             			# REQUIRED
             			resourceGroupName = $someString
             		}
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureResourceGroupInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Root operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: Root
             
             $query = New-RscQueryAzureNative -Root
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeRoot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SecurityGroupsByRegionFromAzure operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: SecurityGroupsByRegionFromAzure
             
             $query = New-RscQueryAzureNative -SecurityGroupsByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeSecurityGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StorageAccountsFromAzure operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: StorageAccountsFromAzure
             
             $query = New-RscQueryAzureNative -StorageAccountsFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeStorageAccount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SubnetsByRegionFromAzure operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: SubnetsByRegionFromAzure
             
             $query = New-RscQueryAzureNative -SubnetsByRegionFromAzure
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeSubnet&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Subscription operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: Subscription
             
             $query = New-RscQueryAzureNative -Subscription
             
             # REQUIRED
             $query.Var.azureSubscriptionRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeSubscription
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Subscriptions operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: Subscriptions
             
             $query = New-RscQueryAzureNative -Subscriptions
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureNativeSubscriptionSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeSubscriptionSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.subscriptionFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             }
             # OPTIONAL
             $query.Var.authorizedOperationFilter = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             # OPTIONAL
             $query.Var.workloadHierarchy = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             # OPTIONAL
             $query.Var.azureNativeProtectionFeature = $someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeSubscriptionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateSqlDatabaseDbNameForExport operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ValidateSqlDatabaseDbNameForExport
             
             $query = New-RscQueryAzureNative -ValidateSqlDatabaseDbNameForExport
             
             # REQUIRED
             $query.Var.azureSqlDatabaseName = $someString
             # REQUIRED
             $query.Var.azureSqlDatabaseServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAzureNativeSqlDatabaseDbNameForExportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateSqlManagedInstanceDbNameForExport operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: ValidateSqlManagedInstanceDbNameForExport
             
             $query = New-RscQueryAzureNative -ValidateSqlManagedInstanceDbNameForExport
             
             # REQUIRED
             $query.Var.azureSqlDatabaseName = $someString
             # REQUIRED
             $query.Var.azureSqlManagedInstanceServerRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateAzureNativeSqlManagedInstanceDbNameForExportReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachine operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: VirtualMachine
             
             $query = New-RscQueryAzureNative -VirtualMachine
             
             # REQUIRED
             $query.Var.azureVirtualMachineRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeVirtualMachine
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachineSizes operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: VirtualMachineSizes
             
             $query = New-RscQueryAzureNative -VirtualMachineSizes
             
             # OPTIONAL
             $query.Var.azureSubscriptionRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachines operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: VirtualMachines
             
             $query = New-RscQueryAzureNative -VirtualMachines
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someAzureNativeVirtualMachineSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeVirtualMachineSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.descendantTypeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.virtualMachineFilters = @{
             	# OPTIONAL
             	nameSubstringFilter = @{
             		# REQUIRED
             		nameSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	resourceGroupFilter = @{
             		# REQUIRED
             		resourceGroupNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	subscriptionFilter = @{
             		# REQUIRED
             		subscriptionIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		)
             	}
             	# OPTIONAL
             	vmSizeFilter = @{
             		# REQUIRED
             		vmSizes = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	vnetFilter = @{
             		# REQUIRED
             		vnetNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	tagFilter = @{
             		# REQUIRED
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	exocomputeConnectedFilter = @{
             		# REQUIRED
             		isConnected = $someBoolean
             	}
             	# OPTIONAL
             	fileIndexingFilter = @{
             		# REQUIRED
             		statuses = @(
             			$someAzureNativeFileIndexingStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeFileIndexingStatus]) for enum values.
             		)
             	}
             	# OPTIONAL
             	appProtectionStatusFilter = @{
             		# REQUIRED
             		isProtectionSetup = $someBoolean
             	}
             	# OPTIONAL
             	rbsStatusFilter = @{
             		# REQUIRED
             		status = $someCloudInstanceRbsConnectionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudInstanceRbsConnectionStatus]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNativeVirtualMachineConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualNetworks operation
             of the 'Azure Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureNative
             # API Operation: VirtualNetworks
             
             $query = New-RscQueryAzureNative -VirtualNetworks
             
             # OPTIONAL
             $query.Var.azureSubscriptionRubrikId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AzureNativeVirtualNetwork&gt;
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryAzureO365">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'Azure Office365' API domain:
             CheckNSGOutboundRules, CheckNetworkSubnet, CheckResourceGroupName, CheckStorageAccountAccessibility, CheckStorageAccountName, CheckSubscriptionQuota, CheckVirtualNetworkName, Exocompute, GetAzureHostType, GetNetworkSubnetUnusedAddr, or ValidateUserRoles.
             </summary>
             <description>
             New-RscQueryAzureO365 creates a new
             query object for operations
             in the 'Azure Office365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'Azure Office365' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CheckNSGOutboundRules, CheckNetworkSubnet, CheckResourceGroupName, CheckStorageAccountAccessibility, CheckStorageAccountName, CheckSubscriptionQuota, CheckVirtualNetworkName, Exocompute, GetAzureHostType, GetNetworkSubnetUnusedAddr, or ValidateUserRoles.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzureO365 -CheckNSGOutboundRules).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryAzureO365 -CheckNSGOutboundRules).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CheckNSGOutboundRules operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckNSGOutboundRules
             
             $query = New-RscQueryAzureO365 -CheckNSGOutboundRules
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.vnet_name = $someString
             # REQUIRED
             $query.Var.subnet_name = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNetworkSecurityGroupResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckNetworkSubnet operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckNetworkSubnet
             
             $query = New-RscQueryAzureO365 -CheckNetworkSubnet
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.vnet_name = $someString
             # REQUIRED
             $query.Var.subnet_name = $someString
             # REQUIRED
             $query.Var.strict_addr_check = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNetworkSubnetResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckResourceGroupName operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckResourceGroupName
             
             $query = New-RscQueryAzureO365 -CheckResourceGroupName
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.groupName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckStorageAccountAccessibility operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckStorageAccountAccessibility
             
             $query = New-RscQueryAzureO365 -CheckStorageAccountAccessibility
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.storage_account_name = $someString
             # REQUIRED
             $query.Var.groupName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckStorageAccountName operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckStorageAccountName
             
             $query = New-RscQueryAzureO365 -CheckStorageAccountName
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.storage_account_name = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckSubscriptionQuota operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckSubscriptionQuota
             
             $query = New-RscQueryAzureO365 -CheckSubscriptionQuota
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.regionName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckVirtualNetworkName operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: CheckVirtualNetworkName
             
             $query = New-RscQueryAzureO365 -CheckVirtualNetworkName
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.groupName = $someString
             # REQUIRED
             $query.Var.vnet_name = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureResourceAvailabilityResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Exocompute operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: Exocompute
             
             $query = New-RscQueryAzureO365 -Exocompute
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.exocomputeClusterId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetAzureO365ExocomputeResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetAzureHostType operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: GetAzureHostType
             
             $query = New-RscQueryAzureO365 -GetAzureHostType
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetAzureHostTypeResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetNetworkSubnetUnusedAddr operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: GetNetworkSubnetUnusedAddr
             
             $query = New-RscQueryAzureO365 -GetNetworkSubnetUnusedAddr
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             # REQUIRED
             $query.Var.resourceGroupName = $someString
             # REQUIRED
             $query.Var.vnet_name = $someString
             # REQUIRED
             $query.Var.subnet_name = $someString
             # REQUIRED
             $query.Var.strict_addr_check = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureNetworkSubnetUnusedAddrResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateUserRoles operation
             of the 'Azure Office365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    AzureO365
             # API Operation: ValidateUserRoles
             
             $query = New-RscQueryAzureO365 -ValidateUserRoles
             
             # REQUIRED
             $query.Var.tenantId = $someString
             # REQUIRED
             $query.Var.subscriptionId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AzureUserRoleResp
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryCassandra">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Cassandra' API domain:
             ColumnFamilies, ColumnFamily, ColumnFamilyRecoverableRange, ColumnFamilySchema, Keyspace, Keyspaces, Source, or Sources.
             </summary>
             <description>
             New-RscQueryCassandra creates a new
             query object for operations
             in the 'Cassandra' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Cassandra' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ColumnFamilies, ColumnFamily, ColumnFamilyRecoverableRange, ColumnFamilySchema, Keyspace, Keyspaces, Source, or Sources.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCassandra -ColumnFamilies).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCassandra -ColumnFamilies).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ColumnFamilies operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: ColumnFamilies
             
             $query = New-RscQueryCassandra -ColumnFamilies
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraColumnFamilyConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ColumnFamily operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: ColumnFamily
             
             $query = New-RscQueryCassandra -ColumnFamily
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraColumnFamily
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ColumnFamilyRecoverableRange operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: ColumnFamilyRecoverableRange
             
             $query = New-RscQueryCassandra -ColumnFamilyRecoverableRange
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryRangeRequestData = @{
             		# OPTIONAL
             		sourceType = $someMosaicRecoverableRangeRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicRecoverableRangeRequestSourceType]) for enum values.
             		# REQUIRED
             		databaseName = $someString
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		tableName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetMosaicRecoverableRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ColumnFamilySchema operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: ColumnFamilySchema
             
             $query = New-RscQueryCassandra -ColumnFamilySchema
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	schemaRequestData = @{
             		# REQUIRED
             		databaseName = $someString
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		tableName = $someString
             		# REQUIRED
             		versionTimestamp = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetSchemaResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Keyspace operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: Keyspace
             
             $query = New-RscQueryCassandra -Keyspace
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraKeyspace
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Keyspaces operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: Keyspaces
             
             $query = New-RscQueryCassandra -Keyspaces
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraKeyspaceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Source operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: Source
             
             $query = New-RscQueryCassandra -Source
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraSource
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Sources operation
             of the 'Cassandra' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cassandra
             # API Operation: Sources
             
             $query = New-RscQueryCassandra -Sources
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CassandraSourceConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryCertificate">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'Certificates' API domain:
             AssignableGlobalCertificates, Certificates, CertificatesWithKey, ClusterCertificates, ClusterCsr, ClusterWebSigned, GlobalCertificate, GlobalCertificates, Info, SigningRequest, or SigningRequests.
             </summary>
             <description>
             New-RscQueryCertificate creates a new
             query object for operations
             in the 'Certificates' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'Certificates' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AssignableGlobalCertificates, Certificates, CertificatesWithKey, ClusterCertificates, ClusterCsr, ClusterWebSigned, GlobalCertificate, GlobalCertificates, Info, SigningRequest, or SigningRequests.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCertificate -AssignableGlobalCertificates).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCertificate -AssignableGlobalCertificates).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AssignableGlobalCertificates operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: AssignableGlobalCertificates
             
             $query = New-RscQueryCertificate -AssignableGlobalCertificates
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someGlobalCertificateSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalCertificateSortBy]) for enum values.
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	searchText = $someString
             	# OPTIONAL
             	hasKey = $someBoolean
             	# OPTIONAL
             	statuses = @(
             		$someGlobalCertificateStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalCertificateStatus]) for enum values.
             	)
             	# OPTIONAL
             	clusterIds = @(
             		$someString
             	)
             	# OPTIONAL
             	isTrustedAny = $someBoolean
             	# OPTIONAL
             	isRscBorn = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalCertificateConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Certificates operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: Certificates
             
             $query = New-RscQueryCertificate -Certificates
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someCertMgmtSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CertMgmtSortBy]) for enum values.
             # OPTIONAL
             $query.Var.searchTerm = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CertificateConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CertificatesWithKey operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: CertificatesWithKey
             
             $query = New-RscQueryCertificate -CertificatesWithKey
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CertificateConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterCertificates operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: ClusterCertificates
             
             $query = New-RscQueryCertificate -ClusterCertificates
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	description = $someString
             	# OPTIONAL
             	expiration = $someString
             	# OPTIONAL
             	hasKey = $someBoolean
             	# OPTIONAL
             	includeExpired = $someBoolean
             	# OPTIONAL
             	isTrusted = $someBoolean
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	sortBy = $someV1QueryCertificatesRequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryCertificatesRequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someV1QueryCertificatesRequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryCertificatesRequestSortOrder]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CertificateSummaryListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterCsr operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: ClusterCsr
             
             $query = New-RscQueryCertificate -ClusterCsr
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterCsr
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterWebSigned operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: ClusterWebSigned
             
             $query = New-RscQueryCertificate -ClusterWebSigned
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterWebSignedCertificateReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalCertificate operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: GlobalCertificate
             
             $query = New-RscQueryCertificate -GlobalCertificate
             
             # REQUIRED
             $query.Var.certificateId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalCertificate
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalCertificates operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: GlobalCertificates
             
             $query = New-RscQueryCertificate -GlobalCertificates
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someGlobalCertificateSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalCertificateSortBy]) for enum values.
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	searchText = $someString
             	# OPTIONAL
             	hasKey = $someBoolean
             	# OPTIONAL
             	statuses = @(
             		$someGlobalCertificateStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalCertificateStatus]) for enum values.
             	)
             	# OPTIONAL
             	clusterIds = @(
             		$someString
             	)
             	# OPTIONAL
             	isTrustedAny = $someBoolean
             	# OPTIONAL
             	isRscBorn = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalCertificateConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Info operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: Info
             
             $query = New-RscQueryCertificate -Info
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	certificatePem = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetCertificateInfoReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SigningRequest operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: SigningRequest
             
             $query = New-RscQueryCertificate -SigningRequest
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	csrFid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Csr
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SigningRequests operation
             of the 'Certificates' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Certificate
             # API Operation: SigningRequests
             
             $query = New-RscQueryCertificate -SigningRequests
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someCertMgmtSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CertMgmtSortBy]) for enum values.
             # OPTIONAL
             $query.Var.searchTerm = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CsrConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryCloudAccount">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Cloud Account' API domain:
             CloudAccount, CloudAccounts, CurrentFeaturePermissions, ExocomputeMappings, LatestFeaturePermissions, or WithExocomputeMappings.
             </summary>
             <description>
             New-RscQueryCloudAccount creates a new
             query object for operations
             in the 'Cloud Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Cloud Account' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CloudAccount, CloudAccounts, CurrentFeaturePermissions, ExocomputeMappings, LatestFeaturePermissions, or WithExocomputeMappings.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCloudAccount -CloudAccount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCloudAccount -CloudAccount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CloudAccount operation
             of the 'Cloud Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudAccount
             # API Operation: CloudAccount
             
             $query = New-RscQueryCloudAccount -CloudAccount
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudAccount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccounts operation
             of the 'Cloud Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudAccount
             # API Operation: CloudAccounts
             
             $query = New-RscQueryCloudAccount -CloudAccounts
             
             # OPTIONAL
             $query.Var.sortBy = $someCloudAccountSortByFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountSortByFieldEnum]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someCloudAccountFilterFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFilterFieldEnum]) for enum values.
             		# OPTIONAL
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CloudAccount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CurrentFeaturePermissions operation
             of the 'Cloud Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudAccount
             # API Operation: CurrentFeaturePermissions
             
             $query = New-RscQueryCloudAccount -CurrentFeaturePermissions
             
             # REQUIRED
             $query.Var.cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             # REQUIRED
             $query.Var.cloudAccountIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CloudAccountFeaturePermission&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExocomputeMappings operation
             of the 'Cloud Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudAccount
             # API Operation: ExocomputeMappings
             
             $query = New-RscQueryCloudAccount -ExocomputeMappings
             
             # REQUIRED
             $query.Var.cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             # REQUIRED
             $query.Var.exocomputeAccountIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CloudAccountsExocomputeAccountMapping&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LatestFeaturePermissions operation
             of the 'Cloud Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudAccount
             # API Operation: LatestFeaturePermissions
             
             $query = New-RscQueryCloudAccount -LatestFeaturePermissions
             
             # REQUIRED
             $query.Var.cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             # REQUIRED
             $query.Var.cloudAccountIds = @(
             	$someString
             )
             # REQUIRED
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             # REQUIRED
             $query.Var.featuresWithPermissionsGroups = @(
             	@{
             		# OPTIONAL
             		featureType = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             		# OPTIONAL
             		permissionsGroups = @(
             			$somePermissionsGroup # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PermissionsGroup]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CloudAccountFeaturePermission&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WithExocomputeMappings operation
             of the 'Cloud Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudAccount
             # API Operation: WithExocomputeMappings
             
             $query = New-RscQueryCloudAccount -WithExocomputeMappings
             
             # REQUIRED
             $query.Var.cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             # REQUIRED
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             # REQUIRED
             $query.Var.exocomputeAccountIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CloudAccountWithExocomputeMapping&gt;
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryCloudNative">
             <summary>
             Create a new RscQuery object for any of the 19
             operations in the 'Cloud Native' API domain:
             CheckArchivedSnapshotsLocked, CheckLabelRuleNameUniqueness, CheckRequiredPermissionsForFeature, CheckTagRuleNameUniqueness, CustomerTags, FileRecoveryEligibleSnapshots, IsFileRecoveryFeasible, LabelKeys, LabelRules, LabelValues, RbaInstallers, SnapshotDetailsForRecovery, SnapshotTypeDetails, Snapshots, SqlServerSetupScript, TagKeys, TagRules, TagValues, or WorkloadVersionedFiles.
             </summary>
             <description>
             New-RscQueryCloudNative creates a new
             query object for operations
             in the 'Cloud Native' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 19 operations
             in the 'Cloud Native' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CheckArchivedSnapshotsLocked, CheckLabelRuleNameUniqueness, CheckRequiredPermissionsForFeature, CheckTagRuleNameUniqueness, CustomerTags, FileRecoveryEligibleSnapshots, IsFileRecoveryFeasible, LabelKeys, LabelRules, LabelValues, RbaInstallers, SnapshotDetailsForRecovery, SnapshotTypeDetails, Snapshots, SqlServerSetupScript, TagKeys, TagRules, TagValues, or WorkloadVersionedFiles.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCloudNative -CheckArchivedSnapshotsLocked).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCloudNative -CheckArchivedSnapshotsLocked).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CheckArchivedSnapshotsLocked operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: CheckArchivedSnapshotsLocked
             
             $query = New-RscQueryCloudNative -CheckArchivedSnapshotsLocked
             
             # REQUIRED
             $query.Var.workloadId = $someString
             # OPTIONAL
             $query.Var.snapshotIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CheckArchivedSnapshotsLockedReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckLabelRuleNameUniqueness operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: CheckLabelRuleNameUniqueness
             
             $query = New-RscQueryCloudNative -CheckLabelRuleNameUniqueness
             
             # REQUIRED
             $query.Var.ruleName = $someString
             # REQUIRED
             $query.Var.objectType = $someCloudNativeLabelObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLabelObjectType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: IsCloudNativeTagRuleNameUniqueReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckRequiredPermissionsForFeature operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: CheckRequiredPermissionsForFeature
             
             $query = New-RscQueryCloudNative -CheckRequiredPermissionsForFeature
             
             # REQUIRED
             $query.Var.cloudNativeAccountId = $someString
             # REQUIRED
             $query.Var.featurePermissionCheck = @{
             	# OPTIONAL
             	azureFeature = $someAzureFeatureForPermissionCheck # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureFeatureForPermissionCheck]) for enum values.
             	# OPTIONAL
             	awsFeature = $someAwsFeatureForPermissionCheck # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsFeatureForPermissionCheck]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckTagRuleNameUniqueness operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: CheckTagRuleNameUniqueness
             
             $query = New-RscQueryCloudNative -CheckTagRuleNameUniqueness
             
             # REQUIRED
             $query.Var.ruleName = $someString
             # REQUIRED
             $query.Var.objectType = $someCloudNativeTagObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagObjectType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: IsCloudNativeTagRuleNameUniqueReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CustomerTags operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: CustomerTags
             
             $query = New-RscQueryCloudNative -CustomerTags
             
             # REQUIRED
             $query.Var.cloudVendor = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             # OPTIONAL
             $query.Var.cloudAccountId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudNativeCustomerTagsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FileRecoveryEligibleSnapshots operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: FileRecoveryEligibleSnapshots
             
             $query = New-RscQueryCloudNative -FileRecoveryEligibleSnapshots
             
             # REQUIRED
             $query.Var.workloadId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsFileRecoveryFeasible operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: IsFileRecoveryFeasible
             
             $query = New-RscQueryCloudNative -IsFileRecoveryFeasible
             
             # REQUIRED
             $query.Var.snapshotIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateCloudNativeFileRecoveryFeasibilityReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LabelKeys operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: LabelKeys
             
             $query = New-RscQueryCloudNative -LabelKeys
             
             # REQUIRED
             $query.Var.keySubStr = $someString
             # REQUIRED
             $query.Var.limit = $someInt
             # REQUIRED
             $query.Var.objectType = $someCloudNativeLabelObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLabelObjectType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LabelRules operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: LabelRules
             
             $query = New-RscQueryCloudNative -LabelRules
             
             # REQUIRED
             $query.Var.objectType = $someCloudNativeLabelObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLabelObjectType]) for enum values.
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someCloudNativeTagRuleFilterFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagRuleFilterFields]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = $someCloudNativeTagRuleSortByFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagRuleSortByFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetCloudNativeLabelRulesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LabelValues operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: LabelValues
             
             $query = New-RscQueryCloudNative -LabelValues
             
             # REQUIRED
             $query.Var.valueSubStr = $someString
             # REQUIRED
             $query.Var.key = $someString
             # REQUIRED
             $query.Var.limit = $someInt
             # REQUIRED
             $query.Var.objectType = $someCloudNativeLabelObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeLabelObjectType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RbaInstallers operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: RbaInstallers
             
             $query = New-RscQueryCloudNative -RbaInstallers
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RbaInstallerUrls
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnapshotDetailsForRecovery operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: SnapshotDetailsForRecovery
             
             $query = New-RscQueryCloudNative -SnapshotDetailsForRecovery
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudNativeSnapshotDetailsForRecoveryReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnapshotTypeDetails operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: SnapshotTypeDetails
             
             $query = New-RscQueryCloudNative -SnapshotTypeDetails
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudNativeSnapshotTypeDetailsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Snapshots operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: Snapshots
             
             $query = New-RscQueryCloudNative -Snapshots
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.path = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.searchPrefix = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnapshotFileConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SqlServerSetupScript operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: SqlServerSetupScript
             
             $query = New-RscQueryCloudNative -SqlServerSetupScript
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudNativeSqlServerSetupScript
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TagKeys operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: TagKeys
             
             $query = New-RscQueryCloudNative -TagKeys
             
             # REQUIRED
             $query.Var.keySubStr = $someString
             # REQUIRED
             $query.Var.limit = $someInt
             # REQUIRED
             $query.Var.objectType = $someCloudNativeTagObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagObjectType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TagRules operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: TagRules
             
             $query = New-RscQueryCloudNative -TagRules
             
             # REQUIRED
             $query.Var.objectType = $someCloudNativeTagObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagObjectType]) for enum values.
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someCloudNativeTagRuleFilterFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagRuleFilterFields]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = $someCloudNativeTagRuleSortByFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagRuleSortByFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetCloudNativeTagRulesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TagValues operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: TagValues
             
             $query = New-RscQueryCloudNative -TagValues
             
             # REQUIRED
             $query.Var.valueSubStr = $someString
             # REQUIRED
             $query.Var.key = $someString
             # REQUIRED
             $query.Var.limit = $someInt
             # REQUIRED
             $query.Var.objectType = $someCloudNativeTagObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudNativeTagObjectType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WorkloadVersionedFiles operation
             of the 'Cloud Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    CloudNative
             # API Operation: WorkloadVersionedFiles
             
             $query = New-RscQueryCloudNative -WorkloadVersionedFiles
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableId = $someString
             # REQUIRED
             $query.Var.searchQuery = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudNativeVersionedFileConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryCluster">
             <summary>
             Create a new RscQuery object for any of the 29
             operations in the 'Cluster' API domain:
             Cluster, ComputeClusterStatus, Connected, DefaultGateway, Dns, FloatingIps, GetCdmReleaseDetailsForClusterFromSupportPortal, GetGroupCountByCdmClusterStatus, GroupByList, Ipmi, Ipv6Mode, IsTotpAckNecessary, LicensesForClusterProductSummary, List, NetworkInterfaces, Nodes, NtpServers, OperationJobProgress, Proxy, RadarClusterList, RegistrationProductInfo, ReplicationTargets, TotpAckStatus, TypeList, ValidateClusterLicenseCapacity, Vlans, WebCertsAndIpmis, Windows, or WithUpgradesInfo.
             </summary>
             <description>
             New-RscQueryCluster creates a new
             query object for operations
             in the 'Cluster' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 29 operations
             in the 'Cluster' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Cluster, ComputeClusterStatus, Connected, DefaultGateway, Dns, FloatingIps, GetCdmReleaseDetailsForClusterFromSupportPortal, GetGroupCountByCdmClusterStatus, GroupByList, Ipmi, Ipv6Mode, IsTotpAckNecessary, LicensesForClusterProductSummary, List, NetworkInterfaces, Nodes, NtpServers, OperationJobProgress, Proxy, RadarClusterList, RegistrationProductInfo, ReplicationTargets, TotpAckStatus, TypeList, ValidateClusterLicenseCapacity, Vlans, WebCertsAndIpmis, Windows, or WithUpgradesInfo.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCluster -Cluster).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryCluster -Cluster).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Cluster operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Cluster
             
             $query = New-RscQueryCluster -Cluster
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Cluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ComputeClusterStatus operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: ComputeClusterStatus
             
             $query = New-RscQueryCluster -ComputeClusterStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ComputeClusterDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Connected operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Connected
             
             $query = New-RscQueryCluster -Connected
             
             # OPTIONAL
             $query.Var.clusterFilterArg = $someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;DataLocationSupportedCluster&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DefaultGateway operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: DefaultGateway
             
             $query = New-RscQueryCluster -DefaultGateway
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InternalGetDefaultGatewayResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Dns operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Dns
             
             $query = New-RscQueryCluster -Dns
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterDnsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FloatingIps operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: FloatingIps
             
             $query = New-RscQueryCluster -FloatingIps
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InternalGetClusterIpsResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetCdmReleaseDetailsForClusterFromSupportPortal operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: GetCdmReleaseDetailsForClusterFromSupportPortal
             
             $query = New-RscQueryCluster -GetCdmReleaseDetailsForClusterFromSupportPortal
             
             # REQUIRED
             $query.Var.listClusterUuid = @(
             	$someString
             )
             # REQUIRED
             $query.Var.filterVersion = $someString
             # REQUIRED
             $query.Var.fetchLinks = $someBoolean
             # REQUIRED
             $query.Var.filterUpgradeable = $someBoolean
             # REQUIRED
             $query.Var.shouldShowAll = $someBoolean
             # REQUIRED
             $query.Var.filterAfterSource = $someBoolean
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmUpgradeReleaseDetailsFromSupportPortalReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetGroupCountByCdmClusterStatus operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: GetGroupCountByCdmClusterStatus
             
             $query = New-RscQueryCluster -GetGroupCountByCdmClusterStatus
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GroupCountListWithTotal
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GroupByList operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: GroupByList
             
             $query = New-RscQueryCluster -GroupByList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.groupBy = $someClusterGroupByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterGroupByEnum]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	id = @(
             		$someString
             	)
             	# OPTIONAL
             	name = @(
             		$someString
             	)
             	# OPTIONAL
             	type = @(
             		$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	objectType = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	registrationTime_gt = $someDateTime
             	# OPTIONAL
             	registrationTime_lt = $someDateTime
             	# OPTIONAL
             	minSoftwareVersion = $someString
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	excludeEmptyCluster = $someBoolean
             	# OPTIONAL
             	productType = @(
             		$someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             	)
             	# OPTIONAL
             	registeredMode = @(
             		$someClusterRegistrationMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterRegistrationMode]) for enum values.
             	)
             	# OPTIONAL
             	product = $someProduct # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Product]) for enum values.
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             	# OPTIONAL
             	productFilters = @(
             		@{
             			# REQUIRED
             			productType = $someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             			# OPTIONAL
             			minSoftwareVersion = $someString
             		}
             	)
             	# OPTIONAL
             	excludeId = @(
             		$someString
             	)
             	# OPTIONAL
             	systemStatus = @(
             		$someClusterSystemStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterSystemStatus]) for enum values.
             	)
             	# OPTIONAL
             	connectionState = @(
             		$someClusterStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterStatus]) for enum values.
             	)
             	# OPTIONAL
             	isInFatalOrDisconnectedState = $someBoolean
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterGroupByConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Ipmi operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Ipmi
             
             $query = New-RscQueryCluster -Ipmi
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ModifyIpmiReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Ipv6Mode operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Ipv6Mode
             
             $query = New-RscQueryCluster -Ipv6Mode
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterIpv6ModeReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsTotpAckNecessary operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: IsTotpAckNecessary
             
             $query = New-RscQueryCluster -IsTotpAckNecessary
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LicensesForClusterProductSummary operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: LicensesForClusterProductSummary
             
             $query = New-RscQueryCluster -LicensesForClusterProductSummary
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	product = $someProduct # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Product]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LicensesForClusterProductReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the List operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: List
             
             $query = New-RscQueryCluster -List
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	id = @(
             		$someString
             	)
             	# OPTIONAL
             	name = @(
             		$someString
             	)
             	# OPTIONAL
             	type = @(
             		$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	objectType = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	registrationTime_gt = $someDateTime
             	# OPTIONAL
             	registrationTime_lt = $someDateTime
             	# OPTIONAL
             	minSoftwareVersion = $someString
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	excludeEmptyCluster = $someBoolean
             	# OPTIONAL
             	productType = @(
             		$someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             	)
             	# OPTIONAL
             	registeredMode = @(
             		$someClusterRegistrationMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterRegistrationMode]) for enum values.
             	)
             	# OPTIONAL
             	product = $someProduct # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Product]) for enum values.
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             	# OPTIONAL
             	productFilters = @(
             		@{
             			# REQUIRED
             			productType = $someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             			# OPTIONAL
             			minSoftwareVersion = $someString
             		}
             	)
             	# OPTIONAL
             	excludeId = @(
             		$someString
             	)
             	# OPTIONAL
             	systemStatus = @(
             		$someClusterSystemStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterSystemStatus]) for enum values.
             	)
             	# OPTIONAL
             	connectionState = @(
             		$someClusterStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterStatus]) for enum values.
             	)
             	# OPTIONAL
             	isInFatalOrDisconnectedState = $someBoolean
             }
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someClusterSortByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterSortByEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NetworkInterfaces operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: NetworkInterfaces
             
             $query = New-RscQueryCluster -NetworkInterfaces
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	interface = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NetworkInterfaceListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Nodes operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Nodes
             
             $query = New-RscQueryCluster -Nodes
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NodeStatusListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NtpServers operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: NtpServers
             
             $query = New-RscQueryCluster -NtpServers
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NtpServerConfigurationListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OperationJobProgress operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: OperationJobProgress
             
             $query = New-RscQueryCluster -OperationJobProgress
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	clusterUuid = $someString
             	# REQUIRED
             	jobType = $someCcpJobType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CcpJobType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterOperationJobProgress
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Proxy operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Proxy
             
             $query = New-RscQueryCluster -Proxy
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterProxyReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RadarClusterList operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RadarClusterList
             
             $query = New-RscQueryCluster -RadarClusterList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	id = @(
             		$someString
             	)
             	# OPTIONAL
             	name = @(
             		$someString
             	)
             	# OPTIONAL
             	type = @(
             		$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	objectType = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	registrationTime_gt = $someDateTime
             	# OPTIONAL
             	registrationTime_lt = $someDateTime
             	# OPTIONAL
             	minSoftwareVersion = $someString
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	excludeEmptyCluster = $someBoolean
             	# OPTIONAL
             	productType = @(
             		$someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             	)
             	# OPTIONAL
             	registeredMode = @(
             		$someClusterRegistrationMode # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterRegistrationMode]) for enum values.
             	)
             	# OPTIONAL
             	product = $someProduct # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Product]) for enum values.
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             	# OPTIONAL
             	productFilters = @(
             		@{
             			# REQUIRED
             			productType = $someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             			# OPTIONAL
             			minSoftwareVersion = $someString
             		}
             	)
             	# OPTIONAL
             	excludeId = @(
             		$someString
             	)
             	# OPTIONAL
             	systemStatus = @(
             		$someClusterSystemStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterSystemStatus]) for enum values.
             	)
             	# OPTIONAL
             	connectionState = @(
             		$someClusterStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterStatus]) for enum values.
             	)
             	# OPTIONAL
             	isInFatalOrDisconnectedState = $someBoolean
             }
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someClusterSortByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterSortByEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RegistrationProductInfo operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: RegistrationProductInfo
             
             $query = New-RscQueryCluster -RegistrationProductInfo
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterRegistrationProductInfoType
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReplicationTargets operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: ReplicationTargets
             
             $query = New-RscQueryCluster -ReplicationTargets
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ClusterReplicationTarget&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TotpAckStatus operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: TotpAckStatus
             
             $query = New-RscQueryCluster -TotpAckStatus
             
             # REQUIRED
             $query.Var.listClusterUuid = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.Boolean&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TypeList operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: TypeList
             
             $query = New-RscQueryCluster -TypeList
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GroupCount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateClusterLicenseCapacity operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: ValidateClusterLicenseCapacity
             
             $query = New-RscQueryCluster -ValidateClusterLicenseCapacity
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	nodes = @(
             		@{
             			# OPTIONAL
             			id = $someString
             			# OPTIONAL
             			manufactureTime = $someDateTime
             			# OPTIONAL
             			serial = $someString
             			# OPTIONAL
             			systemUuid = $someString
             			# OPTIONAL
             			teleportToken = $someString
             			# OPTIONAL
             			clusterUuid = $someString
             			# OPTIONAL
             			platform = $someString
             			# OPTIONAL
             			capacity = $someString
             			# OPTIONAL
             			isEntitled = $someBoolean
             		}
             	)
             	# REQUIRED
             	managedByRubrik = $someManagedByRubrik # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedByRubrik]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterLicenseCapacityValidations
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vlans operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Vlans
             
             $query = New-RscQueryCluster -Vlans
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	vlan = $someInt
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VlanConfigListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WebCertsAndIpmis operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: WebCertsAndIpmis
             
             $query = New-RscQueryCluster -WebCertsAndIpmis
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuids = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ClusterWebCertAndIpmi&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Windows operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: Windows
             
             $query = New-RscQueryCluster -Windows
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: WindowsCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WithUpgradesInfo operation
             of the 'Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Cluster
             # API Operation: WithUpgradesInfo
             
             $query = New-RscQueryCluster -WithUpgradesInfo
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.upgradeFilter = @{
             	# OPTIONAL
             	id = @(
             		$someString
             	)
             	# OPTIONAL
             	name = @(
             		$someString
             	)
             	# OPTIONAL
             	type = @(
             		$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	registrationTime_gt = $someDateTime
             	# OPTIONAL
             	registrationTime_lt = $someDateTime
             	# OPTIONAL
             	minSoftwareVersion = $someString
             	# OPTIONAL
             	downloadedVersion = @(
             		$someString
             	)
             	# OPTIONAL
             	installedVersion = @(
             		$someString
             	)
             	# OPTIONAL
             	upgradeJobStatus = @(
             		$someClusterJobStatusTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterJobStatusTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	versionStatus = @(
             		$someVersionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VersionStatus]) for enum values.
             	)
             	# OPTIONAL
             	prechecksStatus = @(
             		$somePrechecksStatusTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PrechecksStatusTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	connectionState = @(
             		$someClusterStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterStatus]) for enum values.
             	)
             	# OPTIONAL
             	upgradeScheduled = $someBoolean
             	# OPTIONAL
             	productType = @(
             		$someClusterProductEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterProductEnum]) for enum values.
             	)
             }
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someUpgradeInfoSortByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UpgradeInfoSortByEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryDb2">
             <summary>
             Create a new RscQuery object for any of the 9
             operations in the 'Db2' API domain:
             Database, DatabaseJobStatus, Databases, Instance, Instances, LogSnapshot, LogSnapshots, RecoverableRange, or RecoverableRanges.
             </summary>
             <description>
             New-RscQueryDb2 creates a new
             query object for operations
             in the 'Db2' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 9 operations
             in the 'Db2' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Database, DatabaseJobStatus, Databases, Instance, Instances, LogSnapshot, LogSnapshots, RecoverableRange, or RecoverableRanges.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryDb2 -Database).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryDb2 -Database).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Database operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: Database
             
             $query = New-RscQueryDb2 -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2Database
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseJobStatus operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: DatabaseJobStatus
             
             $query = New-RscQueryDb2 -DatabaseJobStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: Databases
             
             $query = New-RscQueryDb2 -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2DatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Instance operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: Instance
             
             $query = New-RscQueryDb2 -Instance
             
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2Instance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Instances operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: Instances
             
             $query = New-RscQueryDb2 -Instances
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2InstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogSnapshot operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: LogSnapshot
             
             $query = New-RscQueryDb2 -LogSnapshot
             
             # REQUIRED
             $query.Var.db2LogSnapshotFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2LogSnapshot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogSnapshots operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: LogSnapshots
             
             $query = New-RscQueryDb2 -LogSnapshots
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someDb2LogSnapshotSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Db2LogSnapshotSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	workloadId = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	fromTime = $someDateTime
             	# OPTIONAL
             	toTime = $someDateTime
             	# OPTIONAL
             	isArchived = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2LogSnapshotConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRange operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: RecoverableRange
             
             $query = New-RscQueryDb2 -RecoverableRange
             
             # REQUIRED
             $query.Var.db2RecoverableRangeFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2RecoverableRange
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'Db2' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Db2
             # API Operation: RecoverableRanges
             
             $query = New-RscQueryDb2 -RecoverableRanges
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someDb2RecoverableRangeSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Db2RecoverableRangeSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	databaseId = @(
             		$someString
             	)
             	# OPTIONAL
             	fromTime = $someDateTime
             	# OPTIONAL
             	toTime = $someDateTime
             	# OPTIONAL
             	isArchived = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Db2RecoverableRangeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryDownload">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'Report Download' API domain:
             CdmUpgradesPdf, DownloadedVersionList, or PackageStatus.
             </summary>
             <description>
             New-RscQueryDownload creates a new
             query object for operations
             in the 'Report Download' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'Report Download' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CdmUpgradesPdf, DownloadedVersionList, or PackageStatus.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryDownload -CdmUpgradesPdf).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryDownload -CdmUpgradesPdf).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CdmUpgradesPdf operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: CdmUpgradesPdf
             
             $query = New-RscQueryDownload -CdmUpgradesPdf
             
             # OPTIONAL
             $query.Var.downloadFilter = @{
             	# OPTIONAL
             	clusterUuids = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterNames = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterTypes = @(
             		$someString
             	)
             	# OPTIONAL
             	downloadedVersions = @(
             		$someString
             	)
             	# OPTIONAL
             	installedVersions = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterLocations = @(
             		$someString
             	)
             	# OPTIONAL
             	upgradeJobStatus = @(
             		$someString
             	)
             	# OPTIONAL
             	prechecksStatus = @(
             		$someString
             	)
             	# OPTIONAL
             	versionStatus = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadCdmUpgradesPdfReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DownloadedVersionList operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: DownloadedVersionList
             
             $query = New-RscQueryDownload -DownloadedVersionList
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GroupCount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PackageStatus operation
             of the 'Report Download' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Download
             # API Operation: PackageStatus
             
             $query = New-RscQueryDownload -PackageStatus
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DownloadPackageStatusReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryExchange">
             <summary>
             Create a new RscQuery object for any of the 7
             operations in the 'Microsoft Exchange' API domain:
             Dag, Dags, Database, Databases, LiveMounts, Server, or Servers.
             </summary>
             <description>
             New-RscQueryExchange creates a new
             query object for operations
             in the 'Microsoft Exchange' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 7 operations
             in the 'Microsoft Exchange' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Dag, Dags, Database, Databases, LiveMounts, Server, or Servers.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryExchange -Dag).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryExchange -Dag).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Dag operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: Dag
             
             $query = New-RscQueryExchange -Dag
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ExchangeDag
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Dags operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: Dags
             
             $query = New-RscQueryExchange -Dags
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ExchangeDagConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Database operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: Database
             
             $query = New-RscQueryExchange -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ExchangeDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: Databases
             
             $query = New-RscQueryExchange -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ExchangeDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LiveMounts operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: LiveMounts
             
             $query = New-RscQueryExchange -LiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someExchangeLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ExchangeLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someExchangeLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ExchangeLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ExchangeLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Server operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: Server
             
             $query = New-RscQueryExchange -Server
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ExchangeServer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Servers operation
             of the 'Microsoft Exchange' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Exchange
             # API Operation: Servers
             
             $query = New-RscQueryExchange -Servers
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ExchangeServerConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryFailoverCluster">
             <summary>
             Create a new RscQuery object for any of the 5
             operations in the 'Failover Cluster' API domain:
             App, Apps, Host, Hosts, or TopLevelDescendants.
             </summary>
             <description>
             New-RscQueryFailoverCluster creates a new
             query object for operations
             in the 'Failover Cluster' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 5 operations
             in the 'Failover Cluster' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: App, Apps, Host, Hosts, or TopLevelDescendants.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryFailoverCluster -App).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryFailoverCluster -App).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the App operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: App
             
             $query = New-RscQueryFailoverCluster -App
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FailoverClusterApp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Apps operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: Apps
             
             $query = New-RscQueryFailoverCluster -Apps
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.hostFailoverClusterRoot = $someHostFailoverClusterRoot # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HostFailoverClusterRoot]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FailoverClusterAppConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Host operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: Host
             
             $query = New-RscQueryFailoverCluster -Host
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HostFailoverCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Hosts operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: Hosts
             
             $query = New-RscQueryFailoverCluster -Hosts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.hostFailoverClusterRoot = $someHostFailoverClusterRoot # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HostFailoverClusterRoot]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HostFailoverClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'Failover Cluster' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    FailoverCluster
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryFailoverCluster -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.hostFailoverClusterRoot = $someHostFailoverClusterRoot # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HostFailoverClusterRoot]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FailoverClusterTopLevelDescendantTypeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryFileset">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Fileset' API domain:
             Linux, RequestStatus, Share, Template, Templates, or Windows.
             </summary>
             <description>
             New-RscQueryFileset creates a new
             query object for operations
             in the 'Fileset' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Fileset' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Linux, RequestStatus, Share, Template, Templates, or Windows.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryFileset -Linux).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryFileset -Linux).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Linux operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: Linux
             
             $query = New-RscQueryFileset -Linux
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LinuxFileset
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RequestStatus operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: RequestStatus
             
             $query = New-RscQueryFileset -RequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Share operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: Share
             
             $query = New-RscQueryFileset -Share
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ShareFileset
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Template operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: Template
             
             $query = New-RscQueryFileset -Template
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FilesetTemplate
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Templates operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: Templates
             
             $query = New-RscQueryFileset -Templates
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.hostRoot = $someHostRoot # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HostRoot]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FilesetTemplateConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Windows operation
             of the 'Fileset' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Fileset
             # API Operation: Windows
             
             $query = New-RscQueryFileset -Windows
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: WindowsFileset
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryGcp">
             <summary>
             Create a new RscQuery object for any of the 16
             operations in the 'Google Cloud Platform' API domain:
             CloudAccountMissingPermissionsForAddition, CloudAccountProjectsByFeature, CloudAccountProjectsForOauth, FeaturePermissionsForCloudAccount, GetDefaultCredentialsServiceAccount, NativeAvailableKmsCryptoKeys, NativeCompatibleMachineTypes, NativeNetworks, NativeProjectsWithAccessibleNetworks, NativeRegions, NativeStoredMachineTypes, NativeStoredMachineTypesInProject, NativeStoredNetworkNames, NativeStoredNetworkNamesInProject, NativeStoredRegions, or NativeStoredRegionsInProject.
             </summary>
             <description>
             New-RscQueryGcp creates a new
             query object for operations
             in the 'Google Cloud Platform' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 16 operations
             in the 'Google Cloud Platform' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CloudAccountMissingPermissionsForAddition, CloudAccountProjectsByFeature, CloudAccountProjectsForOauth, FeaturePermissionsForCloudAccount, GetDefaultCredentialsServiceAccount, NativeAvailableKmsCryptoKeys, NativeCompatibleMachineTypes, NativeNetworks, NativeProjectsWithAccessibleNetworks, NativeRegions, NativeStoredMachineTypes, NativeStoredMachineTypesInProject, NativeStoredNetworkNames, NativeStoredNetworkNamesInProject, NativeStoredRegions, or NativeStoredRegionsInProject.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryGcp -CloudAccountMissingPermissionsForAddition).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryGcp -CloudAccountMissingPermissionsForAddition).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CloudAccountMissingPermissionsForAddition operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountMissingPermissionsForAddition
             
             $query = New-RscQueryGcp -CloudAccountMissingPermissionsForAddition
             
             # REQUIRED
             $query.Var.sessionId = $someString
             # REQUIRED
             $query.Var.projectIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GcpCloudAccountMissingPermissionsForAddition&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountProjectsByFeature operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountProjectsByFeature
             
             $query = New-RscQueryGcp -CloudAccountProjectsByFeature
             
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             # REQUIRED
             $query.Var.projectStatusFilters = @(
             	$someCloudAccountStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountStatus]) for enum values.
             )
             # REQUIRED
             $query.Var.projectSearchText = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GcpCloudAccountProjectDetail&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudAccountProjectsForOauth operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: CloudAccountProjectsForOauth
             
             $query = New-RscQueryGcp -CloudAccountProjectsForOauth
             
             # REQUIRED
             $query.Var.sessionId = $someString
             # REQUIRED
             $query.Var.features = @(
             	$someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             )
             # REQUIRED
             $query.Var.checkPermissions = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GcpCloudAccountProjectForOauth&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FeaturePermissionsForCloudAccount operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: FeaturePermissionsForCloudAccount
             
             $query = New-RscQueryGcp -FeaturePermissionsForCloudAccount
             
             # REQUIRED
             $query.Var.feature = $someCloudAccountFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudAccountFeature]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GcpPermission&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetDefaultCredentialsServiceAccount operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: GetDefaultCredentialsServiceAccount
             
             $query = New-RscQueryGcp -GetDefaultCredentialsServiceAccount
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeAvailableKmsCryptoKeys operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeAvailableKmsCryptoKeys
             
             $query = New-RscQueryGcp -NativeAvailableKmsCryptoKeys
             
             # REQUIRED
             $query.Var.projectId = $someString
             # REQUIRED
             $query.Var.regionName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GcpNativeKmsCryptoKey&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeCompatibleMachineTypes operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeCompatibleMachineTypes
             
             $query = New-RscQueryGcp -NativeCompatibleMachineTypes
             
             # REQUIRED
             $query.Var.targetZone = $someString
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeNetworks operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeNetworks
             
             $query = New-RscQueryGcp -NativeNetworks
             
             # REQUIRED
             $query.Var.projectId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GcpNativeNetwork&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeProjectsWithAccessibleNetworks operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeProjectsWithAccessibleNetworks
             
             $query = New-RscQueryGcp -NativeProjectsWithAccessibleNetworks
             
             # REQUIRED
             $query.Var.projectId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;NetworkHostProject&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeRegions operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeRegions
             
             $query = New-RscQueryGcp -NativeRegions
             
             # REQUIRED
             $query.Var.projectId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GcpNativeRegion&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeStoredMachineTypes operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeStoredMachineTypes
             
             $query = New-RscQueryGcp -NativeStoredMachineTypes
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeStoredMachineTypesInProject operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeStoredMachineTypesInProject
             
             $query = New-RscQueryGcp -NativeStoredMachineTypesInProject
             
             # REQUIRED
             $query.Var.projectId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeStoredNetworkNames operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeStoredNetworkNames
             
             $query = New-RscQueryGcp -NativeStoredNetworkNames
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeStoredNetworkNamesInProject operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeStoredNetworkNamesInProject
             
             $query = New-RscQueryGcp -NativeStoredNetworkNamesInProject
             
             # REQUIRED
             $query.Var.projectId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeStoredRegions operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeStoredRegions
             
             $query = New-RscQueryGcp -NativeStoredRegions
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NativeStoredRegionsInProject operation
             of the 'Google Cloud Platform' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Gcp
             # API Operation: NativeStoredRegionsInProject
             
             $query = New-RscQueryGcp -NativeStoredRegionsInProject
             
             # REQUIRED
             $query.Var.projectId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryGcpNative">
             <summary>
             Create a new RscQuery object for any of the 7
             operations in the 'Google Cloud Platform Native' API domain:
             Disk, Disks, GceInstance, GceInstances, Project, Projects, or StoredDiskLocations.
             </summary>
             <description>
             New-RscQueryGcpNative creates a new
             query object for operations
             in the 'Google Cloud Platform Native' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 7 operations
             in the 'Google Cloud Platform Native' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Disk, Disks, GceInstance, GceInstances, Project, Projects, or StoredDiskLocations.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryGcpNative -Disk).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryGcpNative -Disk).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Disk operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: Disk
             
             $query = New-RscQueryGcpNative -Disk
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpNativeDisk
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Disks operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: Disks
             
             $query = New-RscQueryGcpNative -Disks
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someGcpNativeDiskSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpNativeDiskSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.diskFilters = @{
             	# OPTIONAL
             	nameOrIdSubstringFilter = @{
             		# REQUIRED
             		nameOrIdSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	projectFilter = @{
             		# REQUIRED
             		projectIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	locationFilter = @{
             		# REQUIRED
             		locations = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	diskTypeFilter = @{
             		# REQUIRED
             		diskTypes = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	labelFilter = @{
             		# REQUIRED
             		labelFilterParams = @(
             			@{
             				# REQUIRED
             				filterType = $someGcpNativeLabelFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpNativeLabelFilterType]) for enum values.
             				# REQUIRED
             				labelKey = $someString
             				# REQUIRED
             				labelValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	orgFilter = @{
             		# REQUIRED
             		orgIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpNativeDiskConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GceInstance operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: GceInstance
             
             $query = New-RscQueryGcpNative -GceInstance
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpNativeGceInstance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GceInstances operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: GceInstances
             
             $query = New-RscQueryGcpNative -GceInstances
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someGcpNativeGceInstanceSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpNativeGceInstanceSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.gceInstanceFilters = @{
             	# OPTIONAL
             	nameOrIdSubstringFilter = @{
             		# REQUIRED
             		nameOrIdSubstring = $someString
             	}
             	# OPTIONAL
             	projectFilter = @{
             		# REQUIRED
             		projectIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	regionFilter = @{
             		# REQUIRED
             		regions = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	machineTypeFilter = @{
             		# REQUIRED
             		machineTypes = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	networkFilter = @{
             		# REQUIRED
             		networkNames = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	labelFilter = @{
             		# REQUIRED
             		labelFilterParams = @(
             			@{
             				# REQUIRED
             				filterType = $someGcpNativeLabelFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpNativeLabelFilterType]) for enum values.
             				# REQUIRED
             				labelKey = $someString
             				# REQUIRED
             				labelValue = $someString
             			}
             		)
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	relicFilter = @{
             		# REQUIRED
             		relic = $someBoolean
             	}
             	# OPTIONAL
             	orgFilter = @{
             		# REQUIRED
             		orgIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpNativeGceInstanceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Project operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: Project
             
             $query = New-RscQueryGcpNative -Project
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpNativeProject
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Projects operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: Projects
             
             $query = New-RscQueryGcpNative -Projects
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someGcpNativeProjectSortFields # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GcpNativeProjectSortFields]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.projectFilters = @{
             	# OPTIONAL
             	nameOrNumberSubstringFilter = @{
             		# REQUIRED
             		nameOrNumberSubstring = $someString
             	}
             	# OPTIONAL
             	idSubstringFilter = @{
             		# REQUIRED
             		idSubstring = $someString
             	}
             	# OPTIONAL
             	effectiveSlaFilter = @{
             		# REQUIRED
             		effectiveSlaIds = @(
             			$someString
             		)
             	}
             }
             # OPTIONAL
             $query.Var.authorizedOperationFilter = $someOperation # Call [Enum]::GetValues([RubrikSecurityCloud.Types.Operation]) for enum values.
             # OPTIONAL
             $query.Var.workloadHierarchy = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GcpNativeProjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StoredDiskLocations operation
             of the 'Google Cloud Platform Native' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    GcpNative
             # API Operation: StoredDiskLocations
             
             $query = New-RscQueryGcpNative -StoredDiskLocations
             
             # OPTIONAL
             $query.Var.projectId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ListStoredDiskLocationsReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryHost">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Host' API domain:
             Diagnosis, PhysicalHost, PhysicalHosts, Search, Share, or Shares.
             </summary>
             <description>
             New-RscQueryHost creates a new
             query object for operations
             in the 'Host' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Host' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Diagnosis, PhysicalHost, PhysicalHosts, Search, Share, or Shares.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryHost -Diagnosis).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryHost -Diagnosis).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Diagnosis operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: Diagnosis
             
             $query = New-RscQueryHost -Diagnosis
             
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HostDiagnosisSummary
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PhysicalHost operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: PhysicalHost
             
             $query = New-RscQueryHost -PhysicalHost
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PhysicalHost
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PhysicalHosts operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: PhysicalHosts
             
             $query = New-RscQueryHost -PhysicalHosts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.hostRoot = $someHostRoot # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HostRoot]) for enum values.
             # OPTIONAL
             $query.Var.isBulkPolicyAssignmentFlow = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PhysicalHostConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Search operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: Search
             
             $query = New-RscQueryHost -Search
             
             # REQUIRED
             $query.Var.id = $someString
             # REQUIRED
             $query.Var.path = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SearchResponseListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Share operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: Share
             
             $query = New-RscQueryHost -Share
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HostShare
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Shares operation
             of the 'Host' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Host
             # API Operation: Shares
             
             $query = New-RscQueryHost -Shares
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HostShareConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryHyperv">
             <summary>
             Create a new RscQuery object for any of the 15
             operations in the 'Microsoft Hyper-V' API domain:
             Cluster, HostAsyncRequestStatus, Mounts, Scvmm, ScvmmAsyncRequestStatus, Scvmms, Server, Servers, ServersPaginated, TopLevelDescendants, UniqueServersCount, VirtualMachine, VirtualMachineAsyncRequestStatus, VirtualMachines, or VmDetail.
             </summary>
             <description>
             New-RscQueryHyperv creates a new
             query object for operations
             in the 'Microsoft Hyper-V' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 15 operations
             in the 'Microsoft Hyper-V' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Cluster, HostAsyncRequestStatus, Mounts, Scvmm, ScvmmAsyncRequestStatus, Scvmms, Server, Servers, ServersPaginated, TopLevelDescendants, UniqueServersCount, VirtualMachine, VirtualMachineAsyncRequestStatus, VirtualMachines, or VmDetail.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryHyperv -Cluster).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryHyperv -Cluster).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Cluster operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Cluster
             
             $query = New-RscQueryHyperv -Cluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVcluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostAsyncRequestStatus operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: HostAsyncRequestStatus
             
             $query = New-RscQueryHyperv -HostAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mounts operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Mounts
             
             $query = New-RscQueryHyperv -Mounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someHypervLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HypervLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someHypervLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HypervLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVliveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Scvmm operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Scvmm
             
             $query = New-RscQueryHyperv -Scvmm
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVscvmm
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScvmmAsyncRequestStatus operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ScvmmAsyncRequestStatus
             
             $query = New-RscQueryHyperv -ScvmmAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Scvmms operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Scvmms
             
             $query = New-RscQueryHyperv -Scvmms
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVscvmmConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Server operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Server
             
             $query = New-RscQueryHyperv -Server
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervServer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Servers operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: Servers
             
             $query = New-RscQueryHyperv -Servers
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	effectiveSlaDomainId = $someString
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	offset = $someInt
             	# OPTIONAL
             	primaryClusterId = $someString
             	# OPTIONAL
             	slaAssignment = $someInternalQueryHypervHostRequestSlaAssignment # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalQueryHypervHostRequestSlaAssignment]) for enum values.
             	# OPTIONAL
             	sortBy = $someInternalQueryHypervHostRequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalQueryHypervHostRequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someInternalQueryHypervHostRequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalQueryHypervHostRequestSortOrder]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervHostSummaryListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ServersPaginated operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: ServersPaginated
             
             $query = New-RscQueryHyperv -ServersPaginated
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervServerConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryHyperv -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervTopLevelDescendantTypeConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UniqueServersCount operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: UniqueServersCount
             
             $query = New-RscQueryHyperv -UniqueServersCount
             
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Int32
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachine operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: VirtualMachine
             
             $query = New-RscQueryHyperv -VirtualMachine
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVvirtualMachine
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachineAsyncRequestStatus operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: VirtualMachineAsyncRequestStatus
             
             $query = New-RscQueryHyperv -VirtualMachineAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachines operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: VirtualMachines
             
             $query = New-RscQueryHyperv -VirtualMachines
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HyperVvirtualMachineConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmDetail operation
             of the 'Microsoft Hyper-V' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Hyperv
             # API Operation: VmDetail
             
             $query = New-RscQueryHyperv -VmDetail
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HypervVirtualMachineDetail
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryIntegration">
             <summary>
             Create a new RscQuery object for any of the 2
             operations in the 'Integration' API domain:
             Integration, or Integrations.
             </summary>
             <description>
             New-RscQueryIntegration creates a new
             query object for operations
             in the 'Integration' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 2 operations
             in the 'Integration' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Integration, or Integrations.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryIntegration -Integration).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryIntegration -Integration).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Integration operation
             of the 'Integration' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Integration
             # API Operation: Integration
             
             $query = New-RscQueryIntegration -Integration
             
             # REQUIRED
             $query.Var.id = $someInt
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ReadIntegrationReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Integrations operation
             of the 'Integration' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Integration
             # API Operation: Integrations
             
             $query = New-RscQueryIntegration -Integrations
             
             # REQUIRED
             $query.Var.integrationTypes = @(
             	$someIntegrationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IntegrationType]) for enum values.
             )
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ListIntegrationsReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryK8s">
             <summary>
             Create a new RscQuery object for any of the 7
             operations in the 'Kubernetes' API domain:
             AppManifest, Cluster, Clusters, Namespace, Namespaces, ReplicaSnapshotInfos, or SnapshotInfo.
             </summary>
             <description>
             New-RscQueryK8s creates a new
             query object for operations
             in the 'Kubernetes' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 7 operations
             in the 'Kubernetes' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AppManifest, Cluster, Clusters, Namespace, Namespaces, ReplicaSnapshotInfos, or SnapshotInfo.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryK8s -AppManifest).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryK8s -AppManifest).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AppManifest operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: AppManifest
             
             $query = New-RscQueryK8s -AppManifest
             
             # REQUIRED
             $query.Var.app = $someString
             # REQUIRED
             $query.Var.version = $someString
             # REQUIRED
             $query.Var.retrieveLatestVersion = $someBoolean
             # OPTIONAL
             $query.Var.targetVersion = $someString
             # OPTIONAL
             $query.Var.k8sClusterId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: K8sAppManifest
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Cluster operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: Cluster
             
             $query = New-RscQueryK8s -Cluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: K8sCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Clusters operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: Clusters
             
             $query = New-RscQueryK8s -Clusters
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: K8sClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Namespace operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: Namespace
             
             $query = New-RscQueryK8s -Namespace
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: K8sNamespace
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Namespaces operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: Namespaces
             
             $query = New-RscQueryK8s -Namespaces
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.k8sClusterId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: K8sNamespaceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ReplicaSnapshotInfos operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: ReplicaSnapshotInfos
             
             $query = New-RscQueryK8s -ReplicaSnapshotInfos
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             # REQUIRED
             $query.Var.snappableId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ReplicatedSnapshotInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnapshotInfo operation
             of the 'Kubernetes' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    K8s
             # API Operation: SnapshotInfo
             
             $query = New-RscQueryK8s -SnapshotInfo
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             # REQUIRED
             $query.Var.namespaceId = $someString
             # REQUIRED
             $query.Var.isReplica = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: K8sSnapshotInfo
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryLdap">
             <summary>
             Create a new RscQuery object for any of the 3
             operations in the 'LDAP' API domain:
             AuthorizedPrincipalList, IntegrationList, or PrincipalList.
             </summary>
             <description>
             New-RscQueryLdap creates a new
             query object for operations
             in the 'LDAP' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 3 operations
             in the 'LDAP' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AuthorizedPrincipalList, IntegrationList, or PrincipalList.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryLdap -AuthorizedPrincipalList).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryLdap -AuthorizedPrincipalList).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AuthorizedPrincipalList operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ldap
             # API Operation: AuthorizedPrincipalList
             
             $query = New-RscQueryLdap -AuthorizedPrincipalList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someLdapAuthorizedPrincipalFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LdapAuthorizedPrincipalFieldEnum]) for enum values.
             # REQUIRED
             $query.Var.searchText = $someString
             # OPTIONAL
             $query.Var.roleIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AuthorizedPrincipalConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IntegrationList operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ldap
             # API Operation: IntegrationList
             
             $query = New-RscQueryLdap -IntegrationList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someLdapIntegrationFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LdapIntegrationFieldEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LdapIntegrationConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrincipalList operation
             of the 'LDAP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ldap
             # API Operation: PrincipalList
             
             $query = New-RscQueryLdap -PrincipalList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someLdapPrincipalFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LdapPrincipalFieldEnum]) for enum values.
             # REQUIRED
             $query.Var.id = $someString
             # REQUIRED
             $query.Var.searchText = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrincipalConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryM365">
             <summary>
             Create a new RscQuery object for any of the 7
             operations in the 'Microsoft 365' API domain:
             DayToDayModeBackupStats, DayToDayModeStats, OnboardingModeBackupStats, OnboardingModeStats, OrgBackupLocations, OrgOperationModes, or Regions.
             </summary>
             <description>
             New-RscQueryM365 creates a new
             query object for operations
             in the 'Microsoft 365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 7 operations
             in the 'Microsoft 365' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: DayToDayModeBackupStats, DayToDayModeStats, OnboardingModeBackupStats, OnboardingModeStats, OrgBackupLocations, OrgOperationModes, or Regions.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryM365 -DayToDayModeBackupStats).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryM365 -DayToDayModeBackupStats).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the DayToDayModeBackupStats operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: DayToDayModeBackupStats
             
             $query = New-RscQueryM365 -DayToDayModeBackupStats
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.dashboardWorkloadType = $someM365DashboardWorkloadType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.M365DashboardWorkloadType]) for enum values.
             # REQUIRED
             $query.Var.backupStatsTimeRange = $someBackupStatsTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.BackupStatsTimeRange]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DayToDayModeBackupStats
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DayToDayModeStats operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: DayToDayModeStats
             
             $query = New-RscQueryM365 -DayToDayModeStats
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.dashboardWorkloadType = $someM365DashboardWorkloadType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.M365DashboardWorkloadType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DayToDayModeStats
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OnboardingModeBackupStats operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: OnboardingModeBackupStats
             
             $query = New-RscQueryM365 -OnboardingModeBackupStats
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.dashboardWorkloadType = $someM365DashboardWorkloadType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.M365DashboardWorkloadType]) for enum values.
             # REQUIRED
             $query.Var.backupStatsTimeRange = $someBackupStatsTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.BackupStatsTimeRange]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OnboardingModeBackupStats
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OnboardingModeStats operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: OnboardingModeStats
             
             $query = New-RscQueryM365 -OnboardingModeStats
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.dashboardWorkloadType = $someM365DashboardWorkloadType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.M365DashboardWorkloadType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OnboardingModeStats
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgBackupLocations operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: OrgBackupLocations
             
             $query = New-RscQueryM365 -OrgBackupLocations
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: M365OrgBackupLocations
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgOperationModes operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: OrgOperationModes
             
             $query = New-RscQueryM365 -OrgOperationModes
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: M365OrgOperationModes
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Regions operation
             of the 'Microsoft 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    M365
             # API Operation: Regions
             
             $query = New-RscQueryM365 -Regions
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: M365RegionsResp
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryManagedVolume">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Managed Volume' API domain:
             InventoryStats, LiveMounts, ManagedVolume, or ManagedVolumes.
             </summary>
             <description>
             New-RscQueryManagedVolume creates a new
             query object for operations
             in the 'Managed Volume' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Managed Volume' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: InventoryStats, LiveMounts, ManagedVolume, or ManagedVolumes.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryManagedVolume -InventoryStats).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryManagedVolume -InventoryStats).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the InventoryStats operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: InventoryStats
             
             $query = New-RscQueryManagedVolume -InventoryStats
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolumeInventoryStats
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LiveMounts operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: LiveMounts
             
             $query = New-RscQueryManagedVolume -LiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolumeMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedVolume operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: ManagedVolume
             
             $query = New-RscQueryManagedVolume -ManagedVolume
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolume
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedVolumes operation
             of the 'Managed Volume' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ManagedVolume
             # API Operation: ManagedVolumes
             
             $query = New-RscQueryManagedVolume -ManagedVolumes
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolumeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryMisc">
             <summary>
             Create a new RscQuery object for any of the 168
             operations in the 'Miscellaneous' API domain:
             ActiveCustomAnalyzers, AdVolumeExports, AllowedOrgAdminOperations, AnalyzerGroups, AnalyzerUsages, AnomalyResultOpt, AnomalyResults, AnomalyResultsGrouped, AreMultiGeoBackupsEnabled, AuthorizationsForGlobalResource, AuthorizationsForObject, AuthorizationsForObjects, AwsComputeSettings, AzureResourceGroups, AzureSubnets, BrowseCalendar, BrowseContacts, BrowseFolder, BrowseOnedrive, BrowseTeamsChannels, BrowseTeamsDrive, CdmGuestCredentials, CdmInventorySubHierarchyRoot, CdmOvaDetails, CdmVersionCheck, CdpVmsInfos, CheckCloudComputeConnectivityJobProgress, CloudDirectNasExport, CloudDirectShares, CloudDirectSites, CloudDirectSystems, ConfiguredGroupMembers, Crawl, Crawls, CurrentIpAddress, CurrentOrg, CurrentOrgAuthDomainConfig, CurrentOrgIdentityProviders, CustomAnalyzer, DashboardSummary, DatagovSecDesc, DecryptExportUrl, DeploymentIpAddresses, DeploymentVersion, DhrcActiveRecommendations, DhrcLatestMetrics, DhrcScores, DiffFmd, DiscoverNodes, DiscoveryTimeline, DistributionListDigest, DistributionListDigests, DummyFieldWithAdminOnlyTag, EdgeWindowsToolLink, EffectiveRbacPermissions, EventDigests, ExternalDeploymentName, FailedRestoreItemsInfo, FederatedLoginStatus, FileActivities, GeoLocationList, GetAllRolesInOrgList, GetCdmReleaseDetailsForVersionFromSupportPortal, GetCdmReleaseDetailsFromSupportPortal, GetGroupCountByPrechecksStatus, GetGroupCountByUpgradeJobStatus, GetGroupCountByVersionStatus, GetKorgTaskchainStatus, GetPermissions, GetRolesByIds, GetUserDownloads, GlobalFileSearch, GlobalLockoutConfig, GlobalMfaSetting, GlobalSearchResults, GroupsInCurrentAndDescendantOrganization, GuestCredentials, GuestCredentialsV2, HasIdpConfigured, HelpContentSnippets, HierarchyObject, HierarchyObjects, InstalledVersionList, InventoryRoot, InventorySubHierarchyRoot, InventoryWorkloads, InvestigationCsvDownloadLink, IpWhitelist, IsLoggedIntoRubrikSupportPortal, IsSfdcReachable, IsUpgradeAvailable, IsUpgradeRecommended, IsZrsAvailableForLocation, Issue, Issues, IssuesJobIds, KnowledgeBaseArticle, LambdaSettings, LicensedProducts, LockoutConfig, MaxProtectedAppsCount, MfaSetting, MinimumCdmVersionForFeatureSet, NetworkThrottle, NfAnomalyResults, NfAnomalyResultsGrouped, NodeRemovalCancelPermission, NodeToReplace, NosqlStorageLocations, OauthCodesForEdgeReg, ObjectFiles, ObjectTypeAccessSummary, ObjectsAlreadyAssignedToOrgs, Org, Orgs, OrgsByIds, OrgsForPrincipal, PendingAction, PendingActions, PhoenixRolloutProgress, PipelineHealthForTimeRange, PolarisInventorySubHierarchyRoot, PolicyDetails, PolicyObj, PolicyObjs, PrechecksStatus, PrechecksStatusWithNextJobInfo, PrivateContainerRegistry, ProductDocumentation, ProtectedObjectsList, ProtectedVolumesCount, QuarantinedDetailsForWorkload, QueryDatastoreFreespaceThresholds, RoleTemplates, SearchFileByPrefix, SnoozedDirectories, SupportBundle, SupportUserAccesses, TableFilters, Targets, TaskDetailGroupByList, TaskDetailList, Taskchain, TeamChannelNameAvailable, TotpConfigStatus, TprStatusForNodeRemoval, TunnelStatus, UniqueVcdCount, UnmanagedObjects, UnmanagedObjectsSupportedTypes, UpgradeStatus, UserActivities, UserAnalyzerAccess, UserAuditList, UserDetail, UserGroups, UserNotifications, UserSessionManagementConfig, UserSettings, UsersInCurrentAndDescendantOrganization, UsersOnAccountList, ValidateOrgName, VcdVappVms, VirtualMachineFiles, VmRecoveryJobsInfo, VolumeGroupMounts, WorkloadAlertSetting, or WorkloadAnomalies.
             </summary>
             <description>
             New-RscQueryMisc creates a new
             query object for operations
             in the 'Miscellaneous' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 168 operations
             in the 'Miscellaneous' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ActiveCustomAnalyzers, AdVolumeExports, AllowedOrgAdminOperations, AnalyzerGroups, AnalyzerUsages, AnomalyResultOpt, AnomalyResults, AnomalyResultsGrouped, AreMultiGeoBackupsEnabled, AuthorizationsForGlobalResource, AuthorizationsForObject, AuthorizationsForObjects, AwsComputeSettings, AzureResourceGroups, AzureSubnets, BrowseCalendar, BrowseContacts, BrowseFolder, BrowseOnedrive, BrowseTeamsChannels, BrowseTeamsDrive, CdmGuestCredentials, CdmInventorySubHierarchyRoot, CdmOvaDetails, CdmVersionCheck, CdpVmsInfos, CheckCloudComputeConnectivityJobProgress, CloudDirectNasExport, CloudDirectShares, CloudDirectSites, CloudDirectSystems, ConfiguredGroupMembers, Crawl, Crawls, CurrentIpAddress, CurrentOrg, CurrentOrgAuthDomainConfig, CurrentOrgIdentityProviders, CustomAnalyzer, DashboardSummary, DatagovSecDesc, DecryptExportUrl, DeploymentIpAddresses, DeploymentVersion, DhrcActiveRecommendations, DhrcLatestMetrics, DhrcScores, DiffFmd, DiscoverNodes, DiscoveryTimeline, DistributionListDigest, DistributionListDigests, DummyFieldWithAdminOnlyTag, EdgeWindowsToolLink, EffectiveRbacPermissions, EventDigests, ExternalDeploymentName, FailedRestoreItemsInfo, FederatedLoginStatus, FileActivities, GeoLocationList, GetAllRolesInOrgList, GetCdmReleaseDetailsForVersionFromSupportPortal, GetCdmReleaseDetailsFromSupportPortal, GetGroupCountByPrechecksStatus, GetGroupCountByUpgradeJobStatus, GetGroupCountByVersionStatus, GetKorgTaskchainStatus, GetPermissions, GetRolesByIds, GetUserDownloads, GlobalFileSearch, GlobalLockoutConfig, GlobalMfaSetting, GlobalSearchResults, GroupsInCurrentAndDescendantOrganization, GuestCredentials, GuestCredentialsV2, HasIdpConfigured, HelpContentSnippets, HierarchyObject, HierarchyObjects, InstalledVersionList, InventoryRoot, InventorySubHierarchyRoot, InventoryWorkloads, InvestigationCsvDownloadLink, IpWhitelist, IsLoggedIntoRubrikSupportPortal, IsSfdcReachable, IsUpgradeAvailable, IsUpgradeRecommended, IsZrsAvailableForLocation, Issue, Issues, IssuesJobIds, KnowledgeBaseArticle, LambdaSettings, LicensedProducts, LockoutConfig, MaxProtectedAppsCount, MfaSetting, MinimumCdmVersionForFeatureSet, NetworkThrottle, NfAnomalyResults, NfAnomalyResultsGrouped, NodeRemovalCancelPermission, NodeToReplace, NosqlStorageLocations, OauthCodesForEdgeReg, ObjectFiles, ObjectTypeAccessSummary, ObjectsAlreadyAssignedToOrgs, Org, Orgs, OrgsByIds, OrgsForPrincipal, PendingAction, PendingActions, PhoenixRolloutProgress, PipelineHealthForTimeRange, PolarisInventorySubHierarchyRoot, PolicyDetails, PolicyObj, PolicyObjs, PrechecksStatus, PrechecksStatusWithNextJobInfo, PrivateContainerRegistry, ProductDocumentation, ProtectedObjectsList, ProtectedVolumesCount, QuarantinedDetailsForWorkload, QueryDatastoreFreespaceThresholds, RoleTemplates, SearchFileByPrefix, SnoozedDirectories, SupportBundle, SupportUserAccesses, TableFilters, Targets, TaskDetailGroupByList, TaskDetailList, Taskchain, TeamChannelNameAvailable, TotpConfigStatus, TprStatusForNodeRemoval, TunnelStatus, UniqueVcdCount, UnmanagedObjects, UnmanagedObjectsSupportedTypes, UpgradeStatus, UserActivities, UserAnalyzerAccess, UserAuditList, UserDetail, UserGroups, UserNotifications, UserSessionManagementConfig, UserSettings, UsersInCurrentAndDescendantOrganization, UsersOnAccountList, ValidateOrgName, VcdVappVms, VirtualMachineFiles, VmRecoveryJobsInfo, VolumeGroupMounts, WorkloadAlertSetting, or WorkloadAnomalies.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMisc -ActiveCustomAnalyzers).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMisc -ActiveCustomAnalyzers).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ActiveCustomAnalyzers operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ActiveCustomAnalyzers
             
             $query = New-RscQueryMisc -ActiveCustomAnalyzers
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AnalyzerConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AdVolumeExports operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AdVolumeExports
             
             $query = New-RscQueryMisc -AdVolumeExports
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someAdVolumeExportFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AdVolumeExportFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someAdVolumeExportSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AdVolumeExportSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AdVolumeExportConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AllowedOrgAdminOperations operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AllowedOrgAdminOperations
             
             $query = New-RscQueryMisc -AllowedOrgAdminOperations
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Operation&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AnalyzerGroups operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AnalyzerGroups
             
             $query = New-RscQueryMisc -AnalyzerGroups
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AnalyzerGroupConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AnalyzerUsages operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AnalyzerUsages
             
             $query = New-RscQueryMisc -AnalyzerUsages
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AnalyzerUsageConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AnomalyResultOpt operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AnomalyResultOpt
             
             $query = New-RscQueryMisc -AnomalyResultOpt
             
             # OPTIONAL
             $query.Var.clusterUuid = $someString
             # OPTIONAL
             $query.Var.snapshotId = $someString
             # OPTIONAL
             $query.Var.workloadId = $someString
             # OPTIONAL
             $query.Var.anomalyId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetAnomalyDetailsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AnomalyResults operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AnomalyResults
             
             $query = New-RscQueryMisc -AnomalyResults
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someAnomalyResultSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnomalyResultSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	managedId = @(
             		$someString
             	)
             	# OPTIONAL
             	startTime = $someDateTime
             	# OPTIONAL
             	endTime = $someDateTime
             	# OPTIONAL
             	isAnomaly = $someBoolean
             	# OPTIONAL
             	workloadFid = @(
             		$someString
             	)
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AnomalyResultConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AnomalyResultsGrouped operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AnomalyResultsGrouped
             
             $query = New-RscQueryMisc -AnomalyResultsGrouped
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.groupBy = $someAnomalyResultGroupBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnomalyResultGroupBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	managedId = @(
             		$someString
             	)
             	# OPTIONAL
             	startTime = $someDateTime
             	# OPTIONAL
             	endTime = $someDateTime
             	# OPTIONAL
             	isAnomaly = $someBoolean
             	# OPTIONAL
             	workloadFid = @(
             		$someString
             	)
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AnomalyResultGroupedDataConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AreMultiGeoBackupsEnabled operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AreMultiGeoBackupsEnabled
             
             $query = New-RscQueryMisc -AreMultiGeoBackupsEnabled
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AuthorizationsForGlobalResource operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AuthorizationsForGlobalResource
             
             $query = New-RscQueryMisc -AuthorizationsForGlobalResource
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Operation&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AuthorizationsForObject operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AuthorizationsForObject
             
             $query = New-RscQueryMisc -AuthorizationsForObject
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Operation&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AuthorizationsForObjects operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AuthorizationsForObjects
             
             $query = New-RscQueryMisc -AuthorizationsForObjects
             
             # REQUIRED
             $query.Var.fids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AuthorizedOperations&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AwsComputeSettings operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AwsComputeSettings
             
             $query = New-RscQueryMisc -AwsComputeSettings
             
             # OPTIONAL
             $query.Var.sortBy = $someAwsCloudComputeSettingQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudComputeSettingQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someAwsCloudComputeSettingFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsCloudComputeSettingFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AwsComputeSettings&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AzureResourceGroups operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AzureResourceGroups
             
             $query = New-RscQueryMisc -AzureResourceGroups
             
             # REQUIRED
             $query.Var.cloudAccountId = $someString
             # REQUIRED
             $query.Var.azureRegion = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AzureSubnets operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: AzureSubnets
             
             $query = New-RscQueryMisc -AzureSubnets
             
             # REQUIRED
             $query.Var.subnetRequest = @{
             	# OPTIONAL
             	cloudAccountId = $someString
             	# OPTIONAL
             	resourceGroup = $someString
             	# OPTIONAL
             	vnetName = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseCalendar operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: BrowseCalendar
             
             $query = New-RscQueryMisc -BrowseCalendar
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.folderId = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.calendarSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someCalendarSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	emailAddresses = @(
             		@{
             			# OPTIONAL
             			emailAddress = $someString
             			# OPTIONAL
             			filterType = $someCalendarEmailAddressFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarEmailAddressFilterType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	timerange = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someO365CalendarSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365CalendarSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	recurrenceFilter = @{
             		# OPTIONAL
             		recurrenceType = $someCalendarRecurrenceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarRecurrenceType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ExchangeObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseContacts operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: BrowseContacts
             
             $query = New-RscQueryMisc -BrowseContacts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.folderId = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.contactsSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someO365ContactsSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365ContactsSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ExchangeObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseFolder operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: BrowseFolder
             
             $query = New-RscQueryMisc -BrowseFolder
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.folderId = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ExchangeObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseOnedrive operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: BrowseOnedrive
             
             $query = New-RscQueryMisc -BrowseOnedrive
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.folderId = $someString
             # OPTIONAL
             $query.Var.onedriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseTeamsChannels operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: BrowseTeamsChannels
             
             $query = New-RscQueryMisc -BrowseTeamsChannels
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.channelMembershipTypeFilter = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamsChannelConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseTeamsDrive operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: BrowseTeamsDrive
             
             $query = New-RscQueryMisc -BrowseTeamsDrive
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.folderId = $someString
             # OPTIONAL
             $query.Var.teamsDriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmGuestCredentials operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CdmGuestCredentials
             
             $query = New-RscQueryMisc -CdmGuestCredentials
             
             # REQUIRED
             $query.Var.clusterUuids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CdmGuestCredential&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmInventorySubHierarchyRoot operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CdmInventorySubHierarchyRoot
             
             $query = New-RscQueryMisc -CdmInventorySubHierarchyRoot
             
             # REQUIRED
             $query.Var.rootEnum = $someInventorySubHierarchyRootEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventorySubHierarchyRootEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmInventorySubHierarchyRoot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmOvaDetails operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CdmOvaDetails
             
             $query = New-RscQueryMisc -CdmOvaDetails
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CdmOvaDetail&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmVersionCheck operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CdmVersionCheck
             
             $query = New-RscQueryMisc -CdmVersionCheck
             
             # REQUIRED
             $query.Var.featureToCdmVersion = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	featureType = $someCdmFeatureFlagType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmFeatureFlagType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FeatureCdmVersionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdpVmsInfos operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CdpVmsInfos
             
             $query = New-RscQueryMisc -CdpVmsInfos
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.allCdpVmInfoSort = @{
             	# OPTIONAL
             	type = $someCdpPerfDashboardSortType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdpPerfDashboardSortType]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.allCdpVmInfoFilter = @(
             	@{
             		# OPTIONAL
             		filterField = $someCdpPerfDashboardFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdpPerfDashboardFilterField]) for enum values.
             		# OPTIONAL
             		sourceClusterUuids = @(
             			$someString
             		)
             		# OPTIONAL
             		slaDomainIds = @(
             			$someString
             		)
             		# OPTIONAL
             		localStatus = @(
             			$someCdpLocalStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdpLocalStatus]) for enum values.
             		)
             		# OPTIONAL
             		replicationStatus = @(
             			$someCdpReplicationStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdpReplicationStatus]) for enum values.
             		)
             		# OPTIONAL
             		cdpIoFilterStatus = @(
             			$someIoFilterStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IoFilterStatus]) for enum values.
             		)
             		# OPTIONAL
             		vmName = $someString
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdpVmInfoConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CheckCloudComputeConnectivityJobProgress operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CheckCloudComputeConnectivityJobProgress
             
             $query = New-RscQueryMisc -CheckCloudComputeConnectivityJobProgress
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudDirectNasExport operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CloudDirectNasExport
             
             $query = New-RscQueryMisc -CloudDirectNasExport
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudDirectNasExport
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudDirectShares operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CloudDirectShares
             
             $query = New-RscQueryMisc -CloudDirectShares
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	systemName = $someString
             	# REQUIRED
             	exportType = $someShareTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ShareTypeEnum]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ShareExportIdPair&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudDirectSites operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CloudDirectSites
             
             $query = New-RscQueryMisc -CloudDirectSites
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CloudDirectSite&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CloudDirectSystems operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CloudDirectSystems
             
             $query = New-RscQueryMisc -CloudDirectSystems
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CloudDirectSystems
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ConfiguredGroupMembers operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ConfiguredGroupMembers
             
             $query = New-RscQueryMisc -ConfiguredGroupMembers
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.wildcard = $someString
             # REQUIRED
             $query.Var.pdls = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ConfiguredGroupMemberConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Crawl operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: Crawl
             
             $query = New-RscQueryMisc -Crawl
             
             # REQUIRED
             $query.Var.crawlId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Crawl
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Crawls operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: Crawls
             
             $query = New-RscQueryMisc -Crawls
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CrawlConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CurrentIpAddress operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CurrentIpAddress
             
             $query = New-RscQueryMisc -CurrentIpAddress
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CurrentOrg operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CurrentOrg
             
             $query = New-RscQueryMisc -CurrentOrg
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Org
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CurrentOrgAuthDomainConfig operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CurrentOrgAuthDomainConfig
             
             $query = New-RscQueryMisc -CurrentOrgAuthDomainConfig
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TenantAuthDomainConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CurrentOrgIdentityProviders operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CurrentOrgIdentityProviders
             
             $query = New-RscQueryMisc -CurrentOrgIdentityProviders
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;IdentityProvider&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CustomAnalyzer operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: CustomAnalyzer
             
             $query = New-RscQueryMisc -CustomAnalyzer
             
             # REQUIRED
             $query.Var.analyzerId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Analyzer
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DashboardSummary operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DashboardSummary
             
             $query = New-RscQueryMisc -DashboardSummary
             
             # REQUIRED
             $query.Var.getWhitelistedResults = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetDashboardSummaryReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatagovSecDesc operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DatagovSecDesc
             
             $query = New-RscQueryMisc -DatagovSecDesc
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.stdPath = $someString
             # OPTIONAL
             $query.Var.skipResolveSids = $someBoolean
             # OPTIONAL
             $query.Var.filters = @{
             	# OPTIONAL
             	resultsForSid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: QuerySddlReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DecryptExportUrl operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DecryptExportUrl
             
             $query = New-RscQueryMisc -DecryptExportUrl
             
             # OPTIONAL
             $query.Var.workloadFid = $someString
             # REQUIRED
             $query.Var.exportUrlSpecsEnc = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ExportUrlSpecs
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeploymentIpAddresses operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeploymentIpAddresses
             
             $query = New-RscQueryMisc -DeploymentIpAddresses
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DeploymentVersion operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DeploymentVersion
             
             $query = New-RscQueryMisc -DeploymentVersion
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DhrcActiveRecommendations operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DhrcActiveRecommendations
             
             $query = New-RscQueryMisc -DhrcActiveRecommendations
             
             # OPTIONAL
             $query.Var.categories = @(
             	$someDhrcCategory # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DhrcCategory]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;DhrcActiveRecommendation&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DhrcLatestMetrics operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DhrcLatestMetrics
             
             $query = New-RscQueryMisc -DhrcLatestMetrics
             
             # OPTIONAL
             $query.Var.categories = @(
             	$someDhrcCategory # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DhrcCategory]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;DhrcCollectedMetric&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DhrcScores operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DhrcScores
             
             $query = New-RscQueryMisc -DhrcScores
             
             # OPTIONAL
             $query.Var.categories = @(
             	$someDhrcCategory # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DhrcCategory]) for enum values.
             )
             # OPTIONAL
             $query.Var.beginTime = $someDateTime
             # OPTIONAL
             $query.Var.timespan = $someDhrcScoreTimespan # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DhrcScoreTimespan]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;DhrcScore&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DiffFmd operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DiffFmd
             
             $query = New-RscQueryMisc -DiffFmd
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.managedId = $someString
             # REQUIRED
             $query.Var.snapshotId = $someString
             # REQUIRED
             $query.Var.browseDiffPath = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DiffResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DiscoverNodes operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DiscoverNodes
             
             $query = New-RscQueryMisc -DiscoverNodes
             
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BootstrappableNodeInfoListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DiscoveryTimeline operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DiscoveryTimeline
             
             $query = New-RscQueryMisc -DiscoveryTimeline
             
             # REQUIRED
             $query.Var.startDay = $someString
             # REQUIRED
             $query.Var.endDay = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             # REQUIRED
             $query.Var.getWhitelistedResults = $someBoolean
             # REQUIRED
             $query.Var.workloadTypes = @(
             	$someDataGovObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DataGovObjectType]) for enum values.
             )
             # OPTIONAL
             $query.Var.useOptimisedDiscoveryTimeline = $someBoolean
             # OPTIONAL
             $query.Var.subscriptionIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetPoliciesTimelineReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DistributionListDigest operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DistributionListDigest
             
             $query = New-RscQueryMisc -DistributionListDigest
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	digestId = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: EventDigest
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DistributionListDigests operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DistributionListDigests
             
             $query = New-RscQueryMisc -DistributionListDigests
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;EventDigest&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DummyFieldWithAdminOnlyTag operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: DummyFieldWithAdminOnlyTag
             
             $query = New-RscQueryMisc -DummyFieldWithAdminOnlyTag
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EdgeWindowsToolLink operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: EdgeWindowsToolLink
             
             $query = New-RscQueryMisc -EdgeWindowsToolLink
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: EdgeWindowsToolLink
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EffectiveRbacPermissions operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: EffectiveRbacPermissions
             
             $query = New-RscQueryMisc -EffectiveRbacPermissions
             
             # REQUIRED
             $query.Var.roleId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;RbacPermission&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EventDigests operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: EventDigests
             
             $query = New-RscQueryMisc -EventDigests
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	recipientUserIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;EventDigest&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ExternalDeploymentName operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ExternalDeploymentName
             
             $query = New-RscQueryMisc -ExternalDeploymentName
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FailedRestoreItemsInfo operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: FailedRestoreItemsInfo
             
             $query = New-RscQueryMisc -FailedRestoreItemsInfo
             
             # REQUIRED
             $query.Var.workloadFid = $someString
             # REQUIRED
             $query.Var.taskchainId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FailedRestoreItemsInfoReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FederatedLoginStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: FederatedLoginStatus
             
             $query = New-RscQueryMisc -FederatedLoginStatus
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FederatedLoginStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FileActivities operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: FileActivities
             
             $query = New-RscQueryMisc -FileActivities
             
             # REQUIRED
             $query.Var.ListFileActivitiesInput = @{
             	# REQUIRED
             	snappableFid = $someString
             	# REQUIRED
             	stdPath = $someString
             	# REQUIRED
             	startDateTime = $someString
             	# REQUIRED
             	timezone = $someString
             }
             # REQUIRED
             $query.Var.FileActivitiesSort = @{
             	# OPTIONAL
             	sortBy = $someFileActivitiesSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileActivitiesSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UserActivityResultConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GeoLocationList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GeoLocationList
             
             $query = New-RscQueryMisc -GeoLocationList
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GroupCount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetAllRolesInOrgList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetAllRolesInOrgList
             
             $query = New-RscQueryMisc -GetAllRolesInOrgList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someRoleFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RoleFieldEnum]) for enum values.
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RoleConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetCdmReleaseDetailsForVersionFromSupportPortal operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetCdmReleaseDetailsForVersionFromSupportPortal
             
             $query = New-RscQueryMisc -GetCdmReleaseDetailsForVersionFromSupportPortal
             
             # REQUIRED
             $query.Var.listClusterUuid = @(
             	$someString
             )
             # REQUIRED
             $query.Var.filterVersion = $someString
             # REQUIRED
             $query.Var.fetchLinks = $someBoolean
             # REQUIRED
             $query.Var.filterUpgradeable = $someBoolean
             # REQUIRED
             $query.Var.shouldShowAll = $someBoolean
             # REQUIRED
             $query.Var.filterAfterSource = $someBoolean
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmUpgradeReleaseDetailsFromSupportPortalReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetCdmReleaseDetailsFromSupportPortal operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetCdmReleaseDetailsFromSupportPortal
             
             $query = New-RscQueryMisc -GetCdmReleaseDetailsFromSupportPortal
             
             # REQUIRED
             $query.Var.platform = $someString
             # REQUIRED
             $query.Var.nodeCount = $someInt64
             # REQUIRED
             $query.Var.sourceVersion = $someString
             # REQUIRED
             $query.Var.filterVersion = $someString
             # REQUIRED
             $query.Var.fetchLinks = $someBoolean
             # REQUIRED
             $query.Var.filterUpgradeable = $someBoolean
             # REQUIRED
             $query.Var.shouldShowAll = $someBoolean
             # REQUIRED
             $query.Var.filterAfterSource = $someBoolean
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmUpgradeReleaseDetailsFromSupportPortalReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetGroupCountByPrechecksStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetGroupCountByPrechecksStatus
             
             $query = New-RscQueryMisc -GetGroupCountByPrechecksStatus
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GroupCount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetGroupCountByUpgradeJobStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetGroupCountByUpgradeJobStatus
             
             $query = New-RscQueryMisc -GetGroupCountByUpgradeJobStatus
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GroupCount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetGroupCountByVersionStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetGroupCountByVersionStatus
             
             $query = New-RscQueryMisc -GetGroupCountByVersionStatus
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;GroupCount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetKorgTaskchainStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetKorgTaskchainStatus
             
             $query = New-RscQueryMisc -GetKorgTaskchainStatus
             
             # REQUIRED
             $query.Var.taskchainId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetTaskchainStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetPermissions operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetPermissions
             
             $query = New-RscQueryMisc -GetPermissions
             
             # REQUIRED
             $query.Var.roleId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Permission&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetRolesByIds operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetRolesByIds
             
             $query = New-RscQueryMisc -GetRolesByIds
             
             # REQUIRED
             $query.Var.roleIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Role&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GetUserDownloads operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GetUserDownloads
             
             $query = New-RscQueryMisc -GetUserDownloads
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;UserDownload&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalFileSearch operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GlobalFileSearch
             
             $query = New-RscQueryMisc -GlobalFileSearch
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	query = @{
             		# REQUIRED
             		regex = $someString
             		# REQUIRED
             		snappableIds = @(
             			$someString
             		)
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalFileSearchReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalLockoutConfig operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GlobalLockoutConfig
             
             $query = New-RscQueryMisc -GlobalLockoutConfig
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LockoutConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalMfaSetting operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GlobalMfaSetting
             
             $query = New-RscQueryMisc -GlobalMfaSetting
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetMfaSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalSearchResults operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GlobalSearchResults
             
             $query = New-RscQueryMisc -GlobalSearchResults
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HierarchyObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GroupsInCurrentAndDescendantOrganization operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GroupsInCurrentAndDescendantOrganization
             
             $query = New-RscQueryMisc -GroupsInCurrentAndDescendantOrganization
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	orgIdsFilter = @(
             		$someString
             	)
             	# OPTIONAL
             	roleIdsFilter = @(
             		$someString
             	)
             	# OPTIONAL
             	nameFilter = $someString
             }
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someGroupSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GroupSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.shouldIncludeGroupsWithoutRole = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GroupConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GuestCredentials operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GuestCredentials
             
             $query = New-RscQueryMisc -GuestCredentials
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GuestCredentialDetailListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GuestCredentialsV2 operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: GuestCredentialsV2
             
             $query = New-RscQueryMisc -GuestCredentialsV2
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someGuestOsCredentialFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GuestOsCredentialFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someGuestOsCredentialSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GuestOsCredentialSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GuestOsCredentialConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HasIdpConfigured operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: HasIdpConfigured
             
             $query = New-RscQueryMisc -HasIdpConfigured
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HelpContentSnippets operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: HelpContentSnippets
             
             $query = New-RscQueryMisc -HelpContentSnippets
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.filter = @{
             	# OPTIONAL
             	initiator = $someHelpContentSnippetsFilterInitiator # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HelpContentSnippetsFilterInitiator]) for enum values.
             	# OPTIONAL
             	query = $someString
             	# OPTIONAL
             	language = $someString
             	# OPTIONAL
             	source = $someHelpContentSource # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HelpContentSource]) for enum values.
             	# OPTIONAL
             	categories = @(
             		$someString
             	)
             	# REQUIRED
             	productDocumentationTypes = @(
             		$someProductDocumentationType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProductDocumentationType]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HelpContentSnippetConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HierarchyObject operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: HierarchyObject
             
             $query = New-RscQueryMisc -HierarchyObject
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HierarchyObject
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HierarchyObjects operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: HierarchyObjects
             
             $query = New-RscQueryMisc -HierarchyObjects
             
             # REQUIRED
             $query.Var.fids = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;HierarchyObject&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InstalledVersionList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: InstalledVersionList
             
             $query = New-RscQueryMisc -InstalledVersionList
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;InstalledVersionGroupCount&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InventoryRoot operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: InventoryRoot
             
             $query = New-RscQueryMisc -InventoryRoot
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InventoryRoot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InventorySubHierarchyRoot operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: InventorySubHierarchyRoot
             
             $query = New-RscQueryMisc -InventorySubHierarchyRoot
             
             # REQUIRED
             $query.Var.rootEnum = $someInventorySubHierarchyRootEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventorySubHierarchyRootEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InventorySubHierarchyRoot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InventoryWorkloads operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: InventoryWorkloads
             
             $query = New-RscQueryMisc -InventoryWorkloads
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;InventoryCard&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InvestigationCsvDownloadLink operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: InvestigationCsvDownloadLink
             
             $query = New-RscQueryMisc -InvestigationCsvDownloadLink
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.workloadId = $someString
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InvestigationCsvDownloadLinkReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IpWhitelist operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: IpWhitelist
             
             $query = New-RscQueryMisc -IpWhitelist
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetWhitelistReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsLoggedIntoRubrikSupportPortal operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: IsLoggedIntoRubrikSupportPortal
             
             $query = New-RscQueryMisc -IsLoggedIntoRubrikSupportPortal
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SupportPortalStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsSfdcReachable operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: IsSfdcReachable
             
             $query = New-RscQueryMisc -IsSfdcReachable
             
             # REQUIRED
             $query.Var.hostname = $someString
             # REQUIRED
             $query.Var.organizationId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsUpgradeAvailable operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: IsUpgradeAvailable
             
             $query = New-RscQueryMisc -IsUpgradeAvailable
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmUpgradeAvailabilityReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsUpgradeRecommended operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: IsUpgradeRecommended
             
             $query = New-RscQueryMisc -IsUpgradeRecommended
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmUpgradeRecommendationReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsZrsAvailableForLocation operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: IsZrsAvailableForLocation
             
             $query = New-RscQueryMisc -IsZrsAvailableForLocation
             
             # REQUIRED
             $query.Var.serviceTier = $someServiceTier # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ServiceTier]) for enum values.
             # REQUIRED
             $query.Var.region = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             # REQUIRED
             $query.Var.subscriptionId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ZrsAvailabilityReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Issue operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: Issue
             
             $query = New-RscQueryMisc -Issue
             
             # REQUIRED
             $query.Var.issueId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Issue
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Issues operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: Issues
             
             $query = New-RscQueryMisc -Issues
             
             # REQUIRED
             $query.Var.status = $someIssueStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.IssueStatus]) for enum values.
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: IssueConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IssuesJobIds operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: IssuesJobIds
             
             $query = New-RscQueryMisc -IssuesJobIds
             
             # REQUIRED
             $query.Var.queryIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;System.String&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the KnowledgeBaseArticle operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: KnowledgeBaseArticle
             
             $query = New-RscQueryMisc -KnowledgeBaseArticle
             
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: KnowledgeBaseArticle
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LambdaSettings operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: LambdaSettings
             
             $query = New-RscQueryMisc -LambdaSettings
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LambdaSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LicensedProducts operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: LicensedProducts
             
             $query = New-RscQueryMisc -LicensedProducts
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetLicensedProductsInfoReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LockoutConfig operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: LockoutConfig
             
             $query = New-RscQueryMisc -LockoutConfig
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LockoutConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MaxProtectedAppsCount operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: MaxProtectedAppsCount
             
             $query = New-RscQueryMisc -MaxProtectedAppsCount
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Int32
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MfaSetting operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: MfaSetting
             
             $query = New-RscQueryMisc -MfaSetting
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetMfaSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MinimumCdmVersionForFeatureSet operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: MinimumCdmVersionForFeatureSet
             
             $query = New-RscQueryMisc -MinimumCdmVersionForFeatureSet
             
             # REQUIRED
             $query.Var.featureListMinimumCdmVersion = @{
             	# REQUIRED
             	featureTypes = @(
             		$someCdmFeatureFlagType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmFeatureFlagType]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FeatureListMinimumCdmVersionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NetworkThrottle operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: NetworkThrottle
             
             $query = New-RscQueryMisc -NetworkThrottle
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	resourceId = $someInternalQueryNetworkThrottleRequestResourceId # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InternalQueryNetworkThrottleRequestResourceId]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NetworkThrottleSummaryListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NfAnomalyResults operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: NfAnomalyResults
             
             $query = New-RscQueryMisc -NfAnomalyResults
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someNfAnomalyResultSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NfAnomalyResultSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	startTime = $someDateTime
             	# OPTIONAL
             	endTime = $someDateTime
             	# OPTIONAL
             	isAnomaly = $someBoolean
             	# OPTIONAL
             	workloadFid = @(
             		$someString
             	)
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NfAnomalyResultConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NfAnomalyResultsGrouped operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: NfAnomalyResultsGrouped
             
             $query = New-RscQueryMisc -NfAnomalyResultsGrouped
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.groupBy = $someNfAnomalyResultGroupBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NfAnomalyResultGroupBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	startTime = $someDateTime
             	# OPTIONAL
             	endTime = $someDateTime
             	# OPTIONAL
             	isAnomaly = $someBoolean
             	# OPTIONAL
             	workloadFid = @(
             		$someString
             	)
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NfAnomalyResultGroupedDataConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NodeRemovalCancelPermission operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: NodeRemovalCancelPermission
             
             $query = New-RscQueryMisc -NodeRemovalCancelPermission
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NodeRemovalCancelPermissionReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NodeToReplace operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: NodeToReplace
             
             $query = New-RscQueryMisc -NodeToReplace
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NodeToReplaceReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NosqlStorageLocations operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: NosqlStorageLocations
             
             $query = New-RscQueryMisc -NosqlStorageLocations
             
             # OPTIONAL
             $query.Var.sortBy = $someMosaicStorageLocationQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicStorageLocationQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someMosaicStorageLocationFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicStorageLocationFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;MosaicStorageLocation&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OauthCodesForEdgeReg operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: OauthCodesForEdgeReg
             
             $query = New-RscQueryMisc -OauthCodesForEdgeReg
             
             # REQUIRED
             $query.Var.numberOfEdges = $someInt
             # REQUIRED
             $query.Var.cdmOvaLink = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OauthCodesForEdgeRegReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectFiles operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ObjectFiles
             
             $query = New-RscQueryMisc -ObjectFiles
             
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	openAccessTypes = @(
             		$someOpenAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OpenAccessType]) for enum values.
             	)
             	# OPTIONAL
             	stalenessTypes = @(
             		$someStalenessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StalenessType]) for enum values.
             	)
             	# OPTIONAL
             	analyzerGroupIds = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterIds = @(
             		$someString
             	)
             	# OPTIONAL
             	pathPrefix = $someString
             	# OPTIONAL
             	snappableTypes = @(
             		$someString
             	)
             	# OPTIONAL
             	searchText = $someString
             	# OPTIONAL
             	whitelistEnabled = $someBoolean
             	# OPTIONAL
             	fileCountTypes = @(
             		$someFileCountType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileCountType]) for enum values.
             	)
             	# OPTIONAL
             	accessTypes = @(
             		$someAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AccessType]) for enum values.
             	)
             	# OPTIONAL
             	activityTypes = @(
             		$someActivityAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityAccessType]) for enum values.
             	)
             	# OPTIONAL
             	objectIds = @(
             		$someString
             	)
             	# OPTIONAL
             	inodeTypes = @(
             		$someInodeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InodeType]) for enum values.
             	)
             	# REQUIRED
             	objectTypes = @(
             		$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             	)
             }
             # OPTIONAL
             $query.Var.sort = @{
             	# OPTIONAL
             	sortBy = $someFileResultSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileResultSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             	# OPTIONAL
             	analyzerGroupId = $someString
             }
             # REQUIRED
             $query.Var.day = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FileResultConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectTypeAccessSummary operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ObjectTypeAccessSummary
             
             $query = New-RscQueryMisc -ObjectTypeAccessSummary
             
             # REQUIRED
             $query.Var.timelineDate = $someString
             # REQUIRED
             $query.Var.historicalDeltaDays = $someInt
             # OPTIONAL
             $query.Var.includeWhitelistedResults = $someBoolean
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	policyId = $someString
             	# OPTIONAL
             	objectTypes = @(
             		$someDataGovObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DataGovObjectType]) for enum values.
             	)
             }
             # OPTIONAL
             $query.Var.sort = $someObjectTypeAccessSummarySortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeAccessSummarySortBy]) for enum values.
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ObjectTypeAccessSummaryConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectsAlreadyAssignedToOrgs operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ObjectsAlreadyAssignedToOrgs
             
             $query = New-RscQueryMisc -ObjectsAlreadyAssignedToOrgs
             
             # REQUIRED
             $query.Var.objectIdsForHierarchyTypes = @(
             	@{
             		# REQUIRED
             		objectIds = @(
             			$someString
             		)
             		# REQUIRED
             		snappableType = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             }
             )
             # REQUIRED
             $query.Var.allowedClusters = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.targetOrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ObjectIdsForHierarchyType&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Org operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: Org
             
             $query = New-RscQueryMisc -Org
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Org
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Orgs operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: Orgs
             
             $query = New-RscQueryMisc -Orgs
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someOrgField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OrgField]) for enum values.
             # OPTIONAL
             $query.Var.nameFilter = $someString
             # OPTIONAL
             $query.Var.mfaEnforcedFilter = $someBoolean
             # OPTIONAL
             $query.Var.crossAccountEnabledFilter = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OrgConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgsByIds operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: OrgsByIds
             
             $query = New-RscQueryMisc -OrgsByIds
             
             # REQUIRED
             $query.Var.orgIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Org&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgsForPrincipal operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: OrgsForPrincipal
             
             $query = New-RscQueryMisc -OrgsForPrincipal
             
             # OPTIONAL
             $query.Var.orgSearchFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OrgsForPrincipalReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PendingAction operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PendingAction
             
             $query = New-RscQueryMisc -PendingAction
             
             # REQUIRED
             $query.Var.pendingActionId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PendingAction
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PendingActions operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PendingActions
             
             $query = New-RscQueryMisc -PendingActions
             
             # OPTIONAL
             $query.Var.clusterFilter = $someString
             # OPTIONAL
             $query.Var.pendingActionGroupTypeFilter = @(
             	$somePendingActionGroupTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PendingActionGroupTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.pendingActionSubGroupTypeFilter = @(
             	$somePendingActionSubGroupTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PendingActionSubGroupTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.statusFilter = @(
             	$somePendingActionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PendingActionStatus]) for enum values.
             )
             # OPTIONAL
             $query.Var.objectIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.sortedOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.historyOnly = $someBoolean
             # OPTIONAL
             $query.Var.limit = $someInt64
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;PendingAction&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PhoenixRolloutProgress operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PhoenixRolloutProgress
             
             $query = New-RscQueryMisc -PhoenixRolloutProgress
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PhoenixRolloutProgress
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PipelineHealthForTimeRange operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PipelineHealthForTimeRange
             
             $query = New-RscQueryMisc -PipelineHealthForTimeRange
             
             # REQUIRED
             $query.Var.beginTime = $someDateTime
             # OPTIONAL
             $query.Var.endTime = $someDateTime
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetPipelineHealthReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PolarisInventorySubHierarchyRoot operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PolarisInventorySubHierarchyRoot
             
             $query = New-RscQueryMisc -PolarisInventorySubHierarchyRoot
             
             # REQUIRED
             $query.Var.rootEnum = $someInventorySubHierarchyRootEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InventorySubHierarchyRootEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PolarisInventorySubHierarchyRoot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PolicyDetails operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PolicyDetails
             
             $query = New-RscQueryMisc -PolicyDetails
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PolicyDetailConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PolicyObj operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PolicyObj
             
             $query = New-RscQueryMisc -PolicyObj
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.includeWhitelistedResults = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PolicyObj
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PolicyObjs operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PolicyObjs
             
             $query = New-RscQueryMisc -PolicyObjs
             
             # REQUIRED
             $query.Var.day = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             # REQUIRED
             $query.Var.workloadTypes = @(
             	$someDataGovObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DataGovObjectType]) for enum values.
             )
             # OPTIONAL
             $query.Var.sortBy = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.analysisStatusesFilter = @(
             	$someAnalysisStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnalysisStatus]) for enum values.
             )
             # OPTIONAL
             $query.Var.policyIdsFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.riskLevelsFilter = @(
             	$someRiskLevelType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RiskLevelType]) for enum values.
             )
             # OPTIONAL
             $query.Var.clusterIdsFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.searchObjectName = $someString
             # OPTIONAL
             $query.Var.subscriptionIdsFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.includeWhitelistedResults = $someBoolean
             # OPTIONAL
             $query.Var.sids = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.insightsMetadataId = $someString
             # OPTIONAL
             $query.Var.includeInsightsMarker = $someBoolean
             # REQUIRED
             $query.Var.userAccessObjectsFilter = $someBoolean
             # OPTIONAL
             $query.Var.objectIdsFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PolicyObjConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrechecksStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PrechecksStatus
             
             $query = New-RscQueryMisc -PrechecksStatus
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrechecksStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrechecksStatusWithNextJobInfo operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PrechecksStatusWithNextJobInfo
             
             $query = New-RscQueryMisc -PrechecksStatusWithNextJobInfo
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrechecksStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrivateContainerRegistry operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: PrivateContainerRegistry
             
             $query = New-RscQueryMisc -PrivateContainerRegistry
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	exocomputeAccountId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PrivateContainerRegistryReplyType
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ProductDocumentation operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ProductDocumentation
             
             $query = New-RscQueryMisc -ProductDocumentation
             
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ProductDocumentation
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ProtectedObjectsList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ProtectedObjectsList
             
             $query = New-RscQueryMisc -ProtectedObjectsList
             
             # OPTIONAL
             $query.Var.rootOptionalFid = $someString
             # REQUIRED
             $query.Var.slaIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.objectTypeFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ProtectedObjectsConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ProtectedVolumesCount operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ProtectedVolumesCount
             
             $query = New-RscQueryMisc -ProtectedVolumesCount
             
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Int32
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the QuarantinedDetailsForWorkload operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: QuarantinedDetailsForWorkload
             
             $query = New-RscQueryMisc -QuarantinedDetailsForWorkload
             
             # REQUIRED
             $query.Var.workloadId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;QuarantineSpec&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the QueryDatastoreFreespaceThresholds operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: QueryDatastoreFreespaceThresholds
             
             $query = New-RscQueryMisc -QueryDatastoreFreespaceThresholds
             
             # REQUIRED
             $query.Var.queryDatastoreFreespaceThresholdsInput = @(
             	@{
             		# REQUIRED
             		clusterUuid = $someString
             		# OPTIONAL
             		vmId = $someString
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: QueryDatastoreFreespaceThresholdsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RoleTemplates operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: RoleTemplates
             
             $query = New-RscQueryMisc -RoleTemplates
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RoleTemplateConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SearchFileByPrefix operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SearchFileByPrefix
             
             $query = New-RscQueryMisc -SearchFileByPrefix
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.managedId = $someString
             # REQUIRED
             $query.Var.snapshotId = $someString
             # REQUIRED
             $query.Var.searchFolderPath = $someString
             # REQUIRED
             $query.Var.filenamePrefix = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DiffResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnoozedDirectories operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SnoozedDirectories
             
             $query = New-RscQueryMisc -SnoozedDirectories
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.snoozeStatusFilter = @(
             	$someSnoozeStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnoozeStatus]) for enum values.
             )
             # OPTIONAL
             $query.Var.directorySearchFilter = $someString
             # OPTIONAL
             $query.Var.falsePositiveTypeFilter = @(
             	$someAnomalyFalsePositiveType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AnomalyFalsePositiveType]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnoozedDirectoryConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SupportBundle operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SupportBundle
             
             $query = New-RscQueryMisc -SupportBundle
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SupportUserAccesses operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: SupportUserAccesses
             
             $query = New-RscQueryMisc -SupportUserAccesses
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someSupportUserAccessSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SupportUserAccessSortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		text = $someString
             		# REQUIRED
             		field = $someSupportUserAccessFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SupportUserAccessFilterField]) for enum values.
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SupportUserAccessConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TableFilters operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TableFilters
             
             $query = New-RscQueryMisc -TableFilters
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TableFilters
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Targets operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: Targets
             
             $query = New-RscQueryMisc -Targets
             
             # OPTIONAL
             $query.Var.sortBy = $someArchivalLocationQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ArchivalLocationQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someTargetQueryFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TargetQueryFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Target&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TaskDetailGroupByList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TaskDetailGroupByList
             
             $query = New-RscQueryMisc -TaskDetailGroupByList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterType = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	objectType = @(
             		$someString
             	)
             	# OPTIONAL
             	slaDomain = @{
             		# OPTIONAL
             		id = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	replicationSource = @(
             		$someString
             	)
             	# OPTIONAL
             	taskCategory = @(
             		$someString
             	)
             	# OPTIONAL
             	taskStatus = @(
             		$someString
             	)
             	# OPTIONAL
             	taskType = @(
             		$someString
             	)
             	# OPTIONAL
             	time_gt = $someDateTime
             	# OPTIONAL
             	time_lt = $someDateTime
             	# OPTIONAL
             	searchTerm = $someString
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             }
             # REQUIRED
             $query.Var.groupBy = $someTaskDetailGroupByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TaskDetailGroupByEnum]) for enum values.
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TaskDetailGroupByConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TaskDetailList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TaskDetailList
             
             $query = New-RscQueryMisc -TaskDetailList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterType = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterLocation = @(
             		$someString
             	)
             	# OPTIONAL
             	objectType = @(
             		$someString
             	)
             	# OPTIONAL
             	slaDomain = @{
             		# OPTIONAL
             		id = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	replicationSource = @(
             		$someString
             	)
             	# OPTIONAL
             	taskCategory = @(
             		$someString
             	)
             	# OPTIONAL
             	taskStatus = @(
             		$someString
             	)
             	# OPTIONAL
             	taskType = @(
             		$someString
             	)
             	# OPTIONAL
             	time_gt = $someDateTime
             	# OPTIONAL
             	time_lt = $someDateTime
             	# OPTIONAL
             	searchTerm = $someString
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             }
             # OPTIONAL
             $query.Var.sortBy = $someTaskDetailSortByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TaskDetailSortByEnum]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TaskDetailConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Taskchain operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: Taskchain
             
             $query = New-RscQueryMisc -Taskchain
             
             # REQUIRED
             $query.Var.taskchainId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: Taskchain
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamChannelNameAvailable operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TeamChannelNameAvailable
             
             $query = New-RscQueryMisc -TeamChannelNameAvailable
             
             # REQUIRED
             $query.Var.teamUUID = $someString
             # REQUIRED
             $query.Var.channelName = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TotpConfigStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TotpConfigStatus
             
             $query = New-RscQueryMisc -TotpConfigStatus
             
             # REQUIRED
             $query.Var.userId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetTotpStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TprStatusForNodeRemoval operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TprStatusForNodeRemoval
             
             $query = New-RscQueryMisc -TprStatusForNodeRemoval
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	tprRequestId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: TprStatusForNodeRemoval
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TunnelStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: TunnelStatus
             
             $query = New-RscQueryMisc -TunnelStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SupportTunnelInfo
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UniqueVcdCount operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UniqueVcdCount
             
             $query = New-RscQueryMisc -UniqueVcdCount
             
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Int32
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmanagedObjects operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UnmanagedObjects
             
             $query = New-RscQueryMisc -UnmanagedObjects
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	name = $someString
             	# REQUIRED
             	unmanagedStatuses = @(
             		$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             	)
             	# REQUIRED
             	objectTypes = @(
             		$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             	)
             	# REQUIRED
             	retentionSlaDomainIds = @(
             		$someString
             	)
             	# OPTIONAL
             	sortParam = @{
             		# OPTIONAL
             		type = $someUnmanagedObjectsSortType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectsSortType]) for enum values.
             		# OPTIONAL
             		sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             	}
             	# OPTIONAL
             	objectId = $someString
             	# OPTIONAL
             	regions = @(
             		@{
             			# REQUIRED
             			gcpNativeRegion = $someString
             			# REQUIRED
             			awsNativeRegion = $someAwsNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeRegion]) for enum values.
             			# REQUIRED
             			azureNativeRegion = $someAzureNativeRegion # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeRegion]) for enum values.
             		}
             	)
             	# OPTIONAL
             	cloudAccountIds = @(
             		$someString
             	)
             	# OPTIONAL
             	managedBy = $someCloudVendor # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CloudVendor]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UnmanagedObjectDetailConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmanagedObjectsSupportedTypes operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UnmanagedObjectsSupportedTypes
             
             $query = New-RscQueryMisc -UnmanagedObjectsSupportedTypes
             
             # OPTIONAL
             $query.Var.productType = $someProductTargetType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProductTargetType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ManagedObjectType&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UpgradeStatus operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UpgradeStatus
             
             $query = New-RscQueryMisc -UpgradeStatus
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpgradeStatusReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserActivities operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UserActivities
             
             $query = New-RscQueryMisc -UserActivities
             
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	openAccessTypes = @(
             		$someOpenAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OpenAccessType]) for enum values.
             	)
             	# OPTIONAL
             	stalenessTypes = @(
             		$someStalenessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.StalenessType]) for enum values.
             	)
             	# OPTIONAL
             	analyzerGroupIds = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterIds = @(
             		$someString
             	)
             	# OPTIONAL
             	pathPrefix = $someString
             	# OPTIONAL
             	snappableTypes = @(
             		$someString
             	)
             	# OPTIONAL
             	searchText = $someString
             	# OPTIONAL
             	whitelistEnabled = $someBoolean
             	# OPTIONAL
             	fileCountTypes = @(
             		$someFileCountType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileCountType]) for enum values.
             	)
             	# OPTIONAL
             	accessTypes = @(
             		$someAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AccessType]) for enum values.
             	)
             	# OPTIONAL
             	activityTypes = @(
             		$someActivityAccessType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivityAccessType]) for enum values.
             	)
             	# OPTIONAL
             	objectIds = @(
             		$someString
             	)
             	# OPTIONAL
             	inodeTypes = @(
             		$someInodeType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.InodeType]) for enum values.
             	)
             	# REQUIRED
             	objectTypes = @(
             		$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             	)
             }
             # OPTIONAL
             $query.Var.sort = @{
             	# OPTIONAL
             	sortBy = $someFileResultSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.FileResultSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             	# OPTIONAL
             	analyzerGroupId = $someString
             }
             # OPTIONAL
             $query.Var.timeRange = @{
             	# OPTIONAL
             	startTime = $someString
             	# OPTIONAL
             	endTime = $someString
             	# OPTIONAL
             	timezone = $someString
             }
             # REQUIRED
             $query.Var.userId = $someString
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FileResultConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserAnalyzerAccess operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UserAnalyzerAccess
             
             $query = New-RscQueryMisc -UserAnalyzerAccess
             
             # REQUIRED
             $query.Var.userId = $someString
             # REQUIRED
             $query.Var.startDay = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             # REQUIRED
             $query.Var.limit = $someInt
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AnalyzerAccessUsageConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserAuditList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UserAuditList
             
             $query = New-RscQueryMisc -UserAuditList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someUserAuditSortField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserAuditSortField]) for enum values.
             # OPTIONAL
             $query.Var.filters = @{
             	# OPTIONAL
             	auditSeverity = @(
             		$someAuditSeverity # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuditSeverity]) for enum values.
             	)
             	# OPTIONAL
             	auditStatus = @(
             		$someAuditStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuditStatus]) for enum values.
             	)
             	# OPTIONAL
             	auditType = @(
             		$someAuditType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuditType]) for enum values.
             	)
             	# OPTIONAL
             	auditObjectType = @(
             		$someAuditObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AuditObjectType]) for enum values.
             	)
             	# OPTIONAL
             	clusterId = @(
             		$someString
             	)
             	# OPTIONAL
             	objectIds = @(
             		$someString
             	)
             	# OPTIONAL
             	objectFids = @(
             		$someString
             	)
             	# OPTIONAL
             	timeGt = $someDateTime
             	# OPTIONAL
             	timeLt = $someDateTime
             	# OPTIONAL
             	hasUserNote = $someBoolean
             	# OPTIONAL
             	searchTerm = $someString
             	# OPTIONAL
             	orgIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UserAuditConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserDetail operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UserDetail
             
             $query = New-RscQueryMisc -UserDetail
             
             # REQUIRED
             $query.Var.userId = $someString
             # REQUIRED
             $query.Var.startDay = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetUserDetailReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserGroups operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UserGroups
             
             $query = New-RscQueryMisc -UserGroups
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.roleIdsFilter = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;Group&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserNotifications operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UserNotifications
             
             $query = New-RscQueryMisc -UserNotifications
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UserNotifications
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserSessionManagementConfig operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UserSessionManagementConfig
             
             $query = New-RscQueryMisc -UserSessionManagementConfig
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetUserSessionManagementConfigReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserSettings operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UserSettings
             
             $query = New-RscQueryMisc -UserSettings
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UserSettings
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UsersInCurrentAndDescendantOrganization operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UsersInCurrentAndDescendantOrganization
             
             $query = New-RscQueryMisc -UsersInCurrentAndDescendantOrganization
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someUserSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	emailFilter = $someString
             	# OPTIONAL
             	domainFilter = @(
             		$someUserDomainEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserDomainEnum]) for enum values.
             	)
             	# OPTIONAL
             	orgIdsFilter = @(
             		$someString
             	)
             	# OPTIONAL
             	roleIdsFilter = @(
             		$someString
             	)
             	# OPTIONAL
             	lockoutStateFilter = $someLockoutStateFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LockoutStateFilter]) for enum values.
             	# OPTIONAL
             	hiddenStateFilter = $someHiddenStateFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HiddenStateFilter]) for enum values.
             }
             # OPTIONAL
             $query.Var.shouldIncludeUserWithoutRole = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UserConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UsersOnAccountList operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: UsersOnAccountList
             
             $query = New-RscQueryMisc -UsersOnAccountList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someUserFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UserFieldEnum]) for enum values.
             # OPTIONAL
             $query.Var.emailFilter = $someString
             # OPTIONAL
             $query.Var.roleIdsFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.lockoutStateFilter = $someLockoutStateFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LockoutStateFilter]) for enum values.
             # OPTIONAL
             $query.Var.hiddenStateFilter = $someHiddenStateFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HiddenStateFilter]) for enum values.
             # REQUIRED
             $query.Var.shouldGetLocalUsersOnly = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UserConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidateOrgName operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: ValidateOrgName
             
             $query = New-RscQueryMisc -ValidateOrgName
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	fullName = $someString
             	# OPTIONAL
             	name = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidateOrgNameReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VcdVappVms operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: VcdVappVms
             
             $query = New-RscQueryMisc -VcdVappVms
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVmConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VirtualMachineFiles operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: VirtualMachineFiles
             
             $query = New-RscQueryMisc -VirtualMachineFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VirtualMachineFilesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmRecoveryJobsInfo operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: VmRecoveryJobsInfo
             
             $query = New-RscQueryMisc -VmRecoveryJobsInfo
             
             # REQUIRED
             $query.Var.fid = $someString
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	failoverId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;VmRecoveryJobInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VolumeGroupMounts operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: VolumeGroupMounts
             
             $query = New-RscQueryMisc -VolumeGroupMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someVolumeGroupLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VolumeGroupLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someVolumeGroupLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VolumeGroupLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VolumeGroupLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WorkloadAlertSetting operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: WorkloadAlertSetting
             
             $query = New-RscQueryMisc -WorkloadAlertSetting
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.workloadId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetWorkloadAlertSettingReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the WorkloadAnomalies operation
             of the 'Miscellaneous' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Misc
             # API Operation: WorkloadAnomalies
             
             $query = New-RscQueryMisc -WorkloadAnomalies
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.beginTime = $someDateTime
             # OPTIONAL
             $query.Var.endTime = $someDateTime
             # OPTIONAL
             $query.Var.workloadNameSearch = $someString
             # OPTIONAL
             $query.Var.objectTypeFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.clusterUuidFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.slaFidFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.encryptionFilter = @(
             	$someEncryptionLevel # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EncryptionLevel]) for enum values.
             )
             # OPTIONAL
             $query.Var.severityFilter = @(
             	$someActivitySeverityEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ActivitySeverityEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.analyzerGroupFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.sortBy = $someWorkloadAnomaliesSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadAnomaliesSortBy]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.orderParentsFirst = $someBoolean
             # OPTIONAL
             $query.Var.blueprintRecoveryTypes = @(
             	$someBlueprintRecoveryType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.BlueprintRecoveryType]) for enum values.
             )
             # OPTIONAL
             $query.Var.locationsFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.resolutionStatusFilter = @(
             	$someResolutionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ResolutionStatus]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: WorkloadAnomalyConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryMongo">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Mongo' API domain:
             BulkRecoverableRanges, Collection, Collections, Database, Databases, RecoverableRanges, Source, or Sources.
             </summary>
             <description>
             New-RscQueryMongo creates a new
             query object for operations
             in the 'Mongo' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Mongo' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkRecoverableRanges, Collection, Collections, Database, Databases, RecoverableRanges, Source, or Sources.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMongo -BulkRecoverableRanges).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMongo -BulkRecoverableRanges).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkRecoverableRanges operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: BulkRecoverableRanges
             
             $query = New-RscQueryMongo -BulkRecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	source = $someString
             	# OPTIONAL
             	databases = @(
             		$someString
             	)
             	# OPTIONAL
             	collections = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoRecoverableRanges
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Collection operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Collection
             
             $query = New-RscQueryMongo -Collection
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoCollection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Collections operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Collections
             
             $query = New-RscQueryMongo -Collections
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoCollectionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Database operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Database
             
             $query = New-RscQueryMongo -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Databases
             
             $query = New-RscQueryMongo -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: RecoverableRanges
             
             $query = New-RscQueryMongo -RecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	source = $someString
             	# OPTIONAL
             	databases = @(
             		$someString
             	)
             	# OPTIONAL
             	collections = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoRecoverableRanges
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Source operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Source
             
             $query = New-RscQueryMongo -Source
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoSource
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Sources operation
             of the 'Mongo' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mongo
             # API Operation: Sources
             
             $query = New-RscQueryMongo -Sources
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongoSourceConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryMongoDb">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Mongo DB' API domain:
             BulkRecoverableRange, Collection, CollectionRecoverableRange, Collections, Database, Databases, Source, or Sources.
             </summary>
             <description>
             New-RscQueryMongoDb creates a new
             query object for operations
             in the 'Mongo DB' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Mongo DB' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkRecoverableRange, Collection, CollectionRecoverableRange, Collections, Database, Databases, Source, or Sources.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMongoDb -BulkRecoverableRange).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMongoDb -BulkRecoverableRange).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkRecoverableRange operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: BulkRecoverableRange
             
             $query = New-RscQueryMongoDb -BulkRecoverableRange
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryRangeData = @{
             		# OPTIONAL
             		sourceType = $someMosaicBulkRecoverableRangeRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicBulkRecoverableRangeRequestSourceType]) for enum values.
             		# REQUIRED
             		managementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicRecoveryRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Collection operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: Collection
             
             $query = New-RscQueryMongoDb -Collection
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbCollection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CollectionRecoverableRange operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: CollectionRecoverableRange
             
             $query = New-RscQueryMongoDb -CollectionRecoverableRange
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryRangeRequestData = @{
             		# OPTIONAL
             		sourceType = $someMosaicRecoverableRangeRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicRecoverableRangeRequestSourceType]) for enum values.
             		# REQUIRED
             		databaseName = $someString
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		tableName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetMosaicRecoverableRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Collections operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: Collections
             
             $query = New-RscQueryMongoDb -Collections
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbCollectionConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Database operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: Database
             
             $query = New-RscQueryMongoDb -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: Databases
             
             $query = New-RscQueryMongoDb -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Source operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: Source
             
             $query = New-RscQueryMongoDb -Source
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbSource
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Sources operation
             of the 'Mongo DB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    MongoDb
             # API Operation: Sources
             
             $query = New-RscQueryMongoDb -Sources
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MongodbSourceConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryMosaic">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Mosaic' API domain:
             BulkRecoveryRange, Snapshots, Stores, or Versions.
             </summary>
             <description>
             New-RscQueryMosaic creates a new
             query object for operations
             in the 'Mosaic' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Mosaic' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BulkRecoveryRange, Snapshots, Stores, or Versions.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMosaic -BulkRecoveryRange).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMosaic -BulkRecoveryRange).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BulkRecoveryRange operation
             of the 'Mosaic' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mosaic
             # API Operation: BulkRecoveryRange
             
             $query = New-RscQueryMosaic -BulkRecoveryRange
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	recoveryRangeData = @{
             		# OPTIONAL
             		sourceType = $someMosaicBulkRecoverableRangeRequestSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MosaicBulkRecoverableRangeRequestSourceType]) for enum values.
             		# REQUIRED
             		managementObjects = @{
             			# OPTIONAL
             			databases = @(
             				@{
             					# OPTIONAL
             					dbName = $someString
             					# OPTIONAL
             					tables = @(
             						$someString
             					)
             				}
             			)
             		}
             		# REQUIRED
             		sourceName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MosaicRecoveryRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Snapshots operation
             of the 'Mosaic' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mosaic
             # API Operation: Snapshots
             
             $query = New-RscQueryMosaic -Snapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	versionData = @{
             		# OPTIONAL
             		maxEntries = $someInt
             		# OPTIONAL
             		since = $someInt
             		# OPTIONAL
             		upto = $someInt
             		# OPTIONAL
             		sourceType = $someVersionSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VersionSourceType]) for enum values.
             		# REQUIRED
             		databaseName = $someString
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		tableName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ListVersionResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Stores operation
             of the 'Mosaic' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mosaic
             # API Operation: Stores
             
             $query = New-RscQueryMosaic -Stores
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ListStoreResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Versions operation
             of the 'Mosaic' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mosaic
             # API Operation: Versions
             
             $query = New-RscQueryMosaic -Versions
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	versionData = @{
             		# OPTIONAL
             		maxEntries = $someInt
             		# OPTIONAL
             		since = $someInt
             		# OPTIONAL
             		upto = $someInt
             		# OPTIONAL
             		sourceType = $someVersionSourceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VersionSourceType]) for enum values.
             		# REQUIRED
             		databaseName = $someString
             		# REQUIRED
             		sourceName = $someString
             		# REQUIRED
             		tableName = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ListVersionResponse
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryMssql">
             <summary>
             Create a new RscQuery object for any of the 17
             operations in the 'Microsoft SQL Server' API domain:
             AvailabilityGroup, CdmLogShippingTarget, CdmLogShippingTargets, CompatibleInstances, Database, DatabaseLiveMounts, DatabaseMissedRecoverableRanges, DatabaseMissedSnapshots, DatabaseRestoreEstimate, DatabaseRestoreFiles, Databases, DefaultProperties, DefaultPropertiesOnCluster, Instance, LogShippingTargets, RecoverableRanges, or TopLevelDescendants.
             </summary>
             <description>
             New-RscQueryMssql creates a new
             query object for operations
             in the 'Microsoft SQL Server' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 17 operations
             in the 'Microsoft SQL Server' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AvailabilityGroup, CdmLogShippingTarget, CdmLogShippingTargets, CompatibleInstances, Database, DatabaseLiveMounts, DatabaseMissedRecoverableRanges, DatabaseMissedSnapshots, DatabaseRestoreEstimate, DatabaseRestoreFiles, Databases, DefaultProperties, DefaultPropertiesOnCluster, Instance, LogShippingTargets, RecoverableRanges, or TopLevelDescendants.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMssql -AvailabilityGroup).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryMssql -AvailabilityGroup).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AvailabilityGroup operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: AvailabilityGroup
             
             $query = New-RscQueryMssql -AvailabilityGroup
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlAvailabilityGroup
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmLogShippingTarget operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: CdmLogShippingTarget
             
             $query = New-RscQueryMssql -CdmLogShippingTarget
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlLogShippingTarget
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmLogShippingTargets operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: CdmLogShippingTargets
             
             $query = New-RscQueryMssql -CdmLogShippingTargets
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someMssqlLogShippingTargetSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlLogShippingTargetSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someMssqlLogShippingTargetFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlLogShippingTargetFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlLogShippingTargetConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CompatibleInstances operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: CompatibleInstances
             
             $query = New-RscQueryMssql -CompatibleInstances
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	recoveryTime = $someDateTime
             	# REQUIRED
             	recoveryType = $someV1GetCompatibleMssqlInstancesV1RequestRecoveryType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1GetCompatibleMssqlInstancesV1RequestRecoveryType]) for enum values.
             	# REQUIRED
             	id = $someString
             }
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someMssqlCompatibleInstancesSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlCompatibleInstancesSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someMssqlCompatibleInstancesFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlCompatibleInstancesFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlInstanceSummaryListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Database operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: Database
             
             $query = New-RscQueryMssql -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseLiveMounts operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DatabaseLiveMounts
             
             $query = New-RscQueryMssql -DatabaseLiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someMssqlDatabaseLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlDatabaseLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someMssqlDatabaseLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.MssqlDatabaseLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlDatabaseLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseMissedRecoverableRanges operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DatabaseMissedRecoverableRanges
             
             $query = New-RscQueryMssql -DatabaseMissedRecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlMissedRecoverableRangeListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseMissedSnapshots operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DatabaseMissedSnapshots
             
             $query = New-RscQueryMssql -DatabaseMissedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MissedSnapshotListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseRestoreEstimate operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DatabaseRestoreEstimate
             
             $query = New-RscQueryMssql -DatabaseRestoreEstimate
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	lsn = $someString
             	# OPTIONAL
             	recoveryForkGuid = $someString
             	# OPTIONAL
             	time = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlRestoreEstimateResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseRestoreFiles operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DatabaseRestoreFiles
             
             $query = New-RscQueryMssql -DatabaseRestoreFiles
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	lsn = $someString
             	# OPTIONAL
             	recoveryForkGuid = $someString
             	# OPTIONAL
             	time = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: V1MssqlGetRestoreFilesV1Response
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: Databases
             
             $query = New-RscQueryMssql -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DefaultProperties operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DefaultProperties
             
             $query = New-RscQueryMssql -DefaultProperties
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: UpdateMssqlDefaultPropertiesReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DefaultPropertiesOnCluster operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: DefaultPropertiesOnCluster
             
             $query = New-RscQueryMssql -DefaultPropertiesOnCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# OPTIONAL
             	mssqlObjectId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlDefaultPropertiesOnClusterReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Instance operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: Instance
             
             $query = New-RscQueryMssql -Instance
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlInstance
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogShippingTargets operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: LogShippingTargets
             
             $query = New-RscQueryMssql -LogShippingTargets
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	location = $someString
             	# OPTIONAL
             	offset = $someInt
             	# OPTIONAL
             	primaryDatabaseId = $someString
             	# OPTIONAL
             	primaryDatabaseName = $someString
             	# OPTIONAL
             	secondaryDatabaseName = $someString
             	# OPTIONAL
             	sortBy = $someV2QueryLogShippingConfigurationsV2RequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2QueryLogShippingConfigurationsV2RequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someV2QueryLogShippingConfigurationsV2RequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2QueryLogShippingConfigurationsV2RequestSortOrder]) for enum values.
             	# OPTIONAL
             	status = $someV2QueryLogShippingConfigurationsV2RequestStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V2QueryLogShippingConfigurationsV2RequestStatus]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlLogShippingSummaryV2ListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: RecoverableRanges
             
             $query = New-RscQueryMssql -RecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlRecoverableRangeListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'Microsoft SQL Server' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Mssql
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryMssql -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MssqlTopLevelDescendantTypeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryNas">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'NAS' API domain:
             Fileset, Namespace, Namespaces, Share, System, Systems, TopLevelDescendants, or Volume.
             </summary>
             <description>
             New-RscQueryNas creates a new
             query object for operations
             in the 'NAS' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'NAS' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Fileset, Namespace, Namespaces, Share, System, Systems, TopLevelDescendants, or Volume.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryNas -Fileset).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryNas -Fileset).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Fileset operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: Fileset
             
             $query = New-RscQueryNas -Fileset
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NasFileset
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Namespace operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: Namespace
             
             $query = New-RscQueryNas -Namespace
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NasNamespace
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Namespaces operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: Namespaces
             
             $query = New-RscQueryNas -Namespaces
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NasNamespaceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Share operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: Share
             
             $query = New-RscQueryNas -Share
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NasShare
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the System operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: System
             
             $query = New-RscQueryNas -System
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NasSystem
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Systems operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: Systems
             
             $query = New-RscQueryNas -Systems
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NasSystemConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryNas -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmHierarchyObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Volume operation
             of the 'NAS' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nas
             # API Operation: Volume
             
             $query = New-RscQueryNas -Volume
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NasVolume
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryNcd">
             <summary>
             Create a new RscQuery object for any of the 7
             operations in the 'NAS Cloud Direct' API domain:
             BackEndCapacity, FrontEndCapacity, ObjectProtectionStatus, ObjectsOverTimeData, TaskData, UsageOverTimeData, or VmImageUrl.
             </summary>
             <description>
             New-RscQueryNcd creates a new
             query object for operations
             in the 'NAS Cloud Direct' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 7 operations
             in the 'NAS Cloud Direct' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BackEndCapacity, FrontEndCapacity, ObjectProtectionStatus, ObjectsOverTimeData, TaskData, UsageOverTimeData, or VmImageUrl.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryNcd -BackEndCapacity).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryNcd -BackEndCapacity).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BackEndCapacity operation
             of the 'NAS Cloud Direct' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ncd
             # API Operation: BackEndCapacity
             
             $query = New-RscQueryNcd -BackEndCapacity
             
             # REQUIRED
             $query.Var.clusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NcdBackEndCapacity
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FrontEndCapacity operation
             of the 'NAS Cloud Direct' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ncd
             # API Operation: FrontEndCapacity
             
             $query = New-RscQueryNcd -FrontEndCapacity
             
             # REQUIRED
             $query.Var.clusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NcdFrontEndCapacity
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectProtectionStatus operation
             of the 'NAS Cloud Direct' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ncd
             # API Operation: ObjectProtectionStatus
             
             $query = New-RscQueryNcd -ObjectProtectionStatus
             
             # REQUIRED
             $query.Var.clusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NcdObjectProtectionStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectsOverTimeData operation
             of the 'NAS Cloud Direct' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ncd
             # API Operation: ObjectsOverTimeData
             
             $query = New-RscQueryNcd -ObjectsOverTimeData
             
             # REQUIRED
             $query.Var.clusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;NcdObjectsOverTimeData&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TaskData operation
             of the 'NAS Cloud Direct' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ncd
             # API Operation: TaskData
             
             $query = New-RscQueryNcd -TaskData
             
             # REQUIRED
             $query.Var.clusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;NcdTaskData&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UsageOverTimeData operation
             of the 'NAS Cloud Direct' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ncd
             # API Operation: UsageOverTimeData
             
             $query = New-RscQueryNcd -UsageOverTimeData
             
             # REQUIRED
             $query.Var.clusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;NcdUsageOverTimeData&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmImageUrl operation
             of the 'NAS Cloud Direct' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ncd
             # API Operation: VmImageUrl
             
             $query = New-RscQueryNcd -VmImageUrl
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	hypervisorType = $someNcdHypervisorType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NcdHypervisorType]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NcdVmImageUrl
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryNutanix">
             <summary>
             Create a new RscQuery object for any of the 18
             operations in the 'Nutanix' API domain:
             BrowseSnapshot, Category, CategoryValue, Cluster, ClusterAsyncRequestStatus, ClusterContainers, ClusterNetworks, Clusters, Mounts, PrismCentral, PrismCentrals, SearchVm, SnapshotDetail, TopLevelDescendants, Vm, VmAsyncRequestStatus, VmMissedSnapshots, or Vms.
             </summary>
             <description>
             New-RscQueryNutanix creates a new
             query object for operations
             in the 'Nutanix' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 18 operations
             in the 'Nutanix' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BrowseSnapshot, Category, CategoryValue, Cluster, ClusterAsyncRequestStatus, ClusterContainers, ClusterNetworks, Clusters, Mounts, PrismCentral, PrismCentrals, SearchVm, SnapshotDetail, TopLevelDescendants, Vm, VmAsyncRequestStatus, VmMissedSnapshots, or Vms.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryNutanix -BrowseSnapshot).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryNutanix -BrowseSnapshot).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BrowseSnapshot operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: BrowseSnapshot
             
             $query = New-RscQueryNutanix -BrowseSnapshot
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	offset = $someInt
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	path = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BrowseResponseListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Category operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Category
             
             $query = New-RscQueryNutanix -Category
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixCategory
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CategoryValue operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: CategoryValue
             
             $query = New-RscQueryNutanix -CategoryValue
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixCategoryValue
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Cluster operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Cluster
             
             $query = New-RscQueryNutanix -Cluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterAsyncRequestStatus operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: ClusterAsyncRequestStatus
             
             $query = New-RscQueryNutanix -ClusterAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterContainers operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: ClusterContainers
             
             $query = New-RscQueryNutanix -ClusterContainers
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixContainerListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterNetworks operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: ClusterNetworks
             
             $query = New-RscQueryNutanix -ClusterNetworks
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixNetworkListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Clusters operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Clusters
             
             $query = New-RscQueryNutanix -Clusters
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mounts operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Mounts
             
             $query = New-RscQueryNutanix -Mounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someNutanixLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someNutanixLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.NutanixLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrismCentral operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: PrismCentral
             
             $query = New-RscQueryNutanix -PrismCentral
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixPrismCentral
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PrismCentrals operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: PrismCentrals
             
             $query = New-RscQueryNutanix -PrismCentrals
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixPrismCentralConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SearchVm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: SearchVm
             
             $query = New-RscQueryNutanix -SearchVm
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	cursor = $someString
             	# OPTIONAL
             	limit = $someInt
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	path = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SearchResponseListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnapshotDetail operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: SnapshotDetail
             
             $query = New-RscQueryNutanix -SnapshotDetail
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixVmSnapshotDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryNutanix -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmHierarchyObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vm operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Vm
             
             $query = New-RscQueryNutanix -Vm
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixVm
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmAsyncRequestStatus operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: VmAsyncRequestStatus
             
             $query = New-RscQueryNutanix -VmAsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmMissedSnapshots operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: VmMissedSnapshots
             
             $query = New-RscQueryNutanix -VmMissedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MissedSnapshotListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vms operation
             of the 'Nutanix' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Nutanix
             # API Operation: Vms
             
             $query = New-RscQueryNutanix -Vms
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NutanixVmConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryO365">
             <summary>
             Create a new RscQuery object for any of the 37
             operations in the 'Office 365' API domain:
             AdGroups, BrowseTeamConvChannels, Calendar, Groups, License, ListApps, Mailbox, Mailboxes, ObjectAncestors, Onedrive, Onedrives, Org, OrgAtSnappableLevel, OrgStatuses, OrgSummaries, Orgs, ServiceAccount, ServiceStatus, SharepointDrive, SharepointDrives, SharepointList, SharepointLists, SharepointObjectList, SharepointObjects, SharepointSite, SharepointSites, Site, Sites, StorageStats, SubscriptionsAppTypeCounts, Team, TeamChannels, TeamConversationsFolderID, TeamPostedBy, Teams, User, or UserObjects.
             </summary>
             <description>
             New-RscQueryO365 creates a new
             query object for operations
             in the 'Office 365' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 37 operations
             in the 'Office 365' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AdGroups, BrowseTeamConvChannels, Calendar, Groups, License, ListApps, Mailbox, Mailboxes, ObjectAncestors, Onedrive, Onedrives, Org, OrgAtSnappableLevel, OrgStatuses, OrgSummaries, Orgs, ServiceAccount, ServiceStatus, SharepointDrive, SharepointDrives, SharepointList, SharepointLists, SharepointObjectList, SharepointObjects, SharepointSite, SharepointSites, Site, Sites, StorageStats, SubscriptionsAppTypeCounts, Team, TeamChannels, TeamConversationsFolderID, TeamPostedBy, Teams, User, or UserObjects.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryO365 -AdGroups).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryO365 -AdGroups).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AdGroups operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: AdGroups
             
             $query = New-RscQueryO365 -AdGroups
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.adGroupSearchFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;AdGroup&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseTeamConvChannels operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: BrowseTeamConvChannels
             
             $query = New-RscQueryO365 -BrowseTeamConvChannels
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # OPTIONAL
             $query.Var.snapshotFidOpt = $someString
             # REQUIRED
             $query.Var.excludeArchived = $someBoolean
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.channelMembershipTypeFilter = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamConvChannelConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Calendar operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Calendar
             
             $query = New-RscQueryO365 -Calendar
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Calendar
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Groups operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Groups
             
             $query = New-RscQueryO365 -Groups
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             # REQUIRED
             $query.Var.snappableType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365GroupConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the License operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: License
             
             $query = New-RscQueryO365 -License
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365License
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ListApps operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ListApps
             
             $query = New-RscQueryO365 -ListApps
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.o365AppFilters = @(
             	@{
             		# OPTIONAL
             		field = $someAppFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AppFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.o365AppSortByParam = @{
             	# OPTIONAL
             	field = $someAppSortByParamField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AppSortByParamField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365AppConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mailbox operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Mailbox
             
             $query = New-RscQueryO365 -Mailbox
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Mailbox
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mailboxes operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Mailboxes
             
             $query = New-RscQueryO365 -Mailboxes
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365MailboxConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ObjectAncestors operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ObjectAncestors
             
             $query = New-RscQueryO365 -ObjectAncestors
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetImplicitlyAuthorizedAncestorSummariesResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Onedrive operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Onedrive
             
             $query = New-RscQueryO365 -Onedrive
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Onedrive
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Onedrives operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Onedrives
             
             $query = New-RscQueryO365 -Onedrives
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Org operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Org
             
             $query = New-RscQueryO365 -Org
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Org
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgAtSnappableLevel operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OrgAtSnappableLevel
             
             $query = New-RscQueryO365 -OrgAtSnappableLevel
             
             # REQUIRED
             $query.Var.fid = $someString
             # REQUIRED
             $query.Var.snappableType = $someSnappableType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Org
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgStatuses operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OrgStatuses
             
             $query = New-RscQueryO365 -OrgStatuses
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;O365OrgInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OrgSummaries operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: OrgSummaries
             
             $query = New-RscQueryO365 -OrgSummaries
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetImplicitlyAuthorizedObjectSummariesResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Orgs operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Orgs
             
             $query = New-RscQueryO365 -Orgs
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.workloadHierarchy = $someWorkloadLevelHierarchy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.WorkloadLevelHierarchy]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OrgConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ServiceAccount operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ServiceAccount
             
             $query = New-RscQueryO365 -ServiceAccount
             
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ServiceAccountStatusResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ServiceStatus operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: ServiceStatus
             
             $query = New-RscQueryO365 -ServiceStatus
             
             # OPTIONAL
             $query.Var.orgID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetO365ServiceStatusResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointDrive operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointDrive
             
             $query = New-RscQueryO365 -SharepointDrive
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointDrive
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointDrives operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointDrives
             
             $query = New-RscQueryO365 -SharepointDrives
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointDriveConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointList operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointList
             
             $query = New-RscQueryO365 -SharepointList
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointList
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointLists operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointLists
             
             $query = New-RscQueryO365 -SharepointLists
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointListConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointObjectList operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointObjectList
             
             $query = New-RscQueryO365 -SharepointObjectList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.objectTypeFilter = @(
             	$someString
             )
             # REQUIRED
             $query.Var.includeEntireHierarchy = $someBoolean
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointObjects operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointObjects
             
             $query = New-RscQueryO365 -SharepointObjects
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SharepointObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointSite operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointSite
             
             $query = New-RscQueryO365 -SharepointSite
             
             # REQUIRED
             $query.Var.siteFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Site
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SharepointSites operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SharepointSites
             
             $query = New-RscQueryO365 -SharepointSites
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SiteConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Site operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Site
             
             $query = New-RscQueryO365 -Site
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Site
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Sites operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Sites
             
             $query = New-RscQueryO365 -Sites
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             # OPTIONAL
             $query.Var.excludeChildSites = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365SiteConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the StorageStats operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: StorageStats
             
             $query = New-RscQueryO365 -StorageStats
             
             # OPTIONAL
             $query.Var.orgID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetO365StorageStatsResp
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SubscriptionsAppTypeCounts operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: SubscriptionsAppTypeCounts
             
             $query = New-RscQueryO365 -SubscriptionsAppTypeCounts
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;O365SubscriptionAppTypeCounts&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Team operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Team
             
             $query = New-RscQueryO365 -Team
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365Teams
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamChannels operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: TeamChannels
             
             $query = New-RscQueryO365 -TeamChannels
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.excludeArchived = $someBoolean
             # REQUIRED
             $query.Var.channelMembershipTypeFilter = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamsChannelConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamConversationsFolderID operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: TeamConversationsFolderID
             
             $query = New-RscQueryO365 -TeamConversationsFolderID
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.String
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamPostedBy operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: TeamPostedBy
             
             $query = New-RscQueryO365 -TeamPostedBy
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.o365OrgId = $someString
             # OPTIONAL
             $query.Var.nameFilter = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamConversationsSenderConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Teams operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: Teams
             
             $query = New-RscQueryO365 -Teams
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.o365OrgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamsConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the User operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: User
             
             $query = New-RscQueryO365 -User
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365User
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UserObjects operation
             of the 'Office 365' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    O365
             # API Operation: UserObjects
             
             $query = New-RscQueryO365 -UserObjects
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365UserDescendantMetadataConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryOracle">
             <summary>
             Create a new RscQuery object for any of the 17
             operations in the 'Oracle' API domain:
             AcoExampleDownloadLink, AcoParameters, DataGuardGroup, Database, DatabaseAsyncRequestDetails, DatabaseLogBackupConfig, Databases, Host, HostLogBackupConfig, LiveMounts, MissedRecoverableRanges, MissedSnapshots, PdbDetails, Rac, RacLogBackupConfig, RecoverableRanges, or TopLevelDescendants.
             </summary>
             <description>
             New-RscQueryOracle creates a new
             query object for operations
             in the 'Oracle' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 17 operations
             in the 'Oracle' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AcoExampleDownloadLink, AcoParameters, DataGuardGroup, Database, DatabaseAsyncRequestDetails, DatabaseLogBackupConfig, Databases, Host, HostLogBackupConfig, LiveMounts, MissedRecoverableRanges, MissedSnapshots, PdbDetails, Rac, RacLogBackupConfig, RecoverableRanges, or TopLevelDescendants.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryOracle -AcoExampleDownloadLink).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryOracle -AcoExampleDownloadLink).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AcoExampleDownloadLink operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: AcoExampleDownloadLink
             
             $query = New-RscQueryOracle -AcoExampleDownloadLink
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	dbId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleFileDownloadLink
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AcoParameters operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: AcoParameters
             
             $query = New-RscQueryOracle -AcoParameters
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	dbId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleAcoParameterList
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DataGuardGroup operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DataGuardGroup
             
             $query = New-RscQueryOracle -DataGuardGroup
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleDataGuardGroup
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Database operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: Database
             
             $query = New-RscQueryOracle -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseAsyncRequestDetails operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DatabaseAsyncRequestDetails
             
             $query = New-RscQueryOracle -DatabaseAsyncRequestDetails
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseLogBackupConfig operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: DatabaseLogBackupConfig
             
             $query = New-RscQueryOracle -DatabaseLogBackupConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleLogBackupConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: Databases
             
             $query = New-RscQueryOracle -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Host operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: Host
             
             $query = New-RscQueryOracle -Host
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleHost
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostLogBackupConfig operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: HostLogBackupConfig
             
             $query = New-RscQueryOracle -HostLogBackupConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleLogBackupConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LiveMounts operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: LiveMounts
             
             $query = New-RscQueryOracle -LiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someOracleLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OracleLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someOracleLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OracleLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MissedRecoverableRanges operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: MissedRecoverableRanges
             
             $query = New-RscQueryOracle -MissedRecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleMissedRecoverableRangeListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MissedSnapshots operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: MissedSnapshots
             
             $query = New-RscQueryOracle -MissedSnapshots
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: MissedSnapshotListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PdbDetails operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: PdbDetails
             
             $query = New-RscQueryOracle -PdbDetails
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             	# REQUIRED
             	pdbDetailsRequest = @{
             		# REQUIRED
             		recoveryPoint = @{
             			# OPTIONAL
             			snapshotId = $someString
             			# OPTIONAL
             			timestampMs = $someInt64
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OraclePdbDetails
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Rac operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: Rac
             
             $query = New-RscQueryOracle -Rac
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleRac
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RacLogBackupConfig operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: RacLogBackupConfig
             
             $query = New-RscQueryOracle -RacLogBackupConfig
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleLogBackupConfig
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: RecoverableRanges
             
             $query = New-RscQueryOracle -RecoverableRanges
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# OPTIONAL
             	shouldIncludeDbSnapshotSummaries = $someBoolean
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleRecoverableRangeListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendants operation
             of the 'Oracle' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Oracle
             # API Operation: TopLevelDescendants
             
             $query = New-RscQueryOracle -TopLevelDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OracleTopLevelDescendantTypeConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryPolicy">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'Policy' API domain:
             OrgSecurityPolicy, PasswordComplexityPolicy, Policies, Policy, PolicyObjectUsages, or TopRiskPolicySummaries.
             </summary>
             <description>
             New-RscQueryPolicy creates a new
             query object for operations
             in the 'Policy' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'Policy' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: OrgSecurityPolicy, PasswordComplexityPolicy, Policies, Policy, PolicyObjectUsages, or TopRiskPolicySummaries.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryPolicy -OrgSecurityPolicy).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryPolicy -OrgSecurityPolicy).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the OrgSecurityPolicy operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: OrgSecurityPolicy
             
             $query = New-RscQueryPolicy -OrgSecurityPolicy
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OrgSecurityPolicy
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PasswordComplexityPolicy operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: PasswordComplexityPolicy
             
             $query = New-RscQueryPolicy -PasswordComplexityPolicy
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PasswordComplexityPolicy
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Policies operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: Policies
             
             $query = New-RscQueryPolicy -Policies
             
             # OPTIONAL
             $query.Var.policyObjectFilter = $somePolicyObjectFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PolicyObjectFilter]) for enum values.
             # OPTIONAL
             $query.Var.excludeHierarchyObjectList = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClassificationPolicyDetailConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Policy operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: Policy
             
             $query = New-RscQueryPolicy -Policy
             
             # REQUIRED
             $query.Var.policyId = $someString
             # OPTIONAL
             $query.Var.workloadTypes = @(
             	$someDataGovObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DataGovObjectType]) for enum values.
             )
             # OPTIONAL
             $query.Var.sortBy = $somePolicyDetailsSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PolicyDetailsSortBy]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.clusterIdsFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.replicationFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.searchObjectName = $someString
             # OPTIONAL
             $query.Var.hierarchyAncestorIdFilter = $someString
             # OPTIONAL
             $query.Var.policyAssignmentType = $somePolicyAssignmentType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.PolicyAssignmentType]) for enum values.
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClassificationPolicyDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PolicyObjectUsages operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: PolicyObjectUsages
             
             $query = New-RscQueryPolicy -PolicyObjectUsages
             
             # REQUIRED
             $query.Var.objectIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PolicyObjectUsageConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopRiskPolicySummaries operation
             of the 'Policy' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Policy
             # API Operation: TopRiskPolicySummaries
             
             $query = New-RscQueryPolicy -TopRiskPolicySummaries
             
             # REQUIRED
             $query.Var.getWhitelistedResults = $someBoolean
             # REQUIRED
             $query.Var.limit = $someInt
             # REQUIRED
             $query.Var.workloadTypes = @(
             	$someDataGovObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DataGovObjectType]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;PolicySummary&gt;
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryRansomware">
             <summary>
             Create a new RscQuery object for any of the 9
             operations in the 'Ransomware' API domain:
             DetectionWorkloadLocations, InvestigationAnalysisSummary, InvestigationEnablement, OverallInvestigationSummary, ProcessedInvestigationWorkloadCount, Result, ResultOpt, Results, or ResultsGrouped.
             </summary>
             <description>
             New-RscQueryRansomware creates a new
             query object for operations
             in the 'Ransomware' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 9 operations
             in the 'Ransomware' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: DetectionWorkloadLocations, InvestigationAnalysisSummary, InvestigationEnablement, OverallInvestigationSummary, ProcessedInvestigationWorkloadCount, Result, ResultOpt, Results, or ResultsGrouped.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryRansomware -DetectionWorkloadLocations).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryRansomware -DetectionWorkloadLocations).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the DetectionWorkloadLocations operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: DetectionWorkloadLocations
             
             $query = New-RscQueryRansomware -DetectionWorkloadLocations
             
             # REQUIRED
             $query.Var.beginTime = $someDateTime
             # OPTIONAL
             $query.Var.endTime = $someDateTime
             # REQUIRED
             $query.Var.returnOnlyForAnomalousEntities = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ListLocationsReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InvestigationAnalysisSummary operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: InvestigationAnalysisSummary
             
             $query = New-RscQueryRansomware -InvestigationAnalysisSummary
             
             # REQUIRED
             $query.Var.startDay = $someString
             # REQUIRED
             $query.Var.endDay = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             # OPTIONAL
             $query.Var.objectTypeFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.clusterUuidFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.slaFidFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.hideSuspiciousDataIfNonAnomalous = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RansomwareInvestigationAnalysisSummaryReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the InvestigationEnablement operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: InvestigationEnablement
             
             $query = New-RscQueryRansomware -InvestigationEnablement
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RansomwareInvestigationEnablementReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OverallInvestigationSummary operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: OverallInvestigationSummary
             
             $query = New-RscQueryRansomware -OverallInvestigationSummary
             
             # REQUIRED
             $query.Var.historyNumHours = $someInt
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: OverallRansomwareInvestigationSummary
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ProcessedInvestigationWorkloadCount operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: ProcessedInvestigationWorkloadCount
             
             $query = New-RscQueryRansomware -ProcessedInvestigationWorkloadCount
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ProcessedRansomwareInvestigationWorkloadCountReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Result operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: Result
             
             $query = New-RscQueryRansomware -Result
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.managedId = $someString
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RansomwareResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResultOpt operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: ResultOpt
             
             $query = New-RscQueryRansomware -ResultOpt
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.managedId = $someString
             # REQUIRED
             $query.Var.snapshotId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RansomwareResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Results operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: Results
             
             $query = New-RscQueryRansomware -Results
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someRansomwareResultSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RansomwareResultSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	managedId = @(
             		$someString
             	)
             	# OPTIONAL
             	startTime = $someDateTime
             	# OPTIONAL
             	endTime = $someDateTime
             	# OPTIONAL
             	isEncrypted = $someBoolean
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RansomwareResultConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResultsGrouped operation
             of the 'Ransomware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Ransomware
             # API Operation: ResultsGrouped
             
             $query = New-RscQueryRansomware -ResultsGrouped
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.groupBy = $someRansomwareResultGroupBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.RansomwareResultGroupBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	managedId = @(
             		$someString
             	)
             	# OPTIONAL
             	startTime = $someDateTime
             	# OPTIONAL
             	endTime = $someDateTime
             	# OPTIONAL
             	isEncrypted = $someBoolean
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RansomwareResultGroupedDataConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryRcv">
             <summary>
             Create a new RscQuery object for any of the 2
             operations in the 'RCV' API domain:
             AccountEntitlement, or AccountEntitlements.
             </summary>
             <description>
             New-RscQueryRcv creates a new
             query object for operations
             in the 'RCV' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 2 operations
             in the 'RCV' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AccountEntitlement, or AccountEntitlements.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryRcv -AccountEntitlement).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryRcv -AccountEntitlement).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AccountEntitlement operation
             of the 'RCV' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcv
             # API Operation: AccountEntitlement
             
             $query = New-RscQueryRcv -AccountEntitlement
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RcvAccountEntitlement
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AccountEntitlements operation
             of the 'RCV' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Rcv
             # API Operation: AccountEntitlements
             
             $query = New-RscQueryRcv -AccountEntitlements
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AllRcvAccountEntitlements
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryReplication">
             <summary>
             Create a new RscQuery object for any of the 7
             operations in the 'Replication' API domain:
             IncomingStats, NetworkThrottleBypass, NetworkThrottleBypassById, OutgoingStats, Pairs, ValidSources, or ValidTargets.
             </summary>
             <description>
             New-RscQueryReplication creates a new
             query object for operations
             in the 'Replication' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 7 operations
             in the 'Replication' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: IncomingStats, NetworkThrottleBypass, NetworkThrottleBypassById, OutgoingStats, Pairs, ValidSources, or ValidTargets.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryReplication -IncomingStats).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryReplication -IncomingStats).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the IncomingStats operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: IncomingStats
             
             $query = New-RscQueryReplication -IncomingStats
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	range = $someString
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InternalReplicationBandwidthIncomingResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NetworkThrottleBypass operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: NetworkThrottleBypass
             
             $query = New-RscQueryReplication -NetworkThrottleBypass
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ReplicationTargetThrottleBypassSummaryListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NetworkThrottleBypassById operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: NetworkThrottleBypassById
             
             $query = New-RscQueryReplication -NetworkThrottleBypassById
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ReplicationNetworkThrottleBypassReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OutgoingStats operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: OutgoingStats
             
             $query = New-RscQueryReplication -OutgoingStats
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	range = $someString
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: InternalReplicationBandwidthOutgoingResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Pairs operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: Pairs
             
             $query = New-RscQueryReplication -Pairs
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someReplicationPairsQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationPairsQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterName = $someString
             	# OPTIONAL
             	sourceClusterUuids = @(
             		$someString
             	)
             	# OPTIONAL
             	targetClusterUuids = @(
             		$someString
             	)
             	# OPTIONAL
             	status = @(
             		$someReplicationPairConnectionStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ReplicationPairConnectionStatus]) for enum values.
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ReplicationPairConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidSources operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: ValidSources
             
             $query = New-RscQueryReplication -ValidSources
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someListValidReplicationSourcesSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ListValidReplicationSourcesSortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.isCrossAccount = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidReplicationSourceConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ValidTargets operation
             of the 'Replication' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Replication
             # API Operation: ValidTargets
             
             $query = New-RscQueryReplication -ValidTargets
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someListValidReplicationTargetsSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ListValidReplicationTargetsSortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.isCrossAccount = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ValidReplicationTargetConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryReport">
             <summary>
             Create a new RscQuery object for any of the 11
             operations in the 'Report' API domain:
             ClusterMigrationCount, ClusterMigrationJobStatus, ClusterMigrationStatus, Data, DatabaseLogForCluster, DatabaseLogingPropertiesForCluster, ScheduledReport, ScheduledReports, Sonar, SonarContent, or SonarRow.
             </summary>
             <description>
             New-RscQueryReport creates a new
             query object for operations
             in the 'Report' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 11 operations
             in the 'Report' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ClusterMigrationCount, ClusterMigrationJobStatus, ClusterMigrationStatus, Data, DatabaseLogForCluster, DatabaseLogingPropertiesForCluster, ScheduledReport, ScheduledReports, Sonar, SonarContent, or SonarRow.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryReport -ClusterMigrationCount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryReport -ClusterMigrationCount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ClusterMigrationCount operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: ClusterMigrationCount
             
             $query = New-RscQueryReport -ClusterMigrationCount
             
             # OPTIONAL
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.status = @(
             	$someCdmReportMigrationStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmReportMigrationStatus]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ReportsMigrationCount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterMigrationJobStatus operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: ClusterMigrationJobStatus
             
             $query = New-RscQueryReport -ClusterMigrationJobStatus
             
             # OPTIONAL
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterReportMigrationJobStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterMigrationStatus operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: ClusterMigrationStatus
             
             $query = New-RscQueryReport -ClusterMigrationStatus
             
             # OPTIONAL
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.status = @(
             	$someCdmReportMigrationStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CdmReportMigrationStatus]) for enum values.
             )
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ReportMigrationStatusConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Data operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: Data
             
             $query = New-RscQueryReport -Data
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.dataView = $someDataViewTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DataViewTypeEnum]) for enum values.
             # REQUIRED
             $query.Var.columns = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		values = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.groupBy = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.secondaryGroupBy = $someString
             # OPTIONAL
             $query.Var.aggregations = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.sortBy = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.timezone = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RowConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseLogForCluster operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: DatabaseLogForCluster
             
             $query = New-RscQueryReport -DatabaseLogForCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	logBackupDelay = $someInt
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	offset = $someInt
             	# OPTIONAL
             	effectiveSlaDomainId = $someString
             	# OPTIONAL
             	databaseType = $someString
             	# OPTIONAL
             	location = $someString
             	# OPTIONAL
             	sortBy = $someV1QueryLogReportRequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryLogReportRequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someV1QueryLogReportRequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryLogReportRequestSortOrder]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DbLogReportSummaryListReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatabaseLogingPropertiesForCluster operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: DatabaseLogingPropertiesForCluster
             
             $query = New-RscQueryReport -DatabaseLogingPropertiesForCluster
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: DbLogReportProperties
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScheduledReport operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: ScheduledReport
             
             $query = New-RscQueryReport -ScheduledReport
             
             # REQUIRED
             $query.Var.id = $someInt
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ScheduledReport
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ScheduledReports operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: ScheduledReports
             
             $query = New-RscQueryReport -ScheduledReports
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	reportId = $someInt
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ScheduledReportConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Sonar operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: Sonar
             
             $query = New-RscQueryReport -Sonar
             
             # REQUIRED
             $query.Var.sonarReportGroupBy = $someDiscoveryReportGroupBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DiscoveryReportGroupBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.timeFilter = @{
             	# OPTIONAL
             	endTime = $someString
             	# OPTIONAL
             	startTime = $someString
             	# OPTIONAL
             	timeDuration = $someTimeDuration # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TimeDuration]) for enum values.
             	# OPTIONAL
             	timezone = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SonarReportConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SonarContent operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: SonarContent
             
             $query = New-RscQueryReport -SonarContent
             
             # REQUIRED
             $query.Var.groupBy = $someDiscoveryContentReportGroupBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DiscoveryContentReportGroupBy]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someDiscoveryContentReportSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DiscoveryContentReportSortBy]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filters = @{
             	# OPTIONAL
             	search = $someString
             	# OPTIONAL
             	policyIds = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterIds = @(
             		$someString
             	)
             	# OPTIONAL
             	applyWhitelists = $someBoolean
             	# OPTIONAL
             	subscriptionIds = @(
             		$someString
             	)
             	# REQUIRED
             	objectTypes = @(
             		$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             	)
             }
             # REQUIRED
             $query.Var.day = $someString
             # REQUIRED
             $query.Var.timezone = $someString
             # REQUIRED
             $query.Var.workloadTypes = @(
             	$someDataGovObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DataGovObjectType]) for enum values.
             )
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SonarContentReportConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SonarRow operation
             of the 'Report' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Report
             # API Operation: SonarRow
             
             $query = New-RscQueryReport -SonarRow
             
             # OPTIONAL
             $query.Var.sortBy = $someDiscoveryReportSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DiscoveryReportSortBy]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.endTime = $someString
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SonarReportRowConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySapHana">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'SAP HANA' API domain:
             Database, Databases, LogSnapshot, LogSnapshots, RecoverableRange, RecoverableRanges, System, or Systems.
             </summary>
             <description>
             New-RscQuerySapHana creates a new
             query object for operations
             in the 'SAP HANA' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'SAP HANA' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Database, Databases, LogSnapshot, LogSnapshots, RecoverableRange, RecoverableRanges, System, or Systems.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySapHana -Database).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySapHana -Database).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Database operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: Database
             
             $query = New-RscQuerySapHana -Database
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SapHanaDatabase
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Databases operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: Databases
             
             $query = New-RscQuerySapHana -Databases
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SapHanaDatabaseConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogSnapshot operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: LogSnapshot
             
             $query = New-RscQuerySapHana -LogSnapshot
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SapHanaLogSnapshot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LogSnapshots operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: LogSnapshots
             
             $query = New-RscQuerySapHana -LogSnapshots
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someSapHanaLogSnapshotSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SapHanaLogSnapshotSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	workloadId = @(
             		$someString
             	)
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	fromTime = $someDateTime
             	# OPTIONAL
             	toTime = $someDateTime
             	# OPTIONAL
             	isArchived = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SapHanaLogSnapshotConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRange operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: RecoverableRange
             
             $query = New-RscQuerySapHana -RecoverableRange
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SapHanaRecoverableRange
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRanges operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: RecoverableRanges
             
             $query = New-RscQuerySapHana -RecoverableRanges
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someSapHanaRecoverableRangeSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SapHanaRecoverableRangeSortBy]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	databaseId = @(
             		$someString
             	)
             	# OPTIONAL
             	fromTime = $someDateTime
             	# OPTIONAL
             	toTime = $someDateTime
             	# OPTIONAL
             	isArchived = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SapHanaRecoverableRangeConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the System operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: System
             
             $query = New-RscQuerySapHana -System
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SapHanaSystem
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Systems operation
             of the 'SAP HANA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    SapHana
             # API Operation: Systems
             
             $query = New-RscQuerySapHana -Systems
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SapHanaSystemConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryServiceAccount">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'Service Account' API domain:
             ['ServiceAccount'].
             </summary>
             <description>
             New-RscQueryServiceAccount creates a new
             query object for operations
             in the 'Service Account' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'Service Account' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['ServiceAccount'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryServiceAccount -ServiceAccount).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryServiceAccount -ServiceAccount).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ServiceAccount operation
             of the 'Service Account' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    ServiceAccount
             # API Operation: ServiceAccount
             
             $query = New-RscQueryServiceAccount -ServiceAccount
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someServiceAccountSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ServiceAccountSortBy]) for enum values.
             # OPTIONAL
             $query.Var.searchText = $someString
             # OPTIONAL
             $query.Var.roleIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ServiceAccountConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySharepoint">
             <summary>
             Create a new RscQuery object for any of the 8
             operations in the 'Sharepoint' API domain:
             BrowseDrive, BrowseList, SiteDescendants, SiteExclusions, SiteSearch, SnappableDriveSearch, SnappableListSearch, or SnapshotDriveSearch.
             </summary>
             <description>
             New-RscQuerySharepoint creates a new
             query object for operations
             in the 'Sharepoint' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 8 operations
             in the 'Sharepoint' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BrowseDrive, BrowseList, SiteDescendants, SiteExclusions, SiteSearch, SnappableDriveSearch, SnappableListSearch, or SnapshotDriveSearch.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySharepoint -BrowseDrive).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySharepoint -BrowseDrive).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BrowseDrive operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: BrowseDrive
             
             $query = New-RscQuerySharepoint -BrowseDrive
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.folderId = $someString
             # OPTIONAL
             $query.Var.sharepointDriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.siteChildId = $someString
             # OPTIONAL
             $query.Var.siteChildType = $someSharePointDescendantType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointDescendantType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the BrowseList operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: BrowseList
             
             $query = New-RscQuerySharepoint -BrowseList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.folderId = $someString
             # OPTIONAL
             $query.Var.sharepointDriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.siteChildId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SiteDescendants operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: SiteDescendants
             
             $query = New-RscQuerySharepoint -SiteDescendants
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.siteFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.naturalId = $someString
             # OPTIONAL
             $query.Var.sharepointSiteSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someSharePointSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someSharePointSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             # REQUIRED
             $query.Var.orgId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365FullSpObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SiteExclusions operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: SiteExclusions
             
             $query = New-RscQuerySharepoint -SiteExclusions
             
             # REQUIRED
             $query.Var.orgId = $someString
             # REQUIRED
             $query.Var.siteFids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;FullSpSiteExclusions&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SiteSearch operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: SiteSearch
             
             $query = New-RscQuerySharepoint -SiteSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.siteFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.sharepointSiteSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someSharePointSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someSharePointSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365FullSpObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnappableDriveSearch operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: SnappableDriveSearch
             
             $query = New-RscQuerySharepoint -SnappableDriveSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.sharepointDriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             # OPTIONAL
             $query.Var.siteChildId = $someString
             # OPTIONAL
             $query.Var.siteChildType = $someSharePointDescendantType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointDescendantType]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnappableListSearch operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: SnappableListSearch
             
             $query = New-RscQuerySharepoint -SnappableListSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.sharepointDriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             # OPTIONAL
             $query.Var.siteChildId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnapshotDriveSearch operation
             of the 'Sharepoint' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sharepoint
             # API Operation: SnapshotDriveSearch
             
             $query = New-RscQuerySharepoint -SnapshotDriveSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.sharepointDriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySla">
             <summary>
             Create a new RscQuery object for any of the 14
             operations in the 'SLA' API domain:
             AuditDetail, ClusterDomains, ClusterGlobals, ConflictObjects, CountOfObjectsProtected, Domain, Domains, GlobalFilterList, GlobalStatuses, ManagedVolume, ManagedVolumes, NcdComplianceData, SummariesByIds, or VerifyWithReplicationToCluster.
             </summary>
             <description>
             New-RscQuerySla creates a new
             query object for operations
             in the 'SLA' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 14 operations
             in the 'SLA' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AuditDetail, ClusterDomains, ClusterGlobals, ConflictObjects, CountOfObjectsProtected, Domain, Domains, GlobalFilterList, GlobalStatuses, ManagedVolume, ManagedVolumes, NcdComplianceData, SummariesByIds, or VerifyWithReplicationToCluster.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySla -AuditDetail).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySla -AuditDetail).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AuditDetail operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: AuditDetail
             
             $query = New-RscQuerySla -AuditDetail
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.SlaId = $someString
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someSLAAuditDetailFilterFieldEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SLAAuditDetailFilterFieldEnum]) for enum values.
             		# OPTIONAL
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.timezone = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SlaAuditDetail&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterDomains operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: ClusterDomains
             
             $query = New-RscQuerySla -ClusterDomains
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ClusterSlaDomainConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClusterGlobals operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: ClusterGlobals
             
             $query = New-RscQuerySla -ClusterGlobals
             
             # REQUIRED
             $query.Var.cdmClusterUUID = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SlaInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ConflictObjects operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: ConflictObjects
             
             $query = New-RscQuerySla -ConflictObjects
             
             # REQUIRED
             $query.Var.fids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;HierarchyObject&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CountOfObjectsProtected operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: CountOfObjectsProtected
             
             $query = New-RscQuerySla -CountOfObjectsProtected
             
             # OPTIONAL
             $query.Var.rootOptionalFid = $someString
             # REQUIRED
             $query.Var.slaIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CountOfObjectsProtectedBySlAsResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Domain operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: Domain
             
             $query = New-RscQuerySla -Domain
             
             # REQUIRED
             $query.Var.id = $someString
             # OPTIONAL
             $query.Var.shouldShowSyncStatus = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowUpgradeInfo = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowPausedClusters = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaDomain
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Domains operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: Domains
             
             $query = New-RscQuerySla -Domains
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someSlaQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someGlobalSlaQueryFilterInputField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalSlaQueryFilterInputField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		objectTypeList = @(
             			$someSlaObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaObjectType]) for enum values.
             		)
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             # OPTIONAL
             $query.Var.contextFilterInput = @(
             	@{
             		# REQUIRED
             		field = $someString
             		# REQUIRED
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.shouldShowSyncStatus = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowProtectedObjectCount = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowUpgradeInfo = $someBoolean
             # OPTIONAL
             $query.Var.showRemoteSlas = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowPausedClusters = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SlaDomainConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalFilterList operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: GlobalFilterList
             
             $query = New-RscQuerySla -GlobalFilterList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortBy = $someSlaQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someGlobalSlaQueryFilterInputField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.GlobalSlaQueryFilterInputField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		objectTypeList = @(
             			$someSlaObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaObjectType]) for enum values.
             		)
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.contextFilter = $someContextFilterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ContextFilterTypeEnum]) for enum values.
             # OPTIONAL
             $query.Var.contextFilterInput = @(
             	@{
             		# REQUIRED
             		field = $someString
             		# REQUIRED
             		text = $someString
             }
             )
             # OPTIONAL
             $query.Var.shouldShowSyncStatus = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowProtectedObjectCount = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowUpgradeInfo = $someBoolean
             # OPTIONAL
             $query.Var.showRemoteSlas = $someBoolean
             # OPTIONAL
             $query.Var.shouldShowPausedClusters = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalSlaForFilterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GlobalStatuses operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: GlobalStatuses
             
             $query = New-RscQuerySla -GlobalStatuses
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someSlaStatusFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaStatusFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             }
             )
             # REQUIRED
             $query.Var.SlaId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GlobalSlaStatusConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedVolume operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: ManagedVolume
             
             $query = New-RscQuerySla -ManagedVolume
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolume
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ManagedVolumes operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: ManagedVolumes
             
             $query = New-RscQuerySla -ManagedVolumes
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ManagedVolumeConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NcdComplianceData operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: NcdComplianceData
             
             $query = New-RscQuerySla -NcdComplianceData
             
             # REQUIRED
             $query.Var.clusters = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;NcdSlaComplianceData&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SummariesByIds operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: SummariesByIds
             
             $query = New-RscQuerySla -SummariesByIds
             
             # REQUIRED
             $query.Var.slaIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;SlaDomain&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VerifyWithReplicationToCluster operation
             of the 'SLA' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sla
             # API Operation: VerifyWithReplicationToCluster
             
             $query = New-RscQuerySla -VerifyWithReplicationToCluster
             
             # REQUIRED
             $query.Var.cdmClusterUUID = $someString
             # REQUIRED
             $query.Var.includeArchived = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VerifySlaWithReplicationToClusterResponse
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySmb">
             <summary>
             Create a new RscQuery object for any of the 2
             operations in the 'SMB' API domain:
             Configuration, or Domains.
             </summary>
             <description>
             New-RscQuerySmb creates a new
             query object for operations
             in the 'SMB' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 2 operations
             in the 'SMB' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: Configuration, or Domains.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySmb -Configuration).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySmb -Configuration).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Configuration operation
             of the 'SMB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Smb
             # API Operation: Configuration
             
             $query = New-RscQuerySmb -Configuration
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GetSmbConfigurationReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Domains operation
             of the 'SMB' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Smb
             # API Operation: Domains
             
             $query = New-RscQuerySmb -Domains
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filters = @(
             	@{
             		# OPTIONAL
             		field = $someSmbDomainFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SmbDomainFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someSmbDomainSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SmbDomainSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SmbDomainConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySnappable">
             <summary>
             Create a new RscQuery object for any of the 13
             operations in the 'Snappable' API domain:
             CdmHierarchySnappableNew, CdmHierarchySnappablesNew, ContactSearch, EmailSearch, EventSearch, GroupByList, Hierarchy, List, OnedriveSearch, Search, SearchVersionedFiles, TeamsConversationsSearch, or TeamsDriveSearch.
             </summary>
             <description>
             New-RscQuerySnappable creates a new
             query object for operations
             in the 'Snappable' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 13 operations
             in the 'Snappable' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CdmHierarchySnappableNew, CdmHierarchySnappablesNew, ContactSearch, EmailSearch, EventSearch, GroupByList, Hierarchy, List, OnedriveSearch, Search, SearchVersionedFiles, TeamsConversationsSearch, or TeamsDriveSearch.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySnappable -CdmHierarchySnappableNew).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySnappable -CdmHierarchySnappableNew).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CdmHierarchySnappableNew operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: CdmHierarchySnappableNew
             
             $query = New-RscQuerySnappable -CdmHierarchySnappableNew
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmHierarchySnappableNew
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the CdmHierarchySnappablesNew operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: CdmHierarchySnappablesNew
             
             $query = New-RscQuerySnappable -CdmHierarchySnappablesNew
             
             # REQUIRED
             $query.Var.fids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;CdmHierarchySnappableNew&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ContactSearch operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: ContactSearch
             
             $query = New-RscQuerySnappable -ContactSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.contactsSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someO365ContactsSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365ContactsSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ExchangeObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EmailSearch operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: EmailSearch
             
             $query = New-RscQuerySnappable -EmailSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.searchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	emailAddresses = @(
             		@{
             			# OPTIONAL
             			emailAddress = $someString
             			# OPTIONAL
             			emailAddressType = $someEmailAddressFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EmailAddressFilterType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	fromTime = $someDateTime
             	# OPTIONAL
             	untilTime = $someDateTime
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ExchangeObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EventSearch operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: EventSearch
             
             $query = New-RscQuerySnappable -EventSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.calendarSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someCalendarSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	emailAddresses = @(
             		@{
             			# OPTIONAL
             			emailAddress = $someString
             			# OPTIONAL
             			filterType = $someCalendarEmailAddressFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarEmailAddressFilterType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	timerange = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someO365CalendarSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365CalendarSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	recurrenceFilter = @{
             		# OPTIONAL
             		recurrenceType = $someCalendarRecurrenceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarRecurrenceType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ExchangeObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the GroupByList operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: GroupByList
             
             $query = New-RscQuerySnappable -GroupByList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.groupBy = $someSnappableGroupByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableGroupByEnum]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	protectionStatus = @(
             		$someProtectionStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProtectionStatusEnum]) for enum values.
             	)
             	# OPTIONAL
             	slaDomain = @{
             		# OPTIONAL
             		id = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	complianceStatus = @(
             		$someComplianceStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ComplianceStatusEnum]) for enum values.
             	)
             	# OPTIONAL
             	objectType = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	excludedObjectTypes = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	cluster = @{
             		# OPTIONAL
             		id = @(
             			$someString
             		)
             		# OPTIONAL
             		type = @(
             			$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             		)
             	}
             	# OPTIONAL
             	timeRange = @{
             		# REQUIRED
             		start = $someDateTime
             		# REQUIRED
             		end = $someDateTime
             	}
             	# OPTIONAL
             	slaTimeRange = $someSlaComplianceTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaComplianceTimeRange]) for enum values.
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             }
             # OPTIONAL
             $query.Var.timezoneOffset = $someSingle
             # OPTIONAL
             $query.Var.requestedAggregations = @(
             	$someSnappableAggregationsEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableAggregationsEnum]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnappableGroupByConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Hierarchy operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: Hierarchy
             
             $query = New-RscQuerySnappable -Hierarchy
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HierarchySnappableConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the List operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: List
             
             $query = New-RscQuerySnappable -List
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someSnappableSortByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableSortByEnum]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	protectionStatus = @(
             		$someProtectionStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProtectionStatusEnum]) for enum values.
             	)
             	# OPTIONAL
             	slaDomain = @{
             		# OPTIONAL
             		id = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	complianceStatus = @(
             		$someComplianceStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ComplianceStatusEnum]) for enum values.
             	)
             	# OPTIONAL
             	objectType = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	excludedObjectTypes = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	cluster = @{
             		# OPTIONAL
             		id = @(
             			$someString
             		)
             		# OPTIONAL
             		type = @(
             			$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             		)
             	}
             	# OPTIONAL
             	searchTerm = $someString
             	# OPTIONAL
             	slaTimeRange = $someSlaComplianceTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaComplianceTimeRange]) for enum values.
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnappableConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OnedriveSearch operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: OnedriveSearch
             
             $query = New-RscQuerySnappable -OnedriveSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.onedriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Search operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: Search
             
             $query = New-RscQuerySnappable -Search
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someSnappableSortByEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnappableSortByEnum]) for enum values.
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	protectionStatus = @(
             		$someProtectionStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ProtectionStatusEnum]) for enum values.
             	)
             	# OPTIONAL
             	slaDomain = @{
             		# OPTIONAL
             		id = @(
             			$someString
             		)
             	}
             	# OPTIONAL
             	complianceStatus = @(
             		$someComplianceStatusEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ComplianceStatusEnum]) for enum values.
             	)
             	# OPTIONAL
             	objectType = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	excludedObjectTypes = @(
             		$someObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ObjectTypeEnum]) for enum values.
             	)
             	# OPTIONAL
             	cluster = @{
             		# OPTIONAL
             		id = @(
             			$someString
             		)
             		# OPTIONAL
             		type = @(
             			$someClusterTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ClusterTypeEnum]) for enum values.
             		)
             	}
             	# OPTIONAL
             	timeRange = @{
             		# REQUIRED
             		start = $someDateTime
             		# REQUIRED
             		end = $someDateTime
             	}
             	# OPTIONAL
             	searchTerm = $someString
             	# OPTIONAL
             	slaTimeRange = $someSlaComplianceTimeRange # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SlaComplianceTimeRange]) for enum values.
             	# OPTIONAL
             	orgId = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnappableConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SearchVersionedFiles operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: SearchVersionedFiles
             
             $query = New-RscQuerySnappable -SearchVersionedFiles
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.searchQuery = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VersionedFileConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamsConversationsSearch operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: TeamsConversationsSearch
             
             $query = New-RscQuerySnappable -TeamsConversationsSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.snapshotFidOpt = $someString
             # REQUIRED
             $query.Var.teamConvChannels = @(
             	@{
             		# REQUIRED
             		naturalId = $someString
             		# REQUIRED
             		name = $someString
             		# REQUIRED
             		folderId = $someString
             		# REQUIRED
             		membershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             }
             )
             # OPTIONAL
             $query.Var.teamsConversationsSearchFilter = @{
             	# OPTIONAL
             	postedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	channelNaturalId = $someString
             	# OPTIONAL
             	postedBy = $someString
             	# OPTIONAL
             	snapshotId = $someString
             	# OPTIONAL
             	parentId = $someString
             	# OPTIONAL
             	convId = $someString
             	# OPTIONAL
             	snapshotNum = $someInt
             	# OPTIONAL
             	includeArchived = $someBoolean
             	# OPTIONAL
             	fetchAllPostSenders = $someString
             	# OPTIONAL
             	skipPostsAttachments = $someBoolean
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365TeamsConversationsConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TeamsDriveSearch operation
             of the 'Snappable' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snappable
             # API Operation: TeamsDriveSearch
             
             $query = New-RscQuerySnappable -TeamsDriveSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.channelId = $someString
             # OPTIONAL
             $query.Var.channelFolderName = $someString
             # OPTIONAL
             $query.Var.teamsDriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySnapshot">
             <summary>
             Create a new RscQuery object for any of the 21
             operations in the 'Snapshot' API domain:
             BrowseFileList, ClosestToPointInTime, EmailSearch, EventSearch, FilesDelta, FilesDeltaV2, Fileset, FilesetFiles, LegalHoldSnappable, OnedriveSearch, Polaris, Pvcs, QuarantinedDetails, Results, SnappableList, SnappablesList, SnappablesWithLegalHoldsSummary, Snapshot, UnmanagedObject, VappInstantRecoveryOptions, or VappTemplateExportOptions.
             </summary>
             <description>
             New-RscQuerySnapshot creates a new
             query object for operations
             in the 'Snapshot' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 21 operations
             in the 'Snapshot' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: BrowseFileList, ClosestToPointInTime, EmailSearch, EventSearch, FilesDelta, FilesDeltaV2, Fileset, FilesetFiles, LegalHoldSnappable, OnedriveSearch, Polaris, Pvcs, QuarantinedDetails, Results, SnappableList, SnappablesList, SnappablesWithLegalHoldsSummary, Snapshot, UnmanagedObject, VappInstantRecoveryOptions, or VappTemplateExportOptions.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySnapshot -BrowseFileList).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySnapshot -BrowseFileList).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the BrowseFileList operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: BrowseFileList
             
             $query = New-RscQuerySnapshot -BrowseFileList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.path = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.searchPrefix = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnapshotFileConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ClosestToPointInTime operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: ClosestToPointInTime
             
             $query = New-RscQuerySnapshot -ClosestToPointInTime
             
             # OPTIONAL
             $query.Var.beforeTime = $someDateTime
             # OPTIONAL
             $query.Var.afterTime = $someDateTime
             # REQUIRED
             $query.Var.snappableIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.includeLinked = $someBoolean
             # OPTIONAL
             $query.Var.ignoreActiveWorkloadCheck = $someBoolean
             # OPTIONAL
             $query.Var.excludeQuarantined = $someBoolean
             # OPTIONAL
             $query.Var.excludeAnomalous = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;ClosestSnapshotSearchResult&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EmailSearch operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: EmailSearch
             
             $query = New-RscQuerySnapshot -EmailSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.searchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	emailAddresses = @(
             		@{
             			# OPTIONAL
             			emailAddress = $someString
             			# OPTIONAL
             			emailAddressType = $someEmailAddressFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.EmailAddressFilterType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	fromTime = $someDateTime
             	# OPTIONAL
             	untilTime = $someDateTime
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ExchangeObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the EventSearch operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: EventSearch
             
             $query = New-RscQuerySnapshot -EventSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.calendarSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someCalendarSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	emailAddresses = @(
             		@{
             			# OPTIONAL
             			emailAddress = $someString
             			# OPTIONAL
             			filterType = $someCalendarEmailAddressFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarEmailAddressFilterType]) for enum values.
             		}
             	)
             	# OPTIONAL
             	timerange = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someO365CalendarSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.O365CalendarSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	recurrenceFilter = @{
             		# OPTIONAL
             		recurrenceType = $someCalendarRecurrenceType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.CalendarRecurrenceType]) for enum values.
             	}
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365ExchangeObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FilesDelta operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: FilesDelta
             
             $query = New-RscQuerySnapshot -FilesDelta
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.path = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	deltaType = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             }
             # OPTIONAL
             $query.Var.searchPrefix = $someString
             # OPTIONAL
             $query.Var.quarantineFilters = @(
             	$someQuarantineFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.QuarantineFilter]) for enum values.
             )
             # OPTIONAL
             $query.Var.workloadFieldsArg = @{
             	# OPTIONAL
             	o365FileDelta = @{
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		orgId = $someString
             	}
             	# OPTIONAL
             	o365SharepointDelta = @{
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		orgId = $someString
             		# OPTIONAL
             		sharepointSiteReq = @{
             			# OPTIONAL
             			siteChildId = $someString
             			# OPTIONAL
             			siteChildType = $someSharePointDescendantType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointDescendantType]) for enum values.
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnapshotFileDeltaConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FilesDeltaV2 operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: FilesDeltaV2
             
             $query = New-RscQuerySnapshot -FilesDeltaV2
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.path = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	deltaType = @(
             		$someDeltaType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.DeltaType]) for enum values.
             	)
             }
             # OPTIONAL
             $query.Var.searchPrefix = $someString
             # OPTIONAL
             $query.Var.quarantineFilters = @(
             	$someQuarantineFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.QuarantineFilter]) for enum values.
             )
             # OPTIONAL
             $query.Var.workloadFieldsArg = @{
             	# OPTIONAL
             	o365FileDelta = @{
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		orgId = $someString
             	}
             	# OPTIONAL
             	o365SharepointDelta = @{
             		# OPTIONAL
             		folderId = $someString
             		# OPTIONAL
             		orgId = $someString
             		# OPTIONAL
             		sharepointSiteReq = @{
             			# OPTIONAL
             			siteChildId = $someString
             			# OPTIONAL
             			siteChildType = $someSharePointDescendantType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SharePointDescendantType]) for enum values.
             		}
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnapshotFileDeltaV2Connection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Fileset operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: Fileset
             
             $query = New-RscQuerySnapshot -Fileset
             
             # REQUIRED
             $query.Var.id = $someString
             # OPTIONAL
             $query.Var.verbose = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: FilesetSnapshotDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the FilesetFiles operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: FilesetFiles
             
             $query = New-RscQuerySnapshot -FilesetFiles
             
             # REQUIRED
             $query.Var.id = $someString
             # OPTIONAL
             $query.Var.limit = $someInt
             # OPTIONAL
             $query.Var.offset = $someInt
             # REQUIRED
             $query.Var.path = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BrowseResponseListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LegalHoldSnappable operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: LegalHoldSnappable
             
             $query = New-RscQuerySnapshot -LegalHoldSnappable
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	snappableId = $someString
             	# REQUIRED
             	filterParams = @(
             		@{
             			# OPTIONAL
             			filterField = $someLegalHoldQueryFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LegalHoldQueryFilterField]) for enum values.
             			# OPTIONAL
             			beforeTime = $someDateTime
             			# OPTIONAL
             			afterTime = $someDateTime
             			# OPTIONAL
             			snappableName = $someString
             			# OPTIONAL
             			snappableTypes = @(
             				$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             			)
             			# OPTIONAL
             			snapshotTypes = @(
             				$someSnapshotTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			snapshotCustomizations = @(
             				$someSnapshotCustomization # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotCustomization]) for enum values.
             			)
             		}
             	)
             	# OPTIONAL
             	sortParam = @{
             		# OPTIONAL
             		type = $someLegalHoldSortType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LegalHoldSortType]) for enum values.
             		# OPTIONAL
             		sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LegalHoldSnapshotDetailConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the OnedriveSearch operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: OnedriveSearch
             
             $query = New-RscQuerySnapshot -OnedriveSearch
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # REQUIRED
             $query.Var.orgId = $someString
             # OPTIONAL
             $query.Var.onedriveSearchFilter = @{
             	# OPTIONAL
             	searchKeywordFilter = @{
             		# OPTIONAL
             		searchKeyword = $someString
             		# OPTIONAL
             		keywordType = $someOnedriveSearchKeywordType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchKeywordType]) for enum values.
             	}
             	# OPTIONAL
             	modifiedTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	createTime = @{
             		# OPTIONAL
             		fromTime = $someDateTime
             		# OPTIONAL
             		untilTime = $someDateTime
             	}
             	# OPTIONAL
             	searchObjectFilter = @{
             		# OPTIONAL
             		searchObjectType = $someOnedriveSearchObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.OnedriveSearchObjectType]) for enum values.
             	}
             	# OPTIONAL
             	channelId = $someString
             	# OPTIONAL
             	channelFolderName = $someString
             	# OPTIONAL
             	channelMembershipType = $someChannelMembershipType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ChannelMembershipType]) for enum values.
             	# OPTIONAL
             	excludeItemsUnderRoot = $someBoolean
             	# OPTIONAL
             	channelNameKeyword = $someString
             	# OPTIONAL
             	useExactVersionMatch = $someBoolean
             	# OPTIONAL
             	lambdaFilters = @{
             		# OPTIONAL
             		enableAbsolutePaths = $someBoolean
             		# OPTIONAL
             		enableAbsolutePathCachePreload = $someBoolean
             		# OPTIONAL
             		parentFolderIdBatch = @(
             			$someString
             		)
             		# OPTIONAL
             		searchRecurseFolderId = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: O365OnedriveObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Polaris operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: Polaris
             
             $query = New-RscQuerySnapshot -Polaris
             
             # REQUIRED
             $query.Var.snapshotFid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: PolarisSnapshot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Pvcs operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: Pvcs
             
             $query = New-RscQuerySnapshot -Pvcs
             
             # REQUIRED
             $query.Var.snapshotId = $someString
             # REQUIRED
             $query.Var.snappableId = $someString
             # REQUIRED
             $query.Var.isReplica = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;PvcInformation&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the QuarantinedDetails operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: QuarantinedDetails
             
             $query = New-RscQuerySnapshot -QuarantinedDetails
             
             # REQUIRED
             $query.Var.snapshotIds = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;QuarantineSpec&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Results operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: Results
             
             $query = New-RscQuerySnapshot -Results
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # REQUIRED
             $query.Var.startTimeMs = $someInt64
             # REQUIRED
             $query.Var.endTimeMs = $someInt64
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnapshotResultConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnappableList operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: SnappableList
             
             $query = New-RscQuerySnapshot -SnappableList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.workloadId = $someString
             # OPTIONAL
             $query.Var.snapshotFilter = @(
             	@{
             		# OPTIONAL
             		field = $someSnapshotQueryFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotQueryFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		typeFilters = @(
             			$someSnapshotTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		shouldFetchLinked = $someBoolean
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             		# OPTIONAL
             		time = $someDateTime
             		# OPTIONAL
             		customizationFilters = @(
             			$someSnapshotCustomization # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotCustomization]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someSnapshotQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.timeRange = @{
             	# REQUIRED
             	start = $someDateTime
             	# REQUIRED
             	end = $someDateTime
             }
             # OPTIONAL
             $query.Var.ignoreActiveWorkloadCheck = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GenericSnapshotConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnappablesList operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: SnappablesList
             
             $query = New-RscQuerySnapshot -SnappablesList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.snappableIds = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.snapshotFilter = @(
             	@{
             		# OPTIONAL
             		field = $someSnapshotQueryFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotQueryFilterField]) for enum values.
             		# OPTIONAL
             		text = $someString
             		# OPTIONAL
             		typeFilters = @(
             			$someSnapshotTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotTypeEnum]) for enum values.
             		)
             		# OPTIONAL
             		shouldFetchLinked = $someBoolean
             		# OPTIONAL
             		textList = @(
             			$someString
             		)
             		# OPTIONAL
             		time = $someDateTime
             		# OPTIONAL
             		customizationFilters = @(
             			$someSnapshotCustomization # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotCustomization]) for enum values.
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.sortBy = $someSnapshotQuerySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotQuerySortByField]) for enum values.
             # OPTIONAL
             $query.Var.timeRange = @{
             	# REQUIRED
             	start = $someDateTime
             	# REQUIRED
             	end = $someDateTime
             }
             # OPTIONAL
             $query.Var.ignoreActiveWorkloadCheck = $someBoolean
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: GenericSnapshotConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the SnappablesWithLegalHoldsSummary operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: SnappablesWithLegalHoldsSummary
             
             $query = New-RscQuerySnapshot -SnappablesWithLegalHoldsSummary
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	filterParams = @(
             		@{
             			# OPTIONAL
             			filterField = $someLegalHoldQueryFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LegalHoldQueryFilterField]) for enum values.
             			# OPTIONAL
             			beforeTime = $someDateTime
             			# OPTIONAL
             			afterTime = $someDateTime
             			# OPTIONAL
             			snappableName = $someString
             			# OPTIONAL
             			snappableTypes = @(
             				$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             			)
             			# OPTIONAL
             			snapshotTypes = @(
             				$someSnapshotTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotTypeEnum]) for enum values.
             			)
             			# OPTIONAL
             			snapshotCustomizations = @(
             				$someSnapshotCustomization # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SnapshotCustomization]) for enum values.
             			)
             		}
             	)
             	# OPTIONAL
             	sortParam = @{
             		# OPTIONAL
             		type = $someLegalHoldSortType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.LegalHoldSortType]) for enum values.
             		# OPTIONAL
             		sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: LegalHoldSnappableDetailConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Snapshot operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: Snapshot
             
             $query = New-RscQuerySnapshot -Snapshot
             
             # REQUIRED
             $query.Var.snapshotFid = $someString
             # OPTIONAL
             $query.Var.clusterUuid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmSnapshot
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the UnmanagedObject operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: UnmanagedObject
             
             $query = New-RscQuerySnapshot -UnmanagedObject
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	afterDate = $someDateTime
             	# OPTIONAL
             	beforeDate = $someDateTime
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	offset = $someInt
             	# OPTIONAL
             	searchValue = $someString
             	# OPTIONAL
             	snapshotType = $someV1QueryUnmanagedObjectSnapshotsV1RequestSnapshotType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryUnmanagedObjectSnapshotsV1RequestSnapshotType]) for enum values.
             	# OPTIONAL
             	sortBy = $someV1QueryUnmanagedObjectSnapshotsV1RequestSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryUnmanagedObjectSnapshotsV1RequestSortBy]) for enum values.
             	# OPTIONAL
             	sortOrder = $someV1QueryUnmanagedObjectSnapshotsV1RequestSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.V1QueryUnmanagedObjectSnapshotsV1RequestSortOrder]) for enum values.
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnapshotSummaryConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VappInstantRecoveryOptions operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: VappInstantRecoveryOptions
             
             $query = New-RscQuerySnapshot -VappInstantRecoveryOptions
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VappInstantRecoveryOptions
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VappTemplateExportOptions operation
             of the 'Snapshot' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snapshot
             # API Operation: VappTemplateExportOptions
             
             $query = New-RscQuerySnapshot -VappTemplateExportOptions
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	orgVdcId = $someString
             	# REQUIRED
             	catalogId = $someString
             	# REQUIRED
             	name = $someString
             	# REQUIRED
             	snapshotId = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VappTemplateExportOptionsUnion
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySnmp">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'SNMP' API domain:
             ['Configurations'].
             </summary>
             <description>
             New-RscQuerySnmp creates a new
             query object for operations
             in the 'SNMP' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'SNMP' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['Configurations'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySnmp -Configurations).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySnmp -Configurations).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Configurations operation
             of the 'SNMP' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Snmp
             # API Operation: Configurations
             
             $query = New-RscQuerySnmp -Configurations
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SnmpConfiguration
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySonar">
             <summary>
             Create a new RscQuery object for any of the 2
             operations in the 'Sonar' API domain:
             UserGroups, or Users.
             </summary>
             <description>
             New-RscQuerySonar creates a new
             query object for operations
             in the 'Sonar' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 2 operations
             in the 'Sonar' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: UserGroups, or Users.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySonar -UserGroups).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySonar -UserGroups).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the UserGroups operation
             of the 'Sonar' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sonar
             # API Operation: UserGroups
             
             $query = New-RscQuerySonar -UserGroups
             
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	groupName = $someString
             	# OPTIONAL
             	userId = $someString
             }
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AccessGroupConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Users operation
             of the 'Sonar' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Sonar
             # API Operation: Users
             
             $query = New-RscQuerySonar -Users
             
             # OPTIONAL
             $query.Var.sort = @{
             	# OPTIONAL
             	sortBy = $someListAccessUsersSort # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ListAccessUsersSort]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	groupsIds = @(
             		$someString
             	)
             	# OPTIONAL
             	search = $someString
             	# REQUIRED
             	timeRange = @{
             		# OPTIONAL
             		startTime = $someString
             		# OPTIONAL
             		endTime = $someString
             		# OPTIONAL
             		timezone = $someString
             	}
             }
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AccessUserConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryStorageArray">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'Storage Arrays' API domain:
             ['StorageArray'].
             </summary>
             <description>
             New-RscQueryStorageArray creates a new
             query object for operations
             in the 'Storage Arrays' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'Storage Arrays' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['StorageArray'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryStorageArray -StorageArray).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryStorageArray -StorageArray).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the StorageArray operation
             of the 'Storage Arrays' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    StorageArray
             # API Operation: StorageArray
             
             $query = New-RscQueryStorageArray -StorageArray
             
             # REQUIRED
             $query.Var.input = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AllStorageArraysReply
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQuerySyslog">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'Syslog' API domain:
             ['ExportRules'].
             </summary>
             <description>
             New-RscQuerySyslog creates a new
             query object for operations
             in the 'Syslog' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'Syslog' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['ExportRules'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySyslog -ExportRules).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQuerySyslog -ExportRules).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ExportRules operation
             of the 'Syslog' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Syslog
             # API Operation: ExportRules
             
             $query = New-RscQuerySyslog -ExportRules
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: SyslogExportRuleSummaryListResponse
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryThreat">
             <summary>
             Create a new RscQuery object for any of the 4
             operations in the 'Threat' API domain:
             HuntDetail, HuntResult, HuntSummary, or Hunts.
             </summary>
             <description>
             New-RscQueryThreat creates a new
             query object for operations
             in the 'Threat' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 4 operations
             in the 'Threat' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: HuntDetail, HuntResult, HuntSummary, or Hunts.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryThreat -HuntDetail).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryThreat -HuntDetail).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the HuntDetail operation
             of the 'Threat' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Threat
             # API Operation: HuntDetail
             
             $query = New-RscQueryThreat -HuntDetail
             
             # REQUIRED
             $query.Var.huntId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ThreatHunt
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HuntResult operation
             of the 'Threat' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Threat
             # API Operation: HuntResult
             
             $query = New-RscQueryThreat -HuntResult
             
             # REQUIRED
             $query.Var.huntId = $someString
             # OPTIONAL
             $query.Var.objectId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ThreatHuntResult
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HuntSummary operation
             of the 'Threat' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Threat
             # API Operation: HuntSummary
             
             $query = New-RscQueryThreat -HuntSummary
             
             # REQUIRED
             $query.Var.huntId = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ThreatHuntSummaryReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Hunts operation
             of the 'Threat' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Threat
             # API Operation: Hunts
             
             $query = New-RscQueryThreat -Hunts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.last = $someInt
             # OPTIONAL
             $query.Var.before = $someString
             # OPTIONAL
             $query.Var.beginTime = $someDateTime
             # OPTIONAL
             $query.Var.endTime = $someDateTime
             # OPTIONAL
             $query.Var.clusterUuidFilter = @(
             	$someString
             )
             # OPTIONAL
             $query.Var.statusFilter = @(
             	$someThreatHuntStatus # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ThreatHuntStatus]) for enum values.
             )
             # OPTIONAL
             $query.Var.matchesFoundFilter = @(
             	$someThreatHuntMatchesFound # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ThreatHuntMatchesFound]) for enum values.
             )
             # OPTIONAL
             $query.Var.quarantinedMatchesFilter = @(
             	$someThreatHuntQuarantinedMatchType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ThreatHuntQuarantinedMatchType]) for enum values.
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: ThreatHuntConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryVcenter">
             <summary>
             Create a new RscQuery object for any of the 10
             operations in the 'VMware vSphere vCenter' API domain:
             AdvancedTagPreview, AsyncRequestStatus, HotAddBandwidth, HotAddNetwork, HotAddProxy, List, Networks, NumProxiesNeeded, PreAddInfo, or Vcenter.
             </summary>
             <description>
             New-RscQueryVcenter creates a new
             query object for operations
             in the 'VMware vSphere vCenter' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 10 operations
             in the 'VMware vSphere vCenter' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AdvancedTagPreview, AsyncRequestStatus, HotAddBandwidth, HotAddNetwork, HotAddProxy, List, Networks, NumProxiesNeeded, PreAddInfo, or Vcenter.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVcenter -AdvancedTagPreview).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVcenter -AdvancedTagPreview).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AdvancedTagPreview operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: AdvancedTagPreview
             
             $query = New-RscQueryVcenter -AdvancedTagPreview
             
             # REQUIRED
             $query.Var.input = @{
             	# OPTIONAL
             	limit = $someInt
             	# OPTIONAL
             	offset = $someInt
             	# REQUIRED
             	filterCondition = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VcenterAdvancedTagPreviewReply
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the AsyncRequestStatus operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: AsyncRequestStatus
             
             $query = New-RscQueryVcenter -AsyncRequestStatus
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HotAddBandwidth operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: HotAddBandwidth
             
             $query = New-RscQueryVcenter -HotAddBandwidth
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HotAddBandwidthInfo
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HotAddNetwork operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: HotAddNetwork
             
             $query = New-RscQueryVcenter -HotAddNetwork
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: HotAddNetworkConfigWithName
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HotAddProxy operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: HotAddProxy
             
             $query = New-RscQueryVcenter -HotAddProxy
             
             # REQUIRED
             $query.Var.clusterUuids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;VcenterHotAddProxyVmInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the List operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: List
             
             $query = New-RscQueryVcenter -List
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVcenterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Networks operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: Networks
             
             $query = New-RscQueryVcenter -Networks
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: NetworkInfoListResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NumProxiesNeeded operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: NumProxiesNeeded
             
             $query = New-RscQueryVcenter -NumProxiesNeeded
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Int32
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the PreAddInfo operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: PreAddInfo
             
             $query = New-RscQueryVcenter -PreAddInfo
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	clusterUuid = $someString
             	# REQUIRED
             	vcenterConfig = @{
             		# OPTIONAL
             		connectionConfig = @{
             			# OPTIONAL
             			caCerts = $someString
             			# REQUIRED
             			hostname = $someString
             			# REQUIRED
             			password = $someString
             			# REQUIRED
             			username = $someString
             		}
             		# OPTIONAL
             		id = $someString
             	}
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VcenterPreAddInfo
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Vcenter operation
             of the 'VMware vSphere vCenter' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vcenter
             # API Operation: Vcenter
             
             $query = New-RscQueryVcenter -Vcenter
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVcenter
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryVmware">
             <summary>
             Create a new RscQuery object for any of the 2
             operations in the 'VMware' API domain:
             CdpStateInfos, or IsManagementEnabled.
             </summary>
             <description>
             New-RscQueryVmware creates a new
             query object for operations
             in the 'VMware' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 2 operations
             in the 'VMware' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: CdpStateInfos, or IsManagementEnabled.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVmware -CdpStateInfos).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVmware -CdpStateInfos).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the CdpStateInfos operation
             of the 'VMware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vmware
             # API Operation: CdpStateInfos
             
             $query = New-RscQueryVmware -CdpStateInfos
             
             # REQUIRED
             $query.Var.ids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;VmwareCdpStateInfo&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the IsManagementEnabled operation
             of the 'VMware' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vmware
             # API Operation: IsManagementEnabled
             
             $query = New-RscQueryVmware -IsManagementEnabled
             
             # No variables for this query.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: System.Boolean
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryVsphere">
             <summary>
             Create a new RscQuery object for any of the 23
             operations in the 'VMware vSphere' API domain:
             ComputeCluster, ComputeClusters, Datacenter, Datastore, DatastoreCluster, DatastoreClusters, DatastoreList, Folder, Folders, Host, HostDetails, HostList, HostsByFids, LiveMounts, Mount, MountList, Network, ResourcePool, RootRecoveryHierarchy, Tag, TagCategory, TopLevelDescendantsList, or VmwareCdpLiveInfo.
             </summary>
             <description>
             New-RscQueryVsphere creates a new
             query object for operations
             in the 'VMware vSphere' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 23 operations
             in the 'VMware vSphere' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ComputeCluster, ComputeClusters, Datacenter, Datastore, DatastoreCluster, DatastoreClusters, DatastoreList, Folder, Folders, Host, HostDetails, HostList, HostsByFids, LiveMounts, Mount, MountList, Network, ResourcePool, RootRecoveryHierarchy, Tag, TagCategory, TopLevelDescendantsList, or VmwareCdpLiveInfo.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVsphere -ComputeCluster).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVsphere -ComputeCluster).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the ComputeCluster operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: ComputeCluster
             
             $query = New-RscQueryVsphere -ComputeCluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereComputeCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ComputeClusters operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: ComputeClusters
             
             $query = New-RscQueryVsphere -ComputeClusters
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereComputeClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Datacenter operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: Datacenter
             
             $query = New-RscQueryVsphere -Datacenter
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatacenter
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Datastore operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: Datastore
             
             $query = New-RscQueryVsphere -Datastore
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatastore
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatastoreCluster operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: DatastoreCluster
             
             $query = New-RscQueryVsphere -DatastoreCluster
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatastoreCluster
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatastoreClusters operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: DatastoreClusters
             
             $query = New-RscQueryVsphere -DatastoreClusters
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatastoreClusterConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the DatastoreList operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: DatastoreList
             
             $query = New-RscQueryVsphere -DatastoreList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereDatastoreConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Folder operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: Folder
             
             $query = New-RscQueryVsphere -Folder
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereFolder
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Folders operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: Folders
             
             $query = New-RscQueryVsphere -Folders
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereFolderConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Host operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: Host
             
             $query = New-RscQueryVsphere -Host
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereHost
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostDetails operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: HostDetails
             
             $query = New-RscQueryVsphere -HostDetails
             
             # REQUIRED
             $query.Var.input = @{
             	# REQUIRED
             	id = $someString
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VmwareHostDetail
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostList operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: HostList
             
             $query = New-RscQueryVsphere -HostList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereHostConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the HostsByFids operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: HostsByFids
             
             $query = New-RscQueryVsphere -HostsByFids
             
             # REQUIRED
             $query.Var.fids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: List&lt;VsphereHost&gt;
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the LiveMounts operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: LiveMounts
             
             $query = New-RscQueryVsphere -LiveMounts
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someVsphereLiveMountFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VsphereLiveMountFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             }
             )
             # OPTIONAL
             $query.Var.sortBy = @{
             	# OPTIONAL
             	field = $someVsphereLiveMountSortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VsphereLiveMountSortByField]) for enum values.
             	# OPTIONAL
             	sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereLiveMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Mount operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: Mount
             
             $query = New-RscQueryVsphere -Mount
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereMount
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MountList operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: MountList
             
             $query = New-RscQueryVsphere -MountList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.filter = @{
             	# OPTIONAL
             	name = $someString
             	# OPTIONAL
             	clusterUuid = @(
             		$someString
             	)
             	# OPTIONAL
             	powerStatus = @(
             		$someBoolean
             	)
             	# OPTIONAL
             	sourceVmId = $someString
             }
             # OPTIONAL
             $query.Var.sortBy = $someVsphereMountSortBy # Call [Enum]::GetValues([RubrikSecurityCloud.Types.VsphereMountSortBy]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereMountConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Network operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: Network
             
             $query = New-RscQueryVsphere -Network
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereNetwork
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the ResourcePool operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: ResourcePool
             
             $query = New-RscQueryVsphere -ResourcePool
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereResourcePool
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RootRecoveryHierarchy operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: RootRecoveryHierarchy
             
             $query = New-RscQueryVsphere -RootRecoveryHierarchy
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmHierarchyObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the Tag operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: Tag
             
             $query = New-RscQueryVsphere -Tag
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereTag
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TagCategory operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: TagCategory
             
             $query = New-RscQueryVsphere -TagCategory
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereTagCategory
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the TopLevelDescendantsList operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: TopLevelDescendantsList
             
             $query = New-RscQueryVsphere -TopLevelDescendantsList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.typeFilter = @(
             	$someHierarchyObjectTypeEnum # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyObjectTypeEnum]) for enum values.
             )
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: CdmHierarchyObjectConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the VmwareCdpLiveInfo operation
             of the 'VMware vSphere' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Vsphere
             # API Operation: VmwareCdpLiveInfo
             
             $query = New-RscQueryVsphere -VmwareCdpLiveInfo
             
             # REQUIRED
             $query.Var.ids = @(
             	$someString
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchVmwareCdpLiveInfo
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryVsphereVm">
             <summary>
             Create a new RscQuery object for any of the 6
             operations in the 'VMware vSphere VM' API domain:
             AsyncRequestStatus, MissedRecoverableRange, New, NewList, RecoverableRange, or RecoverableRangeInBatch.
             </summary>
             <description>
             New-RscQueryVsphereVm creates a new
             query object for operations
             in the 'VMware vSphere VM' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 6 operations
             in the 'VMware vSphere VM' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: AsyncRequestStatus, MissedRecoverableRange, New, NewList, RecoverableRange, or RecoverableRangeInBatch.
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVsphereVm -AsyncRequestStatus).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryVsphereVm -AsyncRequestStatus).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the AsyncRequestStatus operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: AsyncRequestStatus
             
             $query = New-RscQueryVsphereVm -AsyncRequestStatus
             
             # REQUIRED
             $query.Var.clusterUuid = $someString
             # REQUIRED
             $query.Var.id = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: AsyncRequestStatus
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the MissedRecoverableRange operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: MissedRecoverableRange
             
             $query = New-RscQueryVsphereVm -MissedRecoverableRange
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # OPTIONAL
             $query.Var.beforeTime = $someDateTime
             # OPTIONAL
             $query.Var.afterTime = $someDateTime
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RecoverableRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the New operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: New
             
             $query = New-RscQueryVsphereVm -New
             
             # REQUIRED
             $query.Var.fid = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVm
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the NewList operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: NewList
             
             $query = New-RscQueryVsphereVm -NewList
             
             # OPTIONAL
             $query.Var.first = $someInt
             # OPTIONAL
             $query.Var.after = $someString
             # OPTIONAL
             $query.Var.sortBy = $someHierarchySortByField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchySortByField]) for enum values.
             # OPTIONAL
             $query.Var.sortOrder = $someSortOrder # Call [Enum]::GetValues([RubrikSecurityCloud.Types.SortOrder]) for enum values.
             # OPTIONAL
             $query.Var.filter = @(
             	@{
             		# OPTIONAL
             		field = $someHierarchyFilterField # Call [Enum]::GetValues([RubrikSecurityCloud.Types.HierarchyFilterField]) for enum values.
             		# OPTIONAL
             		texts = @(
             			$someString
             		)
             		# OPTIONAL
             		tagFilterParams = @(
             			@{
             				# OPTIONAL
             				filterType = $someTagFilterType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.TagFilterType]) for enum values.
             				# OPTIONAL
             				tagKey = $someString
             				# OPTIONAL
             				tagValue = $someString
             			}
             		)
             		# OPTIONAL
             		objectTypeFilterParams = @(
             			$someManagedObjectType # Call [Enum]::GetValues([RubrikSecurityCloud.Types.ManagedObjectType]) for enum values.
             		)
             		# OPTIONAL
             		awsNativeProtectionFeatureNames = @(
             			$someAwsNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AwsNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		isNegative = $someBoolean
             		# OPTIONAL
             		isSlowSearchEnabled = $someBoolean
             		# OPTIONAL
             		azureNativeProtectionFeatureNames = @(
             			$someAzureNativeProtectionFeature # Call [Enum]::GetValues([RubrikSecurityCloud.Types.AzureNativeProtectionFeature]) for enum values.
             		)
             		# OPTIONAL
             		unmanagedObjectAvailabilityFilter = @(
             			$someUnmanagedObjectAvailabilityFilter # Call [Enum]::GetValues([RubrikSecurityCloud.Types.UnmanagedObjectAvailabilityFilter]) for enum values.
             		)
             }
             )
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: VsphereVmConnection
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRange operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: RecoverableRange
             
             $query = New-RscQueryVsphereVm -RecoverableRange
             
             # REQUIRED
             $query.Var.snappableFid = $someString
             # OPTIONAL
             $query.Var.beforeTime = $someDateTime
             # OPTIONAL
             $query.Var.afterTime = $someDateTime
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: RecoverableRangeResponse
             
             
             
             </code>
            
             </example>
            
             <example>
             Runs the RecoverableRangeInBatch operation
             of the 'VMware vSphere VM' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    VsphereVm
             # API Operation: RecoverableRangeInBatch
             
             $query = New-RscQueryVsphereVm -RecoverableRangeInBatch
             
             # REQUIRED
             $query.Var.requestInfo = @{
             	# OPTIONAL
             	afterTime = $someDateTime
             	# OPTIONAL
             	beforeTime = $someDateTime
             	# REQUIRED
             	vmIds = @(
             		$someString
             	)
             }
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: BatchVmwareVmRecoverableRanges
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Cmdlets.New_RscQueryWebhook">
             <summary>
             Create a new RscQuery object for any of the 1
             operations in the 'Webhook' API domain:
             ['Webhook'].
             </summary>
             <description>
             New-RscQueryWebhook creates a new
             query object for operations
             in the 'Webhook' API domain. It only creates a data structure,
             it does not execute the operation. This cmdlet does not need a
             connection to run. To execute the operation, either call Invoke()
             on the object returned by this cmdlet, or pass the object to
             Invoke-Rsc.
             There are 1 operations
             in the 'Webhook' API domain. Select the operation this
             query is for by specifying the appropriate value for the
             -Operation parameter;
             one of: ['Webhook'].
             Each operation has its own set of variables that can be set with
             the -Var parameter. For more info about the variables, 
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryWebhook -Webhook).Info().
             Each operation also has its own set of fields that can be
             selected for retrieval. If you do not specify any fields,
             a set of default fields will be selected. The selection is
             rule-based, and tries to select the most commonly used fields.
             For example if a field is named 'id' or 'name', 
             it will be selected. If you give -FieldProfile DETAIL, then
             another set of rules will be used to select more fields on top
             of the default fields. The set of rules for selecting fields
             is called a field profile. You can specify a field profile
             with the -FieldProfile parameter. You can add or remove fields
             from the field profile with the -AddField and -RemoveField
             parameters. If you end up with too many -AddField and -RemoveField
             parameters, you can list them in a text file, one per line,
             with a '+' or '-' prefix, and pass the file name to the
             -FilePatch parameter. Profiles and Patches are one way to
             customize the fields that are selected. Another way is to
             specify the fields by passing the -Field parameter an object
             that contains the fields you want to select as properties.
             Any property that is not null in that object is interpreted
             as a field to select
             (and the actual values they are set to do not matter).
             The [RubrikSecurityCloud.Types] namespace
             contains a set of classes that you can use to specify fields.
             To know what [RubrikSecurityCloud.Types] object to use
             for a specific operation,
             call Info() on the object returned by this cmdlet, for example:
             (New-RscQueryWebhook -Webhook).Info().
             You can combine a -Field parameter with patching parameters.
             -Field is applied first, then -FilePatch, -AddField and -RemoveField.
            
             </description>
            
             <example>
             Runs the Webhook operation
             of the 'Webhook' API domain.
             <code>
             PS &gt;
            
             
             # Create an RscQuery object for:
             # API Domain:    Webhook
             # API Operation: Webhook
             
             $query = New-RscQueryWebhook -Webhook
             
             # OPTIONAL
             $query.Var.name = $someString
             
             # Execute the query
             
             $result = $query | Invoke-Rsc
             
             Write-Host $result.GetType().Name # prints: WebhookConnection
             
             
             
             </code>
            
             </example>
            
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Private.RscBasePSCmdlet">
            <summary>
            Base class for all RSC PowerShell cmdlets.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscBasePSCmdlet.#ctor(System.Boolean)">
            <summary>
            Create a new RSC PowerShell cmdlet with logging and a client.
            Client is left null until RetrieveConnection() is called
            from the derived class, or if the cmdlet is constructed
            with retrieveConnection=true.
            
            Note that `retrieveConnection=true` retrieves an existing
            connection if any ; if there are none, it does not 
            create a new connection.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscBasePSCmdlet.GetProfileDir">
            <summary>
            Get the RSC SDK's user profile directory.
            Typically "$(Split-Path $PROFILE -Parent)/rubrik-powershell-sdk"
            But resolves to the current directory if $PROFILE is not defined.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscBasePSCmdlet.GetValueFromParameterSet(System.String)">
            <summary>
            If a cmdlet parameter exists with given name, within the current parameter set, return its value.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdletConfig">
            <summary>
            Configuration for RscGqlPSCmdlet
            
            HasPatchingDynamicParam:
            If true, add patching dynamic parameter to the cmdlet
            (-AddField and -RemoveField)
            
            SendQueryOnExitIfAny:
            If true, send the query to the server when the cmdlet exits.
            If false, return the query object instead (if any).
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdlet">
            <summary>
            Base class for all RSC PowerShell cmdlets that use a GraphQL query.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdlet.#ctor(RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdletConfig)">
            <summary>
            Create a new RSC PowerShell cmdlet.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscGqlPSCmdlet.Initialize(System.Tuple{System.String,System.String}[],System.String,System.String,System.String,System.String,RubrikSecurityCloud.QueryDocMethod,RubrikSecurityCloud.QueryFieldSpecMethod,System.String)">
            <summary>
            Initialize the query object.
            Initialize() is called by the cmdlet's ProcessRecord() method.
            </summary>
            <param name="opArgDefs">
            Operation argument definitions. e.g. { Tuple.Create("first",
            "Int"), Tuple.Create("sortOrder", "SortOrder") }
            </param>
            <param name="opKind">"query" or "mutation"</param>
            <param name="opName">e.g. "QueryClusterConnection"</param>
            <param name="opArgs">
            e.g. "($first: Int ,$sortOrder: SortOrder)"</param>
            <param name="opReturnType">e.g. "ClusterConnection"</param>
            <param name="queryDocMethod">
            Method that returns the query document as a string.
            It does not explore. It takes a field object as input,
            and returns the query document as a string.
            "query document": the text of the operation: 
            the operation name, the operation arguments,
            and the fields to select for retrieval. For example in
            the final query, it's all the text inside
            query QueryClusterConnection($first: Int ...) {
                    -- query document --
            }
            So it's: the query name, the query arguments, and 
            the field spec.
            </param>
            <param name="queryFieldSpecMethod">
            Method that builds the field object for this query
            using exploration. It takes for input an exploration context,
            and returns the field object.
            </param>
            <param name="varUsageExample">
            Example text of how to initialize the variables
            </param>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Private.RscSessionInfo">
            <summary>
            Used to return information on the user session and SDK/Server
            versions in use.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscSessionInfo.#ctor(RubrikSecurityCloud.NetSDK.Client.RscGraphQLClient,RubrikSecurityCloud.IRscLogger)">
            <summary>
            Constructor
            </summary>
            <param name="rscClient">Instance of RscGraphQLClient</param>
            <param name="logger">Instance of type implementing IRscLogger</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscSessionInfo.GetRscPsVersion">
            <summary>
            Returns an instance of RscPsVersionTable containing the
            server deployment version and the SDK schema version.
            </summary>
            <returns>Instance of RscPsVersionTable</returns>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscSessionInfo.GetSessionInfo">
            <summary>
            Returns an instance of RscPsSession info containing the
            client information, authentication state and version info.
            </summary>
            <returns>Instance of RscPsSessionInfo</returns>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscTypeInitializer.GetAllTypeNames(System.String,System.Boolean)">
            <summary>
            Get a list of all RSC schema types whose names contain a given string.
            </summary>
            <param name="nameFilter">string to match, case insensitive</param>
            <param name="interfaces">if true, return interfaces; if false return classes</param>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscTypeInitializer.GetTypeByName(System.String)">
            <summary>
            Get an RSC schema type by name.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscTypeInitializer.InitializeInputWithSelectedFields(System.String,System.Collections.Hashtable)">
            <summary>
            Return an instance of an input, with fields contained in
            inputFields initialized to non-null values.
            </summary>
            <param name="inputTypeName"></param>
            <param name="providedInputFields"></param>
            <returns>object</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RubrikSecurityCloud.PowerShell.Private.RscTypeInitializer.InitializeTypeWithSelectedProperties(System.String,System.String[])">
            <summary>
            Return an instance of an class, with properties listed in
            requestedProperties initialized to non-null values.
            </summary>
            <param name="objectClassName"></param>
            <param name="requestedProperties"></param>
            <returns>object</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:RubrikSecurityCloud.PowerShell.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
              This class was generated by MSBuild using the GenerateResource task.
              To add or remove a member, edit your .resx file then rerun MSBuild.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.PowerShell.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.JsonUtils.JsonReady(System.Object)">
            <summary>
            Convert an object so that it can be serialized to JSON.
            - Handles basic types (string, int, etc.) by returning them as-is.
            - Unwrap PowerShell PSObjects.
            - RSC types pass through.
            - Hashtables and Enumerable types are recursively processed.
            - Defaults to ToString() on unrecognized types.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.RscGqlOperation">
            <summary>
             A GraphQL Operation.
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.Kind">
            <summary>
            The kind of operation: "query" or "mutation".
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.Name">
            <summary>
            The name of the operation.
            By convention, the name of the operation is the capitalized version of the name of the root field. e.g. :
            - root field: "clusterConnection",
            - operation name: "ClusterConnection"
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.Args">
            <summary>
            The arguments of the operation. e.g. : "(id: $id)"
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.ReturnType">
            <summary>
            The return type of the operation, which can either be
            a simple type (int, string, etc.) or a RubrikSecurityCloud.Schema
            type (e.g. "ClusterConnection", "Cluster", etc.)
            </summary>
        </member>
        <member name="P:RubrikSecurityCloud.RscGqlOperation.FieldSpec">
            <summary>
            The field spec of the operation. e.g. : "id name"
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlOperation.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a new RscGqlOperation object.
            
            The RscGqlOperation is a collection of string properties
            that are assembled by the Query() method to produce
            the exact, final GraphQL query that is sent to the API server.
            </summary>
            <param name="kind">The kind of operation (query, mutation, subscription).</param>
            <param name="name">The name of the operation.</param>
            <param name="args">The arguments of the operation.</param>
            <param name="returnType">The return type of the operation.</param>
            <param name="fieldSpec">The field spec of the operation.</param>
            <returns>A new RscGqlOperation object.</returns>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlOperation.Query">
            <summary>
            Return the query for the API server.
            </summary>
        </member>
        <member name="T:RubrikSecurityCloud.RscGqlVars">
            <summary>
            Variables to be used in a GraphQL query.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.#ctor">
            <summary>
            Create a new RscGqlVars object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.#ctor(System.Object,System.Tuple{System.String,System.String}[],RubrikSecurityCloud.GetOverrideValueForVarDelegate,System.Boolean,System.String)">
            <summary>
            Create a new RscGqlVars object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.Set(System.Object,System.Tuple{System.String,System.String}[],RubrikSecurityCloud.GetOverrideValueForVarDelegate,System.Boolean,System.String)">
            <summary>
            Set variables from various input types.
            </summary>
            <param name="obj">
            - If varDefs shows only 1 variable, and obj is not a hashtable,
              then obj is assumed to be the value of that variable.
            - If obj is a string, it is assumed to be a
              comma-separated list of key-value pairs.
            - Otherwise obj must be a hashtable
              (obj=null is treated as an empty hashtable).
            Values are converted to JSON-serializable types
            (RSC types are passed through as-is).
            </param>
            <param name="varDefs">
            Variable definitions modify the variables in 3 ways:
            - look up overrides from the cmdlet's parameters
            - throw on missing required variables
            - for basic types, convert the value to the correct type
            </param>
            <param name="getOverrideValueForVar">
            Used to look up overrides from the cmdlet's parameters.
            </param>
            <param name="ignoreRequired">
            if false, throw on missing required variables.
            </param>
            <param name="example">
            An example of how the variables can be initialized.
            </param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.Info">
            <summary>
            Return info about the variables:
            - name
            - type
            - link to online documentation
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.Example">
            <summary>
            Return an example of how the variables can be initialized.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.conformToVarDefs(RubrikSecurityCloud.GetOverrideValueForVarDelegate,System.Boolean)">
            <summary>
            Variable definitions modify the variables in 3 ways:
            - look up overrides from the cmdlet's parameters
            - throw on missing required variables
            - for basic types, convert the value to the correct type
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.Finalize">
            <summary>
            Finalize the variables for sending to the server:
            - perform basic conversions to match var definitions
              (e.g.: a value of "3" is converted to 3
                     where the var def says int)
            - check for missing required variables
            - make sure all variables are JSON-serializable.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscGqlVars.ToString">
            <summary>
            String representation of the variables.
            </summary>
        </member>
        <member name="F:RubrikSecurityCloud.RscQuery.queryDocMethod">
            <summary>
            Method that returns the query document as a string.
            It does not explore. It takes a field object as input,
            and returns the query document as a string.
            "query document": the text of the operation: 
            the operation name, the operation arguments,
            and the fields to select for retrieval. For example in
            the final query, it's all the text inside
            query QueryClusterConnection($first: Int ...) {
                    -- query document --
            }
            So it's: the query name, the query arguments, and 
            the field spec.
            </summary>
        </member>
        <member name="F:RubrikSecurityCloud.RscQuery.queryFieldSpecMethod">
            <summary>
            Method that builds the field object for this query
            using exploration. It takes for input an exploration context,
            and returns the field object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.#ctor(RubrikSecurityCloud.RscOp,RubrikSecurityCloud.RscGqlVars,System.Object,RubrikSecurityCloud.RscGqlOperation)">
            <summary>
            Create a new RscQuery object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.Invoke">
            <summary>
            Invoke the GraphQL query (send it to the API server)
            and return the result as a PowerShell object of
            the appropriate schema type.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.GqlOperation">
            <summary>
            The name of the underlying GQL operation.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.AllFields">
            <summary>
            Return a flattened list of all the fields in the Field object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.Info">
            <summary>
            Return documentation links for variables and Field object.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.Example">
            <summary>
            Return an example of how the variables can be initialized.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.GqlRequest(System.Boolean)">
            <summary>
            Build the GraphQL request
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.OpInfo">
            <summary>
            Return the RscOp object for this query.
            </summary>
        </member>
        <member name="M:RubrikSecurityCloud.RscQuery.ToString">
            <summary>
             String representation of this object.
            </summary>
        </member>
    </members>
</doc>
