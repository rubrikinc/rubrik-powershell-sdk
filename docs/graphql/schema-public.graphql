type Query {
  # Account ID.
  accountId: String!

  # This endpoint is deprecated.
  accountSettings: AccountSetting!
  activeCustomAnalyzers: AnalyzerConnection!

  # Summary of the given Active Directory domain.
  activeDirectoryDomain(
    # The Rubrik UUID for the object.
    fid: UUID!): ActiveDirectoryDomain!

  # Summary of the given Active Directory domain controller.
  activeDirectoryDomainController(
    # The Rubrik UUID for the object.
    fid: UUID!): ActiveDirectoryDomainController!

  # Summary of all Active Directory domain controllers.
  activeDirectoryDomainControllers(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ActiveDirectoryDomainControllerConnection!

  # Summary of all Active Directory domains.
  activeDirectoryDomains(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ActiveDirectoryDomainConnection!

  # Search across a range of snapshots of a domain controller for Active Directory objects
  # 
  # Supported in v9.1+
  # Return the Active Directory objects matching the search criteria.
  activeDirectorySearchSnapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # ID of the Active Directory domain controller that needs to be explored.
    id: String!,

    # Searches across the snapshots taken on or after the specified date.
    snapshotAfterDate: DateTime,

    # Searches across the snapshots taken on or before the specified date.
    snapshotBeforeDate: DateTime,

    # Search string.
    name: String!,

    # Type of the objects to be searched.
    objectType: V1SearchDomainControllerRequestObjectType): ActiveDirectoryObjectSearchResponseConnection!

  # Retrieve an activity series.
  activitySeries(
    # Input for retrieving an activity series.
    input: ActivitySeriesInput!): ActivitySeries!

  # Paginated list of event series objects. Each page of the results will include at most 50 entries unless otherwise specified using the first parameter. Query the pageInfo.hasNextPage field to know whether all objects were returned.
  activitySeriesConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Activity sort order
    sortOrder: SortOrder,

    # Sort activity series by field.
    sortBy: ActivitySeriesSortField, filters: ActivitySeriesFilter): ActivitySeriesConnection!

  # Active Directory volume export connection.
  adVolumeExports(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for Active Directory volume exports.
    filters: [AdVolumeExportFilter!],

    # Sort by argument for Active Directory volume exports.
    sortBy: AdVolumeExportSortByInput): AdVolumeExportConnection!

  # List of account owners.
  allAccountOwners: [User!]!
  allAccountProducts(
    # Name of product (Data Protection, Ransomware Investigation, etc.).
    nameFilter: [ProductName!]!,

    # Type of product (Revenue, POC, etc.).
    typeFilter: [ProductType!]!,

    # State of product (Active, Expired, etc.).
    stateFilter: [ProductState!]!,

    # Start date of product (yyyy-mm-dd).
    startDateArg: DateTime,

    # End date of product (yyyy-mm-dd).
    endDateArg: DateTime): [AccountProduct!]!

  # Retrieves the list of all accounts with their Exocompute account mapping, if exists.
  allAccountsWithExocomputeMappings(
    # Vendor of the cloud account.
    cloudVendor: CloudVendor!,

    # Cloud account features. Rubrik offers a cloud account feature as part of Rubrik Security Cloud (RSC).
    features: [CloudAccountFeature!]! = [],

    # List of mapped Exocompute account IDs.
    exocomputeAccountIdsFilter: [UUID!]! = []): [CloudAccountWithExocomputeMapping!]!

  # Returns privileges that are allowed to be asssigned to org admin roles.
  allAllowedOrgAdminOperations: [Operation!]!

  # List of authorized operations for global resource.
  allAuthorizationsForGlobalResource: [Operation!]!

  # List of authorizations for the object.
  allAuthorizationsForObject(
    # The Rubrik UUID for the object.
    fid: UUID!): [Operation!]!

  # List of authorizations for the objects.
  allAuthorizationsForObjects(
    # The Rubrik UUIDs for the objects.
    fids: [UUID!]!): [AuthorizedOperations!]!

  # List of Availability Zones (AZs) in the specified region on the specified AWS Native account.
  allAvailabilityZonesByRegionFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!): [String!]!

  # Get all Rubrik CDM versions in the AWS marketplace.
  allAwsCdmVersions(
    # Rubrik CDM version request parameters for AWS.
    input: AwsCdmVersionRequest!): [AwsCdmVersion!]!

  # List of all AWS cloud account configurations with the given search query.
  allAwsCloudAccountConfigs(
    # Arguments for get cloud accounts configs.
    awsCloudAccountsArg: AwsCloudAccountConfigsInput!): [AwsFeatureConfig!]!

  # List of active AWS cloud accounts and the features for the accounts. A cloud account is an AWS account added to the Rubrik platform.
  allAwsCloudAccountsWithFeatures(
    # Arguments for get cloud accounts.
    awsCloudAccountsArg: AwsCloudAccountsWithFeaturesInput!): [AwsCloudAccountWithFeatures!]!

  # List all aws compute settings.
  allAwsComputeSettings(
    # Specification on how to sort a list of compute settings.
    sortBy: AwsCloudComputeSettingQuerySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Specification on how to filter a list of compute settings.
    filter: [AwsCloudComputeSettingFilterInput!],

    # Specifies the context filter to use.
    contextFilter: ContextFilterTypeEnum): [AwsComputeSettings!]! @deprecated(reason: "This query is no longer supported.")

  # List of all AWS exocompute configurations filtered by a cloud account ID or a cloud account name prefix.
  allAwsExocomputeConfigs(
    # A query that searches for Exocompute configurations with an account name or account native ID that is prefixed by the search query.
    awsNativeAccountIdOrNamePrefix: String!): [AwsExocomputeConfig!]!

  # All Rubrik CC-ES instance profiles in the AWS account.
  allAwsInstanceProfileNames(
    # Cloud account ID.
    cloudAccountId: String!,

    # Region of AWS account.
    region: String!): [String!]!

  # Retrieves the permissions policy for all the input features along with any AWS-managed policy ARNs which need to be attached to the roles. Each policy document can be used to create an AWS-managed policy which then needs to be attached to corresponding role.
  allAwsPermissionPolicies(
    # Input to retrieve AWS permission policies.
    input: AwsGetPermissionPoliciesInput!): [PermissionPolicy!]!

  # All valid AWS regions for this cloud account.
  allAwsRegions(
    # Cloud account ID.
    cloudAccountId: String!): [AwsCloudAccountRegion!]!

  # Retrieve ARM templates for role definition and role assignment.
  allAzureArmTemplatesByFeature(
    # Input for retrieving ARM templates for role definition and role assignment.
    input: AzureArmTemplatesByFeatureInput!): [AzureArmTemplateByFeature!]!

  # Get all Rubrik CDM versions in the Azure marketplace.
  allAzureCdmVersions(
    # Rubrik CDM version request parameters for Azure.
    cdmVersionRequest: AzureCdmVersionReq!): [AzureCdmVersion!]!

  # Retrieves a list of all the missing permissions on Azure subscriptions that are a part of the Azure Cloud Account.
  allAzureCloudAccountMissingPermissions(
    # Session ID of the current OAuth session.
    sessionId: String!,

    # List of Azure subscription IDs.
    subscriptionIds: [UUID!]!,

    # The cloud account action to be performed. Some examples are: isCreate, isUpdateRegions, isDelete.
    cloudAccountAction: CloudAccountAction!): [AzureSubscriptionMissingPermissions!]!

  # Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets.
  allAzureCloudAccountSubnetsByRegion(
    # The Rubrik ID of the cloud account.
    cloudAccountId: UUID!,

    # Azure region.
    region: AzureCloudAccountRegion!): [AzureNativeSubnet!]!

  # Retrieves a list of all Azure Subscriptions with feature details such as feature, status, and regions.
  allAzureCloudAccountSubscriptionsByFeature(
    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # List of subscription status filters to apply.
    subscriptionStatusFilters: [CloudAccountStatus!]!): [AzureSubscriptionWithFeaturesType!]!

  # Retrieves a list of all the Azure tenants and tenant subscriptions for features. The list can be filtered by feature status, subscription native ID, and subscription name.
  allAzureCloudAccountTenants(
    # Cloud account features. Rubrik offers a cloud account feature as part of Rubrik Security Cloud (RSC).
    features: [CloudAccountFeature!],

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # Specifies whether the details about the subscriptions in the tenants are included in the response or not.
    includeSubscriptionDetails: Boolean!): [AzureCloudAccountTenant!]!

  # List of all Azure Disk Encryption Sets in a region.
  allAzureDiskEncryptionSetsByRegion(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!,

    # The azure region.
    region: AzureNativeRegion!): [AzureNativeDiskEncryptionSet!]!

  # List of all Encryption Keys in an Azure Key Vault.
  allAzureEncryptionKeys(
    # Input for fetching Encryption Keys in an Azure Key Vault.
    azureEncryptionKeysInput: AzureEncryptionKeysInput!): [AzureEncryptionKey!]!

  # Retrieves a list of Azure Exocompute configurations filtered by a cloud account ID or a search query.
  allAzureExocomputeConfigsInAccount(
    # A query that searches for Exocompute configurations with an account name or account native ID that is prefixed by the search query.
    azureExocomputeSearchQuery: String,

    # IDs of cloud accounts.
    cloudAccountIDs: [UUID!]): [AzureExocomputeConfigsInAccount!]!

  # List of all Azure Key Vaults in a region.
  allAzureKeyVaultsByRegion(
    # Input for fetching Key Vaults in an Azure region.
    azureKeyVaultsInput: AzureKeyVaultsInput!): [AzureKeyVault!]!

  # List all managed identities for Azure resources.
  allAzureManagedIdentities(
    # Managed identities request parameters for Azure.
    managedIdentitiesRequest: AzureManagedIdentitiesRequest!): [AzureManagedIdentity!]!

  # Retrieves all availability sets in the specified region, resource group, and subscription. An availability set is a logical grouping of VMs to facilitate redundancy and availability. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/availability-set-overview.
  allAzureNativeAvailabilitySetsByRegionFromAzure(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!,

    # Resource Group Name.
    resourceGroupName: String!,

    # The azure region.
    region: AzureNativeRegion!): [AzureNativeAvailabilitySet!]!

  # Retrieves all supported disk types when exporting a specific snapshot. Not all disk types are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types.
  allAzureNativeExportCompatibleDiskTypesByRegionFromAzure(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!,

    # The azure region.
    region: AzureNativeRegion!): [AzureNativeExportCompatibleDiskTypes!]!

  # Retrieves all supported virtual machine (VM) sizes when exporting a particular snapshot. Not all VM sizes are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes.
  allAzureNativeExportCompatibleVmSizesByRegionFromAzure(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!,

    # The azure region.
    region: AzureNativeRegion!,

    # Snapshot ID
    vmSnapshotId: UUID!): [AzureNativeExportCompatibleVmSizes!]!

  # Retrieves a list of resource groups with the specified names which exist in the specified account.
  allAzureNativeResourceGroupsInfoIfExist(
    # Input to get Azure Resource Groups if they exist.
    input: AzureGetResourceGroupsInfoIfExistInput!): [AzureResourceGroupInfo!]!

  # Retrieves all security groups in the specified region and subscription. Security groups enable you to configure network security as a natural extension of an application's structure, allowing you to group virtual machines and define network security policies based on those groups. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/application-security-groups.
  allAzureNativeSecurityGroupsByRegionFromAzure(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!,

    # The azure region.
    region: AzureNativeRegion!): [AzureNativeSecurityGroup!]!

  # Retrieves list of all storage Accounts in a subscription.
  allAzureNativeStorageAccountsFromAzure(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!): [AzureNativeStorageAccount!]!

  # Retrieves all subnets in the specified region and subscription. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets.
  allAzureNativeSubnetsByRegionFromAzure(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!,

    # The azure region.
    region: AzureNativeRegion!): [AzureNativeSubnet!]!

  # Retrieves all virtual machine (VM) sizes in the subscriptions protected by Rubrik that have been configured for protection. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes.
  allAzureNativeVirtualMachineSizes(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID): [String!]!

  # Retrieves all virtual networks (VNets) in the protected subscriptions. VNet enables secure communication with other VNets, the internet, and on-premise networks. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview.
  allAzureNativeVirtualNetworks(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID): [AzureNativeVirtualNetwork!]!

  # Get all available network security groups for Azure.
  allAzureNsgs(
    # Nsg request parameters for Azure.
    nsgRequest: AzureNsgRequest!): [String!]!

  # Get all available regions for Azure.
  allAzureRegions(
    # Cloud account ID.
    cloudAccountId: String!): [AzureCloudAccountRegion!]!

  # Get resource groups for a service principal in Azure.
  allAzureResourceGroups(
    # Cloud account ID.
    cloudAccountId: String!,

    # Region for Azure cloud account.
    azureRegion: String!): [String!]! @deprecated(reason: "Use allResourceGroupsFromAzure instead.")

  # Retrieves the list of elastic pools available for a SQL Database Server.For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/elastic-pool-overview.
  allAzureSqlDatabaseServerElasticPools(
    # Subscription ID.
    subscriptionId: UUID!,

    # Resource Group Name.
    resourceGroupName: String!,

    # Name of the Azure SQL Database server.
    azureSqlDatabaseServerName: String!,

    # Rubrik ID of the Azure SQL Database Server.
    azureSqlDatabaseServerRubrikId: UUID!): [AzureSqlDatabaseServerElasticPool!]!

  # List all Azure storage accounts by resource group.
  allAzureStorageAccounts(
    # Azure storage accounts request parameters by resource group.
    storageAccountsRequest: AzureStorageAccountsReq!): [String!]!

  # List all Azure storage accounts by region.
  allAzureStorageAccountsByRegion(
    # Azure storage accounts request parameters by region.
    input: AzureStorageAccountsByRegionInput!): [AzureStorageAccountCcprovision!]!

  # Get subnets for a given account in Azure.
  allAzureSubnets(
    # Subnet request parameters for Azure.
    subnetRequest: AzureSubnetReq!): [String!]! @deprecated(reason: "Use allAzureCloudAccountSubnetsByRegion instead.")

  # Retrieves a list of all Azure subscriptions with Exocompute subscription mapping.
  allAzureSubscriptionWithExocomputeMappings(
    # Cloud account features. Rubrik offers a cloud account feature as part of Rubrik Security Cloud (RSC).
    features: [CloudAccountFeature!],

    # List of mapped Exocompute subscription IDs.
    exocomputeSubscriptionIdsFilter: [UUID!]): [AzureSubscriptionWithExocomputeMapping!]!

  # Get VNets for a given account in Azure.
  allAzureVnets(
    # VNet request parameters for Azure.
    vnetRequest: AzureVnetReq!): [String!]!

  # Get all cdm guest credentials.
  allCdmGuestCredentials(
    # List of cluster IDs.
    clusterUuids: [UUID!]!): [CdmGuestCredential!]!

  # The Rubrik CDM OVA details.
  allCdmOvaDetails: [CdmOvaDetail!]!

  # Details of all the virtual machines with Continuous Data Protection (CDP) SLA Domain.
  allCdpVmsInfos(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort Type for getting all CDP VMs for CDP performance dashboard.
    allCdpVmInfoSort: CdpPerfDashboardSortParam,

    # Filter Type for getting all CDP VMs for CDP performance dashboard.
    allCdpVmInfoFilter: [CdpPerfDashboardFilterParam!]): CdpVmInfoConnection!

  # List the mappings from accounts to Exocompute cloud accounts with specified filters.
  allCloudAccountExocomputeMappings(
    # Vendor of the cloud account.
    cloudVendor: CloudVendor!,

    # List of mapped Exocompute account IDs.
    exocomputeAccountIdsFilter: [UUID!]! = []): [CloudAccountsExocomputeAccountMapping!]!

  # List all cloud accounts.
  allCloudAccounts(
    # Specification on how to sort a list of cloud accounts.
    sortBy: CloudAccountSortByFieldEnum,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Specification on how to filter a list of cloud accounts.
    filter: [CloudAccountFilterInput!],

    # Filters and shows cloud accounts for a specific use-cases or features. Default value: [ARCHIVAL].
    features: [CloudAccountFeature!]): [CloudAccount!]!

  # Retrieve shares from Cloud Direct site.
  allCloudDirectShares(
    # Input for retrieving Cloud Direct shares.
    input: AllCloudDirectSharesInput!): [ShareExportIdPair!]!

  # List of the Cloud Direct Sites accessible by the current user.
  allCloudDirectSites: [CloudDirectSite!]!

  # List of snapshots for which file recovery is feasible.
  allCloudNativeFileRecoveryEligibleSnapshots(
    # Workload ID.
    workloadId: UUID!): [String!]!

  # List of cloud native label keys matched by substring.
  allCloudNativeLabelKeys(
    # Key substring to filter by.
    keySubStr: String!,

    # Number of results to return.
    limit: Int!,

    # Type of managed object on which label rule will be applied.
    objectType: CloudNativeLabelObjectType!): [String!]!

  # List of cloud native label values matched by substring.
  allCloudNativeLabelValues(
    # Value substring to filter by.
    valueSubStr: String!,

    # Key value used only when searching for values.
    key: String!,

    # Number of results to return.
    limit: Int!,

    # Type of managed object on which label rule will be applied.
    objectType: CloudNativeLabelObjectType!): [String!]!

  # List of cloud native tag keys matched by substring.
  allCloudNativeTagKeys(
    # Key substring to filter by.
    keySubStr: String!,

    # Number of results to return.
    limit: Int!,

    # Type of managed object on which tag rule will be applied.
    objectType: CloudNativeTagObjectType!): [String!]!

  # List of cloud native tag values matched by substring.
  allCloudNativeTagValues(
    # Value substring to filter by.
    valueSubStr: String!,

    # Key value used only when searching for values.
    key: String!,

    # Number of results to return.
    limit: Int!,

    # Type of managed object on which tag rule will be applied.
    objectType: CloudNativeTagObjectType!): [String!]!
  allClusterConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter by cluster.
    filter: ClusterFilterInput,

    # Cluster sort order.
    sortOrder: SortOrder = DESC,

    # Sort clusters by field.
    sortBy: ClusterSortByEnum = ClusterType): ClusterConnection!

  # Global SLA Domains protecting at least one object on the specified Rubrik cluster.
  allClusterGlobalSlas(
    # UUID of the Rubrik cluster.
    cdmClusterUUID: UUID!): [SlaInfo!]!

  # All replication targets for a cluster.
  allClusterReplicationTargets(
    # UUID of the cluster.
    clusterUuid: UUID!): [ClusterReplicationTarget!]!

  # Get web server certificate and IPMI details for multiple clusters.
  allClusterWebCertsAndIpmis(
    # Input for getting web certificate and IPMI information for multiple clusters.
    input: BulkClusterWebCertAndIpmiInput!): [ClusterWebCertAndIpmi!]!

  # Checks whether acknowledgement of the Time-based, One-Time Password (TOTP) mandate is required for upgrading the Rubrik cluster version.
  allClustersTotpAckStatus(
    # Specifies the list of cluster UUIDs.
    listClusterUuid: [UUID!]!): [Boolean!]!

  # List all connected clusters.
  allConnectedClusters(
    # Specification to filter cluster based on type.
    clusterFilterArg: ClusterTypeEnum): [DataLocationSupportedCluster!]!

  # Current permissions are the set of permissions the client has given to Rubrik. This will retrieve permissions for all the features currently active in the account. If these permissions are older than the latest set of permissions we require, the account will go in Update Permissions state
  allCurrentFeaturePermissionsForCloudAccounts(
    # Vendor of the cloud account.
    cloudVendor: CloudVendor!,

    # List of Rubrik IDs of the cloud accounts.
    cloudAccountIds: [UUID!]!): [CloudAccountFeaturePermission!]!

  # Lists all identity providers for the current organization.
  allCurrentOrgIdentityProviders: [IdentityProvider!]!

  # List of all DB parameter groups in a given region. Refers to container for engine configuration that applies to one or more DB Instances. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html.
  allDbParameterGroupsByRegionFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!,

    # DB Engine of RDS Instance.
    dbEngine: AwsNativeRdsDbEngine!,

    # Version of DB engine.
    dbEngineVersion: String!,

    # Type of RDS deployment.
    rdsType: AwsNativeRdsType): [DbParameterGroup!]!

  # All DB subnet groups in a given region. Refers to logical isolation of RDS on a network. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html.
  allDbSubnetGroupsByRegionFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!): [SubnetGroup!]!

  # All IP addresses on the Rubrik deployment.
  allDeploymentIpAddresses: [String!]!

  # Active DHRC recommendations for the requested categories.
  allDhrcActiveRecommendations(
    # Optional list of categories to filter on.
    categories: [DhrcCategory!]): [DhrcActiveRecommendation!]!

  # Latest DHRC metrics for the requested categories.
  allDhrcLatestMetrics(
    # Optional list of categories to filter on.
    categories: [DhrcCategory!]): [DhrcCollectedMetric!]!

  # DHRC scores for the requested categories and time span.
  allDhrcScores(
    # Optional list of categories to filter on.
    categories: [DhrcCategory!],

    # Optional start of timespan to filter on.
    beginTime: DateTime,

    # Optional timespan to filter on.
    timespan: DhrcScoreTimespan): [DhrcScore!]!

  # Retrieve all custom distribution list event digests.
  allDistributionListDigests: [EventDigest!]!

  # List of all key pairs for a given region. A key pair, consisting of a public key and a private key, is a set of security credentials that you use to prove your identity when connecting to an EC2 instance. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html.
  allEc2KeyPairsByRegionFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!): [String!]!

  # Permissions assigned to the role that are in effect.
  allEffectiveRbacPermissions(
    # ID of the role.
    roleId: String!): [RbacPermission!]!

  # Provides a list of all features enabled for the Rubrik account.
  allEnabledFeaturesForAccount: AllEnabledFeaturesForAccountReply!

  # Retrieve event digests for specific recipients.
  allEventDigests(
    # Input for retrieving event digests.
    input: AllEventDigestsInput!): [EventDigest!]!

  # List of permissions required to enable the given feature.
  allFeaturePermissionsForGcpCloudAccount(
    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!): [GcpPermission!]!

  # List user activity for a specific file on a specific snapshot.
  allFileActivities(
    # Request for getting user activity for a specific path on a specific snapshot.
    ListFileActivitiesInput: ListFileActivitiesInput!,

    # Sorts to apply when listing a file's user activities.
    FileActivitiesSort: FileActivitiesSort!,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): UserActivityResultConnection!

  # Check GCP projects permissions for addition.
  allGcpCloudAccountMissingPermissionsForAddition(
    # Session ID of the current OAuth session.
    sessionId: String!,

    # List of GCP project native IDs.
    projectIds: [String!]!): [GcpCloudAccountMissingPermissionsForAddition!]!

  # List of GCP projects configured for a feature.
  allGcpCloudAccountProjectsByFeature(
    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # List of project status filters to apply.
    projectStatusFilters: [CloudAccountStatus!]!,

    # Search text for project name, native ID and number.
    projectSearchText: String!): [GcpCloudAccountProjectDetail!]!

  # List of GCP projects to add after successful authorization.
  allGcpCloudAccountProjectsForOauth(
    # Session ID of the current OAuth session.
    sessionId: String!,

    # Cloud account features.
    features: [CloudAccountFeature!]!,

    # Specfies whether to check permission of projects required for addition.
    checkPermissions: Boolean!): [GcpCloudAccountProjectForOauth!]!

  # List of GCP KMS Crypto keys accessible in the provided region.
  allGcpNativeAvailableKmsCryptoKeys(
    # ID of the Project.
    projectId: UUID!,

    # GCP region native name.
    regionName: String!): [GcpNativeKmsCryptoKey!]!

  # List of compatible machine types for instance.
  allGcpNativeCompatibleMachineTypes(
    # The zone of the to-be-created instance.
    targetZone: String!,

    # ID of snapshot.
    snapshotId: UUID!): [String!]!

  # List of networks available in a GCP project along with subnetworks and firewall rules.
  allGcpNativeNetworks(
    # ID of the Project.
    projectId: UUID!): [GcpNativeNetwork!]!

  # List of all the GCP projects with accessible networks in this service project.
  allGcpNativeProjectsWithAccessibleNetworks(
    # ID of the Project.
    projectId: UUID!): [NetworkHostProject!]!

  # List of regions available to a GCP project along with zones.
  allGcpNativeRegions(
    # ID of the Project.
    projectId: UUID!): [GcpNativeRegion!]!

  # List of all the distinct machine types of the GCP instances stored with Polaris.
  allGcpNativeStoredMachineTypes: [String!]!

  # List of all the distinct machine types of the GCP instances stored with Polaris.
  allGcpNativeStoredMachineTypesInProject(
    # ID of the Project.
    projectId: UUID!): [String!]!

  # List of all the distinct network names of the GCP instances stored with Polaris.
  allGcpNativeStoredNetworkNames: [String!]!

  # List of all the distinct network names of the GCP instances stored with Polaris.
  allGcpNativeStoredNetworkNamesInProject(
    # ID of the Project.
    projectId: UUID!): [String!]!

  # List of all the distinct regions of the GCP instances stored with Polaris.
  allGcpNativeStoredRegions: [String!]!

  # List of all the distinct regions of the GCP instances stored with Polaris.
  allGcpNativeStoredRegionsInProject(
    # ID of the Project.
    projectId: UUID!): [String!]!

  # Lists all Azure regions supported by the Rubrik-Hosted SaaS protection.
  allHostedAzureRegions: AzureRegionsResp!

  # List the integrations of the specified types.
  allIntegrations(
    # List of integration types.
    integrationTypes: [IntegrationType!]!,

    # Optional filter for integration names.
    nameFilter: String): ListIntegrationsReply!

  # All account level inventory workloads.
  allInventoryWorkloads: [InventoryCard!]!

  # List IDs of running SONAR issues jobs.
  allIssuesJobIds(queryIds: [String!]!): [String!]!

  # Information of all replicas for a Kubernetes snapshot.
  allK8sReplicaSnapshotInfos(
    # The snapshot ID.
    snapshotId: String!,

    # The FID of the workload.
    snappableId: UUID!): [ReplicatedSnapshotInfo!]!

  # List of encryption keys in the specified region on the specified AWS Native account. All the encrytion keys listed are managed by AWS Key Management System (KMS). For more information, see https://aws.amazon.com/kms/.
  allKmsEncryptionKeysByRegionFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!): [KmsEncryptionKey!]!

  # Latest Permissions are the most recent set of permissions we require for a feature. This will retrieve the permissions for all the features currently active in the accounts along with the features passed in the call.
  allLatestFeaturePermissionsForCloudAccounts(
    # Vendor of the cloud account.
    cloudVendor: CloudVendor!,

    # List of Rubrik IDs of the cloud accounts.
    cloudAccountIds: [UUID!]!,

    # Cloud account features.
    features: [CloudAccountFeature!]!,

    # Cloud account features with specific permissions groups.
    featuresWithPermissionsGroups: [FeatureWithPermissionsGroups!]! = []): [CloudAccountFeaturePermission!]!

  # Information about the licenses at the product level.
  allLicensedProducts: GetLicensedProductsInfoReply!

  # Provides a list of database files to be restored for the specified restore or export operation.
  allMssqlDatabaseRestoreFiles(
    # Input for V1MssqlGetRestoreFilesV1.
    input: MssqlGetRestoreFilesV1Input!): V1MssqlGetRestoreFilesV1Response!

  # NAS Cloud Direct objects over time data for the requested clusters.
  allNcdObjectsOverTimeData(
    # List of Rubrik clusters to filter.
    clusters: [UUID!]!): [NcdObjectsOverTimeData!]!

  # NAS Cloud Direct SLA Domain compliance data for the requested clusters.
  allNcdSlaComplianceData(
    # List of Rubrik clusters to filter.
    clusters: [UUID!]!): [NcdSlaComplianceData!]!

  # NAS Cloud Direct task data for the requested clusters.
  allNcdTaskData(
    # List of Rubrik clusters to filter.
    clusters: [UUID!]!): [NcdTaskData!]!

  # NAS Cloud Direct usage over time data for the requested clusters.
  allNcdUsageOverTimeData(
    # List of Rubrik clusters to filter.
    clusters: [UUID!]!): [NcdUsageOverTimeData!]!

  # List of Mosaic Storage Locations used for NoSQL backups
  allNosqlStorageLocations(
    # Specification on how to sort a list of Mosaic Storage Locations.
    sortBy: MosaicStorageLocationQuerySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Specification on how to filter a list of Mosaic Storage Locations.
    filter: [MosaicStorageLocationFilterInput!]): [MosaicStorageLocation!]!

  # All AD Groups belonging to the O365 organization.
  allO365AdGroups(
    # Org UUID.
    orgId: UUID!,

    # AD group search filter.
    adGroupSearchFilter: String!): [AdGroup!]!

  # Gets the status of each org in the account.
  allO365OrgStatuses: [O365OrgInfo!]!

  # Returns the total number of apps of each type, for each O365 org.
  allO365SubscriptionsAppTypeCounts: [O365SubscriptionAppTypeCounts!]!

  # Returns objects that have already been assigned to existing orgs.
  allObjectsAlreadyAssignedToOrgs(
    # Objects for each workload type.
    objectIdsForHierarchyTypes: [ObjectIdsForHierarchyTypeInput!]!,

    # Allowed clusters in the org.
    allowedClusters: [String!]!,

    # The ID of the target organization to compare the rules of the current organization.
    targetOrgId: String): [ObjectIdsForHierarchyType!]!

  # List of all RDS option groups in a given region. Refers to settings of how a particular option works for an RDS Instance. For more information, see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithOptionGroups.html.
  allOptionGroupsByRegionFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!,

    # DB Engine of RDS Instance.
    dbEngine: AwsNativeRdsDbEngine!,

    # Version of DB engine.
    dbEngineVersion: String!,

    # Major version of the option group engine.
    majorEngineVersion: String!): [OptionGroup!]!

  # Orgs of given IDs.
  allOrgsByIds(
    # The org ids of the orgs.
    orgIds: [String!]!): [Org!]!

  # Pending actions.
  allPendingActions(
    # Cluster filter.
    clusterFilter: UUID,

    # Pending action group type filter.
    pendingActionGroupTypeFilter: [PendingActionGroupTypeEnum!],

    # Pending action subgroup type filter.
    pendingActionSubGroupTypeFilter: [PendingActionSubGroupTypeEnum!],

    # Status filter.
    statusFilter: [PendingActionStatus!],

    # Object ids.
    objectIds: [String!],

    # Result ordering.
    sortedOrder: SortOrder,

    # History only.
    historyOnly: Boolean,

    # Limit.
    limit: Long): [pendingAction!]!

  # Quarantine details of all snapshots.
  allQuarantinedDetailsForSnapshots(
    # List of snapshot IDs.
    snapshotIds: [String!]!): [QuarantineSpec!]!

  # Quarantine details of a workload.
  allQuarantinedDetailsForWorkload(
    # The ID of the workload.
    workloadId: String!): [QuarantineSpec!]!

  # Rubrik Cloud Vault (RCV) account entitlements with their respective order numbers.
  allRcvAccountEntitlements: AllRcvAccountEntitlements!

  # Retrieves a list og all resource groups in the specified account.
  allResourceGroupsFromAzure(
    # The Rubrik ID of the cloud account.
    cloudAccountId: UUID!,

    # The Native ID of the subscription.
    azureSubscriptionNativeId: UUID!,

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!): [AzureResourceGroup!]!

  # List of all S3 bucket details across regions for the AWS Native account.
  allS3BucketsDetailsFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # The region in AWS. If no region is provided, the AWS function will return all buckets.
    region: AwsNativeRegion): [S3BucketDetails!]!

  # List of all S3 bucket names across regions for the AWS Native account.
  allS3BucketsFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!): [String!]!

  # Sharepoint site objects excluded from protection.
  allSharepointSiteExclusions(
    # Org UUID.
    orgId: UUID!,

    # List of site IDs. If none are provided, all the Sharepoint site exclusions are returned.
    siteFids: [String!]!): [FullSpSiteExclusions!]!

  # List of SLA Domain summaries for the given IDs.
  allSlaSummariesByIds(
    # A list of SLA Domain IDs.
    slaIds: [UUID!]!): [SlaDomain!]!

  # All PVCs in a snapshot.
  allSnapshotPvcs(
    # The snapshot ID.
    snapshotId: String!,

    # The FID of the workload.
    snappableId: UUID!,

    # Specifies if the snapshot is a replica snapshot.
    isReplica: Boolean! = false): [PvcInformation!]!

  # Details of the unexpired snapshot closest to the specified point in time for each provided workload ID.
  allSnapshotsClosestToPointInTime(
    # Specifies the time at which or before which the snapshot was taken.
    beforeTime: DateTime,

    # Specifies the time at which or after which the snapshot was taken.
    afterTime: DateTime,

    # Workload UUIDs.
    snappableIds: [String!]!,

    # Specifies whether the retrieved snapshots should include the linked snapshots.
    includeLinked: Boolean,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean,

    # Specifies whether to exclude quarantined snapshots.
    excludeQuarantined: Boolean,

    # Specifies whether to exclude anomalous snapshots.
    excludeAnomalous: Boolean): [ClosestSnapshotSearchResult!]!

  # Summary of all storage arrays
  # 
  # Supported in v5.0+
  # Retrieve the host IP and username for all storage arrays.
  allStorageArrays(
    # List of cluster IDs.
    input: [UUID!]!): AllStorageArraysReply!

  # List of all the database instance classes supported by AWS RDS database for the provided DB engine and engine version. DB engine version is a optional argument, it can be ignored if we want to retrieve all the supported instance class for a DB engine irrespective of DB engine version.
  allSupportedAwsRdsDatabaseInstanceClasses(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!,

    # DB Engine of RDS Instance.
    dbEngine: AwsNativeRdsDbEngine!,

    # Version of DB engine.
    dbEngineVersion: String): [String!]!

  # List all target mappings.
  allTargetMappings(
    # Specification on how to sort a list of target mappings.
    sortBy: ArchivalGroupQuerySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Specification on how to filter a list of target mappings.
    filter: [TargetMappingFilterInput!],

    # Specifies the context filter to use.
    contextFilter: ContextFilterTypeEnum,

    # Corresponds to rcs stats flag, only true value will add rcs stats in response.
    isRcsStatsRequired: Boolean): [TargetMapping!]!

  # List all targets.
  allTargets(
    # Specifies the field by which the list of targets will be sorted.
    sortBy: ArchivalLocationQuerySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Specifies how to filter the list of targets.
    filter: [TargetFilterInput!],

    # Specifies the context filter to use.
    contextFilter: ContextFilterTypeEnum): [Target!]! @deprecated(reason: "Please use the query targets instead.")

  # Retrieve most risky policies.
  allTopRiskPolicySummaries(
    # Include whitelisted objects in the results.
    getWhitelistedResults: Boolean!,

    # Maximum number of entries in the response.
    limit: Int! = 0,

    # Types of workloads that can be used for filtering query results.
    workloadTypes: [DataGovObjectType!]! = []): [PolicySummary!]!

  # List of supported object types.
  allUnmanagedObjectsSupportedTypes: [ManagedObjectType!]!

  # All the users on the current account.
  allUsersOnAccount(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): [User!]!
  allUsersOnAccountConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder, sortBy: UserFieldEnum = Email, emailFilter: String, roleIdsFilter: [UUID!],

    # Filter users based on lockout status.
    lockoutStateFilter: LockoutStateFilter,

    # Filter users based on hidden status.
    hiddenStateFilter: HiddenStateFilter,

    # Get local users only.
    shouldGetLocalUsersOnly: Boolean! = false): UserConnection!

  # List all valid replication target clusters.
  allValidReplicationTargets(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Field to sort by for valid replication targets.
    sortBy: ListValidReplicationTargetsSortByField,

    # Sort order.
    sortOrder: SortOrder,

    # Specification for replication targets to be retrieved - local or cross-account.
    isCrossAccount: Boolean): ValidReplicationTargetConnection!

  # Get a list of HotAdd proxy virtual machines
  # 
  # Supported in v5.3+
  # Retrieve summary information for all HotAdd proxy virtual machines.
  allVcenterHotAddProxyVms(
    # List of cluster IDs.
    clusterUuids: [UUID!]!): [VcenterHotAddProxyVmInfo!]!

  # Get virtual machine files for a snapshot
  # 
  # Supported in v9.0+
  # Returns all virtual machine files, such as .vmdk, .vmx, and .nvram files, for the specified virtual machine snapshot.
  allVirtualMachineFiles(
    # Input for V1GetVirtualMachineFiles.
    input: VirtualMachineFilesInput!): VirtualMachineFilesReply!

  # All Vm recovery jobs info.
  allVmRecoveryJobsInfo(
    # The Rubrik UUID for the object.
    fid: UUID!,

    # Input to get all vm recovery jobs info.
    input: AllVmRecoveryJobsInfoInput!): [VmRecoveryJobInfo!]!

  # Batch get vsphere vmware cdp state infos.
  allVmwareCdpStateInfos(
    # The ID of each virtual machine for which CDP state info is being retrieved.
    ids: [String!]!): [VmwareCdpStateInfo!]!

  # List of all Virtual Private Clouds (VPCs) in the AWS Native account, classified by region.
  allVpcsByRegionFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!): [AwsVpc!]!

  # List of all Virtual Private Clouds (VPCs) in the AWS Native account.
  allVpcsFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID): [AwsVpc!]!

  # All webhooks in the account.
  allWebhooks(
    # The name of the webhooks to retrieve. Leave empty to retrieve all webhooks.
    name: String): WebhookConnection!

  # Amazon Machine Image (AMI) type for export of an archived EC2 Instance snapshot. For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html.
  amiTypeForAwsNativeArchivedSnapshotExport(
    # Input for AmiTypeForAwsNativeArchivedSnapshotExport.
    input: AmiTypeForAwsNativeArchivedSnapshotExportInput!): AmiTypeForAwsNativeArchivedSnapshotExportReply!
  analyzerGroups: AnalyzerGroupConnection!

  # Returns which policies are using each analyzer.
  analyzerUsages: AnalyzerUsageConnection!

  # Optional result of the Anomaly Investigation.
  anomalyResultOpt(
    # The Rubrik cluster ID.
    clusterUuid: UUID,

    # Corresponds to snapshot ID in Rubrik CDM tables.
    snapshotId: String,

    # The ID of the workload.
    workloadId: UUID,

    # The ID of the anomaly.
    anomalyId: String): GetAnomalyDetailsReply

  # Results for Anomaly Investigations.
  anomalyResults(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort anomaly results by field.
    sortBy: AnomalyResultSortBy,

    # Filter anomaly results by input.
    filter: AnomalyResultFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): AnomalyResultConnection!

  # Results for Anomaly Investigations grouped by an argument.
  anomalyResultsGrouped(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Group anomaly results by field.
    groupBy: AnomalyResultGroupBy!,

    # Filter anomaly results by input.
    filter: AnomalyResultFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): AnomalyResultGroupedDataConnection!

  # Storage usage of an archival location.
  archivalStorageUsage(
    # Corresponds to ID of the target in Rubrik.
    input: UUID!): [ArchivalStorageUsage!]!

  # Retrieves the status of multi-geo backups for the specified organization.
  areMultiGeoBackupsEnabled(
    # Org UUID.
    orgId: UUID!): Boolean!

  # Global certificates that can be assigned to an organization.
  assignableGlobalCertificates(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field on which to sort the certificates.
    sortBy: GlobalCertificateSortBy,

    # Input to list global certificates.
    input: GlobalCertificatesQueryInput!): GlobalCertificateConnection!

  # Retrieves the AWS artifacts that need to be deleted when an account is being deleted.
  awsArtifactsToDelete(
    # Input to retrieve the AWS artifacts to be deleted.
    input: AwsArtifactsToDeleteInput!): AwsArtifactsToDelete!

  # Retrieves a list of security groups in the specified cloud account and virtual private cloud (VPC).
  awsCloudAccountListSecurityGroups(
    # The ID of the cloud account.
    cloudAccountUuid: UUID!,

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # AWS region argument for archival use case.
    region: AwsRegion!,

    # VPC native ID.
    vpcID: String!): AwsCloudAccountListSecurityGroupsResponse!

  # Retrieves a list of subnets in the specified cloud account and virtual private cloud (VPC).
  awsCloudAccountListSubnets(
    # The ID of the cloud account.
    cloudAccountUuid: UUID!,

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # AWS region argument for archival use case.
    region: AwsRegion!,

    # VPC native ID.
    vpcID: String!): AwsCloudAccountListSubnetsResponse!

  # Retrieves a list of virtual private clouds (VPCs) in the specific cloud account.
  awsCloudAccountListVpcs(
    # The ID of the cloud account.
    cloudAccountUuid: UUID!,

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # AWS region argument for archival use case.
    region: AwsRegion!): AwsCloudAccountListVpcResponse!

  # List of AWS cloud accounts and the features for each account, classified by ID.
  awsCloudAccountWithFeatures(
    # The Rubrik ID of the cloud account.
    cloudAccountId: UUID!,

    # Arguments for get cloud account.
    awsCloudAccountArg: AwsCloudAccountWithFeaturesInput!): AwsCloudAccountWithFeatures!

  # Retrieve aws compute settings.
  awsComputeSettings(
    # Corresponds to Compute Setting Id in Rubrik tables
    computeSettingId: UUID!): AwsComputeSettings! @deprecated(reason: "This query is no longer supported.")

  # Refers to the AWS Native account that serves as a container for all your AWS resources. The AWS Native account contains information about the metadata related to the AWS Native resources.
  awsNativeAccount(
    # The Rubrik ID for the AWS Native account.
    awsNativeAccountRubrikId: UUID!,

    # Cloud native protection feature.
    awsNativeProtectionFeature: AwsNativeProtectionFeature!): AwsNativeAccount!

  # Paginated list of all AWS Native accounts.
  awsNativeAccounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS accounts.
    sortBy: AwsNativeAccountSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder, accountFilters: AwsNativeAccountFilters, authorizedOperationFilter: Operation,

    # Cloud native protection feature.
    awsNativeProtectionFeature: AwsNativeProtectionFeature!): AwsNativeAccountConnection!

  # Refers to the Amazon Elastic Block Store (EBS) Volume represented by a specific ID. For more information, see https://aws.amazon.com/ebs/.
  awsNativeEbsVolume(
    # Rubrik ID for the AWS EBS Volume object.
    ebsVolumeRubrikId: UUID!): AwsNativeEbsVolume!

  # Paginated list of all AWS EBS Volumes.
  awsNativeEbsVolumes(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS EBS volumes.
    sortBy: AwsNativeEbsVolumeSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter for EBS volumes.
    ebsVolumeFilters: AwsNativeEbsVolumeFilters): AwsNativeEbsVolumeConnection!

  # Paginated list of all AWS EBS Volumes by name or substring of name.
  awsNativeEbsVolumesByName(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS EBS volumes.
    sortBy: AwsNativeEbsVolumeSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The native name for the AWS EBS Volume object.
    ebsVolumeName: String!): AwsNativeEbsVolumeConnection!

  # Refers to Amazon Elastic Compute Cloud (EC2) Instance represented by a specific ID. For more information, see https://aws.amazon.com/ec2/.
  awsNativeEc2Instance(
    # Rubrik ID for the AWS EC2 Instance.
    ec2InstanceRubrikId: UUID!): AwsNativeEc2Instance!

  # Paginated list of all AWS EC2 Instances.
  awsNativeEc2Instances(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS EC2 instances.
    sortBy: AwsNativeEc2InstanceSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter the CDM cloud hosts by workload type.
    descendantTypeFilter: [HierarchyObjectTypeEnum!],

    # Filter for EC2 instances.
    ec2InstanceFilters: AwsNativeEc2InstanceFilters): AwsNativeEc2InstanceConnection!

  # Paginated list of all AWS EC2 Instances by name or substring of name.
  awsNativeEc2InstancesByName(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS EC2 instances.
    sortBy: AwsNativeEc2InstanceSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Native name for the AWS EC2 Instance object.
    ec2InstanceName: String!): AwsNativeEc2InstanceConnection!

  # Refers to the default values for the export operation of the RDS DB Instance in the AWS Native account.
  awsNativeRdsExportDefaults(
    # The Rubrik ID for the AWS RDS Instance.
    rdsInstanceRubrikId: UUID!,

    # ID of the snapshot if the export is manual.
    snapshotId: String,

    # Specifies whether the export of the instance is manual or Point-in-Time.
    isPointInTime: Boolean!): RdsInstanceExportDefaults!

  # Refers to AWS Relational Database Service (RDS) represented by a specific ID. For more information, see https://aws.amazon.com/rds/.
  awsNativeRdsInstance(
    # The Rubrik ID for the AWS RDS Instance.
    rdsInstanceRubrikId: UUID!): AwsNativeRdsInstance!

  # Paginated list of AWS RDS Instances on AWS Native account.
  awsNativeRdsInstances(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS RDS instances.
    sortBy: AwsNativeRdsInstanceSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter for RDS instances.
    rdsInstanceFilters: AwsNativeRdsInstanceFilters): AwsNativeRdsInstanceConnection!

  # Point-in-Time (PiT) restore window of the RDS Instance in the AWS Native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information,see https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIT.html.
  awsNativeRdsPointInTimeRestoreWindow(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!,

    # Name of the RDS DB Instance
    rdsInstanceName: String!,

    # The Rubrik ID for the AWS RDS database.
    rdsDatabaseRubrikId: UUID): AwsNativeRdsPointInTimeRestoreWindow!

  # Root of AWS native hierarchy.
  awsNativeRoot: AwsNativeRoot!

  # Represents the Amazon S3 Bucket with a specific ID. For more information, see https://aws.amazon.com/s3/.
  awsNativeS3Bucket(
    # Rubrik ID for the AWS S3 bucket object.
    s3BucketRubrikId: UUID!): AwsNativeS3Bucket!

  # Retrieves the AWS trust policy that will be attached with each role (cross-account, exocompute, etc.) in the customer's environment.
  awsTrustPolicy(
    # Input to retrieve the AWS trust policy.
    input: AwsTrustPolicyInput!): AwsTrustPolicy!

  # Lists all Azure AD directories for the account.
  azureAdDirectories(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): AzureAdDirectoryConnection!

  # Details of the Azure AD corresponding to the workload ID.
  azureAdDirectory(
    # Workload FID.
    workloadFid: UUID!): AzureAdDirectory!

  # Details of the Azure AD objects corresponding to the type.
  azureAdObjectsByType(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Ordered list sorted by column names.
    sortByOption: [AzureAdObjectSearchType!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Input for the azureAdObjectsByType API.
    input: AzureAdObjectTypeInput!): AzureAdObjectConnection!

  # Retrieves the configuration consisting of role permissions and feature policy version required for Azure subscription setup. Features refer to the Polaris features that the customer wants to be enabled on the cloud account.
  azureCloudAccountPermissionConfig(
    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!): AzureCloudAccountPermissionConfigResponse!

  # Retrieves the details of the Azure cloud account.
  azureCloudAccountSubscriptionWithFeatures(
    # The Rubrik ID of the cloud account.
    cloudAccountId: UUID!): AzureCloudAccountSubscriptionWithFeatures!

  # Retrieves the details of the Azure tenant and all the subscriptions of the tenant, for a feature.
  azureCloudAccountTenant(
    # Tenant ID of the Azure tenant.
    tenantId: UUID!,

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # List of subscription status filters to apply.
    subscriptionStatusFilters: [CloudAccountStatus!]!,

    # Search text for subscription name and native ID.
    subscriptionSearchText: String!,

    # List of subscription IDs to filter on.
    subscriptionIdsFilter: [UUID!]): AzureCloudAccountTenant!

  # Retrieves details about the Azure cloud account tenant including the Exocompute configurations for the tenant subscriptions, for a specified feature.
  azureCloudAccountTenantWithExoConfigs(
    # Tenant ID of the Azure tenant.
    tenantId: UUID!,

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # List of subscription status filters to apply.
    subscriptionStatusFilters: [CloudAccountStatus!]!,

    # Search text for subscription name and native ID.
    subscriptionSearchText: String!,

    # List of subscription IDs to filter on.
    subscriptionIdsFilter: [UUID!]): AzureCloudAccountTenantWithExoConfigs!

  # Retrieves an Azure Native Managed Disk that refers to the block storage designed to be used with Azure Virtual Machines. Some examples are: ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/managed-disks-overview.
  azureNativeManagedDisk(
    # Rubrik ID of the Azure Managed Disk.
    azureManagedDiskRubrikId: UUID!): AzureNativeManagedDisk!

  # Retrieves a paginated list of all Azure Native Managed Disks.
  azureNativeManagedDisks(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of Azure disks.
    sortBy: AzureNativeDiskSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder, diskFilters: AzureNativeDiskFilters): AzureNativeManagedDiskConnection!

  # Retrieves an Azure Native Resource Group. Refers to a collection of resources in which multiple Azure services can reside.
  azureNativeResourceGroup(
    # Resource Group ID of Virtual Machine (VM) or Disk.
    resourceGroupId: UUID!): AzureNativeResourceGroup!

  # Retrieves a paginated list of all Azure Native Resource Groups.
  azureNativeResourceGroups(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for listing Azure resource groups.
    sortBy: AzureNativeCommonResourceGroupSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filters for listing Azure resource groups.
    commonResourceGroupFilters: AzureNativeCommonResourceGroupFilters,

    # List of protected object types.
    protectedObjectTypes: [WorkloadLevelHierarchy!],

    # The type of Azure Native features that Polaris supports.
    azureNativeProtectionFeatures: [AzureNativeProtectionFeature!]): AzureNativeResourceGroupConnection!

  # Root of Azure native hierarchy.
  azureNativeRoot: AzureNativeRoot!

  # Retrieves an Azure Native Subscription. Refers to the logical entity that provides entitlement to deploy and consume Azure resources.
  azureNativeSubscription(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!): AzureNativeSubscription!

  # Retrieves a paginated list of all Azure Native Subscriptions.
  azureNativeSubscriptions(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of Azure subscriptions.
    sortBy: AzureNativeSubscriptionSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder, subscriptionFilters: AzureNativeSubscriptionFilters,

    # Filters according to the operation given.
    authorizedOperationFilter: Operation,

    # Workload hierarchy.
    workloadHierarchy: WorkloadLevelHierarchy,

    # The type of Azure Native feature that Polaris supports.
    azureNativeProtectionFeature: AzureNativeProtectionFeature): AzureNativeSubscriptionConnection!

  # Retrieves an Azure Virtual Machine that refers to the Azure infrastructure as a service (IaaS) used to deploy persistent VMs. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/.
  azureNativeVirtualMachine(
    # Rubrik ID of the Azure Virtual Machine.
    azureVirtualMachineRubrikId: UUID!): AzureNativeVirtualMachine!

  # Retrieves a paginated list of all Azure Virtual Machines (VMs).
  azureNativeVirtualMachines(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of Azure virtual machines.
    sortBy: AzureNativeVirtualMachineSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter the CDM cloud hosts by workload type.
    descendantTypeFilter: [HierarchyObjectTypeEnum!], virtualMachineFilters: AzureNativeVirtualMachineFilters): AzureNativeVirtualMachineConnection!

  # Checks the NSG Outbound rules of the Azure resources.
  azureO365CheckNSGOutboundRules(tenantId: String!, subscriptionId: UUID!, resourceGroupName: String!, vnet_name: String!, subnet_name: String!): AzureNetworkSecurityGroupResp!

  # Checks the network subnet of the Azure resources.
  azureO365CheckNetworkSubnet(tenantId: String!, subscriptionId: UUID!, resourceGroupName: String!, vnet_name: String!, subnet_name: String!, strict_addr_check: Boolean!): AzureNetworkSubnetResp!

  # Checks the resource group name.
  azureO365CheckResourceGroupName(tenantId: String!, subscriptionId: UUID!, groupName: String!): AzureResourceAvailabilityResp!

  # Checks the accessibility of the storage account.
  azureO365CheckStorageAccountAccessibility(tenantId: String!, subscriptionId: UUID!, storage_account_name: String!, groupName: String!): AzureResourceAvailabilityResp!

  # Checks the storage account name.
  azureO365CheckStorageAccountName(tenantId: String!, subscriptionId: UUID!, storage_account_name: String!): AzureResourceAvailabilityResp!

  # Checks the Azure subscription quota.
  azureO365CheckSubscriptionQuota(tenantId: String!, subscriptionId: UUID!, regionName: String!): AzureResourceAvailabilityResp!

  # Checks the virtual network name.
  azureO365CheckVirtualNetworkName(tenantId: String!, subscriptionId: UUID!, groupName: String!, vnet_name: String!): AzureResourceAvailabilityResp!

  # Gets the exocompute details of the given cluster.
  azureO365Exocompute(
    # Org UUID.
    orgId: UUID!, exocomputeClusterId: String!): GetAzureO365ExocomputeResp!

  # Retrieves the AzureHostType of the account.
  azureO365GetAzureHostType: GetAzureHostTypeResp!

  # Retrieves the unused addresses available in a subnet.
  azureO365GetNetworkSubnetUnusedAddr(tenantId: String!, subscriptionId: UUID!, resourceGroupName: String!, vnet_name: String!, subnet_name: String!, strict_addr_check: Boolean!): AzureNetworkSubnetUnusedAddrResp!

  # Validates the user roles in the subscription.
  azureO365ValidateUserRoles(tenantId: String!, subscriptionId: UUID!): AzureUserRoleResp!

  # Gets the Azure regions for the given subscription.
  azureRegions(tenantId: String!, subscriptionId: UUID!): RegionConnection!

  # Gets the Azure resource groups for the given subscription.
  azureResourceGroups(tenantId: String!, subscriptionId: UUID!): ResourceGroupConnection!

  # Retrieves an Azure SQL Database. Refers to the fully managed SQL database built for the cloud. For more information, see https://azure.microsoft.com/en-us/products/azure-sql/database/.
  azureSqlDatabase(
    # Rubrik ID of the Azure SQL Database.
    azureSqlDatabaseRubrikId: UUID!): AzureSqlDatabaseDb!

  # Point-in-Time (PiT) restore window of the Azure SQL Database instance in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://azure.microsoft.com/en-in/blog/azure-sql-database-point-in-time-restore/.
  azureSqlDatabaseDbPointInTimeRestoreWindowFromAzure(
    # Subscription ID.
    subscriptionId: UUID!,

    # Resource Group Name.
    resourceGroupName: String!,

    # Name of the Azure SQL Database server.
    azureSqlDatabaseServerName: String!,

    # Name of the Azure SQL Database.
    azureSqlDatabaseName: String!): AzureNativeSqlDatabasePointInTimeRestoreWindow!

  # Retrieves an Azure SQL Database Server. Refers to the server that contains the Azure SQL Databases. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/database/logical-servers.
  azureSqlDatabaseServer(
    # Rubrik ID of the Azure SQL Database Server.
    azureSqlDatabaseServerRubrikId: UUID!): AzureSqlDatabaseServer!

  # Retrieves a paginated list of all Azure SQL Database Servers.
  azureSqlDatabaseServers(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of Azure SQL Database Servers.
    sortBy: AzureSqlDatabaseServerSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filters for listing Azure SQL Database Servers.
    azureSqlDatabaseServerFilters: AzureSqlDatabaseServerFilters): AzureSqlDatabaseServerConnection!

  # Retrieves a paginated list of all Azure SQL Databases.
  azureSqlDatabases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of Azure SQL Databases.
    sortBy: AzureSqlDatabaseSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filters for listing Azure SQL Databases.
    azureSqlDatabaseFilters: AzureSqlDatabaseFilters): AzureSqlDatabaseDbConnection!

  # Retrieves an Azure SQL Managed Instance Database. Refers to the database engine compatible with the latest SQL Server (Enterprise Edition) database engine. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/sql-managed-instance-paas-overview.
  azureSqlManagedInstanceDatabase(
    # Rubrik ID of the Azure SQL Managed Instance Database.
    azureSqlManagedInstanceDatabaseRubrikId: UUID!): AzureSqlManagedInstanceDatabase!

  # Retrieves a paginated list of all Azure SQL Managed Instance Databases.
  azureSqlManagedInstanceDatabases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of Azure SQL Managed Instance Databases.
    sortBy: AzureSqlManagedInstanceDatabaseSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filters for listing Azure SQL Managed Instance Databases.
    azureSqlManagedInstanceDatabaseFilters: AzureSqlManagedInstanceDatabaseFilters): AzureSqlManagedInstanceDatabaseConnection!

  # Point-in-Time (PiT) restore window of the Azure SQL Managed Instance database in the Azure native account. Refers to the range of time within which the database is available to be restored to a particular point in time. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/point-in-time-restore?tabs=azure-portal.
  azureSqlManagedInstanceDbPointInTimeRestoreWindowFromAzure(
    # Subscription ID.
    subscriptionId: UUID!,

    # Resource Group Name.
    resourceGroupName: String!,

    # Name of the Azure SQL Managed Instance.
    azureSqlManagedInstanceName: String!,

    # Name of the Azure SQL Database.
    azureSqlDatabaseName: String!): AzureNativeSqlDatabasePointInTimeRestoreWindow!

  # Retrieves an Azure SQL Managed Instance Server. Refers to the server the Azure SQL Managed Instance Database is a part of.
  azureSqlManagedInstanceServer(
    # Rubrik ID of the Azure SQL Managed Instance Server.
    azureSqlManagedInstanceServerRubrikId: UUID!): AzureSqlManagedInstanceServer!

  # Retrieves a paginated list of all Azure SQL Managed Instance Servers.
  azureSqlManagedInstanceServers(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of Azure SQL Managed Instance Servers.
    sortBy: AzureSqlManagedInstanceServerSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filters for listing Azure SQL Managed Instance Servers.
    azureSqlManagedInstanceServerFilters: AzureSqlManagedInstanceServerFilters): AzureSqlManagedInstanceServerConnection!

  # Gets the storage accounts for the given subscription.
  azureStorageAccounts(tenantId: String!, subscriptionId: UUID!, regionName: String!): StorageAccountConnection!

  # Gets the subnets for the given subscription.
  azureSubnets(tenantId: String!, subscriptionId: UUID!, vNetId: String!): SubnetConnection!

  # Gets the subscriptions for the given Azure tenant.
  azureSubscriptions(tenantId: String!): AzureSubscriptionConnection!

  # Gets the VNets for the given subscription.
  azureVNets(tenantId: String!, subscriptionId: UUID!, regionName: String!): VnetConnection!

  # Browse Exchange calendar.
  browseCalendar(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!, folderId: String!,

    # Org UUID.
    orgId: UUID!,

    # Search filter for calendar search.
    calendarSearchFilter: CalendarSearchFilter): O365ExchangeObjectConnection!

  # Browse Exchange contacts.
  browseContacts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!, folderId: String!,

    # Org UUID.
    orgId: UUID!,

    # Search filter for contacts search.
    contactsSearchFilter: ContactsSearchFilter): O365ExchangeObjectConnection!
  browseFolder(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!, folderId: String!,

    # Org UUID.
    orgId: UUID!): O365ExchangeObjectConnection!

  # Browse channels in a Teams conversations snapshot.
  browseO365TeamConvChannels(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # snapshotFid arg which is of optional type
    snapshotFidOpt: UUID, excludeArchived: Boolean!,

    # Org UUID.
    orgId: UUID!,

    # Filter on channel membership type.
    channelMembershipTypeFilter: ChannelMembershipType!, nameFilter: String): O365TeamConvChannelConnection!

  # Browse OneDrive files and folders.
  browseOnedrive(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!, folderId: String, onedriveSearchFilter: OnedriveSearchFilter,

    # Org UUID.
    orgId: UUID!): O365OnedriveObjectConnection!

  # Browse SharePoint  drive files and folders.
  browseSharepointDrive(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!, folderId: String, sharepointDriveSearchFilter: OnedriveSearchFilter,

    # Org UUID.
    orgId: UUID!,

    # The site child ID for SharePoint descendant objects.
    siteChildId: String,

    # The site child type for SharePoint descendant objects.
    siteChildType: SharePointDescendantType): O365OnedriveObjectConnection!

  # Browse list objects.
  browseSharepointList(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!, folderId: String, sharepointDriveSearchFilter: OnedriveSearchFilter,

    # Org UUID.
    orgId: UUID!,

    # The site child ID for SharePoint descendant objects.
    siteChildId: String): O365OnedriveObjectConnection!

  # Returns a list files whose name is prefixed by the query in the given snapshot.
  browseSnapshotFileConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The path under which you want your search to run.
    path: String!,

    # Snapshot persistent UUID in RSC.
    snapshotFid: UUID!,

    # Prefix arg for searching for files within a snapshot.
    searchPrefix: String): SnapshotFileConnection!

  # Browse channels in a Teams files snapshot.
  browseTeamsChannels(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!,

    # Org UUID.
    orgId: UUID!,

    # Filter on channel membership type.
    channelMembershipTypeFilter: ChannelMembershipType!, nameFilter: String): O365TeamsChannelConnection!

  # Browse team files.
  browseTeamsDrive(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!, folderId: String, teamsDriveSearchFilter: OnedriveSearchFilter,

    # Org UUID.
    orgId: UUID!): O365OnedriveObjectConnection!

  # Paginated list of cassandra column families.
  cassandraColumnFamilies(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): CassandraColumnFamilyConnection!

  # Details of a cassandra column family.
  cassandraColumnFamily(
    # The Rubrik UUID for the object.
    fid: UUID!): CassandraColumnFamily!

  # Get Recoverable Range of a Cassandra Column Family.
  cassandraColumnFamilyRecoverableRange(
    # Input for V2GetMosaicRecoverableRange.
    input: GetMosaicRecoverableRangeInput!): GetMosaicRecoverableRangeResponse!

  # Get Schema of a Cassandra Column Family.
  cassandraColumnFamilySchema(
    # Input for V2GetMosaicTableSchema.
    input: GetMosaicTableSchemaInput!): GetSchemaResponse!

  # Details of a cassandra keyspace.
  cassandraKeyspace(
    # The Rubrik UUID for the object.
    fid: UUID!): CassandraKeyspace!

  # Paginated list of cassandra keyspaces.
  cassandraKeyspaces(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): CassandraKeyspaceConnection!

  # Details of a cassandra source.
  cassandraSource(
    # The Rubrik UUID for the object.
    fid: UUID!): CassandraSource!

  # Paginated list of cassandra sources.
  cassandraSources(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): CassandraSourceConnection!
  cdmHierarchySnappableNew(snappableFid: UUID!): CdmHierarchySnappableNew!
  cdmHierarchySnappablesNew(
    # The Rubrik UUIDs for the objects.
    fids: [UUID!]!): [CdmHierarchySnappableNew!]!
  cdmInventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): CdmInventorySubHierarchyRoot!

  # A single Microsoft SQL log shipping target.
  cdmMssqlLogShippingTarget(
    # The Rubrik UUID for the object.
    fid: UUID!): MssqlLogShippingTarget

  # Paginated list of Microsoft SQL log shipping target.
  cdmMssqlLogShippingTargets(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort by argument for Mssql log shipping targets. Default sort is by id in ascending order.
    sortBy: MssqlLogShippingTargetSortByInput,

    # Filters for Mssql log shipping targets. No filters by default.
    filters: [MssqlLogShippingTargetFilterInput!]): MssqlLogShippingTargetConnection!

  # Check supported feature for cluster version.
  cdmVersionCheck(
    # Request for checking feature support for cluster version.
    featureToCdmVersion: FeatureCdmVersionInput!): FeatureCdmVersionReply!

  # Metadata of a certificate.
  certificateInfo(
    # Get certificate metadata input.
    input: GetCertificateInfoInput!): GetCertificateInfoReply!

  # Get Certificate Signing Request (CSR).
  certificateSigningRequest(
    # Certificate Signing Request Input.
    input: GetCsrInput!): Csr!

  # Browse Certificate Signing Requests (CSRs).
  certificateSigningRequests(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Certificate manager argument to sort by.
    sortBy: CertMgmtSortBy,

    # Search for a CSR.
    searchTerm: String): CsrConnection!

  # Browse certificates.
  certificates(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Certificate manager argument to sort by.
    sortBy: CertMgmtSortBy,

    # Search for a certificate.
    searchTerm: String): CertificateConnection!

  # Certificates having private key.
  certificatesWithKey: CertificateConnection!

  # Checks if we can unmap the archival location from the subscription.
  checkAzurePersistentStorageSubscriptionCanUnmap(
    # The Rubrik ID of the cloud account.
    cloudAccountId: UUID!,

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!,

    # Unmapping validation type.
    unmappingValidationType: UnmappingValidationType!): CheckAzurePersistentStorageSubscriptionCanUnmapReply!

  # Get details of the cloud compute connectivity check request
  # 
  # Supported in v6.0+
  # Gets the details of the request that was triggered to check the cloud compute connectivity of an archival location.
  checkCloudComputeConnectivityJobProgress(
    # Input for V1GetCloudComputeConnectivityCheckRequestStatus.
    input: GetCloudComputeConnectivityCheckRequestStatusInput!): AsyncRequestStatus!

  # Check if label rule name is unique or not
  checkCloudNativeLabelRuleNameUniqueness(
    # Name for the rule
    ruleName: String!,

    # Type of managed object on which label rule will be applied.
    objectType: CloudNativeLabelObjectType!): IsCloudNativeTagRuleNameUniqueReply!

  # Check if tag rule name is unique or not
  checkCloudNativeTagRuleNameUniqueness(
    # Name for the rule
    ruleName: String!,

    # Type of managed object on which tag rule will be applied.
    objectType: CloudNativeTagObjectType!): IsCloudNativeTagRuleNameUniqueReply!
  cloudAccount(
    # Corresponds to Cloud Account Id in Rubrik tables
    cloudAccountId: UUID!): CloudAccount!

  # A Cloud Direct NAS export object.
  cloudDirectNasExport(
    # The Rubrik UUID for the object.
    fid: UUID!): CloudDirectNasExport!

  # Retrieve systems managed by the Cloud Direct site.
  cloudDirectSystems(
    # Input for retrieving Cloud Direct systems.
    input: CloudDirectSystemsInput!): CloudDirectSystems!

  # Archived snapshot locking related details for a workload. If no snapshots IDs are passed, all the expired source snapshots and the source snapshots that have a unexpired archival copy will be checked.
  cloudNativeCheckArchivedSnapshotsLocked(
    # Workload ID.
    workloadId: UUID!,

    # List of snapshot IDs.
    snapshotIds: [UUID!]): CheckArchivedSnapshotsLockedReply!

  # Queries whether Polaris has the required permissions for a particular feature.
  cloudNativeCheckRequiredPermissionsForFeature(
    # Cloud native account ID
    cloudNativeAccountId: String!,

    # Feature for which required permissions have to be checked.
    featurePermissionCheck: CloudNativeFeatureForPermissionsCheck!): Boolean!

  # Retrieves the list of all customer-specified tags and the corresponding value indicating whether resource tags should be overridden by customer-specified tags for a specific cloud type.
  cloudNativeCustomerTags(
    # Vendor of the cloud account.
    cloudVendor: CloudVendor!,

    # The Rubrik ID of the cloud account.
    cloudAccountId: UUID): CloudNativeCustomerTagsReply!

  # Cloud native label rules.
  cloudNativeLabelRules(
    # Type of managed object on which label rule will be applied.
    objectType: CloudNativeLabelObjectType!,

    # Fields and values according to which rules will be filtered.
    filters: [CloudNativeFilter!], sortBy: CloudNativeTagRuleSortByFields,

    # Sorting order for the results.
    sortOrder: SortOrder): GetCloudNativeLabelRulesReply!

  # Fetches the URLs for the windows, linux and debian RBA installers.
  cloudNativeRbaInstallers: RbaInstallerUrls!

  # Details of snapshot types available for recovery.
  cloudNativeSnapshotDetailsForRecovery(
    # Snapshot UUID.
    snapshotId: UUID!): CloudNativeSnapshotDetailsForRecoveryReply!

  # Details of the available snapshot types.
  cloudNativeSnapshotTypeDetails(
    # Snapshot UUID.
    snapshotId: UUID!): CloudNativeSnapshotTypeDetailsReply!

  # List of all files and directories in a given path with the given prefix in name.
  cloudNativeSnapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The path under which you want your search to run.
    path: String!,

    # ID of the snapshot to be searched or browsed.
    snapshotFid: UUID!,

    # Name prefix to search for files within a snapshot.
    searchPrefix: String): SnapshotFileConnection!

  # Returns the script to setup backup for a SQL Server database.
  cloudNativeSqlServerSetupScript: CloudNativeSqlServerSetupScript!

  # Cloud native tag rules.
  cloudNativeTagRules(
    # Type of managed object on which tag rule will be applied.
    objectType: CloudNativeTagObjectType!,

    # Fields and values according to which rules will be filtered.
    filters: [CloudNativeFilter!], sortBy: CloudNativeTagRuleSortByFields,

    # Sorting order for the results.
    sortOrder: SortOrder): GetCloudNativeTagRulesReply!

  # List all files and directories in a given snappable with the given prefix in name.
  cloudNativeWorkloadVersionedFiles(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Snappable ID.
    snappableId: UUID!,

    # Specify either the name or path prefix argument to search for files within a workload.
    searchQuery: String!): CloudNativeVersionedFileConnection!

  # A cluster object.
  cluster(
    # The Rubrik cluster ID.
    clusterUuid: UUID!): Cluster!

  # Get all certificates
  # 
  # Supported in v5.1+
  # Get all certificates.
  clusterCertificates(
    # Input for V1QueryCertificates.
    input: QueryCertificatesInput!): CertificateSummaryListResponse!

  # List of the available cluster objects.
  clusterConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter by cluster.
    filter: ClusterFilterInput,

    # Cluster sort order.
    sortOrder: SortOrder = DESC,

    # Sort clusters by field.
    sortBy: ClusterSortByEnum = ClusterType): ClusterConnection!

  # Get the cluster certificate signing request
  # 
  # Supported in v7.0+
  # Returns the certificate signing request generated from the private key of the Rubrik cluster.
  clusterCsr(
    # Input for V1GetClusterCsr.
    input: GetClusterCsrInput!): ClusterCsr!

  # Get current default gateway
  # 
  # Supported in v5.0+
  # Get current default gateway.
  clusterDefaultGateway(
    # Input for InternalGetDefaultGateway.
    input: GetDefaultGatewayInput!): InternalGetDefaultGatewayResponse!

  # Rubrik cluster DNS information.
  clusterDns(
    # The Rubrik cluster ID.
    clusterUuid: UUID!): ClusterDnsReply!

  # Get a list of a cluster's always-available Ips
  # 
  # Supported in v5.0+
  # Get a list of a cluster's always-available Ips.
  clusterFloatingIps(
    # Input for InternalGetClusterIps.
    input: GetClusterIpsInput!): InternalGetClusterIpsResponse!
  clusterGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Group by field.
    groupBy: ClusterGroupByEnum!,

    # Filter by cluster.
    filter: ClusterFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): ClusterGroupByConnection!

  # Get IPMI details
  # 
  # Supported in v5.0+
  # get IPMI details of availability and enabled access in the cluster.
  clusterIpmi(
    # Input for InternalGetIpmi.
    input: GetIpmiInput!): ModifyIpmiReply!

  # Rubrik cluster IPv6 mode.
  clusterIpv6Mode(
    # Input for getting the IPv6 mode of a Rubrik cluster.
    input: ClusterIpv6ModeInput!): ClusterIpv6ModeReply!

  # Get network interfaces for a Rubrik Cluster cluster
  # 
  # Supported in v5.0+
  # Retrieves network interfaces(including VLANs) on bond0/bond1.
  clusterNetworkInterfaces(
    # Input for InternalGetNetworkInterface.
    input: GetNetworkInterfaceInput!): NetworkInterfaceListResponse!

  # Get list of nodes in this Rubrik cluster
  # 
  # Supported in v5.0+
  # Returns the list of all Rubrik nodes.
  clusterNodes(
    # Input for InternalGetNodes.
    input: GetNodesInput!): NodeStatusListResponse!

  # Get NTP Servers
  # 
  # Supported in v5.0+
  # Retrieve a list of the NTP servers assigned to the Rubrik cluster. Encryption keys are not reported.
  clusterNtpServers(
    # Input for InternalGetClusterNtpServers.
    input: GetClusterNtpServersInput!): NtpServerConfigurationListResponse!

  # Get updates on the job progress of the Rubrik cluster operation.
  clusterOperationJobProgress(
    # Input for checking the job progress of the Rubrik cluster operation.
    input: ClusterOperationJobProgressInput!): ClusterOperationJobProgress!

  # Rubrik cluster proxy information.
  clusterProxy(
    # The Rubrik cluster ID.
    clusterUuid: UUID!): ClusterProxyReply!

  # Info about the cluster product types the user is entitled to.
  clusterRegistrationProductInfo: ClusterRegistrationProductInfoType!

  # Retrieve the counts of the Rubrik cluster reports migration.
  clusterReportMigrationCount(
    # The Rubrik cluster ID.
    clusterUuid: UUID,

    # Rubrik cluster report migration status.
    status: [CdmReportMigrationStatus!]!): ReportsMigrationCount!

  # Retrieve the status of the cluster report migration job.
  clusterReportMigrationJobStatus(
    # The Rubrik cluster ID.
    clusterUuid: UUID): ClusterReportMigrationJobStatus!

  # Retrieve details of the Rubrik clusters' reports migration.
  clusterReportMigrationStatus(
    # The Rubrik cluster ID.
    clusterUuid: UUID,

    # Rubrik cluster report migration status.
    status: [CdmReportMigrationStatus!]!,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): ReportMigrationStatusConnection!

  # Returns paginated list of SLA domains that were created on Rubrik CDM.
  clusterSlaDomains(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): ClusterSlaDomainConnection!
  clusterTypeList: [GroupCount!]!

  # Rubrik cluster VLAN information.
  clusterVlans(
    # Input for InternalGetVlan.
    input: GetVlanInput!): VlanConfigListResponse!

  # Get the signed certificate for Web server
  # 
  # Supported in v5.2+
  # If the web server uses a signed certificate, fetch it.
  clusterWebSignedCertificate(
    # Input for V1GetWebSignedCertificate.
    input: ClusterWebSignedCertificateInput!): ClusterWebSignedCertificateReply!
  clusterWithUpgradesInfo(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String, upgradeFilter: CdmUpgradeInfoFilterInput,

    # Cluster sort order.
    sortOrder: SortOrder = DESC,

    # sort upgradeInfo by field
    sortBy: UpgradeInfoSortByEnum = ClusterType): ClusterConnection!

  # Get details for the compute cluster
  # 
  # Supported in v5.1+
  # Get details for the compute cluster.
  computeClusterStatus(
    # Input for V1GetComputeCluster.
    input: GetComputeClusterInput!): ComputeClusterDetail!

  # Objects that match the specifications of a configured group.
  configuredGroupMembers(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Org UUID.
    orgId: UUID!,

    # A wildcard pattern that group members' names or URLs must match.
    wildcard: String,

    # A list of preferred data locations that group members must match.
    pdls: [String!]!): O365ConfiguredGroupMemberConnection!

  # The number of objects protected by the SLA Domains.
  countOfObjectsProtectedBySlas(
    # Forever UUID of the object root. The value of  `none` represents the global hierarchy root.
    rootOptionalFid: UUID,

    # A list of SLA Domain IDs.
    slaIds: [UUID!]!,

    # The hierarchy object filter.
    filter: [Filter!],

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!]): CountOfObjectsProtectedBySLAsResult!

  # Returns details for one crawl.
  crawl(crawlId: String!): Crawl!

  # Returns crawls for an account.
  crawls: CrawlConnection!
  currentIpAddress: String!

  # Details of the user's current organization.
  currentOrg: Org!

  # Authentication domain configuration of the current organization.
  currentOrgAuthDomainConfig: TenantAuthDomainConfig!

  # Currently logged-in user.
  currentUser: User!

  # Current user login context.
  currentUserLoginContext: UserLoginContext!
  customAnalyzer(analyzerId: String!): Analyzer!

  # Returns hits grouped by analyzer and policy.
  dashboardSummary(
    # Include whitelisted objects in the results.
    getWhitelistedResults: Boolean!): GetDashboardSummaryReply!

  # Get the database log backup delay information
  # 
  # Supported in v5.3+
  # v5.3:
  # v6.0+: Get the database log backup delay information.
  databaseLogReportForCluster(
    # Input for V1QueryLogReport.
    input: QueryLogReportInput!): DbLogReportSummaryListReply!

  # Get the database log backup report properties
  # 
  # Supported in v5.3+
  # Get the properties for the database (SQL and Oracle) log backup delay email notification creation. The properties are logDelayThresholdInMin and logDelayNotificationFrequencyInMin.
  databaseLogReportingPropertiesForCluster(
    # Input for V1QueryReportProperties.
    input: QueryReportPropertiesInput!): DbLogReportProperties!

  # Returns permissions associated with a path.
  datagovSecDesc(snappableFid: String!, snapshotFid: String!, stdPath: String!,

    # Skip converting SIDs in response to friendly names
    skipResolveSids: Boolean,

    # Filter for resolving security descriptor.
    filters: SddlRequestFiltersInput): QuerySDDLReply!

  # Details of a db2 database for a given fid.
  db2Database(
    # The Rubrik UUID for the object.
    fid: UUID!): Db2Database!

  # Retrieve the status of a Db2 database job request
  # 
  # Supported in v8.0+
  # Retrieve details about a Db2 database-related request which includes the status of the database-related job.
  db2DatabaseJobStatus(
    # Input for V1GetDb2DatabaseAsyncRequestStatus.
    input: GetDb2DatabaseAsyncRequestStatusInput!): AsyncRequestStatus!

  # Connection of filtered db2 databases based on specific filters.
  db2Databases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): Db2DatabaseConnection!

  # Details of a db2 instance for a given fid.
  db2Instance(
    # The Rubrik UUID of the Db2 instance.
    id: UUID!): Db2Instance!

  # Connection of filtered db2 instances based on specific filters.
  db2Instances(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): Db2InstanceConnection!

  # Details of a Db2 log snapshot for a given fid.
  db2LogSnapshot(
    # The Rubrik UUID of the Db2 log snapshot object.
    db2LogSnapshotFid: UUID!): Db2LogSnapshot!

  # Connection of all log snapshots for Db2.
  db2LogSnapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field to sort Db2 log snapshots.
    sortBy: Db2LogSnapshotSortBy,

    # Field to filter Db2 log snapshots.
    filter: Db2LogSnapshotFilterInput): Db2LogSnapshotConnection!

  # Details of a Db2 recoverable range for a given fid.
  db2RecoverableRange(
    # The Rubrik UUID of the Db2 recoverable range object.
    db2RecoverableRangeFid: UUID!): Db2RecoverableRange!

  # Connection of all recoverable ranges for Db2.
  db2RecoverableRanges(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field to sort Db2 recoverable ranges.
    sortBy: Db2RecoverableRangeSortBy,

    # Field to filter Db2 recoverable ranges.
    filter: Db2RecoverableRangeFilterInput): Db2RecoverableRangeConnection!

  # Decrypt Export URL.
  decryptExportUrl(
    # Optional FID of the workload.
    workloadFid: UUID,

    # Encrypted string of Export URL Specs containing arbitrary characters
    exportUrlSpecsEnc: String!): ExportUrlSpecs!

  # Polaris deployment version.
  deploymentVersion: String!

  # Browse diff FMD under given path.
  diffFmd(
    # The Rubrik cluster ID.
    clusterUuid: UUID!,

    # Workload managed ID.
    managedId: String!,

    # Corresponds to snapshot ID in Rubrik CDM tables.
    snapshotId: String!,

    # Root path to browse changes of FMD.
    browseDiffPath: String!): DiffResult!

  # v5.0-v5.1: Discover bootstrappable nodes
  # v5.2+: (DEPRECATED) Discover bootstrappable nodes
  # 
  # Supported in v5.0+
  # v5.0-v5.1: Searches for nodes bootstrappable to the specified Rubrik cluster
  # v5.2+: Searches for nodes that can bootstrap into the specified Rubrik cluster. This endpoint will be moved to v1 in the next major version.
  discoverNodes(
    # ID of the Rubrik cluster or *me* for self.
    id: String!): BootstrappableNodeInfoListResponse!

  # Returns timeline data for all policies of an account.
  discoveryTimeline(
    # Start time, in string format (YYYY-MM-DD).
    startDay: String!,

    # End time, in string format (YYYY-MM-DD).
    endDay: String!, timezone: String!,

    # Include whitelisted objects in the results.
    getWhitelistedResults: Boolean!,

    # Types of workloads that can be used for filtering query results.
    workloadTypes: [DataGovObjectType!]! = [],

    # Specifies whether the optimized discovery timeline must be used for the request. If not passed, default is taken as false.
    useOptimisedDiscoveryTimeline: Boolean,

    # List of subscriptions for filtering results.
    subscriptionIdsFilter: [String!]): GetPoliciesTimelineReply!

  # Retrieve a custom distribution list event digest by ID.
  distributionListDigest(
    # Input for retrieving a distribution list digest.
    input: DistributionDigestByIdInput!): EventDigest!

  # Checks if a resource group with the specified name exists in the specified account.
  doesAzureNativeResourceGroupExist(
    # The Rubrik ID of the cloud account.
    cloudAccountId: UUID!,

    # The Native ID of the subscription.
    azureSubscriptionNativeId: UUID!,

    # The name of the resource group.
    resourceGroupName: String!,

    # A cloud account feature of Rubrik Security Cloud.
    feature: CloudAccountFeature!): Boolean!

  # Download cdm upgrades table pdf.
  downloadCdmUpgradesPdf(
    # Filters for the Rubrik CDM upgrades page for PDF generation.
    downloadFilter: DownloadCdmUpgradesPdfFiltersInput): DownloadCdmUpgradesPdfReply!

  # Get Status of download package job.
  downloadPackageStatus(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): DownloadPackageStatusReply!
  downloadedVersionList: [GroupCount!]!
  dummyFieldWithAdminOnlyTag: Boolean!

  # Download link for Rubrik Edge Deployment Tool for Microsoft Windows.
  edgeWindowsToolLink: EdgeWindowsToolLink!

  # Details of an Exchange DAG for a given fid.
  exchangeDag(
    # The Rubrik UUID for the object.
    fid: UUID!): ExchangeDag!

  # Connection of filtered Exchange DAGs based on specific filters.
  exchangeDags(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ExchangeDagConnection!

  # Details of an Exchange Database for a given fid.
  exchangeDatabase(
    # The Rubrik UUID for the object.
    fid: UUID!): ExchangeDatabase!

  # Connection of filtered Exchange Databases based on specific filters.
  exchangeDatabases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ExchangeDatabaseConnection!

  # Paginated list of Exchange Database live mounts.
  exchangeLiveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for exchange live mounts.
    filters: [ExchangeLiveMountFilterInput!],

    # Sort by argument for exchange live mounts.
    sortBy: ExchangeLiveMountSortByInput): ExchangeLiveMountConnection!

  # Details of an Exchange Server for a given fid.
  exchangeServer(
    # The Rubrik UUID for the object.
    fid: UUID!): ExchangeServer!

  # Connection of filtered Exchange Servers based on specific filters.
  exchangeServers(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ExchangeServerConnection!

  # Customer facing Polaris deployment name.
  externalDeploymentName: String!

  # Information on Microsoft 365 restore failed items.
  failedRestoreItemsInfo(
    # The FID of the workload.
    workloadFid: UUID!,

    # Taskchain ID.
    taskchainId: String!): FailedRestoreItemsInfoReply!

  # Get details of the given failover cluster app.
  failoverClusterApp(
    # The Rubrik UUID for the object.
    fid: UUID!): FailoverClusterApp!

  # Get a summary of all failover cluster apps.
  failoverClusterApps(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # Host failover cluster root type.
    hostFailoverClusterRoot: HostFailoverClusterRoot!): FailoverClusterAppConnection!

  # Get a summary of all failover cluster top level descendants.
  failoverClusterTopLevelDescendants(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Host failover cluster root type.
    hostFailoverClusterRoot: HostFailoverClusterRoot!): FailoverClusterTopLevelDescendantTypeConnection!

  # Status of the federated login.
  federatedLoginStatus: FederatedLoginStatus!

  # Get details about an async request
  # 
  # Supported in v5.0+
  # Get details about a fileset related async request.
  filesetRequestStatus(
    # Input for V1GetFilesetAsyncRequestStatus.
    input: GetFilesetAsyncRequestStatusInput!): AsyncRequestStatus!
  filesetSnapshot(
    # ID of snapshot.
    id: String!,

    # Whether or not to fetch verbose fileset snapshot information. The performance of this endpoint will decrease if set to true.
    verbose: Boolean): FilesetSnapshotDetail!

  # Lists all files and directories in a given path
  # 
  # Supported in v5.0+
  # Lists all files and directories in a given path.
  filesetSnapshotFiles(
    # ID of snapshot.
    id: String!,

    # Maximum number of entries in the response.
    limit: Int,

    # Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries.
    offset: Int,

    # The absolute path of the starting point for the directory listing.
    path: String!): BrowseResponseListResponse!
  filesetTemplate(
    # The Rubrik UUID for the object.
    fid: UUID!): FilesetTemplate!

  # Get a summary of all fileset templates.
  filesetTemplates(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # Host root type.
    hostRoot: HostRoot!): FilesetTemplateConnection!

  # Returns the service account corresponding to global credentials. Return empty string if global credentials are absent
  gcpGetDefaultCredentialsServiceAccount: String!

  # Get details of a GCP Disk
  gcpNativeDisk(
    # The Rubrik UUID for the object.
    fid: UUID!): GcpNativeDisk!

  # List of GCP disks.
  gcpNativeDisks(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of GCP disks.
    sortBy: GcpNativeDiskSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder, diskFilters: GcpNativeDiskFilters): GcpNativeDiskConnection!

  # Get details of a GCE Instance
  gcpNativeGceInstance(
    # The Rubrik UUID for the object.
    fid: UUID!): GcpNativeGceInstance!

  # List of GCE instances.
  gcpNativeGceInstances(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of GCP GCE instances.
    sortBy: GcpNativeGceInstanceSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder, gceInstanceFilters: GcpNativeGceInstanceFilters): GcpNativeGceInstanceConnection!

  # Get details of a GCP Project
  gcpNativeProject(
    # The Rubrik UUID for the object.
    fid: UUID!): GcpNativeProject!

  # List of GCP projects.
  gcpNativeProjects(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of GCP projects.
    sortBy: GcpNativeProjectSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder, projectFilters: GcpNativeProjectFilters, authorizedOperationFilter: Operation,

    # Provide optional workload hierarchy for RBAC and SLA, none value is assumed to be All workload hierarchy.
    workloadHierarchy: WorkloadLevelHierarchy): GcpNativeProjectConnection!

  # lists distinct regions and zones of the GCP disks stored with Polaris
  gcpNativeStoredDiskLocations(
    # UUID of the Project (Optional)
    projectId: UUID): ListStoredDiskLocationsReply!
  geoLocationList: [GroupCount!]!
  getAllRolesInOrgConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder, sortBy: RoleFieldEnum = Name,

    # Name to filter the results.
    nameFilter: String): RoleConnection!

  # Get CDM release details from support portal for a given list of clusters.
  getCdmReleaseDetailsForClusterFromSupportPortal(
    # Specifies the list of cluster UUIDs.
    listClusterUuid: [UUID!]!,

    # Prefix filter for available versions.
    filterVersion: String! = "",

    # Retrieves version details.
    fetchLinks: Boolean! = false,

    # Filters for the available upgrade versions.
    filterUpgradeable: Boolean! = true,

    # Shows all versions.
    shouldShowAll: Boolean! = true,

    # Filter to include only the versions released after the source version.
    filterAfterSource: Boolean! = false,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmUpgradeReleaseDetailsFromSupportPortalReply!

  # Get CDM release details from support portal for a given list of clusters specific to a target version.
  getCdmReleaseDetailsForVersionFromSupportPortal(
    # Specifies the list of cluster UUIDs.
    listClusterUuid: [UUID!]!,

    # Prefix filter for available versions.
    filterVersion: String! = "",

    # Retrieves version details.
    fetchLinks: Boolean! = false,

    # Filters for the available upgrade versions.
    filterUpgradeable: Boolean! = true,

    # Shows all versions.
    shouldShowAll: Boolean! = true,

    # Filter to include only the versions released after the source version.
    filterAfterSource: Boolean! = false,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmUpgradeReleaseDetailsFromSupportPortalReply!

  # Get available versions on support portal for a cluster.
  getCdmReleaseDetailsFromSupportPortal(
    # Platform type of the cluster.
    platform: String! = "",

    # Number of nodes in the cluster.
    nodeCount: Long! = 4,

    # Source version of the cluster.
    sourceVersion: String! = "",

    # Prefix filter for available versions.
    filterVersion: String! = "",

    # Retrieves version details.
    fetchLinks: Boolean! = false,

    # Filters for the available upgrade versions.
    filterUpgradeable: Boolean! = true,

    # Shows all versions.
    shouldShowAll: Boolean! = true,

    # Filter to include only the versions released after the source version.
    filterAfterSource: Boolean! = false,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmUpgradeReleaseDetailsFromSupportPortalReply!
  getGroupCountByCdmClusterStatus: GroupCountListWithTotal!
  getGroupCountByPrechecksStatus: [GroupCount!]!
  getGroupCountByUpgradeJobStatus: [GroupCount!]!
  getGroupCountByVersionStatus: [GroupCount!]!
  getKorgTaskchainStatus(
    # Taskchain ID.
    taskchainId: String!): GetTaskchainStatusReply! @deprecated(reason: "Use `taskchain` field instead.")
  getPermissions(
    # ID of the role.
    roleId: String!): [Permission!]!
  getRolesByIds(roleIds: [String!]!): [Role!]!
  getUserDownloads(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): [UserDownload!]!

  # Global certificate.
  globalCertificate(
    # ID of the global certificate to retrieve.
    certificateId: String!): GlobalCertificate!

  # Global certificates.
  globalCertificates(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field on which to sort the certificates.
    sortBy: GlobalCertificateSortBy,

    # Input to list global certificates.
    input: GlobalCertificatesQueryInput!): GlobalCertificateConnection!

  # All files matching input filters.
  globalFileSearch(
    # Input for InternalGlobalSearchApiQuery.
    input: GlobalFileSearchInput!): GlobalFileSearchReply!

  # Get the lockout configurations of the global organization.
  globalLockoutConfig: LockoutConfig!

  # Get global multifactor authentication (MFA) for an account.
  globalMfaSetting: GetMfaSettingReply!
  globalSearchResults(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): HierarchyObjectConnection!

  # Retrieves a list of SLA Domains.
  globalSlaFilterConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Field to sort the SLA Domains list.
    sortBy: SlaQuerySortByField,

    # Sort order for sorting the SLA Domains returned by the query.
    sortOrder: SortOrder,

    # Filter for the SLA Domain query.
    filter: [GlobalSlaFilterInput!],

    # Specifies the context filter to use.
    contextFilter: ContextFilterTypeEnum,

    # Specifies the context filter input to use.
    contextFilterInput: [ContextFilterInputField!],

    # Specifies whether to show the SLA Domain sync status on Rubrik CDM.
    shouldShowSyncStatus: Boolean = false,

    # Specifies whether to show the number of workloads protected by the SLA Domain.
    shouldShowProtectedObjectCount: Boolean = false,

    # Specifies whether to show the upgrade information for an SLA Domain.
    shouldShowUpgradeInfo: Boolean = false,

    # Specifies whether to retrieve the remote SLA Domains from Rubrik CDM. By default, remote SLA Domains are not retrieved.
    showRemoteSlas: Boolean,

    # Specifies whether to show the Rubrik clusters where this SLA Domain is paused.
    shouldShowPausedClusters: Boolean = false): GlobalSlaForFilterConnection!

  # Status on the clusters where global SLA is synced.
  globalSlaStatuses(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filters for SLAStatus.
    filter: [SlaStatusFilterInput!],

    # SLA ID for global SLAs.
    SlaId: UUID!): GlobalSlaStatusConnection!

  # Retrieve groups from current and descendant organizations based on the specified filters.
  groupsInCurrentAndDescendantOrganization(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Specifies user group filters.
    filter: GroupFilterInput,

    # Specifies sort parameter.
    sortBy: GroupSortByParam,

    # Specifies whether to include user groups without any assigned roles either in the current or descendant orgs. If roleIdsFilter is not empty, this field is always considered as false.
    shouldIncludeGroupsWithoutRole: Boolean = false): GroupConnection!
  guestCredentials(
    # Input for InternalQueryGuestCredential.
    input: QueryGuestCredentialInput!): GuestCredentialDetailListResponse!

  # Get Guest OS credentials.
  guestCredentialsV2(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for Guest OS credentials.
    filter: [GuestOsCredentialFilterInput!],

    # Sort Guest OS credentials.
    sortBy: GuestOsCredentialSortBy): GuestOsCredentialConnection!

  # Determine whether the current organization has configured identity providers.
  hasIdpConfigured: Boolean!

  # Checks if Microsoft Entra ID has relic snapshots.
  hasRelicAzureAdSnapshot(
    # Input to check if Microsoft Entra ID has relic snapshots.
    input: HasRelicAzureAdSnapshotInput!): HasRelicAzureAdSnapshotReplyType!

  # Paginated list of help content snippets.
  helpContentSnippets(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter for help content snippets.
    filter: HelpContentSnippetsFilterInput!): HelpContentSnippetConnection!
  hierarchyObject(
    # The Rubrik UUID for the object.
    fid: UUID!): HierarchyObject!

  # Returns a single hierarchy object to be used as a recovery target. Permission checks are performed against the ProvisionOnInfrastructure operation, not the ViewInventory operation.
  hierarchyObjectRecoveryTarget(
    # The Rubrik UUID for the object.
    fid: UUID!): HierarchyObject!
  hierarchyObjects(
    # The Rubrik UUIDs for the objects.
    fids: [UUID!]!,

    # The hierarchy object filter.
    filter: [Filter!]): [HierarchyObject!]!
  hierarchySnappables(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): HierarchySnappableConnection!

  # Get host availability statuses
  # 
  # Supported in v5.0+
  # Retrieve the availability status for each host registered with a specified Rubrik CDM instance.
  hostDiagnosis(
    # ID assigned to the host object.
    id: String!): HostDiagnosisSummary!

  # Get details of the given host failover cluster.
  hostFailoverCluster(
    # The Rubrik UUID for the object.
    fid: UUID!): HostFailoverCluster!

  # Get a summary of all host failover clusters.
  hostFailoverClusters(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # Host failover cluster root type.
    hostFailoverClusterRoot: HostFailoverClusterRoot!): HostFailoverClusterConnection!
  hostShare(
    # The Rubrik UUID for the object.
    fid: UUID!): HostShare!

  # Get all host shares.
  hostShares(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): HostShareConnection!

  # Details of the given Hyper-V Cluster.
  hypervCluster(
    # The Rubrik UUID for the object.
    fid: UUID!): HyperVCluster!

  # Get Hyper-V host async request
  # 
  # Supported in v5.0+
  # Get details about a Hyper-V host related async request.
  hypervHostAsyncRequestStatus(
    # Input for InternalGetHypervHostAsyncRequestStatus.
    input: GetHypervHostAsyncRequestStatusInput!): AsyncRequestStatus!

  # HyperV Live Mount Connection.
  hypervMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for hyper-v live mounts.
    filters: [HypervLiveMountFilterInput!],

    # Sort by argument for hyper-v live mounts.
    sortBy: HypervLiveMountSortByInput): HyperVLiveMountConnection!

  # Details of the given Hyper-V SCVMM.
  hypervScvmm(
    # The Rubrik UUID for the object.
    fid: UUID!): HyperVSCVMM!

  # Get Hyper-V SCVMM async request
  # 
  # Supported in v5.0+
  # Get details about a Hyper-V SCVMM related async request.
  hypervScvmmAsyncRequestStatus(
    # Input for InternalGetHypervScvmmAsyncRequestStatus.
    input: GetHypervScvmmAsyncRequestStatusInput!): AsyncRequestStatus!

  # Paginated list of HyperV SCVMMs.
  hypervScvmms(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): HyperVSCVMMConnection!

  # Details of the given Hyper-V Server.
  hypervServer(
    # The Rubrik UUID for the object.
    fid: UUID!): HypervServer!

  # Get summary of all the Hyper-V hosts
  # 
  # Supported in v5.0+
  # Get summary of all the Hyper-V hosts.
  hypervServers(
    # Input for InternalQueryHypervHost.
    input: QueryHypervHostInput!): HypervHostSummaryListResponse!

  # Paginated list of the highest-level HyperV Objects accessible by the current user.
  hypervTopLevelDescendants(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): HypervTopLevelDescendantTypeConnection!

  # Details of the given Hyper-V Virtual Machine.
  hypervVirtualMachine(
    # The Rubrik UUID for the object.
    fid: UUID!): HyperVVirtualMachine!

  # Get VM async request details
  # 
  # Supported in v5.0+
  # Get details about a Hyper-V vm related async request.
  hypervVirtualMachineAsyncRequestStatus(
    # Input for InternalGetHypervVirtualMachineAsyncRequestStatus.
    input: GetHypervVirtualMachineAsyncRequestStatusInput!): AsyncRequestStatus!

  # Paginated list of HyperV Virtual Machines.
  hypervVirtualMachines(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): HyperVVirtualMachineConnection!

  # HyperV Virtual Machine detail from CDM.
  hypervVmDetail(
    # Input for InternalGetHypervVirtualMachine.
    input: GetHypervVirtualMachineInput!): HypervVirtualMachineDetail!
  installedVersionList: [InstalledVersionGroupCount!]!

  # Read the integration with the specified integration ID.
  integration(
    # Integration ID.
    id: Int!): ReadIntegrationReply!
  inventoryRoot: InventoryRoot!
  inventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): InventorySubHierarchyRoot!

  # Link to downloadable investigation results in CSV format.
  investigationCsvDownloadLink(
    # The Rubrik cluster ID.
    clusterUuid: UUID!,

    # ID of the object and not the FID.
    workloadId: String!,

    # Corresponds to snapshot ID in Rubrik CDM tables.
    snapshotId: String!): InvestigationCsvDownloadLinkReply!
  ipWhitelist: GetWhitelistReply!

  # Specified whether an EBS volume is restorable. For an EBS Volume to be restorable, the volume should be able to replace where attached.
  isAwsNativeEbsVolumeSnapshotRestorable(
    # UUID of the snapshot.
    snapshotId: String!): IsVolumeSnapshotRestorableReply!

  # Specifies whether the given DbInstance class, storage type, multi-az capability, encryption capability, iops value are supported for the given dbEngine, dbEngineVersion in the specified availability zone. When true, the specification is valid for a RDS Instance and can be used to create a new Instance.
  isAwsNativeRdsInstanceLaunchConfigurationValid(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!,

    # DB Engine of RDS Instance.
    dbEngine: AwsNativeRdsDbEngine!,

    # Version of DB engine.
    dbEngineVersion: String!,

    # DB class of the exported RDS DB instance.
    dbClass: AwsNativeRdsDbInstanceClass!,

    # DB class of the exported RDS DB instance. AWS supported instance classes can be found here https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#Concepts.DBInstanceClass.Types.
    databaseInstanceClass: String,

    # AZ in which the exported RDS DB instance must be launched.
    primaryAz: String,

    # Storage type of the exported RDS DB instance.
    storageType: AwsNativeRdsStorageType,

    # Whether the exported RDS DB instance is multi-AZ or not.
    isMultiAz: Boolean!,

    # KMS Key ID of the exported RDS DB instance.
    kmsKeyId: String,

    # IOPs of the exported RDS DB instance.
    iops: Int): Boolean!

  # Specifies whether an S3 bucket name is available for use in AWS or not. When true, the bucket name is available for use.
  isAwsS3BucketNameAvailable(
    # Name of the AWS S3 bucket.
    bucketName: String!,

    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!): Boolean!

  # Specifies whether the Managed Disk snapshot is restorable or not. A managed disk is restorable when the restore settings of the Managed Disk are configured on the Azure portal and on the Rubrik platform. When the value is true, the managed disk snapshot is restorable.
  isAzureNativeManagedDiskSnapshotRestorable(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!,

    # Snapshot ID
    diskSnapshotId: UUID!): Boolean!

  # Checks if an Azure SQL Database Snapshot or an Azure SQL Managed Instance Database Snapshot is a persistent snapshot.
  isAzureNativeSqlDatabaseSnapshotPersistent(
    # Snapshot ID
    snapshotId: UUID!): Boolean!

  # Specifies whether the given storage account name is valid and available in Azure to be assigned to a new storage account. When the value is true, the specified account name is available in Azure.
  isAzureStorageAccountNameAvailable(
    # Rubrik ID of the Azure Subscription.
    azureSubscriptionRubrikId: UUID!,

    # A unique name for the storage account. Storage account names must be between 3 and 24 characters in length and may contain numbers and lowercase letters only.
    storageAccountName: String!): Boolean!

  # List of snapshots with their file recovery feasibility status
  isCloudNativeFileRecoveryFeasible(
    # List of snapshot IDs.
    snapshotIds: [UUID!]!): ValidateCloudNativeFileRecoveryFeasibilityReply!

  # Is Logged into Rubrik support portal.
  isLoggedIntoRubrikSupportPortal: SupportPortalStatusReply!

  # Is Rubrik Suppport Portal reachable from this deployment.
  isSfdcReachable(
    # Hostname to access the Support portal.
    hostname: String! = "rubrik.force.com",

    # Support portal organization ID.
    organizationId: String! = "00D40000000N3x2"): Boolean!

  # Checks whether acknowledgement of the Time-based, One-Time Password (TOTP) mandate is required for upgrading the Rubrik cluster version.
  isTotpAckNecessaryForCluster(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): Boolean!

  # Checks whether enabling Time-based, One-Time Password (TOTP) is mandatory in the target Rubrik CDM upgrade version.
  isTotpMandatoryInTargetVersion(
    # Specifies the Rubrik CDM upgrade tarball version.
    version: String!): Boolean!

  # Is upgrade available for a particular cluster.
  isUpgradeAvailable(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): CdmUpgradeAvailabilityReply!

  # Is upgrade recommended for a particular cluster.
  isUpgradeRecommended(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): CdmUpgradeRecommendationReply!
  isVMwareManagementEnabled: Boolean!

  # Checks if Zone Redundant Storage (ZRS) is available for a given combination of account, region, subscription and service tier.
  isZrsAvailableForLocation(
    # The service tier of the database.
    serviceTier: ServiceTier!,

    # The azure region.
    region: AzureNativeRegion!,

    # Subscription ID.
    subscriptionId: UUID!): ZrsAvailabilityReply!

  # Returns details of one issue.
  issue(issueId: String!): Issue!

  # Returns all issues filtered by status.
  issues(status: IssueStatus!,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): IssueConnection!

  # Kubernetes Rubrik Backup Service manifest.
  k8sAppManifest(
    # Name of the Kubernetes Rubrik Backup Service app.
    app: String!,

    # The current Kubernetes Rubrik Backup Service version.
    version: String!,

    # Retrieve the manifest for the latest version.
    retrieveLatestVersion: Boolean!,

    # The optional target version for upgrade of Rubrik Kubernetes Agent. If not specified, the latest compatible version is used.
    targetVersion: String,

    # Optional Kubernetes cluster UUID.
    k8sClusterId: UUID): K8sAppManifest! @deprecated(reason: "Not supported anymore.")
  k8sCluster(
    # The Rubrik UUID for the object.
    fid: UUID!): K8sCluster!
  k8sClusters(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): K8sClusterConnection!
  k8sNamespace(
    # The Rubrik UUID for the object.
    fid: UUID!): K8sNamespace!
  k8sNamespaces(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # Optional Kubernetes cluster UUID.
    k8sClusterId: UUID): K8sNamespaceConnection!

  # Kubernetes snapshot information.
  k8sSnapshotInfo(
    # The snapshot UUID.
    snapshotId: UUID!,

    # The FID of the Kubernetes Namespace.
    namespaceId: UUID!,

    # Specifies if the snapshot is a replica snapshot.
    isReplica: Boolean! = false): K8sSnapshotInfo!

  # A knowledge base article.
  knowledgeBaseArticle(
    # The knowledge base article ID.
    id: String!): KnowledgeBaseArticle!
  lambdaSettings: LambdaSettings!

  # Browse LDAP-authorized principals.
  ldapAuthorizedPrincipalConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder, sortBy: LdapAuthorizedPrincipalFieldEnum = Name,

    # Search Text for LDAP principal.
    searchText: String!,

    # Assigned role IDs for LDAP principal.
    roleIds: [UUID!]): AuthorizedPrincipalConnection!

  # Browse LDAP integrations.
  ldapIntegrationConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder, sortBy: LdapIntegrationFieldEnum = Name): LdapIntegrationConnection!

  # Search LDAP Principals.
  ldapPrincipalConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder, sortBy: LdapPrincipalFieldEnum = Name,

    # ID for your LDAP integration.
    id: UUID!,

    # Search Text for LDAP principal.
    searchText: String!): PrincipalConnection!

  # List of legal hold snapshots for a workload.
  legalHoldSnapshotsForSnappable(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Query legal hold snapshots for a workload.
    input: LegalHoldSnapshotsForSnappableInput!): LegalHoldSnapshotDetailConnection!

  # Information about licenses for a specific cluster product, grouped by the product type.
  licensesForClusterProductSummary(
    # Input required for getting the licenses at product type level.
    input: LicensesForClusterProductSummaryInput!): LicensesForClusterProductReply!

  # Information about a Linux fileset.
  linuxFileset(
    # The Rubrik UUID for the object.
    fid: UUID!): LinuxFileset!

  # Lists the O365 apps.
  listO365Apps(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String, o365AppFilters: [AppFilter!]!, o365AppSortByParam: AppSortByParam): O365AppConnection!

  # Get the lockout configurations of the current organization.
  lockoutConfig: LockoutConfig!

  # Retrieve account information.
  lookupAccount(
    # Input required for retrieving account information.
    input: LookupAccountInput!): LookupAccountReply!

  # Retrieves the M365 regions for the organization.
  m365Regions(
    # Org UUID.
    orgId: UUID!): M365RegionsResp!

  # Details of a Managed Volume Object.
  managedVolume(
    # The Rubrik UUID for the object.
    fid: UUID!): ManagedVolume!

  # Aggregated inventory information for Managed Volume.
  managedVolumeInventoryStats: ManagedVolumeInventoryStats!

  # Paginated list of Live Mounts.
  managedVolumeLiveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ManagedVolumeMountConnection!

  # Paginated list of Managed Volumes.
  managedVolumes(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ManagedVolumeConnection!

  # Maximum number of protected apps that can be added per account.
  maxProtectedAppsCount: Int!

  # Get multifactor authentication (MFA) settings for an account.
  mfaSetting: GetMfaSettingReply!

  # Get minimum cluster version to support feature set.
  minimumCdmVersionForFeatureSet(
    # Request for checking minimum cluster version to support given feature set.
    featureListMinimumCdmVersion: FeatureListMinimumCdmVersionInputType!): FeatureListMinimumCdmVersionReply!

  # Provides the bulk recoverable range for MongoDB object recovery, including data and log snapshots.
  mongoBulkRecoverableRanges(
    # Arguments for MongoDB recoverable range.
    input: RecoverableRangeInput!): MongoRecoverableRanges!

  # Provides details for a MongoDB collection identified by the fid.
  mongoCollection(
    # The Rubrik UUID for the object.
    fid: UUID!): MongoCollection!

  # Paginated list of MongoDB collections.
  mongoCollections(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): MongoCollectionConnection!

  # Provides details for a MongoDB database identified by the fid.
  mongoDatabase(
    # The Rubrik UUID for the object.
    fid: UUID!): MongoDatabase!

  # Paginated list of MongoDB databases.
  mongoDatabases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): MongoDatabaseConnection!

  # Provides the point in time range for MongoDB object recovery.
  mongoRecoverableRanges(
    # Arguments for MongoDB recoverable range.
    input: RecoverableRangeInput!): MongoRecoverableRanges!

  # Provides details for the MongoDB source cluster identified by the fid.
  mongoSource(
    # The Rubrik UUID for the object.
    fid: UUID!): MongoSource!

  # Paginated list of MongoDB sources.
  mongoSources(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): MongoSourceConnection!

  # Recoverable range for multiple Management Objects on NoSQL cluster.
  mongodbBulkRecoverableRange(
    # Input for V2MosaicBulkRecoveryRange.
    input: MosaicBulkRecoveryRangeInput!): MosaicRecoveryRangeResponse!

  # MongoDB collection identified by FID on NoSQL cluster.
  # MongoDB stores data records as documents which are gathered together in collections.
  # For more info refer to : https://docs.mongodb.com/manual/core/databases-and-collections
  mongodbCollection(
    # The Rubrik UUID for the object.
    fid: UUID!): MongodbCollection!

  # Recoverable Range of a MongoDB collection on NoSQL cluster.
  mongodbCollectionRecoverableRange(
    # Input for V2GetMosaicRecoverableRange.
    input: GetMosaicRecoverableRangeInput!): GetMosaicRecoverableRangeResponse!

  # Paginated list of MongoDB collections on NoSQL cluster.
  mongodbCollections(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): MongodbCollectionConnection!

  # MongoDB database identified by FID on NoSQL cluster.
  # MongoDB stores data records as documents which are gathered together in collections.
  # A database stores one or more collections of documents.
  # For more info refer to : https://docs.mongodb.com/manual/core/databases-and-collections/
  mongodbDatabase(
    # The Rubrik UUID for the object.
    fid: UUID!): MongodbDatabase!

  # Paginated list of MongoDB databases on NoSQL cluster.
  mongodbDatabases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): MongodbDatabaseConnection!

  # MongoDB source cluster identified by FID on NoSQL cluster.
  # For MongoDB, the term "source" is usually used for either a replica set or a sharded cluster.
  # For more info on MongoDB cluster refer to : https://docs.mongodb.com/manual/introduction/
  mongodbSource(
    # The Rubrik UUID for the object.
    fid: UUID!): MongodbSource!

  # Paginated list of MongoDB sources on NoSQL cluster.
  mongodbSources(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): MongodbSourceConnection!

  # Get recoverable range for multiple Management Objects.
  mosaicBulkRecoveryRange(
    # Input for V2MosaicBulkRecoveryRange.
    input: MosaicBulkRecoveryRangeInput!): MosaicRecoveryRangeResponse!

  # List snapshots of a mosaic object.
  mosaicSnapshots(
    # Input for V2GetMosaicVersion.
    input: GetMosaicVersionInput!): ListVersionResponse!

  # List all stores on mosaic cluster.
  mosaicStores(
    # Input for V2GetMosaicStore.
    input: GetMosaicStoreInput!): ListStoreResponse!

  # List versions of a mosaic object.
  mosaicVersions(
    # Input for V2GetMosaicVersion.
    input: GetMosaicVersionInput!): ListVersionResponse!

  # A Microsoft SQL Availability Group.
  mssqlAvailabilityGroup(
    # The Rubrik UUID for the object.
    fid: UUID!): MssqlAvailabilityGroup!

  # Returns all compatible instances for export for the specified recovery time.
  mssqlCompatibleInstances(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Input for V1GetCompatibleMssqlInstancesV1.
    input: GetCompatibleMssqlInstancesV1Input!,

    # Sort by argument for MSSQL compatible instances.
    sortBy: MssqlCompatibleInstancesSortByInput,

    # Filters for MSSQL compatible instances.
    filters: [MssqlCompatibleInstancesFilterInput!]): MssqlInstanceSummaryListResponse!

  # A Microsoft SQL Database.
  mssqlDatabase(
    # The Rubrik UUID for the object.
    fid: UUID!): MssqlDatabase!

  # Paginated list of Microsoft SQL Database live mounts.
  mssqlDatabaseLiveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort by argument for Mssql database live mounts.
    sortBy: MssqlDatabaseLiveMountSortByInput,

    # Filters for Mssql database live mounts.
    filters: [MssqlDatabaseLiveMountFilterInput!]): MssqlDatabaseLiveMountConnection!

  # List of missed recoverable ranges for a Microsoft SQL Database.
  mssqlDatabaseMissedRecoverableRanges(
    # Input for V1GetMssqlDbMissedRecoverableRanges.
    input: GetMssqlDbMissedRecoverableRangesInput!): MssqlMissedRecoverableRangeListResponse!

  # List of missed snapshots for a Microsoft SQL Database.
  mssqlDatabaseMissedSnapshots(
    # Input for V1GetMissedMssqlDbSnapshots.
    input: GetMissedMssqlDbSnapshotsInput!): MissedSnapshotListResponse!

  # Returns a size estimate for a restore, export, or mount.
  mssqlDatabaseRestoreEstimate(
    # Input for V1MssqlRestoreEstimateV1.
    input: MssqlRestoreEstimateV1Input!): MssqlRestoreEstimateResult!

  # Paginated list of Microsoft SQL Databases.
  mssqlDatabases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): MssqlDatabaseConnection!

  # The current default properties for Microsoft SQL databases.
  mssqlDefaultProperties(
    # Input for V1GetDefaultDbPropertiesV1.
    input: GetDefaultDbPropertiesV1Input!): UpdateMssqlDefaultPropertiesReply! @deprecated(reason: "Use mssqlDefaultPropertiesOnCluster instead.")

  # The current default properties for Microsoft SQL databases.
  mssqlDefaultPropertiesOnCluster(
    # Specifies input for MssqlDefaultPropertiesWithMssqlObjectIdArg, including a Microsoft SQL object ID.
    input: ClusterUuidWithMssqlObjectIdInput!): MssqlDefaultPropertiesOnClusterReply!

  # A Microsoft SQL Instance.
  mssqlInstance(
    # The Rubrik UUID for the object.
    fid: UUID!): MssqlInstance!

  # List of filtered Microsoft SQL log shipping targets.
  mssqlLogShippingTargets(
    # Input for V2QueryLogShippingConfigurationsV2.
    input: QueryLogShippingConfigurationsV2Input!): MssqlLogShippingSummaryV2ListResponse

  # List of recoverable ranges for a Microsoft SQL Database.
  mssqlRecoverableRanges(
    # Input for V1GetMssqlDbRecoverableRanges.
    input: GetMssqlDbRecoverableRangesInput!): MssqlRecoverableRangeListResponse!

  # Paginated list of the highest-level Microsoft SQL Objects accessible by the current user.
  mssqlTopLevelDescendants(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): MssqlTopLevelDescendantTypeConnection!

  # A NAS Fileset.
  nasFileset(
    # The Rubrik UUID for the object.
    fid: UUID!): NasFileset!

  # A NAS Namespace.
  nasNamespace(
    # The Rubrik UUID for the object.
    fid: UUID!): NasNamespace!

  # Paginated list of NAS Namespaces.
  nasNamespaces(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): NasNamespaceConnection!

  # A NAS Share.
  nasShare(
    # The Rubrik UUID for the object.
    fid: UUID!): NasShare!

  # A NAS System.
  nasSystem(
    # The Rubrik UUID for the object.
    fid: UUID!): NasSystem!

  # Paginated list of NAS Systems.
  nasSystems(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): NasSystemConnection!

  # Paginated list of the highest-level NAS Objects accessible by the current user.
  nasTopLevelDescendants(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): CdmHierarchyObjectConnection!

  # A NAS Volume.
  nasVolume(
    # The Rubrik UUID for the object.
    fid: UUID!): NasVolume!

  # NAS Cloud Direct back-end capacity for the requested clusters.
  ncdBackEndCapacity(
    # List of Rubrik clusters to filter.
    clusters: [UUID!]!): NcdBackEndCapacity

  # NAS Cloud Direct front-end capacity for the requested clusters.
  ncdFrontEndCapacity(
    # List of Rubrik clusters to filter.
    clusters: [UUID!]!): NcdFrontEndCapacity

  # NAS Cloud Direct object protection status for the requested clusters.
  ncdObjectProtectionStatus(
    # List of Rubrik clusters to filter.
    clusters: [UUID!]!): NcdObjectProtectionStatus

  # NAS Cloud Direct virtual machine image download URL.
  ncdVmImageUrl(
    # Input for getting NAS Cloud Direct virtual machine image download URL.
    input: VmImageUrlInput!): NcdVmImageUrl!

  # Network Throttle Information.
  networkThrottle(
    # Input for InternalQueryNetworkThrottle.
    input: QueryNetworkThrottleInput!): NetworkThrottleSummaryListResponse!

  # Results for Non-Filesystem Anomaly Investigations.
  nfAnomalyResults(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort non-filesystem anomaly results by field.
    sortBy: NfAnomalyResultSortBy,

    # Filter non-filesystem anomaly results by input.
    filter: NfAnomalyResultFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): NfAnomalyResultConnection!

  # Results for Non-Filesystem Anomaly Investigations grouped by an argument.
  nfAnomalyResultsGrouped(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Group non-filesystem anomaly results by field.
    groupBy: NfAnomalyResultGroupBy!,

    # Filter non-filesystem anomaly results by input.
    filter: NfAnomalyResultFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): NfAnomalyResultGroupedDataConnection!

  # Check if the running node-removal job is cancelable.
  nodeRemovalCancelPermission(
    # Input for checking if the running node removal job is cancelable.
    input: NodeRemovalCancelPermissionInput!): NodeRemovalCancelPermissionReply!

  # The ID of the Rubrik cluster node to replace.
  nodeToReplace(
    # Input for getting the ID of the node to replace on a Rubrik cluster.
    input: NodeToReplaceInput!): NodeToReplaceReply!

  # v5.0-v8.0: Lists all files in VM snapshot
  # v8.1+: Lists all files in virtual machine snapshot
  # 
  # Supported in v5.0+
  # Lists all files and directories in a given path.
  nutanixBrowseSnapshot(
    # Input for InternalBrowseNutanixSnapshot.
    input: BrowseNutanixSnapshotInput!): BrowseResponseListResponse!

  # Details of the given category.
  nutanixCategory(
    # The Rubrik UUID for the object.
    fid: UUID!): NutanixCategory!

  # Details of the given category value.
  nutanixCategoryValue(
    # The Rubrik UUID for the object.
    fid: UUID!): NutanixCategoryValue!

  # A Nutanix Cluster.
  nutanixCluster(
    # The Rubrik UUID for the object.
    fid: UUID!): NutanixCluster!

  # Get Nutanix cluster async request
  # 
  # Supported in v5.0+
  # Get details about a Nutanix cluster-related async request.
  nutanixClusterAsyncRequestStatus(
    # Input for InternalGetNutanixClusterAsyncRequestStatus.
    input: GetNutanixClusterAsyncRequestStatusInput!): AsyncRequestStatus!

  # Get list of containers on this cluster
  # 
  # Supported in v5.0+
  # Query the nutanix cluster to get the list of containers, used for export purposes.
  nutanixClusterContainers(
    # Input for InternalGetContainers.
    input: GetContainersInput!): NutanixContainerListResponse!

  # Get list of networks on this cluster
  # 
  # Supported in v8.1+
  # Retrieves the list of networks by querying the Nutanix cluster. The list of networks is used for restore purposes.
  nutanixClusterNetworks(
    # Input for V1GetNutanixNetworks.
    input: GetNutanixNetworksInput!): NutanixNetworkListResponse!

  # Paginated list of Nutanix Clusters.
  nutanixClusters(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): NutanixClusterConnection!

  # Nutanix Live Mount Connection.
  nutanixMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for Nutanix virtual machine live mounts.
    filters: [NutanixLiveMountFilterInput!],

    # Sort by argument for Nutanix virtual machine live mounts.
    sortBy: NutanixLiveMountSortByInput): NutanixLiveMountConnection!

  # Details of the given Prism Central.
  nutanixPrismCentral(
    # The Rubrik UUID for the object.
    fid: UUID!): NutanixPrismCentral!

  # Paginated list of Nutanix Prism Central objects.
  nutanixPrismCentrals(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): NutanixPrismCentralConnection!

  # Supported in v5.0+. Get Nutanix virtual machine snapshot details.
  # Retrieve detailed information about a snapshot.
  nutanixSnapshotDetail(
    # Input for InternalGetNutanixSnapshot.
    input: GetNutanixSnapshotDetailInput!): NutanixVmSnapshotDetail!

  # Paginated list of the highest-level Nutanix Objects accessible by the current user.
  nutanixTopLevelDescendants(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): CdmHierarchyObjectConnection!

  # A Nutanix Virtual Machine.
  nutanixVm(
    # The Rubrik UUID for the object.
    fid: UUID!): NutanixVm!

  # v5.0-v8.0: Get VM async request details
  # v8.1+: Get virtual machine async request details
  # 
  # Supported in v5.0+
  # v5.0-v8.0: Get details about a Nutanix VM-related async request.
  # v8.1+: Get details about a Nutanix virtual machine-related async request.
  nutanixVmAsyncRequestStatus(
    # Input for InternalGetNutanixVmAsyncRequestStatus.
    input: GetNutanixVmAsyncRequestStatusInput!): AsyncRequestStatus!

  # v5.0-v8.0: Get details about missed snapshots for a VM
  # v8.1+: Get details about missed snapshots for a virtual machine
  # 
  # Supported in v5.0+
  # v5.0-v8.0: Retrieve the time of the day when the snapshots were missed specific to a vm.
  # v8.1+: Retrieve the time of the day when the snapshots were missed specific to a virtual machine.
  nutanixVmMissedSnapshots(
    # Input for InternalNutanixMissedSnapshots.
    input: NutanixMissedSnapshotsInput!): MissedSnapshotListResponse!

  # Paginated list of Nutanix Virtual Machines.
  nutanixVms(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): NutanixVmConnection!

  # Details of the Exchange calendar pertaining to the snappable ID.
  o365Calendar(
    # The fid for the workload.
    snappableFid: UUID!): O365Calendar!

  # List of O365 Groups in the O365Org.
  o365Groups(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The fid for the O365 organization.
    o365OrgId: UUID!, snappableType: SnappableType!): O365GroupConnection!

  # Retrieve o365 licence details.
  o365License: O365License!

  # Details for the Exchange mailbox corresponding to the snappable ID.
  o365Mailbox(
    # The fid for the workload.
    snappableFid: UUID!): O365Mailbox!

  # List of Mailboxes in the O365Org.
  o365Mailboxes(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The fid for the O365 organization.
    o365OrgId: UUID!): O365MailboxConnection!
  o365ObjectAncestors(
    # The fid for the workload.
    snappableFid: UUID!): GetImplicitlyAuthorizedAncestorSummariesResponse!

  # Details for the OneDrive corresponding to the snappable ID.
  o365Onedrive(
    # The fid for the workload.
    snappableFid: UUID!): O365Onedrive!

  # List of Onedrives in the O365Org.
  o365Onedrives(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The fid for the O365 organization.
    o365OrgId: UUID!): O365OnedriveConnection!

  # Details of the O365Org.
  o365Org(
    # The Rubrik UUID for the object.
    fid: UUID!): O365Org!

  # Details of the O365Org at snappable level, given the snappable type.
  o365OrgAtSnappableLevel(
    # The Rubrik UUID for the object.
    fid: UUID!, snappableType: SnappableType!): O365Org!
  o365OrgSummaries: GetImplicitlyAuthorizedObjectSummariesResponse!

  # All O365 orgs for the account.
  o365Orgs(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): O365OrgConnection!

  # Gets the service account for the given org.
  o365ServiceAccount(
    # Org UUID.
    orgId: UUID!): O365ServiceAccountStatusResp!

  # Returns the service status of the O365 service running on MSFT server.
  o365ServiceStatus(
    # Optional org UUID.
    orgID: UUID): GetO365ServiceStatusResp!

  # Details for the SharePoint drive corresponding to the snappable ID.
  o365SharepointDrive(
    # The fid for the workload.
    snappableFid: UUID!): O365SharepointDrive!

  # List of sharepoint drives (document libraries) in the O365Org.
  o365SharepointDrives(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The fid for the O365 organization.
    o365OrgId: UUID!): O365SharepointDriveConnection!

  # Details for the SharePoint list corresponding to the snappable ID.
  o365SharepointList(
    # The fid for the workload.
    snappableFid: UUID!): O365SharepointList!

  # Paginated list of sharepoint lists in the O365Org.
  o365SharepointLists(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The fid for the O365 organization.
    o365OrgId: UUID!): O365SharepointListConnection!

  # Returns the sharepoint objects after filtering on the object types and includeEntireHierarchy.
  o365SharepointObjectList(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # Types of objects to include.
    objectTypeFilter: [String!],

    # If true, the entire hierarchy will be searched.
    includeEntireHierarchy: Boolean!,

    # The Rubrik UUID for the object.
    fid: UUID!): O365SharepointObjectConnection!
  o365SharepointObjects(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The Rubrik UUID for the object.
    fid: UUID!): O365SharepointObjectConnection! @deprecated(reason: "This is deprecated as it was tied to the specific object type. Use o365SharepointObjectList instead.")

  # Details for the SharePoint site corresponding to the site ID.
  o365SharepointSite(
    # The fid for the site.
    siteFid: UUID!): O365Site!

  # Paginated list of sharepoint sites in the O365Org.
  o365SharepointSites(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The fid for the O365 organization.
    o365OrgId: UUID!): O365SiteConnection!

  # Details for the SharePoint site corresponding to the snappable ID.
  o365Site(
    # The fid for the workload.
    snappableFid: UUID!): O365Site!

  # List of sites in the O365Org.
  o365Sites(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The fid for the O365 organization.
    o365OrgId: UUID!,

    # If true, nested children sites will be excluded from the results.
    excludeChildSites: Boolean): O365SiteConnection!

  # Returns the storage stats of an O365 org.
  o365StorageStats(
    # Optional org UUID.
    orgID: UUID): GetO365StorageStatsResp!

  # Details for the team corresponding to the snappable ID.
  o365Team(
    # The fid for the workload.
    snappableFid: UUID!): O365Teams!

  # List of Channels for the O365Team.
  o365TeamChannels(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!, excludeArchived: Boolean!,

    # Filter on channel membership type.
    channelMembershipTypeFilter: ChannelMembershipType!, nameFilter: String): O365TeamsChannelConnection!

  # ID for the conversations folder in the Team's Group Mailbox.
  o365TeamConversationsFolderID(
    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!,

    # The fid for the O365 organization.
    o365OrgId: UUID!): String!

  # Users who have posted in a team.
  o365TeamPostedBy(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The fid for the O365 organization.
    o365OrgId: UUID!, nameFilter: String): O365TeamConversationsSenderConnection!

  # List of O365 Teams in the O365Org.
  o365Teams(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The fid for the O365 organization.
    o365OrgId: UUID!): O365TeamsConnection!

  # Details for the O365 user corresponding to the ID.
  o365User(
    # The Rubrik UUID for the object.
    fid: UUID!): O365User!

  # Name, id, object type, and mail address of user descendant object.
  o365UserObjects(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # The Rubrik UUID for the object.
    fid: UUID!): O365UserDescendantMetadataConnection!

  # Reply for request to download Rubrik Edge from Rubrik Security Cloud.
  oauthCodesForEdgeReg(
    # Input to enter the number of Rubrik Edge installations.
    numberOfEdges: Int!,

    # Input to enter the Rubrik CDM virtual cluster OVA package link.
    cdmOvaLink: String!): OauthCodesForEdgeRegReply!
  objectFiles(filter: ListObjectFilesFiltersInput, sort: FileResultSortInput,

    # Day in the format (YYYY-MM-DD).
    day: String!, timezone: String!,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): FileResultConnection!

  # Returns total sensitive hits grouped by object type and also gives policy level breakdown for each object type.
  objectTypeAccessSummary(
    # Date for which the results will be retrieved.
    timelineDate: String!,

    # Historical days to go backward in time to calculate the delta.
    historicalDeltaDays: Int! = 0,

    # Specifies whether whitelisted results should be included.
    includeWhitelistedResults: Boolean,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter for object type summary.
    filter: ObjectTypeSummariesFilter,

    # Field on which to perform the sorting operation.
    sort: ObjectTypeAccessSummarySortBy,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): ObjectTypeAccessSummaryConnection!

  # Link to download the Advanced Recovery Options example file
  # 
  # Supported in v5.3+
  # Link to download the Advanced Recovery Options example file which can be used to customize Oracle recoveries.
  oracleAcoExampleDownloadLink(
    # Specifies input for V1GetExampleAcoDownloadLink including the Oracle database ID.
    input: ClusterUuidWithDbIdInput!): OracleFileDownloadLink!

  # List of supported Advanced Cloning Options
  # 
  # Supported in v6.0+
  # Get the list of supported Advanced Cloning Options (ACO) parameters.
  oracleAcoParameters(
    # Specifies input for V1GetAcoParameterList including the Oracle database ID.
    input: ClusterUuidWithDbIdInput!): OracleAcoParameterList!

  # An Oracle Data Guard Group.
  oracleDataGuardGroup(
    # The Rubrik UUID for the object.
    fid: UUID!): OracleDataGuardGroup!

  # An Oracle Database.
  oracleDatabase(
    # The Rubrik UUID for the object.
    fid: UUID!): OracleDatabase!

  # Get Oracle database async request details
  # 
  # Supported in v5.0+
  # Retrieve the task object for a specified Oracle database asynchronous request.
  oracleDatabaseAsyncRequestDetails(
    # Input for InternalGetOracleAsyncRequestStatus.
    input: GetOracleAsyncRequestStatusInput!): AsyncRequestStatus!

  # Oracle log backup configuration for an Oracle Database.
  oracleDatabaseLogBackupConfig(
    # Input for V1GetOracleDbV1.
    input: OracleDbInput!): OracleLogBackupConfig!

  # Paginated list of Oracle Databases.
  oracleDatabases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): OracleDatabaseConnection!

  # An Oracle Host.
  oracleHost(
    # The Rubrik UUID for the object.
    fid: UUID!): OracleHost!

  # Oracle Log backup configuration for Oracle Host.
  oracleHostLogBackupConfig(
    # Input for InternalGetOracleHost.
    input: OracleHostInput!): OracleLogBackupConfig!

  # Paginated list of Oracle Live Mounts.
  oracleLiveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for Oracle live mounts.
    filters: [OracleLiveMountFilterInput!],

    # Sort by argument for Oracle live mounts.
    sortBy: OracleLiveMountSortBy): OracleLiveMountConnection!

  # Get missed recoverable ranges of a Oracle database
  # 
  # Supported in v5.0+
  # Retrieve a list of missed recoverable ranges for a Oracle database. For each run of one type of error, the first and last occurrence of the error are given.
  oracleMissedRecoverableRanges(
    # Input for InternalGetOracleDbMissedRecoverableRanges.
    input: GetOracleDbMissedRecoverableRangesInput!): OracleMissedRecoverableRangeListResponse!

  # Get missed snapshots for an Oracle database
  # 
  # Supported in v5.0+
  # Retrieve summary information about the missed snapshots of an Oracle database.
  oracleMissedSnapshots(
    # Input for InternalGetMissedOracleDbSnapshots.
    input: GetMissedOracleDbSnapshotsInput!): MissedSnapshotListResponse!

  # Get PDB details
  # 
  # Supported in v8.0+
  # Retrieves information about available pluggable databases (PDBs) for a given recovery point.
  oraclePdbDetails(
    # Input for V1GetOraclePdbDetails.
    input: OraclePdbDetailsInput!): OraclePdbDetails!

  # An Oracle Real Application Cluster.
  oracleRac(
    # The Rubrik UUID for the object.
    fid: UUID!): OracleRac!

  # Oracle log backup configuration for an Oracle RAC.
  oracleRacLogBackupConfig(
    # Input for InternalGetOracleRac.
    input: OracleRacInput!): OracleLogBackupConfig!

  # Get recoverable ranges of a Oracle database
  # 
  # Supported in v5.0+
  # Retrieve the recoverable ranges for a specified Oracle database. A begin and/or end timestamp can be provided to retrieve only the ranges that fall within the window.
  oracleRecoverableRanges(
    # Input for InternalGetOracleDbRecoverableRanges.
    input: GetOracleDbRecoverableRangesInput!): OracleRecoverableRangeListResponse!

  # Paginated list of the highest-level Oracle Objects accessible by the current user.
  oracleTopLevelDescendants(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): OracleTopLevelDescendantTypeConnection!

  # Org details of the given org ID.
  org(
    # The org ID of the organization.
    orgId: String!): Org!

  # Organization security policy.
  orgSecurityPolicy: OrgSecurityPolicy!

  # All orgs.
  orgs(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field in the org to sort orgs by.
    sortBy: OrgField = NAME,

    # Name to filter the results.
    nameFilter: String,

    # Filter orgs by the status of MFA enforcement. When the field is not used, all orgs are returned. When the field is set to true, only orgs that have MFA enforced are returned. When the field is set to false, only orgs that do not have MFA enforced are returned.
    mfaEnforcedFilter: Boolean): OrgConnection!

  # Returns the list of organizations to which the principal has access.
  orgsForPrincipal(
    # Filter organizations by name.
    orgSearchFilter: String): OrgsForPrincipalReply!

  # Overall ransomware investigation summary.
  overallRansomwareInvestigationSummary(
    # The number of hours in the past from the time of request for which the summary is retrieved.
    historyNumHours: Int!): OverallRansomwareInvestigationSummary!

  # Get the password policy for the current organization.
  passwordComplexityPolicy: PasswordComplexityPolicy!
  pendingAction(pendingActionId: String!): pendingAction!

  # Retrieve Phoenix rollout progress.
  phoenixRolloutProgress(
    # Org UUID.
    orgId: UUID!): PhoenixRolloutProgress!
  physicalHost(
    # The Rubrik UUID for the object.
    fid: UUID!): PhysicalHost!

  # Get list of physical hosts.
  physicalHosts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!],

    # Host root type.
    hostRoot: HostRoot!,

    # Bulk policy assignment request.
    isBulkPolicyAssignmentFlow: Boolean): PhysicalHostConnection!

  # Get the health metric for the radar pipeline covering the backup, indexing, and analysis jobs.
  pipelineHealthForTimeRange(
    # Filters results that started after this time.
    beginTime: DateTime!,

    # Filters results that started before this time.
    endTime: DateTime): GetPipelineHealthReply!
  polarisInventorySubHierarchyRoot(rootEnum: InventorySubHierarchyRootEnum!): PolarisInventorySubHierarchyRoot!

  # Returns the RSC snapshot according to ID.
  polarisSnapshot(
    # Snapshot persistent UUID in RSC.
    snapshotFid: UUID!): PolarisSnapshot!

  # Returns active policies for an account.
  policies(policyObjectFilter: PolicyObjectFilter,

    # Excludes hierarchy object IDs for each policy.
    excludeHierarchyObjectList: Boolean): ClassificationPolicyDetailConnection!

  # Returns detailed policy information.
  policy(policyId: String!,

    # Types of workloads used for filtering the query results.
    workloadTypes: [DataGovObjectType!],

    # Name of the column to sort result by.
    sortBy: PolicyDetailsSortBy,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # List of Rubrik clusters for filtering results.
    clusterIdsFilter: [String!],

    # List of replication types for filtering results.
    replicationFilter: [String!],

    # Object name to search.
    searchObjectName: String,

    # Hierarchy ancestor ID.
    hierarchyAncestorIdFilter: String,

    # Specifies whether the policy assignment type is direct or inherited.
    policyAssignmentType: PolicyAssignmentType,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): ClassificationPolicyDetail!

  # Returns active policies for an account.
  policyDetails: PolicyDetailConnection!

  # Returns details for one policy object.
  policyObj(snappableFid: String!, snapshotFid: String!,

    # Specifies whether whitelisted results should be included.
    includeWhitelistedResults: Boolean): PolicyObj!

  # Returns the policies assigned to each object.
  policyObjectUsages(objectIds: [String!]! = []): PolicyObjectUsageConnection!

  # Returns status for all objects at a specified timestamp.
  policyObjs(
    # Day in the format (YYYY-MM-DD).
    day: String!, timezone: String!,

    # Types of workloads that can be used for filtering query results.
    workloadTypes: [DataGovObjectType!]! = [],

    # Name of the column to sort result by.
    sortBy: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # List of analysis statuses used for filtering results.
    analysisStatusesFilter: [AnalysisStatus!],

    # List of policies used for filtering results.
    policyIdsFilter: [String!],

    # List of risk levels used for filtering results.
    riskLevelsFilter: [RiskLevelType!],

    # List of Rubrik clusters for filtering results.
    clusterIdsFilter: [String!],

    # Object name to search.
    searchObjectName: String,

    # List of subscriptions for filtering results.
    subscriptionIdsFilter: [String!],

    # Specifies whether whitelisted results should be included.
    includeWhitelistedResults: Boolean,

    # Filter for the given list of security identifiers.
    sids: [String!],

    # Filter objects with insights metadata ID.
    insightsMetadataId: String,

    # Specifies whether to include the insights marker.
    includeInsightsMarker: Boolean,

    # Filter objects with user access enabled.
    userAccessObjectsFilter: Boolean! = false,

    # Object IDs to filter.
    objectIdsFilter: [String!],

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): PolicyObjConnection!

  # Gets status of last prechecks job.
  prechecksStatus(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): PrechecksStatusReply!

  # Get status of last completed prechecks Job along with details of currently running/scheduled next prechecks Job.
  prechecksStatusWithNextJobInfo(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): PrechecksStatusReply!

  # Get the number of workloads that have passed through the Radar pipeline in the past 24 hours.
  processedRansomwareInvestigationWorkloadCount: ProcessedRansomwareInvestigationWorkloadCountReply!

  # A product documentation.
  productDocumentation(
    # The product documentation ID.
    id: String!): ProductDocumentation!

  # List of all objects protected by the SLA Domains.
  protectedObjectsConnection(
    # Forever UUID of the object root. The value of  `none` represents the global hierarchy root.
    rootOptionalFid: UUID,

    # A list of SLA Domain IDs.
    slaIds: [UUID!]!,

    # The hierarchy object filter.
    filter: [Filter!],

    # Types of objects to include.
    objectTypeFilter: [String!],

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): ProtectedObjectsConnection!

  # Total number of protected volumes across all hosts.
  protectedVolumesCount(
    # The hierarchy object filter.
    filter: [Filter!]): Int!

  # Query datastore threshold configurations.
  queryDatastoreFreespaceThresholds(
    # Datastore freespace thresholds query.
    queryDatastoreFreespaceThresholdsInput: [QueryDatastoreFreespaceThresholdInput!]!): QueryDatastoreFreespaceThresholdsReply!
  radarClusterConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter by cluster.
    filter: ClusterFilterInput,

    # Cluster sort order.
    sortOrder: SortOrder = DESC,

    # Sort clusters by field.
    sortBy: ClusterSortByEnum = ClusterType): ClusterConnection!

  # Get the list of workload locations on which Ransomware Investigation has run.
  ransomwareDetectionWorkloadLocations(
    # Filter only locations that processed workloads after this time.
    beginTime: DateTime!,

    # Filter only locations that processed workloads before this time.
    endTime: DateTime,

    # Specifies whether to return only the locations having anomalous entities or all locations.
    returnOnlyForAnomalousEntities: Boolean!): ListLocationsReply!

  # Get a per day summary of the radar analysis results from start day to end day.
  ransomwareInvestigationAnalysisSummary(
    # Start day, formatted(ISO 8601) as YYYY-MM-DD.
    startDay: String!,

    # End day, formatted(ISO 8601) as YYYY-MM-DD.
    endDay: String!,

    # Deprecated timezone field that will not be used. All results are in UTC.
    timezone: String!,

    # Optional list of object types to filter by. Should be of type ManagedObjectType.
    objectTypeFilter: [String!],

    # Optional list of Rubrik cluster UUIDs to filter by.
    clusterUuidFilter: [String!],

    # Optional list of SLA Domain FIDs to filter by.
    slaFidFilter: [String!],

    # Do not include the suspicious byte count or suspicious file count of non anomalous snapshots.
    hideSuspiciousDataIfNonAnomalous: Boolean): RansomwareInvestigationAnalysisSummaryReply!

  # Get the enablement status of entities on which Ransomware Monitoring can be enabled.
  ransomwareInvestigationEnablement: RansomwareInvestigationEnablementReply!

  # Result of the Ransomware Investigation.
  ransomwareResult(
    # The Rubrik cluster ID.
    clusterUuid: UUID!,

    # Workload managed ID.
    managedId: String!,

    # Corresponds to snapshot ID in Rubrik CDM tables.
    snapshotId: String!): RansomwareResult!

  # Optional result of the Ransomware Investigation.
  ransomwareResultOpt(
    # The Rubrik cluster ID.
    clusterUuid: UUID!,

    # Workload managed ID.
    managedId: String!,

    # Corresponds to snapshot ID in Rubrik CDM tables.
    snapshotId: String!): RansomwareResult

  # Results for Ransomware Investigations.
  ransomwareResults(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort ransomware results by field.
    sortBy: RansomwareResultSortBy,

    # Filter ransomware results by input.
    filter: RansomwareResultFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): RansomwareResultConnection!

  # Results for the Ransomware Investigations grouped by an argument.
  ransomwareResultsGrouped(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Group ransomware results by field.
    groupBy: RansomwareResultGroupBy!,

    # Filter ransomware results by input.
    filter: RansomwareResultFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): RansomwareResultGroupedDataConnection!

  # RCS Azure archival location consumption stats.
  rcsArchivalLocationsConsumptionStats(
    # Request for fetching consumption stats for multiple rcs Azure locations.
    rcsAzureTargetConsumptionStatsRequest: RcsConsumptionStatsInput!): RcsAzureArchivalLocationsConsumptionStatsOutput!

  # Rubrik Cloud Vault (RCV) Account entitlement details.
  rcvAccountEntitlement: RcvAccountEntitlement!

  # Details of the RDS Instance in the AWS Native account.
  rdsInstanceDetailsFromAws(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!,

    # Name of the RDS DB Instance
    rdsInstanceName: String!,

    # The Rubrik ID for the AWS RDS database.
    rdsDatabaseRubrikId: UUID): RdsInstanceDetailsFromAws!

  # Get a time series of total incoming bandwidth to the replication clusters.
  replicationIncomingStats(
    # Input for InternalReplicationBandwidthIncoming.
    input: ReplicationBandwidthIncomingInput!): InternalReplicationBandwidthIncomingResponse!

  # Get the time series of total outgoing bandwidth from the replication clusters.
  replicationOutgoingStats(
    # Input for InternalReplicationBandwidthOutgoing.
    input: ReplicationBandwidthOutgoingInput!): InternalReplicationBandwidthOutgoingResponse!

  # List of all replication pair Rubrik clusters.
  replicationPairs(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Field to sort by for replication pairs.
    sortBy: ReplicationPairsQuerySortByField,

    # Sort order.
    sortOrder: SortOrder,

    # Filter for replication pairs query.
    filter: ReplicationPairsQueryFilter): ReplicationPairConnection!
  reportData(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String, dataView: DataViewTypeEnum!,

    # A list of columns to include in the result. It can be omitted when
    # requesting aggregations, and server will derive columns by
    # concatenating groupBy and aggregation arguments.
    # 
    columns: [String!]!,

    # A list of filters to filter result with
    filters: [ReportFilterInput!],

    # A list of the names of the columns to group result by, it must be
    # used in conjunction of aggregations.
    # 
    groupBy: [String!],

    # SecondaryGroupBy used for when groupBy values need to be pivoted.
    # 
    secondaryGroupBy: String,

    # A list of aggregations to apply to the grouped rows, it must be used
    # in conjunction with groupBy arg (except for count(*)). Supported
    # aggregations are:
    # hour, day, week, month, year for datetime columns
    # sum, avg for integer columns
    # count(*)
    # 
    aggregations: [String!],

    # Name of the column to sort result by
    sortBy: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The timezone to be used in the results.
    timezone: String): RowConnection!

  # The list of available role templates.
  roleTemplates(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Name to filter the results.
    nameFilter: String): RoleTemplateConnection!

  # Retrieves the versioning and object ACL state of the Amazon S3 bucket, which is required to initiate the recovery process.
  s3BucketStateForRecovery(
    # Name of the AWS S3 bucket.
    bucketName: String!,

    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!): GetS3BucketStateForRecoveryReply!

  # Details of a SAP HANA database for a given FID.
  sapHanaDatabase(
    # The Rubrik UUID for the object.
    fid: UUID!): SapHanaDatabase!

  # Connection of filtered SAP HANA databases based on specific filters.
  sapHanaDatabases(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): SapHanaDatabaseConnection!

  # Details of a SAP HANA log snapshot for a given FID.
  sapHanaLogSnapshot(
    # The Rubrik UUID for the object.
    fid: UUID!): SapHanaLogSnapshot!

  # Connection of all log snapshots for SAP HANA.
  sapHanaLogSnapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field to sort SAP HANA log snapshots.
    sortBy: SapHanaLogSnapshotSortBy,

    # Field to filter SAP HANA log snapshots.
    filter: SapHanaLogSnapshotFilterInput): SapHanaLogSnapshotConnection!

  # Details of a SAP HANA recoverable range for a given FID.
  sapHanaRecoverableRange(
    # The Rubrik UUID for the object.
    fid: UUID!): SapHanaRecoverableRange!

  # Connection of all recoverable ranges for SAP HANA.
  sapHanaRecoverableRanges(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field to sort SAP HANA recoverable ranges.
    sortBy: SapHanaRecoverableRangeSortBy,

    # Field to filter SAP HANA recoverable ranges.
    filter: SapHanaRecoverableRangeFilterInput): SapHanaRecoverableRangeConnection!

  # Details of a SAP HANA system for a given FID.
  sapHanaSystem(
    # The Rubrik UUID for the object.
    fid: UUID!): SapHanaSystem!

  # Connection of filtered SAP HANA systems based on specific filters.
  sapHanaSystems(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): SapHanaSystemConnection!

  # Retrieve details of a scheduled report.
  scheduledReport(id: Int!): ScheduledReport

  # Retrieve details of scheduled reports. If the reportId is None, return schedules of all reports. Otherwise, return the schedules of reportId.
  scheduledReports(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter report schedules.
    filter: ScheduledReportFilterInput): ScheduledReportConnection!

  # Search for azureAdObjects in a snapshot.
  searchAzureAdSnapshot(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Input for searching for Azure AD objects in a snapshot.
    input: SearchAzureAdSnapshotInput!): AzureAdObjectConnection!

  # Search file under given folder and with given prefix.
  searchFileByPrefix(
    # The Rubrik cluster ID.
    clusterUuid: UUID!,

    # Workload managed ID.
    managedId: String!,

    # Corresponds to snapshot ID in Rubrik CDM tables.
    snapshotId: String!,

    # Root path to search file inside FMD.
    searchFolderPath: String!,

    # Filename prefix that should match.
    filenamePrefix: String!): DiffResult!
  searchHost(
    # ID of the host to search.
    id: String!,

    # The path query. Either path prefix or filename prefix.
    path: String!): SearchResponseListResponse!

  # v5.0-v8.0: Search for file in Nutanix VM
  # v8.1+: Search for file in Nutanix virtual machine
  # 
  # Supported in v5.0+
  # Search for a file within the Nutanix Virtual Machine. Search via full path prefix or filename prefix.
  searchNutanixVm(
    # Input for InternalSearchNutanixVm.
    input: SearchNutanixVmInput!): SearchResponseListResponse!
  searchSnappableConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort workloads by field.
    sortBy: SnappableSortByEnum = Name,

    # Filter workloads by input (with search by name).
    filter: SnappableFilterInputWithSearch): SnappableConnection!
  searchSnappableVersionedFiles(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String, snappableFid: UUID!, searchQuery: String!): VersionedFileConnection!

  # Browse service accounts.
  serviceAccounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Service account argument to sort by.
    sortBy: ServiceAccountSortBy,

    # Search for a service account.
    searchText: String,

    # Assigned role IDs for service account.
    roleIds: [UUID!]): ServiceAccountConnection!

  # Information about a NAS share fileset.
  shareFileset(
    # The Rubrik UUID for the object.
    fid: UUID!): ShareFileset!

  # Browse site and descendants objects.
  sharepointSiteDescendants(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the site.
    siteFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!,

    # The natural ID of SharePoint object.
    naturalId: String,

    # The filter for site search.
    sharepointSiteSearchFilter: SharePointSearchFilter,

    # Org UUID.
    orgId: UUID!): O365FullSpObjectConnection!

  # Search site and descendant objects.
  sharepointSiteSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the site.
    siteFid: UUID!,

    # Org UUID.
    orgId: UUID!,

    # The filter for site search.
    sharepointSiteSearchFilter: SharePointSearchFilter): O365FullSpObjectConnection!

  # List of audit details for a given SLA Domain.
  slaAuditDetail(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # SLA Domain ID for global SLA Domains and internal ID for SLA Domains created on Rubrik clusters.
    SlaId: UUID!,

    # Filter for SLA Domain Audit details.
    filter: [SLAAuditDetailFilterInput!],

    # Timezone.
    timezone: String): [SlaAuditDetail!]!

  # Conflicting objects for an SLA Domain assignment.
  slaConflictObjects(
    # The Rubrik UUIDs for the objects.
    fids: [UUID!]!): [HierarchyObject!]!

  # Query that retrieves an SLA Domain.
  slaDomain(
    # SLA Domain ID.
    id: UUID!,

    # Specifies whether to show the SLA Domain sync status on Rubrik CDM.
    shouldShowSyncStatus: Boolean = false,

    # Specifies whether to show the upgrade information for an SLA Domain.
    shouldShowUpgradeInfo: Boolean = false,

    # Specifies whether to show the Rubrik clusters where this SLA Domain is paused.
    shouldShowPausedClusters: Boolean = false): SlaDomain!

  # Retrieves a list of SLA Domains.
  slaDomains(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Field to sort the SLA Domains list.
    sortBy: SlaQuerySortByField,

    # Sort order for sorting the SLA Domains returned by the query.
    sortOrder: SortOrder,

    # Filter for the SLA Domain query.
    filter: [GlobalSlaFilterInput!],

    # Specifies the context filter to use.
    contextFilter: ContextFilterTypeEnum,

    # Specifies the context filter input to use.
    contextFilterInput: [ContextFilterInputField!],

    # Specifies whether to show the SLA Domain sync status on Rubrik CDM.
    shouldShowSyncStatus: Boolean = false,

    # Specifies whether to show the number of workloads protected by the SLA Domain.
    shouldShowProtectedObjectCount: Boolean = false,

    # Specifies whether to show the upgrade information for an SLA Domain.
    shouldShowUpgradeInfo: Boolean = false,

    # Specifies whether to retrieve the remote SLA Domains from Rubrik CDM. By default, remote SLA Domains are not retrieved.
    showRemoteSlas: Boolean,

    # Specifies whether to show the Rubrik clusters where this SLA Domain is paused.
    shouldShowPausedClusters: Boolean = false): SlaDomainConnection!

  # Details of a SLA Managed Volume object.
  slaManagedVolume(
    # The Rubrik UUID for the object.
    fid: UUID!): ManagedVolume!

  # Paginated list of SLA Managed Volumes.
  slaManagedVolumes(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ManagedVolumeConnection!

  # Get SMB configuration
  # 
  # Supported in v5.0+
  # Get SMB configuration.
  smbConfiguration(
    # Input for InternalGetSmbConfiguration.
    input: GetSmbConfigurationInput!): GetSmbConfigurationReply!

  # Paginated list of SMB domains.
  smbDomains(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for SMB domains.
    filters: [SmbDomainFilterInput!],

    # Sort by argument for SMB domains.
    sortBy: SmbDomainSortByInput): SmbDomainConnection!
  snappableConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort workloads by field.
    sortBy: SnappableSortByEnum = Name,

    # Filter protected objects by input.
    filter: SnappableFilterInput): SnappableConnection!

  # Search over Exchange contacts.
  snappableContactSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # Org UUID.
    orgId: UUID!,

    # Search filter for contacts search.
    contactsSearchFilter: ContactsSearchFilter): O365ExchangeObjectConnection!
  snappableEmailSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # Org UUID.
    orgId: UUID!,

    # search filters
    searchFilter: SearchFilter): O365ExchangeObjectConnection!
  snappableEventSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # Org UUID.
    orgId: UUID!,

    # Search filter for calendar search.
    calendarSearchFilter: CalendarSearchFilter): O365ExchangeObjectConnection!
  snappableGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Group workloads by field.
    groupBy: SnappableGroupByEnum!,

    # Filter workloads by groups.
    filter: SnappableGroupByFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # List of workload aggregations to retrieve. You can significantly reduce the runtime of the query by specifying a subset of aggregations to retrieve.
    requestedAggregations: [SnappableAggregationsEnum!]): SnappableGroupByConnection!
  snappableOnedriveSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # Org UUID.
    orgId: UUID!, onedriveSearchFilter: OnedriveSearchFilter): O365OnedriveObjectConnection!
  snappableSharepointDriveSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # Org UUID.
    orgId: UUID!, sharepointDriveSearchFilter: OnedriveSearchFilter,

    # The site child ID for SharePoint descendant objects.
    siteChildId: String,

    # The site child type for SharePoint descendant objects.
    siteChildType: SharePointDescendantType): O365OnedriveObjectConnection!

  # Search list objects.
  snappableSharepointListSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # Org UUID.
    orgId: UUID!, sharepointDriveSearchFilter: OnedriveSearchFilter,

    # The site child ID for SharePoint descendant objects.
    siteChildId: String): O365OnedriveObjectConnection!
  snappableTeamsConversationsSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # Org UUID.
    orgId: UUID!,

    # snapshotFid arg which is of optional type
    snapshotFidOpt: UUID,

    # List of channel objects (naturalId and name).
    teamConvChannels: [O365TeamConvChannelInput!]!, teamsConversationsSearchFilter: TeamsConversationsSearchFilter): O365TeamsConversationsConnection!
  snappableTeamsDriveSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # Org UUID.
    orgId: UUID!, channelId: String, channelFolderName: String, teamsDriveSearchFilter: OnedriveSearchFilter): O365OnedriveObjectConnection!

  # List of workloads with legal hold snapshots.
  snappablesWithLegalHoldSnapshotsSummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Input to retrieve workloads with legal hold snapshots.
    input: SnappablesWithLegalHoldSnapshotsInput!): LegalHoldSnappableDetailConnection!

  # Returns a single snapshot by snapshot forever UUID and cluster UUID. In case cluster UUID is not provided, the snapshot forever UUID is used to resolve it. Cluster UUID is beneficial for fetching the same snapshot in a different replication target Rubrik cluster.
  snapshot(
    # Snapshot persistent UUID in RSC.
    snapshotFid: UUID!,

    # The Rubrik cluster ID.
    clusterUuid: UUID): CdmSnapshot!
  snapshotEmailSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!,

    # Org UUID.
    orgId: UUID!,

    # search filters
    searchFilter: SearchFilter): O365ExchangeObjectConnection!
  snapshotEventSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!,

    # Org UUID.
    orgId: UUID!,

    # Search filter for calendar search.
    calendarSearchFilter: CalendarSearchFilter): O365ExchangeObjectConnection!

  # Browse or search the given path for files and directories along with their deltas in a given snapshot.
  snapshotFilesDelta(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The path under which you want your search to run.
    path: String!,

    # Snapshot persistent UUID in RSC.
    snapshotFid: UUID!,

    # Filter snapshot delta based on delta types.
    filter: SnapshotDeltaFilterInput,

    # Prefix arg for searching for files within a snapshot.
    searchPrefix: String,

    # Filter entries based on quarantine status of the entries in the base snapshot.
    quarantineFilters: [QuarantineFilter!],

    # Workload fields in BrowseSnapshotFileDelta request.
    workloadFieldsArg: WorkloadFieldsInput): SnapshotFileDeltaConnection! @deprecated(reason: "This endpoint only works for Data Center workloads. Use snapshotFilesDeltaV2 instead.")

  # Browse or search the given path for files and directories along with their deltas in a given snapshot.
  snapshotFilesDeltaV2(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The path under which you want your search to run.
    path: String!,

    # Snapshot persistent UUID in RSC.
    snapshotFid: UUID!,

    # Filter snapshot delta based on delta types.
    filter: SnapshotDeltaFilterInput,

    # Prefix arg for searching for files within a snapshot.
    searchPrefix: String,

    # Filter entries based on quarantine status of the entries in the base snapshot.
    quarantineFilters: [QuarantineFilter!],

    # Workload fields in BrowseSnapshotFileDelta request.
    workloadFieldsArg: WorkloadFieldsInput): SnapshotFileDeltaV2Connection!

  # Returns a list of snapshots for a workload.
  snapshotOfASnappableConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection!

  # Returns list of snapshots for a list of workloads.
  snapshotOfSnappablesConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Workload UUIDs.
    snappableIds: [String!]!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection!
  snapshotOnedriveSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!,

    # Org UUID.
    orgId: UUID!, onedriveSearchFilter: OnedriveSearchFilter): O365OnedriveObjectConnection!

  # Returns snapshot results for a workload.
  snapshotResults(snappableFid: String!,

    # Begin time of the range (in milliseconds since epoch)
    startTimeMs: Long!,

    # End time of the range (in milliseconds since epoch)
    endTimeMs: Long!): SnapshotResultConnection!
  snapshotSharepointDriveSearch(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # The fid for the workload.
    snappableFid: UUID!,

    # The ID of the snapshot.
    snapshotFid: UUID!,

    # Org UUID.
    orgId: UUID!, sharepointDriveSearchFilter: OnedriveSearchFilter): O365OnedriveObjectConnection!

  # List of snapshots for unmanaged objects.
  snapshotsForUnmanagedObject(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Input for V1QueryUnmanagedObjectSnapshotsV1.
    input: QueryUnmanagedObjectSnapshotsV1Input!): SnapshotSummaryConnection!

  # Get SNMP configuration of the cluster
  # 
  # Supported in v5.0+
  # Get SNMP configuration of the queried cluster.
  snmpConfigurations(
    # Input for InternalGetSnmpConfiguration.
    input: GetSnmpConfigurationInput!): SnmpConfiguration!

  # Returns groupBy results for SonarContentReport.
  sonarContentReport(groupBy: DiscoveryContentReportGroupBy!, sortBy: DiscoveryContentReportSortBy,

    # Sorting order for the results.
    sortOrder: SortOrder, filters: SonarContentReportFilter,

    # Day in the format (YYYY-MM-DD).
    day: String!, timezone: String!,

    # Types of workloads that can be used for filtering query results.
    workloadTypes: [DataGovObjectType!]! = [],

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): SonarContentReportConnection!

  # Returns groupBy for SonarReport.
  sonarReport(sonarReportGroupBy: DiscoveryReportGroupBy!, filter: [String!], timeFilter: TimeFilterInput): SonarReportConnection!

  # Returns rows for SonarReport table.
  sonarReportRow(sortBy: DiscoveryReportSortBy,

    # Sorting order for the results.
    sortOrder: SortOrder, filter: [String!], endTime: String,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): SonarReportRowConnection!
  sonarUserGroups(filter: ListAccessGroupsFilterInput,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): AccessGroupConnection!
  sonarUsers(sort: ListAccessUsersSortInput, filter: ListAccessUsersFilterInput,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): AccessUserConnection!

  # Get the status of generating support bundle
  # 
  # Supported in v5.0+
  # Given a request ID for generate support bundle request, provide the status of the request. If the request is successful, the download link for the support bundle would be included.
  supportBundle(
    # Input for InternalQuerySupportBundle.
    input: QuerySupportBundleInput!): AsyncRequestStatus!

  # All support user access objects that satisfy the query criteria.
  supportUserAccesses(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting field for support access.
    sortBy: SupportUserAccessSortByField,

    # Sorting order for support access.
    sortOrder: SortOrder,

    # Specifies how to filter the list of targets.
    filters: [SupportUserAccessFilterInput!]): SupportUserAccessConnection!

  # Get the configured syslog export rules
  # 
  # Supported in v5.1+
  # Return the list of all configured syslog export rules.
  syslogExportRules(
    # Input for V1GetSyslogExportRules.
    input: GetSyslogExportRulesInput!): SyslogExportRuleSummaryListResponse!
  tableFilters: TableFilters!
  target(
    # Corresponds to ID of the target in Rubrik.
    input: UUID!): Target!
  targetMapping(
    # Corresponds to ID of target mapping in Rubrik.
    targetMappingId: UUID!): TargetMapping!

  # All archival locations.
  targets(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Specifies the field by which the list of targets will be sorted.
    sortBy: ArchivalLocationQuerySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Specifies how to filter the list of targets.
    filter: [TargetFilterInput!],

    # Specifies the context filter to use.
    contextFilter: ContextFilterTypeEnum): TargetConnection!
  taskDetailConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter task summary by input.
    filter: TaskDetailFilterInput,

    # Sort task detail by field.
    sortBy: TaskDetailSortByEnum = EndTime,

    # Task detail sort order.
    sortOrder: SortOrder = DESC,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): TaskDetailConnection!
  taskDetailGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter task summary by input.
    filter: TaskDetailFilterInput,

    # Group task detail by a field.
    groupBy: TaskDetailGroupByEnum!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): TaskDetailGroupByConnection!

  # Details of a taskchain.
  taskchain(
    # Taskchain ID.
    taskchainId: String!): Taskchain!

  # Checks the availability of the channel name in the Team.
  teamChannelNameAvailable(teamUUID: UUID!, channelName: String!): Boolean!

  # The details of a threat hunt.
  threatHuntDetail(
    # The ID of the threat hunt.
    huntId: String!): ThreatHunt!

  # The results of the Threat Hunt.
  threatHuntResult(
    # The ID of the threat hunt.
    huntId: String!,

    # The ID of the object in the threat hunt.
    objectId: String): ThreatHuntResult!

  # The summary of a threat hunt.
  threatHuntSummary(
    # The ID of the threat hunt.
    huntId: String!): ThreatHuntSummaryReply!

  # List of Threat Hunts.
  threatHunts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filters results that started after this time.
    beginTime: DateTime,

    # Filters results that started before this time.
    endTime: DateTime,

    # Optional list of Rubrik cluster UUIDs to filter by.
    clusterUuidFilter: [String!],

    # Optional status to filter by.
    statusFilter: [ThreatHuntStatus!],

    # Optionally filter by if the hunt had any matches.
    matchesFoundFilter: [ThreatHuntMatchesFound!],

    # Optionally filter hunts based on whether they have quarantined matches.
    quarantinedMatchesFilter: [ThreatHuntQuarantinedMatchType!]): ThreatHuntConnection!

  # Get TOTP configuration status for a user.
  totpConfigStatus(
    # Specifies the user ID.
    userId: String!): GetTotpStatusReply!

  # Check support tunnel status for a particular node
  # 
  # Supported in v5.0+
  # To be used by Admin to check status of the support tunnel.
  tunnelStatus(
    # Input for InternalGetTunnelStatus.
    input: GetTunnelStatusInput!): SupportTunnelInfo!

  # Count of unique HyperV Servers.
  uniqueHypervServersCount(
    # The hierarchy object filter.
    filter: [Filter!]): Int!

  # Number of unique vCloud Director instances.
  uniqueVcdCount(
    # The hierarchy object filter.
    filter: [Filter!] = []): Int!

  # List of unmanaged objects.
  unmanagedObjects(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Query unmanaged objects.
    input: UnmanagedObjectsInput!): UnmanagedObjectDetailConnection!

  # Gets the status for completed/running upgrade process.
  upgradeStatus(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): UpgradeStatusReply!
  userActivities(filter: ListObjectFilesFiltersInput, sort: FileResultSortInput,

    # Time range specified in the user's local timezone.
    timeRange: UserTimeRangeInput, userId: String!,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): FileResultConnection!
  userActivityTimeline(userId: String!,

    # Start time, in string format (YYYY-MM-DD).
    startDay: String!, timezone: String!, uniqueActivities: Boolean!): ActivityTimelineResultConnection!
  userAnalyzerAccess(userId: String!,

    # Start time, in string format (YYYY-MM-DD).
    startDay: String!, timezone: String!,

    # Maximum number of entries in the response.
    limit: Int! = 0): AnalyzerAccessUsageConnection!
  userAuditConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # User audit sort order.
    sortOrder: SortOrder,

    # Sort user audit by field.
    sortBy: UserAuditSortField, filters: UserAuditFilter): UserAuditConnection!
  userDetail(userId: String!,

    # Start time, in string format (YYYY-MM-DD).
    startDay: String!, timezone: String!): GetUserDetailReply!
  userFileActivityTimeline(userId: String!, resource: ResourceInput, nativePath: String!,

    # Start time, in string format (YYYY-MM-DD).
    startDay: String!, timezone: String!, timeGranularity: TimeGranularity!): ActivityTimelineResultConnection!
  userGroups(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String, roleIdsFilter: [UUID!]): [Group!]!

  # An object containing production notifications information for the current user.
  userNotifications: UserNotifications! @deprecated(reason: "This query is deprecated.")

  # Get the session management configurations for the user account.
  userSessionManagementConfig: GetUserSessionManagementConfigReply!
  userSettings: UserSettings!

  # Retrieve users from current and descendant organizations based on the specified filters.
  usersInCurrentAndDescendantOrganization(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Specifies sort parameter.
    sortBy: UserSortByParam,

    # Specifies user filters.
    filter: UserFilterInput,

    # Specifies whether we should include users without any roles assigned either in current or descendant orgs. If roleIdsFilter is not empty and this field is set to true, users without any roles will be included as well.
    shouldIncludeUserWithoutRole: Boolean = false): UserConnection!

  # Preview list of virtual machines of a proposed filter condition
  # 
  # Supported in v7.0+
  # Preview list of virtual machines of a proposed filter condition. The result might not be accurate if new virtual machines were added after last vCenter refresh.
  vCenterAdvancedTagPreview(
    # Input for V1PreviewFilter.
    input: PreviewFilterInput!): VcenterAdvancedTagPreviewReply!

  # Get the ingest and export bandwidth limits for HotAdd with the vCenter
  # 
  # Supported in v5.3+
  # Get the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
  vCenterHotAddBandwidth(
    # Input for V1GetHotAddBandwidth.
    input: GetHotAddBandwidthInput!): HotAddBandwidthInfo!

  # Retrieve the user-configured network for HotAdd operations
  # 
  # Supported in v5.3+
  # Retrieve the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
  vCenterHotAddNetwork(
    # Input for V1GetHotAddNetwork.
    input: GetHotAddNetworkInput!): HotAddNetworkConfigWithName!

  # Get the user-configured networks in the vCenter
  # 
  # Supported in v5.3+
  # Get the names and IDs of the user configured networks in the vCenter. This information enables users to choose a desired network for backups to go through for VMware Cloud on AWS setups.
  vCenterNetworks(
    # Input for V1GetNetworks.
    input: GetNetworksInput!): NetworkInfoListResponse!

  # Get the number of HotAdd proxies needed for the vCenter
  # 
  # Supported in v5.3+
  # Get the number of HotAdd proxies that need to be deployed to the vCenter to support the maximum number of ingest jobs.
  vCenterNumProxiesNeeded(
    # Input for V1GetNumProxiesNeeded.
    input: GetNumProxiesNeededInput!): Int!

  # Get preAddInfo for a vcenter.
  vCenterPreAddInfo(
    # Input for V1PreAddVcenter.
    input: PreAddVcenterInput!): VcenterPreAddInfo!
  vSphereComputeCluster(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereComputeCluster!

  # Query compute clusters
  vSphereComputeClusters(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): VsphereComputeClusterConnection!
  vSphereDatacenter(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereDatacenter!

  # Vsphere datastore based on id passed in.
  vSphereDatastore(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereDatastore!

  # Vsphere datastore cluster based on id passed in.
  vSphereDatastoreCluster(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereDatastoreCluster!

  # Query vSphere datastore clusters.
  vSphereDatastoreClusters(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): VsphereDatastoreClusterConnection!
  vSphereDatastoreConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): VsphereDatastoreConnection!
  vSphereFolder(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereFolder!

  # Get all the vSphere folders.
  vSphereFolders(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): VsphereFolderConnection!
  vSphereHost(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereHost!
  vSphereHostConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): VsphereHostConnection!

  # Get details of a ESXi hypervisor
  # 
  # Supported in v5.0+
  # Get details of a ESXi hypervisor.
  vSphereHostDetails(
    # Input for V1GetVmwareHost.
    input: GetVmwareHostInput!): VmwareHostDetail!

  # All of the VSphere hosts based on fids passed in.
  vSphereHostsByFids(
    # The Rubrik UUIDs for the objects.
    fids: [UUID!]!): [VsphereHost!]!

  # List of vSphere Live Mounts.
  vSphereLiveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for virtual machine Live Mounts.
    filter: [VsphereLiveMountFilterInput!],

    # Sort virtual machine Live Mounts.
    sortBy: VsphereLiveMountSortBy): VsphereLiveMountConnection!

  # Get a vSphere Live Mount by id
  vSphereMount(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereMount!

  # vSphere Live Mount Connection
  vSphereMountConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for virtual machine Live Mounts.
    filter: VSphereMountFilter, sortBy: VsphereMountSortBy,

    # Sorting order for the results.
    sortOrder: SortOrder): VsphereMountConnection!
  vSphereNetwork(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereNetwork!
  vSphereResourcePool(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereResourcePool!

  # The root hierarchy for VMware export, which includes VMware compute clusters and standalone hosts.
  vSphereRootRecoveryHierarchy(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): CdmHierarchyObjectConnection!
  vSphereTag(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereTag!
  vSphereTagCategory(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereTagCategory!
  vSphereTopLevelDescendantsConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): CdmHierarchyObjectConnection!
  vSphereVCenter(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereVcenter!
  vSphereVCenterConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): VsphereVcenterConnection!
  vSphereVMAsyncRequestStatus(clusterUuid: UUID!,

    # ID of an asynchronous request.
    id: String!): AsyncRequestStatus!
  vSphereVmNew(
    # The Rubrik UUID for the object.
    fid: UUID!): VsphereVm!
  vSphereVmNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): VsphereVmConnection!

  # Validates the name used for an RDS cluster during an export operation. Returns true if the RDS cluster name is valid. Returns false, with an error message, if the RDS cluster name validation fails. Returns false, without an error message for all other failures.
  validateAwsNativeRdsClusterNameForExport(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!,

    # Name of the RDS DB Cluster.
    rdsClusterName: String!): ValidateAwsNativeRdsClusterNameForExportReply!

  # Validates the name used for an RDS Instance during an export operation. Returns true if the RDS Instance name is valid. Returns false, with an error message, if the RDS Instance name validation fails. Returns false, without an error message for all other failures.
  validateAwsNativeRdsInstanceNameForExport(
    # Rubrik ID for AWS account.
    awsAccountRubrikId: UUID!,

    # Region in AWS.
    region: AwsNativeRegion!,

    # Name of the RDS DB Instance
    rdsInstanceName: String!): ValidateAwsNativeRdsInstanceNameForExportReply!

  # Validates if Azure subnets are correctly configured for running Azure Kubernetes Service (AKS) Clusters. When correctly configured, the Azure subnets allow the required region-specific outbound connectivity and do not overlap with Azure restricted IP Address Space.
  validateAzureCloudAccountExocomputeConfigurations(
    # Input for validating Exocompute configurations for an Azure Cloud Account.
    input: ValidateAzureCloudAccountExocomputeConfigurationsInput!): ValidateAzureSubnetsForCloudAccountExocomputeReply!

  # Validates the name used for an Sql Database during an export operation. Returns true if the database name is valid. Returns false, with an error message, if the database name validation fails. Returns false, without an error message for all other failures.
  validateAzureNativeSqlDatabaseDbNameForExport(
    # Name of the Azure SQL Database.
    azureSqlDatabaseName: String!,

    # Rubrik ID of the Azure SQL Database Server.
    azureSqlDatabaseServerRubrikId: UUID!): ValidateAzureNativeSqlDatabaseDbNameForExportReply!

  # Validates the name used for an Managed Instance Database during an export operation. Returns true if the database name is valid. Returns false, with an error message, if the database name validation fails. Returns false, without an error message for all other failures.
  validateAzureNativeSqlManagedInstanceDbNameForExport(
    # Name of the Azure SQL Database.
    azureSqlDatabaseName: String!,

    # Rubrik ID of the Azure SQL Managed Instance Server.
    azureSqlManagedInstanceServerRubrikId: UUID!): ValidateAzureNativeSqlManagedInstanceDbNameForExportReply!

  # Information about cluster license capacity validations.
  validateClusterLicenseCapacity(
    # Input required to validate the cluster license capacity.
    input: ValidateClusterLicenseCapacityInput!): ClusterLicenseCapacityValidations!

  # Checks whether the tenant org name is valid and unique.
  validateOrgName(
    # Input required for tenant org name validation.
    input: ValidateOrgNameInput!): ValidateOrgNameReply!

  # Options for instantly recovering a vApp snapshot.
  vappSnapshotInstantRecoveryOptions(
    # Input for V1GetVappSnapshotInstantRecoveryOptionsV1.
    input: VappSnapshotInstantRecoveryOptionsInput!): VappInstantRecoveryOptions!

  # Export options for a vApp snapshot template.
  vappTemplateSnapshotExportOptions(
    # Input for V1GetVappTemplateSnapshotExportOptions.
    input: VappTemplateSnapshotExportOptionsInput!): VappTemplateExportOptionsUnion!

  # Paginated list of virtual machines under vCloud Director hiearchy.
  vcdVappVms(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!] = []): VsphereVmConnection!

  # Get async status of vcenter request.
  vcenterAsyncRequestStatus(
    # Input for V1GetVcenterAsyncRequestStatus.
    input: VcenterAsyncRequestStatusInput!): AsyncRequestStatus!

  # Verify for a Rubrik cluster if it is replication target in any SLA Domain.
  verifySlaWithReplicationToCluster(
    # UUID of the Rubrik cluster.
    cdmClusterUUID: UUID!,

    # Include Archived SLA.
    includeArchived: Boolean!): VerifySlaWithReplicationToClusterResponse!

  # Volume Group Live Mount Connection.
  volumeGroupMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for volume group live mounts.
    filters: [VolumeGroupLiveMountFilterInput!],

    # Sort by argument for volume group live mounts.
    sortBy: VolumeGroupLiveMountSortByInput): VolumeGroupLiveMountConnection!
  vsphereVMMissedRecoverableRange(snappableFid: UUID!, beforeTime: DateTime, afterTime: DateTime): RecoverableRangeResponse!
  vsphereVMRecoverableRange(snappableFid: UUID!, beforeTime: DateTime, afterTime: DateTime): RecoverableRangeResponse!
  vsphereVMRecoverableRangeInBatch(
    # The batch request, which includes the ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved, and optionally the date ranges as a filter.
    requestInfo: BatchVmwareVmRecoverableRangesRequestInput!): BatchVmwareVmRecoverableRanges!
  vsphereVmwareCdpLiveInfo(
    # The ID of each CDP-enabled virtual machine for which live info is being retrieved.
    ids: [String!]!): BatchVmwareCdpLiveInfo!

  # A Windows Cluster.
  windowsCluster(
    # The Rubrik UUID for the object.
    fid: UUID!): WindowsCluster!

  # Information about a Windows fileset.
  windowsFileset(
    # The Rubrik UUID for the object.
    fid: UUID!): WindowsFileset!

  # Get whether alerts for a given workload are enabled.
  workloadAlertSetting(
    # The Rubrik cluster ID.
    clusterUuid: UUID!,

    # The FID of the workload.
    workloadId: UUID!): GetWorkloadAlertSettingReply!

  # Specifies workloads that have an anomalous snapshot.
  workloadAnomalies(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filters results that started after this time.
    beginTime: DateTime!,

    # Filters results that started before this time.
    endTime: DateTime,

    # Optional object name search filter to apply.
    workloadNameSearch: String,

    # Optional list of object types to filter by. Should be of type ManagedObjectType.
    objectTypeFilter: [String!],

    # Optional list of Rubrik cluster UUIDs to filter by.
    clusterUuidFilter: [String!],

    # Optional list of SLA Domain FIDs to filter by.
    slaFidFilter: [String!],

    # Optional list of encryption levels to filter by.
    encryptionFilter: [EncryptionLevel!],

    # Optional list of severity levels to filter by.
    severityFilter: [ActivitySeverityEnum!],

    # Optional list of analyzer group IDs to filter by.
    analyzerGroupFilter: [String!],

    # Sort object anomalies by field.
    sortBy: WorkloadAnomaliesSortBy,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Order objects with children ahead of non-parents.
    orderParentsFirst: Boolean,

    # Recovery type of the Recovery Plan.
    blueprintRecoveryTypes: [BlueprintRecoveryType!],

    # Filter results by their location.
    locationsFilter: [String!]): WorkloadAnomalyConnection!
}
type Mutation {
  # Add AD Groups to O365 hierarchy.
  addAdGroupsToHierarchy(
    # The input for the AddAdGroupsToHierarchy mutation.
    input: AddAdGroupsToHierarchyInput!): RequestStatus!

  # Add a new domain
  # 
  # Supported in v5.0+
  # Add a new domain manually and join Active Directory.
  addAndJoinSmbDomain(
    # Input for InternalAddAndJoinSmbDomain.
    input: AddAndJoinSmbDomainInput!): AddAndJoinSmbDomainReply!

  # Validates and adds an authentication server-based AWS cloud account. When validation succeeds, the AWS cloud account is added and the features specified in the request are enabled. When validation fails, an error is not returned, but the cause of the failure is specified in the \"message\" field of the response object.
  addAwsAuthenticationServerBasedCloudAccount(
    # Input to add authentication server-based AWS cloud account for native protection.
    input: AddAwsAuthenticationServerBasedCloudAccountInput!): AddAwsAuthenticationServerBasedCloudAccountReply!

  # Adds an IAM user-based AWS cloud account and enables the features specified in the input after successful validation of the request.
  addAwsIamUserBasedCloudAccount(
    # Input to add IAM user-based AWS cloud account for native protection.
    input: AddAwsIamUserBasedCloudAccountInput!): AddAwsIamUserBasedCloudAccountReply!

  # Add the Azure Subscriptions cloud account for the given feature.
  addAzureCloudAccount(
    # Input for adding an Azure Cloud Account.
    input: AddAzureCloudAccountInput!): AddAzureCloudAccountReply!

  # Add Exocompute configurations for an Azure Cloud Account.
  addAzureCloudAccountExocomputeConfigurations(
    # Input for adding Exocompute configurations for an Azure Cloud Account.
    input: AddAzureCloudAccountExocomputeConfigurationsInput!): AddAzureCloudAccountExocomputeConfigurationsReply!

  # Add the Azure Subscription cloud account for the given feature without OAuth.
  addAzureCloudAccountWithoutOauth(
    # Input for adding an Azure Cloud Account without OAuth.
    input: AddAzureCloudAccountWithoutOauthInput!): AddAzureCloudAccountWithoutOauthReply!

  # Add credentials for the user in the databases with authorization to perform backups.
  addCloudNativeSqlServerBackupCredentials(
    # Input required to add credentials for performing SQL Server backups.
    input: AddCloudNativeSqlServerBackupCredentialsInput!): AddCloudNativeSqlServerBackupCredentialsReply!

  # Import a certificate
  # 
  # Supported in v5.1+
  # Import a certificate.
  addClusterCertificate(
    # Input for V1ImportCertificate.
    input: AddClusterCertificateInput!): AddClusterCertificateReply!

  # Add nodes to the CDM cluster.
  addClusterNodes(
    # Input for add nodes.
    AddClusterNodesInput: AddClusterNodesInput!): AddClusterNodesReply!

  # Add a Configured Group to the O365 hierarchy.
  addConfiguredGroupToHierarchy(
    # The input for the AddConfiguredGroupToHierarchy mutation.
    input: AddConfiguredGroupToHierarchyInput!): AddConfiguredGroupToHierarchyReply!

  # Mutation to add a new Db2 instance.
  addDb2Instance(
    # Input for V1AddDb2Instance.
    input: AddDb2InstanceInput!): AddDb2InstanceReply!

  # Add a global certificate.
  addGlobalCertificate(
    # Input to add a global certificate.
    input: AddGlobalCertificateInput!): AddGlobalCertificateReply!

  # Add account level inventory workloads.
  addInventoryWorkloads(
    # Inventory workloads to add for an account.
    input: AddInventoryWorkloadsInput!): Boolean!

  # Create a Managed Volume
  # 
  # Supported in v7.0+
  # v7.0: Initiates an asynchronous job to create a Managed Volume stack.
  # v8.0+: Start an asynchronous job to create a Managed Volume stack.
  addManagedVolume(
    # Input for V1CreateManagedVolumeV1.
    input: AddManagedVolumeInput!): AddManagedVolumeReply!

  # Add a new MongoDB source
  # 
  # Supported in v8.1+
  # Adds a new MongoDB source to the Rubrik Cluster.
  addMongoSource(
    # Input for V1AddMongoSource.
    input: AddMongoSourceInput!): AddMongoSourceReply!

  # Add a New Store
  # 
  # Supported in m3.2.0-m4.2.0
  # Add a new store to Mosaic cluster.
  addMosaicStore(
    # Input for V2AddMosaicStore.
    input: AddMosaicStoreInput!): MosaicAsyncResponse!

  # Add nodes to cloud cluster.
  addNodesToCloudCluster(
    # Input for adding nodes to cloud cluster.
    input: AddNodesToCloudClusterInput!): CcProvisionJobReply!

  # Adds an O365 org to the account.
  addO365Org(
    # The input for the AddO365Org mutation.
    input: AddO365OrgInput!): AddO365OrgResponse!

  # Add policies to objects.
  addPolicyObjects(policyIds: [String!]!, objectIds: [String!]! = [],

    # List of supported root IDs.
    objectRootIds: [String!]! = [],

    # List of Rubrik cluster IDs.
    clusterIds: [String!]! = []): String!
  addRoleAssignments(
    # List of user IDs.
    userIds: [String!],

    # List of group IDs.
    groupIds: [String!], roleIds: [String!]!): Boolean!

  # Add a SAP HANA system
  # 
  # Supported in v5.3+
  # Add a SAP HANA system to the Rubrik cluster.
  addSapHanaSystem(
    # Input for V1AddSapHanaSystem.
    input: AddSapHanaSystemInput!): AddSapHanaSystemReply!

  # Add storage arrays to Rubrik clusters.
  addStorageArrays(
    # List of storage arrays to add.
    input: AddStorageArraysInput!): AddStorageArraysReply!

  # Add a new syslog export rule
  # 
  # Supported in v5.1+
  # Adds a new rule specifying where to export the specified syslog information.
  addSyslogExportRule(
    # Input for V1AddSyslogExportRule.
    input: AddSyslogExportRuleInput!): AddSyslogExportRuleReply!

  # Add VLAN to Rubrik cluster.
  addVlan(
    # Input for InternalAddVlan.
    input: AddVlanInput!): ResponseSuccess!

  # Add Vm App consistent specs info
  addVmAppConsistentSpecs(
    # Input required to add Azure native virtual machine application consistency specifications.
    input: AddVmAppConsistentSpecsInput!): AddVmAppConsistentSpecsReply!

  # Archive a crawl.
  archiveCrawl(crawlId: String!): String!

  # Archive a Kubernetes cluster.
  archiveK8sCluster(
    # Request for archiving a Kubernetes cluster.
    input: ArchiveK8sClusterInput!): ArchiveK8sClusterReply!

  # Assign SLA domain properties to Mssql objects.
  assignMssqlSlaDomainProperties(
    # Input for V1AssignMssqlSlaProperties.
    input: AssignMssqlSlaDomainPropertiesInput!): ResponseSuccess!

  # Assign SLA domain properties to Mssql objects.
  assignMssqlSlaDomainPropertiesAsync(
    # Input for V2AssignMssqlSlaPropertiesAsync.
    input: AssignMssqlSlaDomainPropertiesAsyncInput!): AssignMssqlSlaDomainPropertiesAsyncReply!

  # Assign protection to cassandra objects.
  assignProtection(
    # Arguments for protection backup.
    input: AssignProtectionInput!): SlaAssignResult!

  # Endpoint to assign retention SLA Domain to workloads.
  assignRetentionSLAToSnappables(
    # SLA Domain forever UUID.
    globalSlaOptionalFid: UUID,

    # Corresponds to the assignment type for the SLA Domain.
    globalSlaAssignType: SlaAssignTypeEnum!,

    # A list of object forever UUIDs to assign to the SLA Domain.
    objectIds: [UUID!]!,

    # Optional workload type selection for SLA Domain assignment is available for workloads that support multiple workload hierarchies. It allows setting an SLA Domain for specific workload types under the workload rather than applying the SLA Domain for all the workload types.
    # 
    # For example, for an AWS account object with two different workload types, AwsNativeEc2Instance and AwsNativeRdsInstance, the appropriate type can be selected to apply the SLA Domain only to the selected workloads under that account. If the SLA Domain must be applicable to all workload types, the field can be set to AllSubHierarchyType or left blank. However, for workloads that do not support multiple workload types, this field must either be left blank or set to AllSubHierarchyType when assigning the SLA Domain to a workload.
    applicableSnappableType: WorkloadLevelHierarchy,

    # Specifies whether the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain.
    shouldApplyToNonPolicySnapshots: Boolean,

    # Optional user note.
    userNote: String): SlaAssignResult!

  # Endpoint to assign retention SLA Domain to snapshots.
  assignRetentionSLAToSnapshots(
    # SLA Domain forever UUID.
    globalSlaOptionalFid: UUID,

    # Corresponds to the assignment type for the SLA Domain.
    globalSlaAssignType: SlaAssignTypeEnum!,

    # List of snapshot UUIDs.
    snapshotFids: [UUID!]!,

    # Optional user note.
    userNote: String): SlaAssignResult!

  # Endpoint to assign SLA Domain.
  assignSla(
    # Assign SLA Domain Request.
    input: AssignSlaInput!): SlaAssignResult!

  # Assign SLA Domain to MongoDB collection objects
  # 
  # Supported in v8.1+
  # Assigns SLA Domain to the given MongoDB collection objects.
  assignSlaToMongoDbCollection(
    # Input for V1AssignSlaToCollection.
    input: AssignSlaToMongoDbCollectionInput!): AsyncRequestStatus!

  # Assign SLA Domain to workloads with multiple hierarchies.
  assignSlasForSnappableHierarchies(
    # SLA Domain forever UUID.
    globalSlaOptionalFid: UUID,

    # Corresponds to the assignment type for the SLA Domain.
    globalSlaAssignType: SlaAssignTypeEnum!,

    # A list of object forever UUIDs to assign to the SLA Domain.
    objectIds: [UUID!]!,

    # Provide optional workload types under the object for SLA Domain assignment. This is meant to be used only for objects that support multiple workload hierarchies. This allows an SLA Domain to be set for one or more specific workload types under the object, instead of applying the SLA Domain for all the workload types. For example, an AWS account object can potentially have 2 different workload types under it - AwsNativeEc2Instance and AwsNativeRdsInstance. This field can be set with the appropriate type so that the SLA Domain only gets applied to workloads of the selected type under that account. If the SLA Domain must be applicable for all the workload types under the object, then this field can be set to `AllSubHierarchyType` or left blank. This field must either be left blank or set to `AllSubHierarchyType` when assigning SLA Domain to a workload or to an object that does not support multiple workload types. If more than one is provided, the SLA will be assigned to all.
    applicableSnappableTypes: [WorkloadLevelHierarchy!],

    # Specifies whether to apply SLA Domain changes to existing snapshots.
    shouldApplyToExistingSnapshots: Boolean,

    # Specifies whether the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain.
    shouldApplyToNonPolicySnapshots: Boolean,

    # Choose the behavior for existing snapshots when the Do Not Protect option is selected instead of an SLA Domain.
    globalExistingSnapshotRetention: GlobalExistingSnapshotRetention,

    # Optional user note.
    userNote: String): [SlaAssignResult!]!

  # Completes an OAuth consent flow for Azure resource access.
  azureOauthConsentComplete(
    # The input for the AzureOauthConsentComplete mutation.
    input: AzureOauthConsentCompleteInput!): RequestStatus!

  # Kicks off an OAuth consent flow for Azure resource access.
  azureOauthConsentKickoff: AzureOauthConsentKickoffReply!

  # Backs up the Azure AD directory.
  backupAzureAdDirectory(
    # Input for the BackupAzureAdDirectory API.
    input: BackupAzureAdDirectoryInput!): [CreateOnDemandJobReply!]!

  # Backup mailbox workload.
  backupM365Mailbox(
    # The input for BackupM365Mailbox.
    input: BackupM365MailboxInput!): [CreateOnDemandJobReply!]!

  # Take on-demand snapshot for Onedrive.
  backupM365Onedrive(
    # The input for BackupM365Onedrive.
    input: BackupM365OnedriveInput!): [CreateOnDemandJobReply!]!

  # Take on-demand snapshot for Sharepoint drive.
  backupM365SharepointDrive(
    # The input for BackupM365SharepointDrive.
    input: BackupM365SharepointDriveInput!): [CreateOnDemandJobReply!]!

  # Take on-demand snapshot for Teams.
  backupM365Team(
    # The input for BackupM365Team.
    input: BackupM365TeamInput!): [CreateOnDemandJobReply!]!

  # Backup mailbox workload.
  backupO365Mailbox(
    # The list of mailbox UUIDs to backup.
    mailboxIds: [UUID!]!): BatchAsyncJobStatus! @deprecated(reason: "Use backupM365Mailbox instead.")

  # Take on-demand snapshot for Onedrive.
  backupO365Onedrive(
    # The input for BackupO365Onedrive.
    input: BackupO365OnedriveInput!): BatchAsyncJobStatus! @deprecated(reason: "Use backupM365Onedrive instead.")

  # Take on-demand snapshot for a SharePoint site.
  backupO365SharePointSite(
    # The input for taking an on-demand snapshot of a SharePoint site.
    input: BackupO365SharePointSiteInput!): CreateOnDemandJobReply!

  # Take on-demand snapshot for Sharepoint drive.
  backupO365SharepointDrive(
    # The input for BackupO365SharepointDrive.
    input: BackupO365SharepointDriveInput!): BatchAsyncJobStatus! @deprecated(reason: "Use backupM365SharepointDrive instead.")

  # Take on-demand snapshot for SharePoint list.
  backupO365SharepointList(
    # The input for the BackupO365SharepointList mutation.
    input: BackupO365SharePointListInput!): CreateOnDemandJobReply!

  # Take on-demand snapshot for Teams.
  backupO365Team(
    # The input for BackupO365Team.
    input: BackupO365TeamInput!): BatchAsyncJobStatus! @deprecated(reason: "Use backupM365Team instead.")
  batchDeassignRoleFromUserGroups(userGroupToRoles: [UserGroupToRolesInput!]!): Boolean!

  # Exports a snapshot from each member of a set of virtual machines
  # 
  # Supported in v7.0+
  # Export a snapshot from each member of a set of virtual machines.
  batchExportHypervVm(
    # Input for V1BatchExportHypervVm.
    input: BatchExportHypervVmInput!): BatchExportHypervVmReply!

  # Exports a snapshot from each member of a set of virtual machines
  # 
  # Supported in v7.0+
  # Export a snapshot from each member of a set of virtual machines.
  batchExportNutanixVm(
    # Input for V1BatchExportNutanixVm.
    input: BatchExportNutanixVmInput!): BatchExportNutanixVmReply!

  # Instantly recovers snapshots from multiple virtual machines
  # 
  # Supported in v7.0+
  # Instantly recovers a batch of snapshots from a group of specified virtual machines.
  batchInstantRecoverHypervVm(
    # Input for V1BatchInstantRecoverHypervVm.
    input: BatchInstantRecoverHypervVmInput!): BatchInstantRecoverHypervVmReply!

  # Mount snapshots from multiple virtual machines
  # 
  # Supported in v7.0+
  # Mounts a batch of snapshots from a group of specified virtual machines.
  batchMountHypervVm(
    # Input for V1BatchMountHypervVm.
    input: BatchMountHypervVmInput!): BatchMountHypervVmReply!

  # Mount snapshots from multiple virtual machines
  # 
  # Supported in v7.0+
  # Mounts a batch of snapshots from a group of specified virtual machines.
  batchMountNutanixVm(
    # Input for V1BatchMountNutanixVm.
    input: BatchMountNutanixVmInput!): BatchMountNutanixVmReply!

  # Takes bulk on-demand backup of Hyper-V virtual machines
  # 
  # Supported in v9.0+
  # Takes on-demand backup of multiple specified Hyper-V virtual machines.
  batchOnDemandBackupHypervVm(
    # Input for Hyper-V batch on-demand snapshot request.
    input: BatchOnDemandBackupHypervVmInput!): BatchOnDemandBackupHypervVmReply!

  # Batch quarantine snapshots.
  batchQuarantineSnapshot(
    # Config to batch quarantine snapshot.
    input: BatchQuarantineSnapshotInput!): BatchQuarantineSnapshotReply!

  # Release snapshots from quarantine.
  batchReleaseFromQuarantineSnapshot(
    # Config to batch release from quarantine snapshot.
    input: BatchReleaseFromQuarantineSnapshotInput!): BatchReleaseFromQuarantineSnapshotReply!

  # Begin Managed Volume snapshot
  # 
  # Supported in v7.0+
  # Opens the Managed Volume for writes. All data written to the Managed Volume until the next end-snapshot call will be part of this snapshot.
  beginManagedVolumeSnapshot(
    # Input for V1OpenWritesV1.
    input: BeginManagedVolumeSnapshotInput!): BeginManagedVolumeSnapshotReply!

  # List snapshots and logs from a Mssql Database. This endpoint is only used to fetch data, but uses a mutation instead of a query due to limitations with the CDM API.
  browseMssqlDatabaseSnapshot(
    # Input for V1BrowseMssqlBackupFiles.
    input: BrowseMssqlDatabaseSnapshotInput!): BrowseMssqlDatabaseSnapshotReply!
  bulkCreateFilesetTemplates(
    # Input for InternalBulkCreateFilesetTemplate.
    input: BulkCreateFilesetTemplatesInput!): BulkCreateFilesetTemplatesReply!
  bulkCreateFilesets(
    # Input for InternalBulkCreateFileset.
    input: BulkCreateFilesetsInput!): BulkCreateFilesetsReply!

  # Create filesets in bulk for NAS shares
  # 
  # Supported in v7.0+
  # Create primary filesets for a list of NAS shares.
  bulkCreateNasFilesets(
    # Input for V1BulkCreatePolarisNasFilesets.
    input: BulkCreateNasFilesetsInput!): BulkCreateNasFilesetsReply!

  # Take a bulk on-demand backup of a Microsoft SQL Database.
  bulkCreateOnDemandMssqlBackup(
    # Input for V1CreateOnDemandMssqlBatchBackupV1.
    input: BulkCreateOnDemandMssqlBackupInput!): AsyncRequestStatus!

  # Deletes specified AWS cloud accounts without using CloudFormation Template (CFT).
  bulkDeleteAwsCloudAccountWithoutCft(
    # Input to delete AWS cloud accounts in bulk.
    input: BulkDeleteAwsCloudAccountWithoutCftInput!): BulkDeleteAwsCloudAccountWithoutCftReply!

  # Bulk Delete cassandra sources.
  bulkDeleteCassandraSources(
    # Input for V2BulkDeleteMosaicSources.
    input: BulkDeleteMosaicSourcesInput!): MosaicAsyncResponse!

  # Delete the provided failover clusters
  # 
  # Supported in v5.3+
  # Delete the provided failover clusters.
  bulkDeleteFailoverCluster(
    # Input for V1BulkDeleteFailoverCluster.
    input: BulkDeleteFailoverClusterInput!): ResponseSuccess!

  # Delete failover cluster applications
  # 
  # Supported in v5.3+
  # Delete failover cluster applications from Rubrik cluster.
  bulkDeleteFailoverClusterApp(
    # Input for V1BulkDeleteFailoverClusterApp.
    input: BulkDeleteFailoverClusterAppInput!): ResponseSuccess!

  # Delete filesets
  # 
  # Supported in v5.0+
  # Delete filesets by specifying the fileset IDs.
  bulkDeleteFileset(
    # Input for InternalBulkDeleteFileset.
    input: BulkDeleteFilesetInput!): ResponseSuccess!

  # Delete fileset templates
  # 
  # Supported in v5.0+
  # Deletes specfied fileset templates. Detaches and retains all associated filesets as independent filesets with the existing values.
  bulkDeleteFilesetTemplate(
    # Input for InternalBulkDeleteFilesetTemplate.
    input: BulkDeleteFilesetTemplateInput!): ResponseSuccess!
  bulkDeleteHost(
    # Input for InternalBulkDeleteHost.
    input: BulkDeleteHostInput!): ResponseSuccess!

  # Bulk Delete Sources
  # 
  # Supported in m3.2.0-m4.2.0.
  bulkDeleteMongodbSources(
    # Input for V2BulkDeleteMosaicSources.
    input: BulkDeleteMosaicSourcesInput!): MosaicAsyncResponse!

  # Delete multiple NAS systems
  # 
  # Supported in v7.0+
  # Triggers a delete of the specified NAS systems. Returns an asynchronous request to check their delete status.
  bulkDeleteNasSystems(
    # Input for V1BulkDeleteNasSystems.
    input: BulkDeleteNasSystemsInput!): BatchAsyncRequestStatus!

  # Take an on-demand snapshot for selected Nutanix virtual machines
  # 
  # Supported in v9.0+
  # Take bulk backups for multiple Nutanix virtual machines.
  bulkOnDemandSnapshotNutanixVm(
    # Input for V1BulkOnDemandSnapshotNutanixVm.
    input: BulkOnDemandSnapshotNutanixVmInput!): BulkOnDemandSnapshotNutanixVmReply!

  # Refresh multiple hosts with a single request.
  bulkRefreshHosts(
    # Input for refreshing multiple hosts with a single request.
    input: BulkRefreshHostsInput!): BulkRefreshHostsReply!

  # Register hosts
  # 
  # Supported in v5.0+
  # Register hosts with Rubrik clusters.
  bulkRegisterHost(
    # Input for InternalBulkRegisterHost.
    input: BulkRegisterHostInput!): BulkRegisterHostReply!

  # Register hosts
  # 
  # Supported in v5.3+
  # Register multiple hosts and perform discovery for databases and Microsoft SQL Server instances. When called, this API returns a success message, but completes the host registration in the background. Monitor the status of the background host discovery with the "status" field in GET API on /hosts. The POST API on /hosts can take longer for discovery, depending on the number of hosts on the system. POST on this API can be used instead to perform the discovery in the background and quickly register the host. Doing this requires that you install RBS for Linux and Windows hosts, similar to regular register using POST on /hosts.
  bulkRegisterHostAsync(
    # Input for V1BulkRegisterHostAsync.
    input: BulkRegisterHostAsyncInput!): BulkRegisterHostAsyncReply!

  # Bulk tier existing snapshots to cold storage
  # 
  # Supported in v6.0+
  # Schedules a job to tier existing snapshots of the specified objects to cold storage.
  bulkTierExistingSnapshots(
    # Input for V1BulkTierExistingSnapshots.
    input: BulkTierExistingSnapshotsInput!): AsyncRequestStatus!

  # Update multiple Exchange DAGs
  # 
  # Supported in v8.0+
  # Update multiple Exchange DAGs with the specified properties.
  bulkUpdateExchangeDag(
    # Input for V1BulkUpdateExchangeDag.
    input: BulkUpdateExchangeDagInput!): V1BulkUpdateExchangeDagResponse!

  # Modify fileset templates
  # 
  # Supported in v5.0+
  # Modify the values of specified fileset templates.
  bulkUpdateFilesetTemplate(
    # Input for InternalBulkUpdateFilesetTemplate.
    input: BulkUpdateFilesetTemplateInput!): BulkUpdateFilesetTemplateReply!
  bulkUpdateHost(
    # Input for InternalBulkUpdateHost.
    input: BulkUpdateHostInput!): BulkUpdateHostReply!

  # Update multiple Microsoft SQL databases with the specified properties.
  bulkUpdateMssqlDbs(
    # Input for V1BulkUpdateMssqlDbV1.
    input: BulkUpdateMssqlDbsInput!): BulkUpdateMssqlDbsReply!

  # Update Oracle Databases
  # 
  # Supported in v5.2+
  # Update the properties of the objects that represent the specified Oracle Databases.
  bulkUpdateOracleDatabases(
    # Input for V1BulkUpdateOracleDb.
    input: BulkUpdateOracleDatabasesInput!): BulkUpdateOracleDatabasesReply!

  # Update Oracle Hosts
  # 
  # Supported in v5.2+
  # Update properties to Oracle Host objects.
  bulkUpdateOracleHosts(
    # Input for V1BulkUpdateOracleHost.
    input: BulkUpdateOracleHostsInput!): BulkUpdateOracleHostsReply!

  # Update Oracle RACs
  # 
  # Supported in v5.2+
  # Update the properties of the objects that represent the specified Oracle RAC.
  bulkUpdateOracleRacs(
    # Input for V1BulkUpdateOracleRac.
    input: BulkUpdateOracleRacsInput!): BulkUpdateOracleRacsReply!

  # Cancel an activity series.
  cancelActivitySeries(
    # Input for canceling an activity series.
    input: CancelActivitySeriesInput!): Boolean!

  # Cancels download package job of a cluster.
  cancelDownloadPackage(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): CancelJobReply!

  # Cancels scheduled upgrade job of a cluster.
  cancelScheduledUpgrade(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): CancelJobReply!

  # Cancels the taskchain.
  cancelTaskchain(
    # Taskchain ID.
    taskchainId: String!): RequestStatus!

  # Cancel an in-progress threat hunt.
  cancelThreatHunt(
    # The details of the threat hunt to cancel.
    input: CancelThreatHuntInput!): Void
  changePassword(
    # User credentials required to change a user's password.
    input: ChangePasswordInput!): Boolean!

  # Install or uninstall volume filter driver on hosts.
  changeVfdOnHost(
    # Input for InternalChangeVfdOnHost.
    input: ChangeVfdOnHostInput!): ChangeVfdOnHostReply!

  # Clear credentials for the user with authorization to perform database backups. Credentials are cleared from the object to which they were assigned directly.
  clearCloudNativeSqlServerBackupCredentials(
    # Input required to clear the credentials used for SQL Server backups.
    input: ClearCloudNativeSqlServerBackupCredentialsInput!): ClearCloudNativeSqlServerBackupCredentialsReply!

  # Check Rubrik Backup Agent (RBA) connectivity for the VMs.
  cloudNativeCheckRbaConnectivity(
    # Input required to check Rubrik Backup Agent (RBA) connectivity for the VMs.
    input: CloudNativeCheckRbaConnectivityInput!): CloudNativeCheckRbaConnectivityReply!

  # Download files from a cloud-native snapshot to a cloud download location or a virtual machine.
  cloudNativeDownloadFiles(
    # Input required to download indexed cloud-native snapshot files.
    input: CloudNativeDownloadFilesInput!): DownloadFilesReply!

  # Completes the creation flow for an Azure AD app.
  completeAzureAdAppSetup(
    # Input for the completeAzureAdAppSetup API.
    input: CompleteAzureAdAppSetupInput!): CompleteAzureAdAppSetupReply!

  # Completes an update to the Azure AD directory app.
  completeAzureAdAppUpdate(
    # Input for the CompleteAzureAdAppUpdate API.
    input: CompleteAzureAdAppUpdateInput!): Void

  # Complete the Azure OAuth flow and pass the authorization code.
  completeAzureCloudAccountOauth(
    # Input for completing authentication of the Azure Cloud Accounts.
    input: CompleteAzureCloudAccountOauthInput!): CompleteAzureCloudAccountOauthReply!

  # Configure the target database for system copy restore
  # 
  # Supported in v6.0+
  # Initiates a job to configure the specified target database for a system copy restore by sending metadata about the source database. System copy restore in SAP HANA is done across different databases.
  configureSapHanaRestore(
    # Input for V1ConfigureSapHanaRestore.
    input: ConfigureSapHanaRestoreInput!): AsyncRequestStatus!

  # Initiate a Live Mount of an Active Directory Domain Controller snapshot
  # 
  # Supported in v9.0+
  # Initiates a job to perform a Live Mount of an Active Directory Domain Controller snapshot. Returns the job instance ID.
  createActiveDirectoryLiveMount(
    # Input for V1CreateActiveDirectoryLiveMount.
    input: CreateActiveDirectoryLiveMountInput!): AsyncRequestStatus!

  # Remove a Live Mount of an Active Directory Domain Controller snapshot
  # 
  # Supported in v9.0+
  # Initiates a job to remove a Live Mount of an Active Directory Domain Controller snapshot. Returns the job instance ID.
  createActiveDirectoryUnmount(
    # Input for V1CreateActiveDirectoryUnmount.
    input: CreateActiveDirectoryUnmountInput!): AsyncRequestStatus!
  createAutomaticAwsTargetMapping(
    # Request for creating a new AWS target mapping.
    input: CreateAutomaticAwsTargetMappingInput!): TargetMapping! @deprecated(reason: "This mutation is deprecated.")
  createAutomaticAzureTargetMapping(
    # Request for creating a new Azure target mapping.
    input: CreateAutomaticAzureTargetMappingInput!): TargetMapping! @deprecated(reason: "This mutation is deprecated.")
  createAutomaticRcsTargetMapping(
    # Request argument for creating a new Rubrik Cloud Vault location.
    input: CreateAutomaticRcsTargetMappingInput!): TargetMapping! @deprecated(reason: "This mutation is deprecated. Please use createRcvLocationsFromTemplate.")
  createAwsAccount(
    # Request argument for creating a new AWS account.
    input: CreateAwsAccountInput!): CloudAccount!

  # Create a Rubrik Cloud Cluster on AWS.
  createAwsCluster(
    # CreateAwsClusterArg params for Aws.
    input: CreateAwsClusterInput!): CcProvisionJobReply!
  createAwsComputeSetting(
    # Request for creating a new Aws Compute Setting.
    input: CreateAwsComputeSettingInput!): AwsComputeSettings! @deprecated(reason: "This mutation is no longer supported.")

  # Create AWS Exocompute configs.
  createAwsExocomputeConfigs(
    # Input to create AWS exocompute configurations.
    input: CreateAwsExocomputeConfigsInput!): CreateAwsExocomputeConfigsReply!

  # Create a reader type for AWS archival location on a Rubrik cluster.
  createAwsReaderTarget(
    # Input for creating a new AWS reader target.
    input: CreateAwsReaderTargetInput!): Target!
  createAwsTarget(
    # Request for creating a new AWS target.
    input: CreateAwsTargetInput!): Target!
  createAzureAccount(
    # Input for creating an Azure account.
    input: CreateAzureAccountInput!): CloudAccount!

  # Create a Rubrik Cloud Cluster on Azure.
  createAzureCluster(
    # CreateAzureClusterArg params for Azure.
    input: CreateAzureClusterInput!): CcProvisionJobReply!

  # Creates reader type for Azure archival location on a CDM cluster.
  createAzureReaderTarget(
    # Input for creating a new Azure reader target.
    input: CreateAzureReaderTargetInput!): Target!

  # Create or get an Azure AAD application.
  createAzureSaasAppAad: CreateAzureSaasAppAadReply!

  # Creates an Azure archival target on the Rubrik cluster.
  createAzureTarget(
    # Request for creating a new Azure target.
    input: CreateAzureTargetInput!): Target!

  # Create a cassandra source.
  createCassandraSource(
    # Input for V2AddMosaicSource.
    input: AddMosaicSourceInput!): MosaicAsyncResponse!
  createCloudNativeAwsStorageSetting(input: CreateCloudNativeAwsStorageSettingInput!): CreateCloudNativeAwsStorageSettingReply!

  # Creates Storage Settings for the archival of azure cloud native protected objects
  createCloudNativeAzureStorageSetting(input: CreateCloudNativeAzureStorageSettingInput!): CreateCloudNativeAzureStorageSettingReply!

  # Create cloud native label rule
  createCloudNativeLabelRule(
    # Input required to create a cloud-native label rule.
    input: CreateCloudNativeLabelRuleInput!): CreateCloudNativeLabelRuleReply!

  # Create Rubrik Cloud Vault storage settings for archiving azure cloud native protected objects.
  createCloudNativeRcvAzureStorageSetting(
    # Create Rubrik Cloud Vault Azure cloud native storage setting.
    input: CreateCloudNativeRcvAzureStorageSettingInput!): CreateCloudNativeRcvAzureStorageSettingReply!

  # Create cloud native tag rule
  createCloudNativeTagRule(
    # Input required to create a cloud-native tag rule.
    input: CreateCloudNativeTagRuleInput!): CreateCloudNativeTagRuleReply!

  # Create a payload for cross-account OAuth registration.
  createCrossAccountRegOauthPayload(
    # Input fully qualified domain name of the organization in the service provider RSC account.
    input: CreateCrossAccountRegOauthPayloadInput!): CreateCrossAccountRegOauthPayloadReply!

  # Create a new custom analyzer.
  createCustomAnalyzer(input: CreateCustomAnalyzerInput!): Analyzer!

  # Create a custom report.
  createCustomReport(input: CreateCustomReportInput!,

    # Room of the report.
    reportRoom: String): CreateCustomReportReply!

  # On-demand snapshot of an Active Directory Domain Controller
  # 
  # Supported in v9.0+
  # Initiates an on-demand snapshot job of a specified Active Directory Domain Controller.
  createDomainControllerSnapshot(
    # Input for V1TakeOnDemandSnapshotOfDomainController.
    input: CreateDomainControllerSnapshotInput!): AsyncRequestStatus!

  # Creates a download from archival request
  # 
  # Supported in v5.0+
  # Download a snapshot from archival.
  createDownloadSnapshotForVolumeGroup(
    # Input for InternalCreateDownloadSnapshotForVolumeGroup.
    input: CreateDownloadSnapshotForVolumeGroupInput!): AsyncRequestStatus!

  # Create a request to mount a Microsoft Exchange database snapshot
  # 
  # Supported in v8.0+
  # Create a request to mount a Microsoft Exchange database snapshot.
  createExchangeMount(
    # Input for V1CreateExchangeSnapshotMount.
    input: CreateExchangeSnapshotMountInput!): AsyncRequestStatus!

  # Create a failover cluster
  # 
  # Supported in v5.2+
  # Create a failover cluster.
  createFailoverCluster(
    # Input for V1CreateFailoverCluster.
    input: CreateFailoverClusterInput!): CreateFailoverClusterReply!

  # Create a failover cluster app
  # 
  # Supported in v5.2+
  # Create a failover cluster app.
  createFailoverClusterApp(
    # Input for V1CreateFailoverClusterApp.
    input: CreateFailoverClusterAppInput!): CreateFailoverClusterAppReply!
  createFilesetSnapshot(
    # Input for V1CreateFilesetBackupJob.
    input: CreateFilesetSnapshotInput!): AsyncRequestStatus!

  # Creates reader type for GCP archival location on a CDM cluster.
  createGcpReaderTarget(
    # Request for creating a new Gcp reader target.
    input: CreateGcpReaderTargetInput!): Target!
  createGcpTarget(
    # Request for creating a new Gcp target.
    input: CreateGcpTargetInput!): Target!

  # Create a reader target of type Glacier on a Rubrik cluster.
  createGlacierReaderTarget(
    # Request for creating a new Glacier reader target.
    input: CreateGlacierReaderTargetInput!): Target!

  # Create SLA Domain.
  createGlobalSla(input: CreateGlobalSlaInput!): GlobalSlaReply!

  # Create guest OS credentials.
  createGuestCredential(
    # Input for InternalCreateGuestCredential.
    input: CreateGuestCredentialInput!): CreateGuestCredentialReply!

  # Create a live mount request
  # 
  # Supported in v5.0+
  # Create a live mount request with given configuration.
  createHypervVirtualMachineSnapshotMount(
    # Input for InternalCreateHypervVirtualMachineSnapshotMount.
    input: CreateHypervVirtualMachineSnapshotMountInput!): AsyncRequestStatus!

  # Creates a new integration.
  createIntegration(
    # Create integration input.
    input: CreateIntegrationInput!): CreateIntegrationReply!

  # Create a batch of new integrations.
  createIntegrations(
    # Create integrations input.
    input: CreateIntegrationsInput!): CreateIntegrationsReply!

  # Create a Rubrik Kubernetes agent manifest.
  createK8sAgentManifest(
    # Request to create a new Rubrik Kubernetes agent manifest.
    input: CreateK8sAgentManifestInput!): CreateK8sAgentManifestReply!

  # Add a Kubernetes cluster.
  createK8sCluster(
    # Request for creating a Kubernetes cluster.
    input: CreateK8sClusterInput!): CreateK8sClusterReply!

  # Snapshot Kubernetes Namespace.
  createK8sNamespaceSnapshots(
    # Request for snapshot of Kubernetes Namespaces.
    input: CreateK8sNamespaceSnapshotsInput!): [CreateOnDemandJobReply!]!
  createManualTargetMapping(
    # Request for creating manual target mapping.
    input: CreateManualTargetMappingInput!): TargetMapping!

  # Register a new MongoDB source to NoSQL cluster.
  # For MongoDB, the term "source" is usually used for either a replica set or a sharded cluster.
  # For more info on MongoDB cluster, refer to: https://docs.mongodb.com/manual/introduction/.
  createMongodbSource(
    # Input for V2AddMosaicSource.
    input: AddMosaicSourceInput!): MosaicAsyncResponse!

  # Create live mount of a Microsoft SQL Database.
  createMssqlLiveMount(
    # Input for V1CreateMssqlMount.
    input: CreateMssqlLiveMountInput!): AsyncRequestStatus!

  # Create log shipping configuration of a Microsoft SQL Database.
  createMssqlLogShippingConfiguration(
    # Input for V2CreateLogShippingConfigurationV2.
    input: CreateMssqlLogShippingConfigurationInput!): AsyncRequestStatus!

  # Creates reader type for NFS archival location on a CDM cluster.
  createNfsReaderTarget(
    # Input for creating a new NFS reader target.
    input: CreateNfsReaderTargetInput!): Target!
  createNfsTarget(
    # Request for creating a new NFS target.
    input: CreateNfsTargetInput!): Target!

  # Add Nutanix cluster
  # 
  # Supported in v5.0+
  # Create a Nutanix cluster object by providing an address and account credentials for Prism. Initiates an asynchronous job to establish a connection with the cluster and retrieve all metadata. Use GET /nutanix_cluster/{id}/status to check status.
  createNutanixCluster(
    # Input for InternalCreateNutanixCluster.
    input: CreateNutanixClusterInput!): AsyncRequestStatus!

  # Add Nutanix Prism Central and it's corresponding Prism Elements
  # 
  # Supported in v9.0+
  # Create a Nutanix Prism Central object and refresh the Prism Elements present in it.
  createNutanixPrismCentral(
    # Input for creating the Nutanix Prism Central object.
    input: CreateNutanixPrismCentralInput!): BatchAsyncRequestStatus!

  # Completes the creation flow for an O365 Azure AD App.
  createO365AppComplete(
    # The input for the CreateO365AppComplete mutation.
    input: CreateO365AppCompleteInput!): RequestStatus!

  # Kicks off the creation flow for an O365 Azure AD App.
  createO365AppKickoff(
    # The input for the CreateO365AppKickoff mutation.
    input: CreateO365AppKickoffInput!): CreateO365AppKickoffResp!

  # Create on demand database snapshot
  # 
  # Supported in v8.0+
  # Initiates a job to take an on demand, full snapshot of a specified Db2 database object. Use the GET /db2/db/request/{id} endpoint to monitor the progress of the job.
  createOnDemandDb2Backup(
    # Input for V1CreateOnDemandDb2Backup.
    input: CreateOnDemandDb2BackupInput!): AsyncRequestStatus!

  # Take an on-demand backup of a Microsoft Exchange database
  # 
  # Supported in v8.0+
  # Takes an on-demand backup of a Microsoft Exchange database. The forceFullSnapshot property can be set to true to force a full snapshot. To check the result of the request, poll /exchange/request/{id}.
  createOnDemandExchangeBackup(
    # Input for V1CreateOnDemandExchangeDatabaseBackup.
    input: CreateOnDemandExchangeDatabaseBackupInput!): AsyncRequestStatus!

  # Take an on-demand backup of a Microsoft SQL Database
  createOnDemandMssqlBackup(
    # Input for V1CreateOnDemandMssqlBackup.
    input: CreateOnDemandMssqlBackupInput!): AsyncRequestStatus!

  # v5.0-v8.0: Create on-demand VM snapshot
  # v8.1+: Create on-demand virtual machine snapshot
  # 
  # Supported in v5.0+
  # v5.0-v5.3: Create an on-demand snapshot for the given VM ID
  # v6.0-v8.0: Create an on-demand snapshot for the given VM ID.
  # v8.1+: Create an on-demand snapshot for the given virtual machine ID.
  createOnDemandNutanixBackup(
    # Input for InternalCreateOnDemandNutanixBackup.
    input: CreateOnDemandNutanixBackupInput!): AsyncRequestStatus!

  # Create on demand database snapshot
  # 
  # Supported in v5.3+
  # Initiates a job to take an on demand full snapshot of a specified SAP HANA database object. The GET /sap_hana/db/request/{id} endpoint can be used to monitor the progress of the job.
  createOnDemandSapHanaBackup(
    # Input for V1CreateOnDemandSapHanaBackup.
    input: CreateOnDemandSapHanaBackupInput!): AsyncRequestStatus!

  # Create on demand storage snapshot
  # 
  # Supported in v9.1+
  # Initiates a job to take an on demand storage snapshot of a specified SAP HANA system object. The GET /sap_hana/db/request/{id} endpoint can be used to monitor the progress of the job.
  createOnDemandSapHanaStorageSnapshot(
    # Input for V1CreateOnDemandSapHanaStorageSnapshot.
    input: CreateOnDemandSapHanaStorageSnapshotInput!): AsyncRequestStatus!

  # Create on-demand snapshot for the Volume Group
  # 
  # Supported in v5.3+
  # Create an on-demand snapshot for the given Volume Group ID.
  createOnDemandVolumeGroupBackup(
    # Input for V1CreateOnDemandVolumeGroupBackup.
    input: CreateOnDemandVolumeGroupBackupInput!): AsyncRequestStatus!

  # Restore PDBs on an Oracle database
  # 
  # Supported in v8.0+
  # Initiates an asynchronous request to restore PDBs on an Oracle database from a specified snapshot or timestamp.
  createOraclePdbRestore(
    # Input for V1CreateOraclePdbRestore.
    input: CreateOraclePdbRestoreInput!): AsyncRequestStatus!

  # Create a new organization under global org.
  createOrg(
    # Input required for org creation.
    input: CreateOrgInput!): CreateOrgReply!

  # Generate a new authentication token for a user to switch organizations.
  createOrgSwitchSession(
    # Input for CreateOrgSwitchSessionRequest.
    input: CreateOrgSwitchSessionInput!): CreateOrgSwitchSessionReply!

  # Create a classification policy.
  createPolicy(input: CreatePolicyInput!): ClassificationPolicyDetail!

  # Creates reader type for RCS Azure archival location on a CDM cluster.
  createRcsReaderTarget(
    # Input for creating a new RCS reader target.
    input: CreateRcsReaderTargetInput!): Target!
  createRcsTarget(
    # Request for creating a new RCS Azure location.
    input: CreateRcsTargetInput!): Target!

  # Creates Rubrik Cloud Vault locations from given location template.
  createRcvLocationsFromTemplate(
    # Request argument for creating a new Rubrik Cloud Vault location.
    input: CreateRcvLocationsFromTemplateInput!): [Target!]!

  # Create RCV private endpoint approval request.
  createRcvPrivateEndpointApprovalRequest(
    # Input for creating a private endpoint approval request for an RCV location.
    input: CreateRcvPrivateEndpointApprovalRequestInput!): CreateRcvPrivateEndpointApprovalRequestReply!

  # Creates replication pairing between two Rubrik clusters.
  createReplicationPair(
    # Request to create a replication pair between two Rubrik clusters.
    input: CreateReplicationPairInput!): Void

  # This endpoint is deprecated.
  createRole(name: String!, description: String!,

    # Permissions in the role.
    permissions: [PermissionInput!]!): UUID!

  # Creates reader type for S3Compatible archival location on a CDM cluster.
  createS3CompatibleReaderTarget(
    # Input for creating a new S3Compatible reader target.
    input: CreateS3CompatibleReaderTargetInput!): Target!
  createS3CompatibleTarget(
    # Request for creating a new S3-compatible target.
    input: CreateS3CompatibleTargetInput!): Target!

  # Refresh SAP HANA system metadata
  # 
  # Supported in v5.3+
  # Initiates a job to refresh metadata of a SAP HANA system object. The GET /sap_hana/system/request/{id} endpoint can be used to monitor the progress of the job.
  createSapHanaSystemRefresh(
    # Input for V1CreateSapHanaSystemRefresh.
    input: CreateSapHanaSystemRefreshInput!): AsyncRequestStatus!

  # Create a scheduled report.
  createScheduledReport(input: CreateScheduledReportInput!): CreateScheduledReportReply!

  # Create a service account.
  createServiceAccount(
    # Input for creating of service account.
    input: CreateServiceAccountInput!): CreateServiceAccountReply!

  # Creates a reader location for a Tape archival location on a CDM cluster.
  createTapeReaderTarget(
    # Input for creating a new Tape reader archival location.
    input: CreateTapeReaderTargetInput!): Target!

  # Creates Tape archival location on a CDM cluster.
  createTapeTarget(
    # Request for creating a new Tape target.
    input: CreateTapeTargetInput!): Target!
  createUser(email: String!, roleIds: [String!]!): String!
  createUserWithPassword(
    # User credentials required to create a new user.
    input: CreateUserWithPasswordInput!): String!

  # Initiate instant recovery from vApp snapshots.
  createVappsInstantRecovery(
    # List of vApp snapshots to be instantly recovered.
    input: CreateVappsInstantRecoveryInput!): CreateVappsInstantRecoveryReply!

  # Create a multi-tag filter for vSphere tags
  # 
  # Supported in v7.0+
  # Create a filter consisting of vSphere tags joined with logical operators.
  createVsphereAdvancedTag(
    # Input for V1CreateFilter.
    input: CreateVsphereAdvancedTagInput!): CreateVsphereAdvancedTagReply!

  # Add a vCenter server.
  createVsphereVcenter(
    # Input for V2CreateVcenterV2.
    input: CreateVsphereVcenterInput!): CreateVsphereVcenterReply!

  # Create a webhook.
  createWebhook(
    # The webhook configuration to create.
    input: CreateWebhookInput!): CreateWebhookReply!

  # Deactivate a custom analyzer.
  deactivateCustomAnalyzer(analyzerId: String!): String!

  # Deactivate a classification policy.
  deactivatePolicy(policyId: String!, runAsync: Boolean!): [String!]!

  # Delete AD Groups from O365 hierarchy.
  deleteAdGroupsFromHierarchy(
    # The input for the DeleteAdGroupsFromHierarchy mutation.
    input: DeleteAdGroupsFromHierarchyInput!): RequestStatus!

  # Delete Oracle database snapshots
  # 
  # Supported in v5.0+
  # Delete all snapshots for a specified Oracle database object. For the operation to succeed the referenced database must not be assigned to an SLA Domain.
  deleteAllOracleDatabaseSnapshots(
    # Input for InternalDeleteAllOracleDbSnapshots.
    input: DeleteAllOracleDatabaseSnapshotsInput!): Void
  deleteAwsComputeSetting(
    # Request arguments for deleting a Aws Compute Setting.
    input: DeleteAwsComputeSettingInput!): Void @deprecated(reason: "This mutation is no longer supported.")

  # Deletes AWS Exocompute configs.
  deleteAwsExocomputeConfigs(
    # List of AWS exocompute configuration IDs.
    input: DeleteAwsExocomputeConfigsInput!): DeleteAwsExocomputeConfigsReply!

  # Deletes an Azure AD directory.
  deleteAzureAdDirectory(
    # Input to delete the Azure AD directory.
    input: DeleteAzureAdDirectoryInput!): CreateOnDemandJobReply!

  # Delete the Azure Subscriptions cloud account for the given feature.
  deleteAzureCloudAccount(
    # Input for deleting an Azure Cloud Account.
    input: DeleteAzureCloudAccountInput!): DeleteAzureCloudAccountReply!

  # Delete Exocompute configurations for an Azure Cloud Account.
  deleteAzureCloudAccountExocomputeConfigurations(
    # Input for adding Exocompute configurations for an Azure Cloud Account.
    input: DeleteAzureCloudAccountExocomputeConfigurationsInput!): DeleteAzureCloudAccountExocomputeConfigurationsReply!

  # Delete the Azure Subscriptions cloud account for the given feature without OAuth.
  deleteAzureCloudAccountWithoutOauth(
    # Input for deleting an Azure Cloud Account without OAuth.
    input: DeleteAzureCloudAccountWithoutOauthInput!): DeleteAzureCloudAccountWithoutOauthReply!

  # Delete a cassandra source.
  deleteCassandraSource(
    # Input for V2DeleteMosaicSource.
    input: DeleteMosaicSourceInput!): MosaicAsyncResponse!

  # Delete Certificate.
  deleteCertificate(
    # Certificate ID.
    certificateId: Long!): Boolean! @deprecated(reason: "Deprecated. Use deleteGlobalCertificate instead.")

  # Delete cloud native label rule.
  deleteCloudNativeLabelRule(
    # Input required to delete a label rule.
    input: DeleteCloudNativeLabelRuleInput!): Void

  # Delete cloud native tag rule.
  deleteCloudNativeTagRule(
    # Input required to delete a tag rule.
    input: DeleteCloudNativeTagRuleInput!): Void

  # Deletes the Rubrik Security Cloud on-demand snapshot by ID.
  deleteCloudWorkloadSnapshot(
    # Input to delete Rubrik Security Cloud snapshot.
    input: DeleteCloudWorkloadSnapshotInput!): Boolean!

  # Delete Certificate Signing Request.
  deleteCsr(
    # Certificate Signing Request IDs.
    input: DeleteCsrInput!): Void

  # Delete a custom report.
  deleteCustomReport(input: DeleteCustomReportInput!): Void

  # Delete Db2 database
  # 
  # Supported in v8.1+
  # Deletes a Db2 database.
  deleteDb2Database(
    # Input for V1DeleteDb2Database.
    input: DeleteDb2DatabaseInput!): AsyncRequestStatus!

  # Mutation to delete existing Db2 instance.
  deleteDb2Instance(
    # Input for V1DeleteDb2Instance.
    input: DeleteDb2InstanceInput!): AsyncRequestStatus!

  # Delete specific distribution list digests.
  deleteDistributionListDigestBatch(
    # Input for deleting distribution list digests.
    input: DeleteDistributionListDigestBatchInput!): Void

  # Delete event digests for specific recipients.
  deleteEventDigest(
    # Input for deleting an event digest.
    input: DeleteEventDigestInput!): Void

  # Request to delete a mount for the Microsoft Exchange database snapshot
  # 
  # Supported in v8.0+
  # Request to delete a mount for Microsoft Exchange database snapshot.
  deleteExchangeSnapshotMount(
    # Input for V1DeleteExchangeSnapshotMount.
    input: DeleteExchangeSnapshotMountInput!): AsyncRequestStatus!

  # Delete a failover cluster
  # 
  # Supported in v5.2+
  # Delete a failover cluster.
  deleteFailoverCluster(
    # Input for V1DeleteFailoverCluster.
    input: DeleteFailoverClusterInput!): ResponseSuccess!

  # Delete a failover cluster
  # 
  # Supported in v5.2+
  # Delete a failover cluster.
  deleteFailoverClusterApp(
    # Input for V1DeleteFailoverClusterApp.
    input: DeleteFailoverClusterAppInput!): ResponseSuccess!
  deleteFilesetSnapshots(
    # Input for V1DeleteFilesetSnapshots.
    input: DeleteFilesetSnapshotsInput!): ResponseSuccess!

  # Delete an existing global certificate.
  deleteGlobalCertificate(
    # Input to delete a global certificate.
    input: DeleteGlobalCertificateInput!): DeleteGlobalCertificateReply!

  # Delete guest OS credentials.
  deleteGuestCredentialById(
    # Input for InternalDeleteGuestCredentialById.
    input: DeleteGuestCredentialByIdInput!): Boolean!

  # Delete VM snapshot
  # 
  # Supported in v5.0+
  # Delete a snapshot by expiring it. Snapshot is expired only if it is a manual snapshot or a snapshot of an unprotected vm.
  deleteHypervVirtualMachineSnapshot(
    # Input for InternalDeleteHypervVirtualMachineSnapshot.
    input: DeleteHypervVirtualMachineSnapshotInput!): RequestSuccess!

  # Requst to delete a live mount
  # 
  # Supported in v5.0+
  # Create a request to delete a live mount.
  deleteHypervVirtualMachineSnapshotMount(
    # Input for InternalDeleteHypervVirtualMachineSnapshotMount.
    input: DeleteHypervVirtualMachineSnapshotMountInput!): AsyncRequestStatus!

  # Delete the integration with the specified integration ID.
  deleteIntegration(
    # Delete integration input.
    input: DeleteIntegrationInput!): Void

  # Delete a batch of integrations.
  deleteIntegrations(
    # Delete integrations input.
    input: DeleteIntegrationsInput!): Void
  deleteLdapPrincipals(principalIds: [String!]!): Boolean!

  # Delete a specified log shipping configuration.
  deleteLogShipping(
    # Input for V1DeleteLogShippingConfiguration.
    input: DeleteLogShippingInput!): AsyncRequestStatus!

  # Delete a Managed Volume
  # 
  # Supported in v7.0+
  # Delete a Managed Volume.
  deleteManagedVolume(
    # Input for V1DeleteManagedVolumeV1.
    input: DeleteManagedVolumeInput!): DeleteManagedVolumeReply!

  # Delete an exported Managed Volume snapshot
  # 
  # Supported in v7.0+
  # Deletes an exported Managed Volume snapshot, identified by the snapshot ID.
  deleteManagedVolumeSnapshotExport(
    # Input for V1DeleteManagedVolumeSnapshotExportV1.
    input: DeleteManagedVolumeSnapshotExportInput!): AsyncRequestStatus!

  # Delete a MongoDB source
  # 
  # Supported in v8.1+
  # Deletes a specific MongoDB source.
  deleteMongoSource(
    # Input for V1DeleteMongoSource.
    input: DeleteMongoSourceInput!): AsyncRequestStatus!

  # Remove a registered MongoDB source from NoSQL cluster.
  deleteMongodbSource(
    # Input for V2DeleteMosaicSource.
    input: DeleteMosaicSourceInput!): MosaicAsyncResponse!

  # Remove the store by store_name
  # 
  # Supported in m3.2.0-m4.2.0
  # Remove a store from Mosaic cluster.
  deleteMosaicStore(
    # Input for V2DeleteMosaicStore.
    input: DeleteMosaicStoreInput!): MosaicAsyncResponse!

  # Delete snapshots of a Microsoft SQL Database.
  deleteMssqlDbSnapshots(
    # Input for V1DeleteMssqlDbSnapshots.
    input: DeleteMssqlDbSnapshotsInput!): ResponseSuccess!

  # Delete a Live Mount of a SQL Server database
  # 
  # Supported in v5.0+
  # Create an async request to delete a Live Mount of a SQL Server database. Poll the task status by using /mssql/request/{id}.
  deleteMssqlLiveMount(
    # Input for V1CreateMssqlUnmount.
    input: DeleteMssqlLiveMountInput!): AsyncRequestStatus!

  # Delete a registered NAS system
  # 
  # Supported in v7.0+
  # Delete a NAS system by specifying the NAS system ID.
  deleteNasSystem(
    # Input for V1DeleteNasSystem.
    input: DeleteNasSystemInput!): AsyncRequestStatus!

  # Remove Nutanix cluster
  # 
  # Supported in v5.0+
  # Initiates an asynchronous job to remove a Nutanix cluster object. The Nutanix cluster cannot have VMs mounted through the Rubrik cluster.
  deleteNutanixCluster(
    # Input for InternalDeleteNutanixCluster.
    input: DeleteNutanixClusterInput!): AsyncRequestStatus!

  # Remove a Live Mount of a Nutanix virtual machine snapshot
  # 
  # Supported in v6.0+
  # Initiates a request to remove a Live Mount of a Nutanix virtual machine snapshot identified by the ID of the Live Mount.
  deleteNutanixMountV1(
    # Input for V1CreateNutanixUnmount.
    input: DeleteNutanixMountV1Input!): AsyncRequestStatus!

  # Remove Nutanix Prism Central
  # 
  # Supported in v9.0+
  # Initiates an asynchronous job to remove a Nutanix Prism Central object. The Nutanix Clusters attached to the Prism Central cannot have Virtual Machines mounted through the Rubrik cluster.
  deleteNutanixPrismCentral(
    # Input for InternalDeleteNutanixPrismCentral.
    input: DeleteNutanixPrismCentralInput!): BatchAsyncRequestStatus!

  # v5.0-v8.0: Delete VM snapshot
  # v8.1+: Delete virtual machine snapshot
  # 
  # Supported in v5.0+
  # v5.0-v8.0: Delete a snapshot by expiring it. Snapshot is expired only if it is a manual snapshot or a snapshot of an unprotected vm.
  # v8.1+: Delete a snapshot by expiring it. Snapshot is expired only if it is a manual snapshot or a snapshot of an unprotected virtual machine.
  deleteNutanixSnapshot(
    # Input for InternalDeleteNutanixSnapshot.
    input: DeleteNutanixSnapshotInput!): RequestSuccess!

  # v5.0-v8.0: Delete all snapshots of VM
  # v8.1+: Delete all snapshots of virtual machine
  # 
  # Supported in v5.0+
  # Delete all snapshots of a virtual machine.
  deleteNutanixSnapshots(
    # Input for InternalDeleteNutanixSnapshots.
    input: DeleteNutanixSnapshotsInput!): RequestSuccess!

  # Deletes an O365 Azure AD App from the account.
  deleteO365AzureApp(o365AppClientId: String!, o365AppType: String!): RequestStatus!

  # Deletes an O365 org from the account.
  deleteO365Org(
    # Org UUID.
    orgId: UUID!): CreateOnDemandJobReply!

  # Deletes the service account for an org.
  deleteO365ServiceAccount(
    # Org UUID.
    orgId: UUID!): RequestStatus!

  # Delete an Oracle database Live Mount
  # 
  # Supported in v5.0+
  # Request an asynchronous job to delete a specified Live Mount of an Oracle database snapshot. Poll the job status by using /oracle/request/{id}.
  deleteOracleMount(
    # Input for InternalCreateOracleUnmount.
    input: DeleteOracleMountInput!): AsyncRequestStatus!

  # Delete an organization.
  deleteOrg(
    # Input required for org delete.
    input: DeleteOrgInput!): Boolean!

  # Deletes replication pairing between two Rubrik clusters.
  deleteReplicationPair(
    # Request for deleting an existing replication pair.
    input: DeleteReplicationPairInput!): Void
  deleteRole(
    # ID of the role.
    roleId: String!): Boolean!

  # Delete a particular full snapshot of a SAP HANA database
  # 
  # Supported in v5.3+
  # Initiates a request to delete a particular full snapshot of a SAP HANA database. If the log retention period for the database is still in effect, the snapshot will be deleted when the log retention period ends.
  deleteSapHanaDbSnapshot(
    # Input for V1DeleteSapHanaDbSnapshot.
    input: DeleteSapHanaDbSnapshotInput!): ResponseSuccess! @deprecated(reason: "Please use deleteUnmanagedSnapshots mutation instead or use the RSC UI delete button from snapshots page")

  # Delete a SAP HANA system
  # 
  # Supported in v5.3+
  # Initiates a job to delete a SAP HANA system object. GET /sap_hana/system/request/{id} endpoint can be used to monitor the progress of the job.
  deleteSapHanaSystem(
    # Input for V1DeleteSapHanaSystem.
    input: DeleteSapHanaSystemInput!): AsyncRequestStatus!

  # Delete a scheduled report.
  deleteScheduledReport(input: DeleteScheduledReportInput!): Void

  # Delete specified service accounts.
  deleteServiceAccountsFromAccount(
    # Input for deleting service accounts.
    input: DeleteServiceAccountsFromAccountInput!): Boolean!

  # Delete Active Directory from Rubrik
  # 
  # Supported in v5.0+
  # Delete Active Directory from Rubrik.
  deleteSmbDomain(
    # Input for InternalDeleteSmbDomain.
    input: DeleteSmbDomainInput!): Void

  # Delete storage arrays from Rubrik clusters.
  deleteStorageArrays(
    # List of Storage arrays to delete.
    input: DeleteStorageArraysInput!): DeleteStorageArraysReply!

  # Delete the specified syslog export rule
  # 
  # Supported in v5.1+
  # Delete the syslog export rule specified by the given id.
  deleteSyslogExportRule(
    # Input for V1DeleteSyslogExportRule.
    input: DeleteSyslogExportRuleInput!): Void

  # Deletes an archival location.
  deleteTarget(
    # Request for deleting an archival location.
    input: DeleteTargetInput!): Void

  # Deletes mapping of a target.
  deleteTargetMapping(
    # Request for deleting the mapping of a target.
    input: DeleteTargetMappingInput!): Void

  # Reset TOTP configuration for a user. Return true when the operation succeeds.
  deleteTotpConfig(
    # Specifies the user ID.
    userId: String!): Boolean!

  # Reset TOTP configuration for users in batch. Return true when the operation succeeds.
  deleteTotpConfigs(
    # Input required for resetting TOTP for users in batch.
    input: DeleteTotpConfigsInput!): Boolean!
  deleteUsersFromAccount(
    # List of IDs.
    ids: [String!]!): Boolean!

  # Requst to delete a mount
  # 
  # Supported in v5.0+
  # Create a request to delete a mount. If there are volumes mounted on a target host, this will use best-effort to unmount those volumes from the host, and proceed to unmount storage on Rubrik.
  deleteVolumeGroupMount(
    # Input for InternalDeleteVolumeGroupSnapshotMount.
    input: DeleteVolumeGroupMountInput!): AsyncRequestStatus!

  # Remove the multi-tag filter
  # 
  # Supported in v7.0+
  # Remove the multi-tag filter.
  deleteVsphereAdvancedTag(
    # Input for V1DeleteFilter.
    input: DeleteVsphereAdvancedTagInput!): RequestSuccess!

  # Delete a Live Mount VM
  # 
  # Supported in v5.0+
  # Create a request to delete a Live Mount virtual machine.
  deleteVsphereLiveMount(
    # Input for V1CreateUnmount.
    input: DeleteVsphereLiveMountInput!): AsyncRequestStatus!

  # Delete a webhook.
  deleteWebhook(
    # The webhook to delete from the account.
    input: DeleteWebhookInput!): Void

  # A single Rubrik cluster can be the replication target for multiple source Rubrik clusters. For each source cluster specified, this resumes replication from that source cluster to the target cluster.
  disableReplicationPause(
    # Input for V1DisablePerLocationPause.
    input: DisableReplicationPauseInput!): ResponseSuccess!

  # Disables a Rubrik Support representative's access to the customer's account.
  disableSupportUserAccess(
    # Input for the request to disable a Rubrik Support representative to access customer account.
    input: DisableSupportUserAccessInput!): Void

  # Disables an Archival Location.
  disableTarget(
    # Request for disabling an Archival Location.
    input: DisableTargetInput!): DisableTargetReply!

  # On-demand discovery of a Db2 instance
  # 
  # Supported in v7.0+
  # Initiates an on-demand job to discover a Db2 instance.
  discoverDb2Instance(
    # Input for V1DiscoverDb2Instance.
    input: DiscoverDb2InstanceInput!): AsyncRequestStatus!

  # Discover a MongoDB source on-demand
  # 
  # Supported in v8.1+
  # Initiates an on-demand job to discover a MongoDB source.
  discoverMongoSource(
    # Input for V1DiscoverMongoSource.
    input: DiscoverMongoSourceInput!): AsyncRequestStatus!

  # Download a snapshot from a remote target
  # 
  # Supported in v9.0+
  # Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a remote target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
  downloadActiveDirectorySnapshotFromLocation(
    # Input for V1DownloadActiveDirectorySnapshotFromLocation.
    input: DownloadActiveDirectorySnapshotFromLocationInput!): AsyncRequestStatus!

  # Download audit log in CSV format asynchronously.
  downloadAuditLogCsvAsync(
    # Configuration parameters for the audit log.
    input: DownloadAuditLogCsvAsyncInput!): AsyncDownloadReply!

  # Download Db2 database snapshot from archive
  # 
  # Supported in v8.0+
  # Downloads a specific Db2 database snapshot from the specified archival location.
  downloadDb2Snapshot(
    # Input for V1DownloadDb2Snapshot.
    input: DownloadDb2SnapshotInput!): AsyncRequestStatus!

  # Download Db2 database snapshots from archive for a point in time recovery
  # 
  # Supported in v8.0+
  # Downloads the most recent full snapshot and the log snapshots taken after the full snapshot, required for the point in time recovery of a Db2 database.
  downloadDb2SnapshotsForPointInTimeRecovery(
    # Input for V1DownloadDb2SnapshotsForPointInTimeRecovery.
    input: DownloadDb2SnapshotsForPointInTimeRecoveryInput!): AsyncRequestStatus!

  # Download exchange database snapshot from archive
  # 
  # Supported in v8.0+
  # Downloads a Microsoft Exchange database snapshot from the specified archival location.
  downloadExchangeSnapshot(
    # Input for V1DownloadExchangeSnapshot.
    input: DownloadExchangeSnapshotInput!): AsyncRequestStatus!

  # v5.0-v8.0: Download files from a Nutanix VM backup
  # v8.1+: Download files from a Nutanix virtual machine backup
  # 
  # Supported in v5.0+
  # v5.0-v8.0: Start an asynchronous job to download multiple files and folders from a specified Nutanix VM backup. The response returns an asynchronous request ID. Get the URL for downloading the zip file including the specific files/folders by sending a GET request to 'nutanix/vm/request/{id}'.
  # v8.1+: Start an asynchronous job to download multiple files and folders from a specified Nutanix virtual machine backup. The response returns an asynchronous request ID. Get the URL for downloading the zip file including the specific files/folders by sending a GET request to 'nutanix/vm/request/{id}'.
  downloadFilesNutanixSnapshot(
    # Input for InternalCreateNutanixDownloadFilesJob.
    input: DownloadFilesNutanixSnapshotInput!): AsyncRequestStatus!
  downloadFilesetSnapshot(
    # Input for V1CreateDownloadFilesetSnapshotFromCloud.
    input: DownloadFilesetSnapshotInput!): AsyncRequestStatus!

  # Download a snapshot from a replication target
  # 
  # Supported in v7.0+
  # Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
  downloadFilesetSnapshotFromLocation(
    # Input for V2DownloadFilesetSnapshotFromLocation.
    input: DownloadFilesetSnapshotFromLocationInput!): AsyncRequestStatus!

  # Download a snapshot from a replication target
  # 
  # Supported in v7.0+
  # Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
  downloadHypervSnapshotFromLocation(
    # Input for DownloadHyperVSnapshotFromLocationRequest.
    input: DownloadHypervSnapshotFromLocationInput!): AsyncRequestStatus!

  # Creates a download from archival request
  # 
  # Supported in v5.0+
  # Download a snapshot from archival.
  downloadHypervVirtualMachineSnapshot(
    # Input for InternalDownloadHypervVirtualMachineSnapshot.
    input: DownloadHypervVirtualMachineSnapshotInput!): AsyncRequestStatus!

  # Download files from a Hyper-V VM backup
  # 
  # Supported in v5.0+
  # Start an asynchronous job to download multiple files and folders from a specified Hyper-V VM backup. The response returns an asynchrounous request ID. Get the URL for downloading the ZIP file including the specific files/folders by sending a GET request to 'hyperv/vm/request/{id}'.
  downloadHypervVirtualMachineSnapshotFiles(
    # Input for DownloadHypervVMSnapshotFilesRequest.
    input: DownloadHypervVirtualMachineSnapshotFilesInput!): AsyncRequestStatus!

  # Download files from a managed volume backup
  # 
  # Supported in v5.0+
  # Start an asynchronous job to download multiple files and folders from a specified managed volume backup. The response returns an asynchronous request ID. Get the URL for downloading the ZIP file including the specific files/folders by sending a GET request to 'managed-volume/request/{id}'.
  downloadManagedVolumeFiles(
    # Input for InternalCreateManagedVolumeDownloadFilesJob.
    input: DownloadManagedVolumeFilesInput!): AsyncRequestStatus!

  # Download a snapshot from a remote target
  # 
  # Supported in v7.0+
  # Initiates a job to download a snapshot from the specified
  # location when the snapshot does not exist locally.
  # The specified location has to be a remote target connected to this Rubrik cluster.
  downloadManagedVolumeFromLocation(
    # Input for V1ManagedVolumeDownloadFromLocation.
    input: DownloadManagedVolumeFromLocationInput!): AsyncRequestStatus!

  # Downloads a list of snapshot and log backups from a Microsoft SQL database
  # 
  # Supported in v5.2+
  # Downloads a list of snapshot and log backups from a Microsoft SQL database.
  downloadMssqlDatabaseBackupFiles(
    # Input for V1CreateDownloadMssqlBackupFilesById.
    input: DownloadMssqlDatabaseBackupFilesInput!): AsyncRequestStatus!

  # Download Microsoft SQL Database backup files from archival location.
  downloadMssqlDatabaseFilesFromArchivalLocation(
    # Input for V1DownloadFromArchive.
    input: DownloadMssqlDatabaseFilesFromArchivalLocationInput!): AsyncRequestStatus!

  # Creates a download from archival request
  # 
  # Supported in v5.0+
  # Download a snapshot from archival.
  downloadNutanixSnapshot(
    # Input for InternalCreateDownloadSnapshotForNutanix.
    input: DownloadNutanixSnapshotInput!): AsyncRequestStatus!

  # Download a snapshot from a replication target
  # 
  # Supported in v7.0+
  # Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
  downloadNutanixVmFromLocation(
    # Input for V1DownloadNutanixVmFromLocation.
    input: DownloadNutanixVmFromLocationInput!): AsyncRequestStatus!

  # Schedule a download CSV job for cross object files.
  downloadObjectFilesCsv(
    # Request for scheduling a download CSV job for cross object files.
    input: DownloadObjectFilesCsvInput!): DownloadCsvReply!

  # Schedule a download CSV job for objects list.
  downloadObjectsListCsv(
    # Request for scheduling a download CSV job for objects list.
    input: DownloadObjectsListCsvInput!): DownloadCsvReply!

  # Download Oracle snapshot from cloud
  # 
  # Supported in v5.0+
  # Create an asynchronous job to download an Oracle database snapshot and associated logs using the snapshot ID. The response includes the ID of the asynchronous job request. To see the status of the request, poll /oracle/request/{id}.
  downloadOracleDatabaseSnapshot(
    # Input for InternalDownloadOracleDbSnapshot.
    input: DownloadOracleDatabaseSnapshotInput!): AsyncRequestStatus!

  # Download a report in CSV format asynchronously.
  downloadReportCsvAsync(input: DownloadReportCsvAsyncInput!): AsyncDownloadReply!

  # Download a report asynchronously in PDF format.
  downloadReportPdfAsync(input: DownloadReportPdfAsyncInput!): AsyncDownloadReply!

  # Download file results in CSV format.
  downloadResultsCsv(crawlId: String!, downloadFilter: DownloadResultsCsvFiltersInput): DownloadResultsCsvReply!

  # Download SAP HANA database snapshot from archive
  # 
  # Supported in v8.0+
  # Downloads a specific SAP HANA database snapshot from the specified archival location.
  downloadSapHanaSnapshot(
    # Input for V1DownloadSapHanaSnapshot.
    input: DownloadSapHanaSnapshotInput!): AsyncRequestStatus!

  # Download a snapshot from the remote location
  # 
  # Supported in v8.1+
  # Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location can be replication target or archival location. If SLA Domain is not selected, the snapshot will be retained forever.
  downloadSapHanaSnapshotFromLocation(
    # Input for V1DownloadSapHanaSnapshotFromLocation.
    input: DownloadSapHanaSnapshotFromLocationInput!): AsyncRequestStatus!

  # Download SAP HANA database snapshots from archive for a point in time recovery
  # 
  # Supported in v8.0+
  # Downloads the most recent full snapshot and the log snapshots taken after the full snapshot, required for the point in time recovery of an SAP HANA database.
  downloadSapHanaSnapshotsForPointInTimeRecovery(
    # Input for V1DownloadSapHanaSnapshotsForPointInTimeRecovery.
    input: DownloadSapHanaSnapshotsForPointInTimeRecoveryInput!): AsyncRequestStatus!

  # Download snapshot policy results in CSV format.
  downloadSnapshotResultsCsv(snappableFid: String!, snapshotFid: String!, downloadFilter: DownloadResultsCsvFiltersInput): DownloadCsvReply!

  # Download threat hunt result in CSV format.
  downloadThreatHuntCsv(
    # The ID of the threat hunt.
    input: DownloadThreatHuntCsvInput!): DownloadThreatHuntCsvReply!

  # Schedule a download CSV job for a user's activity.
  downloadUserActivityCsv(
    # Request for scheduling a download CSV job for a user's activity.
    input: DownloadUserActivityCsvInput!): DownloadCsvReply!

  # Schedule a download CSV job for user activity on a specific file.
  downloadUserFileActivityCsv(
    # Request for scheduling a download CSV job for a user activity on a specific file.
    input: DownloadUserFileActivityCsvInput!): DownloadCsvReply!

  # Download files from Volume Group snapshot
  # 
  # Supported in v5.0+
  # Create a download files request.
  downloadVolumeGroupSnapshotFiles(
    # Input for downloadVolumeGroupSnapshotFiles.
    input: DownloadVolumeGroupSnapshotFilesInput!): AsyncRequestStatus!

  # Download a snapshot from a replication target
  # 
  # Supported in v7.0+
  # Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location has to be a replication target connected to this Rubrik cluster. If an SLA Domain is not provided, the snapshot will be retained forever.
  downloadVolumeGroupSnapshotFromLocation(
    # Input for V1DownloadVolumeGroupSnapshotFromLocation.
    input: DownloadVolumeGroupSnapshotFromLocationInput!): AsyncRequestStatus!

  # Download Virtual Machine files from a snapshot
  # 
  # Supported in v9.0+
  # Start an asynchronous job to download multiple Virtual Machine files, such as .vmdk, .vmx, and .nvram files, from the specified Virtual Machine snapshot.
  downloadVsphereVirtualMachineFiles(
    # Input for V1CreateDownloadVirtualMachineFileJob.
    input: DownloadVsphereVirtualMachineFilesInput!): AsyncRequestStatus!

  # Enable/disable auto fmd upload on given cluster.
  enableAutomaticFmdUpload(
    # Request for enableAutomaticFmdUpload.
    input: EnableAutomaticFmdUploadInput!): EnableAutomaticFmdUploadReply!

  # Enable/ Disable App consistency for a VM
  enableDisableAppConsistency(
    # Input required to enable application consistent snapshots.
    input: EnableDisableAppConsistencyInput!): EnableDisableAppConsistencyReply!

  # Enables SharePoint protection in the exocompute cluster.
  enableO365SharePoint(
    # Input to enable o365 sharepoint.
    input: EnableO365SharePointInput!): RequestStatus!

  # Enables Teams protection in the exocompute cluster.
  enableO365Teams(exocomputeClusterId: String!): RequestStatus!

  # A single Rubrik cluster can be the replication target for multiple source Rubrik clusters. For each source cluster specified, this pauses replication from that source cluster to the target cluster.
  enableReplicationPause(
    # Input for V1EnablePerLocationPause.
    input: EnablePerLocationPauseInputVariable!): ResponseSuccess!

  # Enables a Rubrik Support representative's access to the customer's account.
  enableSupportUserAccess(
    # Input for the request to enable a Rubrik Support representative to access customer account.
    input: EnableSupportUserAccessInput!): Void

  # Enables an Archival Location.
  enableTarget(
    # Request for enabling an Archival Location.
    input: EnableTargetInput!): EnableTargetReply!

  # Enable or disable Threat Monitoring on a Rubrik cluster.
  enableThreatMonitoring(
    # Configuration to enable or disable Threat Monitoring for a Rubrik cluster.
    input: EnableThreatMonitoringInput!): Void

  # End Managed Volume snapshot
  # 
  # Supported in v7.0+
  # Close a Managed Volume for writes. A snapshot will be created containing all writes since the last begin-snapshot call.
  endManagedVolumeSnapshot(
    # Input for V1CloseWritesV1.
    input: EndManagedVolumeSnapshotInput!): EndManagedVolumeSnapshotReply!

  # Mark AWS Native EBS Volumes to be excluded from EC2 Instance snapshot. By default, all EBS Volumes are marked as included.
  excludeAwsNativeEbsVolumesFromSnapshot(
    # Input to mark EBS volumes to be excluded for EC2 snapshot.
    input: ExcludeAwsNativeEbsVolumesFromSnapshotInput!): Void

  # Exclude the Managed Disks from snapshots, for the specified virtual machines.
  excludeAzureNativeManagedDisksFromSnapshot(
    # Input for excluding Azure Native Managed Disks from Snapshot.
    input: ExcludeAzureNativeManagedDisksFromSnapshotInput!): Void

  # Exclude Sharepoint site objects from protection.
  excludeSharepointObjectsFromProtection(
    # The input for the operation to exclude Sharepoint objects from protection.
    input: ExcludeSharepointObjectsFromProtectionInput!): Void

  # Exclude or include virtual disks during snapshot.
  excludeVmDisks(
    # Input to include/exclude disk for taking snapshot.
    input: [ExcludeVmDisksInput!]!): RequestSuccess!

  # Expire downloaded snapshots of a Db2 database
  # 
  # Supported in v8.0+
  # Requests an asynchronous job to expire all downloaded data and log snapshots. You can specify a begin time or an end time or both to provide a time range to expire only the downloaded data and log snapshots that were taken within the specified time range. The time is relative to when the snapshot was originally taken, not when it was downloaded. You can also configure a flag to expire only the log snapshots.
  expireDownloadedDb2Snapshots(
    # Input for V1ExpireDownloadedDb2Snapshots.
    input: ExpireDownloadedDb2SnapshotsInput!): AsyncRequestStatus!

  # Expire downloaded snapshots of an SAP HANA database
  # 
  # Supported in v8.0+
  # Requests an asynchronous job to expire all downloaded data and log snapshots. You can specify a begin time or an end time or both to provide a time range to expire only the downloaded data and log snapshots that were taken within the specified time range. The time is relative to when the snapshot was originally taken, not when it was downloaded. You can also configure a flag to expire only the log snapshots.
  expireDownloadedSapHanaSnapshots(
    # Input for V1ExpireDownloadedSapHanaSnapshots.
    input: ExpireDownloadedSapHanaSnapshotsInput!): AsyncRequestStatus!

  # Export VM snapshot
  # 
  # Supported in v5.0+
  # Export snapshot of a vm.
  exportHypervVirtualMachine(
    # Input for ExportHypervVirtualMachineRequest.
    input: ExportHypervVirtualMachineInput!): AsyncRequestStatus!

  # Export Kubernetes Namespace snapshot.
  exportK8sNamespace(
    # Request for exporting a Kubernetes namespace snapshot.
    input: ExportK8sNamespaceInput!): CreateOnDemandJobReply!

  # Create a request to export a snapshot
  # 
  # Supported in v5.0+
  # Export a managed volume snapshot as a share.
  exportManagedVolumeSnapshot(
    # Input for the mutation to export a Managed Volume snapshot.
    input: ExportManagedVolumeSnapshotInput!): AsyncRequestStatus!

  # Create a request to export a Microsoft SQL database.
  exportMssqlDatabase(
    # Input for V1CreateExportMssqlDb.
    input: ExportMssqlDatabaseInput!): AsyncRequestStatus!

  # v5.0-v8.0: Export VM snapshot
  # v8.1+: Export virtual machine snapshot
  # 
  # Supported in v5.0+
  # v5.0-v8.0: Export snapshot of a vm.
  # v8.1+: Export snapshot of a virtual machine.
  exportNutanixSnapshot(
    # Input for InternalCreateNutanixExport.
    input: ExportNutanixSnapshotInput!): AsyncRequestStatus!

  # Exports an Exchange mailbox.
  exportO365Mailbox(exportConfig: ExportO365MailboxInput!): CreateOnDemandJobReply!

  # Export an Oracle database
  # 
  # Supported in v5.0+
  # Request an asynchronous job to export an Oracle database from a specified snapshot or timestamp.
  exportOracleDatabase(
    # Input for ExportOracleDatabase.
    input: ExportOracleDatabaseInput!): AsyncRequestStatus!

  # Export an Oracle tablespace
  # 
  # Supported in v5.0+
  # Request an asynchronous job to export an Oracle tablespace from a specified snapshot or timestamp.
  exportOracleTablespace(
    # Input for InternalCreateExportOracleTablespace.
    input: ExportOracleTablespaceInput!): AsyncRequestStatus!

  # Create a request to export a snapshot and mount it on a host
  # 
  # Supported in v5.3+
  # Export a managed volume snapshot as a share and mount it on a given host.
  exportSlaManagedVolumeSnapshot(
    # Input for the mutation to export an SLA Managed Volume snapshot.
    input: ExportSlaManagedVolumeSnapshotInput!): AsyncRequestStatus!

  # Download files from a fileset backup
  # 
  # Supported in v5.0+
  # Start an asynchronous job to download multiple files and folders from a specified fileset backup. The response returns an asynchronous request ID. Get the URL for downloading the ZIP file including the specific files/folders by sending a GET request to 'fileset/request/{id}'.
  filesetDownloadSnapshotFiles(
    # Input for fileset download snapshot files.
    input: FilesetDownloadSnapshotFilesInput!): AsyncRequestStatus!

  # Create an export job to export multiple files or directories
  # 
  # Supported in v5.0+
  # Starts a job that exports one or more files or folders from a fileset backup to the destination host. Returns the job status as of the job creation time. This job status includes the job ID.
  filesetExportSnapshotFiles(
    # Input for fileset download snapshot files.
    input: FilesetExportSnapshotFilesInput!): AsyncRequestStatus!

  # Create restore job to restore multiple files/directories
  # 
  # Supported in v5.0+
  # Initiate a job to copy one or more file or folder from a fileset backup to the source host. Returns the job instance ID.
  filesetRecoverFiles(
    # Input for fileset recover files.
    input: FilesetRecoverFilesInput!): AsyncRequestStatus!

  # Process and finalize deletion of cloud account is the last step in deletion of a feature from cloud account. This endpoint is a MUST for deletion of disconnected features.
  finalizeAwsCloudAccountDeletion(
    # Arguments to process AWS cloud accounts for deletion.
    input: FinalizeAwsCloudAccountDeletionInput!): FinalizeAwsCloudAccountDeletionReply!

  # Process cloud account. This is the second step after validate and create in addition of a feature for cloud account.The CloudFormation stack should be created after this step using the CloudFormation URL provided in the first step.
  finalizeAwsCloudAccountProtection(
    # Arguments for process cloud accounts.
    input: FinalizeAwsCloudAccountProtectionInput!): FinalizeAwsCloudAccountProtectionReply!

  # Adds a new cloud account for the GCP project which is not already added.
  gcpCloudAccountAddManualAuthProject(
    # Input required to add a GCP cloud account manually.
    input: GcpCloudAccountAddManualAuthProjectInput!): Boolean!

  # Add cloud account for GCP projects for the given features.
  gcpCloudAccountAddProjects(
    # Input required to add a GCP cloud account.
    input: GcpCloudAccountAddProjectsInput!): GcpCloudAccountAddProjectsReply!

  # Delete cloud account for the given GCP project cloud account IDs and feature.
  gcpCloudAccountDeleteProjects(
    # Input required to delete a list of GCP projects.
    input: GcpCloudAccountDeleteProjectsInput!): GcpCloudAccountDeleteProjectsReply!

  # Complete the OAuth flow and pass the authorization code.
  gcpCloudAccountOauthComplete(
    # Input to complete the GCP cloud account OAuth flow.
    input: GcpCloudAccountOauthCompleteInput!): GcpCloudAccountOauthCompleteReply!

  # Initiate a session before doing Gcp OAuth flow.
  gcpCloudAccountOauthInitiate(
    # Input to initiate the GCP cloud account OAuth flow.
    input: GcpCloudAccountOauthInitiateInput!): GcpCloudAccountOauthInitiateReply!

  # Upgrade cloud account for the given GCP project cloud account IDs and feature.
  gcpCloudAccountUpgradeProjects(
    # Input required to upgrade a list of GCP projects.
    input: GcpCloudAccountUpgradeProjectsInput!): GcpCloudAccountUpgradeProjectsReply!

  # Triggers GCP native disable project job for the given project ID.
  gcpNativeDisableProject(
    # Input required to disable protection for a GCP native project.
    input: GcpNativeDisableProjectInput!): AsyncJobStatus!
  gcpNativeExcludeDisksFromInstanceSnapshot(
    # Input required to exclude GCP native disks from GCE instance snapshots.
    input: GcpNativeExcludeDisksFromInstanceSnapshotInput!): Void

  # Triggers GCP native export disk job for the given disk snapshot.
  gcpNativeExportDisk(
    # Input required to export a GCP native disk snapshot.
    input: GcpNativeExportDiskInput!): AsyncJobStatus!

  # Triggers GCP native export instance job for the given GCE instance.
  gcpNativeExportGceInstance(
    # Input required to export a GCP GCE instance snapshot.
    input: GcpNativeExportGceInstanceInput!): AsyncJobStatus!

  # Trigger GCP native refresh project job for the given project IDs
  gcpNativeRefreshProjects(
    # Input to refresh GCP native projects.
    input: GcpNativeRefreshProjectsInput!): BatchAsyncJobStatus!

  # Triggers GCP native restore instance job for the given snapshot Rubrik ID.
  gcpNativeRestoreGceInstance(
    # Input required to restore a GCP GCE instance snapshot.
    input: GcpNativeRestoreGceInstanceInput!): AsyncJobStatus!

  # Sets the default GCP service account authorization key.
  gcpSetDefaultServiceAccountJwtConfig(
    # Input required to set default GCP service account JWT configuration.
    input: GcpSetDefaultServiceAccountJwtConfigInput!): Boolean!

  # Generate a JWT that can be used to register clusters with Rubrik. If ManagedByRubrikArg is not given, the product type is inferred automatically.
  generateClusterRegistrationToken(
    # Input required for cluster token generation based on cluster details.
    input: GenerateClusterRegistrationTokenInput): ClusterRegistrationToken!

  # Generate restore form for the configuration backup file.
  generateConfigProtectionRestoreForm(
    # Input for V1GenerateRestoreForm.
    input: GenerateConfigProtectionRestoreFormInput!): GenerateConfigProtectionRestoreFormReply!

  # Generate CSR.
  generateCsr(
    # Name for your CSR.
    name: String!,

    # Hostnames for your CSR.
    hostnames: [String!]!,

    # Organization for your CSR.
    organization: String,

    # Organization unit for your CSR.
    organizationUnit: String,

    # Country for your CSR.
    country: String,

    # State for your CSR.
    state: String,

    # City for your CSR.
    city: String,

    # Email for your CSR.
    email: String,

    # Surname for your CSR.
    surname: String,

    # User ID for your CSR.
    userId: String): Csr!

  # Collect log files from the cluster
  # 
  # Supported in v5.0+
  # To be used by Admin to collect necessary Rubrik's log files from all the nodes. Both event_id and reqeust_ids are optional. If nothing is specified, the whole support bundle is to be collected, if event_id is specified, the reqeuest_ids is ignored. If request id is specified, only collect logs related to the specific request, otherwise collect all the logs.
  generateSupportBundle(
    # Input for InternalGenerateSupportBundle.
    input: GenerateSupportBundleInput!): AsyncRequestStatus!

  # Generate TOTP secret for a user.
  generateTotpSecret(
    # Specifies the user ID.
    userId: String!): GenerateTotpSecretReply!
  getDownloadUrl(downloadId: Long!): UserDownloadUrl!

  # Get health monitor policies on the Rubrik cluster.
  getHealthMonitorPolicyStatus(
    # Input for V1GetPolicyStatus.
    input: GetHealthMonitorPolicyStatusInput!): GetHealthMonitorPolicyStatusReply!

  # Get pending SLA Domain assignments on selected managed objects
  # 
  # Supported in v5.2+
  # Retrieve the details of pending SLA Domain assignments on the given managed objects. For objects with pending assignments, return the SLA Domain that is pending. For objects without pending assignments, return the current SLA Domain information. Explicitly list invalid object IDs.
  getPendingSlaAssignments(
    # Input for V2GetPendingSlaAssignments.
    input: GetPendingSlaAssignmentsInput!): GetPendingSlaAssignmentsReply!

  # Hide and reveal NAS namespaces
  # 
  # Supported in v7.0+
  # Hide individually selected NAS namespaces by setting the "action" field to "Hide". Reveal the selected NAS namespaces by setting the "action" field to "Reveal".
  hideRevealNasNamespaces(
    # Input for V1HideRevealNasNamespaces.
    input: HideRevealNasNamespacesInput!): Void

  # Hide or reveal NAS shares
  # 
  # Supported in v7.0+
  # Hide individually selected NAS shares by setting the "action" field to "Hide". Reveal selected NAS shares by setting the "action" field to "Reveal".
  hideRevealNasShares(
    # Input for V1HideRevealNasShares.
    input: HideRevealNasSharesInput!): ResponseSuccess!

  # Delete all snapshots of VM
  # 
  # Supported in v5.0+
  # Delete all snapshots of a virtual machine.
  hypervDeleteAllSnapshots(
    # Input for HypervDeleteAllSnapshotsRequest.
    input: HypervDeleteAllSnapshotsInput!): RequestSuccess!

  # Create on-demand VM snapshot
  # 
  # Supported in v5.0+
  # Create an on-demand snapshot for the given VM ID.
  hypervOnDemandSnapshot(
    # Input for HypervOnDemandSnapshotRequest.
    input: HypervOnDemandSnapshotInput!): AsyncRequestStatus!

  # Delete a given HyperV SCVMM.
  hypervScvmmDelete(
    # Input for deleting Hyper-V SCVMM.
    input: HypervScvmmDeleteInput!): ResponseSuccess!

  # Update properties for a given HyperV SCVMM.
  hypervScvmmUpdate(
    # Input for InternalUpdateHypervScvmm
    input: HypervScvmmUpdateInput!): HypervScvmmUpdateReply!

  # Inserts a Customer-hosted O365 Azure AD App.
  insertCustomerO365App(
    # The input for the InsertCustomerO365App mutation.
    input: InsertCustomerO365AppInput!): RequestStatus!

  # Install the Rubrik ioFilter to the VMware cluster with a specific ID
  # 
  # Supported in v5.1+
  # Install the latest version of Rubrik ioFilter to the VMware cluster with a specific ID. The cluster must be in maintenance mode to install the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
  installIoFilter(
    # Input for V1InstallIoFilter.
    input: InstallIoFilterInput!): RequestSuccess!

  # Creates an instant recover request that restores a target VM from the given Rubrik-hosted-snapshot
  # 
  # Supported in v5.0+
  # The VM will be started with networking enabled. If the VM does not exist anymore, a new VM will be created.
  instantRecoverHypervVirtualMachineSnapshot(
    # InstantRecoverHypervVMSnapshotRequest.
    input: InstantRecoverHypervVirtualMachineSnapshotInput!): AsyncRequestStatus!

  # Instant recovery of a database
  # 
  # Supported in v5.0+
  # Creates an instant recover request that restores a target database from the given snapshot.
  instantRecoverOracleSnapshot(
    # Input for InternalInstantRecoverOracleSnapshot.
    input: InstantRecoverOracleSnapshotInput!): AsyncRequestStatus!

  # Assigns roles to SSO groups in the current organization using the given group name and role IDs.
  inviteSsoGroup(
    # Specifies the input required for inviting new SSO groups to the current organization.
    input: InviteSsoGroupInput!): Boolean!

  # Join Active Directory
  # 
  # Supported in v5.0+
  # Join Active Directory.
  joinSmbDomain(
    # Input for InternalJoinSmbDomain.
    input: JoinSmbDomainInput!): Void

  # List CIDRs for compute setting.
  listCidrsForComputeSetting(
    # Input to get the list of CIDRs for compute settings.
    input: ListCidrsForComputeSettingInput!): ListCidrsForComputeSettingReply!

  # Specifies the endpoint through which the admin can lock the user accounts.
  lockUsersByAdmin(
    # Specifies the list of user IDs.
    input: LockUsersByAdminInput!): Void

  # Logout from Rubrik support portal using username.
  logoutFromRubrikSupportPortal: SupportPortalLogoutReply!

  # Make this cluster the primary for agents on a set of hosts
  # 
  # Supported in v5.3+
  # Migrate the primary cluster with which the agent is able to perform regular operations (backup, restore etc). This can be done on a specified set of hosts or for all hosts that currently have a specified primary cluster for disaster recovery. Specify exactly one of `ids` or `oldPrimaryClusterUuid`.
  makePrimary(
    # Input for V1HostMakePrimary.
    input: MakePrimaryInput!): AsyncRequestStatus!

  # Map Azure cloud accounts to an Exocompute subscription.
  mapAzureCloudAccountExocomputeSubscription(
    # Input for mapping Azure cloud accounts to an Exocompute subscription.
    input: MapAzureCloudAccountExocomputeSubscriptionInput!): MapAzureCloudAccountExocomputeSubscriptionReply!

  # Map Azure cloud accounts to a persistent storage location.
  mapAzureCloudAccountToPersistentStorageLocation(
    # Input for mapping Azure cloud accounts to a persistent storage location.
    input: MapAzureCloudAccountToPersistentStorageLocationInput!): MapAzureCloudAccountToPersistentStorageLocationReply!

  # Map cloud accounts to an Exocompute account.
  mapCloudAccountExocomputeAccount(
    # Input for mapping cloud accounts to an Exocompute account.
    input: MapCloudAccountExocomputeAccountInput!): MapCloudAccountExocomputeAccountReply!

  # Mark a secondary cluster certificate to be asynchronously synced to all Rubrik Backup Service instances for which this cluster is the primary.
  markAgentSecondaryCertificate(
    # Input for V1MarkAgentSecondaryCertificate.
    input: MarkAgentSecondaryCertificateInput!): MarkAgentSecondaryCertificateReply!

  # Relocate a Nutanix virtual machine to another storage container
  # 
  # Supported in v6.0+
  # Initiate a request to migrate the virtual disks of a specified Nutanix Live Mount to another storage container. The destination storage container has been specified when the Live Mount was created. The Live Mount will be deleted when the relocation succeeds.
  migrateNutanixMountV1(
    # Input for V1CreateNutanixVmMountMigration.
    input: MigrateNutanixMountV1Input!): AsyncRequestStatus!

  # Modifies a Live Mount of an Active Directory domain controller snapshot
  # 
  # Supported in v9.0+
  # Modifies the parameters of a Live Mount of an Active Directory domain controller snapshot.
  modifyActiveDirectoryLiveMount(
    # Input for V1ModifyActiveDirectoryLiveMount.
    input: ModifyActiveDirectoryLiveMountInput!): Void

  # Modify IPMI settings
  # 
  # Supported in v5.0+
  # modify IPMI settings.
  modifyIpmi(
    # Input for InternalModifyIpmi.
    input: ModifyIpmiInput!): ModifyIpmiReply!

  # Mount disks to the given workload.
  mountDisk(
    # Input required to mount disks.
    input: MountDiskInput!): MountDiskReply!

  # Initiate a Live Mount of a Nutanix virtual machine snapshot
  # 
  # Supported in v6.0+
  # Initiates a request to perform a Live Mount of a Nutanix virtual machine snapshot identified by the snapshot ID.
  mountNutanixSnapshotV1(
    # Input for V1CreateNutanixMount.
    input: MountNutanixSnapshotV1Input!): AsyncRequestStatus!

  # Live Mount an Oracle database snapshot
  # 
  # Supported in v5.0+
  # Create an asynchronous job to Live Mount an Oracle database from a snapshot.
  mountOracleDatabase(
    # Input for MountOracleDatabase.
    input: MountOracleDatabaseInput!): AsyncRequestStatus!
  mutateRole(
    # ID of the role.
    roleId: String, name: String!, description: String!,

    # Permissions in the role.
    permissions: [PermissionInput!]!, protectableClusters: [String!]!): UUID!

  # Send notification when the user clicks on the Get License button.
  notificationForGetLicense: NotificationForGetLicenseReply!

  # Completes the OAuth consent flow for an O365 Azure AD App.
  o365OauthConsentComplete(
    # The input for the O365OauthConsentComplete mutation.
    input: O365OauthConsentCompleteInput!): O365OauthConsentCompleteReply!

  # Kicks off the OAuth consent flow for an O365 Azure AD App.
  o365OauthConsentKickoff(
    # The input for the O365OauthConsentKickoff mutation.
    input: O365OauthConsentKickoffInput!): O365OauthConsentKickoffReply!

  # Retrieve or create the groups corresponding to the preferred data location and workload pairings for use in role creation.
  o365PdlGroups(
    # The input for the O365PdlGroups mutation.
    input: O365PdlGroupsInput!): O365PdlGroupsReply!
  o365SaaSSetupKickoff: O365SaasSetupKickoffReply!

  # Completes a Rubrik-Hosted setup flow.
  o365SaasSetupComplete(
    # The input for the O365SaasSetupComplete mutation.
    input: O365SaasSetupCompleteInput!): AddO365OrgResponse!

  # Kicks off an O365 subscription setup flow.
  o365SetupKickoff: O365SetupKickoffResp!

  # Updates authentication server-based AWS cloud account. Use this mutation to update account details related to role name, certificates, features. The mutation can update one or more certificates associated to an account in a single request. All input fields except account identifier are optional so that any combination of account attributes can be updated in a single call. If none of the optional fields are provided in the input then no updates are performed, and the response does not contain any error message.
  patchAwsAuthenticationServerBasedCloudAccount(
    # Input to update authentication server-based AWS cloud account.
    input: PatchAwsAuthenticationServerBasedCloudAccountInput!): Boolean!

  # Updates IAM user-based AWS cloud account. Use this mutation to update account details access/secret keys, role ARN and regions. All input fields except account ID are optional so that any combination of account attributes can be updated in a single call. If none of the optional fields are provided in the input then no updates are performed, and the response does not contain any error message.
  patchAwsIamUserBasedCloudAccount(
    # Input to update IAM user-based AWS cloud account.
    input: PatchAwsIamUserBasedCloudAccountInput!): Boolean!

  # Update a Db2 database
  # 
  # Supported in v9.0+
  # Updating a Db2 database involves modifying the metadata associated with the Db2 database using the provided input values.
  patchDb2Database(
    # Input for V1PatchDb2Database.
    input: PatchDb2DatabaseInput!): PatchDb2DatabaseReply!

  # Mutation to update an existing Db2 instance.
  patchDb2Instance(
    # Input for V1PatchDb2Instance.
    input: PatchDb2InstanceInput!): PatchDb2InstanceReply!

  # Edit a MongoDB source
  # 
  # Supported in v8.1+
  # Edits the properties of a MongoDB source. Hosts, name, and type of MongoDB cannot be changed once added.
  patchMongoSource(
    # Input for V1PatchMongoSource.
    input: PatchMongoSourceInput!): AsyncRequestStatus!

  # Change Nutanix Live Mount power status
  # 
  # Supported in v6.0+
  # Changes the power status of a mounted Nutanix virtual machine.
  patchNutanixMountV1(
    # Input for V1PatchNutanixVmMount.
    input: PatchNutanixMountV1Input!): PatchNutanixMountV1Reply!

  # v5.3-v8.1: Update the SLA Domain for a SAP HANA system
  # v9.0+: Update the system properties of the SAP HANA system
  # 
  # Supported in v5.3+
  # v5.3-v8.1: Update the SLA Domain that is configured for a SAP HANA system.
  # v9.0+: Update the system properties for the SAP HANA system.
  patchSapHanaSystem(
    # Input for V1PatchSapHanaSystem.
    input: PatchSapHanaSystemInput!): PatchSapHanaSystemReply!

  # Pause or resume SLA Domain on the given Rubrik clusters.
  pauseSla(
    # Request to pause or resume SLA Domain.
    input: PauseSlaInput!): PauseSlaReply!
  pauseTarget(
    # Request for pausing an Archival Location.
    input: PauseTargetInput!): PauseTargetReply!

  # Prepare deletion of cloud account. This is the first step to delete AWS cloud account. It generated template for deletion of cloud account and does not change any state of account.
  prepareAwsCloudAccountDeletion(
    # Args for initiate aws cloud accounts for deletion.
    input: PrepareAwsCloudAccountDeletionInput!): PrepareAwsCloudAccountDeletionReply!

  # Prepare manual update features to latest version.
  prepareFeatureUpdateForAwsCloudAccount(
    # Input to prepare feature update for AWS cloud account.
    input: PrepareFeatureUpdateForAwsCloudAccountInput!): PrepareFeatureUpdateForAwsCloudAccountReply!

  # Promotes a reader Archival Location.
  promoteReaderTarget(
    # Request for promoting a reader Archival Location.
    input: PromoteReaderTargetInput!): Void

  # SMB configuration
  # 
  # Supported in v5.0+
  # SMB configuration.
  putSmbConfiguration(
    # Input for InternalPutSmbConfiguration.
    input: PutSmbConfigurationInput!): PutSmbConfigurationReply!

  # Recover a cassandra source.
  recoverCassandraSource(
    # Input for V2MosaicRestoreData.
    input: MosaicRestoreDataInput!): MosaicAsyncResponse!

  # Recover a Rubrik Cloud Cluster.
  recoverCloudCluster(
    # Cloud Cluster recovery configuration.
    input: RecoverCloudClusterInput!): CcProvisionJobReply!

  # Cloud Direct MultiPaths Recovery.
  recoverCloudDirectMultiPaths(
    # Input for Cloud Direct multi-paths recovery.
    input: RecoverCloudDirectMultiPathsInput!): AsyncRequestStatus!

  # Cloud Direct Path Recovery.
  recoverCloudDirectPath(
    # Input for Cloud Direct path recovery.
    input: RecoverCloudDirectPathInput!): AsyncRequestStatus!

  # Recover a MongoDB source from Rubrik CDM cluster.
  recoverMongoSource(
    # Input for V1RecoverMongoDatabasesAndCollections.
    input: RecoverMongoSourceInput!): AsyncRequestStatus!

  # Recover a MongoDB source from NoSQL cluster.
  recoverMongodbSource(
    # Input for V2MosaicRestoreData.
    input: MosaicRestoreDataInput!): MosaicAsyncResponse!

  # On-demand refresh of a Db2 database
  # 
  # Supported in v8.1+
  # Initiates an on-demand job to refresh a Db2 database. Currently, this is allowed only for Db2 HADR databases.
  refreshDb2Database(
    # Input for V1RefreshDb2Database.
    input: RefreshDb2DatabaseInput!): AsyncRequestStatus!

  # Initiates an on-demand refresh job of a specified Active Directory domain.
  refreshDomain(
    # Input for V1RefreshDomain.
    input: RefreshDomainInput!): AsyncRequestStatus!
  refreshGlobalManagerConnectivityStatus(
    # The Rubrik cluster ID.
    clusterUuid: UUID!): GlobalManagerConnectivity!
  refreshHost(
    # Input for V1RefreshHost.
    input: RefreshHostInput!): RefreshHostReply!

  # Refresh a given HyperV SCVMM.
  refreshHypervScvmm(
    # Input for refreshing Hyper-V SCVMM.
    input: RefreshHypervScvmmInput!): AsyncRequestStatus!

  # Refresh Hyper-V host metadata
  # 
  # Supported in v5.0+
  # Create a job to refresh the metadata for the specified Hyper-V host.
  refreshHypervServer(
    # Input for InternalRefreshHypervHost.
    input: RefreshHypervServerInput!): AsyncRequestStatus!

  # Refresh resources of a Kubernetes cluster.
  refreshK8sCluster(
    # Request for refreshing resources in a Kubernetes cluster.
    input: RefreshK8sClusterInput!): CreateOnDemandJobReply!

  # On-demand discovery of a list of NAS systems
  # 
  # Supported in v7.0+
  # Runs the NAS_DISCOVER job for autodiscovery/refresh of NAS systems.
  refreshNasSystems(
    # Input for V1DiscoverNasSystems.
    input: RefreshNasSystemsInput!): RefreshNasSystemsReply!

  # Refresh Nutanix cluster metadata
  # 
  # Supported in v5.0+
  # Create a job to refresh the metadata for the specified Nutanix cluster.
  refreshNutanixCluster(
    # Input for InternalCreateNutanixClusterRefresh.
    input: RefreshNutanixClusterInput!): AsyncRequestStatus!

  # Refresh Nutanix Prism Central metadata
  # 
  # Supported in v9.0+
  # Initiates a job to refresh the metadata for the specified Nutanix Prism Central and all its associated clusters.
  refreshNutanixPrismCentral(
    # Input for InternalCreateNutanixPrismCentralRefresh.
    input: RefreshNutanixPrismCentralInput!): BatchAsyncRequestStatus!

  # Refreshes an O365 org.
  refreshO365Org(
    # Org UUID.
    orgId: UUID!): CreateOnDemandJobReply!

  # Refresh an Oracle database
  # 
  # Supported in v6.0+
  # Starts an asynchronous job to refresh the Oracle database metadata by querying the database instances on all the underlying hosts.
  refreshOracleDatabase(
    # Input for V1RefreshOracleDb.
    input: RefreshOracleDatabaseInput!): AsyncRequestStatus!

  # Refreshes a reader Archival Location.
  refreshReaderTarget(
    # Request for refreshing a reader Archival Location.
    input: RefreshReaderTargetInput!): Void

  # Refresh storage arrays in Rubrik clusters.
  refreshStorageArrays(
    # List of storage arrays to refresh.
    input: RefreshStorageArraysInput!): RefreshStorageArraysReply!

  # Refresh vCenter Server metadata
  # 
  # Supported in v5.0+
  # Create a job to refresh the metadata for the specified vCenter Server.
  refreshVsphereVcenter(
    # Refresh vcenter input.
    input: RefreshVsphereVcenterInput!): AsyncRequestStatus!

  # Register the agent installed in VM
  # 
  # Supported in v5.0+
  # Register the agent that installed in VM.
  registerAgentHypervVirtualMachine(
    # Input for RegisterAgentHypervVirtualMachineRequest.
    input: RegisterAgentHypervVirtualMachineInput!): RequestSuccess!

  # v5.0-v8.0: Register the agent installed on the Nutanix VM
  # v8.1+: Register the agent installed on the Nutanix virtual machine
  # 
  # Supported in v5.0+
  # v5.0-v5.3: Register the agent installed on the Nutanix VM
  # v6.0-v8.0: Register the agent installed on the Nutanix VM.
  # v8.1+: Register the agent installed on the Nutanix virtual machine.
  registerAgentNutanixVm(
    # Input for InternalNutanixVmRegisterAgent.
    input: RegisterAgentNutanixVmInput!): RequestSuccess!

  # Registers the AWS account artifacts such as roles in RSC backend while onboarding AWS account in manual flow.
  registerAwsFeatureArtifacts(
    # Input to register external artifacts for AWS cloud account.
    input: RegisterAwsFeatureArtifactsInput!): RegisterAwsFeatureArtifactsReply!

  # Register a cloud cluster.
  registerCloudCluster(
    # Input for cloud cluster registration.
    input: RegisterCloudClusterInput!): RegisterCloudClusterReply!

  # Register HyperV SCVMM to Rubrik Cluster.
  registerHypervScvmm(
    # Input for register Hyper-V SCVMM.
    input: RegisterHypervScvmmInput!): AsyncRequestStatus!

  # Register a NAS System
  # 
  # Supported in v7.0+
  # Register a NAS system such as a NetApp or an Isilon cluster to be protected.
  registerNasSystem(
    # Input for V1RegisterNasSystem.
    input: RegisterNasSystemInput!): RegisterNasSystemReply!
  removeCdmCluster(
    # UUID of the Rubrik cluster.
    clusterUUID: UUID!, isForce: Boolean!,

    # Number of days after which data from Rubrik is removed.
    expireInDays: Long): Boolean!

  # Remove healthy nodes from a cluster.
  removeClusterNodes(
    # Input for removing nodes from a Rubrik cluster.
    input: RemoveClusterNodesInput!): CcProvisionJobReply!

  # Marks the disk removed and updates cluster metadata
  removeDisk(
    # Input for InternalRemoveDisk.
    input: RemoveDiskInput!): ResponseSuccess!

  # Remove account level inventory workloads.
  removeInventoryWorkloads(
    # Inventory workloads to remove from an account.
    input: RemoveInventoryWorkloadsInput!): Boolean!

  # Remove LDAP integration.
  removeLdapIntegration(
    # ID for your LDAP integration.
    id: UUID!): Boolean!

  # Remove policies from objects.
  removePolicyObjects(policyIds: [String!]!, objectIds: [String!]! = [],

    # List of supported root IDs.
    objectRootIds: [String!]! = [],

    # List of Rubrik cluster IDs.
    clusterIds: [String!]! = [], runAsync: Boolean!): [String!]!

  # Remove private endpoint connection to RCV location.
  removePrivateEndpointConnection(
    # Request for removing the private endpoint connection to an RCV location.
    input: RemovePrivateEndpointConnectionInput!): Void

  # Delete existing proxy configuration
  # 
  # Supported in v5.0+
  # Delete an existing proxy that was configured.
  removeProxyConfig(
    # Input for InternalDeleteProxyConfig.
    input: RemoveProxyConfigInput!): ResponseSuccess!

  # Delete cluster VLAN(s).
  removeVlans(
    # Input for RemoveVlans.
    input: RemoveVlansInput!): RemoveVlansReply!

  # Reseed a secondary database.
  reseedLogShippingSecondary(
    # Input for V1ReseedSecondary.
    input: ReseedLogShippingSecondaryInput!): AsyncRequestStatus!

  # Used by the administrator to reset passwords for all users in the organization.
  resetAllOrgUsersPasswords: Void

  # Used by the administrator to reset passwords for selected users in the organization.
  resetUsersPasswordsWithUserIds(
    # Specifies the input used to reset passwords for selected users in the organization.
    input: ResetUsersPasswordsWithUserIdsInput!): Void

  # Resize the disk and updates cluster metadata.
  resizeDisk(
    # Input for InternalResizeDisk.
    input: ResizeDiskInput!): ResponseSuccess!

  # Resize managed volume
  # 
  # Supported in v5.3+
  # Resize the managed volume to a larger size. Once a volume size has been increased, it can not be decreased.
  resizeManagedVolume(
    # Input for InternalResizeApiForManagedVolume.
    input: ResizeManagedVolumeInput!): AsyncRequestStatus!

  # Marks that the user has resolved that there are no conflicting volume groups on the host where this Exchange server exists
  # 
  # Supported in v8.0+
  # Marks that the user has resolved that there are no conflicting volume groups on the host where this Exchange server exists.
  resolveVolumeGroupsConflict(
    # Input for V1ResolveVolumeGroupsConflict.
    input: ResolveVolumeGroupsConflictInput!): RequestSuccess!

  # Restore the given objects to the Active Directory
  # 
  # Supported in v9.0+
  # Initiates a recovery for the given Active Directory objects.
  restoreActiveDirectoryObjects(
    # Input for V1RestoreObjects.
    input: RestoreActiveDirectoryObjectsInput!): AsyncRequestStatus!

  # Restores the Azure AD directory with multiple passwords.
  restoreAzureAdObjectsWithPasswords(
    # The input for restoring the Azure AD directory with multiple passwords.
    input: RestoreAzureAdObjectsWithPasswordsInput!): RestoreAzureAdObjectsWithPasswordsReply!

  # Initiate Active Directory restore job
  # 
  # Supported in v9.0+
  # Initiates a job to restore Active Directory snapshots to their corresponding Domain Controllers or alternate hosts. Returns the job instance ID.
  restoreDomainControllerSnapshot(
    # Input for V1CreateActiveDirectoryRestoreJob.
    input: RestoreDomainControllerSnapshotInput!): AsyncRequestStatus!

  # Restore files
  # 
  # Supported in v5.0+
  # Restore files from a snapshot to the source Nutanix virtual machine.
  restoreFilesNutanixSnapshot(
    # Input for InternalRestoreNutanixVmSnapshotFiles.
    input: RestoreFilesNutanixSnapshotInput!): AsyncRequestStatus!

  # Restore files from snapshot
  # 
  # Supported in v5.0+
  # Restore files from a snapshot to the original source location.
  restoreHypervVirtualMachineSnapshotFiles(
    # Input for RestoreHypervVMSnapshotFilesRequest.
    input: RestoreHypervVirtualMachineSnapshotFilesInput!): AsyncRequestStatus!

  # Restores Kubernetes namespace snapshot.
  restoreK8sNamespace(
    # Request to restore a snapshot of a Kubernetes namespace.
    input: RestoreK8sNamespaceInput!): CreateOnDemandJobReply!

  # Create a request to restore a Microsoft SQL database.
  restoreMssqlDatabase(
    # Input for V1CreateRestoreMssqlDb.
    input: RestoreMssqlDatabaseInput!): AsyncRequestStatus!

  # Restores an Exchange mailbox.
  restoreO365Mailbox(restoreConfig: RestoreO365MailboxInput!): CreateOnDemandJobReply!

  # Restores an O365 snappable.
  restoreO365Snappable(
    # The input for the mutation to restore an O365 workload.
    input: RestoreO365SnappableInput!): CreateOnDemandJobReply!

  # Restore Team conversations.
  restoreO365TeamsConversations(
    # The input for the operation to restore conversations for O365 teams.
    input: RestoreO365TeamsConversationsInput!): CreateOnDemandJobReply!

  # Restore Team files.
  restoreO365TeamsFiles(
    # The input for the mutation to restore files for O365 Teams.
    input: RestoreO365TeamsFilesInput!): CreateOnDemandJobReply!

  # Restore archive logs of an Oracle database
  # 
  # Supported in v6.0+
  # v6.0: Create an asynchronous job to restore archive logs of an Oracle database.
  # v7.0+: Starts an asynchronous job to restore archive logs of an Oracle database.
  restoreOracleLogs(
    # Input for V1RestoreOracleLogs.
    input: RestoreOracleLogsInput!): AsyncRequestStatus!

  # Restore files from the Volume Group snapshot
  # 
  # Supported in v5.0+
  # Restore filess to the original Host.
  restoreVolumeGroupSnapshotFiles(
    # Input for restoreVolumeGroupSnapshotFiles.
    input: RestoreVolumeGroupSnapshotFilesInput!): AsyncRequestStatus!
  resumeTarget(
    # Request for resuming an Archival Location.
    input: ResumeTargetInput!): ResumeTargetReply!

  # Update a MongoDB source
  # 
  # Supported in v8.1+
  # Updates a MongoDB source details. You can use this endpoint for updating MongoDB source details when the request to add a source fails.
  retryAddMongoSource(
    # Input for V1PutMongoSource.
    input: RetryAddMongoSourceInput!): AsyncRequestStatus!

  # Initiates retry for a failed job.
  retryBackup(
    # Retry backup for the objects.
    backupObjects: [BackupObject!]!,

    # The configuration of the backup operation.
    backupRunConfig: BackupRunConfig): RetryBackupResp!

  # Retry the previous failed download package CDM job.
  retryDownloadPackageJob(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): DownloadPackageReply!

  # Revoke all roles of the current organization from the specified users and groups.
  revokeAllOrgRoles(
    # Input required for revoking all roles of the current organization from the specified users and groups.
    input: RevokeAllOrgRolesInput!): Void

  # Rotate service account secret.
  rotateServiceAccountSecret(
    # Input for rotating a service account secret.
    input: RotateServiceAccountSecretInput!): RotateServiceAccountSecretReply!
  runCustomAnalyzer(input: RunCustomAnalyzerInput!): RunCustomAnalyzerReply!

  # Schedule an upgrade job in batch.
  scheduleUpgradeBatchJob(
    # Specifies the list of cluster UUIDs.
    listClusterUuid: [UUID!]!,

    # Specifies the upgrade mode.
    mode: String!,

    # Specifies the upgrade action.
    action: ActionType!,

    # Specifies the Rubrik CDM upgrade tarball version.
    version: String!,

    # Specifies the ISO8601 timestamp string.
    scheduleAt: DateTime!,

    # Specifies the Context tag.
    context_tag: String = "{\"client\": \"polaris\"}"): [UpgradeJobReplyWithUuid!]!

  # Seed account with enabled policies.
  seedEnabledPolicies: SeedEnabledPoliciesReply!

  # DEPRECATED (use seedEnabledPolicies instead) Seed account with initial policies.
  seedInitialPolicies: SeedInitialPoliciesReply!

  # DHRC PDF report generation.
  sendPdfReport(
    # Input required for generating and sending report email.
    input: SendPdfReportInput!): SendPdfReportReply!

  # Send a scheduled report now asynchronously via email.
  sendScheduledReportAsync(
    # Input required for generating and sending report email.
    input: SendScheduledReportAsyncInput!): AsyncDownloadReply!

  # Set risk for analyzers.
  setAnalyzerRisks(
    # Input required for setting risk for analyzers.
    input: SetAnalyzerRisksInput!): SetAnalyzerRisksReply!

  # Set credentials for the customer application, for the tenant domain name.
  setAzureCloudAccountCustomerAppCredentials(
    # Input for setting the app credentials in the Azure Cloud Accounts.
    input: SetAzureCloudAccountCustomerAppCredentialsInput!): Boolean!

  # Sets customer-specified tags and the value whether the resource tags should be overridden by customer-specified tags for a given cloud type.
  setCustomerTags(
    # Input to set customer-specified tags for a particular cloud type.
    input: SetCustomerTagsInput!): Void

  # Set datastore freespace thresholds.
  setDatastoreFreespaceThresholds(
    # Datastore freespace thresholds to set.
    input: SetDatastoreFreespaceThresholdsInput!): SetDatastoreFreespaceThresholdsReply!
  setIpWhitelistEnabled(enabled: Boolean!): Boolean!

  # Update the MFA settings for the given LDAP integration. Return true when the operation succeeds.
  setLdapMfaSetting(
    # Input required for updating LDAP MFA settings.
    input: SetLdapMfaSettingInput!): Boolean!

  # Update the MFA settings for the account. Return true when the operation succeeds.
  setMfaSetting(
    # Input required for updating MFA settings.
    input: SetMfaSettingInput!): Boolean!

  # Sets the service account for the org.
  setO365ServiceAccount(username: String!, appPassword: String!,

    # Org UUID.
    orgId: UUID!): RequestStatus!

  # Set the password complexity policy for the current organization.
  setPasswordComplexityPolicy(
    # Specifies the password complexity policy to be used for the organization. 
    input: SetPasswordComplexityPolicyInput!): Void

  # Set User defined SSO certs.
  setSsoCertificate(
    # SSO certificate details to be set.
    input: SetSsoCertificateInput!): Void

  # Setup TOTP configuration for a user. Return true when the operation succeeds.
  setTotpConfig(
    # Input required for setting up TOTP configuration.
    input: SetTotpConfigInput!): Boolean!

  # Sets upgrade type of a cluster.
  setUpgradeType(
    # Specifies the type of upgrade to be set for the cluster.
    input: SetUpgradeTypeInput!): SetUpgradeTypeReply!

  # Update the user-level TOTP enforcement for given users. Return true when the operation succeeds.
  setUserLevelTotpEnforcement(
    # Input required for updating user-level TOTP enforcement.
    input: SetUserLevelTotpEnforcementInput!): Boolean!

  # Set a signed certificate for Web server
  # 
  # Supported in v5.3+
  # Setting the given certificate for each node's web server to use.
  setWebSignedCertificate(
    # Input for V1SetWebSignedCertificate.
    input: SetWebSignedCertificateInput!): AsyncRequestStatus!

  # Enable/disable alerts for given workload on given cluster.
  setWorkloadAlertSetting(
    # Request to enable or not enable alerts for workloads.
    input: SetWorkloadAlertSettingInput!): SetWorkloadAlertSettingReply!

  # Sets up Exocompute for an O365 subscription.
  setupAzureO365Exocompute(tenantId: String!, subscriptionId: UUID!, exocomputeConfig: AzureO365ExocomputeConfig!): SetupAzureO365ExocomputeResp!

  # Setup backups on the SQL Server databases using the admin credentials.
  setupCloudNativeSqlServerBackup(
    # Input required to setup SQL Server backups.
    input: SetupCloudNativeSqlServerBackupInput!): BatchAsyncJobStatus!

  # Setup an unformatted disk
  setupDisk(
    # Input for InternalSetupDisk.
    input: SetupDiskInput!): DiskInfo!

  # Starts a job to disable AWS Exocompute feature. When complete, the job will disable exocompute feature for the specified AWS Native account.
  startAwsExocomputeDisableJob(
    # Input required to start the job to disable AWS Exocompute.
    input: StartAwsExocomputeDisableJobInput!): AsyncJobStatus!

  # Starts a job to disable a specific AWS Native account. When complete, the job will disable protection for the specified AWS Native account.
  startAwsNativeAccountDisableJob(
    # Input for AWS native account disable job.
    input: StartAwsNativeAccountDisableJobInput!): AsyncJobStatus!

  # Start an on demand create snapshot job for AWS EC2 Instances.When completed, this will start taking an on-demand snapshot of the selected EC2 Instances  as per the SLA Policy assigned to the respective instances.
  startAwsNativeEc2InstanceSnapshotsJob(
    # Input for create AWS EC2 Instance snapshots job.
    input: StartAwsNativeEc2InstanceSnapshotsJobInput!): BatchAsyncJobStatus!

  # Start job to create snapshots of RDS Instance with given IDs. When completed, this will start taking an on-demand snapshot of the selected RDS Instances  as per the SLA Policy assigned to the respective instances.
  startAwsNativeRdsInstanceSnapshotsJob(
    # Input to trigger job to create AWS RDS Instance snapshots.
    input: StartAwsNativeRdsInstanceSnapshotsJobInput!): BatchAsyncJobStatus!

  # Initiates the Azure AD app creation workflow.
  startAzureAdAppSetup(
    # Input for the startAzureAdAppSetup API.
    input: StartAzureAdAppSetupInput!): StartAzureAdAppSetupReply!

  # Initiates an update to the Azure AD directory app.
  startAzureAdAppUpdate(
    # Input for the StartAzureAdAppUpdate API.
    input: StartAzureAdAppUpdateInput!): StartAzureAdAppUpdateReply!

  # Initiates a session before doing Azure OAuth flow. If a custom app is configured for the tenant, the client ID of the custom app is returned. Otherwise, the client ID of the default app is returned.
  startAzureCloudAccountOauth(
    # Input for initiating authentication of the Azure Cloud Accounts.
    input: StartAzureCloudAccountOauthInput!): StartAzureCloudAccountOauthReply!

  # Create index of cloudnative snapshots
  startCloudNativeSnapshotsIndexJob(
    # Input for create snapshots index job.
    input: StartCloudNativeSnapshotsIndexJobInput!): BatchAsyncJobStatus!

  # Start a job to migrate reports from Rubrik cluster to RSC.
  startClusterReportMigrationJob(
    # The input configuration to start the report migration job.
    input: StartClusterReportMigrationJobInput!): StartClusterReportMigrationJobReply!

  # Start a crawl.
  startCrawl(name: String!, resources: [ResourceInput!]!, analyzerGroups: [AnalyzerGroupInput!]!, extWhiteList: [String!]): StartCrawlReply!

  # Start job to create snapshots of EBS Volumes with given IDs. When completed, this will start taking an on-demand snapshot of the selected EBS Volumes  as per the SLA Policy assigned to the respective volumes.
  startCreateAwsNativeEbsVolumeSnapshotsJob(
    # Input for create AWS EBS volume create snapshots job.
    input: StartCreateAwsNativeEbsVolumeSnapshotsJobInput!): BatchAsyncJobStatus!

  # Start a job to create snapshots of the Azure Native Managed Disks identified by the given IDs. When started, this will start taking an on-demand snapshot of the selected disks as per the SLA Policy assigned to the respective disks.
  startCreateAzureNativeManagedDiskSnapshotsJob(
    # Input for the job to create Azure Native Managed Disk Snapshots.
    input: StartCreateAzureNativeManagedDiskSnapshotsJobInput!): BatchAsyncJobStatus!

  # Start a job to create a snapshot for the Azure Native virtual machine identified by the IDs. When started, this will start taking an on-demand snapshot of the selected VMs as per the SLA Policy assigned to the respective VMs.
  startCreateAzureNativeVirtualMachineSnapshotsJob(
    # Input for the job to create Azure Native Virtual Machine snapshots.
    input: StartCreateAzureNativeVirtualMachineSnapshotsJobInput!): BatchAsyncJobStatus!

  # Start on-demand jobs to disable the feature for the given Azure Cloud Accounts. When completed, the status of cloud account feature will change to Disabled and the feature will become eligible to be deleted.
  startDisableAzureCloudAccountJob(
    # Input for starting jobs to disable a cloud account feature for a list of Azure Cloud Accounts.
    input: StartDisableAzureCloudAccountJobInput!): BatchAsyncJobStatus!

  # Start a job to disable protection for a specified Azure subscription.
  startDisableAzureNativeSubscriptionProtectionJob(
    # Input for the job to start disabling protection from the Azure Native Subscription.
    input: StartDisableAzureNativeSubscriptionProtectionJobInput!): AsyncJobStatus!

  # Starts CDM job to download installer package in batch.
  startDownloadPackageBatchJob(
    # Specifies the list of cluster UUIDs.
    listClusterUuid: [UUID!]!,

    # Specifies the Rubrik CDM download package version.
    downloadVersion: String,

    # Specifies the Rubrik CDM upgrade package URL.
    packageUrl: String!,

    # Specifies the MD5CheckSum of the Rubrik CDM installer package.
    md5checksum: String!,

    # Specifies the size in bytes of the Rubrik CDM package.
    size: Long): [DownloadPackageReplyWithUuid!]!

  # Starts a job to export an EC2 Instance snapshot. The job creates a new EC2 Instance with the same properties as that of the snapshot that is exported.
  startEc2InstanceSnapshotExportJob(
    # Input to trigger export AWS native EC2 Instance snapshot job.
    input: StartEc2InstanceSnapshotExportJobInput!): AsyncJobStatus!

  # Start a job to export EBS Volume. The job creates a new EBS Volume with the same properties as that of the snapshot that is exported.
  startExportAwsNativeEbsVolumeSnapshotJob(
    # Input to trigger export AWS native EBS volume snapshot job.
    input: StartExportAwsNativeEbsVolumeSnapshotJobInput!): AsyncJobStatus!

  # Start a job to export the specified Azure Native Managed Disks to the desired destination.
  startExportAzureNativeManagedDiskJob(
    # Input for the job to export the specified Azure Native Managed Disk to the specified destination.
    input: StartExportAzureNativeManagedDiskJobInput!): AsyncJobStatus!

  # Start a job to export the Azure native virtual machine for a specified snapshot to a specified destination.
  startExportAzureNativeVirtualMachineJob(
    # Input for the job to export the specified Azure Native Virtual Machine to the specified destination.
    input: StartExportAzureNativeVirtualMachineJobInput!): AsyncJobStatus!

  # Start a job to export Azure SQL Database. The job creates a new Azure SQL Database with the same properties as that of the instance that is exported.
  startExportAzureSqlDatabaseDbJob(
    # Input for the job to export the specified Azure SQL Database.
    input: StartExportAzureSqlDatabaseDbJobInput!): AsyncJobStatus!

  # Start a job to export Azure SQL Managed Instance database. The job creates a new Azure SQL Managed Instance database with the same properties as that of the instance that is exported.
  startExportAzureSqlManagedInstanceDbJob(
    # Input for the job to export the specified Azure SQL Managed Instance database.
    input: StartExportAzureSqlManagedInstanceDbJobInput!): AsyncJobStatus!

  # Start a job to export RDS Instance. The job creates a new RDS Instance with the same properties as that of the instance that is exported.
  startExportRdsInstanceJob(
    # Input to trigger export AWS native RDS Instance job.
    input: StartExportRdsInstanceJobInput!): AsyncJobStatus!

  # Starts an on demand periodic upgrade prechecks job in CDM cluster.
  startPeriodicUpgradePrechecksOnDemandJob(
    # Specifies the cluster UUID.
    clusterUuid: UUID!): PrechecksJobReply!

  # Starts an on-demand snapshot recovery job for the specified AWS S3 bucket. Returns the ID of the taskchain initiated for the recovery job.
  startRecoverS3SnapshotJob(
    # Input for an on-demand AWS S3 snapshot recovery job.
    input: StartRecoverS3SnapshotJobInput!): AsyncJobStatus!

  # Start an on demand job to refresh AWS accounts. The job updates the Rubrik platform with changes to the AWS Native accounts.
  startRefreshAwsNativeAccountsJob(
    # Input for refresh AWS native accounts job.
    input: StartRefreshAwsNativeAccountsJobInput!): BatchAsyncJobStatus!

  # Start a job to refresh Azure Native subscription for the given subscription IDs. When started, this job will update the Rubrik platform with any changes that have been done on Azure for the respective subscription.
  startRefreshAzureNativeSubscriptionsJob(
    # Input for the job to refresh Azure Native subscriptions.
    input: StartRefreshAzureNativeSubscriptionsJobInput!): BatchAsyncJobStatus!

  # Start an on demand restore snapshot job for AWS EC2 Instance. When completed, this will replace the original EC2 Instance with the selected snapshot.
  startRestoreAwsNativeEc2InstanceSnapshotJob(
    # Input for restore AWS EC2 Instance snapshot job.
    input: StartRestoreAwsNativeEc2InstanceSnapshotJobInput!): AsyncJobStatus!

  # Start a job to restore Azure Native virtual machine with the selected snapshot. When started, this will replace the original VM with the selected snapshot.
  startRestoreAzureNativeVirtualMachineJob(
    # Input for the job to restore Azure Native Virtual Machine.
    input: StartRestoreAzureNativeVirtualMachineJobInput!): AsyncJobStatus!

  # Start a threat hunt on a cluster.
  startThreatHunt(
    # Config to start a threat hunt.
    input: StartThreatHuntInput!): StartThreatHuntReply!

  # Starts cdm upgrades instantly, monitors the upgrade until terminal state is reached.
  startUpgradeBatchJob(
    # Specifies the list of cluster UUIDs.
    listClusterUuid: [UUID!]!,

    # Specifies the upgrade mode.
    mode: String!,

    # Specifies the upgrade action.
    action: ActionType!,

    # Specifies the Rubrik CDM upgrade tarball version.
    version: String!,

    # Specifies the Context tag.
    context_tag: String = "{\"client\": \"polaris\"}"): [UpgradeJobReplyWithUuid!]!

  # Initiate a live mount for a given Volume Group snapshot
  # 
  # Supported in v5.0+
  # Create a live mount request for a Volume Group snapshot.
  startVolumeGroupMount(
    # Input for InternalCreateVolumeGroupMount.
    input: StartVolumeGroupMountInput!): AsyncRequestStatus!

  # Issue request to stop a job instance. If successful, stop process for job instance is initiated. Job instance is stopped asynchronously in the background. The input must contain either the job instance ID or the event series ID. If it contains the job instance ID, this will stop the job instance corresponding to the ID. If it contains the event series ID, it will retrieve the latest job instance associated with the event series, and stop it.
  stopJobInstance(
    # Input to stop a job instance. The input must contain either the job instance ID or the event series ID. 
    input: StopJobInstanceInput!): StopJobInstanceReply! @deprecated(reason: "Use stopJobInstanceFromEventSeries instead.")

  # Send a request to stop a job instance with the event series ID. If successful, stop process for the job instance is initiated, and the job instance is terminated asynchronously in the background.
  stopJobInstanceFromEventSeries(
    # Input to stop a job instance with the event series ID.
    input: StopJobInstanceFromEventSeriesInput!): Void

  # Log in to the Rubrik Support portal using username and password.
  supportPortalLogin(
    # Input for supportPortalLogin.
    input: SupportPortalLoginInput!): SupportPortalLoginReply!

  # Take an on-demand snapshot of an SLA Managed Volume
  # 
  # Supported in v5.3+
  # Create a job for an on-demand snapshot of an SLA Managed Volume. The response returns a request ID. To see the status of the request, poll 'managed-volume/request/{id}' with the request ID obtained in the response.
  takeManagedVolumeOnDemandSnapshot(
    # Input for InternalTakeManagedVolumeOnDemandSnapshot.
    input: TakeManagedVolumeOnDemandSnapshotInput!): AsyncRequestStatus!

  # Take an on-demand log backup for a Microsoft SQL database.
  takeMssqlLogBackup(
    # Input for V1CreateOnDemandMssqlLogBackup.
    input: TakeMssqlLogBackupInput!): AsyncRequestStatus!

  # On-demand backup of an Oracle database
  # 
  # Supported in v5.0+
  # Create an asynchronous job for an on-demand snapshot of an Oracle database. The response includes an ID for the asynchronous job request. To see the status of the request, poll /oracle/request/{id}.
  takeOnDemandOracleDatabaseSnapshot(
    # Input for InternalCreateOnDemandOracleBackup.
    input: TakeOnDemandOracleDatabaseSnapshotInput!): AsyncRequestStatus!

  # On-demand log backup for an Oracle database log
  # 
  # Supported in v5.0+
  # Create an asynchronous job for an on-demand backup of an Oracle database log. The response includes an ID for the asynchronous job request.  To see the status of the request, poll /oracle/request/{id}.
  takeOnDemandOracleLogSnapshot(
    # Input for InternalCreateOnDemandOracleLogBackup.
    input: TakeOnDemandOracleLogSnapshotInput!): AsyncRequestStatus!

  # Triggers on-demand snapshot for the given workloads.
  takeOnDemandSnapshot(
    # Input for taking on demand snapshot of workloads.
    input: TakeOnDemandSnapshotInput!): TakeOnDemandSnapshotReply!

  # Test an existing webhook.
  testExistingWebhook(
    # The existing webhook to test.
    input: TestExistingWebhookInput!): TestExistingWebhookReply!

  # Test the specified syslog export rule
  # 
  # Supported in v5.1+
  # Send a test message using the syslog export rule specified by the given id.
  testSyslogExportRule(
    # Input for V1TestSyslogExportRule.
    input: TestSyslogExportRuleInput!): TestSyslogExportRuleReply!

  # Test a webhook configuration.
  testWebhook(
    # The webhook configuration to test.
    input: TestWebhookInput!): TestWebhookReply!

  # Trigger cloud compute connectivity check
  # 
  # Supported in v6.0+
  # Triggers a background job to perform the cloud compute connectivity check for the specified archival location.
  triggerCloudComputeConnectivityCheck(
    # Input for V1TriggerCloudComputeConnectivityCheck.
    input: TriggerCloudComputeConnectivityCheckInput!): AsyncRequestStatus!

  # Initiates on-demand Exocompute health check.
  triggerExocomputeHealthCheck(
    # Input to initiate Exocompute health check.
    input: TriggerExocomputeHealthCheckInput!): TriggerExocomputeHealthCheckReply!

  # Trigger detect ransomware job for given snapshot.
  triggerRansomwareDetection(
    # Enable automatic file metadata upload input.
    input: TriggerRansomwareDetectionInput!): TriggerRansomwareDetectionReply!

  # Reset the configuration for system copy restore on target database
  # 
  # Supported in v6.0+
  # Initiates a job to reset the configuration for the system copy restore on the specified target database. System copy restore in SAP HANA is done across different databases.
  unconfigureSapHanaRestore(
    # Input for V1UnconfigureSapHanaRestore.
    input: UnconfigureSapHanaRestoreInput!): AsyncRequestStatus!

  # Uninstall the Rubrik ioFilter from the VMware cluster with a specific ID
  # 
  # Supported in v5.1+
  # Uninstall the Rubrik ioFilter from the VMware cluster with a specific ID. The cluster must be in maintenance mode to uninstall the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
  uninstallIoFilter(
    # Input for V1UninstallIoFilter.
    input: UninstallIoFilterInput!): RequestSuccess!

  # Specifies the endpoint through which the admin can unlock the user accounts.
  unlockUsersByAdmin(
    # Specifies the list of user IDs.
    input: UnlockUsersByAdminInput!): Void

  # Unmap Azure cloud accounts from the mapped Exocompute subscription.
  unmapAzureCloudAccountExocomputeSubscription(
    # Input for unmapping Azure cloud accounts from the mapped Exocompute subscription.
    input: UnmapAzureCloudAccountExocomputeSubscriptionInput!): UnmapAzureCloudAccountExocomputeSubscriptionReply!

  # Unmaps the archival location from the subscription.
  unmapAzurePersistentStorageSubscription(
    # Input to initiate archival location unmapping.
    input: UnmapAzurePersistentStorageSubscriptionInput!): Void

  # Unmap cloud accounts from the mapped Exocompute account.
  unmapCloudAccountExocomputeAccount(
    # Input for unmapping cloud account from the mapped Exocompute account.
    input: UnmapCloudAccountExocomputeAccountInput!): UnmapCloudAccountExocomputeAccountReply!

  # Unmount selected disks.
  unmountDisk(
    # Input required to unmount disks.
    input: UnmountDiskInput!): Void
  updateAccountOwner(
    # Specifies the user ID.
    userId: String!): Boolean!

  # Update the hidden status for the given auth domain users.
  updateAuthDomainUsersHiddenStatus(
    # Specifies the auth domain user and their new hidden status.
    input: UpdateAuthDomainUsersHiddenStatusInput!): Void

  # Update Rubrik cluster configuration to enable or not enable the Auto-enabled Data Discovery Policies feature.
  updateAutoEnablePolicyClusterConfig(
    # Rubrik cluster configuration to enable or not enable the Auto-enabled Data Discovery Policies feature.
    input: UpdateAutoEnablePolicyClusterConfigInput!): UpdateAutoEnablePolicyClusterConfigReply!
  updateAutomaticAwsTargetMapping(
    # Update AWS automatic target mapping.
    input: UpdateAutomaticAwsTargetMappingInput!): TargetMapping! @deprecated(reason: "This mutation is deprecated.")
  updateAutomaticAzureTargetMapping(
    # Update Azure automatic target mapping.
    input: UpdateAutomaticAzureTargetMappingInput!): TargetMapping! @deprecated(reason: "This mutation is deprecated.")
  updateAwsAccount(
    # Request for editing an existing AWS account.
    input: UpdateAwsAccountInput!): CloudAccount!

  # Update properties for a given AWS cloud account.
  updateAwsCloudAccount(
    # Arguments to update properties of AWS cloud account.
    input: UpdateAwsCloudAccountInput!): Void

  # Updates regions, stack ARN, and role ARN for a feature for a given cloud account.
  updateAwsCloudAccountFeature(
    # Arguments to update AWS cloud account feature.
    input: UpdateAwsCloudAccountFeatureInput!): UpdateAwsCloudAccountFeatureReply!
  updateAwsComputeSetting(
    # Request arguments for updating a Aws Compute Setting.
    input: UpdateAwsComputeSettingInput!): AwsComputeSettings! @deprecated(reason: "This mutation is no longer supported.")

  # Update AWS Exocompute configs.
  updateAwsExocomputeConfigs(
    # Input to create AWS exocompute configurations.
    input: UpdateAwsExocomputeConfigsInput!): UpdateAwsExocomputeConfigsReply!
  updateAwsTarget(
    # Request for updating an existing AWS target.
    input: UpdateAwsTargetInput!): Target!
  updateAzureAccount(
    # Input for editing an Azure account.
    input: UpdateAzureAccountInput!): CloudAccount!

  # Update names of the Azure Subscriptions cloud account and regions for the given feature.
  updateAzureCloudAccount(
    # Input for updating an Azure Cloud Account.
    input: UpdateAzureCloudAccountInput!): UpdateAzureCloudAccountReply!
  updateAzureTarget(
    # Request for updating an existing Azure target.
    input: UpdateAzureTargetInput!): Target!

  # Find bad disk of a node in the CDM cluster.
  updateBadDiskLedStatus(
    # Input for InternalFindBadDisk.
    input: UpdateBadDiskLedStatusInput!): UpdateBadDiskLedStatusReply!

  # Update a cassandra source.
  updateCassandraSource(
    # Input for V2ModifyMosaicSource.
    input: ModifyMosaicSourceInput!): MosaicAsyncResponse!

  # Edit Certificate.
  updateCertificate(
    # Certificate ID.
    certificateId: Long!,

    # Certificate name.
    name: String,

    # Certificate description.
    description: String,

    # Certificate.
    certificate: String): Boolean! @deprecated(reason: "Deprecated. Use updateGlobalCertificate instead.")
  updateCertificateHost(
    # Input for V1UpdateCertificateHost.
    input: UpdateCertificateHostInput!): UpdateCertificateHostReply!
  updateCloudNativeAwsStorageSetting(input: UpdateCloudNativeAwsStorageSettingInput!): UpdateCloudNativeAwsStorageSettingReply!
  updateCloudNativeAzureStorageSetting(input: UpdateCloudNativeAzureStorageSettingInput!): UpdateCloudNativeAzureStorageSettingReply!

  # Update indexing status for cloudnative snappables
  updateCloudNativeIndexingStatus(
    # Input required to update file indexing status of cloud native snappables.
    input: UpdateCloudNativeIndexingStatusInput!): UpdateCloudNativeIndexingStatusReply!

  # Update cloud native label rule
  updateCloudNativeLabelRule(
    # Input required to update a cloud-native label rule.
    input: UpdateCloudNativeLabelRuleInput!): Void

  # Updates an existing Rubrik Cloud Vault Storage Settings for the archival of azure cloud native protected objects.
  updateCloudNativeRcvAzureStorageSetting(
    # Request for updating an existing Rubrik Cloud Vault (RCV) Azure storage setting.
    input: UpdateCloudNativeRcvAzureStorageSettingInput!): UpdateCloudNativeRcvAzureStorageSettingReply!

  # Update cloud native tag rule
  updateCloudNativeTagRule(
    # Input required to update a cloud-native tag rule.
    input: UpdateCloudNativeTagRuleInput!): Void

  # Update the default address of a Rubrik cluster.
  updateClusterDefaultAddress(
    # Set the default address of a cluster.
    input: UpdateClusterDefaultAddressInput!): UpdateClusterDefaultAddressReply!
  updateClusterLocation(
    # The Rubrik cluster ID.
    clusterUuid: UUID!, clusterLocation: ClusterLocationEdit!): Cluster!

  # Assign NTP servers to Rubrik cluster
  # 
  # Supported in v5.0+
  # Assign NTP servers to Rubrik cluster.
  updateClusterNtpServers(
    # Input for InternalSetClusterNtpServers.
    input: UpdateClusterNtpServersInput!): ResponseSuccess!

  # Update Rubrik CDM cluster settings.
  updateClusterSettings(
    # Input for update cluster.
    input: UpdateClusterSettingsInput!): UpdateClusterSettingsReply!

  # Update the configuration, name, or deletion status of a configured group.
  updateConfiguredGroup(
    # The input for the UpdateConfiguredGroup mutation.
    input: UpdateConfiguredGroupInput!): Void

  # Update a custom analyzer.
  updateCustomAnalyzer(input: CreateCustomAnalyzerInput!): Analyzer!

  # Update a custom report.
  updateCustomReport(input: UpdateCustomReportInput!): UpdateCustomReportReply!

  # Updates the Azure app for the specified account in an idempotent manner to support Azure SQL Database and  Managed Instance Database authentication.
  updateCustomerAppPermissionForAzureSql: Void

  # Update the database log backup report properties
  # 
  # Supported in v5.3+
  # Update the properties for the database (SQL and Oracle) log backup delay email notification creation. The properties are logDelayThresholdInMin and logDelayNotificationFrequencyInMin.
  updateDatabaseLogReportingPropertiesForCluster(
    # Input for V1UpdateReportProperties.
    input: UpdateDatabaseLogReportingPropertiesForClusterInput!): DbLogReportProperties!

  # Update specific distribution list digests.
  updateDistributionListDigest(
    # Information required to save a distribution list digest.
    input: UpdateDistributionListDigestInput!): UpdateDistributionListDigestReply!

  # Update cluster DNS servers and search domains.
  updateDnsServersAndSearchDomains(
    # Input for UpdateDnsServersAndSearchDomains.
    input: UpdateDnsServersAndSearchDomainsInput!): ResponseSuccess!

  # Update event digests for specific recipients.
  updateEventDigest(
    # Information required to save an event digest.
    input: UpdateEventDigestInput!): UpdateEventDigestReply!

  # Update a failover cluster
  # 
  # Supported in v5.2+
  # Update failover cluster with specified properties.
  updateFailoverCluster(
    # Input for V1UpdateFailoverCluster.
    input: UpdateFailoverClusterInput!): UpdateFailoverClusterReply!

  # Update a failover cluster app
  # 
  # Supported in v5.2+
  # Update the failover cluster app with specified properties.
  updateFailoverClusterApp(
    # Input for V1UpdateFailoverClusterApp.
    input: UpdateFailoverClusterAppInput!): UpdateFailoverClusterAppReply!

  # Modify the list of cluster IPs
  # 
  # Supported in v5.0+
  # Modify the list of cluster IPs.
  updateFloatingIps(
    # Input for InternalUpdateClusterIps.
    input: UpdateFloatingIpsInput!): UpdateFloatingIpsReply!
  updateGcpTarget(
    # Request for updating an existing Gcp target.
    input: UpdateGcpTargetInput!): Target!

  # Edit a reader target of type Glacier on a Rubrik cluster.
  updateGlacierTarget(
    # Input for updating an existing Glacier target.
    input: UpdateGlacierTargetInput!): Target!

  # Edit an existing global certificate.
  updateGlobalCertificate(
    # Input to edit a global certificate.
    input: UpdateGlobalCertificateInput!): UpdateGlobalCertificateReply!

  # Update SLA Domain.
  updateGlobalSla(input: UpdateGlobalSlaInput!): GlobalSlaReply!

  # Update guest OS credentials.
  updateGuestCredential(
    # Input for InternalUpdateGuestCredential.
    input: UpdateGuestCredentialInput!): UpdateGuestCredentialReply!

  # Run health monitor policies on the CDM cluster.
  updateHealthMonitorPolicyStatus(
    # Input for V1RunPolicies.
    input: UpdateHealthMonitorPolicyStatusInput!): UpdateHealthMonitorPolicyStatusReply!

  # Update VM
  # 
  # Supported in v5.0+
  # Update VM with specified properties.
  updateHypervVirtualMachine(
    # Input for InternalUpdateHypervVirtualMachine.
    input: UpdateHypervVirtualMachineInput!): UpdateHypervVirtualMachineReply!

  # Power a Live Mount on and off
  # 
  # Supported in v5.0+
  # Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
  updateHypervVirtualMachineSnapshotMount(
    # Input for InternalUpdateHypervVirtualMachineSnapshotMount.
    input: UpdateHypervVirtualMachineSnapshotMountInput!): UpdateHypervVirtualMachineSnapshotMountReply!

  # Toggle the dismissed state of an insight.
  updateInsightState(
    # Input for toggling the dismissal state of an insight.
    input: UpdateInsightStateInput!): UpdateInsightStateReply!

  # Update the integration with the specified integration ID.
  updateIntegration(
    # Update integration input.
    input: UpdateIntegrationInput!): Void

  # Update a batch of integrations.
  updateIntegrations(
    # Update integrations input.
    input: UpdateIntegrationsInput!): Void
  updateIpWhitelist(whitelistMode: WhitelistModeEnum!, ipCidrs: [String!]!): Boolean!
  updateLambdaSettings(
    # Probability threshold for anomaly detector.
    anomalyThreshold: Float,

    # Probability threshold for ransomware detector.
    ransomwareThreshold: Float,

    # Flag to represent if alert on anomaly workload is enabled.
    isAnomalyAlertEnabled: Boolean): LambdaSettings!

  # Mutate LDAP integration.
  updateLdapIntegration(
    # ID for your LDAP integration.
    id: UUID,

    # Name for your LDAP integration.
    name: String!,

    # BindUserName for your LDAP integration.
    bindUserName: String!,

    # BindUserPassword for your LDAP integration.
    bindUserPassword: String!,

    # BaseDn for your LDAP integration.
    baseDn: String,

    # TrustedCerts for your LDAP integration.
    trustedCerts: String,

    # Dynamic DNS name for your LDAP integration.
    dynamicDnsName: String,

    # LdapServers for your LDAP integration.
    ldapServers: [LdapServerInput!],

    # User search filter for your LDAP integration.
    userSearchFilter: String,

    # User name attribute for your LDAP integration.
    userNameAttr: String,

    # Group membership attribute for your LDAP integration.
    groupMembershipAttr: String,

    # Group search filter for your LDAP integration.
    groupSearchFilter: String,

    # Group member attribute for your LDAP integration.
    groupMemberAttr: String): String!

  # Used by the administrator to update the account lockout settings for an organization.
  updateLockoutConfig(
    # Specifies all fields related to lockout configurations in one object.
    input: UpdateLockoutConfigInput!): UpdateLockoutConfigReply!

  # Mutation to update an existing Managed Volume.
  updateManagedVolume(
    # Input for InternalUpdateManagedVolume.
    input: UpdateManagedVolumeInput!): UpdateManagedVolumeReply!
  updateManualTargetMapping(
    # Update manual target mapping.
    input: UpdateManualTargetMappingInput!): TargetMapping!

  # Modifies configuration for a registered MongoDB source in NoSQL cluster.
  updateMongodbSource(
    # Input for V2ModifyMosaicSource.
    input: ModifyMosaicSourceInput!): MosaicAsyncResponse!

  # Modify a store
  # 
  # Supported in m3.2.0-m4.2.0.
  updateMosaicStore(
    # Input for V2ModifyMosaicStore.
    input: ModifyMosaicStoreInput!): MosaicAsyncResponse!

  # Update the default properties for Microsoft SQL databases.
  updateMssqlDefaultProperties(
    # Input for V1UpdateDefaultDbPropertiesV1.
    input: UpdateMssqlDefaultPropertiesInput!): UpdateMssqlDefaultPropertiesReply!

  # Update log shipping configuration of a Microsoft SQL Database.
  updateMssqlLogShippingConfiguration(
    # Input for V2UpdateLogShippingConfigurationV2.
    input: UpdateMssqlLogShippingConfigurationInput!): UpdateMssqlLogShippingConfigurationReply!

  # Bulk update multiple NAS shares
  # 
  # Supported in v7.0+
  # Updates fields like changelist of multiple NAS shares.
  updateNasShares(
    # Input for V1UpdateNasShares.
    input: UpdateNasSharesInput!): Void

  # Modify the information for a registered NAS system
  # 
  # Supported in v7.0+
  # Change the hostname that is associated with a NAS system. Update the credentials used to access the vendor-specific APIs.
  updateNasSystem(
    # Input for V1UpdateNasSystem.
    input: UpdateNasSystemInput!): UpdateNasSystemReply!
  updateNetworkThrottle(
    # Input for InternalUpdateNetworkThrottle.
    input: UpdateNetworkThrottleInput!): UpdateNetworkThrottleReply!
  updateNfsTarget(
    # Request for updating an existing NFS target.
    input: UpdateNfsTargetInput!): Target!

  # Patch Nutanix cluster
  # 
  # Supported in v5.0+
  # Patch the host, credentials, and/or CA certs of the specified Nutanix cluster object.
  updateNutanixCluster(
    # Input for InternalPatchNutanixCluster.
    input: UpdateNutanixClusterInput!): UpdateNutanixClusterReply!

  # Patch Nutanix Prism Central
  # 
  # Supported in v9.0+
  # Patch the host and credentials of Nutanix Prism Central.
  updateNutanixPrismCentral(
    # Input for InternalPatchNutanixPrismCentral.
    input: UpdateNutanixPrismCentralInput!): UpdateNutanixPrismCentralReply!

  # v5.0-v8.0: Patch VM
  # v8.1+: Patch virtual machine
  # 
  # Supported in v5.0+
  # v5.0-v5.3: Patch VM with specified properties
  # v6.0-v8.0: Patch VM with specified properties.
  # v8.1+: Patch virtual machine with specified properties.
  updateNutanixVm(
    # Input for InternalPatchNutanixVm.
    input: UpdateNutanixVmInput!): Void

  # Update O365 App authentication status to applicable app version.
  updateO365AppAuthStatus(
    # Input for updating O365 App authentication status.
    input: UpdateO365AppAuthStatusInput!): UpdateO365AppAuthStatusReply!

  # Update O365 Azure app permission in Azure AD portal.
  updateO365AppPermissions(
    # Input for updating O365 app permissions.
    input: UpdateO365AppPermissionsInput!): Void

  # Update the custom name for an O365 Organization.
  updateO365OrgCustomName(
    # Config for updating an O365 Org custom name.
    input: UpdateO365OrgCustomNameInput!): UpdateO365OrgCustomNameReply!

  # Update an Oracle Data Guard group
  # 
  # Supported in v6.0+
  # Update properties of an Oracle Data Guard group object.
  updateOracleDataGuardGroup(
    # Input for V1UpdateOracleDataGuardGroup.
    input: UpdateOracleDataGuardGroupInput!): OracleDbDetail!

  # Update an organization.
  updateOrg(
    # Input required for org update.
    input: UpdateOrgInput!): UpdateOrgReply!

  # Update organization security policy.
  updateOrgSecurityPolicy(
    # Input required for updating organization security policy.
    input: UpdateOrgSecurityPolicyInput!): Void

  # Update a classification policy.
  updatePolicy(input: UpdatePolicyInput!): ClassificationPolicyDetail!

  # Update previewer cluster configuration.
  updatePreviewerClusterConfig(previewerClusterConfig: PreviewerClusterConfigInput!): Cluster!

  # Update proxy config
  # 
  # Supported in v5.0+
  # Update proxy config.
  updateProxyConfig(
    # Input for InternalUpdateProxyConfig.
    input: UpdateProxyConfigInput!): UpdateProxyConfigReply!

  # Update RCS automatic target mapping.
  updateRcsAutomaticTargetMapping(
    # Update RCS automatic target mapping.
    input: UpdateRcsAutomaticTargetMappingInput!): TargetMapping! @deprecated(reason: "This mutation is deprecated. Please use updateRcvLocationsFromTemplate.")

  # Updates the Rubrik Cloud Vault archival location.
  updateRcvTarget(
    # Request for updating a new Rubrik Cloud Vault location.
    input: UpdateRcvTargetInput!): Target!

  # Update the setup information, address, username, and password for the replication target.
  updateReplicationTarget(
    # Request to update a replication target on the replication source.
    input: UpdateReplicationTargetInput!): Void

  # This endpoint is deprecated.
  updateRole(
    # ID of the role.
    roleId: String!, name: String!, description: String!,

    # Permissions in the role.
    permissions: [PermissionInput!]!): Boolean!
  updateRoleAssignments(
    # List of user IDs.
    userIds: [String!],

    # List of group IDs.
    groupIds: [String!], roleIds: [String!]!): Boolean!
  updateS3CompatibleTarget(
    # Request for updating an existing S3Compatible target.
    input: UpdateS3CompatibleTargetInput!): Target!

  # Update a scheduled report.
  updateScheduledReport(input: UpdateScheduledReportInput!): UpdateScheduledReportReply!

  # Update the specified service account.
  updateServiceAccount(
    # Input for updating a service account.
    input: UpdateServiceAccountInput!): UpdateServiceAccountReply!

  # Update SNMP configuration
  # 
  # Supported in v5.0+
  # Update the SNMP configuration for a specified Rubrik cluster.
  updateSnmpConfig(
    # Input for InternalUpdateSnmpConfig.
    input: UpdateSnmpConfigInput!): UpdateSnmpConfigReply!

  # Update storage arrays in Rubrik clusters.
  updateStorageArrays(
    # List of storage arrays to update.
    input: UpdateStorageArraysInput!): UpdateStorageArraysReply!

  # Updates a Rubrik Support representative's access to the customer's account.
  updateSupportUserAccess(
    # Input for the request to update a Rubrik Support representative's access to customer account.
    input: UpdateSupportUserAccessInput!): Void

  # Update the specified syslog export rule
  # 
  # Supported in v5.1+
  # Update the syslog export rule specified by the given id.
  updateSyslogExportRule(
    # Input for V1UpdateSyslogExportRule.
    input: UpdateSyslogExportRuleInput!): UpdateSyslogExportRuleReply!

  # Update Tape archival location on a CDM cluster.
  updateTapeTarget(
    # Request for updating an existing Tape target.
    input: UpdateTapeTargetInput!): Target!

  # Enable or disable the SSH Tunnel for Support Access
  # 
  # Supported in v5.0+
  # To be used by Admin to open or close a SSH tunnel for support. When enabling the support tunnel, the node 'id' must be *me* or the current node's 'id', because remote open is not supported. When disabling a support tunnel, the node 'id' can be that of any node in the cluster.
  updateTunnelStatus(
    # Input for InternalUpdateTunnelStatus.
    input: UpdateTunnelStatusInput!): UpdateTunnelStatusReply!

  # Update vCenter Server
  # 
  # Supported in v5.0+
  # Update the address, username and password of the specified vCenter Server object.
  updateVcenter(
    # Input for V1UpdateVcenter.
    input: UpdateVcenterInput!): UpdateVcenterReply!

  # Set the ingest and export bandwidth limits for HotAdd with the vCenter
  # 
  # Supported in v5.3+
  # Set the ingest and export bandwidth limits in Mbps when using HotAdd with the vCenter. These limits are shared across all HotAdd proxies for the Center.
  updateVcenterHotAddBandwidth(
    # Input for V1SetHotAddBandwidth.
    input: UpdateVcenterHotAddBandwidthInput!): RequestSuccess!

  # Set the user-configured network for HotAdd backup and recovery
  # 
  # Supported in v5.3+
  # Set the user-configured network for HotAdd backup and recovery operations on VMware on AWS.
  updateVcenterHotAddNetwork(
    # Input for V1SetHotAddNetwork.
    input: UpdateVcenterHotAddNetworkInput!): RequestSuccess!

  # Update Volume Group properties
  # 
  # Supported in v5.3+
  # Patch Volume Group with specified properties.
  updateVolumeGroup(
    # Input for V1PatchVolumeGroup.
    input: UpdateVolumeGroupInput!): UpdateVolumeGroupReply!

  # Update the multi-tag filter
  # 
  # Supported in v7.0+
  # Updates the name, condition, and description of the specified multi-tag filter.
  updateVsphereAdvancedTag(
    # Input for V1UpdateFilter.
    input: UpdateVsphereAdvancedTagInput!): UpdateVsphereAdvancedTagReply!

  # Update VM
  # 
  # Supported in v5.0+
  # Update a virtual machine with specified properties. Use the guestCredential field to update the guest credential for a specified virtual machine.
  updateVsphereVm(
    # Input for V1UpdateVm.
    input: UpdateVsphereVmInput!): RequestSuccess!

  # Update a webhook.
  updateWebhook(
    # The webhook configuration to update.
    input: UpdateWebhookInput!): UpdateWebhookReply!

  # Update whitelisted analyzers for a path.
  updateWhitelistedAnalyzers(stdPath: String!, snappableFid: String!, snapshotFid: String!, analyzerIds: [String!]!, runAsync: Boolean!): String!

  # Updates status of AWS cloud account features to connected if they are in update permissions state. This mutation should be used with caution. It should be invoked only after the latest required permissions are granted to the AWS cloud account user used by Rubrik. This mutation does not verify if the required permissions are actually granted to the user or not. Its usage is restricted to only IAM user-based and authentication server-based AWS cloud accounts.
  upgradeAwsCloudAccountFeaturesWithoutCft(
    # Input to update status of AWS cloud account features to connected from update permissions state.
    input: UpgradeAwsCloudAccountFeaturesWithoutCftInput!): Boolean!

  # Set IAM user-based AWS account features status to Connected from Update Permissions state. It should be used by caution from cloud accounts only after latest required permissions are granted to authorized IAM user.
  upgradeAwsIamUserBasedCloudAccountPermissions(
    # Input to set status of IAM user-based AWS cloud account to connected from update permissions state.
    input: UpgradeAwsIamUserBasedCloudAccountPermissionsInput!): Boolean!

  # Update permissions of the Azure Subscriptions cloud account for given feature.
  upgradeAzureCloudAccount(
    # Input for upgrading an Azure Cloud Account.
    input: UpgradeAzureCloudAccountInput!): UpgradeAzureCloudAccountReply!

  # Set Azure Cloud Account feature status to Connected from Update Permissions state without any permission validation. It should be used by caution from cloud accounts which have been set up without using OAuth, only after adding the latest permissions that are required.
  upgradeAzureCloudAccountPermissionsWithoutOauth(
    # Input to set status of azure cloud account to connected from update permissions state without OAuth.
    input: UpgradeAzureCloudAccountPermissionsWithoutOauthInput!): UpgradeAzureCloudAccountPermissionsWithoutOauthReply!

  # Upgrade archival locations managed through a Rubrik cluster.
  upgradeCdmManagedTarget(
    # Request for upgrading archival locations managed through a Rubrik cluster.
    input: UpgradeCdmManagedTargetInput!): Void

  # Set GCP Cloud Account feature status to Connected from Update Permissions state without any permission validation. It should be used by caution from cloud accounts which have been set up without using OAuth, only after adding the latest permissions that are required.
  upgradeGcpCloudAccountPermissionsWithoutOauth(
    # Input to set status of GCP cloud account to connected from update permissions state without OAuth.
    input: UpgradeGcpCloudAccountPermissionsWithoutOauthInput!): UpgradeGcpCloudAccountPermissionsWithoutOauthReply!

  # Upgrade the Rubrik ioFilter for the VMware cluster with a specific ID
  # 
  # Supported in v5.1+
  # Upgrade the Rubrik ioFilter for a VMware cluster with a specific ID. The cluster must be in maintenance mode to upgrade the ioFilter successfully. The vCenter of the VMware compute cluster must be of version 6.7 and above.
  upgradeIoFilter(
    # Input for V1UpgradeIoFilter.
    input: UpgradeIoFilterInput!): RequestSuccess!

  # Converts a GPS account to an RSC account.
  upgradeToRsc: Void

  # Start a job to upload a database snapshot to a target blobstore.
  uploadDatabaseSnapshotToBlobstore(
    # Input required to upload a database snapshot to a target blobstore.
    input: UploadDatabaseSnapshotToBlobstoreInput!): AsyncJobStatus!

  # Validate and create AWS cloud account. If validation fails, no error is returned and the cause is present in the \"message\" field of return object or within admin/child accounts of return object. In case validation succeeds, it initiates creation of AWS cloud account. This is the first step to set up native protection.
  validateAndCreateAwsCloudAccount(
    # Input to validate AWS cloud account arguments.
    input: ValidateAndCreateAwsCloudAccountInput!): ValidateAndCreateAwsCloudAccountReply!

  # Validate KMS input provided on O365 subscription setup.
  validateAndSaveCustomerKmsInfo(
    # KMS details to be validated.
    input: ValidateAndSaveCustomerKmsInfoInput!): ValidateAndSaveCustomerKmsInfoReply!

  # Validate Oracle ACO file
  # 
  # Supported in v6.0+
  # Validate the provided Oracle ACO (Advanced Cloning Options) file.
  validateOracleAcoFile(
    # Specifies input for ValidateOracleAcoFileRequest including the Oracle database ID.
    input: ValidateOracleAcoFileInput!): ValidateOracleAcoFileReply!

  # Validate Oracle database backups
  # 
  # Supported in v5.3+
  # Queue a job to validate Oracle backups for a database snapshot or a specified timestamp.
  validateOracleDatabaseBackups(
    # Input for V1CreateOracleValidateBackupJob.
    input: ValidateOracleDatabaseBackupsInput!): AsyncRequestStatus!
  vmwareDownloadSnapshotFromLocation(
    # Input for V2VmwareDownloadSnapshotFromLocation.
    input: VmwareDownloadSnapshotFromLocationInput!): AsyncRequestStatus!

  # Trigger a bulk on demand snapshot.
  vsphereBulkOnDemandSnapshot(
    # Input for V1BulkCreateOnDemandBackup.
    input: VsphereBulkOnDemandSnapshotInput!): BatchAsyncRequestStatus!

  # Remove vCenter Server
  # 
  # Supported in v5.0+
  # Initiates an asynchronous job to remove a vCenter Server object. The vCenter Server cannot have VMs mounted through the Rubrik cluster.
  vsphereDeleteVcenter(
    # Input for V1DeleteVcenter.
    input: VsphereDeleteVcenterInput!): AsyncRequestStatus!

  # Exclude or include virtual disks during snapshot.
  vsphereExcludeVmDisks(
    # Input to include/exclude disk for taking snapshot.
    input: [VsphereExcludeVmDisksInput!]!): RequestSuccess! @deprecated(reason: "Deprecated. Use excludeVmDisks instead.")

  # Export snapshot of a virtual machine to standalone ESXi server.
  vsphereExportSnapshotToStandaloneHostV2(
    # Input for InternalCreateStandaloneExport.
    input: VsphereExportSnapshotToStandaloneHostV2Input!): AsyncRequestStatus!
  vsphereOnDemandSnapshot(
    # Input for V1CreateOnDemandBackup.
    input: VsphereOnDemandSnapshotInput!): AsyncRequestStatus!

  # Create a mass export for a group of virtual machines.
  vsphereVmBatchExport(
    # Input for V2BatchExport.
    input: VsphereVmBatchExportInput!): BatchAsyncRequestStatus!

  # Create a batch export for a group of virtual machines with datastore cluster support.
  vsphereVmBatchExportV3(
    # Input for V3BatchExportV3.
    input: VsphereVmBatchExportV3Input!): BatchAsyncRequestStatus!

  # Supported in v6.0+. Export a snapshot each from a set of virtual machines.
  vsphereVmBatchInPlaceRecovery(
    # Input for V2BatchInPlaceRecover.
    input: VsphereVmBatchInPlaceRecoveryInput!): BatchAsyncRequestStatus!

  # Designate a snapshot as expired and available for garbage collection. The snapshot must be an on-demand snapshot or a snapshot from a virtual machine that is not assigned to an SLA Domain.
  vsphereVmDeleteSnapshot(
    # Input for V1DeleteVmwareSnapshot.
    input: VsphereVmDeleteSnapshotInput!): Void

  # Download snapshot from archive
  # 
  # Supported in v5.0+
  # Provides a method for retrieving a snapshot, that is not available locally, from an archival location.
  vsphereVmDownloadSnapshot(
    # Input for V1CreateDownloadSnapshotFromCloud.
    input: VsphereVmDownloadSnapshotInput!): AsyncRequestStatus!

  # Download files from snapshot.
  vsphereVmDownloadSnapshotFiles(
    # Input for downloading vSphere snapshot files.
    input: VsphereVmDownloadSnapshotFilesInput!): AsyncRequestStatus!

  # Create a vSphere Export from a snapshot or a point-in-time.
  vsphereVmExportSnapshotV2(
    # Input for V2CreateExportV2.
    input: VsphereVmExportSnapshotV2Input!): AsyncRequestStatus!

  # Create a vSphere Export from a snapshot or a point-in-time with datastore cluster and virtual disk mapping support.
  vsphereVmExportSnapshotV3(
    # Input for V3CreateExportV3.
    input: VsphereVmExportSnapshotV3Input!): AsyncRequestStatus!

  # Download a snapshot from an archival location, then export a virtual machine using the downloaded snapshot
  # 
  # Supported in v5.3+
  # Download a snapshot from an archival location and then export a virtual machine using the downloaded snapshot.
  vsphereVmExportSnapshotWithDownloadFromCloud(
    # Input for V2CreateExportWithDownloadFromCloudV2.
    input: VsphereVmExportSnapshotWithDownloadFromCloudInput!): AsyncRequestStatus!

  # Initiate a mass instant recovery for a group of VMs.
  vsphereVmInitiateBatchInstantRecovery(
    # Input for V2BatchInstantRecover.
    input: VsphereVmInitiateBatchInstantRecoveryInput!): BatchAsyncRequestStatus!

  # Initiate a mass live mount for a group of VMs.
  vsphereVmInitiateBatchLiveMountV2(
    # Input for V2BatchMountSnapshotV2.
    input: VsphereVmInitiateBatchLiveMountV2Input!): BatchAsyncRequestStatus!

  # Attaching disks from a snapshot to an existing virtual machine
  # 
  # Supported in v5.0+
  # Requests a snapshot mount to attach disks to an existing virtual machine.
  vsphereVmInitiateDiskMount(
    # Input for InternalCreateMountDiskJob.
    input: VsphereVmInitiateDiskMountInput!): AsyncRequestStatus!

  # Trigger an in-place recovery from a snapshot or point-in-time.
  vsphereVmInitiateInPlaceRecovery(
    # Input for V2CreateInPlaceRecoveryV2.
    input: VsphereVmInitiateInPlaceRecoveryInput!): AsyncRequestStatus!

  # Instantly recover a vSphere virtual machine from a snapshot or point-in-time.
  vsphereVmInitiateInstantRecoveryV2(
    # Input for V2CreateInstantRecoveryV2.
    input: VsphereVmInitiateInstantRecoveryV2Input!): AsyncRequestStatus!

  # Create a vSphere Live Mount from a snapshot or point-in-time.
  vsphereVmInitiateLiveMountV2(
    # Input for V2CreateMountV2.
    input: VsphereVmInitiateLiveMountV2Input!): AsyncRequestStatus!

  # List ESXi datastores
  # 
  # Supported in v5.0+
  # Retrieve a list of the datastores for a specified ESXi host.
  vsphereVmListEsxiDatastores(
    # Input for InternalGetEsxiDatastores.
    input: VsphereVmListEsxiDatastoresInput!): VsphereVmListEsxiDatastoresReply!

  # Relocate a virtual machine to another datastore
  # 
  # Supported in v5.0+
  # Run storage VMotion to relocate a specified Live Mount into another data store.
  vsphereVmMountRelocate(
    # Input for V1RelocateMount.
    input: VsphereVmMountRelocateInput!): AsyncRequestStatus!

  # Create a Live Mount migration to a datastore or datastore cluster with virtual disk mapping support.
  vsphereVmMountRelocateV2(
    # Input for V2RelocateMountV2.
    input: VsphereVmMountRelocateV2Input!): AsyncRequestStatus!

  # Power a Live Mount on and off
  # 
  # Supported in v5.0+
  # Power a specified Live Mount virtual machine on or off. Pass **_true_** to power the virtual machine on and pass **_false_** to power the virtual machine off.
  vsphereVmPowerOnOffLiveMount(
    # Input for V1UpdateMount.
    input: VsphereVmPowerOnOffLiveMountInput!): VsphereVmPowerOnOffLiveMountReply!

  # Restores multiple files/directories from snapshot.
  vsphereVmRecoverFiles(
    # Vsphere recover files input.
    input: VsphereVmRecoverFilesInput!): VsphereAsyncRequestStatus! @deprecated(reason: "Deprecated. Use vsphereVmRecoverFilesNew instead.")

  # Restores multiple files/directories from snapshot.
  vsphereVmRecoverFilesNew(
    # Vsphere recover files input.
    input: VsphereVmRecoverFilesNewInput!): AsyncRequestStatus!

  # Register Rubrik Backup Service
  # 
  # Supported in v5.0+
  # Register the Rubrik Backup Service that is running on a specified host with the specified Rubrik cluster.
  vsphereVmRegisterAgent(
    # Input for V1VmRegisterAgent.
    input: VsphereVmRegisterAgentInput!): RequestSuccess!

  # Warms the search cache for an O365 workload.
  warmSearchCache(
    # The input for warm search cache for an O365 workload.
    input: WarmSearchCacheInput!): Boolean!
}
# Additional information about the vcenter object, such as name, version, os type, and api type, only available on clusters 5.1+.
type AboutInformation {
  version: String!
  name: String!
  apiType: String!
  osType: String!
}
# An absolute monthly recurrence pattern (e.g. 21st of every 3 months).
type AbsoluteMonthlyRecurrencePattern {
  # The interval at which the recurrence applies.
  interval: Int!

  # Which day of the month the event occurs.
  dayOfMonth: Int!
}
# An absolute yearly recurrence pattern (e.g. 25th of December).
type AbsoluteYearlyRecurrencePattern {
  # Which day of the month the event occurs.
  dayOfMonth: Int!

  # The month to which the recurrence applies.
  month: String!
}
type AccessGroup {
  groupId: String!
  groupName: String!
}
# Paginated list of AccessGroup objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AccessGroupConnection {
  # List of AccessGroup objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AccessGroupEdge!]!

  # List of AccessGroup objects.
  nodes: [AccessGroup!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AccessGroup objects matching the request arguments.
  count: Int!
}
# Wrapper around the AccessGroup object. This wrapper is used for pagination.
type AccessGroupEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AccessGroup object wrapped by this edge.
  node: AccessGroup!
}
enum AccessType {
  CREATE_ACCESS
  DELETE_ACCESS
  FULL_CONTROL
  READ_ACCESS
  WRITE_ACCESS
}
type AccessUser {
  userSid: String!
  username: String!
  email: String!
  numActivities: Long!
  activityDelta: Long!
  lastAccessTime: Long!
  subjectName: String!
}
# Paginated list of AccessUser objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AccessUserConnection {
  # List of AccessUser objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AccessUserEdge!]!

  # List of AccessUser objects.
  nodes: [AccessUser!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AccessUser objects matching the request arguments.
  count: Int!
}
# Wrapper around the AccessUser object. This wrapper is used for pagination.
type AccessUserEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AccessUser object wrapped by this edge.
  node: AccessUser!
}
# Product enabled via Salesforce.
type AccountProduct {
  # Account name for the given product.
  account: String!

  # Name of the product - GPS, Sonar, etc.
  name: ProductName!

  # The type of product - Revenue, Trial, POC.
  type: ProductType!

  # State of the product - Acive, disabled, etc.
  state: ProductState!

  # Date when product expires.
  expirationDate: DateTime!
}
# User account setting per Rubrik account.
type AccountSetting {
  # Specifies whether the EULA has been accepted.
  isEulaAccepted: Boolean

  # Specifies whether email notifications are enabled.
  isEmailNotificationEnabled: Boolean
}
# Account state.
enum AccountState {
  # Active.
  ACTIVE_STATE

  # Deleted.
  DELETED_STATE

  # Grace.
  GRACE_STATE

  # Hold.
  HOLD_STATE

  # Mark for deletion.
  MARKED_FOR_DELETION_STATE

  # The creation of the database is pending.
  PENDING_CREATION

  # The migration of the database is pending.
  PENDING_MIGRATION

  # Post-processing steps for the account are pending.
  PENDING_POST_PROCESSING
}
# Account type.
enum AccountType {
  # Poc account type.
  POC

  # Revenue account type.
  REVENUE

  # Unspecified account type.
  TYPE_UNSPECIFIED
}
enum AceFlags {
  CONTAINER_INHERIT
  EMPTY_FLAG
  FAILED_ACCESS
  INHERITED
  INHERIT_ONLY
  NO_PROPAGATE_INHERIT
  OBJECT_INHERIT
  SUCCESSFUL_ACCESS
}
enum AceQualifier {
  ACCESS_ALLOWED
  ACCESS_DENIED
  CUSTOM
  SYSTEM_ALARM
  SYSTEM_AUDIT
}
# Upgrade action.
enum ActionType {
  # Upgrade resume.
  RESUME

  # Upgrade rollback.
  ROLLBACK

  # Upgrade start.
  START
}
# Active Directory workload related app metadata for a snapshot.
type ActiveDirectoryAppMetadata {
  # Count of different type of objects in the snapshot.
  objectsCount: ActiveDirectoryObjectsCount
}
# Supported in v9.0+
input ActiveDirectoryContainerRestoreOptionsInput {
  # Supported in v9.0+
  # Whether to delete the objects within a container if Active Directory contains those children objects, but they are missing in the backup copy.
  shouldDeleteExtraObjects: Boolean

  # Supported in v9.0+
  # Whether to create the objects within a container only when they are missing in the Active Directory. If set to true, the existing objects will remain untouched.
  shouldOnlyRecreateMissingObjects: Boolean
}
# Active Directory Domain.
type ActiveDirectoryDomain implements CdmHierarchyObject , HierarchyObject {
  # ID of the Rubrik CDM cluster.
  cdmId: String!

  # Name of the Active Directory domain.
  domainName: String!

  # ID of the Active Directory domain.
  domainSid: String

  # Rubrik cluster.
  cluster: Cluster!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): ActiveDirectoryDomainDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): ActiveDirectoryDomainPhysicalChildTypeConnection!

  # SMB Domain.
  smbDomain: SmbDomain

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ActiveDirectoryDomain objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ActiveDirectoryDomainConnection {
  # List of ActiveDirectoryDomain objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ActiveDirectoryDomainEdge!]!

  # List of ActiveDirectoryDomain objects.
  nodes: [ActiveDirectoryDomain!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ActiveDirectoryDomain objects matching the request arguments.
  count: Int!
}
# Active Directory Domain Controller.
type ActiveDirectoryDomainController implements CdmHierarchyObject , HierarchyObject , ActiveDirectoryDomainDescendantType , ActiveDirectoryDomainPhysicalChildType , HierarchySnappable , CdmHierarchySnappableNew {
  # ID of the Rubrik CDM cluster.
  cdmId: String!

  # Specifies whether the domain controller is a relic.
  isRelic: Boolean!

  # UUID of the agent.
  agentUuid: String

  # Name of the host.
  hostname: String!

  # RBS status.
  rbsStatus: HostConnectionStatus!

  # Service status of the Active Directory.
  adServiceStatus: ActiveDirectoryServiceStatus!

  # Different master roles played by the Domain Controller.
  fsmoRoles: [FsmoRoles!]!

  # Mentions if services like DNS or DHCP are hosted.
  serverRoles: [ServerRoles!]!

  # Includes statistics for the protected objects, for example, archive storage.
  reportWorkload: Snappable

  # Active Directory Domain to which this domain controller belongs to.
  activeDirectoryDomain: ActiveDirectoryDomain!

  # Rubrik cluster UUID.
  cluster: Cluster!

  # Physical location of the Domain Controller.
  dcLocation: String

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Paginated list of ActiveDirectoryDomainController objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ActiveDirectoryDomainControllerConnection {
  # List of ActiveDirectoryDomainController objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ActiveDirectoryDomainControllerEdge!]!

  # List of ActiveDirectoryDomainController objects.
  nodes: [ActiveDirectoryDomainController!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ActiveDirectoryDomainController objects matching the request arguments.
  count: Int!
}
# Wrapper around the ActiveDirectoryDomainController object. This wrapper is used for pagination.
type ActiveDirectoryDomainControllerEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ActiveDirectoryDomainController object wrapped by this edge.
  node: ActiveDirectoryDomainController!
}
# Active Directory domain descendant type, eg. ActiveDirectoryDomainController.
interface ActiveDirectoryDomainDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ActiveDirectoryDomainDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ActiveDirectoryDomainDescendantTypeConnection {
  # List of ActiveDirectoryDomainDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ActiveDirectoryDomainDescendantTypeEdge!]!

  # List of ActiveDirectoryDomainDescendantType objects.
  nodes: [ActiveDirectoryDomainDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ActiveDirectoryDomainDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the ActiveDirectoryDomainDescendantType object. This wrapper is used for pagination.
type ActiveDirectoryDomainDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ActiveDirectoryDomainDescendantType object wrapped by this edge.
  node: ActiveDirectoryDomainDescendantType!
}
# Wrapper around the ActiveDirectoryDomain object. This wrapper is used for pagination.
type ActiveDirectoryDomainEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ActiveDirectoryDomain object wrapped by this edge.
  node: ActiveDirectoryDomain!
}
# Active Directory domain physical child type, eg. ActiveDirectoryDomainController.
interface ActiveDirectoryDomainPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ActiveDirectoryDomainPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ActiveDirectoryDomainPhysicalChildTypeConnection {
  # List of ActiveDirectoryDomainPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ActiveDirectoryDomainPhysicalChildTypeEdge!]!

  # List of ActiveDirectoryDomainPhysicalChildType objects.
  nodes: [ActiveDirectoryDomainPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ActiveDirectoryDomainPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the ActiveDirectoryDomainPhysicalChildType object. This wrapper is used for pagination.
type ActiveDirectoryDomainPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ActiveDirectoryDomainPhysicalChildType object wrapped by this edge.
  node: ActiveDirectoryDomainPhysicalChildType!
}
# Configuration for creating Active Directory Live Mount.
input ActiveDirectoryLiveMountConfigInput {
  # Supported in v9.0+
  # List of valid usernames in the domain that can access the SMB share for this Live Mount.
  validUsers: [String!] = []

  # Supported in v9.0+
  # List of valid SMB host IP addresses that can access the SMB share for this Live Mount.
  validIps: [String!] = []

  # Supported in v9.0+
  # Password to authenticate the mounting of the share on host.
  password: String

  # Supported in v9.0+
  # Valid Active Directory domain name for users accessing this Live Mount over SMB.
  domainName: String

  # Supported in v9.0+
  # IP subnet specifying an outgoing VLAN interface for a Rubrik node. This is a required value when creating an export on a Rubrik node that has multiple VLAN interfaces.
  subnet: String
}
# Configuration for modifying the Active Directory Live Mount.
input ActiveDirectoryModifyLiveMountConfigInput {
  # Supported in v9.0+
  # List of valid SMB host IP addresses that can access the SMB share for this Live Mount.
  validIps: [String!] = []

  # Supported in v9.0+
  # Password to authenticate mounting the share on a host.
  password: String

  # Supported in v9.0+
  # IP subnet specifying an outgoing VLAN interface for a Rubrik node. You must provide the IP subnet when creating a Managed Volume on a Rubrik node with multiple VLAN interfaces.
  subnet: String
}
# Supported in v9.0+
# Options for objects that have been moved across Organizational Units (OUs) or Containers.
enum ActiveDirectoryObjectMovedOption {
  # This option is not supported.
  ACTIVE_DIRECTORY_OBJECT_MOVED_OPTION_MOVE_BACK_AND_RESTORE_ATTRIBUTES

  # In case object has moved to different OU/Container, set the attributes for the moved object.
  ACTIVE_DIRECTORY_OBJECT_MOVED_OPTION_RESTORE_ATTRIBUTES

  # In case object has moved to different OU/Container, skip setting the attributes for the moved object.
  ACTIVE_DIRECTORY_OBJECT_MOVED_OPTION_SKIP
}
# Supported in v9.0+
# Options for objects that have been moved across Organizational Units (OUs) or Containers.
enum ActiveDirectoryObjectNameConflictOption {
  # In case we find samAccount name conflicts with another object, restore the attributes in the object matching the same SamAccount name.
  ACTIVE_DIRECTORY_OBJECT_NAME_CONFLICT_OPTION_RESTORE_ATTRIBUTES

  # Skip setting the attributes objects having samAccount name conflict.
  ACTIVE_DIRECTORY_OBJECT_NAME_CONFLICT_OPTION_SKIP
}
# Supported in v9.0+
input ActiveDirectoryObjectRecoveryConfigInput {
  # Supported in v9.0+
  # Specifies whether to merge current linked attributes with the ones in backup or to wipe all current and restore to the exact state in backup.
  shouldMergeLinkedAttrs: Boolean

  # Supported in v9.0+
  # Options for restoring user accounts.
  userRestoreOptions: ActiveDirectoryUserRestoreOptionsInput

  # Supported in v9.0+
  # Restore the objects to a different container.
  restoreToDifferentContainer: String

  # Supported in v9.0+
  # Proceed with the recovery process even if you encounter errors.
  shouldContinueOnError: Boolean

  # Supported in v9.0+
  # Specifies whether to remove the attribute if it is not present in the backup copy but is present in the Active Directory live copy.
  clearUpAttrsIfNullInBackup: Boolean

  # Supported in v9.0+
  # Credentials required for LDAP binding.
  credsForRestore: ActiveDirectoryRecoveryLdapCredsInput

  # Supported in v9.0+
  # Whether to restore the parent objects of the provided Distinguished Name Tag if the parent objects are absent.
  shouldCreateMissingParents: Boolean

  # Supported in v9.0+
  # Options for restoring Containers and Organizational Units (OUs).
  containerRestoreOptions: ActiveDirectoryContainerRestoreOptionsInput

  # Supported in v9.0+
  # ID of the archival or replication location.
  locationId: String

  # Supported in v9.0+
  # Behavior to be followed when an object name conflicts with an existing object in Active Directory.
  nameConflict: ActiveDirectoryObjectNameConflictOption

  # Supported in v9.0+
  # Behavior to be followed when an object has been moved across Organizational Units (OUs) or Containers.
  objectMovedOptions: ActiveDirectoryObjectMovedOption

  # Required. Supported in v9.0+
  # Distinguished Name Tag of the objects to be restored.
  domainControllerRecoveryObjects: [ActiveDirectoryRecoveryObjectInput!]!
}
# List of matching objects.
type ActiveDirectoryObjectSearchResponse {
  # Required. Supported in v9.1+
  # Display name of the Active Directory object.
  name: String!

  # Required. Supported in v9.1+
  # Resultant versions of the objects with that name.
  versions: [ActiveDirectorySearchVersions!]!
}
# Paginated list of ActiveDirectoryObjectSearchResponse objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ActiveDirectoryObjectSearchResponseConnection {
  # List of ActiveDirectoryObjectSearchResponse objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ActiveDirectoryObjectSearchResponseEdge!]!

  # List of ActiveDirectoryObjectSearchResponse objects.
  nodes: [ActiveDirectoryObjectSearchResponse!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ActiveDirectoryObjectSearchResponse objects matching the request arguments.
  count: Int!
}
# Wrapper around the ActiveDirectoryObjectSearchResponse object. This wrapper is used for pagination.
type ActiveDirectoryObjectSearchResponseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ActiveDirectoryObjectSearchResponse object wrapped by this edge.
  node: ActiveDirectoryObjectSearchResponse!
}
# Supported in v9.0+
# The supported Active Directory object types.
enum ActiveDirectoryObjectType {
  # Active Directory built-in domain.
  ACTIVE_DIRECTORY_OBJECT_TYPE_BUILTIN_DOMAIN

  # Active Directory child domain.
  ACTIVE_DIRECTORY_OBJECT_TYPE_CHILD_DOMAIN

  # Active Directory computer object type.
  ACTIVE_DIRECTORY_OBJECT_TYPE_COMPUTER

  # Active Directory contact object type.
  ACTIVE_DIRECTORY_OBJECT_TYPE_CONTACT

  # Active Directory container object type.
  ACTIVE_DIRECTORY_OBJECT_TYPE_CONTAINER

  # Active Directory domain root.
  ACTIVE_DIRECTORY_OBJECT_TYPE_DOMAIN_ROOT

  # Active Directory group.
  ACTIVE_DIRECTORY_OBJECT_TYPE_GROUP

  # Active Directory group policy.
  ACTIVE_DIRECTORY_OBJECT_TYPE_GROUP_POLICY_OBJECT

  # Active Directory organization unit.
  ACTIVE_DIRECTORY_OBJECT_TYPE_ORGANIZATION_UNIT

  # Unknown object type.
  ACTIVE_DIRECTORY_OBJECT_TYPE_UNKNOWN

  # Active Directory user object type.
  ACTIVE_DIRECTORY_OBJECT_TYPE_USER
}
# Count of different type of Active Directory objects in the snapshot.
type ActiveDirectoryObjectsCount {
  # Count of users in the snapshot.
  users: Long

  # Count of groups in the snapshot.
  groups: Long

  # Count of contacts in the snapshot.
  contacts: Long

  # Count of computers in the snapshot.
  computers: Long

  # Count of organizational units in the snapshot.
  organizationalUnits: Long

  # Count of containers in the snapshot.
  containers: Long

  # Count of group policies in the snapshot.
  gpos: Long
}
# Supported in v9.0+
input ActiveDirectoryRecoveryLdapCredsInput {
  # Required. Supported in v9.0+
  # Password for the specified LDAP user.
  password: String!

  # Required. Supported in v9.0+
  # LDAP username.
  username: String!
}
# Supported in v9.0+
input ActiveDirectoryRecoveryObjectInput {
  # Supported in v9.0+
  # Type of the object.
  objectType: ActiveDirectoryObjectType

  # Required. Supported in v9.0+
  # Distinguished Name Tag of the objects to be restored.
  dnt: Long!
}
# Input for Active Directory objects restore.
input ActiveDirectoryRestoreConfigInput {
  # Supported in v9.0+
  # ID of the snapshot to be used for authoritative restore.
  snapshotForAuthoritativeRestore: String

  # Required. Restore configuration for each Active Directory Domain Controller.
  domainControllerRestoreConfigs: [DomainControllerRestoreConfigInput!]!

  # Required. Whether to perform authoritative Active Directory objects restore or not.
  shouldPerformAuthoritativeAdObjectsRestore: Boolean!

  # Required. Supported in v9.0+
  # Whether to perform authoritative SYSVOL restore or not.
  shouldPerformAuthoritativeSysvolRestore: Boolean!
}
# Resultant versions of the objects with requested name.
type ActiveDirectorySearchVersions {
  # Required. Supported in v9.1+
  # Distinguished name of the Active Directory object.
  dn: String!

  # Required. Supported in v9.1+
  # The Distinguished Name Tag (DNT) of the Active Directory object.
  dnt: Int!

  # Required. Supported in v9.1+
  # ID of the snapshot containing the Active Directory object.
  snapshotId: String!

  # Type of the object.
  objectType: ActiveDirectoryObjectType!
}
# Host connectivity status.
type ActiveDirectoryServiceStatus {
  # Connectivity status of host.
  serviceStatus: ServiceStatus!

  # Timestamp when status was updated.
  timestampMillis: DateTime
}
# Supported in v9.0+
input ActiveDirectorySnapshotDownloadConfigInput {
  # Supported in v9.0+
  # ID of the SLA Domain to manage retention of the downloaded snapshot.
  slaId: String
}
# Supported in v9.0+
# Recovery options for users.
enum ActiveDirectoryUserPasswordRecoveryOption {
  # No password would be set for the objects that would be recovered from Tombstoned state or the new objects that would be created. User will be left in not enabled state.
  ACTIVE_DIRECTORY_USER_PASSWORD_RECOVERY_OPTION_DONT_RESTORE_PASSWORD

  # The new users that would be created or the users that would be recovered from Tombstoned state, would have the same password as in the backup copy.
  ACTIVE_DIRECTORY_USER_PASSWORD_RECOVERY_OPTION_RESTORE_PASSWORD_FROM_BACKUP_COPY

  # While recovering the user from recycle bin, retain the same password as that what user had before it was deleted.
  ACTIVE_DIRECTORY_USER_PASSWORD_RECOVERY_OPTION_RETAIN_RECYCLE_BIN_PASSWORD
}
# Supported in v9.0+
input ActiveDirectoryUserRestoreOptionsInput {
  # Supported in v9.0+
  # Whether to enable the user after restore operation.
  shouldEnableUser: Boolean

  # Supported in v9.0+
  # Whether the user should be prompted to change the password upon their next login.
  shouldChangePassword: Boolean

  # Supported in v9.0+
  # Set the specified password for all users that have been restored.
  password: String

  # Supported in v9.0+
  # Options for the recovery of the user's password.
  passwordOptions: ActiveDirectoryUserPasswordRecoveryOption
}
# An activity that occurred on RSC or a Rubrik cluster.
type Activity {
  # The time at which this activity occurred.
  time: DateTime!

  # The type of this activity.
  type: ActivityTypeEnum!

  # The status of this activity.
  status: ActivityStatusEnum!

  # The severity of this activity.
  severity: ActivitySeverityEnum!

  # The message attached to this activity.
  message: String!

  # The ID of the object associated with this activity.
  objectId: String!

  # The type of the object associated with this activity.
  objectType: ActivityObjectTypeEnum!

  # The current progress of this activity.
  progress: String

  # Additional information pertaining to this activity.
  activityInfo: String

  # The ID of the activity.
  id: ID!

  # The activity series to which this activity belongs.
  activitySeries: ActivitySeries!

  # The ID of the Rubrik cluster where this activity occurred.
  clusterId: UUID!
}
enum ActivityAccessType {
  CREATE_ACTIVITY
  DELETE_ACTIVITY
  READ_ACTIVITY
  WRITE_ACTIVITY
}
type ActivityChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [ActivitySeriesGroupByEnum!]
}
# Paginated list of Activity objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ActivityConnection {
  # List of Activity objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ActivityEdge!]!

  # List of Activity objects.
  nodes: [Activity!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Activity objects matching the request arguments.
  count: Int!
}
# Wrapper around the Activity object. This wrapper is used for pagination.
type ActivityEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Activity object wrapped by this edge.
  node: Activity!
}
# The list of object types for activities.
enum ActivityObjectTypeEnum {
  # Specifies that the activity object type is related to Activity Directory domain.
  ACTIVE_DIRECTORY_DOMAIN

  # Specifies that the activity object type is related to Activity Directory domain controller.
  ACTIVE_DIRECTORY_DOMAIN_CONTROLLER

  # Specifies that the activity object type is Atlassian site.
  ATLASSIAN_SITE

  # Specifies that the activity object type is AWS S3 Bucket.
  AWS_NATIVE_S3_BUCKET

  # Specifies that the activity object type is Azure AD Directory.
  AZURE_AD_DIRECTORY

  # Specifies that the activity object type is Azure Storage Account.
  AZURE_STORAGE_ACCOUNT

  # Specifies that the activity object type is App Blueprint.
  AppBlueprint

  # Specifies that the activity object type is Orchestrated Application Recovery.
  AppFlows

  # Specifies that the activity object type is Auth Domain.
  AuthDomain

  # Specifies that the activity object type is AWS Account.
  AwsAccount

  # Specifies that the activity object type is AWS Event Type.
  AwsEventType

  # Specifies that the activity object type is AWS Native Account.
  AwsNativeAccount

  # Specifies that the activity object type is AWS Native EBS Volume.
  AwsNativeEbsVolume

  # Specifies that the activity object type is AWS Native EC2 Instance.
  AwsNativeEc2Instance

  # Specifies that the activity object type is AWS Native RDS Instance.
  AwsNativeRdsInstance

  # Specifies that the activity object type is Azure Native Disk.
  AzureNativeDisk

  # Specifies that the activity object type is Azure Native Subscription.
  AzureNativeSubscription

  # Specifies that the activity object type is Azure Native Virtual Machine.
  AzureNativeVm

  # Specifies that the activity object type is Azure SQL Database.
  AzureSqlDatabase

  # Specifies that the activity object type is Azure SQL Database Server.
  AzureSqlDatabaseServer

  # Specifies that the activity object type is Azure SQL Managed Instance.
  AzureSqlManagedInstance

  # Specifies that the activity object type is Azure SQL Managed Instance Database.
  AzureSqlManagedInstanceDatabase

  # Specifies that the activity object type is Cassandra column family.
  CASSANDRA_COLUMN_FAMILY

  # Specifies that the activity object type is Cassandra keyspace.
  CASSANDRA_KEYSPACE

  # Specifies that the activity object type is Cassandra source.
  CASSANDRA_SOURCE

  # Specifies that the activity object type is a certificate.
  CERTIFICATE_MANAGEMENT

  # Specifies that the activity object type is Cloud Direct NAS export.
  CLOUD_DIRECT_NAS_EXPORT

  # Specifies that the activity object type is Capacity Bundle.
  CapacityBundle

  # Specifies that the activity object type is Certificate.
  Certificate

  # Specifies that the activity object type is Cloud Native Virtual Machine.
  CloudNativeVirtualMachine

  # Specifies that the activity object type is Cloud Native Virtual Machine.
  CloudNativeVm

  # Specifies that the activity object type is Rubrik Cluster.
  Cluster

  # Specifies that the activity object type is Compute Instance.
  ComputeInstance

  # Specifies that the activity object type is Data Location.
  DataLocation

  # Specifies that the activity object type is Db2 Database.
  Db2Database

  # Specifies that the activity object type is Db2 Instance.
  Db2Instance

  # Specifies that the activity object type is related to Encryption Management.
  ENCRYPTION_MANAGEMENT

  # Specifies that the activity object type is EC2 Instance.
  Ec2Instance

  # Specifies that the activity object type is Envoy.
  Envoy

  # Specifies that the activity object type is Exchange Database.
  ExchangeDatabase

  # Specifies that the activity object type is Exocompute.
  Exocompute

  # Specifies that the activity object type is Failover Cluster App.
  FailoverClusterApp

  # Specifies that the activity object type is GCP Native Disk.
  GcpNativeDisk

  # Specifies that the activity object type is GCP Native GCE Instance.
  GcpNativeGceInstance

  # Specifies that the activity object type is GCP Native Project.
  GcpNativeProject

  # Specifies that the activity object type is HDFS.
  Hdfs

  # Specifies that the activity object type is Host.
  Host

  # Specifies that the activity object type is HyperV SCVMM.
  HypervScvmm

  # Specifies that the activity object type is HyperV Server.
  HypervServer

  # Specifies that the activity object type is Hyperv Virtual Machine.
  HypervVm

  # Specifies that the activity object type is Jira project.
  JIRA_PROJECT

  # Specifies that the activity object type is Jira settings.
  JIRA_SETTINGS

  # Specifies that the activity object type is Job Instance.
  JobInstance

  # Specifies that the activity object type is Kubernetes Cluster.
  K8S_CLUSTER

  # Specifies that the activity object type is Kubernetes Protection Set.
  K8S_PROTECTION_SET

  # Specifies that the activity object type is Kubernetes Cluster.
  KuprCluster

  # Specifies that the activity object type is Kubernetes Namespace.
  KuprNamespace

  # Specifies that the activity object type is LDAP.
  Ldap

  # Specifies that the activity object type is Linux Fileset.
  LinuxFileset

  # Specifies that the activity object type is Linux Host.
  LinuxHost

  # Specifies that the activity object type is MongoDB collection.
  MONGODB_COLLECTION

  # Specifies that the activity object type is MongoDB database.
  MONGODB_DATABASE

  # Specifies that the activity object type is MongoDB source.
  MONGODB_SOURCE

  # Specifies that the activity object type is MongoDB collection.
  MONGO_COLLECTION

  # Specifies that the activity object type is MongoDB database.
  MONGO_DATABASE

  # Specifies that the activity object type is MongoDB source.
  MONGO_SOURCE

  # Specifies that the activity object type is Managed Volume.
  ManagedVolume

  # Specifies that the activity object type is MSSQL.
  Mssql

  # Specifies that the activity object type is NAS Fileset.
  NAS_FILESET

  # Specifies that the activity object type is Nutanix Prism Central.
  NUTANIX_PRISM_CENTRAL

  # Specifies that the activity object type is NAS Host.
  NasHost

  # Specifies that the activity object type is NAS System.
  NasSystem

  # Specifies that the activity object type is Nutanix Cluster.
  NutanixCluster

  # Specifies that the activity object type is Nutanix Virtual Machine.
  NutanixVm

  # Specifies that the activity object type is O365 Calendar.
  O365Calendar

  # Specifies that the activity object type is O365 Group.
  O365Group

  # Specifies that the activity object type is O365 Mailbox.
  O365Mailbox

  # Specifies that the activity object type is O365 OneDrive.
  O365Onedrive

  # Specifies that the activity object type is O365 Organization.
  O365Organization

  # Specifies that the activity object type is O365 SharePoint Drive.
  O365SharePointDrive

  # Specifies that the activity object type is O365 SharePoint List.
  O365SharePointList

  # Specifies that the activity object type is O365 Site.
  O365Site

  # Specifies that the activity object type is O365 Team.
  O365Team

  # Specifies that the activity object type is OAuth Token.
  OAUTH_TOKEN

  # Specifies that the activity object type is Object Protection.
  ObjectProtection

  # Specifies that the activity object type is Oracle.
  Oracle

  # Specifies that the activity object type is Oracle Database.
  OracleDb

  # Specifies that the activity object type is Oracle Host.
  OracleHost

  # Specifies that the activity object type is Oracle RAC.
  OracleRac

  # Specifies that the activity object type is RSC Account.
  PolarisAccount

  # Specifies that the activity object type is Public Cloud Machine Instance.
  PublicCloudMachineInstance

  # Rubrik cluster replication pair.
  REPLICATION_PAIR

  # Specifies that the activity object type is Rubrik EBS Volume.
  RubrikEbsVolume

  # Specifies that the activity object type is Rubrik EC2 Instance.
  RubrikEc2Instance

  # Specifies that the activity object type is Saml SSO.
  SamlSso

  # Specifies that the activity object type is Sap Hana Database.
  SapHanaDb

  # Specifies that the activity object type is Sap Hana System.
  SapHanaSystem

  # Specifies that the activity object type is Share Fileset.
  ShareFileset

  # Specifies that the activity object type is SLA Domain.
  SlaDomain

  # Specifies that the activity object type is SMB Domain.
  SmbDomain

  # Specifies that the activity object type is Snap Mirror Cloud.
  SnapMirrorCloud

  # Specifies that the activity object type is Storage Array.
  StorageArray

  # Specifies that the activity object type is Storage Array Volume Group.
  StorageArrayVolumeGroup

  # Specifies that the activity object type is Storage Location.
  StorageLocation

  # Specifies that the activity object type is Storm.
  Storm

  # Specifies that the activity object type is Support Bundle.
  SupportBundle

  # Specifies that the activity object type is Unknown Object Type.
  UnknownObjectType

  # Specifies that the activity object type is Upgrade.
  Upgrade

  # Specifies that the activity object type is User.
  User

  # Specifies that the activity object type is a VSphere host.
  VMWARE_HOST

  # Specifies that the activity object type is VCD.
  Vcd

  # Specifies that the activity object type is VCD VApp.
  VcdVapp

  # Specifies that the activity object type is vCenter.
  Vcenter

  # Specifies that the activity object type is VMware Compute Cluster.
  VmwareComputeCluster

  # Specifies that the activity object type is VMware Virtual Machine.
  VmwareVm

  # Specifies that the activity object type is Volume Group.
  VolumeGroup

  # Specifies that the activity object type is Webhook.
  WEBHOOK

  # Specifies that the activity object type is Windows Fileset.
  WindowsFileset

  # Specifies that the activity object type is Windows Host.
  WindowsHost
}
type ActivityResult {
  accessType: ActivityAccessType!
  count: Long!
  countDelta: Long!
}
# A series of activities on either the RSC or a Rubrik cluster.
type ActivitySeries {
  # The ID of the activity series.
  id: Long!

  # The time that the activity series started.
  startTime: DateTime

  # The most recent time that the activity series was updated.
  lastUpdated: DateTime!

  # The type of the most recent activity in the activity series.
  lastActivityType: ActivityTypeEnum!

  # The status of the most recent activity in the activity series.
  lastActivityStatus: ActivityStatusEnum!

  # The severity of the most recent activity in the activity series.
  severity: ActivitySeverityEnum!

  # The ID of the object associated with the activity series.
  objectId: String!

  # The forever ID of the object associated with the activity series.
  fid: UUID!

  # The name of the object associated with the activity series.
  objectName: String

  # The type of the object associated with the activity series.
  objectType: ActivityObjectTypeEnum!

  # The UUID of the cluster which the activity series belongs to.
  clusterUuid: UUID!

  # The name of the cluster which the activity series belongs to.
  clusterName: String!

  # The time at which the most recent activity was added to the activity series.
  lastEventAddedAt: DateTime

  # The most recent time that the activity series was verified.
  lastVerifiedAt: DateTime

  # Whether the activity series can be canceled or not.
  isCancelable: Boolean

  # The location of this activity series.
  location: String!

  # Whether the event series is native to RSC or not.
  isPolarisEventSeries: Boolean!

  # The organization ID of this event series.
  orgId: UUID @deprecated(reason: "Deprecated. Refer to organizations.")

  # The organization name of this event series.
  orgName: String @deprecated(reason: "Deprecated. Refer to organizations.")

  # The effective throughput associated with this event, in bytes per second.
  effectiveThroughput: Long

  # The data transferred associated with this event, in bytes.
  dataTransferred: Long

  # Logical size (if applicable), in bytes.
  logicalSize: Long

  # The ID of the activity series.
  activitySeriesId: UUID!

  # The total progress of the event series.
  progress: String

  # The organizations associated with this event series.
  organizations: [Org!]!

  # The reason the activity series failed.
  failureReason: String

  # The cause of the activity series failure.
  causeErrorMessage: String

  # The error code for the cause of the failure of the activity series failed.
  causeErrorCode: String

  # The reason for the activity series failure.
  causeErrorReason: String

  # The remedy for the cause of the activity series failure.
  causeErrorRemedy: String

  # Information about the cluster that the activity series belongs to.
  cluster: Cluster

  # The list of activities.
  activityConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): ActivityConnection!
}
# Paginated list of ActivitySeries objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ActivitySeriesConnection {
  # List of ActivitySeries objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ActivitySeriesEdge!]!

  # List of ActivitySeries objects.
  nodes: [ActivitySeries!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ActivitySeries objects matching the request arguments.
  count: Int!
}
# Wrapper around the ActivitySeries object. This wrapper is used for pagination.
type ActivitySeriesEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ActivitySeries object wrapped by this edge.
  node: ActivitySeries!
}
# Filters for list of event series.
input ActivitySeriesFilter {
  # Filter by last activity status.
  lastActivityStatus: [EventStatus!]

  # Filter by last activity type.
  lastActivityType: [EventType!]

  # Filter by severity of the activity.
  severity: [EventSeverity!]

  # Filter by object name.
  objectName: String

  # Filter by object type.
  objectType: [EventObjectType!]

  # Filter activities having start time after the specified value.
  startTimeGt: DateTime

  # Filter activities having start time before the specified value.
  startTimeLt: DateTime

  # Filter activites having last updated time after the specified value.
  lastUpdatedTimeGt: DateTime

  # Filter activites having last updated time before than the specified value.
  lastUpdatedTimeLt: DateTime

  # Filter by cluster UUID.
  clusterId: [UUID!]

  # Filter by cluster type.
  clusterType: [EventClusterType!]

  # Filter by object fid.
  objectFid: [UUID!]

  # Filter by ancestor ID.
  ancestorId: UUID

  # Filter by search term.
  searchTerm: String

  # Filter by organization ID.
  orgIds: [String!]
}
enum ActivitySeriesGroupByEnum {
  Cluster
  ClusterType
  Day
  Hour
  LastActivityStatus
  LastActivityType
  Month
  ObjectType
  Quarter
  Week
  Year
}
# Input for retrieving an activity series.
input ActivitySeriesInput {
  # The activity series ID.
  activitySeriesId: UUID!

  # The cluster UUID.
  clusterUuid: UUID
}
enum ActivitySeriesSortByEnum {
  ActivityStatus
  ActivityType
  ClusterName
  LastUpdated
  Location
  ObjectName
  ObjectType
  Severity
  StartTime
}
# Sort field.
enum ActivitySeriesSortField {
  # Sort event series by status.
  ACTIVITY_STATUS

  # Sort event series by type.
  ACTIVITY_TYPE

  # Sort event series by name of the cluster.
  CLUSTER_NAME

  # Sort event series by last updated time.
  LAST_UPDATED

  # Sort event series by location.
  LOCATION

  # Sort event series by name of the object.
  OBJECT_NAME

  # Sort event series by type of the object.
  OBJECT_TYPE

  # Sort event series by severity.
  SEVERITY

  # Sort event series by start time.
  START_TIME
}
enum ActivitySeverityEnum {
  Critical
  Info
  Warning
}
# Severity of the anomaly.
type ActivitySeverityLevel {
  # Severity of the anomaly.
  severity: ActivitySeverityEnum!
}
# Represents activity statuses.
enum ActivityStatusEnum {
  # Represents a canceled activity.
  Canceled

  # Represents an activity which is currently canceling.
  Canceling

  # Represents a failure.
  Failure

  # Represents an informational activity.
  Info

  # Represents completion with warnings.
  PARTIAL_SUCCESS

  # Represents a queued activity .
  Queued

  # Represents a running activity.
  Running

  # Represents a successful activity.
  Success

  # Represents task failure.
  TaskFailure

  # Represents task success.
  TaskSuccess

  # Represents a warning.
  Warning
}
type ActivityTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [ActivitySeriesGroupByEnum!]
  selectedColumns: [ActivityTableColumnEnum!]!
  sortBy: ActivitySeriesSortByEnum

  # Sorts by order.
  sortOrder: SortOrder
}
enum ActivityTableColumnEnum {
  ActivityStatus
  ActivityType
  ClusterName
  ClusterType
  ComplianceStatus
  LastUpdated
  Location
  ObjectName
  ObjectType
  SlaDomain
  StartTime
}
type ActivityTimelineResult {
  day: String!
  topFiles: [FileAccessResult!]!
  activityResults: [ActivityResult!]!
}
# Paginated list of ActivityTimelineResult objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ActivityTimelineResultConnection {
  # List of ActivityTimelineResult objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ActivityTimelineResultEdge!]!

  # List of ActivityTimelineResult objects.
  nodes: [ActivityTimelineResult!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ActivityTimelineResult objects matching the request arguments.
  count: Int!
}
# Wrapper around the ActivityTimelineResult object. This wrapper is used for pagination.
type ActivityTimelineResultEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ActivityTimelineResult object wrapped by this edge.
  node: ActivityTimelineResult!
}
# Enum representing different type of activities.
enum ActivityTypeEnum {
  Anomaly
  Archive
  AuthDomain
  AwsEvent

  # Activity representing bulk recovery.
  BULK_RECOVERY
  Backup
  Classification
  CloudNativeSource
  CloudNativeVirtualMachine
  CloudNativeVm
  Configuration
  Connection
  Conversion
  Diagnostic
  Discovery
  Download

  # Activity representing Encryption Management event type.
  ENCRYPTION_MANAGEMENT_OPERATION
  EmbeddedEvent
  Failover
  Fileset
  Hardware
  Hdfs
  HostEvent
  HypervScvmm
  HypervServer

  # Recovering selected objects to an Isolated Recovery Environment (IRE).
  ISOLATED_RECOVERY
  Index
  Instantiate

  # Activity representing log backup event type.
  LOG_BACKUP
  LegalHold
  LocalRecovery
  LockSnapshot
  Maintenance
  NutanixCluster

  # Activity representing change of account ownership.
  OWNERSHIP
  RadarAnalysis
  Recovery
  Replication
  ResourceOperations

  # Activity representing schedule-recovery event type.
  SCHEDULE_RECOVERY
  Storage
  StorageArray
  StormResource
  Support
  Sync
  System

  # Activity representing tenant permission overlap.
  TENANT_OVERLAP

  # Activity representing threat feed event type.
  THREAT_FEED

  # Threat monitoring activity event type.
  THREAT_MONITORING
  TestFailover
  ThreatHunt
  Tpr
  UnknownEventType
  Upgrade
  VCenter
  Vcd
  VolumeGroup
}
# Active Directory Groups from Microsoft.
type AdGroup {
  # Microsoft generated ID of the AD Group.
  id: String!

  # Display name of the AD Group.
  displayName: String!
}
# Active Directory volume export.
type AdVolumeExport {
  # Specifies whether the export is active or not.
  isActive: Boolean!

  # Last updated time of the export.
  internalTimestamp: Long!

  # Floating IP address of the volume export.
  floatingIp: String

  # Mount directory for the volume export.
  mountDir: String!

  # Determines if the export created is visible to user.
  isUserVisible: Boolean!

  # UUID of the corresponding domain controller.
  domainControllerId: String!

  # Name of the corresponding domain controller.
  domainControllerName: String!

  # The whitelisted IP addresses that can access Active Directory live mount.
  smbValidIps: [String!]!

  # Fid of the volume export.
  id: UUID!

  # Source snapshot of the volume export.
  sourceSnapshot: CdmSnapshot!

  # Rubrik cluster of the volume export.
  cluster: Cluster!

  # CDM node specification for the volume export.
  node: ClusterNode
}
# Paginated list of AdVolumeExport objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AdVolumeExportConnection {
  # List of AdVolumeExport objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AdVolumeExportEdge!]!

  # List of AdVolumeExport objects.
  nodes: [AdVolumeExport!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AdVolumeExport objects matching the request arguments.
  count: Int!
}
# Wrapper around the AdVolumeExport object. This wrapper is used for pagination.
type AdVolumeExportEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AdVolumeExport object wrapped by this edge.
  node: AdVolumeExport!
}
# Filter Active Directory volume export results.
input AdVolumeExportFilter {
  # Type of filter.
  field: AdVolumeExportFilterField = FILTER_UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Filters for Active Directory volume export results.
enum AdVolumeExportFilterField {
  # Filter the results by FID of the domain.
  ACTIVE_DIRECTORY_DOMAIN

  # Filter the results by FID of the Domain Controller.
  ACTIVE_DIRECTORY_DOMAIN_CONTROLLER

  # Filter the results by UUID of the Rubrik cluster.
  CLUSTER_UUID

  # Filter is not specified. Any filter text will
  # not be considered.
  FILTER_UNSPECIFIED

  # Filter the results based on whether the export is
  # active.
  IS_ACTIVE

  # Filter the results based on whether the export is visible
  # to user not not.
  IS_USER_VISIBLE

  # Filter the results by the FID of snapshot.
  SNAPSHOT
}
# Sort by fields for Active Directory volume export results.
enum AdVolumeExportSortByField {
  # Sort by field is not specified. Any filter text would
  # not be considered.
  SORT_UNSPECIFIED

  # Sort by Creation Date.
  TIME
}
# Sort AD Volume exports results.
input AdVolumeExportSortByInput {
  # Field used to sort AD Volume exports.
  field: AdVolumeExportSortByField = SORT_UNSPECIFIED

  # Sort order for AD Volume exports.
  sortOrder: SortOrder = ASC
}
# Configuration for the addition of Azure AD Groups.
input AddAdGroupsToHierarchyInput {
  # UUID of the org.
  orgId: UUID!

  # The natural IDs of the Azure AD groups to add.
  naturalIds: [UUID!]!
}
input AddAndJoinSmbDomainInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Configuration for joining Active Directory.
  config: SmbDomainAddRequestInput!
}
# Reply Object for AddAndJoinSmbDomain.
type AddAndJoinSmbDomainReply {
  output: SmbDomainDetail
}
# Input to add authentication server-based AWS cloud account for native protection.
input AddAwsAuthenticationServerBasedCloudAccountInput {
  # AWS C2S/SC2S cloud type to which the AWS account belongs.
  cloudType: AwsCloudType!

  # C2S mission name or SC2S account name.
  awsAccountName: String!

  # List of SC2S/C2S AWS regions for the cloud account. By default, all regions will be added.
  awsRegions: [AwsAuthServerBasedCloudAccountRegion!]

  # List of features to be enabled for cloud native protection.
  features: [CloudAccountFeature!]!

  # Native ID of the cloud account. Native ID is required only while adding a feature to an existing cloud account.
  nativeId: String

  # Name of the agency that provisioned the AWS C2S/SC2S account. Agency name is required only while adding a new AWS cloud account.
  agencyName: String

  # Name of the role created on the authentication server to enable cloud-native protection for the AWS cloud account. Role name is required only while adding a new AWS cloud account.
  roleName: String

  # Hostname of the authentication server. Hostname is required only while adding a new AWS cloud account.
  authServerHostName: String

  # Certificate ID for authentication server user client certificate. Client certificate is required only while adding a new AWS cloud account.
  authServerUserClientCertId: AwsAuthServerCertificateIdInput

  # Certificate ID for authentication server CA certificate. If a CA certificate ID is not provided, authentication server will be trusted on first use.
  authServerCaCertId: AwsAuthServerCertificateIdInput

  # Certificate ID for AWS CA certificate. If a CA certificate ID is not provided, AWS server will be trusted on first use.
  awsCaCertId: AwsAuthServerCertificateIdInput
}
# Response for the request to add authentication server based AWS cloud account.
type AddAwsAuthenticationServerBasedCloudAccountReply {
  # Account details for the new cloud account.
  awsAccount: AwsCloudAccount

  # Success response message or error message.
  message: String
}
# Input to add IAM user-based AWS cloud account for native protection.
input AddAwsIamUserBasedCloudAccountInput {
  # List of features to be enabled for cloud native protection.
  features: [CloudAccountFeature!]!

  # Access key for IAM user with native protection policy on AWS cloud account. Access key is required only while adding new AWS cloud account.
  accessKey: String

  # Secret key for IAM user with native protection policy on AWS cloud account. Secret key is required only while adding new AWS cloud account.
  secretKey: String

  # Native ID of cloud account.
  nativeId: String!

  # Name of cloud account.
  cloudAccountName: String!

  # Cloud type (Standard/China/Gov) for the cloud account.
  cloudType: AwsCloudType = STANDARD

  # List of AWS regions for the cloud account.
  awsRegions: [AwsCloudAccountRegion!]

  # AWS Role ARN with native protection policy on AWS cloud account. Role name must start with 'rubrik-polaris-'. Role ARN is required only while adding new AWS cloud account.
  roleArn: String

  # Key value pair for external artifacts associated with an AWS account.
  externalArtifactMap: [ExternalArtifacts!]
}
# Response for the request to add IAM user-based AWS cloud accounts.
type AddAwsIamUserBasedCloudAccountReply {
  # Account details for the new cloud account.
  awsAccount: AwsCloudAccount
}
# Input for adding Exocompute configurations for an Azure Cloud Account.
input AddAzureCloudAccountExocomputeConfigurationsInput {
  # Rubrik ID of the Azure Cloud Account.
  cloudAccountId: UUID!

  # List of Exocompute configurations to be added.
  azureExocomputeRegionConfigs: [AzureExocomputeAddConfigInputType!]!

  # Specifies whether to start Exocompute health check.
  triggerHealthCheck: Boolean = false
}
# Response of the operation to add Exocompute Configurations to Azure Cloud Account.
type AddAzureCloudAccountExocomputeConfigurationsReply {
  # Configuration details of the Exocompute for the Azure Cloud Account.
  configs: [AzureExocomputeConfigDetails!]!
}
# Input for enabling a feature for an Azure cloud account.
input AddAzureCloudAccountFeatureInput {
  # Resource group to be used for creating all the resources for the feature. It is required only for the Cloud Native Archival feature. It will be ignored for other features.
  resourceGroup: AddAzureCloudAccountResourceGroupInput

  # Feature to be enabled.
  featureType: CloudAccountFeature!

  # Specifies a list of permission groups for onboarding the feature. If the list is empty, all permission groups will be onboarded.
  permissionsGroups: [PermissionsGroup!]
}
# Input for enabling a feature for an Azure cloud account without oauth.
input AddAzureCloudAccountFeatureInputWithoutOauth {
  # Version of the Azure role policy.
  policyVersion: Int!

  # Resource group to be used for creating all the resources for the feature. Resource group is required only for the Cloud Native Archival/Archival-Encryption features. It will be ignored for other features.
  resourceGroup: AddAzureCloudAccountResourceGroupInput

  # Specific feature input to be used for enabling the feature. It is required only for the Cloud Native Archival Encryption feature. It will be ignored for other features.
  specificFeatureInput: AddAzureCloudAccountSpecificFeatureInput

  # Feature to be enabled.
  featureType: CloudAccountFeature!

  # Specifies a list of permission groups with their respective policy versions for onboarding the feature. If the list is empty, all permission groups will be onboarded.
  permissionsGroups: [PermissionsGroupWithVersionInput!]
}
# Input for adding an Azure Cloud Account.
input AddAzureCloudAccountInput {
  # Session ID of the current OAuth session.
  sessionId: String!

  # Domain name of the Azure Tenant.
  tenantDomainName: String!

  # Subscriptions to be added to the Azure Cloud Account.
  subscriptions: [AddAzureCloudAccountSubscriptionInput!]!

  # Regions to be added to the Azure Cloud Account.
  regions: [AzureCloudAccountRegion!]!
}
# Response of the operation to add an Azure Cloud Account.
type AddAzureCloudAccountReply {
  # Status of the operation to add Azure Cloud Account.
  status: [AddAzureCloudAccountStatus!]!

  # Tenant ID for the added subscriptions.
  tenantId: String!
}
# Input for the resource group to be used for the feature being enabled.
input AddAzureCloudAccountResourceGroupInput {
  # The name of the resource group.
  name: String!

  # The tags to be added on the resource group. If not passed, no tags will be added on the resource group.
  tags: TagsInput

  # The region name of the resource group.
  region: AzureCloudAccountRegion!
}
# Input for specific feature details to be used for the feature being enabled.
input AddAzureCloudAccountSpecificFeatureInput {
  # Details of the user-assigned managed identity.
  userAssignedManagedIdentityInput: AddAzureCloudAccountUserAssignedManagedIdentityInput!
}
# Status of the operation to add Azure Cloud Account.
type AddAzureCloudAccountStatus {
  # Native ID of the Azure Subscription.
  azureSubscriptionNativeId: String!

  # Rubrik ID of the Azure Subscription.
  azureSubscriptionRubrikId: String!

  # Error encountered, if any.
  error: String!
}
# Input for adding a subscription.
input AddAzureCloudAccountSubscriptionInput {
  # Features to be enabled for the Azure Cloud Account.
  features: [AddAzureCloudAccountFeatureInput!]!

  # Subscription to be added to the Azure Cloud Account.
  subscription: AzureSubscriptionInput!
}
# Input for adding a subscription without oauth.
input AddAzureCloudAccountSubscriptionInputWithoutOauth {
  # Features to be enabled for the Azure Cloud Account.
  features: [AddAzureCloudAccountFeatureInputWithoutOauth!]!

  # Subscription to be added to the Azure Cloud Account.
  subscription: AzureSubscriptionInput!
}
# Input to specify the details of the user-assigned managed identity to be used for CLOUD_NATIVE_ARCHIVAL_ENCRYPTION feature.
input AddAzureCloudAccountUserAssignedManagedIdentityInput {
  # The name of the managed identity.
  name: String!

  # The name of the resource group of the managed identity.
  resourceGroupName: String!

  # The ID of the service principal object associated with the managed identity.
  principalId: String!

  # The region of the managed identity.
  region: AzureCloudAccountRegion!
}
# Input for adding an Azure Cloud Account without OAuth.
input AddAzureCloudAccountWithoutOauthInput {
  # Domain Name of the Azure tenant.
  tenantDomainName: String!

  # Subscriptions to be added to the Azure Cloud Account.
  subscriptions: [AddAzureCloudAccountSubscriptionInputWithoutOauth!]!

  # Regions to be added to the Azure Cloud Account.
  regions: [AzureCloudAccountRegion!]!

  # Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud.
  azureCloudType: AzureCloudType = AZUREPUBLICCLOUD
}
# Response of the operation to add Azure Cloud Account without OAuth.
type AddAzureCloudAccountWithoutOauthReply {
  # Tenant ID for the added subscriptions.
  tenantId: String!

  # Status of the operation to add Azure Cloud Account.
  status: [AddAzureCloudAccountStatus!]!
}
# Input required to add credentials for performing backups.
input AddCloudNativeSqlServerBackupCredentialsInput {
  # Rubrik IDs of the objects. Some examples of objects are: Azure Subscriptions, Resource Groups.
  objectIds: [UUID!]!

  # The object type to which the credentials apply to.
  workloadType: WorkloadLevelHierarchy!

  # Credentials for the user in the databases with authorization to perform backups.
  backupCredentials: LoginCredentials!
}
# List of objects where adding backup credentials succeeded and failed.
type AddCloudNativeSqlServerBackupCredentialsReply {
  # Object IDs for which adding credentials succeeded.
  successObjectIds: [UUID!]!

  # Object IDs for which adding credentials failed.
  failedObjectIds: [UUID!]!
}
# Input for adding cluster certificate.
input AddClusterCertificateInput {
  # Required. Request to import a certificate.
  certImportRequest: CertificateImportRequestInput!

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Supported in v5.1+
type AddClusterCertificateReply {
  # Required. Supported in v5.1+
  # ID of the certificate.
  certId: String!

  # Supported in v5.1+
  # User-friendly description for the certificate.
  description: String

  # Required. Supported in v5.1+
  # The expiration date for the certificate.
  expiration: DateTime

  # Required. Supported in v5.1+
  # v5.1-v6.0: A Boolean value that specifies whether or not the certificate is associated with a stored private key. When this value is 'true,' the private key for the certificate is stored. When this value is 'false,' the private key for the certificate is not stored.
  # v7.0+: A Boolean value specifying whether the certificate is be added to the trust store. When the value is 'true' the certificate is added to the trust store. when the value is 'false', the certificate is not added to trust store.
  hasKey: Boolean!

  # Required. Supported in v5.1+
  # Display name for the certificate.
  name: String!

  # Required. Supported in v5.1+
  # The certificates, in PEM format.
  pemFile: String!

  # Required. Supported in v5.1+
  # A list of components using the certificate.
  usedBy: String!

  # Supported in v7.0+
  # A Boolean value that specifies whether or not the certificate is added to the trust store. when the value is 'true,' the certificate is added to the trust store. when this value is 'false,' the certificate is not added to trust store.
  isTrusted: Boolean
}
# Input for AddClusterNodes.
input AddClusterNodesInput {
  # Required. ID of the Rubrik cluster.
  clusterUuid: UUID!

  # Required. IP configuration map for added nodes.
  nodesMap: [NodesMapInput!]!

  # Required. The request object for addNodes.
  request: AddNodesConfigInput!
}
# Response from CDM cluster add nodes job.
type AddClusterNodesReply {
  # Add nodes job id.
  jobId: String!

  # Add nodes job status.
  status: String!
}
# Configuration for the addition of Configured Groups in O365.
input AddConfiguredGroupToHierarchyInput {
  # UUID of the org.
  orgId: UUID!

  # The display name for the configured group.
  displayName: String!

  # The wildcard pattern configured for this group. When empty, group members will not be constrained on name or URL identifiers.
  wildcard: String

  # The preferred data locations configured for this group. When empty, group members will not be constrained on data location. These are three-letter region codes as defined in Microsoft Azure.
  pdls: [String!]!
}
# Response for the addition of a configuration group.
type AddConfiguredGroupToHierarchyReply {
  # The ID of the created group.
  groupId: UUID!
}
# Input for adding a DB2 instance.
input AddDb2InstanceInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. The request object containing parameters like username, password, and list of hosts required to add a Db2 instance to the Rubrik cluster.
  db2InstanceRequestConfig: Db2InstanceRequestConfigInput!
}
# Supported in v7.0+
type AddDb2InstanceReply {
  # Required. Supported in v7.0+
  # Status of the refresh job triggered on the new Db2 instance.
  asyncRequestStatus: AsyncRequestStatus

  # Required. Supported in v7.0+
  # ID of the new Db2 instance.
  id: String!
}
# Input to add a global certificate.
input AddGlobalCertificateInput {
  # The display name of the certificate.
  name: String!

  # The description of the certificate.
  description: String

  # The private key of the certificate.
  privateKey: String

  # The certificate, in x509 PEM format.
  certificate: String!

  # The Rubrik clusters on which to add the certificate.
  clusters: [CertificateClusterInput!]

  # The CSR corresponding to the certificate, if applicable.
  csrFid: UUID
}
# The certificate that was imported.
type AddGlobalCertificateReply {
  # The certificate that was imported.
  certificate: GlobalCertificate!

  # The errors from uploading the certificate to the specified Rubrik clusters.
  clusterErrors: [CertificateClusterOperationError!]!
}
# Inventory workloads to add for an account.
input AddInventoryWorkloadsInput {
  # List of Inventory Cards.
  inventoryCards: [InventoryCard!]!
}
# Input for adding a Managed Volume.
input AddManagedVolumeInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Managed Volume configuration.
  managedVolumeConfig: ManagedVolumeConfigInput!
}
# Supported in v7.0+
type AddManagedVolumeReply {
  # Required. Supported in v7.0+
  # Status of the asynchronous job triggered when Managed Volumes are created.
  asyncRequestStatus: AsyncRequestStatus

  # Required. Supported in v7.0+
  # Summary information of the created Managed Volume.
  managedVolumeSummary: UpdateManagedVolumeReply
}
# Input for adding a MongoDB source.
input AddMongoSourceInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. The request object containing parameters like username, password, and a list of hosts required to add the MongoDB source to the Rubrik cluster.
  mongoSourceAddRequestConfig: MongoSourceAddRequestConfigInput!
}
# Supported in v8.1+
# Information corresponding to adding a MongoDB source.
type AddMongoSourceReply {
  # Required. Supported in v8.1+
  # Status of the discovery job triggered on the new Mongo source.
  asyncRequestStatus: AsyncRequestStatus

  # Required. Supported in v8.1+
  # ID of the new MongoDB source.
  id: String!
}
# Input for adding a NoSQL protection source.
input AddMosaicSourceInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Source object with the details of the source to be added.
  sourceData: SourceInput!
}
# Input for adding a NoSQL protection store.
input AddMosaicStoreInput {
  # Required. Add store request object with details of store to be added.
  addStoreData: MosaicAddStoreRequestInput!

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for node configuration.
input AddNodesConfigInput {
  # The password previously used to encrypt the Rubrik cluster string.
  encryptionPassword: String

  # A Boolean value that specifies whether to use IPv4 manual discovery mode during node addition.
  isIpv4ManualDiscoveryMode: Boolean

  # A Boolean that specifies whether to use link-local IPv4 mode during node addition.
  isLinkLocalIpv4Mode: Boolean

  # IPMI password.
  ipmiPassword: String!
}
# Nodes add request for a cloud cluster.
input AddNodesToCloudClusterInput {
  # Number of nodes to add.
  numberOfNodes: Int = 0

  # Specifies whether node resources are preserved if the add node operation fails.
  shouldKeepResourcesOnFailure: Boolean = false

  # AWS AMI ID to deploy to add nodes to an AWS Cloud Cluster without the marketplace.
  awsImageId: String = ""

  # Azure image name to deploy to add nodes to an Azure Cloud Cluster without the marketplace.
  azureImageName: String = ""

  # Customer cloud account UUID.
  cloudAccountId: UUID!

  # Cloud vendor type.
  vendor: CcpVendorType!

  # Cluster UUID.
  clusterUuid: UUID!
}
# Configuration for the addition of an O365 org.
input AddO365OrgInput {
  # ID of the Microsoft 365 tenant.
  tenantId: String!

  # CSRF token for the setup flow.
  stateToken: String!

  # ID of the exocompute cluster.
  exocomputeClusterId: String!

  # Types of the apps created in the flow.
  appTypes: [String!]!
}
# Add O365 Org response.
type AddO365OrgResponse {
  orgId: String!
  refreshOrgTaskchainId: String!
}
# Input for adding a SAP HANA system.
input AddSapHanaSystemInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Add a SAP HANA system to the Rubrik cluster. Contains parameters like username, list of hosts, password required while adding a SAP HANA system.
  sapHanaSystem: SapHanaSystemConfigInput!
}
# Supported in v5.3+
type AddSapHanaSystemReply {
  # Required. Supported in v5.3+
  # The ID of the added SAP HANA system.
  id: String!

  # Required. Supported in v5.3+
  # Status of the job scheduled to refresh the system.
  asyncRequestStatus: AsyncRequestStatus
}
# Storage array to add in a cluster.
input AddStorageArrayInput {
  # Required. UUID of the Rubrik cluster the request goes to.
  clusterUuid: String!

  # Required. JSON object for storage array definition.
  definition: StorageArrayDefinitionInput!
}
# Response of an operation that adds a storage array to a Rubrik cluster.
type AddStorageArrayReply {
  # Hostname of the storage array.
  hostname: String!

  # Details of the Rubrik cluster.
  cluster: Cluster!

  # Optional error message in case of failure.
  errorMessage: String
}
# Storage array configurations.
input AddStorageArraysInput {
  # List of Storage array configurations to add in Rubrik cluster.
  configs: [AddStorageArrayInput!]!
}
# A list of response objects for the operations to add storage arrays to a Rubrik cluster.
type AddStorageArraysReply {
  # Add storage arrays responses.
  responses: [AddStorageArrayReply!]!
}
# Input for adding a syslog export rule.
input AddSyslogExportRuleInput {
  # Syslog export rule.
  syslogExportRuleV51: SyslogExportRuleInput

  # Syslog export rule.
  syslogExportRuleV52: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV53: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV60: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV70: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV80: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV81: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV90: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV91: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV92: SyslogExportRuleFullInput

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Reply Object for AddSyslogExportRule.
type AddSyslogExportRuleReply {
  output: SyslogExportRuleSummary
}
input AddVlanInput {
  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!

  # Required. VLAN Configuration.
  vlanInfo: VlanConfigInput!
}
# Input required to add Azure native virtual machine application consistency specifications.
input AddVmAppConsistentSpecsInput {
  # List of virtual machine Rubrik IDs.
  snappableIds: [UUID!]!

  # Path of pre snapshot script in VM.
  preSnapshotScriptPath: String

  # Timeout (in seconds) for pre snapshot script to run in VM.
  preSnapshotScriptTimeoutInSeconds: Int

  # Path of post snapshot script in VM.
  postSnapshotScriptPath: String

  # Timeout (in seconds) for post snapshot script to run in VM.
  postSnapshotScriptTimeoutInSeconds: Int

  # Specifies whether to cancel backup if pre snapshot script failed to execute on virtual machine.
  cancelBackupIfPreScriptFails: Boolean!

  # Object type for adding Azure native virtual machine application consistency specifications.
  objectType: CloudNativeVmAppConsistentObjectType!
}
# Represents the response for a request to add application-consistency specification to specified virtual machines.
type AddVmAppConsistentSpecsReply {
  # IDs of virtual machines for which addition of application-consistency specification was successful.
  successSnappableIds: [String!]!

  # IDs of virtual machines for which addition of application-consistency specification failed.
  failedSnappableIds: [String!]!
}
# The customer adoption status of the Rubrik CDM release.
enum AdoptionStatus {
  # The adoption of the release is decreasing.
  DECLINING

  # The release has the highest adoption.
  MOST_POPULAR

  # The release has a high adoption.
  POPULAR

  # The adoption of the release is increasing.
  RISING

  # Unknown status.
  UNKNOWN
}
# A key-value map that specifies the configuration parameters for Oracle advanced recovery.
input AdvancedRecoveryConfigMap {
  # Name of the Oracle advanced recovery parameter.
  key: String = ""

  # Value of the Oracle advanced recovery parameter.
  value: String = ""
}
# Supported in v7.0+
type AdvancedVirtualMachineSummary {
  # Supported in v7.0+
  # Virtual disks excluded from snapshot.
  excludedVmdks: [String!]!

  # Supported in v7.0+
  # Script to execute after backup completes.
  postBackupScript: VirtualMachineScriptDetail

  # Supported in v7.0+
  # Script to execute after snapshot completes.
  postSnapScript: VirtualMachineScriptDetail

  # Supported in v7.0+
  # Script to execute before backup.
  preBackupScript: VirtualMachineScriptDetail
}
enum AgentConnectionStatus {
  CONNECTED
  DISCONNECTED
  SECONDARY_CLUSTER
  UNREGISTERED
}
# The status of the virtual machine's agent.
type AgentStatus {
  agentStatus: AgentConnectionStatus!
  disconnectReason: String
}
# Aggregation values calculated across all results prior to pagination.
type AggregatedValues {
  # The highest created file count.
  maxCreatedFileCount: Long!

  # The highest deleted file count.
  maxDeletedFileCount: Long!

  # The highest modified file count.
  maxModifiedFileCount: Long!

  # The highest suspicious file count.
  maxSuspiciousFileCount: Long!

  # The total number of workload anomalies.
  total: Long!
}
# Input for recovering Cloud Direct path.
input AllCloudDirectSharesInput {
  # Cloud Direct system to retrieve shares from.
  systemName: String!

  # Export type of Cloud Direct shares.
  exportType: ShareTypeEnum!
}
# All Features enabled for a Rubrik cloud account.
type AllEnabledFeaturesForAccountReply {
  # List of all features enabled for the Rubrik cloud account.
  features: [CloudAccountFeature!]!
}
# Input for retrieving event digests.
input AllEventDigestsInput {
  # User IDs of recipients whose event digests must be retrieved.
  recipientUserIds: [String!]!
}
# Rubrik Cloud Vault (RCV) account entitlements with their respective order numbers.
type AllRcvAccountEntitlements {
  # Rubrik Cloud Vault (RCV) entitlements with their respective order numbers.
  entitlements: [RcvEntitlementWithOrderNumber!]
}
# Storage arrays added to Rubrik clusters, grouped by cluster.
type AllStorageArraysReply {
  # List of storage arrays in Rubrik clusters.
  clusterStorageArrays: [ClusterStorageArrays!]!
}
# Input for getting all child vm recovery jobs info for a recovery.
input AllVmRecoveryJobsInfoInput {
  # failover id.
  failoverId: UUID!
}
# AMIType to be used for exporting an archived EC2 instance snapshot.
enum AmiType {
  # EC2 instance is a linux instance wihtout marketplace code. AMI will be created at runtime.
  CREATED_AT_RUNTIME

  # An AMI already exists which can be used for export.
  EXISTING

  # User needs to provide an AMI id, which will be used for export.
  USER_SPECIFIED
}
# Input to retrieve  Amazon Machine Image (AMI) type for AWS Archived snapshot export.
input AmiTypeForAwsNativeArchivedSnapshotExportInput {
  # ID of snapshot to export. Snapshot should have an archived copy present.
  snapshotId: UUID!

  # Target region for export.
  destinationRegionId: AwsNativeRegion!

  # Rubrik ID of the target AWS account for export.
  destinationAwsAccountRubrikId: UUID!
}
# Amazon Machine Image (AMI) type for exporting an archived EC2 Instance snapshot.
type AmiTypeForAwsNativeArchivedSnapshotExportReply {
  # Type of the AMI to be used for export of EC2 instance archived snapshot. This can be an existing AMI, or a runtime-generated AMI or a user-specified AMI.
  amiType: AmiType!

  # If amiType is pre-existing, this field will contain the ID of the AMI.
  amiId: String!

  # Rubrik Id of the aws account which contains the pre-existing AMI.
  awsAccountRubrikId: String!

  # Region where the pre-existing AMI exists.
  regionNativeId: AwsNativeRegion!
}
# Represents the analysis status of a workload.
enum AnalysisStatus {
  # Some snapshots are either pending or undergoing initial analysis.
  INITIAL_ANALYSIS

  # Most recent non-analyzed snapshot is more than 24 hours old.
  OUT_OF_DATE

  # This state is invalid. Adding it only for backward compatibility.
  UNSPECIFIED

  # All snapshots have been analyzed, or most recent non-analyzed snapshot is
  # less than 24 hours old.
  UP_TO_DATE
}
type Analyzer {
  analyzerType: AnalyzerTypeEnum!
  id: String!
  name: String!
  dictionaryCsv: String!
  dictionary: [String!]!
  regex: String!

  # Represents the latest analyzer risk.
  analyzerRiskInstance: AnalyzerRiskInstance

  # Represents risk associated with the given analyzer.
  risk: RiskLevelType!
}
type AnalyzerAccessUsage {
  analyzer: Analyzer
  count: Int!
  countDelta: Int!
  topFiles: [FileAccessResult!]!
}
# Paginated list of AnalyzerAccessUsage objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AnalyzerAccessUsageConnection {
  # List of AnalyzerAccessUsage objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AnalyzerAccessUsageEdge!]!

  # List of AnalyzerAccessUsage objects.
  nodes: [AnalyzerAccessUsage!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AnalyzerAccessUsage objects matching the request arguments.
  count: Int!
}
# Wrapper around the AnalyzerAccessUsage object. This wrapper is used for pagination.
type AnalyzerAccessUsageEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AnalyzerAccessUsage object wrapped by this edge.
  node: AnalyzerAccessUsage!
}
# Paginated list of Analyzer objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AnalyzerConnection {
  # List of Analyzer objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AnalyzerEdge!]!

  # List of Analyzer objects.
  nodes: [Analyzer!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Analyzer objects matching the request arguments.
  count: Int!
}
# Wrapper around the Analyzer object. This wrapper is used for pagination.
type AnalyzerEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Analyzer object wrapped by this edge.
  node: Analyzer!
}
enum AnalyzerErrorCode {
  ANALYZER
  NOERROR
  OTHER
  PARSING
  READING
}
type AnalyzerGroup {
  groupType: AnalyzerGroupTypeEnum!
  id: String!
  name: String!
  analyzers: [Analyzer!]!
}
# Paginated list of AnalyzerGroup objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AnalyzerGroupConnection {
  # List of AnalyzerGroup objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AnalyzerGroupEdge!]!

  # List of AnalyzerGroup objects.
  nodes: [AnalyzerGroup!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AnalyzerGroup objects matching the request arguments.
  count: Int!
}
# Wrapper around the AnalyzerGroup object. This wrapper is used for pagination.
type AnalyzerGroupEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AnalyzerGroup object wrapped by this edge.
  node: AnalyzerGroup!
}
input AnalyzerGroupInput {
  groupType: AnalyzerGroupTypeEnum = UNDEFINED
  id: String = ""
  name: String = ""
  analyzers: [CreateCustomAnalyzerInput!] = []
}
type AnalyzerGroupResult {
  analyzerGroup: AnalyzerGroup!
  hits: Hits!
  analyzerResults: [AnalyzerResult!]!
}
enum AnalyzerGroupTypeEnum {
  CCPA
  CUSTOM
  GLBA
  HIPAA
  PCI_DSS
  UK_PII
  UNDEFINED
  US_FINANCE
  US_PII
}
# Analyzer hits for different risk categories.
type AnalyzerHits {
  # High-risk analyzer hits.
  highRiskHits: SummaryHits

  # Medium-risk analyzer hits.
  mediumRiskHits: SummaryHits

  # Low-risk analyzer hits.
  lowRiskHits: SummaryHits
}
type AnalyzerMapping {
  analyzerResult: AnalyzerResult!
  groups: [AnalyzerGroup!]!
}
type AnalyzerResult {
  analyzer: Analyzer!
  hits: Hits!
}
# Represents the analyzer risk instance.
type AnalyzerRiskInstance {
  # Represents the analyzer ID.
  analyzerId: String!

  # Represents the risk version.
  riskVersion: Int!

  # Represents the risk associated with the analyzer ID and risk version.
  risk: RiskLevelType!
}
# Represents the analyzer risk instance.
input AnalyzerRiskInstanceInput {
  # Represents the analyzer ID.
  analyzerId: String = ""

  # Represents the risk version.
  riskVersion: Int = 0

  # Represents the risk associated with the analyzer ID and risk version.
  risk: RiskLevelType = UNKNOWN_RISK
}
# AnalyzerType is the shared enum for the backend and frontend to
# identify analyzers.
enum AnalyzerTypeEnum {
  # American Bankers Association (ABA) routing number analyzer.
  ABA_ROUTING_NUMBER

  # Australian Business Number (ABN) analyzer.
  AUSTRALIA_ABN

  # Australian Company Number (ACN) analyzer.
  AUSTRALIA_ACN

  # Australia Bank Account Number analyzer.
  AUSTRALIA_BANK_ACCOUNT_NUMBER

  # Australia BSB code analyzer.
  AUSTRALIA_BSB

  # Australia driver's license number analyzer.
  AUSTRALIA_DL

  # Australia medical account number analyzer.
  AUSTRALIA_MEDICAL_ACCOUNT

  # Australia passport number analyzer.
  AUSTRALIA_PASSPORT

  # Australia tax file number analyzer.
  AUSTRALIA_TFN

  # AWS connection string or endpoint analyzer.
  AWS_CONNECTION_STRING

  # Azure connection string or endpoint analyzer.
  AZURE_CONNECTION_STRING

  # Belgium national number (BNN) analyzer.
  BELGIUM_BNN

  # Belgium driver's license number analyzer.
  BELGIUM_DL

  # Belgium passport number analyzer.
  BELGIUM_PASSPORT

  # Canada bank account number analyzer.
  CANADA_BANK_ACCT

  # Canada health service number analyzer.
  CANADA_HEALTH_SERVICE

  # Canada passport number analyzer.
  CANADA_PASSPORT

  # Canada personal health identification number (PHIN) analyzer.
  CANADA_PHIN

  # Canada social insurance number analyzer.
  CANADA_SOCIAL_INSURANCE_NUMBER

  # Credit card number analyzer.
  CREDIT_CARD

  # American bankers CUSIP analyzer.
  CUSIP_NUMBER

  # U.S. DEA number analyzer.
  DEA_NUMBER

  # Digital Certificate analyzer.
  DIGITAL_CERTIFICATE

  # U.S. employer identification number analyzer.
  EIN

  # Email address analyzer.
  EMAIL_ADDRESS

  # France Social Security number (SSN).
  FRANCE_SSN

  # Google Cloud Platform OAuth Refresh Token analyzer.
  GCP_OAUTH_REFRESH_TOKEN

  # Germany driver's license number analyzer.
  GERMANY_DL

  # Germany identity card number analyzer.
  GERMANY_ID

  # Germany passport number analyzer.
  GERMANY_PASSPORT

  # GitHub OAuth Refresh Token analyzer.
  GITHUB_OAUTH_REFRESH_TOKEN

  # Google API Key analyzer.
  GOOGLE_API_KEY

  # International Bank Account Number (IBAN) analyzer.
  IBAN

  # IP address analyzer.
  IPV4_ADDRESS

  # Ireland drivers license number analyzer.
  IRELAND_DL

  # Ireland passport number analyzer.
  IRELAND_PASSPORT_NUMBER

  # Ireland personal public service (PPS) number analyzer.
  IRELAND_PPS

  # Dictionary analyzer.
  KEYWORD

  # MAC address analyzer.
  MAC_ADDRESS

  # Netherlands citizen service number (BSN) analyzer.
  NETHERLANDS_BSN

  # Netherlands driver's license number analyzer.
  NETHERLANDS_DL

  # Netherlands passport number analyzer.
  NETHERLANDS_PASSPORT

  # Netherlands tax identification number (TIN) analyzer.
  NETHERLANDS_TIN

  # Netherlands value added tax (VAT) number analyzer.
  NETHERLANDS_VAT

  # US and UK passport number analyzer.
  PASSPORT

  # Phone number analyzer.
  PHONE_NUMBER

  # Private Key analyzer.
  PRIVATE_KEY

  # Regular expression analyzer.
  REGEX

  # SIM hash analyzer.
  SIMHASH

  # Sweden driver's license number analyzer.
  SWEDEN_DL

  # Sweden national ID analyzer.
  SWEDEN_NIN

  # Sweden passport number analyzer.
  SWEDEN_PASSPORT

  # Sweden tax identification number analyzer.
  SWEDEN_TIN

  # SWIFT code analyzer.
  SWIFT_CODE

  # UK driver's license number analyzer.
  UK_DL

  # UK electoral roll number analyzer.
  UK_ELECTORAL

  # UK national health service number analyzer.
  UK_NHS

  # UK national insurance number analyzer.
  UK_NINO

  # UK unique taxpayer reference number analyzer.
  UK_UTR

  # Undefined analyzer.
  UNDEFINED

  # U.S. bank account number analyzer.
  US_BANK_ACCT

  # California driver's license number analyzer.
  US_CA_DL

  # U.S. driver's license number analyzer.
  US_DL

  # U.S. healthcare NPI analyzer.
  US_HEALTHCARE_NPI

  # U.S. individual taxpayer identification number (ITIN) analyzer.
  US_ITIN

  # U.S. Medicare Beneficiary Identifier (MBI) analyzer.
  US_MBI

  # U.S. Social Security number (SSN) analyzer.
  US_SSN

  # Vehicle identification number analyzer.
  US_VIN

  # Word frequency analyzer.
  WORD_FREQUENCY
}
type AnalyzerUsage {
  analyzer: Analyzer!
  policies: [ClassificationPolicySummary!]!
}
# Paginated list of AnalyzerUsage objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AnalyzerUsageConnection {
  # List of AnalyzerUsage objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AnalyzerUsageEdge!]!

  # List of AnalyzerUsage objects.
  nodes: [AnalyzerUsage!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AnalyzerUsage objects matching the request arguments.
  count: Int!
}
# Wrapper around the AnalyzerUsage object. This wrapper is used for pagination.
type AnalyzerUsageEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AnalyzerUsage object wrapped by this edge.
  node: AnalyzerUsage!
}
type AnomalyChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [AnomalyResultGroupBy!]
}
# Information about the anomaly detected.
type AnomalyInfo {
  # Information related to the list of strains identified.
  # At this point, we identify at most one strain.
  strainAnalysisInfo: [StrainInfo!]!
}
# Anomaly analysis report from lambda service.
type AnomalyResult {
  # The database ID of the anomaly result.
  id: String!

  # The internal fid of the object.
  workloadFid: UUID!

  # The internal ID of the object.
  workloadId: String!

  # The name of the object.
  workloadName: String

  # The type of the object.
  objectType: ObjectTypeEnum

  # The internal fid of the snapshot.
  snapshotFid: UUID!

  # The internal ID of the snapshot.
  snapshotId: String!

  # The date of the snapshot.
  snapshotDate: DateTime!

  # Time when the anomaly was detected.
  detectionTime: DateTime!

  # The ID of the previous snapshot.
  previousSnapshotId: String!

  # The date of the previous snapshot.
  previousSnapshotDate: DateTime!

  # The probability of the snapshot being anomalous.
  anomalyProbability: Float!

  # Indicates whether the snapshot is anomalous.
  isAnomaly: Boolean!

  # Count of new files created.
  filesCreatedCount: Long

  # Count of files modified.
  filesModifiedCount: Long

  # Count of files deleted.
  filesDeletedCount: Long

  # Total number of suspicious files.
  suspiciousFilesCount: Long

  # Total new bytes created.
  bytesCreatedCount: Long

  # Total bytes modified.
  bytesModifiedCount: Long

  # Total bytes deleted.
  bytesDeletedCount: Long

  # Net change in the number of bytes. For example, if 5 bytes are added and 3 bytes deleted, this field returns 2 as the number of bytes that changed.
  bytesNetChangedCount: Long

  # Internal managed ID of the object.
  managedId: String!

  # Specifies whether the snapshot is encrypted.
  isEncrypted: Boolean

  # Severity of the anomaly.
  severity: ActivitySeverityEnum!

  # The Rubrik cluster of the object.
  cluster: Cluster!

  # The location of the object.
  location: String!

  # The analyzed snapshot.
  snapshot: CdmSnapshot

  # The ransomware analysis result, including encryption.
  ransomwareResult: RansomwareResult
}
# Aggregated anomaly results.
type AnomalyResultAggregation {
  # Aggregated total of files added.
  filesAdded: Long!

  # Aggregated total of files modified.
  filesModified: Long!

  # Aggregated total of files deleted.
  filesDeleted: Long!

  # Aggregated total of bytes added.
  bytesAdded: Long!

  # Aggregated total of bytes modified.
  bytesModified: Long!

  # Aggregated total of bytes deleted.
  bytesDeleted: Long!
}
# Paginated list of AnomalyResult objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AnomalyResultConnection {
  # List of AnomalyResult objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AnomalyResultEdge!]!

  # List of AnomalyResult objects.
  nodes: [AnomalyResult!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AnomalyResult objects matching the request arguments.
  count: Int!

  # Aggregated anomaly results.
  aggregation: AnomalyResultAggregation!
}
# Wrapper around the AnomalyResult object. This wrapper is used for pagination.
type AnomalyResultEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AnomalyResult object wrapped by this edge.
  node: AnomalyResult!
}
# Filter anomaly result data.
input AnomalyResultFilterInput {
  # Filter by Rubrik cluster ID.
  clusterUuid: [UUID!]

  # Filter by internal managed ID.
  managedId: [String!]

  # Start of filtering time range.
  startTime: DateTime

  # End of filtering time range.
  endTime: DateTime

  # Filter based on anomalous status of the snapshot.
  isAnomaly: Boolean

  # Filter by internal object fid.
  workloadFid: [UUID!]
}
# Group anomaly results by field.
enum AnomalyResultGroupBy {
  # The unique ID of the cluster.
  CLUSTER_UUID

  # Group by day.
  DAY

  # Group by hour.
  HOUR

  # Specifies whether the result is an anomaly.
  IS_ANOMALY

  # The managed ID of the object.
  MANAGED_ID

  # Group by month.
  MONTH

  # Group by severity of the anomaly.
  SEVERITY

  # Group by week.
  WEEK

  # Group by year.
  YEAR
}
# Group by information for anomaly detection results.
union AnomalyResultGroupByInfo = Cluster | Snappable | TimeRangeWithUnit | AnomalyStatus | ActivitySeverityLevel
# Anomaly result data with group by information applied to it.
type AnomalyResultGroupedData {
  # Group by information.
  groupByInfo: AnomalyResultGroupByInfo!

  # Paginated anomaly result data.
  anomalyResults(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort anomaly results by field.
    sortBy: AnomalyResultSortBy,

    # Filter anomaly results by input.
    filter: AnomalyResultFilterInput): AnomalyResultConnection!

  # Provides further groupings for the data.
  anomalyResultGroupedData(
    # Group anomaly results by field.
    groupBy: AnomalyResultGroupBy!): [AnomalyResultGroupedData!]!
}
# Paginated list of AnomalyResultGroupedData objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AnomalyResultGroupedDataConnection {
  # List of AnomalyResultGroupedData objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AnomalyResultGroupedDataEdge!]!

  # List of AnomalyResultGroupedData objects.
  nodes: [AnomalyResultGroupedData!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AnomalyResultGroupedData objects matching the request arguments.
  count: Int!
}
# Wrapper around the AnomalyResultGroupedData object. This wrapper is used for pagination.
type AnomalyResultGroupedDataEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AnomalyResultGroupedData object wrapped by this edge.
  node: AnomalyResultGroupedData!
}
# Sort anomaly results by field.
enum AnomalyResultSortBy {
  # Probability of anomaly.
  ANOMALY_PROBABILITY

  # Count of created bytes.
  BYTES_CREATED_COUNT

  # Count of deleted bytes.
  BYTES_DELETED_COUNT

  # Count of modified bytes.
  BYTES_MODIFIED_COUNT

  # Count of changed bytes.
  BYTES_NET_CHANGED_COUNT

  # Unique ID of the cluster.
  CLUSTER_UUID

  # Count of created files.
  FILES_CREATED_COUNT

  # Count of deleted files.
  FILES_DELETED_COUNT

  # Count of modified files.
  FILES_MODIFIED_COUNT

  # Specifies whether the result is an anomaly.
  IS_ANOMALY

  # Specifies whether the result is encrypted.
  IS_ENCRYPTED

  # Managed ID of the object.
  MANAGED_ID

  # Type of the object.
  OBJECT_TYPE

  # Date of the previous snapshot.
  PREVIOUS_SNAPSHOT_DATE

  # Id of the previous snapshot.
  PREVIOUS_SNAPSHOT_ID

  # Severity of the anomaly.
  SEVERITY

  # Date of the snapshot.
  SNAPSHOT_DATE

  # Id of the snapshot.
  SNAPSHOT_ID

  # Count of suspicious files.
  SUSPICIOUS_FILES_COUNT

  # Name of the object.
  WORKLOAD_NAME

  # Type of the object.
  WORKLOAD_TYPE
}
# Anomaly status of the snapshot.
type AnomalyStatus {
  # Boolean indicating the anomaly status.
  isAnomaly: Boolean!
}
type AnomalyTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [AnomalyResultGroupBy!]
  selectedColumns: [AnomalyTableColumnEnum!]!
  sortBy: AnomalyResultSortBy

  # Sorts by order.
  sortOrder: SortOrder
}
enum AnomalyTableColumnEnum {
  BytesCreated
  BytesDeleted
  BytesModified
  BytesNetChanged
  FilesCreated
  FilesDeleted
  FilesModified
  IsAnomaly
  PreviousSnapshotDate
  PreviousSnapshotId
  SnapshotDate
  SnapshotId
  SuspiciousFilesAdded
  WorkloadName
  WorkloadType
}
# The type of the anomaly that was detected.
enum AnomalyType {
  # Anomalies detected on the filesystem.
  FILESYSTEM

  # Anomalies detected on the hypervisor.
  HYPERVISOR
}
# Authentication status of apps.
enum AppAuthStatus {
  # Apps with the complete set of required permissions.
  FULLY_AUTHENTICATED

  # Apps with a subset of required permissions.
  PARTIALLY_AUTHENTICATED

  # Apps with zero granted permissions.
  UNAUTHENTICATED
}
# O365 app filter.
input AppFilter {
  field: AppFilterField = APP_TYPE
  texts: [String!] = []
}
# Parameter to filter Azure apps on.
enum AppFilterField {
  # Filter on app ID.
  APP_ID

  # Filter on app type.
  APP_TYPE

  # Filter on subscription name.
  SUBSCRIPTION

  # Filter on tenant ID.
  TENANT_ID
}
type AppIdForType {
  appId: String!
  appType: String!
}
# Manifest information for Kubernetes Rubrik Backup Service.
type AppManifestInfo {
  # Kubernetes manifest information.
  manifest: String!

  # SHA checksum of the manifest.
  shaChecksum: String!

  # SHA algorithm used for computing the checksum.
  shaAlgorithm: String!

  # Content type of the Kubernetes manifest information.
  manifestContentType: K8sContentType!
}
# Parameters to sort O365 apps.
input AppSortByParam {
  field: AppSortByParamField = APP_ID
  sortOrder: SortOrder = ASC
}
# Parameter to sort Azure apps by.
enum AppSortByParamField {
  # Sort by added at time.
  ADDED_AT

  # Sort by app ID.
  APP_ID

  # Sort by app owner type.
  APP_OWNER

  # Sort by app type.
  APP_TYPE

  # Sort by authentication status.
  IS_AUTHENTICATED

  # Sort by subscription name.
  SUBSCRIPTION
}
# Connection status for archival group.
type ArchivalGroupConnectionStatus {
  status: ConnectionStatusType!
}
# Archival group sort fields.
enum ArchivalGroupQuerySortByField {
  # Name of aws group.
  NAME
}
# Tiering status options for archival groups.
enum ArchivalGroupTieringStatus {
  # Instant tiering not supported.
  INSTANT_TIERING_NOT_SUPPORTED

  # Smart tiering not supported.
  SMART_TIERING_NOT_SUPPORTED

  # Unknown tiering status.
  UNKNOWN_ARCHIVAL_GROUP_TIERING_STATUS
}
# Type of archival location.
enum ArchivalGroupType {
  # Archival location is created automatically and managed by Rubrik Security Cloud.
  AUTOMATIC_ARCHIVAL_GROUP

  # Archival location created for cloud native workflows.
  CLOUD_NATIVE_ARCHIVAL_GROUP

  # This is a union field for both automatic and manual archival locations.
  # It is used to filter all datacenter archival groups irrespective of
  # whether they are automatic or manual.
  DATACENTER_ARCHIVAL_GROUP

  # Archival location is created in Rubrik Security Cloud.
  MANUAL_ARCHIVAL_GROUP

  # Type of archival location is unknown.
  UNKNOWN_ARCHIVAL_GROUP
}
# Archival locations sort fields.
enum ArchivalLocationQuerySortByField {
  # Name of the mapping the storage archival is part of.
  ARCHIVAL_GROUP_NAME

  # Name of the cluster.
  CLUSTER_NAME

  # Number of failed tasks.
  FAILED_TASKS

  # Immutability days configured.
  IMMUTABILITY_DAYS

  # Location type or provider.
  LOCATION_TYPE

  # Name of the archival location.
  NAME

  # Number of running tasks.
  RUNNING_TASKS

  # Availability status.
  STATUS

  # Storage bytes used.
  STORAGE_CONSUMED_BYTES
}
# Availability status of the archival location.
enum ArchivalLocationStatus {
  # Location is deleted.
  DELETED

  # Location is not enabled.
  DISABLED

  # Location is paused.
  PAUSED

  # Location is read-only.
  READ_ONLY

  # Location is read-write.
  READ_WRITE

  # Location status is unknown.
  UNKNOWN_ARCHIVAL_LOCATION_STATUS
}
# Mapping between archival location and Rubrik cluster.
type ArchivalLocationToClusterMapping {
  # Cluster on which the archival location is created.
  cluster: SlaArchivalCluster

  # Location used as archival target.
  location: DlsArchivalLocation
}
# Mapping between archival location and Rubrik cluster.
input ArchivalLocationToClusterMappingInput {
  # Rubrik cluster UUID.
  clusterUuid: String = ""

  # Archival location ID.
  locationId: String = ""
}
# Response containing a list of archival location IDs with the information about upgrade of the locations.
type ArchivalLocationUpgradeInfo {
  # ID of the archival location.
  locationId: String!

  # Upgrade status of the archival location.
  upgradeStatus: UpgradeStatus!

  # Reasons for the lack of support for archival location upgrades when the location can't be upgraded.
  upgradeUnsupportedReason: ArchivalLocationUpgradeUnsupportedReason!
}
# Reasons for which archival location upgrades are not supported.
enum ArchivalLocationUpgradeUnsupportedReason {
  # The cluster has a government cloud location registered.
  CLUSTER_CONTAINS_GOV_CLOUD_LOCATION

  # The cluster version is unsupported.
  CLUSTER_VERSION_NOT_SUPPORTED

  # The upgrade status of the location is other than UPGRADE_UNSUPPORTED.
  NOT_APPLICABLE

  # The location is managed by RSC.
  RSC_MANAGED_LOCATION

  # There is some unexpected error.
  UNKNOWN_REASON
}
# Archiving specification.
type ArchivalSpec {
  # Archival threshold.
  threshold: Int!

  # Unit of archival threshold.
  thresholdUnit: RetentionUnit!

  # Archival tiering specification.
  archivalTieringSpec: ArchivalTieringSpec

  # Archives all snapshots taken with the specified frequency.
  frequencies: [RetentionUnit!]!

  # Mapping between archival location and Rubrik cluster.
  archivalLocationToClusterMapping: [ArchivalLocationToClusterMapping!]!

  # Storage settings of an archival group.
  storageSetting: TargetMapping
}
# Archiving specification.
input ArchivalSpecInput {
  # ID of the archival group.
  archivalGroupId: String = ""

  # Archival threshold.
  threshold: Int = 0

  # Unit of archival threshold.
  thresholdUnit: RetentionUnit = MINUTES

  # Archival tiering specification.
  archivalTieringSpecInput: ArchivalTieringSpecInput

  # Archives all snapshots taken with the specified frequency.
  frequencies: [RetentionUnit!] = []

  # Mapping between archival location and Rubrik cluster.
  archivalLocationToClusterMapping: [ArchivalLocationToClusterMappingInput!] = []
}
# Time log for the storage usage of an archival location.
type ArchivalStorageUsage {
  # Time that the log was stored.
  logTimestamp: DateTime!

  # Amount of storage used in bytes.
  storageUsage: Long!
}
# Archival tiering specification.
type ArchivalTieringSpec {
  # True when instant tiering enabled.
  isInstantTieringEnabled: Boolean!

  # Minimum accessible duration specified for smart tiering.
  minAccessibleDurationInSeconds: Long!

  # Cold storage class for tiering.
  coldStorageClass: ColdStorageClass!

  # Tier existing snapshots for instant tiering, when true.
  shouldTierExistingSnapshots: Boolean!
}
# Archival tiering specification input.
input ArchivalTieringSpecInput {
  # Set when instant tiering enabled.
  isInstantTieringEnabled: Boolean = false

  # Min accessible duration specified for smart tiering.
  minAccessibleDurationInSeconds: Long = 0

  # Cold storage class for tiering.
  coldStorageClass: ColdStorageClass = COLD_STORAGE_CLASS_UNKNOWN

  # Set to tier existing snapshots for instant tiering.
  shouldTierExistingSnapshots: Boolean = false
}
# Configuration of the Kubernetes cluster to archive.
input ArchiveK8sClusterInput {
  # UUID of the Kubernetes cluster.
  clusterId: UUID!
}
# Response of the archived Kubernetes cluster.
type ArchiveK8sClusterReply {
  # UUID of the archived Kubernetes cluster.
  clusterId: UUID!
}
# Specifies the level at which an ARM template should be deployed.
enum ArmTemplateDeploymentLevel {
  # Unspecified deployment level.
  DEPLOYMENT_LEVEL_UNSPECIFIED

  # Resource group level.
  RESOURCE_GROUP

  # Subscription level.
  SUBSCRIPTION
}
# Represents the trust policy for a role.
type ArtifactPolicy {
  # The role for the trust policy.
  externalArtifactKey: AwsCloudExternalArtifact!

  # Trust policy JSON document to be attached to the role.
  trustPolicyDoc: String!

  # Message denoting the status of trust policy retrieval for the role (Empty if no error).
  errorMessage: String!
}
# Artifacts to be deleted for a feature.
type ArtifactsToDelete {
  # Feature Enum.
  feature: CloudAccountFeature!

  # Native ID of the AWS account.
  artifactsToDelete: [ExternalArtifactMapReply!]!
}
# Input for assigning SLA Domain to SQL Server objects.
input AssignMssqlSlaDomainPropertiesAsyncInput {
  # Required. Update information.
  updateInfo: MssqlSlaDomainAssignInfoInput!

  # Required. User note to associate with audits.
  userNote: String
}
# Reply for assigning SLA Domain to SQL Server objects.
type AssignMssqlSlaDomainPropertiesAsyncReply {
  # Pending SLA Domains resulting from this assignment.
  items: [ManagedObjectPendingSlaInfo!]!
}
# Input for assigning SLA Domain to SQL Server objects.
input AssignMssqlSlaDomainPropertiesInput {
  # Required. Update information.
  updateInfo: MssqlSlaDomainAssignInfoInput!
}
# Represents the assign protection input.
input AssignProtectionInput {
  # Global SLA Domain forever UUID.
  globalSlaOptionalFid: UUID

  # Corresponds to the assignment type for the global SLA.
  globalSlaAssignType: SlaAssignTypeEnum!

  # A list of object forever UUIDs to assign to the global SLA Domain.
  objectIds: [UUID!]!

  # Specifies backup input parameters of the protection.
  backupInput: MosaicSlaInfoInput!
}
# Input to assign Rubrik SLA Domains.
input AssignSlaInput {
  # Corresponds to the assignment type for the SLA Domain.
  slaDomainAssignType: SlaAssignTypeEnum!

  # Corresponds to optional SLA Domain ID.
  slaOptionalId: UUID

  # Provide list of object IDs you want to assign SLA Domain.
  objectIds: [UUID!]!

  # Provide optional workload type under the object for SLA Domain assignment. This is meant to be used only for objects that support multiple workload hierarchies. This allows an SLA Domain to be set for one or more specific workload types under the object, instead of applying the SLA Domain for all the workload types. For example, an AWS account object can potentially have 2 different workload types under it - AwsNativeEc2Instance and AwsNativeRdsInstance. This field can be set with the appropriate type so that the SLA Domain only gets applied to workloads of the selected type under that account. If the SLA Domain must be applicable for all the workload types under the object, then this field can be set to `AllSubHierarchyType` or left blank. This field must either be left blank or set to `AllSubHierarchyType` when assigning SLA Domain to a workload or to an object that does not support multiple workload types.
  applicableWorkloadType: WorkloadLevelHierarchy

  # Boolean value to indicate whether to apply changes made to the SLA Domain to existing snapshots.
  shouldApplyToExistingSnapshots: Boolean

  # Boolean value to indicate if the new configuration keeps existing, non-policy snapshots of data sources retained by this SLA Domain.
  shouldApplyToNonPolicySnapshots: Boolean

  # Choose what to do with existing snapshot in case of do not protect SLA Domains.
  existingSnapshotRetention: GlobalExistingSnapshotRetention

  # Optional User note.
  userNote: String
}
# Input for assigning SLA to MongoDB collections.
input AssignSlaToMongoDbCollectionInput {
  # Required. The assign SLA Domain request object containing IDs of the collection objects and the SLA Domain ID.
  input: MongoCollectionAssignSlaConfigInput!
}
# List of resource details.
type AssignmentResourceDetails {
  # ID of the resource.
  resourceId: String!

  # Name of the resource.
  resourceName: String!

  # Type of the resource.
  resourceType: DataGovObjectType!

  # Boolean flag to signify whether the resource is a higher level resource.
  isHigherLevelResource: Boolean!
}
# Paginated list of AssignmentResourceDetails objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AssignmentResourceDetailsConnection {
  # List of AssignmentResourceDetails objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AssignmentResourceDetailsEdge!]!

  # List of AssignmentResourceDetails objects.
  nodes: [AssignmentResourceDetails!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AssignmentResourceDetails objects matching the request arguments.
  count: Int!
}
# Wrapper around the AssignmentResourceDetails object. This wrapper is used for pagination.
type AssignmentResourceDetailsEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AssignmentResourceDetails object wrapped by this edge.
  node: AssignmentResourceDetails!
}
# A reply of the async download request.
type AsyncDownloadReply {
  # The job ID.
  jobId: Long!

  # The job reference ID.
  referenceId: String!

  # The ID of the download entity.
  downloadId: Long!
}
type AsyncJobStatus {
  # Job ID for object if pre validation succeeds for object. If pre validation failed Job ID will be empty and detials will be present in error field.
  jobId: String!

  # Error message if pre validation failed.
  error: String!
}
type AsyncJobStatusJobError {
  rubrikObjectId: String!
  error: String!
}
type AsyncJobStatusJobId {
  rubrikObjectId: String!
  jobId: String!
}
# Supported in v5.0+
type AsyncRequestStatus {
  # Supported in v5.0+
  # The end time of the request.
  endTime: DateTime

  # Required. Supported in v5.0+
  # v5.0: The ID of the request object. Use it to poll the status.
  # v5.1+: The ID of the request object used to poll the status.
  id: String!

  # Required. Supported in v5.0+
  # References to any related objects.
  links: [Link!]!

  # Supported in v5.0+
  # The ID of the node where the job ran.
  nodeId: String

  # Supported in v5.0+
  # v5.0: The current progress in terms of percentage of the async request.
  # v5.1+: The current percentage progress of the asynchronous request.
  progress: Float

  # Supported in v5.0+
  # The start time of the request.
  startTime: DateTime

  # Required. Supported in v5.0+
  # v5.0: Status of the id.
  # v5.1+: Status of the ID.
  status: String!

  # Supported in v5.0+
  # Any errors encountered.
  error: RequestErrorInfo
}
# Host AWS EC2 instance specifications for AWS EBS volume.
type AttachmentSpecForEbsVolume {
  # EC2 instance ID.
  awsNativeEc2InstanceId: String!

  # The device path of the EBS volume on the instance.
  devicePath: String!

  # Specifies whether the EBS volume is excluded from snapshots of the EC2 instance..
  isExcludedFromSnapshot: Boolean!

  # Specifies whether the EBS volume is the root volume.
  isRootVolume: Boolean!
}
# EBS volume attachment specifications.
type AttachmentSpecForEc2Instance {
  # EBS volume ID.
  awsNativeEbsVolumeId: String!

  # The device path of this EBS volume attachment.
  devicePath: String!

  # Specifies whether this EBS volume is excluded from snapshots.
  isExcludedFromSnapshot: Boolean!

  # Specifies whether this EBS volume is the root volume of the corresponding EC2 instance.
  isRootVolume: Boolean!
}
# Attachment Specifications for Azure Native Managed Disk.
type AttachmentSpecsForManagedDisk {
  # Virtual machine ID to which the Azure managed disk is attached.
  attachedToVmId: String!

  # Specifies if the managed disk is an OS disk.
  isOsDisk: Boolean!

  # Logical Unit Number (LUN) associated with a managed disk in a virtual machine.
  lun: Int!

  # Specifies whether the managed disk is excluded from snapshots.
  isExcludedFromSnapshot: Boolean!
}
# Attachment Specifications for Azure Native Virtual Machine.
type AttachmentSpecsForVirtualMachine {
  # ID of the Azure managed disk attached ot the virtual machine.
  managedDiskId: String!

  # Specifies if the managed disk is an OS disk.
  isOsDisk: Boolean!

  # Logical Unit Number (LUN) associated with a managed disk in a virtual machine.
  lun: Int!

  # Specifies whether the managed disk is excluded from snapshots.
  isExcludedFromSnapshot: Boolean!
}
# Represents all the object types for which we expect to see audits.
enum AuditObjectType {
  # Active Directory domain.
  ACTIVE_DIRECTORY_DOMAIN

  # Active Directory domain controller.
  ACTIVE_DIRECTORY_DOMAIN_CONTROLLER

  # App blueprint audit object.
  APP_BLUEPRINT

  # Archival location audit object.
  ARCHIVAL_LOCATION

  # Atlassian site.
  ATLASSIAN_SITE

  # Unspecified audit object type.
  AUDIT_OBJECT_TYPE_UNSPECIFIED

  # Auth domain audit object.
  AUTH_DOMAIN

  # AWS account audit object.
  AWS_ACCOUNT

  # AWS event audit object.
  AWS_EVENT_TYPE

  # AWS native account.
  AWS_NATIVE_ACCOUNT

  # AWS native EBS volume object.
  AWS_NATIVE_EBS_VOLUME

  # AWS native EC2 instance object.
  AWS_NATIVE_EC2_INSTANCE

  # AWS native RDS instance object.
  AWS_NATIVE_RDS_INSTANCE

  # AWS native S3 Bucket.
  AWS_NATIVE_S3_BUCKET

  # Azure AD Directory object.
  AZURE_AD_DIRECTORY

  # Azure native disk.
  AZURE_NATIVE_DISK

  # Azure native subscription.
  AZURE_NATIVE_SUBSCRIPTION

  # Azure native virtual machine.
  AZURE_NATIVE_VM

  # Azure SQL database object.
  AZURE_SQL_DATABASE

  # Azure SQL managed instance.
  AZURE_SQL_MANAGED_INSTANCE

  # Azure storage account
  AZURE_STORAGE_ACCOUNT

  # Blueprint object.
  BLUEPRINT

  # Cassandra column family.
  CASSANDRA_COLUMN_FAMILY

  # Cassandra keyspace.
  CASSANDRA_KEYSPACE

  # Cassandra source.
  CASSANDRA_SOURCE

  # Certificate management object
  CERTIFICATE_MANAGEMENT

  # Cloud-native tag rule object.
  CLOUD_NATIVE_TAG_RULE

  # Cluster audit object.
  CLUSTER

  # Data location audit object.
  DATA_LOCATION

  # DB2 database object.
  DB2_DATABASE

  # DB2 instance object.
  DB2_INSTANCE

  # EC2 Instance object.
  EC2_INSTANCE

  # Encryption Management object.
  ENCRYPTION_MANAGEMENT

  # Exchange DAG.
  EXCHANGE_DAG

  # Exchange database.
  EXCHANGE_DATABASE

  # Exchange server.
  EXCHANGE_SERVER

  # Failover cluster app audit object.
  FAILOVER_CLUSTER_APP

  # Federated access audit object.
  FEDERATED_ACCESS

  # GCP native disk.
  GCP_NATIVE_DISK

  # GCP native GCE instance.
  GCP_NATIVE_GCE_INSTANCE

  # GCP native Project audit object.
  GCP_NATIVE_PROJECT

  # Host audit object.
  HOST

  # Host failover audit object.
  HOST_FAILOVER_CLUSTER

  # HyperV SCVVM audit object.
  HYPERV_SCVMM

  # HyperV server audit object.
  HYPERV_SERVER

  # HyperV virtual machine audit object.
  HYPERV_VM

  # IP Whitelist audit object.
  IP_WHITELIST

  # Atlassian Jira project.
  JIRA_PROJECT

  # Atlassian Jira settings.
  JIRA_SETTINGS

  # Job instance audit object.
  JOB_INSTANCE

  # Kubernetes cluster object.
  K8S_CLUSTER

  # Kubernetes protection set object.
  K8S_PROTECTION_SET

  # LDAP audit object.
  LDAP

  # Linux fileset object.
  LINUX_FILESET

  # Linux host object.
  LINUX_HOST

  # Managed volume object.
  MANAGED_VOLUME

  # MongoDB source.
  MONGODB_SOURCE

  # MongoDB Collection object.
  MONGO_COLLECTION

  # Mongo source object.
  MONGO_SOURCE

  # Mosaic storage location.
  MOSAIC_STORAGE_LOCATION

  # MsSQL object.
  MSSQL

  # MsSQL database object.
  MSSQL_DATABASE

  # MsSQL mount object.
  MSSQL_MOUNT

  # MsSQL object.
  MSSQL_OBJECT

  # NAS host object.
  NAS_HOST

  # Nutanix cluster audit object.
  NUTANIX_CLUSTER

  # Nutanix prism central audit object.
  NUTANIX_PRISM_CENTRAL

  # Nutanix virtual machine object.
  NUTANIX_VM

  # O365 Calendar object.
  O365_CALENDAR

  # O365 Group.
  O365_GROUP

  # O365 Mailbox audit object.
  O365_MAILBOX

  # O365 Onedrive audit object.
  O365_ONEDRIVE

  # O365 Organization object.
  O365_ORGANIZATION

  # O365 SharePoint drive.
  O365_SHAREPOINT_DRIVE

  # O365 SharePoint list.
  O365_SHAREPOINT_LIST

  # O365 SharePoint site audit object.
  O365_SHAREPOINT_SITE

  # O365 Team.
  O365_TEAM

  # OAuth token.
  OAUTH_TOKEN

  # Oracle database object.
  ORACLE_DB

  # Oracle host object.
  ORACLE_HOST

  # Oracle mount object.
  ORACLE_MOUNT

  # Oracle RAC object.
  ORACLE_RAC

  # Organization object.
  ORGANIZATION

  # Public cloud machine instance object.
  PUBLIC_CLOUD_MACHINE_INSTANCE

  # Rubrik cluster replication pair.
  REPLICATION_PAIR

  # SAP HANA database object.
  SAP_HANA_DB

  # SAP HANA system object.
  SAP_HANA_SYSTEM

  # Share fileset object.
  SHARE_FILESET

  # SLA object.
  SLA

  # SLA domain object.
  SLA_DOMAIN

  # SMB domain object.
  SMB_DOMAIN

  # Snapshot object.
  SNAPSHOT

  # Storage array object.
  STORAGE_ARRAY

  # Storage array volume group.
  STORAGE_ARRAY_VOLUME_GROUP

  # Storage settings.
  STORAGE_SETTINGS

  # Storm audit object.
  STORM

  # Support tunnel.
  SUPPORT_TUNNEL

  # System preference.
  SYSTEM_PREFERENCE

  # TPR configuration.
  TPR_CONFIG

  # TPR policy.
  TPR_POLICY

  # TPR request.
  TPR_REQUEST

  # Upgrade audit object.
  UPGRADE

  # User.
  USER

  # User action audit.
  USER_ACTION_AUDIT

  # User group.
  USER_GROUP

  # User role.
  USER_ROLE

  # VCD audit object.
  VCD

  # VCD vApp object.
  VCD_VAPP

  # VCenter audit object.
  VCENTER

  # VMware Compute Cluster object.
  VMWARE_COMPUTE_CLUSTER

  # VMware mount object.
  VMWARE_MOUNT

  # VMware virtual machine audit object.
  VMWARE_VM

  # Volume group audit object.
  VOLUME_GROUP

  # Windows fileset audit object.
  WINDOWS_FILESET

  # Windows host object.
  WINDOWS_HOST
}
# Represents the severity level for audits.
enum AuditSeverity {
  # Critical audit.
  CRITICAL

  # Informational audit.
  INFO

  # Unspecified severity.
  SEVERITY_UNSPECIFIED

  # Warning audit.
  WARNING
}
# Represents the audit status values.
enum AuditStatus {
  # Unspecified audit status.
  AUDIT_STATUS_UNSPECIFIED

  # Canceled audit.
  CANCELED

  # Failed audit.
  FAILURE

  # Successful audit.
  SUCCESS
}
# Represents audit types.
enum AuditType {
  # Access management audit.
  ACCESS_MANAGEMENT

  # Audit.
  AUDIT

  # Unspecified audit type.
  AUDIT_TYPE_UNSPECIFIED

  # Backup audit.
  BACKUP

  # Bulk recovery audit.
  BULK_RECOVERY

  # Classification audit.
  CLASSIFICATION

  # Configuration audit.
  CONFIGURATION

  # Diagnostic audit.
  DIAGNOSTIC

  # Download audit.
  DOWNLOAD

  # Encryption management audit.
  ENCRYPTION_MANAGEMENT_OPERATION

  # Failover audit.
  FAILOVER

  # File download audit.
  FILE_DOWNLOAD

  # Index audit.
  INDEX

  # Isolated recovery audit.
  ISOLATED_RECOVERY

  # Legal hold audit.
  LEGAL_HOLD

  # Local recovery audit.
  LOCAL_RECOVERY

  # Login audit.
  LOGIN

  # Quarantine audit.
  QUARANTINE

  # Recovery audit.
  RECOVERY

  # Orchestrated Application Recovery schedule audit.
  RECOVERY_SCHEDULE

  # AI confirmation audit.
  RUBY_AI

  # Search audit.
  SEARCH

  # SLA Domain assignment audit.
  SLA_ASSIGNMENT

  # SLA Domain modification audit.
  SLA_MODIFICATION

  # Sync audit.
  SYNC

  # Threat hunt audit.
  THREAT_HUNT

  # Two-person rule audits.
  TPR
}
# Represents the counts of apps in an O365 service
# type based on their authentication status.
type AuthCounts {
  # The count of authenticated apps for the service type.
  authenticated: Int!

  # The count of partially authenticated apps for the service type.
  unauthenticated: Int!

  # The count of unauthenticated apps for the service type.
  partiallyAuthenticated: Int!
}
# The authentication type and token to authenticate the endpoint.
input AuthInfoInput {
  # The type of authentication that protects the URL endpoint.
  authType: AuthenticationType!

  # The token used for authentication.
  token: String

  # The username and password of the user to authenticate the endpoint.
  userCredentials: UserCredentials

  # The custom authentication header key and value to authenticate the endpoint.
  customHeader: CustomHeader
}
# Auth type for the NFS type location.
enum AuthTypeEnum {
  # Kerberos based auth type.
  KERBEROS

  # No auth type.
  NONE
}
# Options for authenticating the webhook.
enum AuthenticationType {
  # Unused default value.
  AUTH_TYPE_UNSPECIFIED

  # Webhook is authenticated with a username/password pair.
  BASIC

  # Webhook is authenticated with a bearer token.
  BEARER

  # Webhook is authenticated with a custom header.
  CUSTOM_HEADER

  # Webhook is authenticated with a URL token.
  URL
}
type AuthorizedOperations {
  id: String!
  operations: [Operation!]!

  # Workload Hierarchy.
  workloadHierarchy: WorkloadLevelHierarchy
}
# LDAP authorized principal.
type AuthorizedPrincipal {
  # Principal Type.
  principalType: PrincipalTypeEnum!

  # Principal ID
  id: String!

  # ID of the authentication domain.
  authDomainId: String!

  # Name of the authentication domain.
  authDomainName: String!

  # Name of the principal.
  name: String!

  # Email address.
  email: String

  # Last login timestamp.
  lastLogin: DateTime

  # TOTP status for a LDAP principal.
  totpStatus: LdapTotpStatus
  roles: [Role!]!
}
# Paginated list of AuthorizedPrincipal objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AuthorizedPrincipalConnection {
  # List of AuthorizedPrincipal objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AuthorizedPrincipalEdge!]!

  # List of AuthorizedPrincipal objects.
  nodes: [AuthorizedPrincipal!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AuthorizedPrincipal objects matching the request arguments.
  count: Int!
}
# Wrapper around the AuthorizedPrincipal object. This wrapper is used for pagination.
type AuthorizedPrincipalEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AuthorizedPrincipal object wrapped by this edge.
  node: AuthorizedPrincipal!
}
# Auto-enabled Data Discovery policy configuration for Rubrik clusters.
type AutoEnablePolicyClusterConfigReply {
  # Rubrik cluster ID.
  clusterId: String!

  # Specifies whether Auto-enabled Data Discovery Policies are enabled on the Rubrik cluster or not.
  enabled: Boolean!
}
# AWS Account specific info.
type AwsAccount implements CloudAccount {
  # Access key for IAM user, which is required while adding new AWS cloud account.
  accessKey: String!

  # The ID of this Cloud Account.
  cloudAccountId: String!

  # The name of this Cloud Account.
  name: String!

  # The description of this Cloud Account.
  description: String

  # The type of this Cloud Provider.
  cloudProvider: CloudAccountType!

  # The connection status of this Cloud Account.
  connectionStatus: ConnectionStatusType!
}
# AWS Native ID to features/artifacts map.
input AwsAccountFeatureArtifact {
  # AWS native ID of the account being onboarded.
  awsNativeId: String!

  # Details of the artifacts to be registered.
  externalArtifacts: [ExternalArtifactMap!]!

  # List of RSC features being enabled.
  features: [CloudAccountFeature!]!
}
# Status of an AWS Account.
enum AwsAccountStatus {
  # The AWS account has been added.
  ADDED

  # The AWS account has been deleted.
  DELETED

  # The AWS account is in the process of being deleted.
  DELETING

  # The deletion of the AWS account has failed.
  DELETION_FAILED

  # The AWS account is disconnected.
  DISCONNECTED

  # The AWS account has been refreshed.
  REFRESHED

  # The AWS account is refreshing.
  REFRESHING

  # The AWS account has failed to refresh.
  REFRESH_FAILED
}
# Validate given aws accounts.
type AwsAccountValidationResponse {
  # AWS account native ID.
  nativeId: String!

  # AWS account name.
  accountName: String!

  # AWS account validation response message.
  message: String!

  # Specfies whether seamless flow is enabled for this AWS account.
  seamlessFlowEnabled: Boolean!

  # AWS account cloud type.
  cloudType: AwsCloudType!
}
# List of AWS artifacts that need to be deleted for a given list for features.
type AwsArtifactsToDelete {
  # List of artifacts to be deleted for each feature.
  artifactsToDelete: [ArtifactsToDelete!]!
}
# Input to retrieve the AWS artifacts that need to be deleted when an account is being deleted.
input AwsArtifactsToDeleteInput {
  # Native ID of the AWS account.
  awsNativeId: String!

  # List of cloud account features.
  features: [CloudAccountFeature!]!
}
# AWS authentication server based cloud account region names.
enum AwsAuthServerBasedCloudAccountRegion {
  # AWS cloud unknown region.
  UNKNOWN_AWS_AUTH_SERVER_BASED_REGION

  # AWS cloud US ISOB East 1 region.
  US_ISOB_EAST_1

  # AWS cloud US ISO East 1 region.
  US_ISO_EAST_1

  # AWS cloud US ISO West 1 region.
  US_ISO_WEST_1
}
# Input to add certificate details for authentication server-based cloud accounts.
input AwsAuthServerCertificateIdInput {
  # Certificate ID.
  id: Long!
}
# Details of AWS authentication server-based cloud account.
type AwsAuthServerDetail {
  # Agency name for the feature.
  agency: String!

  # Role name for the feature.
  roleName: String!

  # Host name of the authentication server.
  authServerHostName: String!

  # Client's TLS Certificate ID for the authentication server.
  authServerUserClientCertId: Long!

  # CA certificate ID for the authentication server.
  authServerCaCertId: Long!

  # List of AWS secret regions.
  authServerAwsRegions: [AwsAuthServerBasedCloudAccountRegion!]!
}
# Input to update regions in authentication server-based AWS cloud accounts.
input AwsAuthServerRegionsInput {
  # List of regions for cloud account.
  regions: [AwsAuthServerBasedCloudAccountRegion!]!
}
# Input to update role name in authentication server-based cloud accounts.
input AwsAuthServerRoleNameInput {
  # Name of the role.
  name: String!
}
# Rubrik CDM image version information from the AWS marketplace.
type AwsCdmVersion {
  # Image ID.
  imageId: String!

  # Image version.
  version: String!

  # Image tag array with each element in key=value format.
  tags: [AwsCdmVersionTag!]!

  # Product codes of the AWS image.
  productCodes: [String!]!

  # Indicates whether the Rubrik CDM version is the latest for the product code.
  isLatest: Boolean!

  # Supported AWS instance types for this Rubrik CDM version.
  supportedInstanceTypes: [AwsInstanceType!]!
}
# Rubrik CDM versions for the AWS account.
input AwsCdmVersionRequest {
  # Cloud account ID of the AWS account.
  cloudAccountId: String = ""

  # AWS region.
  region: String = ""
}
# Rubrik CDM image version tag.
type AwsCdmVersionTag {
  # Tag key.
  key: String!

  # Tag value.
  value: String!
}
# Details of AWS account.
type AwsCloudAccount {
  # Rubrik ID of cloud account.
  id: String!

  # Native ID of cloud account.
  nativeId: String!

  # Name of cloud account.
  accountName: String!

  # Message for cloud account, in case of error.
  message: String!

  # Whether seamless flow is enabled on cloud account.
  seamlessFlowEnabled: Boolean!

  # Type of cloud account.
  cloudType: AwsCloudType!
}
# Input to get AWS cloud account configurations.
input AwsCloudAccountConfigsInput {
  # Type of cloud native protection feature.
  feature: CloudAccountFeature!

  # List of status filters for listing cloud accounts.
  statusFilters: [CloudAccountStatus!]!

  # Admin account ID to filter.
  awsAdminAccountFilter: UUID

  # Search text to match in native ID, account name, or role ARN.
  columnSearchFilter: String
}
# Initiate aws cloud accounts.
type AwsCloudAccountCreateResponse {
  # List of AWS regions for the cloud account.
  awsRegions: [AwsCloudAccountRegion!]

  # AWS CloudFormation template URL.
  templateUrl: String!

  # Stack name of template to run, only for single account addition.
  stackName: String

  # StackSet name of template to run, only for bulk account addition.
  stackSetName: String

  # AWS CloudFormation URL.
  cloudFormationUrl: String!

  # External ID for the cloud account.
  externalId: String!

  # List of feature versions.
  featureVersions: [AwsCloudAccountFeatureVersion!]!

  # Role ARN for the feature (if valid).
  roleArn: String!
}
# Feature version of AWS cloud accounts.
type AwsCloudAccountFeatureVersion {
  # Feature Enum.
  feature: CloudAccountFeature!

  # Version.
  version: Int!
}
# Input to protect a feature for the AWS cloud account.
input AwsCloudAccountFeatureVersionInput {
  # Name of feature to be protected for cloud account.
  feature: CloudAccountFeature!

  # Version of feature. This should be same as the response given in the first step (validateAndCreateAwsCloudAccount).
  version: Int!
}
# Details of an AWS cloud account.
input AwsCloudAccountInput {
  # Rubrik ID of the AWS cloud account.
  id: String = ""

  # Native ID of cloud account.
  nativeId: String = ""

  # Name of cloud account.
  accountName: String = ""

  # Whether seamless setup flow is enabled on cloud account.
  seamlessFlowEnabled: Boolean = false

  # Cloud type (Standard/China) for the cloud account.
  cloudType: AwsCloudType = STANDARD
}
# AWS Cloud Account lists the security group response.
type AwsCloudAccountListSecurityGroupsResponse {
  # List of security groups and associated information.
  result: [CloudAccountSub!]!
}
# AWS Cloud Account lists the subnet response.
type AwsCloudAccountListSubnetsResponse {
  # List of subnets and associated information.
  result: [CloudAccountSubnet!]!
}
# AWS Cloud Account lists the Amazon Virtual Private Cloud (VPC) response.
type AwsCloudAccountListVpcResponse {
  # List of virtual private clouds (VPCs) and associated information.
  result: [CloudAccountVpc!]!
}
# AWS cloud account regions enum.
enum AwsCloudAccountRegion {
  # AWS cloud Africa (Cape Town) region.
  AF_SOUTH_1

  # AWS cloud Asia Pacific (Hong Kong) region.
  AP_EAST_1

  # AWS cloud Asia Pacific (Tokyo) region.
  AP_NORTHEAST_1

  # AWS cloud Asia Pacific (Seoul) region.
  AP_NORTHEAST_2

  # AWS cloud Asia Pacific (Singapore) region.
  AP_SOUTHEAST_1

  # AWS cloud Asia Pacific (Sydney) region.
  AP_SOUTHEAST_2

  # AWS cloud Asia Pacific (Mumbai) region.
  AP_SOUTH_1

  # AWS cloud Canada (Central) region.
  CA_CENTRAL_1

  # AWS cloud China (Ningxia) region.
  CN_NORTHWEST_1

  # AWS cloud China (Beijing) region.
  CN_NORTH_1

  # AWS cloud EU (Frankfurt) region.
  EU_CENTRAL_1

  # AWS cloud EU (Stockholm) region.
  EU_NORTH_1

  # AWS cloud EU (Milan) region.
  EU_SOUTH_1

  # AWS cloud EU (Ireland) region.
  EU_WEST_1

  # AWS cloud EU (London) region.
  EU_WEST_2

  # AWS cloud EU (Paris) region.
  EU_WEST_3

  # AWS cloud Israel (Tel Aviv) region.
  IL_CENTRAL_1

  # AWS cloud Middle East (Bahrain) region.
  ME_SOUTH_1

  # AWS cloud South America (Sao Paulo) region.
  SA_EAST_1

  # AWS cloud region is unknown.
  UNKNOWN_AWS_REGION

  # AWS cloud US East (N. Virginia) region.
  US_EAST_1

  # AWS cloud US East (Ohio) region.
  US_EAST_2

  # AWS Gov cloud US East 1 (N. Virginia) region.
  US_GOV_EAST_1

  # AWS Gov cloud US West 1 (N. California) region.
  US_GOV_WEST_1

  # AWS cloud US West (N. California) region.
  US_WEST_1

  # AWS cloud US West (Oregon) region.
  US_WEST_2
}
# Aws cloud accounts validate response.
type AwsCloudAccountValidateResponse {
  # Contains error message for admin account.
  invalidAwsAdminAccount: AwsAccountValidationResponse

  # Contains error message for account(s).
  invalidAwsAccounts: [AwsAccountValidationResponse!]!
}
# Aws cloud accounts features.
type AwsCloudAccountWithFeatures {
  # AWS account details.
  awsCloudAccount: AwsCloudAccount

  # Feature details for the cloud account.
  featureDetails: [FeatureDetail!]!
}
# AWS cloud account with features.
input AwsCloudAccountWithFeaturesInput {
  # Type of cloud native protection features.
  features: [CloudAccountFeature!]!
}
# AWS cloud accounts with features.
input AwsCloudAccountsWithFeaturesInput {
  # Type of cloud native protection feature.
  feature: CloudAccountFeature!

  # List of status filters for listing cloud accounts.
  statusFilters: [CloudAccountStatus!]!

  # Admin account ID to filter.
  awsAdminAccountFilter: UUID

  # Search text to match in native ID, account name, and role ARN.
  columnSearchFilter: String
}
# Aws cloud account query filter fields.
enum AwsCloudComputeSettingFilterField {
  # Cloud account ID.
  CLOUD_ACCOUNT_ID

  # Retrieve from all clusters.
  CLUSTER_ALL

  # Cluster ID.
  CLUSTER_ID

  # If it has Rubrik managed security group.
  IS_SG_RUBRIK_MANAGED

  # Name of the compute setting.
  NAME
}
# Filter for AWS cloud compute query request.
input AwsCloudComputeSettingFilterInput {
  # Field from which query should be filtered.
  field: AwsCloudComputeSettingFilterField = NAME

  # Value of the field.
  text: String = ""
}
# Aws cloud compute settings sort fields.
enum AwsCloudComputeSettingQuerySortByField {
  # Name of aws compute setting.
  NAME
}
# Cloud compute settings input for the AWS archival target.
input AwsCloudComputeSettingsInput {
  # Subnet ID of the AWS target.
  subnetId: String = ""

  # VPC ID of the AWS target.
  vpcId: String = ""

  # Security Group ID of the AWS target.
  securityGroupId: String = ""

  # Compute proxy settings of the AWS target.
  computeProxySettings: ProxySettingsInput
}
# Keywords for AWS external artifacts.
enum AwsCloudExternalArtifact {
  # Keyword to capture AWS Account access key.
  ACCESS_KEY

  # Unspecified.
  ARTIFACT_KEY_UNSPECIFIED

  # Keyword to capture cross account role.
  CROSSACCOUNT_ROLE_ARN

  # Keyword to capture EKS worker node instance profile.
  EXOCOMPUTE_EKS_MASTERNODE_INSTANCE_PROFILE

  # Keyword to capture EKS master node role.
  EXOCOMPUTE_EKS_MASTERNODE_ROLE_ARN

  # Keyword to capture EKS worker node instance profile.
  EXOCOMPUTE_EKS_WORKERNODE_INSTANCE_PROFILE

  # Keyword to capture EKS worker node role.
  EXOCOMPUTE_EKS_WORKERNODE_ROLE_ARN

  # Keyword to capture AWS account IAM user.
  IAM_USER_ARN

  # Keyword to capture AWS account secret key.
  SECRET_KEY

  # Keyword to capture stack ARN.
  STACK_ARN

  # Keyword to capture stack name.
  STACK_NAME
}
# AWS Cloud Type Enum.
enum AwsCloudType {
  # Cloud type for AWS C2S cloud account.
  C2S

  # Cloud type for AWS China cloud account.
  CHINA

  # Cloud type for AWS Gov cloud account.
  GOV

  # Cloud type for AWS SC2S cloud account.
  SC2S

  # Cloud type for AWS Commercial cloud account.
  STANDARD
}
# Input to filter AWS accounts by the specified cloud types.
input AwsCloudTypeFilter {
  # List of AWS cloud types.
  cloudTypes: [AwsCloudType!]!
}
# Compute setting for AWS Target.
type AwsComputeSettings {
  # ID of the AWS cloud compute setting.
  id: String!

  # Subnet ID of the AWS target.
  subnetId: String!

  # VPC ID of the AWS target.
  vpcId: String!

  # Security Group ID of the AWS target.
  securityGroupId: String!

  # Compute proxy settings of the AWS target.
  proxySettings: ProxySettings

  # AWS target region.
  region: AwsRegion!

  # Name of the AWS cloud compute setting.
  name: String!

  # Specifies whether this AWS target is archived.
  isArchived: Boolean!

  # List of cluster interface CIDR.
  clusterInterfaceCidrs: [ClusterInfCidrs!]!

  # Cloud account details of the AWS target.
  cloudAccount: CloudAccount

  # Managed by Rubrik SaaS.
  isRscManaged: Boolean!
}
# AWS Customer Managed Exocompute Configuration in a region.
type AwsCustomerManagedExocomputeConfig implements AwsExocomputeGetConfigurationResponse {
  # Exocompute cluster name.
  clusterName: String!

  # Exocompute configuration UUID.
  configUuid: UUID!

  # Exocompute configuration message.
  message: String!

  # Exocompute configuration region.
  region: AwsCloudAccountRegion!

  # Status of the latest Exocompute health check.
  healthCheckStatus: ExocomputeHealthCheckStatus!

  # Whether this Exocompute uses a Private Container Registry (PCR).
  hasPcr: Boolean!

  # URL of the user's PCR.
  pcrUrl: String
}
# ES storage for AWS account.
input AwsEsConfigInput {
  # Bucket name in AWS.
  bucketName: String = ""

  # Create new bucket or use existing.
  shouldCreateBucket: Boolean = false

  # Enable object locking on bucket.
  enableObjectLock: Boolean = false

  # Enable immutability on rubrik filesystem.
  enableImmutability: Boolean = false
}
# AWS Exocompute configurations in an AWS account.
type AwsExocomputeConfig {
  # Account details.
  awsCloudAccount: AwsCloudAccount!

  # Feature details.
  featureDetail: FeatureDetail!

  # List of regions for which Exocompute can be configured.
  exocomputeEligibleRegions: [AwsCloudAccountRegion!]!

  # AWS Exocompute get configurations response.
  configs: [AwsExocomputeGetConfigResponse!]! @deprecated(reason: "Deprecated in favor of BYOK8s, use exocomputeConfigs instead.")

  # AWS Exocompute get configurations response.
  exocomputeConfigs: [AwsExocomputeGetConfigurationResponse!]!

  # Cloud Accounts which are mapped to this Exocompute account.
  mappedCloudAccountIds: [UUID!]! @deprecated(reason: "Use mappedCloudAccounts instead, cloud account IDs of mapped accounts are contained in mappedCloudAccounts.")

  # Details of cloud accounts which are mapped to this Exocompute account.
  mappedCloudAccounts: [CloudAccountDetails!]!
}
# AWS Exocompute configuration to add.
input AwsExocomputeConfigInput {
  # The region for which the configuration is specified.
  region: AwsCloudAccountRegion!

  # AWS ID of cluster control plane security group. If isRscManaged is true, this parameter is optional.
  clusterSecurityGroupId: String = ""

  # AWS ID of the VPC. This field is required only for RSC-managed clusters.
  vpcId: String = ""

  # AWS ID of worker node security group. If isRscManaged is true, this parameter is optional.
  nodeSecurityGroupId: String = ""

  # List of exactly 2 subnets. This field is required only for RSC-managed clusters.
  subnets: [AwsExocomputeSubnetInputType!] = []

  # If security groups are to be managed by Rubrik Security Cloud, this parameter should be set to true. False, if users are in charge of managing security groups.
  isRscManaged: Boolean = true

  # Name of the customer managed cluster. This field is required only for customer-managed clusters.
  clusterName: String = ""
}
# AWS Exocompute configurations Deletion status.
type AwsExocomputeConfigsDeletionStatusType {
  # Exocompute configuration ID.
  exocomputeConfigId: String!

  # Specifies whether the deletion of the Exocompute configuration was successful.
  success: Boolean!
}
# AWS Exocompute configuration in a region.
type AwsExocomputeGetConfigResponse {
  # Exocompute configuration UUID.
  configUuid: String!

  # Exocompute configuration region.
  region: AwsCloudAccountRegion!

  # VPC ID.
  vpcId: String!

  # Cluster security group ID.
  clusterSecurityGroupId: String!

  # Node security group ID.
  nodeSecurityGroupId: String!

  # First subnet.
  subnet1: AwsExocomputeSubnetType!

  # Second subnet.
  subnet2: AwsExocomputeSubnetType!

  # Exocompute configuration message.
  message: String!

  # Status of the latest Exocompute health check.
  healthCheckStatus: ExocomputeHealthCheckStatus!

  # Whether this Exocompute uses a Private Container Registry (PCR).
  hasPcr: Boolean!

  # URL of the user's PCR.
  pcrUrl: String!

  # Specifies if the security groups are managed by Rubrik SaaS.
  areSecurityGroupsRscManaged: Boolean!
}
# AWS Exocompute Configuration response type.
interface AwsExocomputeGetConfigurationResponse {
  # Exocompute configuration UUID.
  configUuid: UUID!

  # Exocompute configuration message.
  message: String!

  # Exocompute configuration region.
  region: AwsCloudAccountRegion!

  # Status of the latest Exocompute health check.
  healthCheckStatus: ExocomputeHealthCheckStatus!

  # Whether this Exocompute uses a Private Container Registry (PCR).
  hasPcr: Boolean!

  # URL of the user's PCR.
  pcrUrl: String
}
# AWS Exocompute subnet input.
input AwsExocomputeSubnetInputType {
  # AWS ID of subnet.
  subnetId: String!

  # Availability zone of the subnet.
  availabilityZone: String!
}
# AWS Exocompute subnet.
type AwsExocomputeSubnetType {
  # ID of the subnet.
  subnetId: String!

  # Availability zone in which the subnet resides.
  availabilityZone: String!
}
# AWS feature configurations in an AWS account.
type AwsFeatureConfig {
  # Account details.
  awsCloudAccount: AwsCloudAccount!

  # Feature detail.
  featureDetail: FeatureDetail!

  # AWS Exocompute Configurations.
  exocomputeConfigs: [AwsExocomputeGetConfigResponse!]! @deprecated(reason: "Deprecated in favor of BYOK8s, use exocomputeConfigurations instead.")

  # AWS Exocompute Configurations.
  exocomputeConfigurations: [AwsExocomputeGetConfigurationResponse!]!

  # Account details of the mapped Exocompute account.
  mappedExocomputeAccount: CloudAccountDetails
}
# AWS feature for which we require some specific permissions.
enum AwsFeatureForPermissionCheck {
  # AWS feature for exporting virtual machine in powered off state.
  AWS_EXPORT_VM_IN_POWERED_OFF_STATE

  # AWS feature for exporting virtual machine with IAM instance profile.
  AWS_EXPORT_VM_WITH_IAM_INSTANCE_PROFILE

  # The feature is unspecified.
  AWS_UNSPECIFIED
}
# Input to retrieve the AWS permission policies.
input AwsGetPermissionPoliciesInput {
  # Cloud type (Standard/China) for the cloud account.
  cloudType: AwsCloudType = STANDARD

  # List of cloud account features.
  features: [CloudAccountFeature!]!

  # Feature specific details needed to retrieve the permission policies.
  featureSpecificDetails: FeatureSpecificDetailsInput
}
# Immutability settings for creating AWS locations.
input AwsImmutabilitySettings {
  # Immutability lock duration of AWS location in days.
  lockDurationDays: Int = 0
}
# Immutability settings for aws cdm target.
type AwsImmutabilitySettingsType {
  # Number of days location is immutable.
  lockDurationDays: Int!
}
# Input to filter AWS EC2 instances based on RBS connection status.
input AwsInstanceCcOrCnpRbsConnectionStatusFilter {
  # Connection status of the Rubrik Backup Service (RBS) installed on the instance.
  status: CloudInstanceRbsConnectionStatus!
}
# AWS instance types.
enum AwsInstanceType {
  # None or other instance type selected.
  AWS_TYPE_UNSPECIFIED

  # M5.4xlarge instance type.
  M5_4XLARGE

  # M6i.2xlarge instance type.
  M6I_2XLARGE

  # M6i.4xlarge instance type.
  M6I_4XLARGE

  # M6i.8xlarge instance type.
  M6I_8XLARGE
}
# AWS native account.
type AwsNativeAccount implements PolarisHierarchyObject , HierarchyObject {
  # Specifies the state of account in Rubrik environment like Refreshed, Disconnected, etc. An account can be in a single state at a time.
  status: AwsAccountStatus!

  # Last refresh time of the account, in UTC date-time format.
  lastRefreshedAt: DateTime

  # List of AWS region specifications associated with the account.
  regionSpecs: [AwsNativeRegionSpec!]!

  # Count of EC2 Instances in the AWS Native account.
  ec2InstanceCount: Int!

  # Count of EBS Volumes in the AWS Native account.
  ebsVolumeCount: Int!

  # Count of RDS Instances in the account.
  rdsInstanceCount: Int!

  # Count of Amazon S3 Buckets in the AWS native account.
  s3BucketCount: Int!

  # AWS cloud type.
  cloudType: AwsCloudType!

  # Specifies the status of the cloud account associated with the feature requested.
  cloudAccountState: CloudAccountState!

  # The authorized operations on the object.
  authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!

  # List of all EC2 instances under this AWS Native account.
  awsNativeEc2Instances(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS EC2 instances.
    sortBy: AwsNativeEc2InstanceSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter for EC2 instances.
    ec2InstanceFilters: AwsNativeEc2InstanceFilters): AwsNativeEc2InstanceConnection!

  # List of all EBS Volumes under this AWS Native account.
  awsNativeEbsVolumes(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS EBS volumes.
    sortBy: AwsNativeEbsVolumeSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter for EBS volumes.
    ebsVolumeFilters: AwsNativeEbsVolumeFilters): AwsNativeEbsVolumeConnection!

  # List of all RDS Instances under this AWS Native account.
  awsNativeRdsInstances(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of AWS RDS instances.
    sortBy: AwsNativeRdsInstanceSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter for RDS instances.
    rdsInstanceFilters: AwsNativeRdsInstanceFilters): AwsNativeRdsInstanceConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of AwsNativeAccount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AwsNativeAccountConnection {
  # List of AwsNativeAccount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AwsNativeAccountEdge!]!

  # List of AwsNativeAccount objects.
  nodes: [AwsNativeAccount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AwsNativeAccount objects matching the request arguments.
  count: Int!
}
interface AwsNativeAccountDescendantType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Wrapper around the AwsNativeAccount object. This wrapper is used for pagination.
type AwsNativeAccountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AwsNativeAccount object wrapped by this edge.
  node: AwsNativeAccount!
}
# Filter to return AWS objects which have account rubrik ID in the given list of account rubrik IDs.
input AwsNativeAccountFilter {
  # List of AWS account Rubrik IDs.
  accountIds: [String!]!
}
# Filters for list of AWS accounts.
input AwsNativeAccountFilters {
  # Filter by name substring.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by AWS cloud type.
  cloudTypeFilter: AwsCloudTypeFilter
}
# Represent an AWS native account.
input AwsNativeAccountInput {
  # External ID to be associated with account roles.
  externalId: String = ""

  # Native ID of the cloud account.
  id: String! = ""
}
interface AwsNativeAccountLogicalChildType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# The field type used to sort AWS accounts.
enum AwsNativeAccountSortFields {
  # Use EBS volume count for sorting.
  EBS_VOLUME_COUNT

  # Use EC2 instance count for sorting.
  EC2_INSTANCE_COUNT

  # Use AWS account SLA Domain for sorting.
  EFFECTIVE_SLA_DOMAIN

  # Use AWS account name for sorting.
  NAME
}
# Filter to return AWS EBS volumes which are attached to one of the EC2 instances in the given list of EC2 instance IDs.
input AwsNativeAttachedInstanceFilter {
  # List of EC2 instance IDs.
  ec2InstanceIds: [String!]!
}
# AWS native EBS volume.
type AwsNativeEbsVolume implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , AwsNativeAccountLogicalChildType , AwsNativeAccountDescendantType , AwsNativeHierarchyObject {
  # AWS Native ID of EBS volume.
  volumeNativeId: String!

  # AWS Native ID of EBS volume.
  cloudNativeId: String!

  # Name of volume on AWS. Name is not necessarily unique for different volumes.
  volumeName: String!

  # AWS Native EBS volume type. Some examples are: g3, io2. This field cannot be null or empty string and will be mapped directly to available EBS volumes on cloud(AWS). For more information, see https://aws.amazon.com/ebs/volume-types.
  volumeType: String!

  # Size of volume in GiB.
  sizeInGiBs: Int!

  # Input/Output (IO) limit per second for volume.
  iops: Long!

  # Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available regions for EBS volume on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions.
  region: AwsNativeRegion!

  # Whether exocompute is configured for the region where the volume is.
  isExocomputeConfigured: Boolean!

  # Name of the Availability Zone (AZ). Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available AZ for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones.
  availabilityZone: String!

  # List of tags associated with volume.
  tags: [Tag!]!

  # Whether the volume is relic.
  isRelic: Boolean!

  # Rubrik ID of Instance.
  awsAccountRubrikId: String!

  # List of EC2 instance details to which volume is attached.
  attachmentSpecs: [AttachmentSpecForEbsVolume!]!

  # Name for the AWS account.
  awsNativeAccountName: String!

  # Whether indexing is enabled for snapshots of volume.
  isIndexingEnabled: Boolean!

  # Whether the volume image is marketplace image.
  isMarketplace: Boolean!

  # AWS Native name of the object.
  nativeName: String!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # AWS Native account associated with the EBS Volumes.
  awsNativeAccount: AwsNativeAccount!

  # EC2 Instances to which this volume is attached.
  attachedEc2Instances: [AwsNativeEc2Instance!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of AwsNativeEbsVolume objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AwsNativeEbsVolumeConnection {
  # List of AwsNativeEbsVolume objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AwsNativeEbsVolumeEdge!]!

  # List of AwsNativeEbsVolume objects.
  nodes: [AwsNativeEbsVolume!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AwsNativeEbsVolume objects matching the request arguments.
  count: Int!
}
# Wrapper around the AwsNativeEbsVolume object. This wrapper is used for pagination.
type AwsNativeEbsVolumeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AwsNativeEbsVolume object wrapped by this edge.
  node: AwsNativeEbsVolume!
}
# Filter to return AWS EBS volumes which have file recovery enabled.
input AwsNativeEbsVolumeFileRecoveryStatusFilter {
  # List of file recovery statuses.
  statuses: [AwsNativeFileRecoveryStatus!]!
}
# Filters for list of AWS EBS volumes.
input AwsNativeEbsVolumeFilters {
  # Filter by name or ID substring.
  nameOrIdSubstringFilter: AwsNativeEbsVolumeNameOrIdSubstringFilter

  # Filter by file recovery status.
  fileRecoveryStatusFilter: AwsNativeEbsVolumeFileRecoveryStatusFilter

  # Filter by EBS volume type.
  typeFilter: AwsNativeEbsVolumeTypeFilter

  # Filter by attached EC2 instance.
  attachedInstanceFilter: AwsNativeAttachedInstanceFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by AWS account.
  accountFilter: AwsNativeAccountFilter

  # Filter by region.
  regionFilter: AwsNativeRegionFilter

  # Filter by relic status.
  relicFilter: RelicFilter

  # Filter by tags.
  tagFilter: AwsNativeTagFilter

  # Filter by organization ID.
  orgFilter: OrgFilter
}
# Filter to return AWS EBS volumes with a given substring in their name or instance ID.
input AwsNativeEbsVolumeNameOrIdSubstringFilter {
  # Name or ID substring.
  nameOrIdSubstring: String!
}
# The field type used to sort the EBS volumes.
enum AwsNativeEbsVolumeSortFields {
  # Use AWS account name for sorting.
  AWS_NATIVE_ACCOUNT_NAME

  # Use EBS volume ID for sorting.
  EBS_VOLUME_ID

  # Use EBS volume name for sorting.
  EBS_VOLUME_NAME

  # Use size of EBS volume for sorting.
  EBS_VOLUME_SIZE

  # Use type of EBS volume for sorting.
  EBS_VOLUME_TYPE

  # Use EBS volume SLA Domain for sorting.
  EFFECTIVE_SLA_DOMAIN
}
# AWS EBS volume types.
enum AwsNativeEbsVolumeType {
  # EBS volume type is gp2.
  GP2

  # EBS volume type is gp3.
  GP3

  # EBS volume type is io1.
  IO1

  # EBS volume type is io2.
  IO2

  # EBS volume type is not specified.
  NOT_SPECIFIED

  # EBS volume type is sc1.
  SC1

  # EBS volume type is st1.
  ST1

  # Storage type is standard.
  STANDARD

  # EBS volume type is unknown.
  UNKNOWN
}
# Filter to return AWS EBS volumes which have volume type in the given list of volume types.
input AwsNativeEbsVolumeTypeFilter {
  # List of EBS volume types.
  ebsVolumeTypes: [AwsNativeEbsVolumeType!]!
}
# AWS native EC2 instance.
type AwsNativeEc2Instance implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , AwsNativeAccountLogicalChildType , AwsNativeAccountDescendantType , AwsNativeHierarchyObject {
  # AWS Native ID of Instance.
  instanceNativeId: String!

  # Name of instance on AWS. Name is not necessarily unique for different instances.
  instanceName: String!

  # Public IP address for instance.
  publicIp: String!

  # Private IP address for instance.
  privateIp: String!

  # AWS Native EC2 instance type. Some examples are: t2.nano, m5.xlarge. This field cannot be null or empty string and will be mapped directly to available EC2 instance on cloud(AWS). For more information, see https://aws.amazon.com/ec2/instance-types.
  instanceType: String!

  # Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available regions for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions.
  region: AwsNativeRegion!

  # Whether exocompute is configured for the region where the instance is.
  isExocomputeConfigured: Boolean!

  # Name of the Availability Zone (AZ). Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty string and will be mapped directly to available AZs for EC2 instance on cloud(AWS). For more information, see https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-availability-zones.
  availabilityZone: String!

  # ID of Virtual Private Cloud (VPC) associated with instance.
  vpcId: String!

  # Name of Virtual Private Cloud (VPC) associated with instance.
  vpcName: String!

  # List of tags associated with Instance.
  tags: [Tag!]!

  # Name of the Operating System (OS) for the Instance. Some examples are: Linux, Windows. This field cannot be null or empty string but can be Undefined in case it is not currently supported.List of supported OS: Linux, Windows.
  osType: OsType!

  # Whether the instance is relic.
  isRelic: Boolean!

  # Rubrik ID of Instance.
  awsAccountRubrikId: String!

  # List of EBS volume details attached to the instance.
  attachmentSpecs: [AttachmentSpecForEc2Instance!]!

  # Name for the AWS Account.
  awsNativeAccountName: String!

  # Whether indexing is enabled for snapshots of instance.
  isIndexingEnabled: Boolean!

  # Whether the instance image is marketplace image.
  isMarketplace: Boolean!

  # Name of SSH key-pair for the Instance.
  sshKeyPairName: String!

  # AWS Native ID of Instance.
  cloudNativeId: String!

  # AWS Native name of the object.
  nativeName: String!

  # Specifies whether the pre-script or post-script framework is enabled on the EC2 instance. When enabled, it facilitates application-consistent backups.
  isPreOrPostScriptEnabled: Boolean!

  # Specifications for ensuring application consistency on the EC2 instance.
  vmAppConsistentSpecs: VmAppConsistentSpecsInternal

  # Specifies whether application consistent snapshots are enabled for this EC2 instance. When enabled, Rubrik informs the AWS applications before taking snapshots, allowing them to prepare. During the preparation phrase, Rubrik freezes the IO, takes the snapshot, and then unfreezes IO, enabling the apps to resume regular operation.
  isAppConsistencyEnabled: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # AWS account of the EC2 instance.
  awsNativeAccount: AwsNativeAccount!

  # Attach an AWS Elastic Block Store (EBS) volume to your instance.
  attachedEbsVolumes: [AwsNativeEbsVolume!]!

  # Rubrik CDM host information for the AWS EC2 instance added as a host to the cluster. The value is Null when the virtual machine is not added as a host on any Rubrik cluster.
  hostInfo: PhysicalHost

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of AwsNativeEc2Instance objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AwsNativeEc2InstanceConnection {
  # List of AwsNativeEc2Instance objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AwsNativeEc2InstanceEdge!]!

  # List of AwsNativeEc2Instance objects.
  nodes: [AwsNativeEc2Instance!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AwsNativeEc2Instance objects matching the request arguments.
  count: Int!
}
# Wrapper around the AwsNativeEc2Instance object. This wrapper is used for pagination.
type AwsNativeEc2InstanceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AwsNativeEc2Instance object wrapped by this edge.
  node: AwsNativeEc2Instance!
}
# Filter to return AWS EC2 instances which have file recovery enabled.
input AwsNativeEc2InstanceFileRecoveryStatusFilter {
  # List of file recovery statuses.
  statuses: [AwsNativeFileRecoveryStatus!]!
}
# Filters for list of AWS EC2 instances.
input AwsNativeEc2InstanceFilters {
  # Filter by name or ID substring.
  nameOrIdSubstringFilter: AwsNativeEc2InstanceNameOrIdSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by AWS account.
  accountFilter: AwsNativeAccountFilter

  # Filter by file recovery status.
  fileRecoveryStatusFilter: AwsNativeEc2InstanceFileRecoveryStatusFilter

  # Filter by region.
  regionFilter: AwsNativeRegionFilter

  # Filter by EC2 instance type.
  typeFilter: AwsNativeEc2InstanceTypeFilter

  # Filter by VPC.
  vpcFilter: AwsNativeVpcFilter

  # Filter by relic status.
  relicFilter: RelicFilter

  # Filter by tags.
  tagFilter: AwsNativeTagFilter

  # Filter by the protection status of the App.
  appProtectionStatusFilter: CloudNativeInstaceAppProtectionFilter

  # Filter by RBS connection status.
  rbsStatusFilter: AwsInstanceCcOrCnpRbsConnectionStatusFilter

  # Filter by organization ID.
  orgFilter: OrgFilter
}
# Filter to return AWS EC2 instances with a given substring in their name or instance ID.
input AwsNativeEc2InstanceNameOrIdSubstringFilter {
  # Name or ID substring.
  nameOrIdSubstring: String!
}
# The field type used to sort the EC2 instances.
enum AwsNativeEc2InstanceSortFields {
  # Use SLA Domain assignment for sorting.
  ASSIGNED_SLA_DOMAIN

  # Use AWS account name for sorting.
  AWS_NATIVE_ACCOUNT_NAME

  # Use VPC ID for sorting.
  AWS_VPC_ID

  # Use EC2 instance ID for sorting.
  EC2_INSTANCE_ID

  # Use EC2 instance name for sorting.
  EC2_INSTANCE_NAME

  # Use type of EC2 instance for sorting.
  EC2_INSTANCE_TYPE

  # Use EC2 instance SLA Domain for sorting.
  EFFECTIVE_SLA_DOMAIN
}
# Specific information for AWS EC2 snapshot created on Polaris.
type AwsNativeEc2InstanceSpecificSnapshot implements PolarisSpecificSnapshot {
  # Native ID of the EC2 snapshot.
  nativeId: String!

  # Native name of the EC2 snapshot.
  nativeName: String!

  # Consistency level of the EC2 snapshot.
  consistencyLevel: SnapshotServiceConsistencyLevel!

  # Instance type of the EC2 snapshot.
  instanceType: String!

  # AWS native account ID of the EC2 snapshot.
  awsNativeAccountId: String!

  # Region native ID of the EC2 snapshot.
  region: String!

  # Volume snapshots excluded from the EC2 snapshot.
  volumeSnapshotsToExclude: [String!]!

  # IAM instance profile ARN of the EC2 object at the time EC2 snapshot was taken.
  iamInstanceProfileArn: String!

  # List of key-value pairs that map device path to volume snapshot.
  devicePathToVolumeSnapshotIdMap: DevicePathToVolumeSnapshotIdMap!

  # ID of the snapshot.
  snapshotId: UUID!
}
# AWS EC2 instance types.
enum AwsNativeEc2InstanceType {
  # EC2 instance type is a1.2xlarge.
  A1_2XLARGE

  # EC2 instance type is a1.4xlarge.
  A1_4XLARGE

  # EC2 instance type is a1.large.
  A1_LARGE

  # EC2 instance type is a1.medium.
  A1_MEDIUM

  # EC2 instance type is a1.metal.
  A1_METAL

  # EC2 instance type is a1.xlarge.
  A1_XLARGE

  # EC2 instance type is c1.medium.
  C1_MEDIUM

  # EC2 instance type is c1.xlarge.
  C1_XLARGE

  # EC2 instance type is c3.2xlarge.
  C3_2XLARGE

  # EC2 instance type is c3.4xlarge.
  C3_4XLARGE

  # EC2 instance type is c3.8xlarge.
  C3_8XLARGE

  # EC2 instance type is c3.large.
  C3_LARGE

  # EC2 instance type is c3.xlarge.
  C3_XLARGE

  # EC2 instance type is c4.2xlarge.
  C4_2XLARGE

  # EC2 instance type is c4.4xlarge.
  C4_4XLARGE

  # EC2 instance type is c4.8xlarge.
  C4_8XLARGE

  # EC2 instance type is c4.large.
  C4_LARGE

  # EC2 instance type is c4.xlarge.
  C4_XLARGE

  # EC2 instance type is c5ad.12xlarge.
  C5AD_12XLARGE

  # EC2 instance type is c5ad.16xlarge.
  C5AD_16XLARGE

  # EC2 instance type is c5ad.24xlarge.
  C5AD_24XLARGE

  # EC2 instance type is c5ad.2xlarge.
  C5AD_2XLARGE

  # EC2 instance type is c5ad.4xlarge.
  C5AD_4XLARGE

  # EC2 instance type is c5ad.8xlarge.
  C5AD_8XLARGE

  # EC2 instance type is c5ad.large.
  C5AD_LARGE

  # EC2 instance type is c5ad.xlarge.
  C5AD_XLARGE

  # EC2 instance type is c5a.12xlarge.
  C5A_12XLARGE

  # EC2 instance type is c5a.16xlarge.
  C5A_16XLARGE

  # EC2 instance type is c5a.24xlarge.
  C5A_24XLARGE

  # EC2 instance type is c5a.2xlarge.
  C5A_2XLARGE

  # EC2 instance type is c5a.4xlarge.
  C5A_4XLARGE

  # EC2 instance type is c5a.8xlarge.
  C5A_8XLARGE

  # EC2 instance type is c5a.large.
  C5A_LARGE

  # EC2 instance type is c5a.xlarge.
  C5A_XLARGE

  # EC2 instance type is c5d.12xlarge.
  C5D_12XLARGE

  # EC2 instance type is c5d.18xlarge.
  C5D_18XLARGE

  # EC2 instance type is c5d.24xlarge.
  C5D_24XLARGE

  # EC2 instance type is c5d.2xlarge.
  C5D_2XLARGE

  # EC2 instance type is c5d.4xlarge.
  C5D_4XLARGE

  # EC2 instance type is c5d.9xlarge.
  C5D_9XLARGE

  # EC2 instance type is c5d.large.
  C5D_LARGE

  # EC2 instance type is c5d.metal.
  C5D_METAL

  # EC2 instance type is c5d.xlarge.
  C5D_XLARGE

  # EC2 instance type is c5n.18xlarge.
  C5N_18XLARGE

  # EC2 instance type is c5n.2xlarge.
  C5N_2XLARGE

  # EC2 instance type is c5n.4xlarge.
  C5N_4XLARGE

  # EC2 instance type is c5n.9xlarge.
  C5N_9XLARGE

  # EC2 instance type is c5n.large.
  C5N_LARGE

  # EC2 instance type is c5n.metal.
  C5N_METAL

  # EC2 instance type is c5n.xlarge.
  C5N_XLARGE

  # EC2 instance type is c5.12xlarge.
  C5_12XLARGE

  # EC2 instance type is c5.18xlarge.
  C5_18XLARGE

  # EC2 instance type is c5.24xlarge.
  C5_24XLARGE

  # EC2 instance type is c5.2xlarge.
  C5_2XLARGE

  # EC2 instance type is c5.4xlarge.
  C5_4XLARGE

  # EC2 instance type is c5.9xlarge.
  C5_9XLARGE

  # EC2 instance type is c5.large.
  C5_LARGE

  # EC2 instance type is c5.metal.
  C5_METAL

  # EC2 instance type is c5.xlarge.
  C5_XLARGE

  # EC2 instance type is c6a.12xlarge.
  C6A_12XLARGE

  # EC2 instance type is c6a.16xlarge.
  C6A_16XLARGE

  # EC2 instance type is c6a.24xlarge.
  C6A_24XLARGE

  # EC2 instance type is c6a.2xlarge.
  C6A_2XLARGE

  # EC2 instance type is c6a.32xlarge.
  C6A_32XLARGE

  # EC2 instance type is c6a.48xlarge.
  C6A_48XLARGE

  # EC2 instance type is c6a.4xlarge.
  C6A_4XLARGE

  # EC2 instance type is c6a.8xlarge.
  C6A_8XLARGE

  # EC2 instance type is c6a.large.
  C6A_LARGE

  # EC2 instance type is c6a.metal.
  C6A_METAL

  # EC2 instance type is c6a.xlarge.
  C6A_XLARGE

  # EC2 instance type is c6gd.12xlarge.
  C6GD_12XLARGE

  # EC2 instance type is c6gd.16xlarge.
  C6GD_16XLARGE

  # EC2 instance type is c6gd.2xlarge.
  C6GD_2XLARGE

  # EC2 instance type is c6gd.4xlarge.
  C6GD_4XLARGE

  # EC2 instance type is c6gd.8xlarge.
  C6GD_8XLARGE

  # EC2 instance type is c6gd.large.
  C6GD_LARGE

  # EC2 instance type is c6gd.medium.
  C6GD_MEDIUM

  # EC2 instance type is c6gd.metal.
  C6GD_METAL

  # EC2 instance type is c6gd.xlarge.
  C6GD_XLARGE

  # EC2 instance type is c6gn.12xlarge.
  C6GN_12XLARGE

  # EC2 instance type is c6gn.16xlarge.
  C6GN_16XLARGE

  # EC2 instance type is c6gn.2xlarge.
  C6GN_2XLARGE

  # EC2 instance type is c6gn.4xlarge.
  C6GN_4XLARGE

  # EC2 instance type is c6gn.8xlarge.
  C6GN_8XLARGE

  # EC2 instance type is c6gn.large.
  C6GN_LARGE

  # EC2 instance type is c6gn.medium.
  C6GN_MEDIUM

  # EC2 instance type is c6gn.xlarge.
  C6GN_XLARGE

  # EC2 instance type is c6g.12xlarge.
  C6G_12XLARGE

  # EC2 instance type is c6g.16xlarge.
  C6G_16XLARGE

  # EC2 instance type is c6g.2xlarge.
  C6G_2XLARGE

  # EC2 instance type is c6g.4xlarge.
  C6G_4XLARGE

  # EC2 instance type is c6g.8xlarge.
  C6G_8XLARGE

  # EC2 instance type is c6g.large.
  C6G_LARGE

  # EC2 instance type is c6g.medium.
  C6G_MEDIUM

  # EC2 instance type is c6g.metal.
  C6G_METAL

  # EC2 instance type is c6g.xlarge.
  C6G_XLARGE

  # EC2 instance type is c6id.12xlarge.
  C6ID_12XLARGE

  # EC2 instance type is c6id.16xlarge.
  C6ID_16XLARGE

  # EC2 instance type is c6id.24xlarge.
  C6ID_24XLARGE

  # EC2 instance type is c6id.2xlarge.
  C6ID_2XLARGE

  # EC2 instance type is c6id.32xlarge.
  C6ID_32XLARGE

  # EC2 instance type is c6id.4xlarge.
  C6ID_4XLARGE

  # EC2 instance type is c6id.8xlarge.
  C6ID_8XLARGE

  # EC2 instance type is c6id.large.
  C6ID_LARGE

  # EC2 instance type is c6id.metal.
  C6ID_METAL

  # EC2 instance type is c6id.xlarge.
  C6ID_XLARGE

  # EC2 instance type is c6in.12xlarge.
  C6IN_12XLARGE

  # EC2 instance type is c6in.16xlarge.
  C6IN_16XLARGE

  # EC2 instance type is c6in.24xlarge.
  C6IN_24XLARGE

  # EC2 instance type is c6in.2xlarge.
  C6IN_2XLARGE

  # EC2 instance type is c6in.32xlarge.
  C6IN_32XLARGE

  # EC2 instance type is c6in.4xlarge.
  C6IN_4XLARGE

  # EC2 instance type is c6in.8xlarge.
  C6IN_8XLARGE

  # EC2 instance type is c6in.large.
  C6IN_LARGE

  # EC2 instance type is c6in.metal.
  C6IN_METAL

  # EC2 instance type is c6in.xlarge.
  C6IN_XLARGE

  # EC2 instance type is c6i.12xlarge.
  C6I_12XLARGE

  # EC2 instance type is c6i.16xlarge.
  C6I_16XLARGE

  # EC2 instance type is c6i.24xlarge.
  C6I_24XLARGE

  # EC2 instance type is c6i.2xlarge.
  C6I_2XLARGE

  # EC2 instance type is c6i.32xlarge.
  C6I_32XLARGE

  # EC2 instance type is c6i.4xlarge.
  C6I_4XLARGE

  # EC2 instance type is c6i.8xlarge.
  C6I_8XLARGE

  # EC2 instance type is c6i.large.
  C6I_LARGE

  # EC2 instance type is c6i.metal.
  C6I_METAL

  # EC2 instance type is c6i.xlarge.
  C6I_XLARGE

  # EC2 instance type is c7gd.12xlarge.
  C7GD_12XLARGE

  # EC2 instance type is c7gd.16xlarge.
  C7GD_16XLARGE

  # EC2 instance type is c7gd.2xlarge.
  C7GD_2XLARGE

  # EC2 instance type is c7gd.4xlarge.
  C7GD_4XLARGE

  # EC2 instance type is c7gd.8xlarge.
  C7GD_8XLARGE

  # EC2 instance type is c7gd.large.
  C7GD_LARGE

  # EC2 instance type is c7gd.medium.
  C7GD_MEDIUM

  # EC2 instance type is c7gd.xlarge.
  C7GD_XLARGE

  # EC2 instance type is c7gn.12xlarge.
  C7GN_12XLARGE

  # EC2 instance type is c7gn.16xlarge.
  C7GN_16XLARGE

  # EC2 instance type is c7gn.2xlarge.
  C7GN_2XLARGE

  # EC2 instance type is c7gn.4xlarge.
  C7GN_4XLARGE

  # EC2 instance type is c7gn.8xlarge.
  C7GN_8XLARGE

  # EC2 instance type is c7gn.large.
  C7GN_LARGE

  # EC2 instance type is c7gn.medium.
  C7GN_MEDIUM

  # EC2 instance type is c7gn.xlarge.
  C7GN_XLARGE

  # EC2 instance type is c7g.12xlarge.
  C7G_12XLARGE

  # EC2 instance type is c7g.16xlarge.
  C7G_16XLARGE

  # EC2 instance type is c7g.2xlarge.
  C7G_2XLARGE

  # EC2 instance type is c7g.4xlarge.
  C7G_4XLARGE

  # EC2 instance type is c7g.8xlarge.
  C7G_8XLARGE

  # EC2 instance type is c7g.large.
  C7G_LARGE

  # EC2 instance type is c7g.medium.
  C7G_MEDIUM

  # EC2 instance type is c7g.metal.
  C7G_METAL

  # EC2 instance type is c7g.xlarge.
  C7G_XLARGE

  # EC2 instance type is c7i.12xlarge.
  C7I_12XLARGE

  # EC2 instance type is c7i.16xlarge.
  C7I_16XLARGE

  # EC2 instance type is c7i.24xlarge.
  C7I_24XLARGE

  # EC2 instance type is c7i.2xlarge.
  C7I_2XLARGE

  # EC2 instance type is c7i.48xlarge.
  C7I_48XLARGE

  # EC2 instance type is c7i.4xlarge.
  C7I_4XLARGE

  # EC2 instance type is c7i.8xlarge.
  C7I_8XLARGE

  # EC2 instance type is c7i.large.
  C7I_LARGE

  # EC2 instance type is c7i.xlarge.
  C7I_XLARGE

  # EC2 instance type is cc1.4xlarge.
  CC1_4XLARGE

  # EC2 instance type is cc2.8xlarge.
  CC2_8XLARGE

  # EC2 instance type is cg1.4xlarge.
  CG1_4XLARGE

  # EC2 instance type is cr1.8xlarge.
  CR1_8XLARGE

  # EC2 instance type is d2.2xlarge.
  D2_2XLARGE

  # EC2 instance type is d2.4xlarge.
  D2_4XLARGE

  # EC2 instance type is d2.8xlarge.
  D2_8XLARGE

  # EC2 instance type is d2.xlarge.
  D2_XLARGE

  # EC2 instance type is d3en.12xlarge.
  D3EN_12XLARGE

  # EC2 instance type is d3en.2xlarge.
  D3EN_2XLARGE

  # EC2 instance type is d3en.4xlarge.
  D3EN_4XLARGE

  # EC2 instance type is d3en.6xlarge.
  D3EN_6XLARGE

  # EC2 instance type is d3en.8xlarge.
  D3EN_8XLARGE

  # EC2 instance type is d3en.xlarge.
  D3EN_XLARGE

  # EC2 instance type is d3.2xlarge.
  D3_2XLARGE

  # EC2 instance type is d3.4xlarge.
  D3_4XLARGE

  # EC2 instance type is d3.8xlarge.
  D3_8XLARGE

  # EC2 instance type is d3.xlarge.
  D3_XLARGE

  # EC2 instance type is dl1.24xlarge.
  DL1_24XLARGE

  # EC2 instance type is f1.16xlarge.
  F1_16XLARGE

  # EC2 instance type is f1.2xlarge.
  F1_2XLARGE

  # EC2 instance type is f1.4xlarge.
  F1_4XLARGE

  # EC2 instance type is g2.2xlarge.
  G2_2XLARGE

  # EC2 instance type is g2.8xlarge.
  G2_8XLARGE

  # EC2 instance type is g3s.xlarge.
  G3S_XLARGE

  # EC2 instance type is g3.16xlarge.
  G3_16XLARGE

  # EC2 instance type is g3.4xlarge.
  G3_4XLARGE

  # EC2 instance type is g3.8xlarge.
  G3_8XLARGE

  # EC2 instance type is g4ad.16xlarge.
  G4AD_16XLARGE

  # EC2 instance type is g4ad.2xlarge.
  G4AD_2XLARGE

  # EC2 instance type is g4ad.4xlarge.
  G4AD_4XLARGE

  # EC2 instance type is g4ad.8xlarge.
  G4AD_8XLARGE

  # EC2 instance type is g4ad.xlarge.
  G4AD_XLARGE

  # EC2 instance type is g4dn.12xlarge.
  G4DN_12XLARGE

  # EC2 instance type is g4dn.16xlarge.
  G4DN_16XLARGE

  # EC2 instance type is g4dn.2xlarge.
  G4DN_2XLARGE

  # EC2 instance type is g4dn.4xlarge.
  G4DN_4XLARGE

  # EC2 instance type is g4dn.8xlarge.
  G4DN_8XLARGE

  # EC2 instance type is g4dn.metal.
  G4DN_METAL

  # EC2 instance type is g4dn.xlarge.
  G4DN_XLARGE

  # EC2 instance type is g5g.16xlarge.
  G5G_16XLARGE

  # EC2 instance type is g5g.2xlarge.
  G5G_2XLARGE

  # EC2 instance type is g5g.4xlarge.
  G5G_4XLARGE

  # EC2 instance type is g5g.8xlarge.
  G5G_8XLARGE

  # EC2 instance type is g5g.metal.
  G5G_METAL

  # EC2 instance type is g5g.xlarge.
  G5G_XLARGE

  # EC2 instance type is g5.12xlarge.
  G5_12XLARGE

  # EC2 instance type is g5.16xlarge.
  G5_16XLARGE

  # EC2 instance type is g5.24xlarge.
  G5_24XLARGE

  # EC2 instance type is g5.2xlarge.
  G5_2XLARGE

  # EC2 instance type is g5.48xlarge.
  G5_48XLARGE

  # EC2 instance type is g5.4xlarge.
  G5_4XLARGE

  # EC2 instance type is g5.8xlarge.
  G5_8XLARGE

  # EC2 instance type is g5.xlarge.
  G5_XLARGE

  # EC2 instance type is h1.16xlarge.
  H1_16XLARGE

  # EC2 instance type is h1.2xlarge.
  H1_2XLARGE

  # EC2 instance type is h1.4xlarge.
  H1_4XLARGE

  # EC2 instance type is h1.8xlarge.
  H1_8XLARGE

  # EC2 instance type is hi1.4xlarge.
  HI1_4XLARGE

  # EC2 instance type is hpc7g.16xlarge.
  HPC7G_16XLARGE

  # EC2 instance type is hpc7g.4xlarge.
  HPC7G_4XLARGE

  # EC2 instance type is hpc7g.8xlarge.
  HPC7G_8XLARGE

  # EC2 instance type is hs1.8xlarge.
  HS1_8XLARGE

  # EC2 instance type is i2.2xlarge.
  I2_2XLARGE

  # EC2 instance type is i2.4xlarge.
  I2_4XLARGE

  # EC2 instance type is i2.8xlarge.
  I2_8XLARGE

  # EC2 instance type is i2.xlarge.
  I2_XLARGE

  # EC2 instance type is i3en.12xlarge.
  I3EN_12XLARGE

  # EC2 instance type is i3en.24xlarge.
  I3EN_24XLARGE

  # EC2 instance type is i3en.2xlarge.
  I3EN_2XLARGE

  # EC2 instance type is i3en.3xlarge.
  I3EN_3XLARGE

  # EC2 instance type is i3en.6xlarge.
  I3EN_6XLARGE

  # EC2 instance type is i3en.large.
  I3EN_LARGE

  # EC2 instance type is i3en.metal.
  I3EN_METAL

  # EC2 instance type is i3en.xlarge.
  I3EN_XLARGE

  # EC2 instance type is i3.16xlarge.
  I3_16XLARGE

  # EC2 instance type is i3.2xlarge.
  I3_2XLARGE

  # EC2 instance type is i3.4xlarge.
  I3_4XLARGE

  # EC2 instance type is i3.8xlarge.
  I3_8XLARGE

  # EC2 instance type is i3.large.
  I3_LARGE

  # EC2 instance type is i3.metal.
  I3_METAL

  # EC2 instance type is i3.xlarge.
  I3_XLARGE

  # EC2 instance type is i4g.16xlarge.
  I4G_16XLARGE

  # EC2 instance type is i4g.2xlarge.
  I4G_2XLARGE

  # EC2 instance type is i4g.4xlarge.
  I4G_4XLARGE

  # EC2 instance type is i4g.8xlarge.
  I4G_8XLARGE

  # EC2 instance type is i4g.large.
  I4G_LARGE

  # EC2 instance type is i4g.xlarge.
  I4G_XLARGE

  # EC2 instance type is i4i.16xlarge.
  I4I_16XLARGE

  # EC2 instance type is i4i.2xlarge.
  I4I_2XLARGE

  # EC2 instance type is i4i.32xlarge.
  I4I_32XLARGE

  # EC2 instance type is i4i.4xlarge.
  I4I_4XLARGE

  # EC2 instance type is i4i.8xlarge.
  I4I_8XLARGE

  # EC2 instance type is i4i.large.
  I4I_LARGE

  # EC2 instance type is i4i.metal.
  I4I_METAL

  # EC2 instance type is i4i.xlarge.
  I4I_XLARGE

  # EC2 instance type is im4gn.16xlarge.
  IM4GN_16XLARGE

  # EC2 instance type is im4gn.2xlarge.
  IM4GN_2XLARGE

  # EC2 instance type is im4gn.4xlarge.
  IM4GN_4XLARGE

  # EC2 instance type is im4gn.8xlarge.
  IM4GN_8XLARGE

  # EC2 instance type is im4gn.large.
  IM4GN_LARGE

  # EC2 instance type is im4gn.xlarge.
  IM4GN_XLARGE

  # EC2 instance type is inf1.24xlarge.
  INF1_24XLARGE

  # EC2 instance type is inf1.2xlarge.
  INF1_2XLARGE

  # EC2 instance type is inf1.6xlarge.
  INF1_6XLARGE

  # EC2 instance type is inf1.xlarge.
  INF1_XLARGE

  # EC2 instance type is inf2.24xlarge.
  INF2_24XLARGE

  # EC2 instance type is inf2.48xlarge.
  INF2_48XLARGE

  # EC2 instance type is inf2.8xlarge.
  INF2_8XLARGE

  # EC2 instance type is inf2.xlarge.
  INF2_XLARGE

  # EC2 instance type is is4gen.2xlarge.
  IS4GEN_2XLARGE

  # EC2 instance type is is4gen.4xlarge.
  IS4GEN_4XLARGE

  # EC2 instance type is is4gen.8xlarge.
  IS4GEN_8XLARGE

  # EC2 instance type is is4gen.large.
  IS4GEN_LARGE

  # EC2 instance type is is4gen.medium.
  IS4GEN_MEDIUM

  # EC2 instance type is is4gen.xlarge.
  IS4GEN_XLARGE

  # EC2 instance type is m1.large.
  M1_LARGE

  # EC2 instance type is m1.medium.
  M1_MEDIUM

  # EC2 instance type is m1.small.
  M1_SMALL

  # EC2 instance type is m1.xlarge.
  M1_XLARGE

  # EC2 instance type is m2.2xlarge.
  M2_2XLARGE

  # EC2 instance type is m2.4xlarge.
  M2_4XLARGE

  # EC2 instance type is m2.xlarge.
  M2_XLARGE

  # EC2 instance type is m3.2xlarge.
  M3_2XLARGE

  # EC2 instance type is m3.large.
  M3_LARGE

  # EC2 instance type is m3.medium.
  M3_MEDIUM

  # EC2 instance type is m3.xlarge.
  M3_XLARGE

  # EC2 instance type is m4.10xlarge.
  M4_10XLARGE

  # EC2 instance type is m4.16xlarge.
  M4_16XLARGE

  # EC2 instance type is m4.2xlarge.
  M4_2XLARGE

  # EC2 instance type is m4.4xlarge.
  M4_4XLARGE

  # EC2 instance type is m4.large.
  M4_LARGE

  # EC2 instance type is m4.xlarge.
  M4_XLARGE

  # EC2 instance type is m5ad.12xlarge.
  M5AD_12XLARGE

  # EC2 instance type is m5ad.16xlarge.
  M5AD_16XLARGE

  # EC2 instance type is m5ad.24xlarge.
  M5AD_24XLARGE

  # EC2 instance type is m5ad.2xlarge.
  M5AD_2XLARGE

  # EC2 instance type is m5ad.4xlarge.
  M5AD_4XLARGE

  # EC2 instance type is m5ad.8xlarge.
  M5AD_8XLARGE

  # EC2 instance type is m5ad.large.
  M5AD_LARGE

  # EC2 instance type is m5ad.xlarge.
  M5AD_XLARGE

  # EC2 instance type is m5a.12xlarge.
  M5A_12XLARGE

  # EC2 instance type is m5a.16xlarge.
  M5A_16XLARGE

  # EC2 instance type is m5a.24xlarge.
  M5A_24XLARGE

  # EC2 instance type is m5a.2xlarge.
  M5A_2XLARGE

  # EC2 instance type is m5a.4xlarge.
  M5A_4XLARGE

  # EC2 instance type is m5a.8xlarge.
  M5A_8XLARGE

  # EC2 instance type is m5a.large.
  M5A_LARGE

  # EC2 instance type is m5a.xlarge.
  M5A_XLARGE

  # EC2 instance type is m5dn.12xlarge.
  M5DN_12XLARGE

  # EC2 instance type is m5dn.16xlarge.
  M5DN_16XLARGE

  # EC2 instance type is m5dn.24xlarge.
  M5DN_24XLARGE

  # EC2 instance type is m5dn.2xlarge.
  M5DN_2XLARGE

  # EC2 instance type is m5dn.4xlarge.
  M5DN_4XLARGE

  # EC2 instance type is m5dn.8xlarge.
  M5DN_8XLARGE

  # EC2 instance type is m5dn.large.
  M5DN_LARGE

  # EC2 instance type is m5dn.metal.
  M5DN_METAL

  # EC2 instance type is m5dn.xlarge.
  M5DN_XLARGE

  # EC2 instance type is m5d.12xlarge.
  M5D_12XLARGE

  # EC2 instance type is m5d.16xlarge.
  M5D_16XLARGE

  # EC2 instance type is m5d.24xlarge.
  M5D_24XLARGE

  # EC2 instance type is m5d.2xlarge.
  M5D_2XLARGE

  # EC2 instance type is m5d.4xlarge.
  M5D_4XLARGE

  # EC2 instance type is m5d.8xlarge.
  M5D_8XLARGE

  # EC2 instance type is m5d.large.
  M5D_LARGE

  # EC2 instance type is m5d.metal.
  M5D_METAL

  # EC2 instance type is m5d.xlarge.
  M5D_XLARGE

  # EC2 instance type is m5n.12xlarge.
  M5N_12XLARGE

  # EC2 instance type is m5n.16xlarge.
  M5N_16XLARGE

  # EC2 instance type is m5n.24xlarge.
  M5N_24XLARGE

  # EC2 instance type is m5n.2xlarge.
  M5N_2XLARGE

  # EC2 instance type is m5n.4xlarge.
  M5N_4XLARGE

  # EC2 instance type is m5n.8xlarge.
  M5N_8XLARGE

  # EC2 instance type is m5n.large.
  M5N_LARGE

  # EC2 instance type is m5n.metal.
  M5N_METAL

  # EC2 instance type is m5n.xlarge.
  M5N_XLARGE

  # EC2 instance type is m5zn.12xlarge.
  M5ZN_12XLARGE

  # EC2 instance type is m5zn.2xlarge.
  M5ZN_2XLARGE

  # EC2 instance type is m5zn.3xlarge.
  M5ZN_3XLARGE

  # EC2 instance type is m5zn.6xlarge.
  M5ZN_6XLARGE

  # EC2 instance type is m5zn.large.
  M5ZN_LARGE

  # EC2 instance type is m5zn.metal.
  M5ZN_METAL

  # EC2 instance type is m5zn.xlarge.
  M5ZN_XLARGE

  # EC2 instance type is m5.12xlarge.
  M5_12XLARGE

  # EC2 instance type is m5.16xlarge.
  M5_16XLARGE

  # EC2 instance type is m5.24xlarge.
  M5_24XLARGE

  # EC2 instance type is m5.2xlarge.
  M5_2XLARGE

  # EC2 instance type is m5.4xlarge.
  M5_4XLARGE

  # EC2 instance type is m5.8xlarge.
  M5_8XLARGE

  # EC2 instance type is m5.large.
  M5_LARGE

  # EC2 instance type is m5.metal.
  M5_METAL

  # EC2 instance type is m5.xlarge.
  M5_XLARGE

  # EC2 instance type is m6a.12xlarge.
  M6A_12XLARGE

  # EC2 instance type is m6a.16xlarge.
  M6A_16XLARGE

  # EC2 instance type is m6a.24xlarge.
  M6A_24XLARGE

  # EC2 instance type is m6a.2xlarge.
  M6A_2XLARGE

  # EC2 instance type is m6a.32xlarge.
  M6A_32XLARGE

  # EC2 instance type is m6a.48xlarge.
  M6A_48XLARGE

  # EC2 instance type is m6a.4xlarge.
  M6A_4XLARGE

  # EC2 instance type is m6a.8xlarge.
  M6A_8XLARGE

  # EC2 instance type is m6a.large.
  M6A_LARGE

  # EC2 instance type is m6a.metal.
  M6A_METAL

  # EC2 instance type is m6a.xlarge.
  M6A_XLARGE

  # EC2 instance type is m6gd.12xlarge.
  M6GD_12XLARGE

  # EC2 instance type is m6gd.16xlarge.
  M6GD_16XLARGE

  # EC2 instance type is m6gd.2xlarge.
  M6GD_2XLARGE

  # EC2 instance type is m6gd.4xlarge.
  M6GD_4XLARGE

  # EC2 instance type is m6gd.8xlarge.
  M6GD_8XLARGE

  # EC2 instance type is m6gd.large.
  M6GD_LARGE

  # EC2 instance type is m6gd.medium.
  M6GD_MEDIUM

  # EC2 instance type is m6gd.metal.
  M6GD_METAL

  # EC2 instance type is m6gd.xlarge.
  M6GD_XLARGE

  # EC2 instance type is m6g.12xlarge.
  M6G_12XLARGE

  # EC2 instance type is m6g.16xlarge.
  M6G_16XLARGE

  # EC2 instance type is m6g.2xlarge.
  M6G_2XLARGE

  # EC2 instance type is m6g.4xlarge.
  M6G_4XLARGE

  # EC2 instance type is m6g.8xlarge.
  M6G_8XLARGE

  # EC2 instance type is m6g.large.
  M6G_LARGE

  # EC2 instance type is m6g.medium.
  M6G_MEDIUM

  # EC2 instance type is m6g.metal.
  M6G_METAL

  # EC2 instance type is m6g.xlarge.
  M6G_XLARGE

  # EC2 instance type is m6idn.12xlarge.
  M6IDN_12XLARGE

  # EC2 instance type is m6idn.16xlarge.
  M6IDN_16XLARGE

  # EC2 instance type is m6idn.24xlarge.
  M6IDN_24XLARGE

  # EC2 instance type is m6idn.2xlarge.
  M6IDN_2XLARGE

  # EC2 instance type is m6idn.32xlarge.
  M6IDN_32XLARGE

  # EC2 instance type is m6idn.4xlarge.
  M6IDN_4XLARGE

  # EC2 instance type is m6idn.8xlarge.
  M6IDN_8XLARGE

  # EC2 instance type is m6idn.large.
  M6IDN_LARGE

  # EC2 instance type is m6idn.metal.
  M6IDN_METAL

  # EC2 instance type is m6idn.xlarge.
  M6IDN_XLARGE

  # EC2 instance type is m6id.12xlarge.
  M6ID_12XLARGE

  # EC2 instance type is m6id.16xlarge.
  M6ID_16XLARGE

  # EC2 instance type is m6id.24xlarge.
  M6ID_24XLARGE

  # EC2 instance type is m6id.2xlarge.
  M6ID_2XLARGE

  # EC2 instance type is m6id.32xlarge.
  M6ID_32XLARGE

  # EC2 instance type is m6id.4xlarge.
  M6ID_4XLARGE

  # EC2 instance type is m6id.8xlarge.
  M6ID_8XLARGE

  # EC2 instance type is m6id.large.
  M6ID_LARGE

  # EC2 instance type is m6id.metal.
  M6ID_METAL

  # EC2 instance type is m6id.xlarge.
  M6ID_XLARGE

  # EC2 instance type is m6in.12xlarge.
  M6IN_12XLARGE

  # EC2 instance type is m6in.16xlarge.
  M6IN_16XLARGE

  # EC2 instance type is m6in.24xlarge.
  M6IN_24XLARGE

  # EC2 instance type is m6in.2xlarge.
  M6IN_2XLARGE

  # EC2 instance type is m6in.32xlarge.
  M6IN_32XLARGE

  # EC2 instance type is m6in.4xlarge.
  M6IN_4XLARGE

  # EC2 instance type is m6in.8xlarge.
  M6IN_8XLARGE

  # EC2 instance type is m6in.large.
  M6IN_LARGE

  # EC2 instance type is m6in.metal.
  M6IN_METAL

  # EC2 instance type is m6in.xlarge.
  M6IN_XLARGE

  # EC2 instance type is m6i.12xlarge.
  M6I_12XLARGE

  # EC2 instance type is m6i.16xlarge.
  M6I_16XLARGE

  # EC2 instance type is m6i.24xlarge.
  M6I_24XLARGE

  # EC2 instance type is m6i.2xlarge.
  M6I_2XLARGE

  # EC2 instance type is m6i.32xlarge.
  M6I_32XLARGE

  # EC2 instance type is m6i.4xlarge.
  M6I_4XLARGE

  # EC2 instance type is m6i.8xlarge.
  M6I_8XLARGE

  # EC2 instance type is m6i.large.
  M6I_LARGE

  # EC2 instance type is m6i.metal.
  M6I_METAL

  # EC2 instance type is m6i.xlarge.
  M6I_XLARGE

  # EC2 instance type is m7a.12xlarge.
  M7A_12XLARGE

  # EC2 instance type is m7a.16xlarge.
  M7A_16XLARGE

  # EC2 instance type is m7a.24xlarge.
  M7A_24XLARGE

  # EC2 instance type is m7a.2xlarge.
  M7A_2XLARGE

  # EC2 instance type is m7a.32xlarge.
  M7A_32XLARGE

  # EC2 instance type is m7a.48xlarge.
  M7A_48XLARGE

  # EC2 instance type is m7a.4xlarge.
  M7A_4XLARGE

  # EC2 instance type is m7a.8xlarge.
  M7A_8XLARGE

  # EC2 instance type is m7a.large.
  M7A_LARGE

  # EC2 instance type is m7a.medium.
  M7A_MEDIUM

  # EC2 instance type is m7a.metal-48xl.
  M7A_METAL_48XL

  # EC2 instance type is m7a.xlarge.
  M7A_XLARGE

  # EC2 instance type is m7gd.12xlarge.
  M7GD_12XLARGE

  # EC2 instance type is m7gd.16xlarge.
  M7GD_16XLARGE

  # EC2 instance type is m7gd.2xlarge.
  M7GD_2XLARGE

  # EC2 instance type is m7gd.4xlarge.
  M7GD_4XLARGE

  # EC2 instance type is m7gd.8xlarge.
  M7GD_8XLARGE

  # EC2 instance type is m7gd.large.
  M7GD_LARGE

  # EC2 instance type is m7gd.medium.
  M7GD_MEDIUM

  # EC2 instance type is m7gd.xlarge.
  M7GD_XLARGE

  # EC2 instance type is m7g.12xlarge.
  M7G_12XLARGE

  # EC2 instance type is m7g.16xlarge.
  M7G_16XLARGE

  # EC2 instance type is m7g.2xlarge.
  M7G_2XLARGE

  # EC2 instance type is m7g.4xlarge.
  M7G_4XLARGE

  # EC2 instance type is m7g.8xlarge.
  M7G_8XLARGE

  # EC2 instance type is m7g.large.
  M7G_LARGE

  # EC2 instance type is m7g.medium.
  M7G_MEDIUM

  # EC2 instance type is m7g.metal.
  M7G_METAL

  # EC2 instance type is m7g.xlarge.
  M7G_XLARGE

  # EC2 instance type is m7i.12xlarge.
  M7I_12XLARGE

  # EC2 instance type is m7i.16xlarge.
  M7I_16XLARGE

  # EC2 instance type is m7i.24xlarge.
  M7I_24XLARGE

  # EC2 instance type is m7i.2xlarge.
  M7I_2XLARGE

  # EC2 instance type is m7i.48xlarge.
  M7I_48XLARGE

  # EC2 instance type is m7i.4xlarge.
  M7I_4XLARGE

  # EC2 instance type is m7i.8xlarge.
  M7I_8XLARGE

  # EC2 instance type is m7i-flex.2xlarge.
  M7I_FLEX_2XLARGE

  # EC2 instance type is m7i-flex.4xlarge.
  M7I_FLEX_4XLARGE

  # EC2 instance type is m7i-flex.8xlarge.
  M7I_FLEX_8XLARGE

  # EC2 instance type is m7i-flex.large.
  M7I_FLEX_LARGE

  # EC2 instance type is m7i-flex.xlarge.
  M7I_FLEX_XLARGE

  # EC2 instance type is m7i.large.
  M7I_LARGE

  # EC2 instance type is m7i.xlarge.
  M7I_XLARGE

  # EC2 instance type is mac1.metal.
  MAC1_METAL

  # EC2 instance type is mac2.metal.
  MAC2_METAL

  # EC2 instance type is .
  NOT_SPECIFIED

  # EC2 instance type is p2.16xlarge.
  P2_16XLARGE

  # EC2 instance type is p2.8xlarge.
  P2_8XLARGE

  # EC2 instance type is p2.xlarge.
  P2_XLARGE

  # EC2 instance type is p3dn.24xlarge.
  P3DN_24XLARGE

  # EC2 instance type is p3.16xlarge.
  P3_16XLARGE

  # EC2 instance type is p3.2xlarge.
  P3_2XLARGE

  # EC2 instance type is p3.8xlarge.
  P3_8XLARGE

  # EC2 instance type is p4d.24xlarge.
  P4D_24XLARGE

  # EC2 instance type is p5.48xlarge.
  P5_48XLARGE

  # EC2 instance type is r3.2xlarge.
  R3_2XLARGE

  # EC2 instance type is r3.4xlarge.
  R3_4XLARGE

  # EC2 instance type is r3.8xlarge.
  R3_8XLARGE

  # EC2 instance type is r3.large.
  R3_LARGE

  # EC2 instance type is r3.xlarge.
  R3_XLARGE

  # EC2 instance type is r4.16xlarge.
  R4_16XLARGE

  # EC2 instance type is r4.2xlarge.
  R4_2XLARGE

  # EC2 instance type is r4.4xlarge.
  R4_4XLARGE

  # EC2 instance type is r4.8xlarge.
  R4_8XLARGE

  # EC2 instance type is r4.large.
  R4_LARGE

  # EC2 instance type is r4.xlarge.
  R4_XLARGE

  # EC2 instance type is r5ad.12xlarge.
  R5AD_12XLARGE

  # EC2 instance type is r5ad.16xlarge.
  R5AD_16XLARGE

  # EC2 instance type is r5ad.24xlarge.
  R5AD_24XLARGE

  # EC2 instance type is r5ad.2xlarge.
  R5AD_2XLARGE

  # EC2 instance type is r5ad.4xlarge.
  R5AD_4XLARGE

  # EC2 instance type is r5ad.8xlarge.
  R5AD_8XLARGE

  # EC2 instance type is r5ad.large.
  R5AD_LARGE

  # EC2 instance type is r5ad.xlarge.
  R5AD_XLARGE

  # EC2 instance type is r5a.12xlarge.
  R5A_12XLARGE

  # EC2 instance type is r5a.16xlarge.
  R5A_16XLARGE

  # EC2 instance type is r5a.24xlarge.
  R5A_24XLARGE

  # EC2 instance type is r5a.2xlarge.
  R5A_2XLARGE

  # EC2 instance type is r5a.4xlarge.
  R5A_4XLARGE

  # EC2 instance type is r5a.8xlarge.
  R5A_8XLARGE

  # EC2 instance type is r5a.large.
  R5A_LARGE

  # EC2 instance type is r5a.xlarge.
  R5A_XLARGE

  # EC2 instance type is r5b.12xlarge.
  R5B_12XLARGE

  # EC2 instance type is r5b.16xlarge.
  R5B_16XLARGE

  # EC2 instance type is r5b.24xlarge.
  R5B_24XLARGE

  # EC2 instance type is r5b.2xlarge.
  R5B_2XLARGE

  # EC2 instance type is r5b.4xlarge.
  R5B_4XLARGE

  # EC2 instance type is r5b.8xlarge.
  R5B_8XLARGE

  # EC2 instance type is r5b.large.
  R5B_LARGE

  # EC2 instance type is r5b.metal.
  R5B_METAL

  # EC2 instance type is r5b.xlarge.
  R5B_XLARGE

  # EC2 instance type is r5dn.12xlarge.
  R5DN_12XLARGE

  # EC2 instance type is r5dn.16xlarge.
  R5DN_16XLARGE

  # EC2 instance type is r5dn.24xlarge.
  R5DN_24XLARGE

  # EC2 instance type is r5dn.2xlarge.
  R5DN_2XLARGE

  # EC2 instance type is r5dn.4xlarge.
  R5DN_4XLARGE

  # EC2 instance type is r5dn.8xlarge.
  R5DN_8XLARGE

  # EC2 instance type is r5dn.large.
  R5DN_LARGE

  # EC2 instance type is r5dn.metal.
  R5DN_METAL

  # EC2 instance type is r5dn.xlarge.
  R5DN_XLARGE

  # EC2 instance type is r5d.12xlarge.
  R5D_12XLARGE

  # EC2 instance type is r5d.16xlarge.
  R5D_16XLARGE

  # EC2 instance type is r5d.24xlarge.
  R5D_24XLARGE

  # EC2 instance type is r5d.2xlarge.
  R5D_2XLARGE

  # EC2 instance type is r5d.4xlarge.
  R5D_4XLARGE

  # EC2 instance type is r5d.8xlarge.
  R5D_8XLARGE

  # EC2 instance type is r5d.large.
  R5D_LARGE

  # EC2 instance type is r5d.metal.
  R5D_METAL

  # EC2 instance type is r5d.xlarge.
  R5D_XLARGE

  # EC2 instance type is r5n.12xlarge.
  R5N_12XLARGE

  # EC2 instance type is r5n.16xlarge.
  R5N_16XLARGE

  # EC2 instance type is r5n.24xlarge.
  R5N_24XLARGE

  # EC2 instance type is r5n.2xlarge.
  R5N_2XLARGE

  # EC2 instance type is r5n.4xlarge.
  R5N_4XLARGE

  # EC2 instance type is r5n.8xlarge.
  R5N_8XLARGE

  # EC2 instance type is r5n.large.
  R5N_LARGE

  # EC2 instance type is r5n.metal.
  R5N_METAL

  # EC2 instance type is r5n.xlarge.
  R5N_XLARGE

  # EC2 instance type is r5.12xlarge.
  R5_12XLARGE

  # EC2 instance type is r5.16xlarge.
  R5_16XLARGE

  # EC2 instance type is r5.24xlarge.
  R5_24XLARGE

  # EC2 instance type is r5.2xlarge.
  R5_2XLARGE

  # EC2 instance type is r5.4xlarge.
  R5_4XLARGE

  # EC2 instance type is r5.8xlarge.
  R5_8XLARGE

  # EC2 instance type is r5.large.
  R5_LARGE

  # EC2 instance type is r5.metal.
  R5_METAL

  # EC2 instance type is r5.xlarge.
  R5_XLARGE

  # EC2 instance type is r6a.12xlarge.
  R6A_12XLARGE

  # EC2 instance type is r6a.16xlarge.
  R6A_16XLARGE

  # EC2 instance type is r6a.24xlarge.
  R6A_24XLARGE

  # EC2 instance type is r6a.2xlarge.
  R6A_2XLARGE

  # EC2 instance type is r6a.32xlarge.
  R6A_32XLARGE

  # EC2 instance type is r6a.48xlarge.
  R6A_48XLARGE

  # EC2 instance type is r6a.4xlarge.
  R6A_4XLARGE

  # EC2 instance type is r6a.8xlarge.
  R6A_8XLARGE

  # EC2 instance type is r6a.large.
  R6A_LARGE

  # EC2 instance type is r6a.metal.
  R6A_METAL

  # EC2 instance type is r6a.xlarge.
  R6A_XLARGE

  # EC2 instance type is r6gd.12xlarge.
  R6GD_12XLARGE

  # EC2 instance type is r6gd.16xlarge.
  R6GD_16XLARGE

  # EC2 instance type is r6gd.2xlarge.
  R6GD_2XLARGE

  # EC2 instance type is r6gd.4xlarge.
  R6GD_4XLARGE

  # EC2 instance type is r6gd.8xlarge.
  R6GD_8XLARGE

  # EC2 instance type is r6gd.large.
  R6GD_LARGE

  # EC2 instance type is r6gd.medium.
  R6GD_MEDIUM

  # EC2 instance type is r6gd.metal.
  R6GD_METAL

  # EC2 instance type is r6gd.xlarge.
  R6GD_XLARGE

  # EC2 instance type is r6g.12xlarge.
  R6G_12XLARGE

  # EC2 instance type is r6g.16xlarge.
  R6G_16XLARGE

  # EC2 instance type is r6g.2xlarge.
  R6G_2XLARGE

  # EC2 instance type is r6g.4xlarge.
  R6G_4XLARGE

  # EC2 instance type is r6g.8xlarge.
  R6G_8XLARGE

  # EC2 instance type is r6g.large.
  R6G_LARGE

  # EC2 instance type is r6g.medium.
  R6G_MEDIUM

  # EC2 instance type is r6g.metal.
  R6G_METAL

  # EC2 instance type is r6g.xlarge.
  R6G_XLARGE

  # EC2 instance type is r6idn.12xlarge.
  R6IDN_12XLARGE

  # EC2 instance type is r6idn.16xlarge.
  R6IDN_16XLARGE

  # EC2 instance type is r6idn.24xlarge.
  R6IDN_24XLARGE

  # EC2 instance type is r6idn.2xlarge.
  R6IDN_2XLARGE

  # EC2 instance type is r6idn.32xlarge.
  R6IDN_32XLARGE

  # EC2 instance type is r6idn.4xlarge.
  R6IDN_4XLARGE

  # EC2 instance type is r6idn.8xlarge.
  R6IDN_8XLARGE

  # EC2 instance type is r6idn.large.
  R6IDN_LARGE

  # EC2 instance type is r6idn.metal.
  R6IDN_METAL

  # EC2 instance type is r6idn.xlarge.
  R6IDN_XLARGE

  # EC2 instance type is r6id.12xlarge.
  R6ID_12XLARGE

  # EC2 instance type is r6id.16xlarge.
  R6ID_16XLARGE

  # EC2 instance type is r6id.24xlarge.
  R6ID_24XLARGE

  # EC2 instance type is r6id.2xlarge.
  R6ID_2XLARGE

  # EC2 instance type is r6id.32xlarge.
  R6ID_32XLARGE

  # EC2 instance type is r6id.4xlarge.
  R6ID_4XLARGE

  # EC2 instance type is r6id.8xlarge.
  R6ID_8XLARGE

  # EC2 instance type is r6id.large.
  R6ID_LARGE

  # EC2 instance type is r6id.metal.
  R6ID_METAL

  # EC2 instance type is r6id.xlarge.
  R6ID_XLARGE

  # EC2 instance type is r6in.12xlarge.
  R6IN_12XLARGE

  # EC2 instance type is r6in.16xlarge.
  R6IN_16XLARGE

  # EC2 instance type is r6in.24xlarge.
  R6IN_24XLARGE

  # EC2 instance type is r6in.2xlarge.
  R6IN_2XLARGE

  # EC2 instance type is r6in.32xlarge.
  R6IN_32XLARGE

  # EC2 instance type is r6in.4xlarge.
  R6IN_4XLARGE

  # EC2 instance type is r6in.8xlarge.
  R6IN_8XLARGE

  # EC2 instance type is r6in.large.
  R6IN_LARGE

  # EC2 instance type is r6in.metal.
  R6IN_METAL

  # EC2 instance type is r6in.xlarge.
  R6IN_XLARGE

  # EC2 instance type is r6i.12xlarge.
  R6I_12XLARGE

  # EC2 instance type is r6i.16xlarge.
  R6I_16XLARGE

  # EC2 instance type is r6i.24xlarge.
  R6I_24XLARGE

  # EC2 instance type is r6i.2xlarge.
  R6I_2XLARGE

  # EC2 instance type is r6i.32xlarge.
  R6I_32XLARGE

  # EC2 instance type is r6i.4xlarge.
  R6I_4XLARGE

  # EC2 instance type is r6i.8xlarge.
  R6I_8XLARGE

  # EC2 instance type is r6i.large.
  R6I_LARGE

  # EC2 instance type is r6i.metal.
  R6I_METAL

  # EC2 instance type is r6i.xlarge.
  R6I_XLARGE

  # EC2 instance type is r7a.12xlarge.
  R7A_12XLARGE

  # EC2 instance type is r7a.16xlarge.
  R7A_16XLARGE

  # EC2 instance type is r7a.24xlarge.
  R7A_24XLARGE

  # EC2 instance type is r7a.2xlarge.
  R7A_2XLARGE

  # EC2 instance type is r7a.32xlarge.
  R7A_32XLARGE

  # EC2 instance type is r7a.48xlarge.
  R7A_48XLARGE

  # EC2 instance type is r7a.4xlarge.
  R7A_4XLARGE

  # EC2 instance type is r7a.8xlarge.
  R7A_8XLARGE

  # EC2 instance type is r7a.large.
  R7A_LARGE

  # EC2 instance type is r7a.medium.
  R7A_MEDIUM

  # EC2 instance type is r7a.xlarge.
  R7A_XLARGE

  # EC2 instance type is r7gd.12xlarge.
  R7GD_12XLARGE

  # EC2 instance type is r7gd.16xlarge.
  R7GD_16XLARGE

  # EC2 instance type is r7gd.2xlarge.
  R7GD_2XLARGE

  # EC2 instance type is r7gd.4xlarge.
  R7GD_4XLARGE

  # EC2 instance type is r7gd.8xlarge.
  R7GD_8XLARGE

  # EC2 instance type is r7gd.large.
  R7GD_LARGE

  # EC2 instance type is r7gd.medium.
  R7GD_MEDIUM

  # EC2 instance type is r7gd.xlarge.
  R7GD_XLARGE

  # EC2 instance type is r7g.12xlarge.
  R7G_12XLARGE

  # EC2 instance type is r7g.16xlarge.
  R7G_16XLARGE

  # EC2 instance type is r7g.2xlarge.
  R7G_2XLARGE

  # EC2 instance type is r7g.4xlarge.
  R7G_4XLARGE

  # EC2 instance type is r7g.8xlarge.
  R7G_8XLARGE

  # EC2 instance type is r7g.large.
  R7G_LARGE

  # EC2 instance type is r7g.medium.
  R7G_MEDIUM

  # EC2 instance type is r7g.metal.
  R7G_METAL

  # EC2 instance type is r7g.xlarge.
  R7G_XLARGE

  # EC2 instance type is r7iz.12xlarge.
  R7IZ_12XLARGE

  # EC2 instance type is r7iz.16xlarge.
  R7IZ_16XLARGE

  # EC2 instance type is r7iz.2xlarge.
  R7IZ_2XLARGE

  # EC2 instance type is r7iz.32xlarge.
  R7IZ_32XLARGE

  # EC2 instance type is r7iz.4xlarge.
  R7IZ_4XLARGE

  # EC2 instance type is r7iz.8xlarge.
  R7IZ_8XLARGE

  # EC2 instance type is r7iz.large.
  R7IZ_LARGE

  # EC2 instance type is r7iz.xlarge.
  R7IZ_XLARGE

  # EC2 instance type is t1.micro.
  T1_MICRO

  # EC2 instance type is t2.2xlarge.
  T2_2XLARGE

  # EC2 instance type is t2.large.
  T2_LARGE

  # EC2 instance type is t2.medium.
  T2_MEDIUM

  # EC2 instance type is t2.micro.
  T2_MICRO

  # EC2 instance type is t2.nano.
  T2_NANO

  # EC2 instance type is t2.small.
  T2_SMALL

  # EC2 instance type is t2.xlarge.
  T2_XLARGE

  # EC2 instance type is t3a.2xlarge.
  T3A_2XLARGE

  # EC2 instance type is t3a.large.
  T3A_LARGE

  # EC2 instance type is t3a.medium.
  T3A_MEDIUM

  # EC2 instance type is t3a.micro.
  T3A_MICRO

  # EC2 instance type is t3a.nano.
  T3A_NANO

  # EC2 instance type is t3a.small.
  T3A_SMALL

  # EC2 instance type is t3a.xlarge.
  T3A_XLARGE

  # EC2 instance type is t3.2xlarge.
  T3_2XLARGE

  # EC2 instance type is t3.large.
  T3_LARGE

  # EC2 instance type is t3.medium.
  T3_MEDIUM

  # EC2 instance type is t3.micro.
  T3_MICRO

  # EC2 instance type is t3.nano.
  T3_NANO

  # EC2 instance type is t3.small.
  T3_SMALL

  # EC2 instance type is t3.xlarge.
  T3_XLARGE

  # EC2 instance type is t4g.2xlarge.
  T4G_2XLARGE

  # EC2 instance type is t4g.large.
  T4G_LARGE

  # EC2 instance type is t4g.medium.
  T4G_MEDIUM

  # EC2 instance type is t4g.micro.
  T4G_MICRO

  # EC2 instance type is t4g.nano.
  T4G_NANO

  # EC2 instance type is t4g.small.
  T4G_SMALL

  # EC2 instance type is t4g.xlarge.
  T4G_XLARGE

  # EC2 instance type is trn1n.32xlarge.
  TRN1N_32XLARGE

  # EC2 instance type is trn1.2xlarge.
  TRN1_2XLARGE

  # EC2 instance type is trn1.32xlarge.
  TRN1_32XLARGE

  # EC2 instance type is unknown.
  UNKNOWN

  # EC2 instance type is u-12tb1.112xlarge.
  U_12TB1_112XLARGE

  # EC2 instance type is u-12tb1.metal.
  U_12TB1_METAL

  # EC2 instance type is u-18tb1.112xlarge.
  U_18TB1_112XLARGE

  # EC2 instance type is u-18tb1.metal.
  U_18TB1_METAL

  # EC2 instance type is u-24tb1.112xlarge.
  U_24TB1_112XLARGE

  # EC2 instance type is u-24tb1.metal.
  U_24TB1_METAL

  # EC2 instance type is u-3tb1.56xlarge.
  U_3TB1_56XLARGE

  # EC2 instance type is u-6tb1.112xlarge.
  U_6TB1_112XLARGE

  # EC2 instance type is u-6tb1.56xlarge.
  U_6TB1_56XLARGE

  # EC2 instance type is u-6tb1.metal.
  U_6TB1_METAL

  # EC2 instance type is u-9tb1.112xlarge.
  U_9TB1_112XLARGE

  # EC2 instance type is u-9tb1.metal.
  U_9TB1_METAL

  # EC2 instance type is vt1.24xlarge.
  VT1_24XLARGE

  # EC2 instance type is vt1.3xlarge.
  VT1_3XLARGE

  # EC2 instance type is vt1.6xlarge.
  VT1_6XLARGE

  # EC2 instance type is x1e.16xlarge.
  X1E_16XLARGE

  # EC2 instance type is x1e.2xlarge.
  X1E_2XLARGE

  # EC2 instance type is x1e.32xlarge.
  X1E_32XLARGE

  # EC2 instance type is x1e.4xlarge.
  X1E_4XLARGE

  # EC2 instance type is x1e.8xlarge.
  X1E_8XLARGE

  # EC2 instance type is x1e.xlarge.
  X1E_XLARGE

  # EC2 instance type is x1.16xlarge.
  X1_16XLARGE

  # EC2 instance type is x1.32xlarge.
  X1_32XLARGE

  # EC2 instance type is x2gd.12xlarge.
  X2GD_12XLARGE

  # EC2 instance type is x2gd.16xlarge.
  X2GD_16XLARGE

  # EC2 instance type is x2gd.2xlarge.
  X2GD_2XLARGE

  # EC2 instance type is x2gd.4xlarge.
  X2GD_4XLARGE

  # EC2 instance type is x2gd.8xlarge.
  X2GD_8XLARGE

  # EC2 instance type is x2gd.large.
  X2GD_LARGE

  # EC2 instance type is x2gd.medium.
  X2GD_MEDIUM

  # EC2 instance type is x2gd.metal.
  X2GD_METAL

  # EC2 instance type is x2gd.xlarge.
  X2GD_XLARGE

  # EC2 instance type is x2idn.16xlarge.
  X2IDN_16XLARGE

  # EC2 instance type is x2idn.24xlarge.
  X2IDN_24XLARGE

  # EC2 instance type is x2idn.32xlarge.
  X2IDN_32XLARGE

  # EC2 instance type is x2idn.metal.
  X2IDN_METAL

  # EC2 instance type is x2iedn.16xlarge.
  X2IEDN_16XLARGE

  # EC2 instance type is x2iedn.24xlarge.
  X2IEDN_24XLARGE

  # EC2 instance type is x2iedn.2xlarge.
  X2IEDN_2XLARGE

  # EC2 instance type is x2iedn.32xlarge.
  X2IEDN_32XLARGE

  # EC2 instance type is x2iedn.4xlarge.
  X2IEDN_4XLARGE

  # EC2 instance type is x2iedn.8xlarge.
  X2IEDN_8XLARGE

  # EC2 instance type is x2iedn.metal.
  X2IEDN_METAL

  # EC2 instance type is x2iedn.xlarge.
  X2IEDN_XLARGE

  # EC2 instance type is x2iezn.12xlarge.
  X2IEZN_12XLARGE

  # EC2 instance type is x2iezn.2xlarge.
  X2IEZN_2XLARGE

  # EC2 instance type is x2iezn.4xlarge.
  X2IEZN_4XLARGE

  # EC2 instance type is x2iezn.6xlarge.
  X2IEZN_6XLARGE

  # EC2 instance type is x2iezn.8xlarge.
  X2IEZN_8XLARGE

  # EC2 instance type is x2iezn.metal.
  X2IEZN_METAL

  # EC2 instance type is z1d.12xlarge.
  Z1D_12XLARGE

  # EC2 instance type is z1d.2xlarge.
  Z1D_2XLARGE

  # EC2 instance type is z1d.3xlarge.
  Z1D_3XLARGE

  # EC2 instance type is z1d.6xlarge.
  Z1D_6XLARGE

  # EC2 instance type is z1d.large.
  Z1D_LARGE

  # EC2 instance type is z1d.metal.
  Z1D_METAL

  # EC2 instance type is z1d.xlarge.
  Z1D_XLARGE
}
# Filter to return AWS EC2 instances which have instance type in the given list of instance types.
input AwsNativeEc2InstanceTypeFilter {
  # List of EC2 instance types.
  ec2InstanceTypes: [AwsNativeEc2InstanceType!]!
}
# State of AWS native file recovery.
enum AwsNativeFileRecoveryStatus {
  # AWS native file recovery is not enabled.
  DISABLED

  # AWS native file recovery is enabled.
  ENABLED

  # State of AWS native file recovery is not specified.
  NOT_SPECIFIED
}
# An AWS native managed hierarchy object.
interface AwsNativeHierarchyObject {
  # AWS Native ID of the object.
  cloudNativeId: String!

  # The AWS region to which the object belongs.
  region: AwsNativeRegion!

  # List of tags that are assigned to the object.
  tags: [Tag!]!

  # Whether the object is a relic.
  isRelic: Boolean!

  # AWS Native name of the object.
  nativeName: String!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of AwsNativeHierarchyObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AwsNativeHierarchyObjectConnection {
  # List of AwsNativeHierarchyObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AwsNativeHierarchyObjectEdge!]!

  # List of AwsNativeHierarchyObject objects.
  nodes: [AwsNativeHierarchyObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AwsNativeHierarchyObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the AwsNativeHierarchyObject object. This wrapper is used for pagination.
type AwsNativeHierarchyObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AwsNativeHierarchyObject object wrapped by this edge.
  node: AwsNativeHierarchyObject!
}
# AWS native protection features.
enum AwsNativeProtectionFeature {
  # AWS native protection feature is EC2.
  EC2

  # AWS native protection feature is RDS.
  RDS

  # AWS native protection feature is S3.
  S3
}
# DB engine of an RDS instance.
enum AwsNativeRdsDbEngine {
  # DB engine is Aurora.
  AURORA

  # DB engine is Aurora MYSQL.
  AURORA_MYSQL

  # DB engine is Aurora PostgreSQL.
  AURORA_POSTGRESQL

  # DB engine is MariaDB.
  MARIADB

  # DB engine is MySQL.
  MYSQL

  # DB engine is Oracle EE.
  ORACLE_EE

  # DB engine is Oracle SE.
  ORACLE_SE

  # DB engine is Oracle SE1.
  ORACLE_SE1

  # DB engine is Oracle SE2.
  ORACLE_SE2

  # DB engine is PostgreSQL.
  POSTGRES

  # DB engine is SQL Server EE.
  SQLSERVER_EE

  # DB engine is SQL Server EX.
  SQLSERVER_EX

  # DB engine is SQL Server SE.
  SQLSERVER_SE

  # DB engine is SQL Server Web.
  SQLSERVER_WEB

  # DB engine is unknown.
  UNKNOWN
}
# Filter to return AWS RDS instances which have database engine in the given list of database engines.
input AwsNativeRdsDbEngineFilter {
  # List of database engines.
  dbEngines: [AwsNativeRdsDbEngine!]!
}
# DB class of an RDS instance.
enum AwsNativeRdsDbInstanceClass {
  # DB class is db.m1.large.
  DB_M1_LARGE

  # DB class is db.m1.medium.
  DB_M1_MEDIUM

  # DB class is db.m1.small.
  DB_M1_SMALL

  # DB class is db.m1.xlarge.
  DB_M1_XLARGE

  # DB class is db.m2.2xlarge.
  DB_M2_2XLARGE

  # DB class is db.m2.4xlarge.
  DB_M2_4XLARGE

  # DB class is db.m2.xlarge.
  DB_M2_XLARGE

  # DB class is db.m3.2xlarge.
  DB_M3_2XLARGE

  # DB class is db.m3.large.
  DB_M3_LARGE

  # DB class is db.m3.medium.
  DB_M3_MEDIUM

  # DB class is db.m3.xlarge.
  DB_M3_XLARGE

  # DB class is db.m4.10xlarge.
  DB_M4_10XLARGE

  # DB class is db.m4.16xlarge.
  DB_M4_16XLARGE

  # DB class is db.m4.2xlarge.
  DB_M4_2XLARGE

  # DB class is db.m4.4xlarge.
  DB_M4_4XLARGE

  # DB class is db.m4.large.
  DB_M4_LARGE

  # DB class is db.m4.xlarge.
  DB_M4_XLARGE

  # DB class is db.m5d.12xlarge.
  DB_M5D_12XLARGE

  # DB class is db.m5d.16xlarge.
  DB_M5D_16XLARGE

  # DB class is db.m5d.24xlarge.
  DB_M5D_24XLARGE

  # DB class is db.m5d.2xlarge.
  DB_M5D_2XLARGE

  # DB class is db.m5d.4xlarge.
  DB_M5D_4XLARGE

  # DB class is db.m5d.8xlarge.
  DB_M5D_8XLARGE

  # DB class is db.m5d.large.
  DB_M5D_LARGE

  # DB class is db.m5d.xlarge.
  DB_M5D_XLARGE

  # DB class is db.m5.12xlarge.
  DB_M5_12XLARGE

  # DB class is db.m5.16xlarge.
  DB_M5_16XLARGE

  # DB class is db.m5.24xlarge.
  DB_M5_24XLARGE

  # DB class is db.m5.2xlarge.
  DB_M5_2XLARGE

  # DB class is db.m5.4xlarge.
  DB_M5_4XLARGE

  # DB class is db.m5.8xlarge.
  DB_M5_8XLARGE

  # DB class is db.m5.large.
  DB_M5_LARGE

  # DB class is db.m5.xlarge.
  DB_M5_XLARGE

  # DB class is db.m6gd.12xlarge.
  DB_M6GD_12XLARGE

  # DB class is db.m6gd.16xlarge.
  DB_M6GD_16XLARGE

  # DB class is db.m6gd.2xlarge.
  DB_M6GD_2XLARGE

  # DB class is db.m6gd.4xlarge.
  DB_M6GD_4XLARGE

  # DB class is db.m6gd.8xlarge.
  DB_M6GD_8XLARGE

  # DB class is db.m6gd.large.
  DB_M6GD_LARGE

  # DB class is db.m6gd.xlarge.
  DB_M6GD_XLARGE

  # DB class is db.m6g.12xlarge.
  DB_M6G_12XLARGE

  # DB class is db.m6g.16xlarge.
  DB_M6G_16XLARGE

  # DB class is db.m6g.2xlarge.
  DB_M6G_2XLARGE

  # DB class is db.m6g.4xlarge.
  DB_M6G_4XLARGE

  # DB class is db.m6g.8xlarge.
  DB_M6G_8XLARGE

  # DB class is db.m6g.large.
  DB_M6G_LARGE

  # DB class is db.m6g.xlarge.
  DB_M6G_XLARGE

  # DB class is db.m6i.12xlarge.
  DB_M6I_12XLARGE

  # DB class is db.m6i.16xlarge.
  DB_M6I_16XLARGE

  # DB class is db.m6i.24xlarge.
  DB_M6I_24XLARGE

  # DB class is db.m6i.2xlarge.
  DB_M6I_2XLARGE

  # DB class is db.m6i.32xlarge.
  DB_M6I_32XLARGE

  # DB class is db.m6i.4xlarge.
  DB_M6I_4XLARGE

  # DB class is db.m6i.8xlarge.
  DB_M6I_8XLARGE

  # DB class is db.m6i.large.
  DB_M6I_LARGE

  # DB class is db.m6i.xlarge.
  DB_M6I_XLARGE

  # DB class is db.r3.2xlarge.
  DB_R3_2XLARGE

  # DB class is db.r3.4xlarge.
  DB_R3_4XLARGE

  # DB class is db.r3.8xlarge.
  DB_R3_8XLARGE

  # DB class is db.r3.large.
  DB_R3_LARGE

  # DB class is db.r3.xlarge.
  DB_R3_XLARGE

  # DB class is db.r4.12xlarge.
  DB_R4_12XLARGE

  # DB class is db.r4.16xlarge.
  DB_R4_16XLARGE

  # DB class is db.r4.2xlarge.
  DB_R4_2XLARGE

  # DB class is db.r4.4xlarge.
  DB_R4_4XLARGE

  # DB class is db.r4.8xlarge.
  DB_R4_8XLARGE

  # DB class is db.r4.large.
  DB_R4_LARGE

  # DB class is db.r4.xlarge.
  DB_R4_XLARGE

  # DB class is db.r5b.12xlarge.
  DB_R5B_12XLARGE

  # DB class is db.r5b.16xlarge.
  DB_R5B_16XLARGE

  # DB class is db.r5b.24xlarge.
  DB_R5B_24XLARGE

  # DB class is db.r5b.2xlarge.
  DB_R5B_2XLARGE

  # DB class is db.r5b.4xlarge.
  DB_R5B_4XLARGE

  # DB class is db.r5b.8xlarge.
  DB_R5B_8XLARGE

  # DB class is db.r5b.large.
  DB_R5B_LARGE

  # DB class is db.r5b.xlarge.
  DB_R5B_XLARGE

  # DB class is db.r5d.12xlarge.
  DB_R5D_12XLARGE

  # DB class is db.r5d.16xlarge.
  DB_R5D_16XLARGE

  # DB class is db.r5d.24xlarge.
  DB_R5D_24XLARGE

  # DB class is db.r5d.2xlarge.
  DB_R5D_2XLARGE

  # DB class is db.r5d.4xlarge.
  DB_R5D_4XLARGE

  # DB class is db.r5d.8xlarge.
  DB_R5D_8XLARGE

  # DB class is db.r5d.large.
  DB_R5D_LARGE

  # DB class is db.r5d.xlarge.
  DB_R5D_XLARGE

  # DB class is db.r5.12xlarge.
  DB_R5_12XLARGE

  # DB class is db.r5.16xlarge.
  DB_R5_16XLARGE

  # DB class is db.r5.24xlarge.
  DB_R5_24XLARGE

  # DB class is db.r5.2xlarge.
  DB_R5_2XLARGE

  # DB class is db.r5.4xlarge.
  DB_R5_4XLARGE

  # DB class is db.r5.8xlarge.
  DB_R5_8XLARGE

  # DB class is db.r5.large.
  DB_R5_LARGE

  # DB class is db.r5.xlarge.
  DB_R5_XLARGE

  # DB class is db.r6gd.12xlarge.
  DB_R6GD_12XLARGE

  # DB class is db.r6gd.16xlarge.
  DB_R6GD_16XLARGE

  # DB class is db.r6gd.2xlarge.
  DB_R6GD_2XLARGE

  # DB class is db.r6gd.4xlarge.
  DB_R6GD_4XLARGE

  # DB class is db.r6gd.8xlarge.
  DB_R6GD_8XLARGE

  # DB class is db.r6gd.large.
  DB_R6GD_LARGE

  # DB class is db.r6gd.xlarge.
  DB_R6GD_XLARGE

  # DB class is db.r6g.12xlarge.
  DB_R6G_12XLARGE

  # DB class is db.r6g.16xlarge.
  DB_R6G_16XLARGE

  # DB class is db.r6g.2xlarge.
  DB_R6G_2XLARGE

  # DB class is db.r6g.4xlarge.
  DB_R6G_4XLARGE

  # DB class is db.r6g.8xlarge.
  DB_R6G_8XLARGE

  # DB class is db.r6g.large.
  DB_R6G_LARGE

  # DB class is db.r6g.xlarge.
  DB_R6G_XLARGE

  # DB class is db.r6i.12xlarge.
  DB_R6I_12XLARGE

  # DB class is db.r6i.16xlarge.
  DB_R6I_16XLARGE

  # DB class is db.r6i.24xlarge.
  DB_R6I_24XLARGE

  # DB class is db.r6i.2xlarge.
  DB_R6I_2XLARGE

  # DB class is db.r6i.32xlarge.
  DB_R6I_32XLARGE

  # DB class is db.r6i.4xlarge.
  DB_R6I_4XLARGE

  # DB class is db.r6i.8xlarge.
  DB_R6I_8XLARGE

  # DB class is db.r6i.large.
  DB_R6I_LARGE

  # DB class is db.r6i.xlarge.
  DB_R6I_XLARGE

  # DB class is db.t2.2xlarge.
  DB_T2_2XLARGE

  # DB class is db.t2.large.
  DB_T2_LARGE

  # DB class is db.t2.medium.
  DB_T2_MEDIUM

  # DB class is db.t2.micro.
  DB_T2_MICRO

  # DB class is db.t2.small.
  DB_T2_SMALL

  # DB class is db.t2.xlarge.
  DB_T2_XLARGE

  # DB class is db.t3.2xlarge.
  DB_T3_2XLARGE

  # DB class is db.t3.large.
  DB_T3_LARGE

  # DB class is db.t3.medium.
  DB_T3_MEDIUM

  # DB class is db.t3.micro.
  DB_T3_MICRO

  # DB class is db.t3.small.
  DB_T3_SMALL

  # DB class is db.t3.xlarge.
  DB_T3_XLARGE

  # DB class is db.t4g.2xlarge.
  DB_T4G_2XLARGE

  # DB class is db.t4g.large.
  DB_T4G_LARGE

  # DB class is db.t4g.medium.
  DB_T4G_MEDIUM

  # DB class is db.t4g.micro.
  DB_T4G_MICRO

  # DB class is db.t4g.small.
  DB_T4G_SMALL

  # DB class is db.t4g.xlarge.
  DB_T4G_XLARGE

  # DB class is db.x1e.16xlarge.
  DB_X1E_16XLARGE

  # DB class is db.x1e.2xlarge.
  DB_X1E_2XLARGE

  # DB class is db.x1e.32xlarge.
  DB_X1E_32XLARGE

  # DB class is db.x1e.4xlarge.
  DB_X1E_4XLARGE

  # DB class is db.x1e.8xlarge.
  DB_X1E_8XLARGE

  # DB class is db.x1e.xlarge.
  DB_X1E_XLARGE

  # DB class is db.x1.16xlarge.
  DB_X1_16XLARGE

  # DB class is db.x1.32xlarge.
  DB_X1_32XLARGE

  # DB class is db.x2g.12xlarge.
  DB_X2G_12XLARGE

  # DB class is db.x2g.16xlarge.
  DB_X2G_16XLARGE

  # DB class is db.x2g.2xlarge.
  DB_X2G_2XLARGE

  # DB class is db.x2g.4xlarge.
  DB_X2G_4XLARGE

  # DB class is db.x2g.8xlarge.
  DB_X2G_8XLARGE

  # DB class is db.x2g.large.
  DB_X2G_LARGE

  # DB class is db.x2g.medium.
  DB_X2G_MEDIUM

  # DB class is db.x2g.xlarge.
  DB_X2G_XLARGE

  # DB class is db.z1d.12xlarge.
  DB_Z1D_12XLARGE

  # DB class is db.z1d.2xlarge.
  DB_Z1D_2XLARGE

  # DB class is db.z1d.4xlarge.
  DB_Z1D_4XLARGE

  # DB class is db.z1d.6xlarge.
  DB_Z1D_6XLARGE

  # DB class is db.z1d.large.
  DB_Z1D_LARGE

  # DB class is db.z1d.xlarge.
  DB_Z1D_XLARGE

  # DB class is unknown.
  UNKNOWN
}
# Filter to return AWS RDS instances which have database instance class in the given list of database instance classes.
input AwsNativeRdsDbInstanceClassFilter {
  # List of database instance classes.
  dbInstanceClasses: [AwsNativeRdsDbInstanceClass!]!
}
# AWS native RDS instance.
type AwsNativeRdsInstance implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , AwsNativeAccountLogicalChildType , AwsNativeAccountDescendantType {
  # Name of RDS Instance.
  dbInstanceName: String!

  # Resource identifier of RDS Instance.
  dbiResourceId: String!

  # AWS region of RDS Instance.
  region: AwsNativeRegion!

  # List of tags associated with RDS Instance.
  tags: [Tag!]!

  # Specifies whether the RDS Instance is a relic.
  isRelic: Boolean!

  # Rubrik Identifier for account associated with RDS Instance.
  awsAccountRubrikId: String!

  # Class type of RDS Instance.
  dbInstanceClass: AwsNativeRdsDbInstanceClass!

  # Name of Availability Zone(AZ) associated with RDS Instance.
  primaryAvailabilityZone: String!

  # Identifies if the RDS Instance is part of multiple Availability Zones.
  isMultiAz: Boolean!

  # Allocated size of RDS Instance in GiB.
  allocatedStorageInGibi: Long!

  # Engine being used for RDS Instance.
  dbEngine: AwsNativeRdsDbEngine!

  # Identifier of VPC associated with RDS Instance.
  vpcId: String!

  # Name of VPC associated with RDS Instance.
  vpcName: String!

  # Maintenance window of RDS Instance.
  maintenanceWindow: String!

  # Name of the source RDS instance if this instance is a read replica. This field is not applicable for primary RDS instances.
  readReplicaSourceName: String!

  # The type of the RDS instance such as Aurora or a regular instance.
  rdsType: AwsNativeRdsType!

  # Availability zones if this is an Aurora cluster.
  auroraAvailabilityZones: [String!]!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # AWS account of the Amazon Relational Database Service (RDS) instance.
  awsNativeAccount: AwsNativeAccount!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of AwsNativeRdsInstance objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AwsNativeRdsInstanceConnection {
  # List of AwsNativeRdsInstance objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AwsNativeRdsInstanceEdge!]!

  # List of AwsNativeRdsInstance objects.
  nodes: [AwsNativeRdsInstance!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AwsNativeRdsInstance objects matching the request arguments.
  count: Int!
}
# Wrapper around the AwsNativeRdsInstance object. This wrapper is used for pagination.
type AwsNativeRdsInstanceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AwsNativeRdsInstance object wrapped by this edge.
  node: AwsNativeRdsInstance!
}
# Filters for list of AWS RDS instances.
input AwsNativeRdsInstanceFilters {
  # Filter by name substring.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by AWS account.
  accountFilter: AwsNativeAccountFilter

  # Filter by VPC.
  vpcFilter: AwsNativeVpcFilter

  # Filter by relic status.
  relicFilter: RelicFilter

  # Filter by tags.
  tagFilter: AwsNativeTagFilter

  # Filter by region.
  regionFilter: AwsNativeRegionFilter

  # Filter by database engine.
  dbEngineFilter: AwsNativeRdsDbEngineFilter

  # Filter by database instance class.
  dbInstanceClassFilter: AwsNativeRdsDbInstanceClassFilter

  # Filter by organization ID.
  orgFilter: OrgFilter
}
# The field type used to sort the RDS instances.
enum AwsNativeRdsInstanceSortFields {
  # Use SLA Domain assignment for sorting.
  ASSIGNED_SLA_DOMAIN

  # Use AWS account name for sorting.
  AWS_NATIVE_ACCOUNT_NAME

  # Use DB engine of RDS instance for sorting.
  AWS_NATIVE_RDS_DB_ENGINE

  # Use DB class of RDS instance for sorting.
  AWS_NATIVE_RDS_DB_INSTANCE_CLASS

  # Use VPC ID for sorting.
  AWS_VPC_ID

  # Use RDS instance SLA Domain for sorting.
  EFFECTIVE_SLA_DOMAIN

  # Use RDS instance name for sorting.
  NAME
}
# The Point-in-Time (PiT) restore window of the RDS Instance.
type AwsNativeRdsPointInTimeRestoreWindow {
  # The earliest time to which RDS Instance can be restored.
  earliestTime: DateTime

  # The latest time to which RDS Instance can be restored.
  latestTime: DateTime
}
# The storage type of an RDS instance.
enum AwsNativeRdsStorageType {
  # Storage type is gp2.
  GP2

  # Storage type is gp3.
  GP3

  # Storage type is io1.
  IO1

  # Storage type is not specified.
  NOT_SPECIFIED

  # Storage type is standard.
  STANDARD

  # Storage type is unknown.
  UNKNOWN
}
# AwsNativeRdsType describes the type of RDS instance.
enum AwsNativeRdsType {
  # RDS Aurora instance.
  AURORA

  # A regular RDS instance.
  REGULAR_RDS

  # RDS type is not specified.
  UNSPECIFIED
}
# AWS native regions.
enum AwsNativeRegion {
  # AWS native Africa (Cape Town) region.
  AF_SOUTH_1

  # AWS native Asia Pacific (Hong Kong) region.
  AP_EAST_1

  # AWS native Asia Pacific (Tokyo) region.
  AP_NORTHEAST_1

  # AWS native Asia Pacific (Seoul) region.
  AP_NORTHEAST_2

  # AWS native Asia Pacific (Singapore) region.
  AP_SOUTHEAST_1

  # AWS native Asia Pacific (Sydney) region.
  AP_SOUTHEAST_2

  # AWS native Asia Pacific (Mumbai) region.
  AP_SOUTH_1

  # AWS native Canada (Central) region.
  CA_CENTRAL_1

  # AWS native China (Ningxia) region.
  CN_NORTHWEST_1

  # AWS native China (Beijing) region.
  CN_NORTH_1

  # AWS native EU (Frankfurt) region.
  EU_CENTRAL_1

  # AWS native EU (Stockholm) region.
  EU_NORTH_1

  # AWS native EU (Milan) region.
  EU_SOUTH_1

  # AWS native EU (Ireland) region.
  EU_WEST_1

  # AWS native EU (London) region.
  EU_WEST_2

  # AWS native EU (Paris) region.
  EU_WEST_3

  # AWS Israel (Tel Aviv) region.
  IL_CENTRAL_1

  # AWS native Middle East (Bahrain) region.
  ME_SOUTH_1

  # AWS native region is not specified.
  NOT_SPECIFIED

  # AWS native South America (Sao Paulo) region.
  SA_EAST_1

  # AWS native US East (N. Virginia) region.
  US_EAST_1

  # AWS native US East (Ohio) region.
  US_EAST_2

  # AWS Gov native US East 1 (N. Virginia) region.
  US_GOV_EAST_1

  # AWS Gov native US West 1 (N. California) region.
  US_GOV_WEST_1

  # AWS LCK native US East region.
  US_ISOB_EAST_1

  # AWS DCA native US East region.
  US_ISO_EAST_1

  # AWS DCA native US West region.
  US_ISO_WEST_1

  # AWS native US West (N. California) region.
  US_WEST_1

  # AWS native US West (Oregon) region.
  US_WEST_2
}
# Filter to return AWS objects which have region in the given list of regions.
input AwsNativeRegionFilter {
  # List of regions.
  regions: [AwsNativeRegion!]!
}
# AWS native regions for replication.
enum AwsNativeRegionForReplication {
  # AWS native for replication Africa (Cape Town) region.
  AF_SOUTH_1

  # AWS native for replication Asia Pacific (Hong Kong) region.
  AP_EAST_1

  # AWS native for replication Asia Pacific (Tokyo) region.
  AP_NORTHEAST_1

  # AWS native for replication Asia Pacific (Seoul) region.
  AP_NORTHEAST_2

  # AWS native for replication Asia Pacific (Singapore) region.
  AP_SOUTHEAST_1

  # AWS native for replication Asia Pacific (Sydney) region.
  AP_SOUTHEAST_2

  # AWS native for replication Asia Pacific (Mumbai) region.
  AP_SOUTH_1

  # AWS native for replication Canada (Central) region.
  CA_CENTRAL_1

  # AWS native for replication China (Ningxia) region.
  CN_NORTHWEST_1

  # AWS native for replication China (Beijing) region.
  CN_NORTH_1

  # AWS native for replication EU (Frankfurt) region.
  EU_CENTRAL_1

  # AWS native for replication EU (Stockholm) region.
  EU_NORTH_1

  # AWS native for replication EU (Milan) region.
  EU_SOUTH_1

  # AWS native for replication EU (Ireland) region.
  EU_WEST_1

  # AWS native for replication EU (London) region.
  EU_WEST_2

  # AWS native for replication EU (Paris) region.
  EU_WEST_3

  # AWS native for replication Israel (Tel Aviv) region.
  IL_CENTRAL_1

  # AWS native for replication Middle East (Bahrain) region.
  ME_SOUTH_1

  # AWS native for replication region is not defined.
  NOT_DEFINED

  # AWS native for replication South America (Sao Paulo) region.
  SA_EAST_1

  # AWS native for replication region is the source region.
  SOURCE_REGION

  # AWS native for replication US East (N. Virginia) region.
  US_EAST_1

  # AWS native for replication US East (Ohio) region.
  US_EAST_2

  # AWS Gov native for replication US East 1 (N. Virginia) region.
  US_GOV_EAST_1

  # AWS Gov native for replication US West 1 (N. California) region.
  US_GOV_WEST_1

  # AWS LCK native for replication US East region.
  US_ISOB_EAST_1

  # AWS DCA native for replication US East region.
  US_ISO_EAST_1

  # AWS DCA native for replication US West region.
  US_ISO_WEST_1

  # AWS native for replication US West (N. California) region.
  US_WEST_1

  # AWS native for replication US West (Oregon) region.
  US_WEST_2
}
# List of AWS region specifications associated with an AWS account.
type AwsNativeRegionSpec {
  # Name of the AWS region.
  region: AwsNativeRegion!

  # A boolean specifying whether exocompute is configured in the region or not.
  isExocomputeConfigured: Boolean!
}
# Root of AWS native hierarchy.
type AwsNativeRoot {
  # List of descendants of specific object type.
  objectTypeDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Type of objects to include.
    objectTypeFilter: HierarchyObjectTypeEnum!,

    # The hierarchy object filter.
    filter: [Filter!]): AwsNativeHierarchyObjectConnection!
}
# AWS native S3 Bucket.
type AwsNativeS3Bucket implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , AwsNativeAccountLogicalChildType , AwsNativeAccountDescendantType , AwsNativeHierarchyObject {
  # AWS native ID of S3 bucket.
  cloudNativeId: String!

  # Rubrik ID of the Amazon account.
  awsAccountRubrikId: String!

  # Name of the region. Some examples are: US_EAST_1, AP_EAST_1. This field cannot be null or empty, and will be mapped directly to regions available for the S3 bucket in the AWS cloud.
  region: AwsNativeRegion!

  # List of tags associated with bucket.
  tags: [Tag!]!

  # Whether the bucket is relic.
  isRelic: Boolean!

  # AWS Native name of the object.
  nativeName: String!

  # Whether versioning is enabled on the bucket.
  isVersioningEnabled: Boolean!

  # The earliest time to which the S3 bucket can be restored.
  earliestRestoreTime: DateTime

  # The time when the Amazon S3 bucket was created.
  creationTime: DateTime

  # A boolean specifying whether exocompute is configured in the region.
  isExocomputeConfigured: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # AWS account of the Amazon S3 bucket.
  awsNativeAccount: AwsNativeAccount!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# The SLA Domain configuration for AWS S3 instances.
type AwsNativeS3SlaConfig {
  # Specifies the duration for which the continuous backups will be retained. This duration determines the earliest time to which a Point-in-Time recovery can be performed on the associated S3 instances.
  continuousBackupRetentionInDays: Int!

  # Specifies the location ID where the primary backups will be stored.
  archivalLocationId: String!
}
# AWS Native S3 SLA configuration.
input AwsNativeS3SlaConfigInput {
  # Specifies the location ID where the primary backups will be stored.
  archivalLocationId: String = ""

  # Specifies the number of days for which the AWS S3 continuous backups will be retained. 
  continuousBackupRetentionInDays: Int = 0
}
# AWS S3-specific snapshot information.
type AwsNativeS3SpecificSnapshot implements PolarisSpecificSnapshot {
  # List of objects successfully backed up.
  processedObjectCount: Long!

  # List of objects failed to back up.
  failedObjectCount: Long!

  # Verifies if the snapshot is a partial backup.
  isSnapshotPartial: Boolean!

  # ID of the snapshot.
  snapshotId: UUID!
}
# Represents a subnet in AWS.
type AwsNativeSubnet {
  # ID of the subnet.
  id: String!

  # Name of the subnet.
  name: String!

  # Availability Zone corresponding to the subnet.
  availabilityZone: String!
}
# Filter to return AWS objects which have at least one tag in the given list of tags.
input AwsNativeTagFilter {
  # Tag filter parameters.
  tagFilterParams: [TagFilterParams!]!
}
# Filter to return AWS EC2 instances which have VPC ID in the given list of VPC IDs.
input AwsNativeVpcFilter {
  # Virtual Private Cloud (VPC) IDs to filter.
  vpcIds: [String!]!
}
# The SLA Domain configuration for AWS RDS instances.
type AwsRdsConfig {
  # Specifies the duration for which the logs will be retained. This duration determines the earliest time to which a Point-in-Time recovery can be performed on the associated RDS instances.
  logRetention: Duration
}
# AWS RDS configuration.
input AwsRdsConfigInput {
  # Log retention of the configuration.
  logRetention: SlaDurationInput
}
# Regions for AWS.
enum AwsRegion {
  # AWS Africa (Cape Town) region.
  AF_SOUTH_1

  # AWS Asia Pacific (Hong Kong) region.
  AP_EAST_1

  # AWS Asia Pacific (Tokyo) region.
  AP_NORTHEAST_1

  # AWS Asia Pacific (Seoul) region.
  AP_NORTHEAST_2

  # AWS Asia Pacific (Osaka) region.
  AP_NORTHEAST_3

  # AWS Asia Pacific (Singapore) region.
  AP_SOUTHEAST_1

  # AWS Asia Pacific (Sydney) region.
  AP_SOUTHEAST_2

  # AWS Asia Pacific (Jakarta) region.
  AP_SOUTHEAST_3

  # AWS Asia Pacific (Mumbai) region.
  AP_SOUTH_1

  # AWS Canada (Central) region.
  CA_CENTRAL_1

  # AWS China (Ningxia) region.
  CN_NORTHWEST_1

  # AWS China (Beijing) region.
  CN_NORTH_1

  # AWS EU (Frankfurt) region.
  EU_CENTRAL_1

  # AWS EU (Zurich) region.
  EU_CENTRAL_2

  # AWS EU (Stockholm) region.
  EU_NORTH_1

  # AWS EU (Milan) region.
  EU_SOUTH_1

  # AWS EU (Ireland) region.
  EU_WEST_1

  # AWS EU (London) region.
  EU_WEST_2

  # AWS EU (Paris) region.
  EU_WEST_3

  # Israel (tel aviv) region.
  IL_CENTRAL_1

  # AWS Middle East (Bahrain) region.
  ME_SOUTH_1

  # AWS South America (Sao Paulo) region.
  SA_EAST_1

  # AWS region is unknown.
  UNKNOWN_AWS_REGION

  # AWS US East (N. Virginia) region.
  US_EAST_1

  # AWS US East (Ohio) region.
  US_EAST_2

  # AWS Cloud for Government US East 1 (North Virginia) region.
  US_GOV_EAST_1

  # AWS Cloud for Government US West 1 (North California) region.
  US_GOV_WEST_1

  # AWS US West (N. California) region.
  US_WEST_1

  # AWS US West (Oregon) region.
  US_WEST_2
}
# Input to update regions for AWS cloud account.
input AwsRegionsInput {
  # AWS regions for native protection.
  regions: [AwsCloudAccountRegion!]!
}
# AWS Replication target.
type AwsReplicationTarget {
  # AWS account ID.
  accountId: String!

  # AWS account name.
  accountName: String!
  region: AwsNativeRegionForReplication!
}
# AWS retrieval tier.
enum AwsRetrievalTier {
  # Bulk AWS retrieval tier.
  BULK_TIER

  # Expedited AWS retrieval tier.
  EXPEDITED_TIER

  # Standard AWS retrieval tier (default option).
  STANDARD_TIER
}
# Input to update role ARN for IAM user-based AWS cloud account.
input AwsRoleArnInput {
  # AWS role ARN for native protection.
  roleArn: String!
}
# AWS role based Account specific info.
type AwsRoleBasedAccount implements CloudAccount {
  awsSpecificInfo: AwsCloudAccountWithFeatures!

  # The ID of this Cloud Account.
  cloudAccountId: String!

  # The name of this Cloud Account.
  name: String!

  # The description of this Cloud Account.
  description: String

  # The type of this Cloud Provider.
  cloudProvider: CloudAccountType!

  # The connection status of this Cloud Account.
  connectionStatus: ConnectionStatusType!
}
# Role customization options.
input AwsRoleCustomization {
  # Name of the cross-account role.
  crossAccountRoleName: String

  # Path of the cross-account role.
  crossAccountRolePath: String

  # Name of the Exocompute's master node's role.
  masterRoleName: String

  # Path of the Exocompute's master node's role.
  masterRolePath: String

  # Name of the Exocompute's worker node's role.
  workerRoleName: String

  # Path of the Exocompute's worker node's role.
  workerRolePath: String

  # Name of the Exocompute's worker node's instance profile.
  instanceProfileName: String

  # Path of the Exocompute's worker node's instance profile.
  instanceProfilePath: String

  # Path that can be attached to a recovered EC2 instance.
  ec2RecoveryRolePath: String
}
# AWS RSC account details.
type AwsRscAccountDetails {
  # ID generated after the AWS native account is registered.
  awsCloudAccountId: String!

  # AWS native account ID.
  awsNativeId: String!

  # Message denoting status of registration(Empty if successful).
  message: String!
}
# AWS RSC Managed Exocompute Configuration in a region.
type AwsRscManagedExocomputeConfig implements AwsExocomputeGetConfigurationResponse {
  # VPC ID.
  vpcId: String!

  # Cluster security group ID.
  clusterSecurityGroupId: String!

  # Node security group ID.
  nodeSecurityGroupId: String!

  # First subnet.
  subnet1: AwsExocomputeSubnetType!

  # Second subnet.
  subnet2: AwsExocomputeSubnetType!

  # Specifies if the security groups are managed by RSC.
  areSecurityGroupsRscManaged: Boolean!

  # Exocompute configuration UUID.
  configUuid: UUID!

  # Exocompute configuration message.
  message: String!

  # Exocompute configuration region.
  region: AwsCloudAccountRegion!

  # Status of the latest Exocompute health check.
  healthCheckStatus: ExocomputeHealthCheckStatus!

  # Whether this Exocompute uses a Private Container Registry (PCR).
  hasPcr: Boolean!

  # URL of the user's PCR.
  pcrUrl: String
}
# A Security group in AWS realm.
type AwsSecurityGroup {
  # ID of the AWS security group.
  id: String!

  # Name of the AWS security group.
  name: String!
}
# Storage class for AWS type location.
enum AwsStorageClass {
  # Amazon S3 Glacier Instant Retrieval storage class.
  GLACIER_INSTANT_RETRIEVAL

  # Amazon S3 One Zone-IA storage class.
  ONEZONE_IA

  # Amazon S3 Standard storage class.
  STANDARD

  # Amazon S3 Standard-IA storage class.
  STANDARD_IA

  # Unknown AWS storage class.
  UNKNOWN_STORAGE_CLASS
}
# A Subnet in AWS realm.
type AwsSubnet {
  # ID of the subnet.
  id: String!

  # Name of the subnet.
  name: String!

  # Availability zone in which the subnet resides.
  availabilityZone: String!
}
# Specific info for AWS Target Template.
type AwsTargetTemplate implements TargetTemplate {
  # AWS target bucket prefix.
  bucketPrefix: String!

  # AWS target region.
  region: AwsRegion!

  # AWS target storage class.
  storageClass: AwsStorageClass!

  # AWS target compute settings.
  computeSettings: AwsComputeSettings

  # AWS target proxy settings.
  proxySettings: ProxySettings

  # AWS target encryption type.
  encryptionType: TargetEncryptionTypeEnum!

  # AWS target KMS master key ID.
  kmsMasterKeyId: String

  # Specifies whether AWS target has consolidation enabled or not.
  isConsolidationEnabled: Boolean!

  # Cloud native template type.
  cloudNativeLocTemplateType: CloudNativeLocTemplateType!

  # AWS target bucket tags.
  bucketTags: [TagObject!]!

  # Cloud account details of the AWS target.
  cloudAccount: CloudAccount!

  # The type of this Target.
  targetType: TargetType!
}
# Response of retrieving the trust policy.
type AwsTrustPolicy {
  # Result of retrieving the trust policy.
  result: [AwsTrustPolicyResult!]!
}
# Input to retrieve the AWS trust policy.
input AwsTrustPolicyInput {
  # Type of the AWS cloud (Standard, Gov, etc.).
  cloudType: AwsCloudType

  # List of cloud account features.
  features: [CloudAccountFeature!]!

  # IDs for the native AWS accounts.
  awsNativeAccounts: [AwsNativeAccountInput!]!
}
# Result of retrieving the trust policy.
type AwsTrustPolicyResult {
  # Trust policy for an artifact.
  artifacts: [ArtifactPolicy!]!

  # Native ID of the AWS account.
  awsNativeId: String!
}
# Input to update AWS IAM user keys for IAM user-based AWS cloud account.
input AwsUserKeysInput {
  # IAM user access key.
  accessKey: String!

  # IAM user secret key.
  secretKey: String!
}
# Configuration for creating AWS instances.
input AwsVmConfig {
  # Rubrik CDM version to determine image.
  cdmVersion: String = ""

  # Node disk size in GB.
  nodeSizeGb: Int = 0

  # AWS subnet in which instance is created.
  subnet: String = ""

  # Tags to attach to created resources.
  tags: String = ""

  # ID of the virtual machine image to deploy.
  imageId: String = ""

  # Instance profile to attach to image.
  instanceProfileName: String = ""

  # AWS marketplace product ID.
  cdmProduct: String = ""

  # Create dense or standard nodes.
  vmType: VmType

  # List of security groups to assign to instances.
  securityGroups: [String!]

  # AWS instance type.
  instanceType: AwsInstanceType
}
# A Virtual Private Cloud (VPC) in AWS realm.
type AwsVpc {
  # ID for the VPC.
  id: String!

  # Name of the VPC.
  name: String!

  # List of subnets associated with the VPC.
  subnets: [AwsSubnet!]!

  # List of security groups associated with the VPC.
  securityGroups: [AwsSecurityGroup!]!
}
# Azure Account specific info.
type AzureAccount implements CloudAccount {
  # The native ID of the subscription.
  subscriptionId: String!

  # The native ID of the tenant of the subscription.
  tenantId: String!

  # The ID of this Cloud Account.
  cloudAccountId: String!

  # The name of this Cloud Account.
  name: String!

  # The description of this Cloud Account.
  description: String

  # The type of this Cloud Provider.
  cloudProvider: CloudAccountType!

  # The connection status of this Cloud Account.
  connectionStatus: ConnectionStatusType!
}
# Details of the customer-owned Azure AD application to insert.
input AzureAdApp {
  # ID of the application.
  clientId: String = ""

  # Application secret.
  clientSecret: String = ""
}
# Details of the Azure AD directory object.
type AzureAdDirectory implements HierarchyObject , PolarisHierarchyObject , HierarchySnappable , PolarisHierarchySnappable {
  # The natural ID of the Azure AD Directory.
  directoryId: String!

  # Name of the Azure AD Directory.
  domainName: String!

  # ID of the exocompute cluster.
  exocomputeId: String!

  # Specifies whether the object is a relic.
  isRelic: Boolean!

  # Region of the Azure AD Directory.
  region: String!

  # User count from the latest snapshot.
  latestUserCount: Int!

  # Group count from the latest snapshot.
  latestGroupCount: Int!

  # Specifies whether the infrastructure has been provisioned to enable protection for this Azure AD.
  isProvisioned: Boolean!

  # Time of the latest snapshot.
  latestSnapshotTime: DateTime

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Object ID.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of AzureAdDirectory objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureAdDirectoryConnection {
  # List of AzureAdDirectory objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureAdDirectoryEdge!]!

  # List of AzureAdDirectory objects.
  nodes: [AzureAdDirectory!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureAdDirectory objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureAdDirectory object. This wrapper is used for pagination.
type AzureAdDirectoryEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureAdDirectory object wrapped by this edge.
  node: AzureAdDirectory!
}
# Azure AD group.
type AzureAdGroup {
  # Display name of the Azure AD group.
  displayName: String!

  # Group type of the Azure AD group.
  groupType: String!

  # Email address of the M365 group.
  email: String!
}
# Response to the azureAdObjectsByType API.
type AzureAdObject {
  # ID of the Azure AD object.
  objectId: String!

  # ID of the snapshot containing Azure AD Object.
  snapshotId: String!

  # Relationships of the Azure AD object.
  relationships: Map! @deprecated(reason: "Use ReverseRelationships instead.")

  # Reverse relationships of the Azure Active Directory object.
  reverseRelationships: [AzureAdReverseRelationship!]!

  # Populate either AzureAdUser or AzureAdGroup.
  azureAdObjects: AzureAdObjects!

  # Azure AD object type.
  type: AzureAdObjectType!
}
# Paginated list of AzureAdObject objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureAdObjectConnection {
  # List of AzureAdObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureAdObjectEdge!]!

  # List of AzureAdObject objects.
  nodes: [AzureAdObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureAdObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureAdObject object. This wrapper is used for pagination.
type AzureAdObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureAdObject object wrapped by this edge.
  node: AzureAdObject!
}
# Azure AD object search keyword names.
enum AzureAdObjectSearchType {
  # Group name of the group.
  GROUP_NAME

  # Group type of the group.
  GROUP_TYPE

  # Principal user name of the user.
  PRINCIPAL_USER_NAME

  # User name of the user.
  USER_NAME

  # User type of the user.
  USER_TYPE
}
# Azure AD object types.
enum AzureAdObjectType {
  # Azure AD object type is unknown.
  AZURE_AD_OBJECT_TYPE_UNKNOWN

  # Object type is Azure AD group.
  GROUP

  # Object type is Azure AD user.
  USER
}
# Configuration to retrieve Azure AD objects by type.
input AzureAdObjectTypeInput {
  # Snapshot ID to retrieve Azure AD objects.
  snapshotId: UUID!

  # Azure AD object type.
  azureAdObjectType: AzureAdObjectType!
}
# Azure AD object type.
type AzureAdObjects {
  # Azure AD user type.
  azureAdUser: AzureAdUser

  # Azure AD group type.
  azureAdGroup: AzureAdGroup
}
# Represents regions for Azure AD.
enum AzureAdRegion {
  # Azure region is Australia East.
  AUSTRALIAEAST

  # Azure region is Brazil South.
  BRAZILSOUTH

  # Azure region is Canada Central.
  CANADACENTRAL

  # Azure region is Central India.
  CENTRALINDIA

  # Azure region is Central US.
  CENTRALUS

  # Azure region is East Asia.
  EASTASIA

  # Azure region is East US (deprecated).
  EASTUS

  # Azure region is East US 2.
  EASTUS2

  # Azure region is France Central.
  FRANCECENTRAL

  # Azure region is Germany West Central.
  GERMANYWESTCENTRAL

  # Azure region is Japan East.
  JAPANEAST

  # Azure region is Korea Central.
  KOREACENTRAL

  # Azure region is North Europe.
  NORTHEUROPE

  # Azure region is Norway East.
  NORWAYEAST

  # Azure region is Poland Central.
  POLANDCENTRAL

  # Azure region is Qatar Central.
  QATARCENTRAL

  # Azure region is South Africa North.
  SOUTHAFRICANORTH

  # Azure region is South Central US (deprecated).
  SOUTHCENTRALUS

  # Azure region is South East Asia.
  SOUTHEASTASIA

  # Azure region is Sweden Central.
  SWEDENCENTRAL

  # Azure region is Switzerland North.
  SWITZERLANDNORTH

  # Azure region is UAE North.
  UAENORTH

  # Azure region is UK South.
  UKSOUTH

  # AzureAd region is Unknown.
  UNKNOWN_AZURE_AD_REGION

  # Azure region is US Gov Virginia (deprecated).
  USGOVVIRGINIA

  # Azure region is West Europe.
  WESTEUROPE

  # Azure region is West US 2.
  WESTUS2
}
# Reverse Relationships of an Azure Active Directory object.
type AzureAdReverseRelationship {
  # Type of the reverse relationship.
  type: AzureAdReverseRelationshipType!

  # IDs of the objects related to the Azure Active Directory object.
  relatedObjectIds: [UUID!]!
}
# Reverse relationships of an Azure Active Directory object.
enum AzureAdReverseRelationshipType {
  # Member of the relationship. For example, a user of a group.
  MEMBER_OF

  # Owner of the relationship. For example, an owner of a group.
  OWNER_OF

  # Unknown reverse relationship type.
  REVERSE_RELATIONSHIP_TYPE_UNKNOWN
}
# Azure AD user.
type AzureAdUser {
  # Display name of the Azure AD user.
  displayName: String!

  # Principal user name of the Azure AD user.
  principalUserName: String!

  # User type of the Azure AD user.
  userType: String!

  # Creation type of the Azure AD user.
  creationType: String!
}
# Custom role ARM template corresponding to the feature.
type AzureArmTemplateByFeature {
  # Cloud native protections features.
  feature: CloudAccountFeature!

  # The template required for supporting the feature specified by the feature field. During the upgrade operation, only the role definition template is returned.
  roleDefinitionAssignmentTemplate: String!

  # Policy permission version to be used for adding and upgrading the subscription.
  version: Int!

  # Policy permissions groups versions to be used for adding and upgrading the subscription.
  permissionsGroupVersions: [PermissionsGroupWithVersion!]!

  # The level at which the template should be deployed.
  deploymentLevel: ArmTemplateDeploymentLevel!
}
# Input for retrieving ARM templates for custom roles.
input AzureArmTemplatesByFeatureInput {
  # Domain name of the customer's Azure Tenant.
  customerTenantDomainName: String!

  # Deprecated, use featuresToInclude instead. Features to be enabled for the Azure cloud account.
  features: [CloudAccountFeature!]

  # Azure cloud account operation type.
  operationType: CloudAccountOperation!

  # Azure cloud type.
  cloudType: AzureCloudType!

  # Features and permissions groups used to determine the permissions to include in the templates.
  featuresToInclude: [AzureRoleArmTemplateFeature!]
}
# SLA Domain configuration for Azure Blob.
type AzureBlobConfig {
  # Specifies the duration to which a Point-in-Time recovery can be performed on the associated Azure Blob.
  continuousBackupRetentionInDays: Int!
}
# Azure Blob configuration.
input AzureBlobConfigInput {
  # Retention of Azure Blobs.
  continuousBackupRetentionInDays: Int = 0
}
# Rubrik CDM image version information from the Azure marketplace.
type AzureCdmVersion {
  # Image SKU.
  sku: String!

  # Azure image version.
  version: String!

  # Image tag array with each element in key=value format.
  tags: [AzureCdmVersionTag!]!

  # Supported Azure instance types for this Rubrik CDM version.
  supportedInstanceTypes: [AzureInstanceType!]!

  # Rubrik CDM version.
  cdmVersion: String!
}
# Rubrik CDM versions for the Azure account.
input AzureCdmVersionReq {
  # Customer Azure cloud account ID.
  cloudAccountId: String = ""

  # Azure region/location name.
  location: String = ""
}
# Rubrik CDM image version tag.
type AzureCdmVersionTag {
  # Tag key.
  key: String!

  # Tag value.
  value: String!
}
# Azure Cloud Account Feature details.
type AzureCloudAccountFeatureDetail {
  # A feature refers to a Rubrik protection feature. For example: Virtual Machine and Disk Protection, Storage, Exocompute, etc.
  feature: CloudAccountFeature!

  # Specifies the state of an Azure cloud account in Rubrik environment. For example, Refreshed, Disconnected, etc. A cloud account can only be in one state at a time.
  status: CloudAccountStatus!

  # Azure regions.
  regions: [AzureCloudAccountRegion!]!

  # User assigned managed identity for encryption feature. It is null for features other than Cloud Native Archival Encryption.
  userAssignedManagedIdentity: AzureUserAssignedManagedIdentity

  # Persistent storage configured for the feature. It is null for features other than Azure SQL DB and Azure SQL MI.
  persistentStorage: PersistentStorage

  # Resource group for the feature.
  resourceGroup: AzureResourceGroup!

  # Role details for the feature.
  role: AzureRole!

  # Role details for the feature.
  roles: [AzureRole!]!
}
# Configuration consisting of role permissions and feature policy version required for Azure subscription setup. Features refer to the Rubrik features that the customer wants to be enabled on the cloud account.
type AzureCloudAccountPermissionConfigResponse {
  # Policy permission version to be used on Rubrik for adding a subscription.
  permissionVersion: Int!

  # List of permissions to be applied on the role created in Azure for a subscription.
  rolePermissions: [AzureCloudAccountRolePermission!]!
}
# Azure cloud account region Enum.
enum AzureCloudAccountRegion {
  # Azure Cloud account region is Australia Central.
  AUSTRALIACENTRAL

  # Azure Cloud account region is Australia Central 2.
  AUSTRALIACENTRAL2

  # Azure Cloud account region is Australia East.
  AUSTRALIAEAST

  # Azure Cloud account region is Australia Southeast.
  AUSTRALIASOUTHEAST

  # Azure Cloud account region is Brazil South.
  BRAZILSOUTH

  # Azure Cloud account region is Canada Central.
  CANADACENTRAL

  # Azure Cloud account region is Canada East.
  CANADAEAST

  # Azure Cloud account region is Central India.
  CENTRALINDIA

  # Azure Cloud account region is Central US.
  CENTRALUS

  # Azure Cloud account region is China East.
  CHINAEAST

  # Azure Cloud account region is China East 2.
  CHINAEAST2

  # Azure Cloud account region is China North.
  CHINANORTH

  # Azure Cloud account region is China North 2.
  CHINANORTH2

  # Azure Cloud account region is East Asia.
  EASTASIA

  # Azure Cloud account region is East US.
  EASTUS

  # Azure Cloud account region is East US 2.
  EASTUS2

  # Azure Cloud account region is France Central.
  FRANCECENTRAL

  # Azure Cloud account region is France South.
  FRANCESOUTH

  # Azure Cloud account region is Germany North.
  GERMANYNORTH

  # Azure Cloud account region is Germany West Central.
  GERMANYWESTCENTRAL

  # Azure Cloud account region is Israel Central.
  ISRAELCENTRAL

  # Azure Cloud account region is Italy North.
  ITALYNORTH

  # Azure Cloud account region is Japan East.
  JAPANEAST

  # Azure Cloud account region is Japan West.
  JAPANWEST

  # Azure Cloud account region is Korea Central.
  KOREACENTRAL

  # Azure Cloud account region is Korea South.
  KOREASOUTH

  # Azure Cloud account region is North Central US.
  NORTHCENTRALUS

  # Azure Cloud account region is North Europe.
  NORTHEUROPE

  # Azure Cloud account region is Norway East.
  NORWAYEAST

  # Azure Cloud account region is Norway West.
  NORWAYWEST

  # Azure Cloud account region is Poland Central.
  POLANDCENTRAL

  # Azure Cloud account region is Qatar Central.
  QATARCENTRAL

  # Azure Cloud account region is South Africa North.
  SOUTHAFRICANORTH

  # Azure Cloud account region is South Africa West.
  SOUTHAFRICAWEST

  # Azure Cloud account region is South Central US.
  SOUTHCENTRALUS

  # Azure Cloud account region is South East Asia.
  SOUTHEASTASIA

  # Azure Cloud account region is South India.
  SOUTHINDIA

  # Azure Cloud account region is Sweden Central.
  SWEDENCENTRAL

  # Azure Cloud account region is Switzerland North.
  SWITZERLANDNORTH

  # Azure Cloud account region is Switzerland West.
  SWITZERLANDWEST

  # Azure Cloud account region is UAE Central.
  UAECENTRAL

  # Azure Cloud account region is UAE North.
  UAENORTH

  # Azure Cloud account region is UK South.
  UKSOUTH

  # Azure Cloud account region is UK West.
  UKWEST

  # Azure Cloud account region is Unknown.
  UNKNOWN_AZURE_REGION

  # Azure Cloud account region is US Gov Arizona.
  USGOVARIZONA

  # Azure Cloud account region is US Gov Texas.
  USGOVTEXAS

  # Azure Cloud account region is US Gov Virginia.
  USGOVVIRGINIA

  # Azure Cloud account region is West Central US.
  WESTCENTRALUS

  # Azure Cloud account region is West Europe.
  WESTEUROPE

  # Azure Cloud account region is West India.
  WESTINDIA

  # Azure Cloud account region is West US.
  WESTUS

  # Azure Cloud account region is West US 2.
  WESTUS2

  # Azure Cloud account region is West US 3.
  WESTUS3
}
# Azure Permission type with included and excluded actions.
type AzureCloudAccountRolePermission {
  # Actions which should be allowed on the Azure role for the subscription.
  includedActions: [String!]!

  # Actions which should be explicitly disallowed on the Azure role for the subscription.
  excludedActions: [String!]!

  # Data actions which should be allowed on the Azure role for the subscription.
  includedDataActions: [String!]!

  # Data actions which should be explicitly disallowed on the Azure role for the subscription.
  excludedDataActions: [String!]!
}
# Azure Cloud Account Subscription for a given feature.
type AzureCloudAccountSubscription {
  # Subscription UUID as specified in Azure.
  nativeId: String!

  # Subscription name as specified in Azure.
  name: String!

  # Specifies whether the requester has appropriate permissions on this subscription.
  isAuthorized: Boolean!

  # Cloud account ID of the subscription.
  customerSubscriptionId: String!

  # Rubrik ID of the Azure tenant in which this subscription is present.
  customerTenantId: String!

  # Cloud type of the Azure subscription.
  cloudType: AzureCloudType!
}
# Azure Cloud Account Subscription details for a given feature.
type AzureCloudAccountSubscriptionDetail {
  # Rubrik ID of the Azure Subscription.
  id: String!

  # Subscription UUID as specified in Azure.
  nativeId: String!

  # Subscription name as specified in Azure.
  name: String!

  # One of the enabled features on this subscription.
  featureDetail: AzureCloudAccountFeatureDetail
}
# Input required to update the Azure subscription.
input AzureCloudAccountSubscriptionInput {
  # Rubrik ID of the Azure subscription to be updated.
  id: String = ""

  # Name or subscription alias to identify the Azure subscription to be updated.
  name: String = ""
}
# Azure cloud account with features.
type AzureCloudAccountSubscriptionWithFeatures {
  # Azure subscription details.
  subscription: AzureCloudAccountSubscription

  # Details of features of the cloud account.
  featureDetails: [AzureCloudAccountFeatureDetail!]!
}
# Azure Tenant with details of subscriptions that are configured for a given feature.
type AzureCloudAccountTenant {
  # Rubrik ID of the Azure Tenant.
  azureCloudAccountTenantRubrikId: String!

  # Domain Name of the Azure Tenant.
  domainName: String!

  # Count of subscriptions added to the Rubrik ecosystem for this Azure Tenant.
  subscriptionCount: Int!

  # Subscriptions added to the Rubrik ecosystem for this Azure Tenant.
  subscriptions: [AzureCloudAccountSubscriptionDetail!]!

  # Client ID of the application configured for authentication of the Azure tenant.
  clientId: String!

  # Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud.
  cloudType: AzureCloudType!

  # App name of the application configured for authentication of the Azure tenant.
  appName: String!

  # If Rubrik manages the application associated with this tenant, this field will be set to FALSE. However, if the application is customer-managed and the customers manually added the credentials,this field will have a different value.
  isAppRubrikManaged: Boolean!
}
# Azure Cloud Account Tenant with details of exocompute configured for subscriptions for a given feature.
type AzureCloudAccountTenantWithExoConfigs {
  # Rubrik ID of the Azure Tenant.
  rubrikId: String!

  # Azure Active Directory (AD) domain corresponding to subscription.
  domainName: String!

  # Number of subscriptions for the tenant.
  subscriptionCount: Int!

  # Client ID of azure application for the tenant.
  clientId: String!

  # Type of Azure Tenant. Can be Azure Public Cloud or Azure China Cloud.
  cloudType: AzureCloudType!

  # App name of Azure application for the tenant.
  appName: String!

  # If Rubrik manages the application associated with this tenant, this field will be set to FALSE. However, if the application is customer-managed and the customers manually added the credentials, this field will have a different value.
  isAppRubrikManaged: Boolean!

  # Details of subscriptions for the tenant.
  subscriptions: [AzureSubscriptionWithExoConfigs!]!
}
# Cloud compute settings input for the Azure archival target.
input AzureCloudComputeSettingsInput {
  # Client ID of the Application.
  appId: String = ""

  # Client secret key of the Application.
  appSecretKey: String = ""

  # Name of the Azure region.
  region: AzureRegion = UNKNOWN_AZURE_REGION

  # Storage account name of the Azure target.
  generalPurposeStorageName: String = ""

  # Storage container name of the Azure target.
  generalPurposeStorageContainer: String = ""

  # Resource Group of the Azure target.
  resourceGroup: String = ""

  # Virtual Network ID of the Azure target.
  virtualNetworkId: String = ""

  # Subnet ID of the Azure target.
  subnetId: String = ""

  # Security Group ID of the Azure target.
  securityGroupId: String = ""

  # Compute proxy settings of the Azure target.
  computeProxySettings: ProxySettingsInput

  # Cloud account ID of the Azure target.
  cloudAccountId: String = ""
}
# Azure native archival specific fields for Azure Target Template.
type AzureCloudNativeTargetCompanion {
  # Template type of the storage settings. Must be either SOURCE_REGION or SPECIFIC_REGION.
  cloudNativeLocTemplateType: CloudNativeLocTemplateType!

  # Tags for the Storage Account.
  storageAccountTags: [TagObject!]!

  # Region for the Storage Account. All the storage accounts created are General Purpose V2 Storage Account. GPV2 accounts are supported only in certain regions. List of Supported Regions: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy#redundancy-in-the-primary-region.
  storageAccountRegion: AzureRegion!

  # Storage Tier for the Storage Account. Only Cool, Hot storage tier are supported for now. More Info: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers.
  storageTier: AzureStorageTier!

  # Redundancy type for the Storage Account. Some examples are: LRS, ZRS, GRS etc. More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy.
  redundancy: AzureRedundancy!

  # Native ID of the Azure subscription.
  subscriptionNativeId: String!

  # List of configured customer managed keys per region.
  cmkInfo: [AzureCmk!]!
}
# Azure cloud type.
enum AzureCloudType {
  # Azure China Cloud.
  AZURECHINACLOUD

  # Azure public Cloud.
  AZUREPUBLICCLOUD

  # Azure Gov Cloud.
  AZUREUSGOVERNMENTCLOUD
}
# Customer managed key vault and key information for a region.
type AzureCmk {
  # Name of the key vault.
  keyVaultName: String!

  # Name of the customer managed key.
  keyName: String!

  # Region of the key vault.
  region: AzureRegion!
}
# Information about the customer-managed key and key vault for a region.
input AzureCmkInput {
  # Name of the key vault.
  keyVaultName: String = ""

  # Name of the customer-managed key.
  keyName: String = ""

  # Region of the key vault.
  region: AzureRegion = UNKNOWN_AZURE_REGION
}
# Compute setting for Azure Target.
type AzureComputeSettings {
  # Client ID of the Application.
  appId: String!

  # Name of the Azure region.
  region: AzureRegion!

  # Storage account name of the Azure target.
  generalPurposeStorageName: String!

  # Storage container name of the Azure target.
  generalPurposeStorageContainer: String!

  # Resource Group of the Azure target.
  resourceGroup: String!

  # Virtual Network ID of the Azure target.
  virtualNetworkId: String!

  # Subnet ID of the Azure target.
  subnetId: String!

  # Security Group ID of the Azure target.
  securityGroupId: String!

  # Compute proxy settings of the Azure target.
  computeProxySettings: ProxySettings

  # Cloud account ID of the AWS target.
  cloudAccountId: String!
}
# Details of Azure Encryption Key.
type AzureEncryptionKey {
  # Name of Encryption Key.
  keyName: String!
}
# Input for getting Encryption Keys in an Azure Key Vault.
input AzureEncryptionKeysInput {
  # The Rubrik ID of the cloud account.
  cloudAccountId: UUID!

  # Name of the Key Vault for which encryption keys are to be retrieved.
  keyVaultName: String!

  # Name of Azure Resource Group of the Key Vault.
  resourceGroupName: String!
}
# ES storage for Azure account.
input AzureEsConfigInput {
  # Storage name in Azure.
  storageAccount: String = ""

  # Storage resource group in Azure.
  resourceGroup: String = ""

  # Secret key for container.
  storageSecret: String = ""

  # Storage container name in Azure.
  containerName: String = ""

  # Should create a new container or not?
  shouldCreateContainer: Boolean = false

  # Specifies whether to enable support for immutable filesystem in SDFS.
  enableImmutability: Boolean = false

  # Azure managed identity information.
  managedIdentity: AzureManagedIdentityName
}
# Azure Exocompute configuration to add.
input AzureExocomputeAddConfigInputType {
  # The region for which the configuration is specified.
  region: AzureCloudAccountRegion!

  # Subnet native ID where Exocompute cluster should be launched.
  subnetNativeId: String!

  # Specifies if this configuration is managed by Rubrik.
  isRscManaged: Boolean!

  # Native ID of the subnet where the Exocompute pods should be launched.
  podSubnetNativeId: String

  # The CIDR range for pods if Exocompute is launched with the CNI overlay network plugin.
  podOverlayNetworkCidr: String
}
# Exocompute configurations details.
type AzureExocomputeConfigDetails {
  # ID for exocompute configuration.
  configUuid: String!

  # Region in which exocompute is configured. It will be in the format like EASTUS.
  region: AzureCloudAccountRegion!

  # Native ID of cluster subnet corresponding to the Exocompute configuration. This subnet will be used to allocate IP addresses to the nodes of the cluster. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni.
  subnetNativeId: String!

  # Native ID of cluster subnet corresponding to the Exocompute configuration. This subnet will be used to allocate IP addresses to the nodes of the cluster. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni.
  podSubnetNativeId: String!

  # The CIDR range assigned to pods when launching Exocompute with the CNI overlay network plugin mode. For more details, visit https://learn.microsoft.com/en-us/azure/aks/azure-cni-overlay.
  podOverlayNetworkCidr: String!

  # Specifies if Exocompute is managed by RSC.
  isRscManaged: Boolean!

  # Error message received while creating Exocompute configuration.
  message: String!

  # Status of the latest Exocompute health check.
  healthCheckStatus: ExocomputeHealthCheckStatus!
}
# Contains validation information, such as blockers or errors encountered in validating the Exocompute configuration.
type AzureExocomputeConfigValidationInfo {
  # Specifies the Exocompute configuration which needs validation.
  config: AzureExocomputeRegionConfig

  # Specifies whether the configuration has blocking security rules in its associated network security group attached to the subnet for running AKS cluster in the specific region. For more details, visit https://docs.microsoft.com/en-us/azure/aks/limit-egress-traffic#required-outbound-network-rules-and-fqdns-for-aks-clusters.
  hasBlockedSecurityRules: Boolean!

  # Specifies whether the configuration has the corresponding subnet address range overlap with Azure restricted address ranges. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#prerequisites.
  hasRestrictedAddressRangeOverlap: Boolean!

  # Specifies whether the subnet specified in configuration is delegated. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#prerequisites.
  isSubnetDelegated: Boolean!

  # Specifies whether the subnet specified in configuration is same for the pod and cluster. Pod and cluster subnets should be different for a valid configuration. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#dynamic-allocation-of-ip-addresses-and-enhanced-subnet-support-faqs.
  isPodAndClusterSubnetSame: Boolean!

  # Specifies whether the VNET associated with the subnet specified in configuration is different for the pod and cluster. Pod and cluster VNETs should be same for a valid configuration. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni#dynamic-allocation-of-ip-addresses-and-enhanced-subnet-support-faqs.
  isPodAndClusterVnetDifferent: Boolean!

  # Specifies whether the size of the cluster subnet provided for the Exocompute configuration is smaller than desired to create exo-cluster.
  isClusterSubnetSizeTooSmall: Boolean!

  # Specifies whether the size of the pod subnet provided for the Exocompute configuration is smaller than desired to create exo-cluster.
  isPodSubnetSizeTooSmall: Boolean!

  # Specifies whether there is an overlap between the pod CIDR range used for the CNI overlay network and the cluster subnet CIDR range. Make sure that there is no overlap between the pod CIDR range and the cluster subnet to prevent conflicts. For more details, visit https://learn.microsoft.com/en-us/azure/aks/azure-cni-overlay#ip-address-planning.
  isPodCidrAndSubnetCidrOverlap: Boolean!

  # Specifies whether the size of the pod CIDR range provided for Exocompute configuration using CNI overlay network mode is smaller than desired for creating an exo-cluster. For more details, visit https://learn.microsoft.com/en-us/azure/aks/azure-cni-overlay#ip-address-planning.
  isPodCidrRangeTooSmall: Boolean!

  # Error received while validating Exocompute configuration.
  errorMessage: String!
}
# Azure Exocompute configurations in an Azure subscription.
type AzureExocomputeConfigsInAccount {
  # Account details.
  azureCloudAccount: AzureCloudAccountSubscriptionDetail!

  # Feature details.
  featureDetails: AzureCloudAccountFeatureDetail!

  # List of regions for which Exocompute can be configured.
  exocomputeEligibleRegions: [AzureCloudAccountRegion!]!

  # Azure Exocompute configurations.
  configs: [AzureExocomputeGetConfigResponse!]!
}
# Azure Exocompute configuration.
type AzureExocomputeGetConfigResponse {
  # Unique ID of the Exocompute configuration.
  configUuid: String!

  # Azure region for the cloud account in which Exocompute is configured.
  region: AzureCloudAccountRegion!

  # Native ID of cluster subnet corresponding to the Exocompute configuration. This subnet will be used to allocate IP addresses to the nodes of the cluster. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni.
  subnetNativeId: String!

  # Native ID of cluster subnet corresponding to the Exocompute configuration. This subnet will be used to allocate IP addresses to the nodes of the cluster. For more details, visit https://docs.microsoft.com/en-us/azure/aks/configure-azure-cni.
  podSubnetNativeId: String!

  # The CIDR range assigned to pods when launching Exocompute with the CNI overlay network plugin mode. For more details, visit https://learn.microsoft.com/en-us/azure/aks/azure-cni-overlay.
  podOverlayNetworkCidr: String!

  # Specifies if Exocompute is managed by RSC.
  isRscManaged: Boolean!

  # Specifies the error message received if any.
  message: String!

  # Status of the latest Exocompute health check.
  healthCheckStatus: ExocomputeHealthCheckStatus!
}
# Represents an Azure Exocompute Configuration for a specific region. The Azure Exocompute Configuration includes the subnet native ID to be used for launching an Azure Kubernetes Service (AKS) Cluster in a specific region.
type AzureExocomputeRegionConfig {
  # Azure region for the cloud account in which Exocompute is configured.
  region: AzureCloudAccountRegion!

  # Native ID of the subnet, configured for usage in this region for the Exocompute cluster.
  subnetNativeId: String!

  # Specifies whether Exocompute is managed by Rubrik or not.
  isRscManaged: Boolean!

  # Native ID of the subnet, configured for usage in this region for the Exocompute pods.
  podSubnetNativeId: String!

  # The CIDR range assigned for pods when launching Exocompute with the CNI overlay network plugin mode.
  podOverlayNetworkCidr: String!
}
# A list of Azure-native protection features that require additional permissions to be enabled on the Azure subscription.
enum AzureFeatureForPermissionCheck {
  # Azure native cross region replication.
  AZURE_CROSS_REGION_REPLICATION

  # Powering off the virtual machine after performing virtual machine export from virtual machine snapshot.
  AZURE_EXPORT_VM_IN_POWERED_OFF_STATE

  # Listing availabilty set during export and restore virtual machine wizard.
  AZURE_LIST_AVAILABILITY_SET

  # Azure feature is unspecified.
  AZURE_UNSPECIFIED
}
# Input for getting Azure resource groups if they exist.
input AzureGetResourceGroupsInfoIfExistInput {
  # Session ID of the current OAuth session.
  sessionId: String!

  # Resource groups to get.
  resourceGroupInputs: [AzureNativeResourceGroupInfoInput!]!
}
# Host type for Azure resources.
enum AzureHostType {
  # Customer-hosted.
  CUSTOMER_HOST

  # Rubrik-hosted.
  RUBRIK_HOST

  # Undefined host type.
  UNDEFINED
}
# Input for setting Azure Immutability.
input AzureImmutabilitySettings {
  # Immutability lock duration for the Azure location, in days.
  lockDurationDays: Int = 0
}
# Immutability settings for azure cdm target.
type AzureImmutabilitySettingsType {
  # Number of days location is immutable.
  lockDurationDays: Int!

  # Specifies whether blob-level immutability is enabled.
  isBlobImmutabilityEnabled: Boolean!
}
# Azure instance types.
enum AzureInstanceType {
  # V5 Dense Node.
  STANDARD_D16S_V5

  # V5 Custom Node Type - STANDARD_D32S_V5.
  STANDARD_D32S_V5

  # V5 Standard Node.
  STANDARD_D8S_V5

  # V2 Dense Node.
  STANDARD_DS5_V2

  # No instance type selected.
  TYPE_UNSPECIFIED
}
# Details of Azure Key Vault.
type AzureKeyVault {
  # Name of Key Vault.
  keyVaultName: String!

  # Name of resource group in which the Key Vault resides.
  resourceGroupName: String!

  # Whether the Key Vault is accessible by the user assigned managed identity. False by default if userAssignedManagedIdentityPrincipalId is not provided.
  isAccessibleByUserAssignedManagedIdentity: Boolean!
}
# Input for getting Azure Key Vaults in a region.
input AzureKeyVaultsInput {
  # The Rubrik ID of the cloud account.
  cloudAccountId: UUID!

  # Region for which Key Vaults are to be retrieved.
  region: AzureRegion!

  # The Principal ID of the user assigned managed identity.
  userAssignedManagedIdentityPrincipalId: UUID
}
# AzureManagedIdentitiesRequest input for the Azure account.
input AzureManagedIdentitiesRequest {
  # User cloud account UUID.
  cloudAccountId: UUID!
}
# Managed identity information.
type AzureManagedIdentity {
  # Managed identity name.
  name: String!

  # Managed identity client ID.
  clientId: String!

  # Managed identity resource group.
  resourceGroup: String!
}
# Managed identity information.
input AzureManagedIdentityName {
  # Managed identity name.
  name: String = ""

  # Managed identity client ID.
  clientId: String = ""

  # Managed identity resource group.
  resourceGroup: String = ""
}
# Mapped Azure subscription for launching Exocompute.
type AzureMappedExocomputeSubscription {
  # Cloud account ID of the Azure subscription.
  id: String!

  # Native ID of the Azure subscription.
  nativeId: String!

  # Name of the Azure subscription.
  name: String!
}
# Azure Virtual Machine attached disks snapshot.
type AzureNativeAttachedDiskSpecificSnapshot {
  # Name of the attached disk.
  diskName: String!

  # Resource group name of the attached disk.
  diskResourceGroupName: String!

  # Native ID of the attached disk snapshot.
  snapshotNativeId: String!

  # Disk Storage Tier of the attached disk.
  diskStorageTier: String!

  # Specifies whether the attached disk is an OS disk or not.
  isOsDisk: Boolean!

  # Logical Unit Number(LUN) of the attached disk.
  lun: Int!

  # Source Disk Unique Native ID of the attached disk.
  sourceDiskUniqueNativeId: String!
}
# Filter to return Azure disks which are attached to one of the virtual machines in the given list of virtual machine IDs.
input AzureNativeAttachedVmFilter {
  # List of virtual machine IDs.
  virtualMachineIds: [String!]!
}
# An Azure availability set. An availability set is a logical grouping of VMs to facilitate redundancy and availability. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/availability-set-overview.
type AzureNativeAvailabilitySet {
  # Name of the availability set.
  name: String!

  # Native ID of the availability set.
  nativeId: String!
}
# Filters for listing Azure resource groups.
input AzureNativeCommonResourceGroupFilters {
  # Filter by name substring.
  nameSubstringFilter: NameSubstringFilter

  # Filter by subscription.
  subscriptionFilter: AzureNativeCommonRgSubscriptionFilter

  # Filter by region.
  regionFilter: AzureNativeRegionFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: AzureNativeRgSlaFilter
}
# The field type used to sort the resource groups.
enum AzureNativeCommonResourceGroupSortFields {
  # Use region name for sorting.
  AZURE_REGION

  # Use managed disk SLA Domain for sorting.
  AZURE_RG_DISK_EFFECTIVE_SLA

  # Use SQL Database SLA for sorting.
  AZURE_RG_SQL_DATABASE_DB_EFFECTIVE_SLA

  # Use Managed Instance Database SLA Domain for sorting.
  AZURE_RG_SQL_MANAGED_INSTANCE_DB_EFFECTIVE_SLA

  # Use subscription name for sorting.
  AZURE_RG_SUBSCRIPTION_NAME

  # Use virtual machine SLA Domain for sorting.
  AZURE_RG_VM_EFFECTIVE_SLA

  # Use resource group name for sorting.
  NAME
}
# Filters Azure resource groups that belong to the subscriptions identified by the list of Rubrik subscription IDs provided.
input AzureNativeCommonRgSubscriptionFilter {
  # List of Rubrik subscription IDs.
  subscriptionIds: [String!]!
}
# Details of the Azure Disk Encryption Set.
type AzureNativeDiskEncryptionSet {
  # Name of the Azure Disk Encryption Set.
  name: String!

  # Native ID of the Azure Disk Encryption Set.
  nativeId: String!
}
# Filter to decide whether to get disks with a configured exocompute.
input AzureNativeDiskExocomputeConnectedFilter {
  # Specifies whether to retrieve only those workloads whose regions have Exocompute configured.
  isConnected: Boolean!
}
# Filter to return Azure disks which have file indexing enabled.
input AzureNativeDiskFileIndexingFilter {
  # The list of status values to filter for.
  statuses: [AzureNativeFileIndexingStatus!]!
}
# Filters for list of Azure disks.
input AzureNativeDiskFilters {
  # Filter by disk name.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain of disks.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by disk resource group name.
  resourceGroupFilter: AzureNativeDiskResourceGroupFilter

  # Filter by subscription.
  subscriptionFilter: AzureNativeDiskSubscriptionFilter

  # Filter by disk region.
  regionFilter: AzureNativeRegionFilter

  # Filter by disk type.
  diskTypeFilter: AzureNativeDiskTypeFilter

  # Filter by attached Azure Virtual Machine.
  attachedVmFilter: AzureNativeAttachedVmFilter

  # Filter by disk relic status.
  relicFilter: RelicFilter

  # Filter by disk tags.
  tagFilter: AzureNativeTagFilter

  # Filter by Exocompute connection status in the disk region.
  exocomputeConnectedFilter: AzureNativeDiskExocomputeConnectedFilter

  # Filter disks where file indexing is enabled.
  fileIndexingFilter: AzureNativeDiskFileIndexingFilter
}
# Filter to return Azure disks which have resource group name in the given list of resource group names.
input AzureNativeDiskResourceGroupFilter {
  # Filter by list of resource group names.
  resourceGroupNames: [String!]!
}
# The field type used to sort the managed disks.
enum AzureNativeDiskSortFields {
  # Use SLA Domain assignment for sorting.
  ASSIGNED_SLA_DOMAIN

  # Use common resource group name for sorting.
  AZURE_DISK_CRG_NAME

  # Use subscription name from common resource group for sorting.
  AZURE_DISK_CRG_SUBSCRIPTION_NAME

  # Use disk size for sorting.
  AZURE_DISK_SIZE

  # Use disk type for sorting.
  AZURE_DISK_TYPE

  # Use region name for sorting.
  AZURE_REGION

  # Use managed disk SLA Domain for sorting.
  EFFECTIVE_SLA_DOMAIN

  # Use managed disk name for sorting.
  NAME
}
# Filter to return Azure disks which have rubrik subscription ID in the given list of rubrik subscription IDs.
input AzureNativeDiskSubscriptionFilter {
  # List of subscription IDs.
  subscriptionIds: [String!]!
}
# Filter to return Azure virtual machine which have VM size in the given list of VM sizes.
input AzureNativeDiskTypeFilter {
  # List of disk types.
  diskTypes: [String!]!
}
# List of disk types available for use in an Azure availability zone. Not all disk types are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/disks-types.
type AzureNativeExportCompatibleDiskTypes {
  # Availabity zone of the disk.
  availabilityZone: String!

  # Types of the disk.
  diskTypes: [AzureNativeManagedDiskType!]!
}
# The virtual machine sizes for an Azure availability zone. Not all virtual machine sizes are supported in all the regions. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes.
type AzureNativeExportCompatibleVmSizes {
  # Availability zone of the virtual machine (VM).
  availabilityZone: String!

  # Sizes of the virtual machines (VMs). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes.
  vmSizes: [String!]!
}
# File indexing status.
enum AzureNativeFileIndexingStatus {
  # File indexing is not enabled.
  DISABLED

  # File indexing is enabled.
  ENABLED

  # File indexing status is not specified.
  NOT_SPECIFIED
}
# An Azure native managed hierarchy object.
interface AzureNativeHierarchyObjectType {
  # Azure Native ID of the object.
  cloudNativeId: String!

  # The Azure region to which the object belongs.
  region: AzureNativeRegion!

  # List of tags that are assigned to the object.
  tags: [AzureTag!]!

  # Whether the object is a relic.
  isRelic: Boolean!

  # Azure Native name of the object.
  nativeName: String!

  # Resource Group of the Azure object.
  resourceGroup: AzureNativeResourceGroup!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of AzureNativeHierarchyObjectType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureNativeHierarchyObjectTypeConnection {
  # List of AzureNativeHierarchyObjectType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureNativeHierarchyObjectTypeEdge!]!

  # List of AzureNativeHierarchyObjectType objects.
  nodes: [AzureNativeHierarchyObjectType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureNativeHierarchyObjectType objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureNativeHierarchyObjectType object. This wrapper is used for pagination.
type AzureNativeHierarchyObjectTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureNativeHierarchyObjectType object wrapped by this edge.
  node: AzureNativeHierarchyObjectType!
}
# An Azure Native Managed Disk that refers to the block storage designed to be used with Azure Virtual Machines. Some examples are: ultra disks, premium solid-state drives (SSD), standard SSDs, and standard hard disk drives (HDD). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/managed-disks-overview.
type AzureNativeManagedDisk implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , AzureNativeHierarchyObjectType {
  # Azure region where the Managed Disk is located.
  region: AzureNativeRegion!

  # List of tags associated with the Managed Disk.
  tags: [AzureTag!]!

  # Specifies whether the Managed Disk is a relic. When the value is true, the Managed Disk is a relic. A Managed Disk is a relic when it is unprotected or deleted, but the previously taken snapshots of the Managed Disk continue to exist within the Rubrik ecosystem.
  isRelic: Boolean!

  # Type of the Operating System (OS) installed on the Managed Disk.
  osType: AzureNativeVmOsType!

  # Specifies whether Azure Disk Encryption (ADE) is enabled on the Managed Disk or not. When the value is true, ADE is enabled.
  isAdeEnabled: Boolean!

  # Size of the Managed Disk in gigabytes (GiB).
  diskSizeGib: Int!

  # Storage tier of the Managed Disk.
  diskStorageTier: AzureNativeManagedDiskType!

  # Number of Input/Output operations Per Second (IOPS) allowed for the Managed Disk.
  diskIopsReadWrite: Long!

  # Bandwidth allowed for the Managed Disk, in millions of bytes per second (MBps).
  diskMbpsReadWrite: Long!

  # Availability Zone associated with the Managed Disk.
  availabilityZone: String!

  # Attachment Specifications are properties of the Managed Disk,  like the ID of the virtual machine (VM) that is associated with the Managed Disk.
  attachmentSpecs: [AttachmentSpecsForManagedDisk!]!

  # Native ID of the Managed Disk.
  diskNativeId: String!

  # Specifies whether exocompute is configured for the region in which the Managed Disk exists or not. When the value is true, exocompute can be used to perform tasks like file indexing.
  isExocomputeConfigured: Boolean!

  # Specifies whether file indexing is enabled for this Managed Disk or not. When file indexing is enabled, Rubrik can scan through the file structure inside the managed disk in a protected environment where only the meta data like folder structure, file names, and file sizes will be readable by Rubrik.
  isFileIndexingEnabled: Boolean!

  # Native ID of the Managed Disk.
  cloudNativeId: String!

  # Azure Native name of the object.
  nativeName: String!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # Resource Group of the Azure Native Managed Disk.
  resourceGroup: AzureNativeResourceGroup!

  # All Virtual Machines (VMs) attached to the Managed Disk.
  allAttachedAzureNativeVirtualMachines: [AzureNativeVirtualMachine!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of AzureNativeManagedDisk objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureNativeManagedDiskConnection {
  # List of AzureNativeManagedDisk objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureNativeManagedDiskEdge!]!

  # List of AzureNativeManagedDisk objects.
  nodes: [AzureNativeManagedDisk!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureNativeManagedDisk objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureNativeManagedDisk object. This wrapper is used for pagination.
type AzureNativeManagedDiskEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureNativeManagedDisk object wrapped by this edge.
  node: AzureNativeManagedDisk!
}
# Azure Managed Disk types.
enum AzureNativeManagedDiskType {
  # Azure Managed Disk type is not specified.
  NOT_SPECIFIED

  # Azure Managed Disk type is Premium LRS.
  PREMIUM_LRS

  # Azure Managed Disk type is Standard SSD LRS.
  STANDARDSSD_LRS

  # Azure Managed Disk type is Standard LRS.
  STANDARD_LRS

  # Azure Managed Disk type is Ultra SSD LRS.
  ULTRASSD_LRS

  # Azure Managed Disk type is unknown.
  UNKNOWN
}
# The type of Azure Native feature Polaris supports.
enum AzureNativeProtectionFeature {
  # Protection on Azure blobs.
  BLOB

  # Protection on Azure SQL Databases.
  SQL_DB

  # Protection on Azure Native Managed Instances.
  SQL_MI

  # Protection on Azure Native Virtual Machines.
  VM
}
# Azure native regions.
enum AzureNativeRegion {
  # Azure native region is Australia Central.
  AUSTRALIA_CENTRAL

  # Azure native region is Australia Central 2.
  AUSTRALIA_CENTRAL2

  # Azure native region is Australia East.
  AUSTRALIA_EAST

  # Azure native region is Australia Southeast.
  AUSTRALIA_SOUTHEAST

  # Azure native region is Brazil South.
  BRAZIL_SOUTH

  # Azure native region is Canada Central.
  CANADA_CENTRAL

  # Azure native region is Canada East.
  CANADA_EAST

  # Azure native region is Central India.
  CENTRAL_INDIA

  # Azure native region is Central US.
  CENTRAL_US

  # Azure native region is China East.
  CHINA_EAST

  # Azure native region is China East 2.
  CHINA_EAST2

  # Azure native region is China North.
  CHINA_NORTH

  # Azure native region is China North 2.
  CHINA_NORTH2

  # Azure native region is East Asia.
  EAST_ASIA

  # Azure native region is East US.
  EAST_US

  # Azure native region is East US 2.
  EAST_US2

  # Azure native region is France Central.
  FRANCE_CENTRAL

  # Azure native region is France South.
  FRANCE_SOUTH

  # Azure native region is Germany North.
  GERMANY_NORTH

  # Azure native region is Germany West Central.
  GERMANY_WEST_CENTRAL

  # Azure native region is Israel Central.
  ISRAEL_CENTRAL

  # Azure native region is Italy North.
  ITALY_NORTH

  # Azure native region is Japan East.
  JAPAN_EAST

  # Azure native region is Japan West.
  JAPAN_WEST

  # Azure native region is Korea Central.
  KOREA_CENTRAL

  # Azure native region is Korea South.
  KOREA_SOUTH

  # Azure native region is North Central US.
  NORTH_CENTRAL_US

  # Azure native region is North Europe.
  NORTH_EUROPE

  # Azure native region is Norway East.
  NORWAY_EAST

  # Azure native region is Norway West.
  NORWAY_WEST

  # Azure native region is not specified.
  NOT_SPECIFIED

  # Azure native region is Poland Central.
  POLAND_CENTRAL

  # Azure native region is Qatar Central.
  QATAR_CENTRAL

  # Azure native region is Southeast Asia.
  SOUTHEAST_ASIA

  # Azure native region is South Africa North.
  SOUTH_AFRICA_NORTH

  # Azure native region is South Africa West.
  SOUTH_AFRICA_WEST

  # Azure native region is South Central US.
  SOUTH_CENTRAL_US

  # Azure native region is South India.
  SOUTH_INDIA

  # Azure native region is Sweden Central.
  SWEDEN_CENTRAL

  # Azure native region is Switzerland North.
  SWITZERLAND_NORTH

  # Azure native region is Switzerland West.
  SWITZERLAND_WEST

  # Azure native region is UAE Central.
  UAE_CENTRAL

  # Azure native region is UAE North.
  UAE_NORTH

  # Azure native region is UK South.
  UK_SOUTH

  # Azure native region is UK West.
  UK_WEST

  # Azure native region is US Gov Arizona.
  US_GOV_ARIZONA

  # Azure native region is US Gov Texas.
  US_GOV_TEXAS

  # Azure native region is US Gov Virginia.
  US_GOV_VIRGINIA

  # Azure native region is West Central US.
  WEST_CENTRAL_US

  # Azure native region is West Europe.
  WEST_EUROPE

  # Azure native region is West India.
  WEST_INDIA

  # Azure native region is West US.
  WEST_US

  # Azure native region is West US 2.
  WEST_US2

  # Azure native region is West US 3.
  WEST_US3
}
# Filter to return Azure virtual machine which have region in the given list of regions.
input AzureNativeRegionFilter {
  # List of regions to filter by.
  regions: [AzureNativeRegion!]!
}
# Azure native regions for replication.
enum AzureNativeRegionForReplication {
  # Azure native region for replication is Australia Central.
  AUSTRALIA_CENTRAL

  # Azure native region for replication is Australia Central 2.
  AUSTRALIA_CENTRAL2

  # Azure native region for replication is Australia East.
  AUSTRALIA_EAST

  # Azure native region for replication is Australia Southeast.
  AUSTRALIA_SOUTHEAST

  # Azure native region for replication is Brazil South.
  BRAZIL_SOUTH

  # Azure native region for replication is Canada Central.
  CANADA_CENTRAL

  # Azure native region for replication is Canada East.
  CANADA_EAST

  # Azure native region for replication is Central India.
  CENTRAL_INDIA

  # Azure native region for replication is Central US.
  CENTRAL_US

  # Azure native region for replication is China East.
  CHINA_EAST

  # Azure native region for replication is China East 2.
  CHINA_EAST2

  # Azure native region for replication is China North.
  CHINA_NORTH

  # Azure native region for replication is China North 2.
  CHINA_NORTH2

  # Azure native region for replication is East Asia.
  EAST_ASIA

  # Azure native region for replication is East US.
  EAST_US

  # Azure native region for replication is East US 2.
  EAST_US2

  # Azure native region for replication is France Central.
  FRANCE_CENTRAL

  # Azure native region for replication is France South.
  FRANCE_SOUTH

  # Azure native region for replication is Germany North.
  GERMANY_NORTH

  # Azure native region for replication is Germany West Central.
  GERMANY_WEST_CENTRAL

  # Azure native region for replication is Israel Central.
  ISRAEL_CENTRAL

  # Azure native region for replication is Italy North.
  ITALY_NORTH

  # Azure native region for replication is Japan East.
  JAPAN_EAST

  # Azure native region for replication is Japan West.
  JAPAN_WEST

  # Azure native region for replication is Korea Central.
  KOREA_CENTRAL

  # Azure native region for replication is Korea South.
  KOREA_SOUTH

  # Azure native region for replication is North Central US.
  NORTH_CENTRAL_US

  # Azure native region for replication is North Europe.
  NORTH_EUROPE

  # Azure native region for replication is Norway East.
  NORWAY_EAST

  # Azure native region for replication is Norway West.
  NORWAY_WEST

  # Azure native region for replication is not defined.
  NOT_DEFINED

  # Azure native region for replication is Poland Central.
  POLAND_CENTRAL

  # Azure native region for replication is Qatar Central.
  QATAR_CENTRAL

  # Azure native region for replication is the source region.
  SOURCE_REGION

  # Azure native region for replication is Southeast Asia.
  SOUTHEAST_ASIA

  # Azure native region for replication is South Africa North.
  SOUTH_AFRICA_NORTH

  # Azure native region for replication is South Africa West.
  SOUTH_AFRICA_WEST

  # Azure native region for replication is South Central US.
  SOUTH_CENTRAL_US

  # Azure native region for replication is South India.
  SOUTH_INDIA

  # Azure native region for replication is Sweden Central.
  SWEDEN_CENTRAL

  # Azure native region for replication is Switzerland North.
  SWITZERLAND_NORTH

  # Azure native region for replication is Switzerland West.
  SWITZERLAND_WEST

  # Azure native region for replication is UAE Central.
  UAE_CENTRAL

  # Azure native region for replication is UAE North.
  UAE_NORTH

  # Azure native region for replication is UK South.
  UK_SOUTH

  # Azure native region for replication is UK West.
  UK_WEST

  # Azure native region for replication is US Gov Arizona.
  US_GOV_ARIZONA

  # Azure native region for replication is US Gov Texas.
  US_GOV_TEXAS

  # Azure native region for replication is US Gov Virginia.
  US_GOV_VIRGINIA

  # Azure native region for replication is West Central US.
  WEST_CENTRAL_US

  # Azure native region for replication is West Europe.
  WEST_EUROPE

  # Azure native region for replication is West India.
  WEST_INDIA

  # Azure native region for replication is West US.
  WEST_US

  # Azure native region for replication is West US 2.
  WEST_US2

  # Azure native region for replication is West US 3.
  WEST_US3
}
# Azure region specification.
type AzureNativeRegionSpec {
  # Name of the Azure region.
  region: AzureNativeRegion!

  # Specifies whether Exocompute is configured in the region or not.
  isExocomputeConfigured: Boolean!
}
# An Azure Native Resource Group. Refers to a collection of resources in which multiple Azure services can reside.
type AzureNativeResourceGroup implements PolarisHierarchyObject , HierarchyObject {
  # Rubrik ID of the Azure Native Resource Group.
  azureSubscriptionRubrikId: UUID!

  # Count of Virtual Machines (VMs) in the Resource Group.
  vmsCount: Int!

  # Count of disks in the Resource Group.
  disksCount: Int!

  # Deprecated, use protectedObjectTypeToSla instead. Rubrik Service Level Agreement (SLA) assigned to the Virtual Machines (VMs) in the Resource Group.
  vmSla: AzureNativeResourceGroupSlaAssignment!

  # Deprecated, use protectedObjectTypeToSla instead. Rubrik Service Level Agreement (SLA) assigned to the disks in the Resource Group.
  diskSla: AzureNativeResourceGroupSlaAssignment!

  # Azure region associated with the Resource Group.
  region: AzureNativeRegion!

  # List of tags associated with the Resource Group.
  tags: [AzureTag!]!

  # A list of mappings between protected object types and SLA Domains.
  protectedObjectTypeToSla: [ProtectedObjectTypeToSla!]!

  # Count of Azure SQL databases in the Resource Group.
  azureSqlDatabaseCount: Int!

  # Count of Azure SQL Managed Instance databases in the Resource Group.
  azureSqlManagedInstanceDbCount: Int!

  # The number of Azure storage accounts in the resource group.
  azureStorageAccountCount: Int!

  # A list of mappings between object types and details about the backup setup.
  snappableTypeToBackupSetupSpecs: [WorkloadTypeToBackupSetupSpecs!]!

  # The authorized operations on the object.
  authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!

  # Azure Native Subscription of the Resource Group.
  subscription: AzureNativeSubscription!

  # Paginated ist of Azure Virtual Machines (VMs) in the Resource Group.
  azureNativeVirtualMachines(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for list of Azure virtual machines.
    sortBy: AzureNativeVirtualMachineSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder, virtualMachineFilters: AzureNativeVirtualMachineFilters): AzureNativeVirtualMachineConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of AzureNativeResourceGroup objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureNativeResourceGroupConnection {
  # List of AzureNativeResourceGroup objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureNativeResourceGroupEdge!]!

  # List of AzureNativeResourceGroup objects.
  nodes: [AzureNativeResourceGroup!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureNativeResourceGroup objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureNativeResourceGroup object. This wrapper is used for pagination.
type AzureNativeResourceGroupEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureNativeResourceGroup object wrapped by this edge.
  node: AzureNativeResourceGroup!
}
# Input for getting Azure resource group if it exists.
input AzureNativeResourceGroupInfoInput {
  # The native ID of the Azure subscription.
  subscriptionNativeId: UUID!

  # The name of the resource group.
  resourceGroupName: String!
}
# SLA Domain assignment type for the Azure resource group.
type AzureNativeResourceGroupSlaAssignment {
  # SLA Domain.
  slaAssignment: SlaAssignmentTypeEnum!

  # Effective SLA Domain.
  effectiveSlaDomain: GlobalSlaReply!

  # Configured SLA domain.
  configuredSlaDomain: GlobalSlaReply!
}
# Returns Azure resource groups containing objects that are protected by the SLA domains identified by the specified SLA IDs.
input AzureNativeRgSlaFilter {
  # List of SLA Domain IDs.
  effectiveSlaIds: [String!]!
}
# Root of Azure native hierarchy.
type AzureNativeRoot {
  # List of descendants of specific object type.
  objectTypeDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Type of objects to include.
    objectTypeFilter: HierarchyObjectTypeEnum!,

    # The hierarchy object filter.
    filter: [Filter!]): AzureNativeHierarchyObjectTypeConnection!
}
# An Azure security group. Security groups enable you to configure network security as a natural extension of an application's structure, allowing you to group virtual machines and define network security policies based on those groups. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/application-security-groups.
type AzureNativeSecurityGroup {
  # Name of the resource group associated with the security group.
  resourceGroupName: String!

  # Name of the security group.
  name: String!

  # Native ID of the security group.
  nativeId: String!
}
# The Point-in-Time (PiT) restore window of the Azure SQL Database. Database could be Azure SQL Managed Instance Database or Azure SQL Server Database.
type AzureNativeSqlDatabasePointInTimeRestoreWindow {
  # The earliest time to which database can be restored.
  earliestTime: DateTime

  # The latest time to which database can be restored.
  latestTime: DateTime
}
# Azure storage account.
type AzureNativeStorageAccount {
  # Azure ID of the storage account.
  id: String!

  # Name of the storage account.
  name: String!

  # Region where the storage account is located.
  region: AzureNativeRegion!

  # Name of the resource group where storage account is located.
  resourceGroupName: String!

  # Tags attached to the storage account.
  tags: [AzureTag!]!
}
# An Azure subnet. Subnets allow you to choose IP address range of your choice. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/network-overview#virtual-network-and-subnets.
type AzureNativeSubnet {
  # Name of the subnet.
  name: String!

  # Native ID of the subnet.
  nativeId: String!

  # List of subnet IP address prefixes in CIDR notation. The list can contain both IPv4 and IPv6 addresses. The list cannot be empty.
  addressPrefixes: [String!]!

  # Virtual Network (VNet) associated with the subnet.
  vnet: AzureNativeVirtualNetwork!
}
# An Azure Native Subscription. Refers to the logical entity that provides entitlement to deploy and consume Azure resources.
type AzureNativeSubscription implements PolarisHierarchyObject , HierarchyObject {
  # Native ID of the subscription.
  azureSubscriptionNativeId: String!

  # Tenant ID associated with the subscription.
  tenantId: String!

  # Status of the subscription at a given time. Some examples are: added, deleted, refreshed. For more information, see https://docs.microsoft.com/en-us/azure/cost-management-billing/manage/subscription-states.
  azureSubscriptionStatus: AzureSubscriptionStatus!

  # Last refresh time of the subscription, in UTC date-time format.
  lastRefreshedAt: DateTime

  # List of Azure region specifications associated with the subscription.
  regionSpecs: [AzureNativeRegionSpec!]!

  # Count of virtual machines (VMs) in the subscription.
  vmsCount: Int!

  # Count of managed disks in the subscription.
  disksCount: Int!

  # Count of Azure SQL databases in the subscription.
  azureSqlDatabaseDbCount: Int!

  # Count of Azure SQL Managed Instance databases in the subscription.
  azureSqlManagedInstanceDbCount: Int!

  # The number of Azure storage accounts in the subscription.
  azureStorageAccountCount: Int!

  # Type of Azure cloud, for example, Azure Public Cloud and Azure China Cloud.
  azureCloudType: AzureCloudType!

  # Details of features enabled for the subscription.
  enabledFeatures: [AzureNativeSubscriptionEnabledFeature!]!

  # A list of mappings between object types and details about the backup setup.
  snappableTypeToBackupSetupSpecs: [WorkloadTypeToBackupSetupSpecs!]!

  # Cloud account ID associated with the subscription.
  accountConnectionId: String!

  # The authorized operations on the object.
  authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!

  # Paginated list of all Azure Resource Groups in the subscription.
  azureNativeResourceGroups(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort fields for listing Azure resource groups.
    sortBy: AzureNativeCommonResourceGroupSortFields,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filters for listing Azure resource groups.
    commonResourceGroupFilters: AzureNativeCommonResourceGroupFilters): AzureNativeResourceGroupConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of AzureNativeSubscription objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureNativeSubscriptionConnection {
  # List of AzureNativeSubscription objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureNativeSubscriptionEdge!]!

  # List of AzureNativeSubscription objects.
  nodes: [AzureNativeSubscription!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureNativeSubscription objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureNativeSubscription object. This wrapper is used for pagination.
type AzureNativeSubscriptionEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureNativeSubscription object wrapped by this edge.
  node: AzureNativeSubscription!
}
# Details of a feature enabled in Azure Native Subscription.
type AzureNativeSubscriptionEnabledFeature {
  # Name of the feature enabled for the Azure Subscription.
  featureName: AzureNativeProtectionFeature!

  # Status of the feature at a given time. Some examples are: added, deleted, refreshed.
  status: AzureSubscriptionStatus!

  # Time, in UTC date-time format, when the feature was last refreshed.
  lastRefreshedAt: DateTime
}
# Filters for list of Azure subscriptions.
input AzureNativeSubscriptionFilters {
  # Filter by substring of subscription name.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter
}
# The field type used to sort the subscriptions.
enum AzureNativeSubscriptionSortFields {
  # Use SLA Domain assignment for sorting.
  ASSIGNED_SLA_DOMAIN

  # Use disk count for sorting.
  AZURE_SUBSCRIPTION_DISKCOUNT

  # Use virtual machine count for sorting.
  AZURE_SUBSCRIPTION_VMCOUNT

  # Use tenant ID for sorting.
  AZURE_TENANT_ID

  # Use subscription SLA Domain for sorting.
  EFFECTIVE_SLA_DOMAIN

  # Use subscription name for sorting.
  NAME
}
# Filter to return Azure objects which have at least one tag in the given list of tags.
input AzureNativeTagFilter {
  # Filter by tag.
  tagFilterParams: [TagFilterParams!]!
}
# An Azure Native Virtual Machine that refers to the Azure infrastructure as a service (IaaS) used to deploy persistent VMs. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/.
type AzureNativeVirtualMachine implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , AzureNativeHierarchyObjectType {
  # Azure region where the virtual machine (VM) is located.
  region: AzureNativeRegion!

  # Name of the Virtual Machine (VM).
  vmName: String!

  # Size type of the virtual machine (VM). For more information, see https://docs.microsoft.com/en-us/azure/virtual-machines/sizes-general.
  sizeType: String!

  # Name of the Virtual Network (VNet) associated with the virtual machine (VM).
  vnetName: String!

  # Name of the subnet associated with the virtual machine (VM).
  subnetName: String!

  # Specifies whether the virtual machine is a relic or not. A virtual machine is a relic when it is unprotected or deleted, but the previously taken snapshots of the virtual machine continue to exist within the Rubrik ecosystem.
  isRelic: Boolean!

  # List of tags associated with the virtual machine (VM).
  tags: [AzureTag!]!

  # Sequence of attachment specs for the virtual machine (VM).
  attachmentSpecs: [AttachmentSpecsForVirtualMachine!]!

  # Specifies whether Azure Disk Encryption (ADE) exists on the virtual machine (VM) or not.
  isAdeEnabled: Boolean!

  # Type of the Operating System (OS) installed on the virtual machine (VM).
  osType: AzureNativeVmOsType!

  # Availability Zone associated with the virtual machine (VM).
  availabilityZone: String!

  # Native ID of the the virtual machine (VM).
  virtuaMachineNativeId: String!

  # Specifies whether pre-script or post-script framework is enabled on the the virtual machine (VM) or not. When true, it facilitates application-consistent backups.
  isPreOrPostScriptEnabled: Boolean!

  # Application Consistent Specifications of the virtual machine (VM).
  vmAppConsistentSpecs: VmAppConsistentSpecsInternal

  # Specifies whether application consistent snapshots are enabled for this virtual machine (VM) or not. When enabled, Rubrik informs the Azure applications before taking snapshots, so apps can prepare. During the preparation phrase, Rubrik waits for the IO to be frozen and then the snapshot is taken. Once snapshot is taken, IO is unfreezed and the apps resume normal operation.
  isAppConsistencyEnabled: Boolean!

  # Native ID of the availability set associated with the virtual machine (VM).
  availabilitySetNativeId: String!

  # Specifies whether accelerated networking is enabled on the virtual machine (VM) or not. Accelerated Networking improves the network performance on the VM. For more information, see https://docs.microsoft.com/en-us/azure/virtual-machine-scale-sets/virtual-machine-scale-sets-networking.
  isAcceleratedNetworkingEnabled: Boolean!

  # Specifies whether exocompute is configured for the region in which the virtual machine (VM) exists, or not. When the value is true, exocompute can be used to perform tasks like file indexing.
  isExocomputeConfigured: Boolean!

  # Specifies whether file indexing is enabled for this virtual machine or not. When enabled, Rubrik can scan through the file structure inside the virtual machine in a protected environment where only the metadata, like folder structure, file names, and file sizes will be readable by Rubrik.
  isFileIndexingEnabled: Boolean!

  # Private IP address of the virtual machine.
  privateIp: String!

  # Native ID of the the virtual machine (VM).
  cloudNativeId: String!

  # Azure Native name of the object.
  nativeName: String!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # Resource Group of the Azure Virtual Machine (VM).
  resourceGroup: AzureNativeResourceGroup!

  # List of Managed Disks attached to the Azure Virtual Machine (VM).
  attachedManagedDisks: [AzureNativeManagedDisk!]!

  # Rubrik CDM host information for the Azure Virtual Machine added as a host to the cluster. The value is Null when the virtual machine is not added as a host on any Rubrik cluster.
  hostInfo: PhysicalHost

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of AzureNativeVirtualMachine objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureNativeVirtualMachineConnection {
  # List of AzureNativeVirtualMachine objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureNativeVirtualMachineEdge!]!

  # List of AzureNativeVirtualMachine objects.
  nodes: [AzureNativeVirtualMachine!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureNativeVirtualMachine objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureNativeVirtualMachine object. This wrapper is used for pagination.
type AzureNativeVirtualMachineEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureNativeVirtualMachine object wrapped by this edge.
  node: AzureNativeVirtualMachine!
}
# Filters for list of Azure virtual machines.
input AzureNativeVirtualMachineFilters {
  # Filter by name substring.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by resource group.
  resourceGroupFilter: AzureNativeVmResourceGroupFilter

  # Filter by subscription.
  subscriptionFilter: AzureNativeVmSubscriptionFilter

  # Filter by region.
  regionFilter: AzureNativeRegionFilter

  # Filter by virtual machine sizes.
  vmSizeFilter: AzureNativeVmSizeFilter

  # Filter by VNet.
  vnetFilter: AzureNativeVnetFilter

  # Filter by relics.
  relicFilter: RelicFilter

  # Filter by tag.
  tagFilter: AzureNativeTagFilter

  # Filter by configured Exocompute.
  exocomputeConnectedFilter: AzureNativeVmExocomputeConnectedFilter

  # Filter by file indexing status.
  fileIndexingFilter: AzureNativeVmFileIndexingFilter

  # Filter by the protection status of the App.
  appProtectionStatusFilter: CloudNativeInstaceAppProtectionFilter

  # Filter by RBS connection status.
  rbsStatusFilter: AzureVmCcOrCnpRbsConnectionStatusFilter
}
# The field type used to sort the virtual machines.
enum AzureNativeVirtualMachineSortFields {
  # Use SLA Domain assignment for sorting.
  ASSIGNED_SLA_DOMAIN

  # Use region name for sorting.
  AZURE_REGION

  # Use subnet name for sorting.
  AZURE_SUBNET_NAME

  # Use common resource group name for sorting.
  AZURE_VM_CRG_NAME

  # Use subscription name from common resource group for sorting.
  AZURE_VM_CRG_SUBSCRIPTION_NAME

  # Use virtual machine size for sorting.
  AZURE_VM_SIZE

  # Use VNet name for sorting.
  AZURE_VNET_NAME

  # Use virtual machine SLA Domain for sorting.
  EFFECTIVE_SLA_DOMAIN

  # Use virtual machine name for sorting.
  NAME
}
# An Azure virtual network (VNet). VNet enables secure communication with other VNets, the internet, and on-premise networks. For more information, see https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-overview.
type AzureNativeVirtualNetwork {
  # Name of the resource group associated with the Virtual Network (VNet).
  resourceGroupName: String!

  # Name of the Virtual Network (VNet).
  name: String!
}
# Filter to decide whether to get VMs with a configured exocompute.
input AzureNativeVmExocomputeConnectedFilter {
  # Specifies whether to get only those workloads whose regions have Exocompute configured.
  isConnected: Boolean!
}
# Filter to return Azure VMs which have file indexing enabled.
input AzureNativeVmFileIndexingFilter {
  # The list of status values to filter for.
  statuses: [AzureNativeFileIndexingStatus!]!
}
# OS type of an Azure virtual machine.
enum AzureNativeVmOsType {
  # The OS type is Linux.
  LINUX

  # The OS type is unknown.
  UNKNOWN

  # The OS type is Windows.
  WINDOWS
}
# Filter by resource group name.
input AzureNativeVmResourceGroupFilter {
  # List of resource group names.
  resourceGroupNames: [String!]!
}
# Filter by virtual machine size.
input AzureNativeVmSizeFilter {
  # List of virtual machine sizes.
  vmSizes: [String!]!
}
# Azure VM-specific snapshot information.
type AzureNativeVmSpecificSnapshot implements PolarisSpecificSnapshot {
  # OS disk snapshot attached to the Azure VM.
  osDiskSnapshot: AzureNativeAttachedDiskSpecificSnapshot

  # List of data disk snapshots attached to the Azure VM.
  dataDiskSnapshots: [AzureNativeAttachedDiskSpecificSnapshot!]!

  # ID of the snapshot.
  snapshotId: UUID!
}
# Filter by subscription ID.
input AzureNativeVmSubscriptionFilter {
  # List of subscription IDs.
  subscriptionIds: [String!]!
}
# Filter by VNet name.
input AzureNativeVnetFilter {
  # List of names of VNet.
  vnetNames: [String!]!
}
type AzureNetworkSecurityGroupResp {
  rulesStatus: AzureNetworkSecurityRulesStatus!
  reason: String!
}
# Status of Azure network security rules.
enum AzureNetworkSecurityRulesStatus {
  # NSG denies egress required for successful deployment.
  BLOCKING

  # NSG in good status.
  GOOD

  # NSG denies egress that might be required for successful deployment.
  MAYBE_BLOCKING
}
type AzureNetworkSubnetResp {
  valid: Boolean!
}
type AzureNetworkSubnetUnusedAddrResp {
  unusedAddr: Long!
}
# NsgRequest for Azure account.
input AzureNsgRequest {
  # Customer Azure cloud account ID.
  cloudAccountId: String = ""

  # NSG resource group.
  resourceGroup: String = ""
}
# Azure O365 Exocompute cluster details.
type AzureO365ExocomputeCluster {
  id: String!
  tenantId: String!
  subscriptionId: String!
  groupName: String!
  regionName: String!
  aksId: String!
  acrId: String!
  storageId: String!
  kmsId: String!
  isProvisioned: Boolean!
  scaleRuntime: ScaleRuntime
  orgId: String!
  orgName: String!
  orgStatus: String!
  aksVersion: String!
  setupConfiguration: String!
  azureAppId: String!
  polarisAccount: String!
  orgTenantId: String!
  azureCloudType: O365AzureCloudType!
  storageIds: ExocomputeStorageAccountIds

  # KMS and key details.
  kmsSpec: KmsSpec

  # Rubrik SaaS feature type using the Exocompute cluster.
  saasFeature: SaasFeature!

  # Storage account used for the backup of Colossus metadata.
  colossusBackupStorageAccountId: String!

  # Database IDs used for Zeus data store.
  databaseIds: ZeusDatabaseIds

  # Specifies the KEK backup start time to determine the last time the backup was run.
  kekBackupStartTime: DateTime

  # Storage account used for exocompute internal storage.
  exocomputeInternalStorageAccountId: String!

  # KMS host type details. The possible values are RUBRIK_HOST and CUSTOMER_HOST.
  kmsHostType: AzureHostType!

  # Azure host type details.
  hostType: AzureHostType!
}
# Exocompute configuration.
input AzureO365ExocomputeConfig {
  regionName: String!
  newGroupConfig: GroupConfig
  existingGroupConfig: GroupConfig
  newComputeConfig: NewComputeConfig
  existingComputeConfig: ExistingComputeConfig
  newStorageAccountConfig: NewStorageAccountConfig
  existingStorageAccountConfig: ExistingStorageAccountConfig
}
# Configuration for the completion of an Azure OAuth consent flow.
input AzureOauthConsentCompleteInput {
  # ID of the Microsoft 365 tenant.
  tenantId: String!

  # Authorization code for the consent flow.
  code: String!

  # CSRF token for the setup flow.
  stateToken: String!

  # Redirect URL for the consent flow.
  redirectUrl: String!

  # ID of the Azure app.
  azureAppId: String

  # Secret for the Azure app.
  azureAppSecret: String

  # Cloud type for Azure.
  azureCloudType: O365AzureCloudType!
}
type AzureOauthConsentKickoffReply {
  appClientId: String!
  csrfToken: String!
  govAppClientId: String!
}
# The resource for which OAuth access is requested.
enum AzureOauthResource {
  # Azure Resource Manager.
  AZURE_RESOURCE_MANAGER

  # Azure SQL resources.
  AZURE_SQL
}
# Redundancy value for the Azure resource.
# For more information, see https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy.
enum AzureRedundancy {
  # Geo-redundant storage.
  GRS

  # Geo-zone-redundant storage.
  GZRS

  # Locally redundant storage.
  LRS

  # Read access Geo-redundant storage.
  RA_GRS

  # Read access Geo-zone-redundant storage.
  RA_GZRS

  # Unknown Azure storage redundancy.
  UNKNOWN_AZURE_REDUNDANCY

  # Zone-redundant storage.
  ZRS
}
# Regions for Azure.
enum AzureRegion {
  # Azure region is East Asia.
  ASIA_EAST

  # Azure region is Southeast Asia.
  ASIA_SOUTHEAST

  # Azure region is Australia Central.
  AUSTRALIA_CENTRAL

  # Azure region is Australia Central 2.
  AUSTRALIA_CENTRAL2

  # Azure region is Australia East.
  AUSTRALIA_EAST

  # Azure region is Australia Southeast.
  AUSTRALIA_SOUTHEAST

  # Azure region is Brazil South.
  BRAZIL_SOUTH

  # Azure region is Canada Central.
  CANADA_CENTRAL

  # Azure region is Canada East.
  CANADA_EAST

  # Azure region is China East.
  CHINA_EAST

  # Azure region is China East 2.
  CHINA_EAST2

  # Azure region is China North.
  CHINA_NORTH

  # Azure region is North Europe.
  EUROPE_NORTH

  # Azure region is West Europe.
  EUROPE_WEST

  # Azure region is France Central.
  FRANCE_CENTRAL

  # Azure region is France South.
  FRANCE_SOUTH

  # Azure region is Germany Central.
  GERMANY_CENTRAL

  # Azure region is Germany Northeast.
  GERMANY_NORTHEAST

  # Azure region is Germany West Central.
  GERMANY_WEST_CENTRAL

  # Azure region is US Gov Arizona.
  GOV_US_ARIZONA

  # Azure region is US DoD Central.
  GOV_US_DOD_CENTRAL

  # Azure region is US DoD East.
  GOV_US_DOD_EAST

  # Azure region is US Gov Texas.
  GOV_US_TEXAS

  # Azure region is US Gov Virginia.
  GOV_US_VIRGINIA

  # Azure region is Central India.
  INDIA_CENTRAL

  # Azure region is South India.
  INDIA_SOUTH

  # Azure region is West India.
  INDIA_WEST

  # Azure region is Israel Central.
  ISRAEL_CENTRAL

  # Azure region is Italy North.
  ITALY_NORTH

  # Azure region is Japan East.
  JAPAN_EAST

  # Azure region is Japan West.
  JAPAN_WEST

  # Azure region is Korea Central.
  KOREA_CENTRAL

  # Azure region is Korea South.
  KOREA_SOUTH

  # Azure region is Norway East.
  NORWAY_EAST

  # Azure region is Norway West.
  NORWAY_WEST

  # Azure region is Poland Central.
  POLAND_CENTRAL

  # Azure region is Qatar Central.
  QATAR_CENTRAL

  # Azure region is South Africa North.
  SOUTH_AFRICA_NORTH

  # Azure region is South Africa West.
  SOUTH_AFRICA_WEST

  # Azure region is Sweden Central.
  SWEDEN_CENTRAL

  # Azure region is Switzerland North.
  SWITZERLAND_NORTH

  # Azure region is Switzerland West.
  SWITZERLAND_WEST

  # Azure region is UAE Central.
  UAE_CENTRAL

  # Azure region is UAE North.
  UAE_NORTH

  # Azure region is UK South.
  UK_SOUTH

  # Azure region is UK West.
  UK_WEST

  # Azure region is unknown.
  UNKNOWN_AZURE_REGION

  # Azure region is Central US.
  US_CENTRAL

  # Azure region is East US.
  US_EAST

  # Azure region is East US 2.
  US_EAST2

  # Azure region is North Central US.
  US_NORTH_CENTRAL

  # Azure region is South Central US.
  US_SOUTH_CENTRAL

  # Azure region is West US.
  US_WEST

  # Azure region is West US 2.
  US_WEST2

  # Azure region is West Central US.
  US_WEST_CENTRAL

  # Azure region is West US 3.
  WEST_US3
}
type AzureRegionsResp {
  regions: [Region!]!
}
# Target Azure subscription and region for replication.
type AzureReplicationTarget {
  # ID of the subscription.
  subscriptionId: String!

  # Name of the subscription.
  subscriptionName: String!

  # Region within the subscription.
  region: AzureNativeRegionForReplication!
}
type AzureResourceAvailabilityResp {
  available: Boolean!
  reason: String!
}
# Azure resource group.
type AzureResourceGroup {
  # The native ID of the resource group.
  nativeId: String!

  # The name of the resource group.
  name: String!

  # The region name of the resource group. Example: AustraliaEast.
  region: AzureNativeRegion!

  # The tags present in the resource group.
  tags: [AzureTag!]!
}
# Details of the Azure resource group if it exists.
type AzureResourceGroupInfo {
  # The native ID of the Azure subscription.
  subscriptionNativeId: UUID!

  # The name of the resource group.
  resourceGroupName: String!

  # The region of the resource group.
  region: AzureCloudAccountRegion!

  # The tags on the resource group.
  tags: [TagObject!]!
}
# Azure retrieval tier.
enum AzureRetrievalTier {
  # Unspecified Azure retrieval tier.
  AZURE_TIER_UNSPECIFIED

  # High priority Azure retrieval tier.
  HIGH_PRIORITY_AZURE_TIER

  # Standard Azure retrieval tier.
  STANDARD_AZURE_TIER
}
# Azure Role details.
type AzureRole {
  # ID of the role definition.
  roleDefinitionId: UUID!

  # Name of the role.
  roleDisplayName: String!

  # Name of the role assignment.
  roleAssignmentName: String!

  # Scope of the role in Azure. The format of the scope is `/subscriptions/<subscription-native-id>`.
  scope: String!

  # Specifies whether role is created by Rubrik via OAuth flow or manually by the customer without OAuth flow.
  isRubrikManaged: Boolean!
}
# Azure cloud account feature and permissions groups to use when determining the required role permissions.
input AzureRoleArmTemplateFeature {
  # The permissions groups to include for the feature. If the list is empty, all permission groups will be included.
  permissionsGroups: [PermissionsGroup!] = []

  # The cloud account feature.
  featureType: CloudAccountFeature!
}
type AzureRoleBasedAccount implements CloudAccount {
  # The subscription info with feature details.
  subscriptionWithFeatures: AzureSubscriptionWithFeaturesType!

  # The ID of this Cloud Account.
  cloudAccountId: String!

  # The name of this Cloud Account.
  name: String!

  # The description of this Cloud Account.
  description: String

  # The type of this Cloud Provider.
  cloudProvider: CloudAccountType!

  # The connection status of this Cloud Account.
  connectionStatus: ConnectionStatusType!
}
# Location for Azure workload.
type AzureSnappableLocation {
  # Azure Rubrik subscription name.
  subscriptionRubrikName: String

  # Azure Rubrik subscription ID.
  subscriptionRubrikId: String

  # Azure native region.
  azureRegion: String!
}
# The type of snapshot to be used in export or restore jobs.
enum AzureSnapshotType {
  # Use the archived snapshot.
  ARCHIVED

  # Use the replicated snapshot.
  REPLICATED

  # Use the source snapshot.
  SOURCE
}
# The type of backup storage redundancy for Azure SQL.
enum AzureSqlBackupStorageRedundancyType {
  # Geo-Redundant Storage.
  GRS

  # Locally-Redundant Storage.
  LRS

  # Zone-Redundant Storage.
  ZRS
}
# An Azure SQL Database. Refers to the fully managed SQL database built for the cloud. For more info, see https://azure.microsoft.com/en-us/products/azure-sql/database/.
type AzureSqlDatabaseDb implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject {
  # Name of the Azure SQL Database.
  databaseName: String!

  # Name of the Elastic Pool in which the Azure SQL Database resides.
  elasticPoolName: String!

  # Type of backup storage redundancy. Examples: LRS, ZRS, GRS.
  backupStorageRedundancy: AzureSqlBackupStorageRedundancyType!

  # Service Tier associated with the Azure SQL Database. Examples: Basic, General Purpose.
  serviceTier: String!

  # Azure region where the Azure SQL Database is located.
  region: AzureNativeRegion!

  # Maximum size of the Azure SQL Database, in bytes.
  maximumSizeInBytes: Long!

  # List of tags associated with the Azure SQL Database.
  tags: [AzureTag!]!

  # Specifies whether the Azure SQL Database is a relic or not. A database is a relic when it is unprotected or deleted, but the previously taken snapshots of the database continue to exist within the Rubrik ecosystem.
  isRelic: Boolean!

  # Specifies the status of the setup for taking the backup of the database.
  backupSetupStatus: AzureSqlDbBackupSetupStatus!

  # Specifies whether exocompute is configured for the database.
  exocomputeConfigured: Boolean!

  # Persistent storage configured for storing backups. None represents that persistent storage has not been configured.
  persistentStorage: PersistentStorage

  # Details of the setup for performing backups of the Azure SQL database.
  backupSetupSpecs: CloudNativeDatabaseBackupSetupSpecs

  # Specifies the service objective name of the Azure SQL Database.
  serviceObjectiveName: String!

  # Specifies whether the database is eligible for immutable backups or not.
  isEligibleForPersistentBackups: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # Azure SQL Database Server of the Azure SQL Database.
  azureSqlDatabaseServer: AzureSqlDatabaseServer!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# SLA Domain configuration for Azure SQL Database DB object.
type AzureSqlDatabaseDbConfig {
  # Specifies the number of days for which the Azure SQL Database DB logs will be retained. Number of days can range from 1 to 35.
  logRetentionInDays: Int!
}
# Input to configure the SLA Domain for Azure SQL Database DB.
input AzureSqlDatabaseDbConfigInput {
  # Specifies the number of days for which the Azure SQL Database DB logs will be retained. Number of days can range from 1 to 35.
  logRetentionInDays: Int = 0
}
# Paginated list of AzureSqlDatabaseDb objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureSqlDatabaseDbConnection {
  # List of AzureSqlDatabaseDb objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureSqlDatabaseDbEdge!]!

  # List of AzureSqlDatabaseDb objects.
  nodes: [AzureSqlDatabaseDb!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureSqlDatabaseDb objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureSqlDatabaseDb object. This wrapper is used for pagination.
type AzureSqlDatabaseDbEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureSqlDatabaseDb object wrapped by this edge.
  node: AzureSqlDatabaseDb!
}
# Input for exporting Long Term Retention backup of an Azure SQL Database.
input AzureSqlDatabaseDbLtrExport {
  # Rubrik ID of the snapshot from which database is being exported.
  sourceSnapshotRubrikId: UUID!

  # Resource Group in which database is being exported.
  destinationResourceGroupName: String!

  # Database Server in which database is being exported.
  destinationServerName: String!

  # Region in which database is being exported.
  destinationRegionName: String!

  # Specifies the redundancy of the backup of the destination database.
  dbBackupRedundancy: AzureSqlBackupStorageRedundancyType
}
# Input for exporting Point-in-Time backup of an Azure SQL Database.
input AzureSqlDatabaseDbPitExport {
  # Timestamp of point in time restore.
  restorePointInTime: DateTime!

  # Specifies the redundancy of the backup of the destination database.
  dbBackupRedundancy: AzureSqlBackupStorageRedundancyType
}
# Filters for list of Azure SQL Databases.
input AzureSqlDatabaseFilters {
  # Filter by name substring.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by resource group name.
  resourceGroupFilter: AzureSqlDatabaseResourceGroupFilter

  # Filter by subscription.
  subscriptionFilter: AzureSqlDatabaseSubscriptionFilter

  # Filter by region.
  regionFilter: AzureNativeRegionFilter

  # Filter by relics.
  relicFilter: RelicFilter

  # Filter by tag.
  tagFilter: AzureNativeTagFilter

  # Filter by server.
  serverFilter: CloudNativeDatabaseServerFilter
}
# Filter to return Azure SQL Databases which have resource group name in the given list of resource group names.
input AzureSqlDatabaseResourceGroupFilter {
  # List of names of resource groups.
  resourceGroupNames: [String!]!
}
# Retrieves an Azure SQL Database Server. Refers to the server the Azure SQL Database is a part of. For more info, see https://docs.microsoft.com/en-us/azure/azure-sql/database/logical-servers.
type AzureSqlDatabaseServer implements PolarisHierarchyObject , HierarchyObject {
  # Name of the Azure SQL Database Server.
  serverName: String!

  # List of tags associated with the Azure SQL Database Server.
  tags: [AzureTag!]!

  # Azure region where the Azure SQL Database Server is located.
  region: AzureNativeRegion!

  # The object from where the setup for performing backups of Azure SQL Databases is inherited.
  backupSetupSourceObject: PathNode

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # Resource Group of the Azure SQL Database Server.
  azureNativeResourceGroup: AzureNativeResourceGroup!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of AzureSqlDatabaseServer objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureSqlDatabaseServerConnection {
  # List of AzureSqlDatabaseServer objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureSqlDatabaseServerEdge!]!

  # List of AzureSqlDatabaseServer objects.
  nodes: [AzureSqlDatabaseServer!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureSqlDatabaseServer objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureSqlDatabaseServer object. This wrapper is used for pagination.
type AzureSqlDatabaseServerEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureSqlDatabaseServer object wrapped by this edge.
  node: AzureSqlDatabaseServer!
}
# An elastic pool for a SQL Database Server.
type AzureSqlDatabaseServerElasticPool {
  # Name of the elastic pool.
  name: String!
}
# Filters for list of Azure SQL Database Servers.
input AzureSqlDatabaseServerFilters {
  # Filter by name substring.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by resource group name.
  resourceGroupFilter: AzureSqlDatabaseServerResourceGroupFilter

  # Filter by subscription.
  subscriptionFilter: AzureSqlDatabaseServerSubscriptionFilter

  # Filter by region.
  regionFilter: AzureNativeRegionFilter
}
# Filter to return Azure SQL Database Servers which have resource group name in the given list of resource group names.
input AzureSqlDatabaseServerResourceGroupFilter {
  # List of names of resource groups.
  resourceGroupNames: [String!]!
}
# Fields on which the list of Azure SQL Database Servers can be sorted.
enum AzureSqlDatabaseServerSortFields {
  # Sort Azure SQL Database Servers by region.
  AZURE_SQL_DATABASE_SERVER_REGION

  # Sort Azure SQL Database Servers by resource group.
  AZURE_SQL_SERVER_RESOURCE_GROUP

  # Sort Azure SQL Database Servers by SLA Domain.
  EFFECTIVE_SLA_DOMAIN

  # Sort Azure SQL Database Servers by name.
  NAME
}
# Filter to return Azure SQL Database Servers which have resource group name in the given list of resource group names.
input AzureSqlDatabaseServerSubscriptionFilter {
  # List of subscription IDs.
  subscriptionIds: [String!]!
}
# Fields on which the list of Azure SQL Databases can be sorted.
enum AzureSqlDatabaseSortFields {
  # Sort Azure SQL Databases by region.
  AZURE_SQL_DATABASE_DB_REGION

  # Sort Azure SQL Databases by resource group.
  AZURE_SQL_DB_RESOURCE_GROUP

  # Sort Azure SQL Databases by SLA Domain.
  EFFECTIVE_SLA_DOMAIN

  # Sort Azure SQL Databases by name.
  NAME
}
# Filter to return Azure SQL Databases with subscription ID in the given list of Rubrik subscription IDs.
input AzureSqlDatabaseSubscriptionFilter {
  # List of subscription IDs.
  subscriptionIds: [String!]!
}
# Status of the setup for taking Azure SQL database backup.
enum AzureSqlDbBackupSetupStatus {
  # The Azure database configuration is invalid because Change Data Capture (CDC) is not enabled.
  CDC_DISABLED

  # The Azure database configuration is invalid because Change Data Capture (CDC) is misconfigured.
  CDC_INVALID_CONFIG

  # The Azure database configuration is invalid because of the presence of encrypted objects.
  ENCRYPTED_OBJECTS_EXIST

  # The Azure database configuration is invalid because the credentials are invalid.
  INVALID_CREDENTIALS

  # The Azure database configuration is invalid because of the presence of ledger tables.
  LEDGER_TABLES_EXIST

  # The Azure database configuration is invalid because the backup user is missing some required permissions.
  MISSING_PERMISSIONS

  # The Azure backup setup status is not specified.
  NOT_SPECIFIED

  # The Azure database backup setup is successful.
  SUCCESS

  # The Azure database configuration is invalid because of the presence of temporal system-versioned tables.
  TEMPORAL_TABLES_EXIST

  # The Azure database configuration is invalid due to the presence of multiple collations.
  UNSUPPORTED_COLLATION_CONFIG

  # The Azure database configuration is invalid because of the presence of unsupported columns.
  UNSUPPORTED_COLUMNS_EXIST
}
# Retrieves an Azure SQL Managed Instance Database. Refers to the database engine compatible with the latest SQL Server (Enterprise Edition) database engine. For more information, see https://docs.microsoft.com/en-us/azure/azure-sql/managed-instance/sql-managed-instance-paas-overview.
type AzureSqlManagedInstanceDatabase implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject {
  # Name of the Azure SQL Managed Instance Database.
  databaseName: String!

  # Azure region where the Azure SQL Managed Instance Database is located.
  region: AzureNativeRegion!

  # Specifies whether the Azure SQL Database is a relic or not. A database is a relic when it is unprotected or deleted, but the previously taken snapshots of the database continue to exist within the Rubrik ecosystem.
  isRelic: Boolean!

  # Specifies the status of the setup for taking the backup of the database.
  backupSetupStatus: AzureSqlDbBackupSetupStatus!

  # Specifies whether exocompute is configured for the database.
  exocomputeConfigured: Boolean!

  # Persistent storage configured for storing backups. None represents that persistent storage has not been configured.
  persistentStorage: PersistentStorage

  # Details of the setup for performing backups of the Azure SQL Managed Instance database.
  backupSetupSpecs: CloudNativeDatabaseBackupSetupSpecs

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # Azure SQL Managed Instance Server of the Azure SQL Managed Instance Database.
  azureSqlManagedInstanceServer: AzureSqlManagedInstanceServer!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of AzureSqlManagedInstanceDatabase objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureSqlManagedInstanceDatabaseConnection {
  # List of AzureSqlManagedInstanceDatabase objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureSqlManagedInstanceDatabaseEdge!]!

  # List of AzureSqlManagedInstanceDatabase objects.
  nodes: [AzureSqlManagedInstanceDatabase!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureSqlManagedInstanceDatabase objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureSqlManagedInstanceDatabase object. This wrapper is used for pagination.
type AzureSqlManagedInstanceDatabaseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureSqlManagedInstanceDatabase object wrapped by this edge.
  node: AzureSqlManagedInstanceDatabase!
}
# Filters for list of Azure SQL Managed Instance Databases.
input AzureSqlManagedInstanceDatabaseFilters {
  # Filter by name substring.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by resource group name.
  resourceGroupFilter: AzureSqlManagedInstanceDatabaseResourceGroupFilter

  # Filter by subscription.
  subscriptionFilter: AzureSqlManagedInstanceDatabaseSubscriptionFilter

  # Filter by region.
  regionFilter: AzureNativeRegionFilter

  # Filter by relic.
  relicFilter: RelicFilter

  # Filter by server.
  serverFilter: CloudNativeDatabaseServerFilter
}
# Filter to return Azure SQL Managed Instance Databases which have resource group name in the given list of resource group names.
input AzureSqlManagedInstanceDatabaseResourceGroupFilter {
  # List of names of resource groups.
  resourceGroupNames: [String!]!
}
# Fields on which the list of Azure SQL Managed Instance Databases can be sorted.
enum AzureSqlManagedInstanceDatabaseSortFields {
  # Sort Azure SQL Managed Instance Databases by resource group.
  AZURE_SQL_DB_RESOURCE_GROUP

  # Sort Azure SQL Managed Instance Databases by region.
  AZURE_SQL_MANAGED_INSTANCE_DB_REGION

  # Sort Azure SQL Managed Instance Databases by SLA Domain.
  EFFECTIVE_SLA_DOMAIN

  # Sort Azure SQL Managed Instance Databases by name.
  NAME
}
# Filter to return Azure SQL Managed Instance Databases which have resource group name in the given list of resource group names.
input AzureSqlManagedInstanceDatabaseSubscriptionFilter {
  # List of subscription IDs.
  subscriptionIds: [String!]!
}
# SLA Domain configuration for Azure SQL Managed Instance DB object.
type AzureSqlManagedInstanceDbConfig {
  # Specifies the number of days for which the Azure SQL Managed Instance DB logs will be retained. Number of days can range from 1 to 35.
  logRetentionInDays: Int!
}
# Input to configure the SLA Domain for Azure SQL Managed Instance DB.
input AzureSqlManagedInstanceDbConfigInput {
  # Specifies the number of days for which the Azure SQL Managed Instance DB logs will be retained. Number of days can range from 1 to 35.
  logRetentionInDays: Int = 0
}
# Input for exporting Long Term Retention backup of Azure SQL Managed Instance database.
input AzureSqlManagedInstanceDbLtrExport {
  # Rubrik ID of the snapshot from which database is being exported.
  sourceSnapshotRubrikId: UUID!

  # Region to which database is being exported.
  destinationRegionName: String!
}
# Input for exporting Point-in-Time backup of an Azure SQL Managed Instance database.
input AzureSqlManagedInstanceDbPitExport {
  # Timestamp of point in time restore.
  restorePointInTime: DateTime!
}
# Retrieves an Azure SQL Managed Instance Server. Refers to the server the Azure SQL Managed Instance Database is a part of.
type AzureSqlManagedInstanceServer implements PolarisHierarchyObject , HierarchyObject {
  # Name of the Azure SQL Managed Instance Server.
  serverName: String!

  # List of tags associated with the Azure SQL Managed Instance Server.
  tags: [AzureTag!]!

  # Count of the vCores in the Azure SQL Managed Instance Server.
  vCoresCount: Int!

  # Type of backup storage redundancy. Examples: LRS, ZRS, GRS.
  backupStorageRedundancy: AzureSqlBackupStorageRedundancyType!

  # Storage size of the Azure SQL Managed Instance Server, in GiB.
  storageSizeGib: Long!

  # Name of the Instance Pool the Azure SQL Managed Instance Server belongs to.
  instancePoolName: String!

  # Service Tier associated with the Azure SQL Managed Instance Server.
  serviceTier: String!

  # Azure region where the Azure SQL Managed Instance Server is located.
  region: AzureNativeRegion!

  # Name of the Virtual Network associated with the Azure SQL Managed Instance Server.
  vnetName: String!

  # Name of the subnet associated with the Azure SQL Managed Instance Server.
  subnetName: String!

  # The object from where the setup for performing backups of Azure SQL Managed Instance Databases is inherited.
  backupSetupSourceObject: PathNode

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # Resource Group of the Azure SQL Managed Instance Server.
  azureNativeResourceGroup: AzureNativeResourceGroup!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of AzureSqlManagedInstanceServer objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureSqlManagedInstanceServerConnection {
  # List of AzureSqlManagedInstanceServer objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureSqlManagedInstanceServerEdge!]!

  # List of AzureSqlManagedInstanceServer objects.
  nodes: [AzureSqlManagedInstanceServer!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureSqlManagedInstanceServer objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureSqlManagedInstanceServer object. This wrapper is used for pagination.
type AzureSqlManagedInstanceServerEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureSqlManagedInstanceServer object wrapped by this edge.
  node: AzureSqlManagedInstanceServer!
}
# Filters for list of Azure SQL Managed Instance Servers.
input AzureSqlManagedInstanceServerFilters {
  # Filter by name substring.
  nameSubstringFilter: NameSubstringFilter

  # Filter by effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by resource group name.
  resourceGroupFilter: AzureSqlManagedInstanceServerResourceGroupFilter

  # Filter by subscription.
  subscriptionFilter: AzureSqlManagedInstanceServerSubscriptionFilter

  # Filter by region.
  regionFilter: AzureNativeRegionFilter

  # Filter by tag.
  tagFilter: AzureNativeTagFilter
}
# Filter to return Azure SQL Managed Instance Database Servers which have resource group name in the given list of resource group names.
input AzureSqlManagedInstanceServerResourceGroupFilter {
  # List of names of resource groups.
  resourceGroupNames: [String!]!
}
# Fields on which the list of Azure SQL Managed Instance Servers can be sorted.
enum AzureSqlManagedInstanceServerSortFields {
  # Sort Azure SQL Managed Instance Servers by region.
  AZURE_SQL_MANAGED_INSTANCE_SERVER_REGION

  # Sort Azure SQL Managed Instance Servers by resource group.
  AZURE_SQL_SERVER_RESOURCE_GROUP

  # Sort Azure SQL Managed Instance Servers by SLA Domain.
  EFFECTIVE_SLA_DOMAIN

  # Sort Azure SQL Managed Instance Servers by name.
  NAME
}
# Filter to return Azure SQL Managed Instance Database Servers which have resource group name in the given list of resource group names.
input AzureSqlManagedInstanceServerSubscriptionFilter {
  # List of subscription IDs.
  subscriptionIds: [String!]!
}
# Input for exporting from Rubrik managed persistent backup.
input AzureSqlPersistentBackupExportInput {
  # Rubrik ID of the snapshot from which database is being exported.
  sourceSnapshotRubrikId: UUID!

  # Login credentials of the server where the new database needs to be created.
  destinationServerCredentials: LoginCredentials

  # Mechanism for SQL Server authentication.
  authMechanism: SqlAuthenticationMechanism

  # Session ID for the OAuth session. Specify this when using AAD authentication mechanism.
  sessionId: String

  # Specifies the redundancy of the backup of the destination database.
  dbBackupRedundancy: AzureSqlBackupStorageRedundancyType
}
# The Azure Storage accounts access tier.
enum AzureStorageAccessTier {
  # The Azure Storage account access is Archive.
  ARCHIVE

  # The Azure Storage account access is Cold.
  COLD

  # The Azure Storage account access is Cool.
  COOL

  # The Azure Storage account access is Hot.
  HOT

  # The Azure Storage account access tier is unknown.
  UNKNOWN_STORAGE_TIER
}
# An Azure storage account that contains Azure storage data objects including blobs, file shares, queues, tables, and disks. For more information, see https://learn.microsoft.com/en-us/azure/storage/common/storage-account-overview.
type AzureStorageAccount implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , AzureNativeHierarchyObjectType {
  # Tags attached to the storage account.
  tags: [AzureTag!]!

  # Specifies whether the storage account is a relic. When the value is true, the storage account is a relic. A storage account is a relic when it is unprotected or deleted, but the previously taken snapshots of the storage account continue to exist within the Rubrik ecosystem.
  isRelic: Boolean!

  # Native ID of the storage account.
  cloudNativeId: String!

  # Native name of the storage account.
  nativeName: String!

  # Region where the storage account is located.
  region: AzureNativeRegion!

  # The used capacity bytes of the storage account.
  usedCapacityBytes: Long!

  # The access tier of the storage account.
  accessTier: AzureStorageAccessTier!

  # The number of containers in the storage account.
  numContainers: Long!

  # The Storage Account type.
  accountKind: AzureStorageAccountKind!

  # Specifies whether hierarchical namespace is enabled for the storage account or not. When the value is true, hierarchical namespace is enabled.
  isHierarchicalNamespaceEnabled: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # Resource Group of the Azure storage account.
  resourceGroup: AzureNativeResourceGroup!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Azure storage account information.
type AzureStorageAccountCcprovision {
  # Azure storage account name.
  name: String!

  # Azure storage account resource group.
  resourceGroup: String!
}
# The Azure Storage account type.
enum AzureStorageAccountKind {
  # The Azure Storage account type is Blob Storage.
  BLOB_STORAGE

  # The Azure Storage account type is Block Blob Storage.
  BLOCK_BLOB_STORAGE

  # The Azure Storage account type is File Storage.
  FILE_STORAGE

  # The Azure Storage account type is legacy General Purpose Storage V1.
  STORAGE

  # The Azure Storage account type is unknown.
  STORAGE_KIND_UNKNOWN

  # The Azure Storage account type is General Purpose Storage V2.
  STORAGE_V2
}
# Azure storage accounts input by region.
input AzureStorageAccountsByRegionInput {
  # Cloud account ID.
  cloudAccountId: String = ""

  # Azure region.
  region: String = ""
}
# Azure storage accounts input by resource group.
input AzureStorageAccountsReq {
  # Cloud account ID.
  cloudAccountId: String = ""

  # Resource group in Azure.
  resourceGroup: String = ""
}
# Storage Tier for the storage accounts/containers.
# For more information, see https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers.
enum AzureStorageTier {
  # Optimized for storing data that is rarely accessed.
  ARCHIVE

  # Optimized for storing data that is accessed frequently.
  COOL

  # Optimized for storing data that is infrequently accessed.
  HOT

  # Unknown storage tier.
  UNKNOWN_STORAGE_TIER
}
# SubnetRequest for Azure account.
input AzureSubnetReq {
  # Customer Azure cloud account ID.
  cloudAccountId: String = ""

  # VNet resource group.
  resourceGroup: String = ""

  # Azure VNet name.
  vnetName: String = ""
}
type AzureSubscription {
  id: String!
  name: String!
}
# Paginated list of AzureSubscription objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type AzureSubscriptionConnection {
  # List of AzureSubscription objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [AzureSubscriptionEdge!]!

  # List of AzureSubscription objects.
  nodes: [AzureSubscription!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of AzureSubscription objects matching the request arguments.
  count: Int!
}
# Wrapper around the AzureSubscription object. This wrapper is used for pagination.
type AzureSubscriptionEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual AzureSubscription object wrapped by this edge.
  node: AzureSubscription!
}
# Input required to add the Azure subscription.
input AzureSubscriptionInput {
  # The native subscription ID of the Azure subscription.
  nativeId: String!

  # Name or subscription alias to identify the Azure subscription.
  name: String!
}
# Missing permissions on the Azure Subscription.
type AzureSubscriptionMissingPermissions {
  # Native ID of the Azure Subscription.
  subscriptionNativeId: String!

  # List of missing permissions on the Azure Subscription.
  missingPermissions: [String!]!
}
# Status of an Azure subscription.
enum AzureSubscriptionStatus {
  # The Azure subscription has been added.
  ADDED

  # The Azure subscription has been deleted.
  DELETED

  # The Azure subscription is in the process of getting deleted.
  DELETING

  # The deletion of the Azure subscription has failed.
  DELETION_FAILED

  # The Azure subscription has been refreshed.
  REFRESHED

  # The Azure subscription is refreshing.
  REFRESHING

  # The Azure subscription has failed to refresh.
  REFRESH_FAILED
}
# Azure Cloud Account Subscription with exocompute configurations for feature configured.
type AzureSubscriptionWithExoConfigs {
  # Rubrik ID for Azure subscription.
  azureSubscriptionRubrikId: String!

  # Native ID for Azure subscription.
  azureSubscriptionNativeId: String!

  # Name of Azure subscription.
  subscriptionName: String!

  # Feature details of subscription.
  featureDetail: AzureCloudAccountFeatureDetail!

  # Mapped Exocompute subscription for launching Exocompute.
  mappedExocomputeSubscription: AzureMappedExocomputeSubscription

  # Cloud Account IDs of subscriptions that are mapped to this Exocompute account.
  mappedCloudAccountIds: [UUID!]! @deprecated(reason: "Use mappedCloudAccounts instead. The cloud account IDs of the mapped accounts are contained in the field 'mappedCloudAccounts'.")

  # Exocompute configurations of the subscription.
  exocomputeConfigs: [AzureExocomputeConfigDetails!]!

  # Exocompute configurations available through mapped subscription.
  mappedExocomputeConfigs: [AzureExocomputeConfigDetails!]!

  # Cloud Account details of subscriptions that are mapped to this Exocompute account.
  mappedCloudAccounts: [CloudAccountDetails!]!
}
# Azure subscription with Exocompute mapping, if present.
type AzureSubscriptionWithExocomputeMapping {
  # Azure subscription cloud account ID.
  id: String!

  # Azure subscription native ID.
  nativeId: String!

  # Azure subscription native name.
  name: String!

  # Mapped Exocompute Azure subscription details.
  mappedExocomputeSubscription: AzureMappedExocomputeSubscription
}
# Azure subscription with features.
type AzureSubscriptionWithFeaturesType {
  # Azure subscription cloud account ID.
  id: String!

  # Cloud type of the Azure subscription.
  cloudType: AzureCloudType!

  # Azure subscription native ID.
  nativeId: String!

  # Azure subscription native name.
  name: String!

  # Azure tenant ID.
  customerTenantId: String!

  # Feature details for the cloud account.
  featureDetails: [AzureCloudAccountFeatureDetail!]!
}
# Azure Tag.
type AzureTag {
  # Key of the Azure tag.
  key: String!

  # Value of the Azure tag.
  value: String!
}
# Specific info for Azure Target Template.
type AzureTargetTemplate implements TargetTemplate {
  # Storage account name of the Azure target.
  storageAccountName: String!

  # Container name prefix of the Azure target.
  containerNamePrefix: String!

  # Instance type of the Azure target.
  instanceType: InstanceTypeEnum!

  # Compute settings of the Azure target.
  computeSettings: AzureComputeSettings

  # Proxy settings of the Azure target.
  proxySettings: ProxySettings

  # Specifies whether Azure target has consolidation enabled or not.
  isConsolidationEnabled: Boolean!

  # Cloud native companion information of the Azure target.
  cloudNativeCompanion: AzureCloudNativeTargetCompanion

  # Cloud Account information of the Azure target.
  cloudAccount: CloudAccount!

  # The type of this Target.
  targetType: TargetType!
}
# Azure user-assigned Managed Identity details.
type AzureUserAssignedManagedIdentity {
  # Name of the managed identity.
  name: String!

  # Native ID of the managed identity.
  nativeId: String!

  # ID of the service principal object associated with the managed identity.
  principalId: String!
}
type AzureUserRoleResp {
  subscriptionOwner: RoleStatus
  globalAdministrator: RoleStatus
}
# Input to filter Azure Virtual Machines based on RBS connection status.
input AzureVmCcOrCnpRbsConnectionStatusFilter {
  # Connection status of the Rubrik Backup Service (RBS) installed on the instance.
  status: CloudInstanceRbsConnectionStatus!
}
# Azure Virtual Machine configuration parameters.
input AzureVmConfig {
  # Virtual Machine resource group.
  resourceGroup: String = ""

  # Cloud image CDM version.
  cdmVersion: String = ""

  # Virtual Machine location or region.
  location: String = ""

  # Node total attached disk capacity in GB.
  nodeSizeGb: Int = 0

  # Network resource group.
  networkResourceGroup: String = ""

  # VNet resource group.
  vnetResourceGroup: String = ""

  # Network security group.
  networkSecurityGroup: String = ""

  # Resource group for network security group.
  networkSecurityResourceGroup: String = ""

  # Name of the Virtual Machine VNet.
  vnet: String = ""

  # Name of the Virtual Machine subnet.
  subnet: String = ""

  # Tags attached to the Virtual Machine.
  tags: String = ""

  # Name of the Virtual Machine image to deploy.
  vmImage: String = ""

  # Name of CDM product.
  cdmProduct: String = ""

  # Standard or dense node.
  vmType: VmType

  # Azure instance type to be used for nodes.
  instanceType: AzureInstanceType
}
# VNetRequest for Azure account.
input AzureVnetReq {
  # Customer Azure cloud account ID.
  cloudAccountId: String = ""

  # VNet resource group.
  resourceGroup: String = ""
}
# Configuration for Azure AD Directory backup.
input BackupAzureAdDirectoryInput {
  # Workload FIDs of the Azure AD directories to back up.
  workloadFids: [UUID!]!

  # SLA Domain ID required for snapshot retention.
  snapshotRetentionSlaId: UUID
}
# Represents the status of the backup for a specific M365 snapshot.
type BackupEventStatus {
  # Status of the backup.
  status: SnapshotServiceBackupStatus!

  # Number of items skipped in the backup.
  skippedItemCount: Long!
}
# Configuration for O365 Mailbox backup.
input BackupM365MailboxInput {
  # Rubrik IDs of the mailboxes to backup.
  workloadUuids: [UUID!]!
}
# Configuration for O365 OneDrive backup.
input BackupM365OnedriveInput {
  # Rubrik IDs of the OneDrives to backup.
  workloadUuids: [UUID!]!
}
# Configuration for O365 Sharepoint Drive backup.
input BackupM365SharepointDriveInput {
  # Rubrik IDs of the sharepoint drives to backup.
  workloadUuids: [UUID!]!
}
# Configuration for O365 Team backup.
input BackupM365TeamInput {
  # Rubrik IDs of the teams to backup.
  workloadUuids: [UUID!]!
}
# Configuration for O365 OneDrive backup.
input BackupO365OnedriveInput {
  # Polaris IDs of the OneDrives to backup.
  snappableUuids: [UUID!]!
}
# Configuration for O365 SharePoint List backup.
input BackupO365SharePointListInput {
  # Polaris ID of O365 list object.
  snappableUuid: UUID!
}
# Configuration for O365 SharePoint Site backup.
input BackupO365SharePointSiteInput {
  # Workload ID of SharePoint site object.
  siteFid: UUID!
}
# Configuration for O365 Sharepoint Drive backup.
input BackupO365SharepointDriveInput {
  # Polaris IDs of the sharepoint drives to backup.
  snappableUuids: [UUID!]!
}
# Configuration for O365 Team backup.
input BackupO365TeamInput {
  # Polaris IDs of the teams to backup.
  snappableUuids: [UUID!]!
}
# The object that needs to be backed up.
input BackupObject {
  # Forever UUID of the object.
  objectFid: String = ""

  # ID of the event series.
  eventSeriesId: String = ""

  # The monitoring ID.
  monitoringId: String = ""
}
# The configuration of the backup operation.
input BackupRunConfig {
  # Specifies whether the backup job should be run immediately.
  runNow: Boolean = false
}
# Supported in v5.1+
type BackupTaskDiagnosticInfo {
  # Supported in v5.1+
  # The expected completion time of the task.
  expectedEndTime: DateTime

  # Supported in v5.1+
  # The scheduled start time of the task.
  queueTime: DateTime
  taskStatus: DiagnosticTaskStatus!
}
# Specifies backup window parameters.
type BackupWindow {
  # Duration of backup window in hours.
  durationInHours: Int!

  # Start time attributes of the backup window.
  startTimeAttributes: StartTimeAttributes
}
# Specifies backup window parameters.
input BackupWindowInput {
  # Duration of backup window in hours.
  durationInHours: Int = 0

  # Start time attributes of the backup window.
  startTimeAttributes: StartTimeAttributesInput
}
# Supported in v5.0+
type BaseGuestCredentialDetail {
  # Required. Supported in v5.0+
  username: String!
}
# Supported in v5.0+
input BaseGuestCredentialInput {
  # Required. Supported in v5.0+
  # Password for the account used to login to the VM guest OS.
  password: String!

  # Required. Supported in v5.0+
  # Username for the account used to login to the VM guest OS. To include a domain, use the format <domain>\<username>.
  username: String!
}
# Supported in v5.0+
input BaseOnDemandSnapshotConfigInput {
  # Supported in v5.0+
  slaId: String
}
# Supported in v5.0+
type BaseSnapshotSummary {
  # Supported in v5.0+
  archivalLocationIds: [String!]!

  # Supported in v5.0+
  # v5.0-v5.3: Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
  # v6.0-v7.0: Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived. 2 means the snapshot is archived. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at the archival location.
  # 
  # v8.0+: Integer value that represents the archival state of a snapshot. 0 means the snapshot is not archived to any archival location. 2 means the snapshot is archived to any archival location. 3 means the snapshot is downloaded from the archival location. 4 means the snapshot is in the process of being downloaded from the archival location. 6 means the snapshot is stored locally and at least on one of the archival locations.
  cloudState: Long

  # Supported in v5.0+
  consistencyLevel: String

  # Required. Supported in v5.0+
  date: DateTime

  # Supported in v5.0+
  expirationDate: DateTime

  # Required. Supported in v5.0+
  id: String!

  # Supported in v5.0+
  # Integer value representing the state of the indexing job for a snapshot. 0 means that the indexing has not begun or is in progress. 1 means indexing completed successfully. 2 means that the indexer failed to process this snapshot.
  indexState: Long

  # Required. Supported in v5.0+
  isOnDemandSnapshot: Boolean!

  # Required. Supported in v5.0+
  replicationLocationIds: [String!]!

  # Required. Supported in v5.0+
  # v5.0-v5.1:
  # v5.2+: (Deprecated) For a policy based snapshot this parameter contains the ID of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
  slaId: String!

  # Required. Supported in v5.0+
  # v5.0-v5.1:
  # v5.2+: (Deprecated) For a policy based snapshot this parameter contains the name of the SLA Domain currently assigned to the data source of that snapshot. For an on demand snapshot this field corresponds to the SLA Domain that was assigned when the snapshot was taken. A data source, and individual snapshots, can be reassigned to a different SLA Domain, or the SLA Domain can be modified. In any of these cases this parameter can contain a stale and incorrect value. To view retention information for this snapshot, use snapshotRetentionInfo instead.
  slaName: String!

  # Supported in v5.0+
  sourceObjectType: String

  # Supported in v5.1+
  # v5.1: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true,' the snapshot is being retained under a Retention Lock SLA Domain.
  # v5.2+: A Boolean that indicates whether the snapshot is being retained under a Retention Lock SLA Domain. When this value is 'true', the snapshot is being retained under a Retention Lock SLA Domain.
  isRetainedByRetentionLockSla: Boolean

  # Supported in v5.2+
  # A Boolean that indicates whether or not custom retention is applied to the snapshot.
  isCustomRetentionApplied: Boolean

  # Supported in v5.2+
  # A Boolean that indicates whether the snapshot is placed on Legal Hold. When this value is 'true', the snapshot is placed on Legal Hold.
  isPlacedOnLegalHold: Boolean

  # Supported in v5.2+
  # ID of the parent snapshot if the current snapshot is a child snapshot. Child snapshots are snapshots of objects that are part of an app, either a vCloud Director vApp or an AppBlueprint. Snapshots of the app are parent snapshots.
  parentSnapshotId: String
  cloudStorageTier: SnapshotCloudStorageTier

  # Supported in v5.2+
  # Snapshot retention related information for local, archival and replication locations.
  snapshotRetentionInfo: SnapshotRetentionInfo

  # Supported in v8.0+
  # A list of those archival location entries where cloudStorageTier is applicable.
  cloudStorageTiers: [PerLocationCloudStorageTier!]!
}
# Basic snapshot schedule.
type BasicSnapshotSchedule {
  # Frequency of snapshot schedule.
  frequency: Int!

  # Retention of snapshot schedule.
  retention: Int!

  # Unit of retention in snapshot schedule.
  retentionUnit: RetentionUnit!
}
# Basic snapshot schedule.
input BasicSnapshotScheduleInput {
  # Frequency of snapshot schedule.
  frequency: Int = 0

  # Retention of snapshot schedule.
  retention: Int = 0

  # Unit of retention in snapshot schedule.
  retentionUnit: RetentionUnit = MINUTES
}
type BatchAsyncJobStatus {
  # List of map of Rubrik object ID to Job ID for object if pre validation succeeds for object. If pre validation failed, detials will be present in error field.
  jobIds: [AsyncJobStatusJobId!]!

  # List of map of Rubrik object ID to error message for those object for which pre validation failed.
  errors: [AsyncJobStatusJobError!]!
}
# Supported in v5.0+
type BatchAsyncRequestStatus {
  # Required. Supported in v5.0+
  # The asynchronous request status of a batch request.
  responses: [AsyncRequestStatus!]!
}
# Input for exporting a batch of Hyper-V virtual machines.
input BatchExportHypervVmInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration of the exported virtual machine snapshot.
  config: HypervBatchExportSnapshotJobConfigInput!
}
# Supported in v7.0+
type BatchExportHypervVmReply {
  # Required. Supported in v7.0+
  # Array of objects containing information about failed requests.
  failedRequests: [HypervAsyncRequestFailureSummary!]!

  # Required. Supported in v7.0+
  # Array of objects containing information about successful asynchronous requests.
  successfulRequests: [HypervAsyncRequestSuccessSummary!]!
}
# Input to export a batch Nutanix virtual machines.
input BatchExportNutanixVmInput {
  # Required. Configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration of the exported virtual machine snapshot.
  config: NutanixBatchExportSnapshotJobConfigInput!
}
# Reply Object for BatchExportNutanixVm.
type BatchExportNutanixVmReply {
  output: NutanixBatchAsyncApiResponse
}
# Supported in v6.0+
input BatchExportSnapshotJobConfigInput {
  # Required. Supported in v6.0+
  # Array of objects containing information about snapshots to export.
  snapshots: [ExportSnapshotJobConfigForBatchInput!]!
}
# Supported in Rubrik CDM version 9.0 and later. Input for batch export snapshots for vSphere.
input BatchExportSnapshotJobConfigV3Input {
  # Required. Supported in v8.1+
  # Array of objects containing information about snapshots to export.
  snapshots: [ExportSnapshotJobConfigForBatchV3Input!]!
}
# Supported in v6.0+
input BatchInPlaceRecoveryJobConfigInput {
  # Required. Supported in v6.0+
  # Array of objects containing information about snapshots to use for an in-place recovery.
  snapshots: [InPlaceRecoveryJobConfigForBatchInput!]!
}
# Input for batch recovery of Hyper-V virtual machines.
input BatchInstantRecoverHypervVmInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for instant recovery.
  config: HypervBatchInstantRecoverSnapshotJobConfigInput!
}
# Supported in v7.0+
type BatchInstantRecoverHypervVmReply {
  # Required. Supported in v7.0+
  # Array of objects containing information about failed requests.
  failedRequests: [HypervAsyncRequestFailureSummary!]!

  # Required. Supported in v7.0+
  # Array of objects containing information about successful asynchronous requests.
  successfulRequests: [HypervAsyncRequestSuccessSummary!]!
}
# Supported in v6.0+
input BatchInstantRecoveryJobConfigInput {
  # Required. Supported in v6.0+
  # Array of objects containing information about snapshots to mount for Instant Recovery.
  snapshots: [InstantRecoveryJobConfigForBatchInput!]!
}
# Input for initiating Live Mount for a batch of Hyper-V virtual machines.
input BatchMountHypervVmInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration of the mounted virtual machine snapshot.
  config: HypervBatchMountSnapshotJobConfigInput!
}
# Supported in v7.0+
type BatchMountHypervVmReply {
  # Required. Supported in v7.0+
  # Array of objects containing information about failed requests.
  failedRequests: [HypervAsyncRequestFailureSummary!]!

  # Required. Supported in v7.0+
  # Array of objects containing information about successful asynchronous requests.
  successfulRequests: [HypervAsyncRequestSuccessSummary!]!
}
# Input to mount a batch of Nutanix virtual machines.
input BatchMountNutanixVmInput {
  # Required. Configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration of the mounted virtual machine snapshot.
  config: NutanixBatchMountSnapshotJobConfigInput!
}
# Reply Object for BatchMountNutanixVm.
type BatchMountNutanixVmReply {
  output: NutanixBatchAsyncApiResponse
}
# Supported in v6.0+
input BatchMountSnapshotJobConfigV2Input {
  # Required. Supported in v6.0+
  # Array of objects containing information about snapshots to mount.
  snapshots: [MountSnapshotJobConfigForBatchV2Input!]!
}
# Required. Input for taking on-demand snapshots of multiple Hyper-V virtual machines.
input BatchOnDemandBackupHypervVmInput {
  # User note to associate with audits.
  userNote: String

  # Input configuration for taking on-demand snapshot of multiple HyperV virtual machines.
  config: HypervBatchOnDemandBackupJobConfigInput!
}
# Supported in v9.0+
type BatchOnDemandBackupHypervVmReply {
  # Required. Supported in v9.0+
  # Array of objects containing information about failed requests.
  failedRequests: [HypervAsyncRequestFailureSummary!]!

  # Required. Supported in v9.0+
  # Array of objects containing information about successful asynchronous requests.
  successfulRequests: [HypervAsyncRequestSuccessSummary!]!
}
# Request to batch quarantine list of snapshots.
input BatchQuarantineSnapshotInput {
  # Quarantine spec needed for the operation.
  quarantineSpecs: [QuarantineSpecInput!]!
}
# Reply for the operation to quarantine a batch of snapshots.
type BatchQuarantineSnapshotReply {
  # Boolean which signifies whether the operation is successful.
  isBatchQuarantineSuccessful: Boolean!
}
# Request to batch release snapshots from quarantine.
input BatchReleaseFromQuarantineSnapshotInput {
  # Quarantine spec needed for the operation.
  quarantineSpecs: [QuarantineSpecInput!]!
}
# Reply for the operation to release a batch of snapshots from quarantine.
type BatchReleaseFromQuarantineSnapshotReply {
  # Boolean which signifies whether the operation is successful.
  isBatchReleaseFromQuarantineSuccessful: Boolean!
}
# Supported in v5.1+
type BatchVmwareCdpLiveInfo {
  # Required. Supported in v5.1+
  # The live CDP info for the virtual machines.
  responses: [VmwareCdpLiveInfo!]!
}
# Supported in v5.3+
type BatchVmwareVmRecoverableRanges {
  # Required. Supported in v5.3+
  # The recoverable ranges for a set of virtual machines.
  responses: [VmwareVmRecoverableRanges!]!
}
# Supported in v5.3+
input BatchVmwareVmRecoverableRangesRequestInput {
  # Supported in v5.3+
  # Query filter - only ranges after this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
  afterTime: DateTime

  # Supported in v5.3+
  # Query filter - only ranges before this time will be included. The date-time string should be in ISO8601 format, such as `2018-01-01T01:23:45.678Z`.
  beforeTime: DateTime

  # Required. Supported in v5.3+
  # The ID of each CDP-enabled virtual machine for which recoverable ranges are being retrieved.
  vmIds: [String!]!
}
# Input for invoking the API endpoint to begin a Managed Volume snapshot.
input BeginManagedVolumeSnapshotInput {
  # Details about the reference to be added to the snapshot and the type of request.
  config: BeginSnapshotManagedVolumeRequestInput

  # A string representing the owner of a snapshot. This owner ID must be used when adding a reference to this snapshot.
  ownerId: String

  # Required. Managed Volume ID.
  id: String!
}
# Supported in v7.0+
type BeginManagedVolumeSnapshotReply {
  # Supported in v7.0+
  # Status of the asynchronous request that was initiated for the Managed Volume Begin Snapshot job.
  asyncRequestStatus: AsyncRequestStatus

  # Supported in v7.0+
  # An ID representing the owner of a snapshot.
  ownerId: String

  # Required. Supported in v7.0+
  # ID of the snapshot. All writes to the Managed Volume until the next end-snapshot call will be part of this snapshot.
  snapshotId: String!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Request for begin Managed Volume snapshot.
input BeginSnapshotManagedVolumeRequestInput {
  # Supported in v7.0+
  # Specifies whether the current request is synchronous or asynchronous. By default the value of isAsync will be true. In other words, when a value is not specified, the request is asynchronous.
  isAsync: Boolean
  managedVolumeSnapshotReferenceWrapper: ManagedVolumeSnapshotReferenceWrapperInput
}
# Bidirectional replication specification.
type BidirectionalReplicationSpec {
  # Replication specification 1.
  replicationSpec1: UnidirectionalReplicationSpec

  # Replication specification 2.
  replicationSpec2: UnidirectionalReplicationSpec
}
# Bidirectional replication specification.
input BidirectionalReplicationSpecInput {
  # Replication specification 1.
  replicationSpec1: UnidirectionalReplicationSpecInput

  # Replication specification 2.
  replicationSpec2: UnidirectionalReplicationSpecInput
}
# Supported in v5.0+
type BlackoutWindow {
  # Supported in v5.0+
  endTime: String

  # Required. Supported in v5.0+
  startTime: String!
}
# Supported in v5.0+
type BlackoutWindowResponseInfo {
  # Required. Supported in v5.0+
  blackoutWindowStatus: BlackoutWindowStatus

  # Required. Supported in v5.0+
  blackoutWindows: BlackoutWindows
}
# Supported in v5.0+
type BlackoutWindowStatus {
  # Required. Supported in v5.0+
  isGlobalBlackoutActive: Boolean!

  # Supported in v5.0+
  isSnappableBlackoutActive: Boolean
}
# Supported in v5.0+
type BlackoutWindows {
  # Required. Supported in v5.0+
  globalBlackoutWindows: [BlackoutWindow!]!

  # Supported in v5.0+
  snappableBlackoutWindows: [BlackoutWindow!]!
}
# Blueprint recovery type.
enum BlueprintRecoveryType {
  # Cyber recovery.
  CYBER_RECOVERY

  # Disaster recovery.
  DISASTER_RECOVERY

  # In-Place recovery.
  IN_PLACE_RECOVERY

  # Unrecognized blueprint recovery type.
  UNKNOWN
}
# The `Boolean` scalar type represents `true` or `false`.
scalar Boolean
# Supported in v5.0+
type BootstrappableNodeInfo {
  # Required. Supported in v5.0+
  # Hostname of a Rubrik node.
  hostname: String!

  # Required. Supported in v5.0+
  # IPv6 address of a Rubrik node.
  ipv6: String!

  # Supported in v5.3+
  # Software version of Rubrik CDM.
  version: String

  # Supported in v6.0+
  # Chassis ID of Rubrik node.
  chassisId: String

  # Supported in v6.0+
  # All-Copper 10GBaseT Rubrik node.
  isAllCopper: Boolean

  # Supported in v6.0+
  # Link status of port eth0 in Rubrik node.
  isBond0Eth0Enabled: Boolean

  # Supported in v6.0+
  # Link status of port eth1 in Rubrik node.
  isBond0Eth1Enabled: Boolean

  # Supported in v6.0+
  # Link status of port eth2 in Rubrik node.
  isBond1Eth2Enabled: Boolean

  # Supported in v6.0+
  # Link status of port eth3 in Rubrik node.
  isBond1Eth3Enabled: Boolean

  # Supported in v6.0+
  # Position of Rubrik node.
  nodePosition: String

  # Supported in v6.0+
  # Deployment model of Rubrik node.
  platformName: String

  # Supported in v7.0+
  # Capacity of the node in bytes.
  capacityInBytes: Long

  # Supported in v7.0+
  # indicates if Rubrik node is reachable through bond0.
  isBond0Reachable: Boolean
}
# Supported in v5.0+
type BootstrappableNodeInfoListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [BootstrappableNodeInfo!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
input BrowseDirectoryFiltersInput {
  analyzerGroupIds: [String!] = []
  whitelistEnabled: Boolean = false

  # List of principal IDs to filter the paths.
  sids: [String!] = []
}
# Input for browsing SQL Server database snapshots.
input BrowseMssqlDatabaseSnapshotInput {
  # Required. Configuration for the browse request.
  config: MssqlBackupSelectionInput!

  # Required. ID of the Microsoft SQL database.
  id: String!
}
# Supported in v5.2+
type BrowseMssqlDatabaseSnapshotReply {
  # Required. Supported in v5.2+
  # A list of snapshots and logs.
  items: [MssqlBackup!]!
}
# Input for browsing Nutanix snapshots.
input BrowseNutanixSnapshotInput {
  # Maximum number of entries in the response.
  limit: Int

  # Starting position in the list of path entries contained in the query results, sorted by lexicographical order. The response includes the specified numbered entry and all higher numbered entries.
  offset: Int

  # Required. ID of snapshot.
  id: String!

  # Required. The absolute path of the starting point for the directory listing.
  path: String!
}
# Supported in v5.0+
type BrowseResponse {
  # Supported in v5.0+
  # The type of file, either a regular file or a directory.
  fileMode: String

  # Supported in v5.0+
  # The name of the file.
  filename: String

  # Supported in v5.0+
  lastModified: String

  # Supported in v5.0+
  # The complete path of the file.
  path: String

  # Supported in v5.0+
  size: Long

  # Supported in v5.0+
  # Description about the status.
  statusMessage: String

  # Supported in v5.3+
  # Reason the file is unreadable. Undefined if the file is readable.
  unreadable: Int
}
# Supported in v5.0+
type BrowseResponseListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [BrowseResponse!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Input for getting web certificate and IPMI information for multiple clusters.
input BulkClusterWebCertAndIpmiInput {
  # List of cluster UUIDs.
  clusterUuids: [UUID!]!
}
# Input for creating multiple fileset templates.
input BulkCreateFilesetTemplatesInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Provide an array containing a separate object for each fileset template definition.
  definitions: [FilesetTemplateCreateInput!]!
}
# Supported in v5.0+
type BulkCreateFilesetTemplatesReply {
  # Supported in v5.0+
  # List of matching objects.
  data: [FilesetTemplateDetail!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Input for creating multiple filesets.
input BulkCreateFilesetsInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. For each fileset, specify a template id along with either host id or share id. If a share id is provided, the host id will be inferred from the host share.
  definitions: [FilesetCreateInput!]!
}
# Supported in v5.0+
type BulkCreateFilesetsReply {
  # Supported in v5.0+
  # List of matching objects.
  data: [FilesetDetail!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v7.0+
input BulkCreateNasFilesetInput {
  # Supported in v7.0+
  isHardlinkSupportEnabled: Boolean

  # Supported in v7.0+
  isPassthrough: Boolean

  # Required. Supported in v7.0+
  # Fileset Template object.
  filesetTemplate: FilesetTemplateCreateInput!

  # Required. Supported in v7.0+
  # An array of NAS share IDs the primary fileset is created for.
  nasShareIds: [String!]!
}
# Input for creating NAS filesets.
input BulkCreateNasFilesetsInput {
  # Required. Create a primary fileset and a fileset template for each NAS share, display the NAS shares if they are hidden, and return a list of fileset detail objects for all the primary filesets.
  bulkRequest: BulkCreateNasFilesetInput!
}
# Supported in v7.0+
type BulkCreateNasFilesetsReply {
  # Required. Supported in v7.0+
  filesetDetails: [FilesetDetail!]!
}
# Input for creating multiple on-demand SQL Server database backups.
input BulkCreateOnDemandMssqlBackupInput {
  # Required. Configuration for the on-demand backups.
  config: MssqlBatchBackupJobConfigInput!

  # Required. User note to associate with audits.
  userNote: String
}
# Input to delete AWS cloud accounts.
input BulkDeleteAwsCloudAccountWithoutCftInput {
  # Native ID of the AWS account.
  awsNativeId: String!

  # List of cloud account features.
  features: [CloudAccountFeature!]
}
# Response of bulk deletion of AWS cloud accounts.
type BulkDeleteAwsCloudAccountWithoutCftReply {
  # Deletion result of various cloud account features.
  deleteAwsCloudAccountWithoutCftResp: [DeleteAwsCloudAccountWithoutCftResp!]!
}
# Input for V1BulkDeleteFailoverClusterApp.
input BulkDeleteFailoverClusterAppInput {
  # Specifies whether to preserve the snapshots of the fileset that belongs to a failover cluster application. When this value is 'true,' the snapshots are preserved. The default value is 'true'.
  preserveSnapshots: Boolean

  # Required. The ID of each failover cluster application to delete.
  ids: [String!]!
}
# Input for V1BulkDeleteFailoverCluster.
input BulkDeleteFailoverClusterInput {
  # Specifies whether to preserve the fileset snapshots that belong to a failover cluster. When this value is 'true', the snapshots are preserved. The default value is 'true'.
  preserveSnapshots: Boolean

  # Required. The ID of each failover cluster to delete.
  ids: [String!]!
}
# Input for deleting multiple filesets.
input BulkDeleteFilesetInput {
  # Flag to indicate whether to convert snapshots of all deleted filesets to relics or to delete them. Applies to all filesets. Default is true.
  preserveSnapshots: Boolean

  # Required. Provide a comma-separated list of fileset IDs.
  ids: [String!]!
}
# Input for deleting multiple fileset templates.
input BulkDeleteFilesetTemplateInput {
  # Flag to indicate whether to convert snapshots of filesets of the deleted templates to relics or to delete them. Applies to all templates being deleted. Default is true.
  preserveSnapshots: Boolean

  # Required. Provide an array with the ID of each fileset template to remove.
  ids: [String!]!
}
# Input for deleting multiple registered hosts.
input BulkDeleteHostInput {
  # Required. Provide the ID of each host to deregister.
  ids: [String!]!
}
# Input for deleting NoSQL Protection sources in bulk.
input BulkDeleteMosaicSourcesInput {
  # Type of sources to be deleted.
  sourceType: V2BulkDeleteMosaicSourcesRequestSourceType

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. List of names of sources to be deleted.
  sourceData: BulkDeleteSourceRequestInput!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Input to trigger delete of multiple registered NAS systems.
input BulkDeleteNasSystemRequestInput {
  # Required. Supported in v7.0+
  # NAS system IDs.
  ids: [String!]!
}
# Input to initiate deletion of multiple registered NAS systems.
input BulkDeleteNasSystemsInput {
  # Required. NAS system IDs to delete.
  bulkDeleteNasSystemRequest: BulkDeleteNasSystemRequestInput!
}
# Supported in m3.2.0-m4.2.0
# Object for sources added on mosaic.
input BulkDeleteSourceRequestInput {
  # Supported in m3.2.0-m4.2.0
  # Specifies whether to run the request asynchronously.
  async: Boolean

  # Required. Supported in m3.2.0-m4.2.0
  # List of source names.
  sourceNames: [String!]!
}
# Supported in v5.3+
input BulkOnDemandSnapshotJobConfigInput {
  # Supported in v5.3+
  # The ID of the SLA Domain to assign to the virtual machines.
  slaId: String

  # Required. Supported in v5.3+
  # The IDs of the virtual machines for which to take on-demand snapshots.
  vms: [String!]!
}
# Input to initiate Bulk on Demand snapshot for Nutanix.
input BulkOnDemandSnapshotNutanixVmInput {
  # Required. Configuration objects. Each object includes an identifier for the virtual machine and the configuration of the virtual machine backup.
  config: NutanixBulkOnDemandSnapshotJobConfigInput!

  # Required. User note to associate with audits.
  userNote: String
}
# Reply Object for BulkOnDemandSnapshotNutanixVm.
type BulkOnDemandSnapshotNutanixVmReply {
  output: NutanixBatchAsyncApiResponse
}
# Input for refreshing multiple hosts with a single request.
input BulkRefreshHostsInput {
  # ID of each host to refresh.
  ids: [String!]!

  # Specifies whether to run the job to refresh hosts
  # asynchronously.
  shouldRunAsynchronously: Boolean! = false
}
# Response of the mutation to refresh multiple hosts.
type BulkRefreshHostsReply {
  # Details of the refreshed hosts.
  data: [RefreshHostReply!]!
}
# Input for registering multiple hosts in the background.
input BulkRegisterHostAsyncInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Registration definition for each host.
  hosts: [HostRegisterInput!]!
}
# Reply Object for BulkRegisterHostAsync.
type BulkRegisterHostAsyncReply {
  output: V1BulkRegisterHostAsyncResponse
}
# Input for registering multiple hosts.
input BulkRegisterHostInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Array containing a registration definition for each host.
  hosts: [HostRegisterInput!]!
}
# Supported in v5.0+
type BulkRegisterHostReply {
  # Supported in v5.0+
  # List of matching objects.
  data: [HostDetail!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Input to initiate bulk tiering of existing archived snapshots.
input BulkTierExistingSnapshotsInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. A list of object IDs to tier. Optionally specifies a location ID.
  objectTierInfo: BulkTierSnapshotsConfigInput!
}
# Supported in v6.0+
input BulkTierSnapshotsConfigInput {
  # Supported in v6.0+
  # Users can specify the archival location ID in order to tier snapshots in the specified archival location. When an archival location ID is not specified, snapshots in the archival location specified in the SLA Domain policy for protected objects will be tiered. Relic and unprotected object snapshots across all archival locations will be tiered.
  locationId: String

  # Required. Supported in v6.0+
  # A list of object IDs to tier.
  objectIds: [String!]!
}
input BulkUpdateExchangeDagInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Properties to update for each DAG.
  dagUpdateProperties: [ExchangeDagUpdateConfigInput!]!
}
# Input for updating multiple fileset templates.
input BulkUpdateFilesetTemplateInput {
  # Required. Provide an array containing a separate object for each fileset template being modified.
  definitions: [FilesetTemplatePatchInput!]!
}
# Reply Object for BulkUpdateFilesetTemplate.
type BulkUpdateFilesetTemplateReply {
  output: BulkCreateFilesetTemplatesReply
}
# Input for updating multiple host certificates.
input BulkUpdateHostInput {
  # Required. Properties to update for each host.
  hostUpdateProperties: [HostUpdateIdInput!]!
}
# Reply Object for BulkUpdateHost.
type BulkUpdateHostReply {
  output: InternalBulkUpdateHostResponse
}
# Input for BulkUpdateMssqlDbs.
input BulkUpdateMssqlDbsInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Properties to update for each database.
  dbsUpdateProperties: [MssqlDbUpdateIdInput!]!
}
# Response of the operation that updates SQL Server databases in bulk.
type BulkUpdateMssqlDbsReply {
  # Details of the updated SQL Server databases.
  items: [MssqlDbDetail!]!
}
input BulkUpdateOracleDatabasesInput {
  # Required. Properties to use for the update of Oracle Database objects.
  bulkUpdateProperties: OracleBulkUpdateInput!
}
# Supported in v5.2+
type BulkUpdateOracleDatabasesReply {
  # Required. Supported in v5.2+
  # An array that contains all Oracle Database update details.
  responses: [OracleDbDetail!]!
}
input BulkUpdateOracleHostsInput {
  # Required. Properties to use for the update of Oracle Host objects.
  bulkUpdateProperties: OracleBulkUpdateInput!
}
# Supported in v5.2+
type BulkUpdateOracleHostsReply {
  # Required. Supported in v5.2+
  # An array that contains all Oracle Host update details.
  responses: [OracleHostDetail!]!
}
input BulkUpdateOracleRacsInput {
  # Required. Properties to use for the update of Oracle RAC objects.
  bulkUpdateProperties: OracleBulkUpdateInput!
}
# Supported in v5.2+
type BulkUpdateOracleRacsReply {
  # Required. Supported in v5.2+
  # An array that contains all Oracle RAC update details.
  responses: [OracleRacDetail!]!
}
# Email address input for organizer and/or attendee.
input CalendarEmailAddressFilter {
  emailAddress: String = ""
  filterType: CalendarEmailAddressFilterType = ORGANIZER
}
# Email address filter.
enum CalendarEmailAddressFilterType {
  # Search organizer or attendees by email.
  ALL

  # Search attendee by email.
  ATTENDEE

  # Search organizer by email.
  ORGANIZER
}
# Type of the calendar event.
enum CalendarEventType {
  # Series exception event type.
  SERIES_EXCEPTION

  # Series master event type.
  SERIES_MASTER

  # Series occurrence event type.
  SERIES_OCCURRENCE

  # Single instance event type.
  SINGLE_INSTANCE
}
# Represents the Calendar group to be restored.
input CalendarGroupInfo {
  # ID of the calendar group to be restored.
  calendarGroupId: String!

  # ID of the snapshot from which to restore.
  snapshotId: UUID!
}
# Represents the Calendar to be restored.
input CalendarInfo {
  # ID of the calendar to be restored.
  calendarId: String!

  # ID of the snapshot from which to restore.
  snapshotId: UUID!
}
# Calendar recurrence object type.
input CalendarRecurrenceFilter {
  recurrenceType: CalendarRecurrenceType = SINGLE
}
# Recurrence type for calendar event.
enum CalendarRecurrenceType {
  # Event can be either recurring or non-recurring.
  ALL

  # Event is recurring.
  RECURRING

  # Event is a single instance (not recurring).
  SINGLE
}
# Represents the calendar contents to be restored.
input CalendarRestoreConfig {
  # Event(s) to restore in this job.
  eventsToRestore: [EventInfo!]!

  # Calendar(s) to restore in this job.
  calendarsToRestore: [CalendarInfo!]!

  # Calendar Group(s) to restore in this job.
  calendarGroupsToRestore: [CalendarGroupInfo!]!
}
# Parameters for calendar event search.
input CalendarSearchFilter {
  searchKeywordFilter: CalendarSearchKeywordFilter
  emailAddresses: [CalendarEmailAddressFilter!] = []
  timerange: TimeRangeFilter
  searchObjectFilter: CalendarSearchObjectFilter
  recurrenceFilter: CalendarRecurrenceFilter

  # Parameters for using Lambda filters in the query.
  lambdaFilters: LambdaPathFilters
}
# Calendar search keyword and type.
input CalendarSearchKeywordFilter {
  searchKeyword: String = ""
  keywordType: CalendarSearchKeywordType = NAME
}
# Search keyword type for Calendar.
enum CalendarSearchKeywordType {
  # Search by event or calendar name.
  NAME
}
# Calendar search object type.
input CalendarSearchObjectFilter {
  searchObjectType: O365CalendarSearchObjectType = CALENDAR
}
# Input for canceling an activity series.
input CancelActivitySeriesInput {
  # The activity series ID.
  activitySeriesId: UUID!

  # The cluster UUID.
  clusterUuid: UUID!
}
# Cancel download job response.
type CancelJobReply {
  # Status of cancel request.
  status: Boolean!

  # Cancel message.
  message: String!
}
# Request to cancel a threat hunt.
input CancelThreatHuntInput {
  # ID of threat hunt to cancel.
  huntId: String = ""
}
# Represents a single capacity contribution.
type CapacityContribution {
  # The product that is making this contribution.
  product: Product!

  # The number of bytes this product has contributed.
  registeredCapacityBytes: Float!
}
# Cascading archival specification info.
type CascadingArchivalSpec {
  # Threshold after which the snapshot will be archived.
  archivalThreshold: Duration

  # Archival tiering specification.
  archivalTieringSpec: ArchivalTieringSpec

  # Frequencies that are associated with this cascaded archival location.
  frequency: [RetentionUnit!]!

  # Archival location for snapshot on target.
  archivalLocation: Target
}
# Cascading archiving specification.
input CascadingArchivalSpecInput {
  # CDM archival location on the replication target the snapshot will be uploaded to.
  archivalLocationId: String = ""

  # Threshold after which the snapshot will be archived.
  archivalThreshold: SlaDurationInput

  # Archival tiering specification input.
  archivalTieringSpecInput: ArchivalTieringSpecInput

  # Frequencies that are associated with this cascaded archival location.
  frequency: [RetentionUnit!] = []
}
# Backup Params configured on the management object.
type CassandraBackupParams {
  # Name of the store used to store backups.
  storeName: String!

  # Monitoring frequency used.
  watcherFrequency: Long!
}
# Cassandra Column Family information.
type CassandraColumnFamily implements HierarchyObject , PolarisHierarchyObject , CassandraSourceDescendantType , CassandraKeyspaceDescendantType , CassandraKeyspacePhysicalChildType {
  # UUID of the Mosaic cluster.
  clusterUuid: UUID!

  # Number of backups for the column family.
  backupCount: Int

  # Date that effective SLA was assigned / inherited.
  protectionDate: String!

  # Backup Params of the source.
  backupParams: CassandraBackupParams

  # Is the source object a relic.
  isRelic: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!

  # The source object ID.
  id: UUID!

  # Parent source connection.
  source: CassandraSource!

  # Parent keyspace connection.
  keyspace: CassandraKeyspace!

  # Mosaic cluster information.
  cluster: Cluster!

  # The list of snapshots taken for this workload.
  snapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter mosaic snapshot connection.
    filter: MosaicSnapshotFilterInput,

    # Sort mosaic snapshots by field.
    sortBy: MosaicSnapshotSortBy = DATE,

    # Sorting order for the results.
    sortOrder: SortOrder): MosaicSnapshotConnection!

  # GroupBy connection for this workload's snapshots.
  snapshotGroupBys(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter mosaic snapshot connection.
    filter: MosaicSnapshotFilterInput,

    # Group mosaic snapshots by field.
    groupBy: MosaicSnapshotGroupBy!): MosaicSnapshotGroupByTypeConnection

  # The most recent snapshot of this workload.
  newestSnapshot: MosaicSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: MosaicSnapshot

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of CassandraColumnFamily objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CassandraColumnFamilyConnection {
  # List of CassandraColumnFamily objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CassandraColumnFamilyEdge!]!

  # List of CassandraColumnFamily objects.
  nodes: [CassandraColumnFamily!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CassandraColumnFamily objects matching the request arguments.
  count: Int!
}
# Wrapper around the CassandraColumnFamily object. This wrapper is used for pagination.
type CassandraColumnFamilyEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CassandraColumnFamily object wrapped by this edge.
  node: CassandraColumnFamily!
}
# Supported in m3.2.0-m4.2.0
# Object with cassandra column details.
type CassandraColumnObject {
  # Supported in m3.2.0-m4.2.0
  # Name of the cassandra column.
  columnName: String

  # Supported in m3.2.0-m4.2.0
  # Type of the cassandra column.
  columnType: String
}
# Cassandra Keyspace information.
type CassandraKeyspace implements HierarchyObject , PolarisHierarchyObject , CassandraSourceDescendantType , CassandraSourcePhysicalChildType {
  # UUID of the Mosaic cluster.
  clusterUuid: UUID!

  # The backup count.
  backupCount: Int

  # Watcher status of the keyspace.
  watcherEnabled: Boolean!

  # Backup Params of the source.
  backupParams: CassandraBackupParams

  # Is the keyspace a relic.
  isRelic: Boolean!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): CassandraKeyspaceDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): CassandraKeyspacePhysicalChildTypeConnection!

  # Parent source connection.
  source: CassandraSource!

  # Mosaic cluster information.
  cluster: Cluster!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of CassandraKeyspace objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CassandraKeyspaceConnection {
  # List of CassandraKeyspace objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CassandraKeyspaceEdge!]!

  # List of CassandraKeyspace objects.
  nodes: [CassandraKeyspace!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CassandraKeyspace objects matching the request arguments.
  count: Int!
}
# Cassandra Keyspace descendant type information.
interface CassandraKeyspaceDescendantType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of CassandraKeyspaceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CassandraKeyspaceDescendantTypeConnection {
  # List of CassandraKeyspaceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CassandraKeyspaceDescendantTypeEdge!]!

  # List of CassandraKeyspaceDescendantType objects.
  nodes: [CassandraKeyspaceDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CassandraKeyspaceDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the CassandraKeyspaceDescendantType object. This wrapper is used for pagination.
type CassandraKeyspaceDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CassandraKeyspaceDescendantType object wrapped by this edge.
  node: CassandraKeyspaceDescendantType!
}
# Wrapper around the CassandraKeyspace object. This wrapper is used for pagination.
type CassandraKeyspaceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CassandraKeyspace object wrapped by this edge.
  node: CassandraKeyspace!
}
# Cassandra Keyspace physical child type information.
interface CassandraKeyspacePhysicalChildType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of CassandraKeyspacePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CassandraKeyspacePhysicalChildTypeConnection {
  # List of CassandraKeyspacePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CassandraKeyspacePhysicalChildTypeEdge!]!

  # List of CassandraKeyspacePhysicalChildType objects.
  nodes: [CassandraKeyspacePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CassandraKeyspacePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the CassandraKeyspacePhysicalChildType object. This wrapper is used for pagination.
type CassandraKeyspacePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CassandraKeyspacePhysicalChildType object wrapped by this edge.
  node: CassandraKeyspacePhysicalChildType!
}
# Supported in m3.2.0-m4.2.0
# m3.2.0-m4.0.1: Object with cassandra column details.
# m4.1.0-m4.2.0: Object with cassandra schema details.
type CassandraSchemaObject {
  # Supported in m3.2.0-m4.2.0
  # List of cassandra column names.
  columns: [CassandraColumnObject!]!

  # Supported in m3.2.0-m4.2.0
  # List of primary keys of table.
  primaryKeys: [String!]!
}
# Cassandra Source information.
type CassandraSource implements HierarchyObject , PolarisHierarchyObject {
  # UUID of the Mosaic cluster.
  clusterUuid: UUID!

  # IP of the source.
  sourceIp: String!

  # Number of source nodes.
  nodeCount: Int

  # Data size of source.
  size: Long

  # Number of backups for the source.
  backupCount: Int

  # Source connectivity status.
  status: CassandraSourceStatus!

  # Watcher status of the source.
  watcherEnabled: Boolean!

  # Backup Params of the source.
  backupParams: CassandraBackupParams

  # Configuration Params of the source.
  configParams: SourceConfigParams

  # The last time the source was refreshed.
  lastRefreshTime: DateTime

  # Is the source object a relic.
  isRelic: Boolean!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): CassandraSourceDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): CassandraSourcePhysicalChildTypeConnection!

  # Mosaic cluster information.
  cluster: Cluster!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of CassandraSource objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CassandraSourceConnection {
  # List of CassandraSource objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CassandraSourceEdge!]!

  # List of CassandraSource objects.
  nodes: [CassandraSource!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CassandraSource objects matching the request arguments.
  count: Int!
}
# Cassandra Source descendant type information.
interface CassandraSourceDescendantType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of CassandraSourceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CassandraSourceDescendantTypeConnection {
  # List of CassandraSourceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CassandraSourceDescendantTypeEdge!]!

  # List of CassandraSourceDescendantType objects.
  nodes: [CassandraSourceDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CassandraSourceDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the CassandraSourceDescendantType object. This wrapper is used for pagination.
type CassandraSourceDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CassandraSourceDescendantType object wrapped by this edge.
  node: CassandraSourceDescendantType!
}
# Wrapper around the CassandraSource object. This wrapper is used for pagination.
type CassandraSourceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CassandraSource object wrapped by this edge.
  node: CassandraSource!
}
# Cassandra Source physical child type information.
interface CassandraSourcePhysicalChildType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of CassandraSourcePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CassandraSourcePhysicalChildTypeConnection {
  # List of CassandraSourcePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CassandraSourcePhysicalChildTypeEdge!]!

  # List of CassandraSourcePhysicalChildType objects.
  nodes: [CassandraSourcePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CassandraSourcePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the CassandraSourcePhysicalChildType object. This wrapper is used for pagination.
type CassandraSourcePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CassandraSourcePhysicalChildType object wrapped by this edge.
  node: CassandraSourcePhysicalChildType!
}
# Enum for cassandra source status.
enum CassandraSourceStatus {
  # Source is getting added.
  ADDING

  # Source is connected.
  CONNECTED

  # Source is deleted.
  DELETED

  # Source is getting deleted.
  DELETING

  # Source is disconnected.
  DISCONNECTED

  # Source data is getting refreshed.
  REFRESHING

  # Unknown source status.
  UNKNOWN_SYSTEM_STATUS
}
# SSL Configuration on mosaic source object.
type CassandraSslOptions {
  # Whether ssl is enabled or not.
  ssl: Boolean!

  # Path to CA certificate.
  sslCaCerts: String!

  # Path to SSL Certificate.
  sslCertfile: String!

  # Path to SSL Key.
  sslKeyfile: String!

  # SSL certificate requirements.
  sslCertRequirements: SourceSslCertReqs!
}
# Async reply for a submitted job.
type CcProvisionJobReply {
  # Detail of submitted job including job name and function parameters.
  message: String!

  # Indicates if the operation was a success or not.
  success: Boolean!

  # Job ID of the submitted job.
  jobId: Long!
}
# Detailed cloud information for a Cloud Cluster.
type CcWithCloudInfo {
  # Cloud Cluster name.
  name: String!

  # User-friendly name for the cloud region.
  region: String!

  # ID for the cloud region.
  regionId: String!

  # Native name of the network where the Cloud Cluster exists.
  networkName: String!

  # Native name of the cloud account where the Cloud Cluster exists.
  nativeCloudAccountName: String!

  # Cloud provider.
  vendor: CcpVendorType!

  # Native (AWS/Azure) ID of cloud account.
  nativeCloudAccountId: String!

  # Native name of the cloud account where the Cloud Cluster exists.
  cloudAccount: String!

  # Elastic Storage configuration.
  storageConfig: ElasticStorageConfig

  # Cloud Cluster UUID.
  uuid: UUID!

  # Rubrik-generated cloud account UUID.
  cloudAccountId: UUID!
}
# Status of Job.
enum CcpJobStatus {
  # Bootstrapping cluster.
  BOOTSTRAPPING

  # Completed successfully.
  COMPLETED

  # Failed.
  FAILED

  # Initializing.
  INITIALIZING

  # Invalid status.
  INVALID

  # Node connection verify.
  NODE_CONNECTION_VERIFICATION

  # Node creation.
  NODE_CREATE

  # Node information retrieval.
  NODE_INFO_EXTRACTION

  # Rotate token.
  ROTATE_TOKEN
}
# Type of cluster job.
enum CcpJobType {
  # Add nodes to a Rubrik cluster.
  ADD_NODE

  # Create the Rubrik cluster job.
  CLUSTER_CREATE

  # Delete the Rubrik cluster job.
  CLUSTER_DELETE

  # The general Rubrik cluster operation job.
  CLUSTER_OPS

  # Recover the Rubrik cluster job.
  CLUSTER_RECOVER

  # Remove nodes from a Rubrik cluster.
  REMOVE_NODE

  # Replace a node on a Rubrik cluster.
  REPLACE_NODE
}
# Cloud vendor provider.
enum CcpVendorType {
  # AWS.
  AWS

  # Azure.
  AZURE

  # GCP.
  GCP

  # Unknown.
  VENDOR_UNKNOWN
}
# Metadata for a single cluster job.
type CcprovisionInfo {
  # Cloud vendor provider.
  vendor: CcpVendorType!

  # Current job status.
  jobStatus: CcpJobStatus!

  # Progress of job in percent.
  progress: Int!

  # Type of running job.
  jobType: CcpJobType!

  # Cloud cluster configuration.
  marshaledConfig: String!
}
# Supported in v5.0+
type CdmAgentStatus {
  # Required. Supported in v5.0+
  # The agent connection status.
  agentStatus: String!

  # Supported in v5.0+
  # The reason the agent disconnected.
  disconnectReason: String
}
# Different types of usages of a certificate on a Rubrik cluster.
enum CdmCertificateUsage {
  # Secondary Agent.
  AGENT

  # KMIP Client.
  KMIP_CLIENT

  # KMIP Server.
  KMIP_SERVER

  # LDAP.
  LDAP

  # RSA.
  RSA

  # SMTP.
  SMTP

  # SSO Encryption.
  SSO_ENC

  # SSO Signing.
  SSO_SIGN

  # Syslog.
  SYSLOG

  # The usage is unknown.
  USAGE_UNKNOWN

  # Web Server.
  WEB_SERVER
}
# Different types of usages of a certificate on a Rubrik cluster.
type CdmCertificateUsageInfo {
  # The Rubrik cluster where the certificate is used.
  clusterUuid: String!

  # The ID of the object for which the certificate is used, if applicable.
  id: String!

  # The name of the Rubrik cluster where the certificate is used.
  clusterName: String!

  # The type of usage of the certificate on Rubrik CDM.
  type: CdmCertificateUsage!
}
type CdmClusterStatus {
  # Rubrik cluster upgrade status. The value reflects the status of the Rubrik cluster at the various stages involved in an upgrade, for example, pre-check, download, upgrade scheduling, and rollback of the upgrade.
  status: CdmClusterStatusTypeEnum!

  # Rubrik cluster status message.
  message: String

  # Status of the Rubrik cluster upgrade process including information about the tasks that have been completed and tasks that are pending or ongoing.
  statusInfo: CdmClusterStatusInfo
}
type CdmClusterStatusInfo {
  # A list of upgrade states that are completed.
  finishedStates: String

  # A list of upgrade states that are pending.
  pendingStates: String

  # The upgrade task running at the time of the query.
  currentTask: String

  # The upgrade state running at the time of the query.
  currentState: String

  # Overall upgrade progress percentage.
  overallProgress: String

  # Progress percentage of the current upgrade state.
  currentStateProgress: String

  # Total number of nodes in the Rubrik cluster.
  totalNodes: String

  # Number of nodes where rolling upgrade is complete.
  completedNodes: String

  # Node going through rolling upgrade currently.
  currentNode: String

  # Upgrade state of the node going through the rolling upgrade currently.
  currentNodeState: String

  # Download package version.
  downloadVersion: String

  # Download progress.
  downloadProgress: String

  # Time, in seconds, remaining for the download to complete.
  downloadRemainingTimeEstimateInSeconds: String

  # Status of the download job.
  downloadJobStatus: String
}
enum CdmClusterStatusTypeEnum {
  Disconnected
  DownloadPackageFailed
  DownloadingPackage
  FailedToInitiateUpgrade
  OnOldRelease
  PrechecksFailureError
  PrechecksFailureWarning
  PrechecksRunning
  ReadyForDownload
  ReadyForUpgrade
  ResumingUpgrade
  RollbackFailed
  RollingBackUpgrade
  Stable
  StableWithUpgradeInfo
  Unknown
  UpgradeFailed
  UpgradeRecommended
  UpgradeScheduled
  UpgradeScheduledWithWarning
  Upgrading
}
# Supported in v6.0+
# Specifies whether this database is a Data Guard member, Data Guard group, or a non-Data Guard database.
enum CdmDataGuardType {
  DATA_GUARD_TYPE_DATA_GUARD_GROUP
  DATA_GUARD_TYPE_DATA_GUARD_MEMBER
  DATA_GUARD_TYPE_NON_DATA_GUARD
}
# Cluster feature identifiers.
enum CdmFeatureFlagType {
  # AHV_BULK_TAKE_ON_DEMAND_SNAPSHOT.
  AHV_BULK_TAKE_ON_DEMAND_SNAPSHOT

  # AHV_CHANGE_RETENTION.
  AHV_CHANGE_RETENTION

  # AHV_DELETE_SNAPSHOTS.
  AHV_DELETE_SNAPSHOTS

  # AHV_LEGAL_HOLD_ALL_ACTIONS.
  AHV_LEGAL_HOLD_ALL_ACTIONS

  # AHV_LIVEMOUNT_ALL_ACTIONS.
  AHV_LIVEMOUNT_ALL_ACTIONS

  # AHV_MANAGE_PROTECTION.
  AHV_MANAGE_PROTECTION

  # AHV network restore.
  AHV_NETWORK_RESTORE

  # AHV_RADAR_RECOVERY.
  AHV_RADAR_RECOVERY

  # AHV_RECOVER_SNAPSHOTS.
  AHV_RECOVER_SNAPSHOTS

  # AHV_TAKE_ON_DEMAND_SNAPSHOT.
  AHV_TAKE_ON_DEMAND_SNAPSHOT

  # ARCHIVAL_AWS_BYPASS_PROXY.
  ARCHIVAL_AWS_BYPASS_PROXY

  # AWS Glacier instant retrieval.
  ARCHIVAL_AWS_GIR

  # ARCHIVAL_AWS_IMMUTABLE.
  ARCHIVAL_AWS_IMMUTABLE

  # ARCHIVAL_AWS_JAKARTA.
  ARCHIVAL_AWS_JAKARTA

  # ARCHIVAL_AWS_PRIVATE_ENDPOINT.
  ARCHIVAL_AWS_PRIVATE_ENDPOINT

  # ARCHIVAL_AWS_ZURICH.
  ARCHIVAL_AWS_ZURICH

  # ARCHIVAL_AZURE_BYPASS_PROXY.
  ARCHIVAL_AZURE_BYPASS_PROXY

  # ARCHIVAL_AZURE_HIGH_PRIORITY_REHYDRATION.
  ARCHIVAL_AZURE_HIGH_PRIORITY_REHYDRATION

  # ARCHIVAL_AZURE_IMMUTABLE.
  ARCHIVAL_AZURE_IMMUTABLE

  # ARCHIVAL_CASCADE_LOCATION.
  ARCHIVAL_CASCADE_LOCATION

  # ARCHIVAL_CLOUD_COMPUTE_CONNECTIVITY_CHECK.
  ARCHIVAL_CLOUD_COMPUTE_CONNECTIVITY_CHECK

  # ARCHIVAL_DELL_ECS.
  ARCHIVAL_DELL_ECS

  # ARCHIVAL_IBM_COS.
  ARCHIVAL_IBM_COS

  # ARCHIVAL_MULTIPLE_LOCATION.
  ARCHIVAL_MULTIPLE_LOCATION

  # ARCHIVAL_NETAPP_SG.
  ARCHIVAL_NETAPP_SG

  # ARCHIVAL_QSTAR.
  ARCHIVAL_QSTAR

  # Upgrade CDM managed archival locations.
  CDM_LOCATION_UPGRADE

  # Download snapshot from replication target.
  DOWNLOAD_REPLICATED_SNAPSHOT

  # HYPERV_BATCH_ON_DEMAND_BACKUP.
  HYPERV_BATCH_ON_DEMAND_BACKUP

  # HYPERV_CHANGE_RETENTION.
  HYPERV_CHANGE_RETENTION

  # HYPERV_DELETE_SNAPSHOTS.
  HYPERV_DELETE_SNAPSHOTS

  # HYPERV_EXCLUDE_VHD.
  HYPERV_EXCLUDE_VHD

  # HYPERV_LEGAL_HOLD_ALL_ACTIONS.
  HYPERV_LEGAL_HOLD_ALL_ACTIONS

  # HYPERV_LIVEMOUNT_ALL_ACTIONS.
  HYPERV_LIVEMOUNT_ALL_ACTIONS

  # HYPERV_MANAGE_PROTECTION.
  HYPERV_MANAGE_PROTECTION

  # HYPERV_RADAR_RECOVERY.
  HYPERV_RADAR_RECOVERY

  # HYPERV_RECOVER_SNAPSHOTS.
  HYPERV_RECOVER_SNAPSHOTS

  # HYPERV_RUBRIK_BACKUP_SERVICE.
  HYPERV_RUBRIK_BACKUP_SERVICE

  # HYPERV_TAKE_ON_DEMAND_SNAPSHOT.
  HYPERV_TAKE_ON_DEMAND_SNAPSHOT

  # MSSQL_ADD_LOG_SHIPPING_SECONDARY.
  MSSQL_ADD_LOG_SHIPPING_SECONDARY

  # MSSQL_CHANGE_RETENTION.
  MSSQL_CHANGE_RETENTION

  # MSSQL_DELETE_HOST.
  MSSQL_DELETE_HOST

  # MSSQL_DELETE_SNAPSHOTS.
  MSSQL_DELETE_SNAPSHOTS

  # MSSQL_EDIT_CBT.
  MSSQL_EDIT_CBT

  # MSSQL_EDIT_HOST.
  MSSQL_EDIT_HOST

  # MSSQL_EDIT_LOG_BACKUP_PROPERTIES.
  MSSQL_EDIT_LOG_BACKUP_PROPERTIES

  # MSSQL_LEGAL_HOLD_ALL_ACTIONS.
  MSSQL_LEGAL_HOLD_ALL_ACTIONS

  # MSSQL_LIVEMOUNT_ALL_ACTIONS.
  MSSQL_LIVEMOUNT_ALL_ACTIONS

  # MSSQL_MANAGE_PROTECTION.
  MSSQL_MANAGE_PROTECTION

  # MSSQL_RECOVER_SNAPSHOTS.
  MSSQL_RECOVER_SNAPSHOTS

  # MSSQL_REFRESH_HOST.
  MSSQL_REFRESH_HOST

  # MSSQL_REMOVE_LOG_SHIPPING.
  MSSQL_REMOVE_LOG_SHIPPING

  # MSSQL_RESEED_LOG_SHIPPING.
  MSSQL_RESEED_LOG_SHIPPING

  # MSSQL_TAKE_ON_DEMAND_SNAPSHOT.
  MSSQL_TAKE_ON_DEMAND_SNAPSHOT

  # MSSQL_TAKE_TLOG_BACKUP.
  MSSQL_TAKE_TLOG_BACKUP

  # MSSQL_UPDATE_HOST.
  MSSQL_UPDATE_HOST

  # MV_LIVEMOUNT_ALL_ACTIONS.
  MV_LIVEMOUNT_ALL_ACTIONS

  # NUTANIX_CONFIGURE_PRE_POST_SCRIPTS.
  NUTANIX_CONFIGURE_PRE_POST_SCRIPTS

  # NUTANIX_EXCLUDE_DISK.
  NUTANIX_EXCLUDE_DISK

  # NUTANIX_RUBRIK_BACKUP_SERVICE.
  NUTANIX_RUBRIK_BACKUP_SERVICE

  # Support for on-premises Active Directory workload.
  ON_PREM_AD

  # ORACLEDB_CHANGE_RETENTION.
  ORACLEDB_CHANGE_RETENTION

  # ORACLEDB_DELETE_HOST.
  ORACLEDB_DELETE_HOST

  # ORACLEDB_DELETE_SNAPSHOTS.
  ORACLEDB_DELETE_SNAPSHOTS

  # ORACLEDB_EDIT_HOST.
  ORACLEDB_EDIT_HOST

  # ORACLEDB_LEGAL_HOLD_ALL_ACTIONS.
  ORACLEDB_LEGAL_HOLD_ALL_ACTIONS

  # ORACLEDB_LIVEMOUNT_ALL_ACTIONS.
  ORACLEDB_LIVEMOUNT_ALL_ACTIONS

  # ORACLEDB_MANAGE_PROTECTION.
  ORACLEDB_MANAGE_PROTECTION

  # ORACLEDB_RECOVER_SNAPSHOTS.
  ORACLEDB_RECOVER_SNAPSHOTS

  # ORACLEDB_REFRESH_HOST.
  ORACLEDB_REFRESH_HOST

  # ORACLEDB_TAKE_ON_DEMAND_SNAPSHOT.
  ORACLEDB_TAKE_ON_DEMAND_SNAPSHOT

  # ORACLEDB_TAKE_TLOG_BACKUP.
  ORACLEDB_TAKE_TLOG_BACKUP

  # Support for replication setup type update.
  REPLICATION_TARGET_SETUP_UPDATE

  # Support for SAP HANA static retention.
  SAP_HANA_STATIC_RETENTION
}
# Supported in v5.1+
# Describes the result of running the find_bad_disk script.
enum CdmFindBadDiskResultType {
  FIND_BAD_DISK_RESULT_ENUM_FAILED
  FIND_BAD_DISK_RESULT_ENUM_MISSING
  FIND_BAD_DISK_RESULT_ENUM_OKAY
  FIND_BAD_DISK_RESULT_ENUM_TURNED_OFF
}
# CDM group by information.
type CdmGroupByInfo {
  # Interval the grouping was made with.
  group: String!

  # Start time of the grouping.
  start: DateTime

  # End time of the grouping.
  end: DateTime
}
# CDM Snapshot data with group by information applied to it.
type CdmGroupedSnapshot {
  # Information on the grouped snapshots.
  groupByInfo: CdmGroupByInfo

  # List of snapshots for a CDM object.
  cdmSnapshots: CdmWorkloadSnapshotConnection!
}
# Paginated list of CdmGroupedSnapshot objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CdmGroupedSnapshotConnection {
  # List of CdmGroupedSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CdmGroupedSnapshotEdge!]!

  # List of CdmGroupedSnapshot objects.
  nodes: [CdmGroupedSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CdmGroupedSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the CdmGroupedSnapshot object. This wrapper is used for pagination.
type CdmGroupedSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CdmGroupedSnapshot object wrapped by this edge.
  node: CdmGroupedSnapshot!
}
# Cdm Guest credential.
type CdmGuestCredential {
  # Detail of the guest credential.
  detail: CreateGuestCredentialReply!

  # Details of a cluster.
  cluster: Cluster!
}
# A Rubrik CDM Managed Hierarchy object.
interface CdmHierarchyObject {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of CdmHierarchyObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CdmHierarchyObjectConnection {
  # List of CdmHierarchyObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CdmHierarchyObjectEdge!]!

  # List of CdmHierarchyObject objects.
  nodes: [CdmHierarchyObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CdmHierarchyObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the CdmHierarchyObject object. This wrapper is used for pagination.
type CdmHierarchyObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CdmHierarchyObject object wrapped by this edge.
  node: CdmHierarchyObject!
}
# A managed hierarchy protected objects.
interface CdmHierarchySnappableNew {
  # The cluster from which this workload originated.
  cluster: Cluster!

  # The ID of the workload on the Rubrik CDM cluster.
  cdmId: String!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
type CdmHostVolume {
  clusterUuid: String!
  cdmId: String!
  mountPoints: [String!]!
  fileSystemType: String
  size: Long

  # Host volume's ID.
  volumeId: String!

  # ID of the volume group to which this volume belongs.
  volumeGroupId: String
}
type CdmInventorySubHierarchyRoot {
  rootEnum: InventorySubHierarchyRootEnum!

  # List of children.
  childConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): CdmHierarchyObjectConnection!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): CdmHierarchyObjectConnection!

  # List of top-level descendants (with respect to RBAC).
  topLevelDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): CdmHierarchyObjectConnection!
}
# Job status.
enum CdmJobStatus {
  # Acquiring.
  JOB_ACQUIRING

  # Canceled.
  JOB_CANCELED

  # Canceling.
  JOB_CANCELING

  # Failed.
  JOB_FAILED

  # Finishing.
  JOB_FINISHING

  # Not found.
  JOB_NOTFOUND

  # Pending.
  JOB_PENDING

  # Queued.
  JOB_QUEUED

  # Running.
  JOB_RUNNING

  # Succeeded.
  JOB_SUCCEEDED

  # Undoing.
  JOB_UNDOING
}
# Specific info for AWS target created on Cdm.
type CdmManagedAwsTarget implements Target {
  # Id of the AWS location.
  id: String!

  # Region of the AWS location.
  region: AwsRegion!

  # Immutability info of Aws location.
  immutabilitySettings: AwsImmutabilitySettingsType

  # Storage class of the AWS target.
  storageClass: AwsStorageClass!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific info for Azure target created on Cdm.
type CdmManagedAzureTarget implements Target {
  # ID of the Azure location.
  id: String!

  # Specifies whether Azure archival tiering is supported or not.
  isAzureTieringSupported: Boolean

  # Instance type of the Azure location.
  instanceType: InstanceTypeEnum!

  # Immutability info of Azure location.
  immutabilitySettings: AzureImmutabilitySettingsType

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific info for Gcp target created on Cdm.
type CdmManagedGcpTarget implements Target {
  # Id of the GCP location.
  id: String!

  # Region of the GCP location.
  region: GcpRegion!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific info for Glacier target created on Cdm.
type CdmManagedGlacierTarget implements Target {
  # Id of the Glacier location.
  id: String!

  # Region of the Glacier location.
  region: AwsRegion!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific info for Nfs target created on Cdm.
type CdmManagedNfsTarget implements Target {
  # Id of the Nfs location.
  id: String!

  # Host of the Nfs location.
  host: String!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific info for S3Compatible created on Cdm.
type CdmManagedS3CompatibleTarget implements Target {
  # Id of the S3Compatible location.
  id: String!

  # Host of the S3Compatible location.
  endpoint: String!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific information for Tape target created on CDM cluster.
type CdmManagedTapeTarget implements Target {
  # ID of the Tape location.
  id: String!

  # Host name of the Tape location.
  hostName: String!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Supported in v5.3+
# Type of managed volume.
enum CdmManagedVolumeType {
  # Specifies that type of the Managed Volume is Always Mounted.
  MANAGED_VOLUME_TYPE_ALWAYS_MOUNTED

  # Specifies that type of the Managed Volume is SLA Based.
  MANAGED_VOLUME_TYPE_SLA_BASED
}
# MongoDB node details for the source.
type CdmMongoNode {
  # Host name of the MongoDB node.
  host: String!

  # Port details of the MongoDB node.
  port: Int!

  # Host FID of the MongoDB node.
  hostFid: UUID!
}
# SSL Configuration for a MongoDB source object.
type CdmMongoSslParams {
  # Specifies whether SSL is enabled or not.
  isSslEnabled: Boolean!

  # Path to the CA certificate.
  sslCaCerts: String!

  # Path to the SSL Certificate.
  sslCertfile: String!

  # Path to the SSL Key.
  sslKeyfile: String!

  # SSL certificate requirements.
  sslCertRequirements: SourceSslCertReqs!
}
# Replica SQL Server database of an availability group.
type CdmMssqlDbReplica {
  # The state of the replica.
  state: String!

  # Specifies if the replica SQL Server database is in standby mode.
  isStandBy: Boolean!

  # Deprecated. Use `isDeleted` instead.
  isArchived: Boolean!

  # The recovery model of the replica.
  recoveryModel: String!

  # Specifies whether the Rubrik Backup Service has permissions to back up the replica SQL Server database. When this value is 'true', the Rubrik Backup Service has permission to back up the database.
  hasPermissions: Boolean!

  # ID of the root of this object.
  instanceRootId: String!

  # Specifies if a snapshot needs to be taken before a log backup can occur on the replica SQL Server database.
  snapshotNeeded: Boolean!

  # Cluster ID of the replica SQL Server database.
  clusterUuid: String!

  # Information about the availability group of the replica SQL Server database.
  availabilityInfo: CdmMssqlDbReplicaAvailabilityInfo

  # Instance of the replica SQL Server database.
  instance: MssqlInstance
}
# Information about the availability group of the replica SQL Server database.
type CdmMssqlDbReplicaAvailabilityInfo {
  # ID of the availability database replica.
  replicaId: String!

  # Role of the availability database replica. Possible values are: PRIMARY, SECONDARY, or RESOLVING.
  role: String!

  # Specifies if availability database replica mode is synchronous or asynchronous.
  availabilityMode: String!
}
# The node details of a Rubrik CDM cluster.
type CdmNodeDetail {
  # Rubrik cluster node ID.
  nodeId: String!

  # Rubrik cluster UUID.
  clusterId: UUID!

  # Data IP address of the Rubrik cluster node.
  dataIpAddress: String!

  # IPMI IP address of the Rubrik cluster node. Not available for virtual or cloud cluster nodes.
  ipmiIpAddress: String
}
# Supported in v5.0+
# Consistency level mandated for this VM.
enum CdmNutanixSnapshotConsistencyMandate {
  NUTANIX_SNAPSHOT_CONSISTENCY_MANDATE_APPLICATION_CONSISTENT
  NUTANIX_SNAPSHOT_CONSISTENCY_MANDATE_AUTOMATIC
  NUTANIX_SNAPSHOT_CONSISTENCY_MANDATE_CRASH_CONSISTENT
}
# Representation of a single node in an Oracle RAC.
type CdmOracleRacNode {
  # Host name of the RAC node.
  nodeName: String!

  # Connectivity status of the RAC node.
  status: HostConnectivityStatusEnum!

  # FID of the physical host object of the RAC node.
  hostFid: String
}
# The priority order used for the selection of a RAC node by Oracle backup and recovery.
type CdmOracleRacNodeOrder {
  # Host name of the RAC node.
  nodeName: String!

  # Priority order of the RAC node.
  order: Int!
}
# The details of Rubrik CDM OVA for Virtual Clusters.
type CdmOvaDetail {
  # Rubrik CDM release version of the CDM OVA.
  cdmVersion: String!

  # AWS S3 link where the Rubrik CDM OVA is hosted and can be downloaded from.
  ovaDownloadLink: String!

  # Size of the Rubrik CDM OVA file.
  ovaSize: String!
}
# The enum describes the status of migration.
enum CdmReportMigrationStatus {
  # The report failed to migrate.
  FAILED

  # The report is partially migrated.
  PARTIAL_SUCCESS

  # The report is ready for migration.
  READY

  # The report has migrated successfully.
  SUCCESS

  # The report can not be migrated.
  UNAVAILABLE

  # Unspecified.
  UNSPECIFIED
}
# Location for Rubrik CDM workload.
type CdmSnappableLocation {
  # Workload location.
  location: String!
}
type CdmSnapshot implements GenericSnapshot {
  id: UUID!
  date: DateTime!
  expirationDate: DateTime
  expiryHint: Boolean!
  isCorrupted: Boolean!
  indexingAttempts: Long!
  isIndexed: Boolean!
  isUnindexable: Boolean!
  isOnDemandSnapshot: Boolean!

  # Specifies whether the snapshot follows retention lock constraint.
  isRetentionLocked: Boolean
  cdmId: String!
  cdmVersion: String!
  snapshotRetentionInfo: CdmSnapshotRetentionInfo
  isDownloadedSnapshot: Boolean

  # Specifies whether the snapshot is an incremental SAP HANA snapshot.
  isSapHanaIncrementalSnapshot: Boolean

  # Contains info regarding legal hold on snapshot, null otherwise.
  legalHoldInfo: LegalHoldInfo

  # Resource spec for a snapshot.
  resourceSpec: String
  cluster: Cluster!

  # The ID of the parent snapshot.
  parentSnapshotId: String

  # SAP HANA specific metadata for the snapshot.
  sapHanaAppMetadata: SapHanaAppMetadata

  # Db2 specific metadata for the snapshot.
  db2AppMetadata: Db2AppMetadata

  # VMware specific metadata for the snapshot.
  vmwareAppMetadata: VmwareAppMetadata

  # Managed Volume specific metadata for the snapshot. Null if snapshot is not of a managed volume.
  managedVolumeAppMetadata: ManagedVolumeAppMetadata

  # Active Directory specific metadata for the snapshot. Null if snapshot is not of a domain controller.
  activeDirectoryAppMetadata: ActiveDirectoryAppMetadata

  # Number of files in the snapshot.
  fileCount: Long!

  # Mapping from snapshot to delete pending action status.
  pendingSnapshotDeletion: PendingSnapshotDeletion

  # Flag if the snapshot is an anomaly.
  isAnomaly: Boolean!
  hasDelta: Boolean!
  snappableNew: CdmHierarchySnappableNew!
  replicationLocations: [DataLocation!]
  archivalLocations: [DataLocation!]
  cloudNativeLocations: [DataLocation!]
  localLocations: [DataLocation!]
  locations: [DataLocation!]
  consistencyLevel: ConsistencyLevelEnum

  # SLA domain of the snapshot.
  slaDomain: SlaDomain

  # Children snapshot ID list.
  childSnapshots: [CdmSnapshot!]!

  # Non-null when a user has assigned a SLA to this snapshot, and the SLA assignment is in the process of being synced over to CDM.
  pendingSla: SlaDomain

  # Latest user note information.
  latestUserNote: LatestUserNote

  # Vmware vApp specific snapshot metadata.
  vappAppMetadata: [VappAppMetadata!]

  # Cloud state of the snapshot.
  cloudState: SnapshotCloudState

  # Snapshot of a Rubrik CDM workload.
  cdmWorkloadSnapshot: CdmWorkloadSnapshot

  # Mssql specific metadata for the snapshot.
  mssqlAppMetadata: MssqlAppMetadata

  # Specifies whether or not the snapshot is expired.
  isExpired: Boolean!

  # The workload ID of the snapshot.
  snappableId: String!

  # Specifies whether the snapshot is quarantined.
  isQuarantined: Boolean!
}
# Paginated list of CdmSnapshot objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CdmSnapshotConnection {
  # List of CdmSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CdmSnapshotEdge!]!

  # List of CdmSnapshot objects.
  nodes: [CdmSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CdmSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the CdmSnapshot object. This wrapper is used for pagination.
type CdmSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CdmSnapshot object wrapped by this edge.
  node: CdmSnapshot!
}
# CDM snapshot filter.
input CdmSnapshotFilter {
  # The field to filter the snapshot list on.
  field: CdmSnapshotFilterField = EMPTY

  # Texts used to support the field being filtered on.
  texts: [String!] = []
}
# Ways that CDM snapshots can be filtered.
enum CdmSnapshotFilterField {
  # Filter on the snapshot's cluster id.
  CLUSTER_UUID

  # No filter value.
  EMPTY

  # Filter on whether the snapshot is expired.
  IS_EXPIRED

  # Filter on whether the snapshot was taken as an on demand snapshot.
  IS_ON_DEMAND_SNAPSHOT

  # Filter by workload ID.
  SNAPPABLE_ID

  # Filter by snapshot ID.
  SNAPSHOT_ID

  # Filter on the time the snapshot was taken.
  TIME_RANGE
}
input CdmSnapshotFilterInput {
  clusterUuid: [UUID!]
  snappableId: [String!]
  snapshotId: [UUID!]
  timeRange: TimeRangeInput
  isOnDemandSnapshot: Boolean

  # Filter on whether the snapshot is indexed.
  isIndexed: Boolean
}
# Snapshot data with groupby information applied to it.
type CdmSnapshotGroupBy {
  # The groupby information applied to the snapshot data.
  groupByInfo: CdmSnapshotGroupByInfo!

  # Paginated snapshot data.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date): CdmSnapshotConnection!

  # Provides further groupings for the data.
  cdmSnapshotGroupBy(
    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): [CdmSnapshotGroupBy!]!
}
# Paginated list of CdmSnapshotGroupBy objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CdmSnapshotGroupByConnection {
  # List of CdmSnapshotGroupBy objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CdmSnapshotGroupByEdge!]!

  # List of CdmSnapshotGroupBy objects.
  nodes: [CdmSnapshotGroupBy!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CdmSnapshotGroupBy objects matching the request arguments.
  count: Int!
}
# Wrapper around the CdmSnapshotGroupBy object. This wrapper is used for pagination.
type CdmSnapshotGroupByEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CdmSnapshotGroupBy object wrapped by this edge.
  node: CdmSnapshotGroupBy!
}
enum CdmSnapshotGroupByEnum {
  Day
  Hour
  Month
  Quarter
  Week
  Year
}
union CdmSnapshotGroupByInfo = TimeRangeWithUnit
# CDM Snapshot data with group by information applied to it.
type CdmSnapshotGroupBySummary {
  # Information on the grouped snapshots.
  count: Int!

  # Information on the grouped snapshots.
  groupByInfo: TimeRangeWithUnit!

  # List of snapshots for a CDM object.
  cdmSnapshots: CdmSnapshotConnection!
}
# Paginated list of CdmSnapshotGroupBySummary objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CdmSnapshotGroupBySummaryConnection {
  # List of CdmSnapshotGroupBySummary objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CdmSnapshotGroupBySummaryEdge!]!

  # List of CdmSnapshotGroupBySummary objects.
  nodes: [CdmSnapshotGroupBySummary!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CdmSnapshotGroupBySummary objects matching the request arguments.
  count: Int!
}
# Wrapper around the CdmSnapshotGroupBySummary object. This wrapper is used for pagination.
type CdmSnapshotGroupBySummaryEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CdmSnapshotGroupBySummary object wrapped by this edge.
  node: CdmSnapshotGroupBySummary!
}
# CDM snapshot location retention information.
type CdmSnapshotLocationRetentionInfo {
  # Required. Supported in v5.2+
  # Name of the location.
  name: String!

  # Required. Supported in v5.2+
  # Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.
  isSnapshotPresent: Boolean!

  # Supported in v5.2+
  # A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.
  isExpirationDateCalculated: Boolean!

  # Supported in v5.2+
  # Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.
  expirationTime: DateTime

  # Supported in v5.2+
  # The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of "Ready for Deletion" means that the snapshot will be deleted soon. A value of "Forever" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete.
  snapshotFrequency: SnapshotFrequency!

  # Supported in v5.2+
  # Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster.
  isExpirationInformationUnavailable: Boolean!

  # Location ID for snapshot retention.
  locationId: String!
}
# Snapshot retention information.
type CdmSnapshotRetentionInfo {
  # Snapshot retention information on the local cluster.
  localInfo: CdmSnapshotLocationRetentionInfo

  # Specifies whether custom retention is applied.
  isCustomRetentionApplied: Boolean!

  # List of snapshot retention information objects for the archival locations.
  archivalInfos: [CdmSnapshotLocationRetentionInfo!]

  # List of snapshot retention information objects for the replicated locations.
  replicationInfos: [CdmSnapshotLocationRetentionInfo!]
}
enum CdmSnapshotSortByEnum {
  Date
  SnappableId
  SnapshotId
}
# Target-specific information created and synchronized from a Rubrik CDM cluster.
type CdmTarget implements Target {
  id: String!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# CDM upgrade availability.
type CdmUpgradeAvailabilityReply {
  # Availability request status.
  status: StatusResponse

  # Upgrade available flag.
  isAvailable: Boolean!
}
type CdmUpgradeInfo {
  # The cluster UUID.
  clusterUuid: UUID!

  # Version of the Rubrik cluster.
  version: String!

  # Downloaded version of tarball.
  downloadedVersion: String

  # Cluster job status.
  clusterJobStatus: ClusterJobStatusTypeEnum

  # Upgrade state machine status.
  stateMachineStatus: String

  # The time at which the state machine was last updated..
  stateMachineStatusAt: DateTime

  # Scheduled-Upgrade timestamp.
  scheduleUpgradeAt: DateTime

  # Scheduled-Upgrade mode.
  scheduleUpgradeMode: String

  # Scheduled-Upgrade action.
  scheduleUpgradeAction: String

  # Current running state progress percentage.
  currentStateProgress: Float

  # Overall upgrade progress.
  overallProgress: Float

  # The time at which the upgrade started.
  upgradeStartAt: DateTime

  # The time at which the upgrade ended.
  upgradeEndAt: DateTime

  # The version of the cluster before the upgrade.
  previousVersion: String

  # Version status of the Rubrik cluster.
  versionStatus: VersionStatus

  # Recommended upgrade version of the Rubrik cluster.
  upgradeRecommendationInfo: UpgradeRecommendationInfo

  # Pending states of upgrade.
  pendingStates: String

  # Finished states of upgrade.
  finishedStates: String

  # Status of the Rubrik cluster.
  clusterStatus: CdmClusterStatus

  # You are authorized to perform operations on the Rubrik cluster.
  authorizedOperations: AuthorizedOperations!

  # The upgrade event series ID.
  upgradeEventSeriesId: String

  # Time taken by the last upgrade.
  lastUpgradeDuration: UpgradeDurationReply

  # Upgrade type in cdm cluster.
  fastUpgradePreferred: Boolean

  # Rubrik CDM cluster node details.
  cdmClusterNodeDetails: [CdmNodeDetail!]!
}
# Filters for the cluster list.
input CdmUpgradeInfoFilterInput {
  # Cluster UUIDs.
  id: [UUID!]

  # Cluster names.
  name: [String!]

  # Cluster types.
  type: [ClusterTypeEnum!]

  # Cluster registration time greater than.
  registrationTime_gt: DateTime

  # Cluster registration time less than.
  registrationTime_lt: DateTime

  # Cluster software version greater than or equal to.
  minSoftwareVersion: String

  # Cluster software version greater than or equal to.
  downloadedVersion: [String!]
  installedVersion: [String!]

  # Cluster upgrade job status.
  upgradeJobStatus: [ClusterJobStatusTypeEnum!]

  # Location of cluster.
  clusterLocation: [String!]
  versionStatus: [VersionStatus!]

  # Prechecks status of cluster.
  prechecksStatus: [PrechecksStatusTypeEnum!]
  connectionState: [ClusterStatus!]
  upgradeScheduled: Boolean

  # Product type of Rubrik cluster.
  productType: [ClusterProductEnum!]
}
# CDM upgrade recommendation.
type CdmUpgradeRecommendationReply {
  # Status of recommendation request.
  status: StatusResponse

  # Upgrade recommended flag.
  isRecommended: Boolean!
}
# CDM release detail.
type CdmUpgradeReleaseDetail {
  # Name of CDM release.
  name: String!

  # Description of CDM release.
  description: String!

  # CDM package release date.
  releaseDate: String!

  # Release date of GA version.
  gaReleaseDate: String!

  # Download link to tarball.
  tarDownloadLink: String!

  # Release notes link.
  releaseNotesLink: String!

  # Md5Sum of the package.
  md5Sum: String!

  # Size of CDM package.
  size: Long!

  # Is this a recommended version.
  isRecommended: Boolean!

  # Is cluster upgradeable to version.
  isUpgradable: Boolean!

  # The customer adoption status of the Rubrik CDM release.
  adoptionStatus: AdoptionStatus!
}
# CDM release details.
type CdmUpgradeReleaseDetailsFromSupportPortalReply {
  # List of CDM release detail object.
  releaseDetails: [CdmUpgradeReleaseDetail!]!

  # Support portal link.
  supportSoftwareLink: String!

  # Link to CDM upgrade matrix.
  compatibilityMatrixLink: String!
}
# Supported in v5.0+
type CdmWorkload {
  # Supported in v5.0
  # ID of the effective SLA domain
  effectiveSlaDomainId: String

  # Supported in v5.0
  # name of the effective SLA domain
  effectiveSlaDomainName: String

  # Supported in v5.0
  # Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
  effectiveSlaDomainPolarisManagedId: String

  # Supported in v5.0
  # ID of the object from which the effective SLA domain is inherited
  effectiveSlaSourceObjectId: String

  # Supported in v5.0
  # Name of the object from which the effective SLA domain is inherited
  effectiveSlaSourceObjectName: String

  # Supported in v5.2+
  # The ID of the SLA Domain whose retention policy is in use.
  retentionSlaDomainId: String
  slaAssignable: SlaAssignable
  slaAssignment: SnappableSlaAssignment!
  effectiveSlaHolder: EffectiveSlaHolder
}
# Snapshot of a Rubrik CDM workload.
type CdmWorkloadSnapshot {
  # ID of the SLA Domain.
  id: String!

  # Date the snapshot will expire.
  expirationDate: DateTime

  # Specifies whether the expiration hint is enabled.
  expiryHint: Boolean!

  # Specifies whether the snapshot is corrupted or not.
  isCorrupted: Boolean!

  # Number of attempts for indexing the snapshot.
  indexingAttempts: Long!

  # Specifies whether the snapshot is indexed or not.
  isIndexed: Boolean!

  # Specifies whether the snapshot can be unindexed.
  isUnindexable: Boolean!

  # Specifies whether the snapshot is an on-demand snapshot.
  isOnDemandSnapshot: Boolean!

  # ID of the Rubrik cluster to which the snapshot belongs.
  clusterUuid: String!

  # Rubrik CDM ID of the snapshot.
  cdmId: String!

  # Version of the Rubrik cluster to which the snapshot belongs.
  cdmVersion: String!

  # The information about how long this snapshot will be retained.
  retentionInfo: String!

  # Specifies whether the snapshot was downloaded.
  isDownloadedSnapshot: Boolean!

  # Sub objects for the snapshot.
  subObjs: [SnapshotSubObject!]!

  # Specifies whether the snapshot is expired or not.
  isExpired: Boolean!

  # SLA Domain of the snapshot.
  slaDomain: SlaConfig

  # ID of the workload to which the snapshot belongs.
  workloadId: String!

  # Type of the workload to which the snapshot belongs.
  workloadType: String!

  # The date the snapshot was taken. This value is formatted as YYYY/MM/DD HH:mm:ss.
  date: String!

  # Latest user note information.
  latestUserNote: LatestUserNote
}
# Paginated list of CdmWorkloadSnapshot objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CdmWorkloadSnapshotConnection {
  # List of CdmWorkloadSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CdmWorkloadSnapshotEdge!]!

  # List of CdmWorkloadSnapshot objects.
  nodes: [CdmWorkloadSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CdmWorkloadSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the CdmWorkloadSnapshot object. This wrapper is used for pagination.
type CdmWorkloadSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CdmWorkloadSnapshot object wrapped by this edge.
  node: CdmWorkloadSnapshot!
}
# Supported in v5.1+
# Current Local CDP Status of virtual machine.
enum CdpLocalStatus {
  CDP_LOCAL_STATUS_ACTIVE
  CDP_LOCAL_STATUS_FAILED
  CDP_LOCAL_STATUS_NOT_ENABLED
  CDP_LOCAL_STATUS_PENDING
  CDP_LOCAL_STATUS_RESYNCING
  CDP_LOCAL_STATUS_TAKING_SNAPSHOT
}
# CDP performance dashboard filter field.
enum CdpPerfDashboardFilterField {
  # CDP IO filter status filter field.
  CDP_IO_FILTER_STATUS

  # CDP local status filter field.
  LOCAL_STATUS

  # CDP replication status filter field.
  REPLICATION_STATUS

  # SLA domain ID filter field.
  SLA_DOMAIN_ID

  # Source cluster UUID field.
  SOURCE_CLUSTER_UUID

  # Unknown filter field.
  UNKNOWN

  # CDP virtual machine name filter field.
  VM_NAME
}
# Cdp performance dashboard filter.
input CdpPerfDashboardFilterParam {
  # CDP performance dashboard filter field.
  filterField: CdpPerfDashboardFilterField = UNKNOWN

  # Filter for specific source cluster.
  sourceClusterUuids: [String!] = []

  # Filter for specific SLA domain ID.
  slaDomainIds: [String!] = []

  # Filter for specific CDP local status.
  localStatus: [CdpLocalStatus!] = []

  # Filter for specific CDP local status.
  replicationStatus: [CdpReplicationStatus!] = []

  # Filter for specific CDP IO filter status.
  cdpIoFilterStatus: [IoFilterStatus!] = []

  # Filter for specific CDP virtual machine name.
  vmName: String = ""
}
# CDP performance dashboard sorting parameters.
input CdpPerfDashboardSortParam {
  # Sort type.
  type: CdpPerfDashboardSortType = UNKNOWN

  # Sorts by order.
  sortOrder: SortOrder = ASC
}
# CDP performance dashboard sort type Enum.
enum CdpPerfDashboardSortType {
  # CDP IO filter status.
  CDP_IO_FILTER_STATUS

  # Latest local snapshot time.
  LATEST_SNAPSHOT_TIME

  # CDP local status.
  LOCAL_STATUS

  # CDP replication status.
  REPLICATION_STATUS

  # Replication cluster.
  REPLICATION_TARGET

  # SLA domain.
  SLA_DOMAIN

  # Source cluster.
  SOURCE_CLUSTER

  # Unknown type.
  UNKNOWN

  # CDP virtual machine location.
  VM_LOCATION

  # CDP virtual machine name.
  VM_NAME
}
# Supported in v5.1+
# Current CDP Replication Status of virtual machine.
enum CdpReplicationStatus {
  CDP_REPLICATION_STATUS_FAILED
  CDP_REPLICATION_STATUS_HEALTHY
  CDP_REPLICATION_STATUS_INITIALIZING
  CDP_REPLICATION_STATUS_NOT_ENABLED
}
# The details about a CDP virtual machine.
type CdpVmInfo {
  # ID.
  vmId: String!

  # Name.
  vmName: String!

  # VCenter address.
  vmLocation: String!

  # Source cluster name.
  sourceCluster: String!

  # Replication cluster name.
  replicationTarget: String!

  # SLA Domain ID.
  slaDomainName: String!

  # Latest snapshot time.
  latestSnapshotTime: DateTime

  # Local status.
  cdpLocalStatus: CdpLocalStatus

  # Replication status.
  cdpReplicationStatus: CdpReplicationStatus

  # IO Filter installation status.
  ioFilterStatus: IoFilterStatus
}
# Paginated list of CdpVmInfo objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CdpVmInfoConnection {
  # List of CdpVmInfo objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CdpVmInfoEdge!]!

  # List of CdpVmInfo objects.
  nodes: [CdpVmInfo!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CdpVmInfo objects matching the request arguments.
  count: Int!
}
# Wrapper around the CdpVmInfo object. This wrapper is used for pagination.
type CdpVmInfoEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CdpVmInfo object wrapped by this edge.
  node: CdpVmInfo!
}
type CellData {
  displayableValue: DisplayableValue
  metadata: [Metadata!]!
}
# Fields by which certificates can be sorted.
enum CertMgmtSortBy {
  # The date the CSR was created.
  CREATION_DATE

  # Name of the certificate.
  NAME
}
# Certificate information.
type Certificate {
  certificateId: Long!
  name: String!
  description: String!
  hasKey: Boolean!
  expiringAt: DateTime
  usedBy: [String!]!
  certificate: String!
}
# Information about the Rubrik cluster to which the certificate has been uploaded.
type CertificateClusterInfo {
  # Specifies whether the Rubrik cluster trusts any certificate signed by the certificate's issuer.
  isTrusted: Boolean!

  # The name of the Rubrik cluster.
  name: String!

  # The UUID of the Rubrik cluster.
  clusterUuid: UUID!

  # The Rubrik CDM ID of the certificate.
  cdmCertUuid: UUID!
}
# The Rubrik cluster on which to add the certificate.
input CertificateClusterInput {
  # The Rubrik cluster on which to add the certificate.
  clusterUuid: UUID!

  # Specifies whether to add the certificate to the Rubrik cluster trust store. Any certificate signed by the issuer of the certificate will be trusted by the Rubrik cluster.
  isTrusted: Boolean!
}
# An error associated with a certificate operation on a Rubrik cluster.
type CertificateClusterOperationError {
  # The UUID of the Rubrik cluster.
  clusterUuid: String!

  # The error of the certificate operation.
  error: String!

  # Specifies whether the cause of the error is a network or synchronization timeout.
  isTimedOut: Boolean!
}
# Paginated list of Certificate objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CertificateConnection {
  # List of Certificate objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CertificateEdge!]!

  # List of Certificate objects.
  nodes: [Certificate!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Certificate objects matching the request arguments.
  count: Int!
}
# Wrapper around the Certificate object. This wrapper is used for pagination.
type CertificateEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Certificate object wrapped by this edge.
  node: Certificate!
}
# Supported in v5.1+
input CertificateImportRequestInput {
  # Supported in v5.1+
  # ID of the certificate signing request (CSR) associated with the imported certificate.
  csrId: String

  # Supported in v5.1+
  # User-friendly description for the certificate.
  description: String

  # Supported in v5.2+
  # The private key, in PEM format, to be imported. If a private key is provided using this field instead of the pemFile field, the import fails if the private key is not successfully parsed.
  privateKey: String

  # Supported in v7.0+
  # A Boolean value specifying whether the certificate should be added to the trust store. When the value is 'true' the certificate is added to the trust store. when the value is 'false', the certificate is not added to trust store.
  isTrusted: Boolean

  # Required. Supported in v5.1+
  # Display name for the certificate.
  name: String!

  # Required. Supported in v5.1+
  # The certificates, and optionally private key to be imported, in PEM format.
  pemFile: String!
}
# Supported in v5.1+
type CertificateSummaryListResponse {
  # Supported in v5.1+
  # List of matching objects.
  data: [AddClusterCertificateReply!]!

  # Supported in v5.1+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.1+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Different types of usages of a certificate on RSC.
enum CertificateUsage {
  # The usage is unknown.
  CERTIFICATE_USAGE_UNKNOWN

  # Rubrik Security Cloud Private - SMTP TLS certificate.
  ON_PREM_SMTP

  # Rubrik Security Cloud - Private TLS Web certificate.
  ON_PREM_TLS_CERT

  # SP encryption certificate.
  SSO_SP_ENCRYPTION

  # SP signing certificate.
  SSO_SP_SIGNING
}
# Different types of usages of a certificate on Rubrik Security Cloud.
type CertificateUsageInfo {
  # The type of usage of the certificate on Rubrik Security Cloud.
  type: CertificateUsage!

  # The metadata about a certificate's usage on Rubrik Security Cloud.
  params: [CertificateUsageParameter!]!
}
# The metadata about a certificate's usage.
type CertificateUsageParameter {
  # The key of the metadata.
  key: String!

  # The value of the metadata.
  value: String!
}
input ChangePasswordInput {
  # Email of user performing reset.
  email: String = ""

  # New password for user.
  password: String = ""
}
# Input for updating Volume filter driver on host.
input ChangeVfdOnHostInput {
  # Required. Host volume filter driver install definition.
  config: HostVfdInstallRequestInput!
}
# Reply Object for ChangeVfdOnHost.
type ChangeVfdOnHostReply {
  output: InternalChangeVfdOnHostResponse
}
# Channel membership type filter.
enum ChannelMembershipType {
  # Used to retrieve both public and private channels.
  ALL

  # Used to retrieve only private channels.
  PRIVATE

  # Used to retrieve only public channels.
  STANDARD
}
# Archived snapshot locking related details for a workload.
type CheckArchivedSnapshotsLockedReply {
  # Snapshot IDs for which the archived copy is locked.
  lockedSnapshotIds: [String!]!

  # Snapshot IDs for which the archived copy is not locked.
  unlockedSnapshotIds: [String!]!

  # Snapshot IDs are not valid for checking if they are locked. Snapshots which do not have unexpired archival copy are considered invalid.
  invalidSnapshotIds: [String!]!
}
# Response for request to check if we can unmap subscription from storage account.
type CheckAzurePersistentStorageSubscriptionCanUnmapReply {
  # Whether we can unmap archival location from subscription.
  canUnmap: Boolean!
}
enum ClassificationPolicyColor {
  COLOR_001
  COLOR_002
  COLOR_003
  COLOR_004
  COLOR_005
  COLOR_006
  COLOR_007
  COLOR_008
  COLOR_009
  COLOR_010
  COLOR_011
  COLOR_012
  UNKNOWN
}
type ClassificationPolicyDetail {
  id: String!
  name: String!
  description: String!
  colorEnum: ClassificationPolicyColor!
  createdTime: Long!
  lastUpdatedTime: Long!
  mode: ClassificationPolicyMode!
  hierarchyObjectIds: [String!]!
  analyzers: [Analyzer!]!
  deletable: Boolean!
  creator: User

  # Connection on hierarchy objects.
  hierarchyObjectConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder): HierarchyObjectConnection!

  # Connection on AssignmentResourceDetails.
  assignmentResources(
    # Object name to search.
    searchObjectName: String,

    # Types of workloads used for filtering the query results.
    workloadTypes: [DataGovObjectType!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort by policy resource assignment type.
    directResourceAssignmentSortBy: DirectResourceAssignmentSortBy,

    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): AssignmentResourceDetailsConnection!
  hierarchyObjects: [HierarchyObject]!
  objectStatuses: [ObjectStatus!]!
  totalObjects: Int!
  numAnalyzers: Int!
  whitelists: [ClassificationPolicyWhitelistDetailedEntry!]!
}
# Paginated list of ClassificationPolicyDetail objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ClassificationPolicyDetailConnection {
  # List of ClassificationPolicyDetail objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ClassificationPolicyDetailEdge!]!

  # List of ClassificationPolicyDetail objects.
  nodes: [ClassificationPolicyDetail!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ClassificationPolicyDetail objects matching the request arguments.
  count: Int!
}
# Wrapper around the ClassificationPolicyDetail object. This wrapper is used for pagination.
type ClassificationPolicyDetailEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ClassificationPolicyDetail object wrapped by this edge.
  node: ClassificationPolicyDetail!
}
enum ClassificationPolicyMode {
  COMPLIANCE
  DISCOVERY
}
type ClassificationPolicySummary {
  id: String!
  name: String!
  colorEnum: ClassificationPolicyColor!
}
type ClassificationPolicyWhitelistDetailedEntry {
  stdPath: String!
  nativePath: String!
  updateTs: Long!
  updateUsername: String!
  snappable: HierarchyObject!
}
# Input required to clear the credentials used for performing backups.
input ClearCloudNativeSqlServerBackupCredentialsInput {
  # Rubrik IDs of the objects. Some examples of objects are: Azure Subscriptions, Resource Groups.
  objectIds: [UUID!]!

  # The object type for which the credentials should be cleared.
  workloadType: WorkloadLevelHierarchy!
}
# List of objects where clearing backup credentials succeeded and failed.
type ClearCloudNativeSqlServerBackupCredentialsReply {
  # Object IDs for which credentials were cleared successfully.
  successObjectIds: [UUID!]!

  # Object IDs for which credentials failed to be cleared.
  failedObjectIds: [UUID!]!
}
# Snapshot details.
type ClosestSnapshotDetail {
  # The snapshot ID.
  id: String!

  # The snapshot creation time.
  date: DateTime!

  # Specifies whether the snapshot is anomalous or not.
  isAnomaly: Boolean!

  # Specifies whether the snapshot is quarantined or not.
  isQuarantined: Boolean!
}
# The result of a search for an unexpired snapshot closest to a point in time for a specific workload.
type ClosestSnapshotSearchResult {
  # The workload ID.
  snappableId: String!

  # The snapshot closest to the point in time.
  snapshot: ClosestSnapshotDetail

  # An error that occurred during the search.
  error: SnapshotSearchError
}
# Cloud Account (AWS, Azure etc.) information.
interface CloudAccount {
  # The ID of this Cloud Account.
  cloudAccountId: String!

  # The name of this Cloud Account.
  name: String!

  # The description of this Cloud Account.
  description: String

  # The type of this Cloud Provider.
  cloudProvider: CloudAccountType!

  # The connection status of this Cloud Account.
  connectionStatus: ConnectionStatusType!
}
# Actions that can be performed on a cloud account.
enum CloudAccountAction {
  # Create a cloud account.
  CREATE

  # Delete a cloud account.
  DELETE

  # Update child accounts of a cloud account.
  UPDATE_CHILD_ACCOUNTS

  # Update permissions of a cloud account.
  UPDATE_PERMISSIONS

  # Update regions in a cloud account.
  UPDATE_REGIONS
}
# CIDR block.
type CloudAccountAddressBlockV4 {
  # CIDR block.
  cidrBlock: String!
}
# Cloud Account with mapped Exocompute account.
type CloudAccountDetails {
  # Rubrik ID of cloud account.
  id: UUID!

  # Native ID of cloud account.
  nativeId: String!

  # Name of cloud account.
  name: String!
}
# Cloud account features.
enum CloudAccountFeature {
  # All cloud account features.
  ALL

  # Cloud account feature is App Flows.
  APP_FLOWS

  # Cloud account feature is Archival.
  ARCHIVAL

  # Cloud account feature is Azure SQL DB Protection.
  AZURE_SQL_DB_PROTECTION

  # Cloud account feature is Azure SQL MI Protection.
  AZURE_SQL_MI_PROTECTION

  # Cloud account feature is Cloud Accounts.
  CLOUDACCOUNTS

  # Cloud account feature is Cloud Native Archival.
  CLOUD_NATIVE_ARCHIVAL

  # Cloud account feature is Cloud Native Archival Encryption.
  CLOUD_NATIVE_ARCHIVAL_ENCRYPTION

  # Cloud account feature is Cloud Native Blob Protection.
  CLOUD_NATIVE_BLOB_PROTECTION

  # Cloud account feature is Cloud Native Protection.
  CLOUD_NATIVE_PROTECTION

  # Cloud account feature is Cloud Native S3 Protection.
  CLOUD_NATIVE_S3_PROTECTION

  # Cloud account feature is Data Center Archival Consolidation.
  DATA_CENTER_CONSOLIDATION

  # Cloud account feature is Data Center Archival Immutability.
  DATA_CENTER_IMMUTABILITY

  # Cloud account feature is Data Center Archival KMS.
  DATA_CENTER_KMS

  # Cloud account feature is Data Center Role Based Archival.
  DATA_CENTER_ROLE_BASED_ARCHIVAL

  # Cloud account feature is Exocompute.
  EXOCOMPUTE

  # Feature is not specified.
  FEATURE_UNSPECIFIED

  # Cloud account feature is GCP Shared VPC Host.
  GCP_SHARED_VPC_HOST

  # Cloud account feature is Kubernetes Protection.
  KUBERNETES_PROTECTION

  # Cloud account feature is RDS Protection.
  RDS_PROTECTION

  # Cloud account feature is Servers and Apps.
  SERVERS_AND_APPS
}
# Cloud Account ID along with Features and permissions serialized in JSON format.
type CloudAccountFeaturePermission {
  # ID of the cloud account for which feature permissions are provided.
  cloudAccountId: String!

  # List of features along with the associated permissions.
  featurePermissions: [FeaturePermission!]!
}
# Cloud account query filter field types.
enum CloudAccountFilterFieldEnum {
  # Filter by cloud account provider.
  ACCOUNT_PROVIDER_TYPE

  # Filter by cloud account key support.
  IS_KEY_BASED

  # Filter for name.
  NAME
}
# Filter for cloud account query request.
input CloudAccountFilterInput {
  # Field from which query should be filtered.
  field: CloudAccountFilterFieldEnum = NAME

  # Value of the field.
  text: String = ""
}
# Cloud account operation type.
enum CloudAccountOperation {
  # Cloud account add operation.
  ADD

  # Cloud account upgrade operation.
  UPGRADE
}
enum CloudAccountSortByFieldEnum {
  NAME
}
# State of a cloud account.
enum CloudAccountState {
  # The cloud account is connected.
  CONNECTED

  # The cloud account is connecting.
  CONNECTING

  # The cloud account is not enabled.
  DISABLED

  # The cloud account is disconnected.
  DISCONNECTED

  # The cloud account is missing permissions.
  MISSING_PERMISSIONS

  # The cloud account state is not specified.
  STATUS_UNSPECIFIED
}
# Cloud account statuses.
enum CloudAccountStatus {
  # Cloud account is connected.
  CONNECTED

  # Cloud account is connecting.
  CONNECTING

  # Cloud account is not enabled.
  DISABLED

  # Cloud account is disconnected.
  DISCONNECTED

  # Cloud account requires additional permissions.
  MISSING_PERMISSIONS
}
# AWS security group information.
type CloudAccountSub {
  # Security group name.
  name: String!

  # ID of the security group.
  securityGroupId: String!

  # Description of the security group.
  description: String!

  # ID of the security group's owner.
  ownerId: String!

  # ID of the virtual private cloud (VPC).
  vpcId: String!
}
# AWS subnet information.
type CloudAccountSubnet {
  # Subnet name.
  name: String!

  # CIDR block of the subnet.
  cidrBlock: CloudAccountAddressBlockV4

  # ID of the subnet.
  subnetId: String!

  # Availability zone in which the subnet resides.
  availabilityZone: String!

  # ID of the virtual private cloud (VPC).
  vpcId: String!
}
# Cloud account type.
enum CloudAccountType {
  # Cloud account type is AWS.
  CLOUD_ACCOUNT_AWS

  # Cloud account type is role-based AWS.
  CLOUD_ACCOUNT_AWS_ROLE_BASED

  # Cloud account type is Azure.
  CLOUD_ACCOUNT_AZURE

  # Cloud account type is role-based Azure.
  CLOUD_ACCOUNT_AZURE_ROLE_BASED

  # Cloud account type is GCP.
  CLOUD_ACCOUNT_GCP

  # Cloud account type is unknown.
  UNKNOWN_CLOUD_ACCOUNT
}
# AWS VPC information.
type CloudAccountVpc {
  # Name of the virtual private cloud (VPC).
  name: String!

  # CIDR block of the virtual private cloud (VPC).
  cidrBlock: CloudAccountAddressBlockV4

  # Rubrik ID of the virtual private cloud (VPC).
  id: String!

  # Native ID of the virtual private cloud (VPC).
  vpcId: String!
}
# Account with Exocompute mapping, if present.
type CloudAccountWithExocomputeMapping {
  # Cloud account details.
  applicationAccount: CloudAccountDetails!

  # Mapped Exocompute account details.
  exocomputeAccount: CloudAccountDetails
}
# Represents a mapping between a cloud account and an Exocompute account.
type CloudAccountsExocomputeAccountMapping {
  # Represents the application account of the mapping.
  applicationCloudAccountId: UUID!

  # Represents the Exocompute account to which the application account is mapped.
  exocomputeCloudAccountId: UUID!
}
# Cloud Direct cluster location details.
type CloudDirectCluster {
  # The Cloud Direct cluster ID.
  id: UUID!

  # The Cloud Direct cluster name.
  name: String!
}
# Cloud Direct clusters on which Ransomware Monitoring can be enabled.
type CloudDirectClusterRansomwareInvestigationEnablement {
  # Cloud Direct cluster information.
  cluster: CloudDirectCluster!

  # Whether Ransomware Monitoring is enabled.
  enabled: Boolean!
}
# A NAS Cloud Direct managed hierarchy object.
interface CloudDirectHierarchyObject {
  # NAS Cloud Direct cluster where this object originated.
  cluster: Cluster!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# A Cloud Direct managed hierarchy protected objects.
interface CloudDirectHierarchyWorkload {
  # The cluster from which this workload originated.
  cluster: Cluster!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Cloud Direct NAS export object.
type CloudDirectNasExport implements CloudDirectHierarchyWorkload , CloudDirectHierarchyObject , HierarchyObject {
  # Cloud Direct NAS export FID.
  exportFid: UUID!

  # Cloud Direct NAS export path.
  exportPath: String!

  # Cloud Direct NAS export type.
  exportType: String!

  # Specifies whether the export is protected.
  isProtected: Boolean!

  # Specifies whether the export has been deleted.
  isArchived: Boolean!

  # Specifies whether the export is a relic.
  isRelic: Boolean!

  # Id of the Cloud Direct NAS workload.
  cloudDirectId: String!

  # NAS System name derived from the export path.
  systemName: String!

  # NAS Share name derived from the export path.
  shareName: String!

  # The cluster from which this workload originated.
  cluster: Cluster!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# A NAS Cloud Direct site.
type CloudDirectSite {
  # The internal identifier for the site.
  id: String!

  # The display name for the site.
  name: String!

  # The management endpoint URL for the site.
  endpoint: String!
}
# Cloud Direct systems.
type CloudDirectSystems {
  # Names of Cloud Direct Systems.
  systems: [String!]!
}
# Input for recovering Cloud Direct systems.
input CloudDirectSystemsInput {
  # Cloud Direct cluster ID.
  clusterId: UUID!
}
# Details of the cloud download location.
input CloudDownloadLocationDetailsInput {
  # Location where the files will be downloaded.
  downloadLocation: String!

  # Specifies whether the download location needs to be created. When the value is true, the location will be created. When the value is false, the location already exists.
  createDownloadLocation: Boolean!

  # List of key-value pairs for tags.
  tags: [TagType!]
}
# RBS Connection Status.
enum CloudInstanceRbsConnectionStatus {
  # RBS Agent on the host is connected.
  CONNECTED

  # RBS Agent on the host is disconnected.
  DISCONNECTED

  # RBS Agent connection status unknown.
  NA
}
# Supported in v5.0+
type CloudInstantiationSpec {
  # Required. Supported in v5.0+
  # Specifies the number of seconds to retain an image file that is generated for a snappable. Setting this to -1 disables cloud instantiation for the snappable.
  imageRetentionInSeconds: Long!
}
# Supported in v5.0+
input CloudInstantiationSpecInput {
  # Required. Supported in v5.0+
  # Specifies the number of seconds to retain an image file that is generated for a snappable. Setting this to -1 disables cloud instantiation for the snappable.
  imageRetentionInSeconds: Long!
}
# Cloud-native account details.
type CloudNativeAccountIdWithName {
  # Cloud-native account ID.
  id: String!

  # Cloud-native account name.
  name: String!
}
# Input required to check Rubrik Backup Agent (RBA) connectivity for the VMs.
input CloudNativeCheckRbaConnectivityInput {
  # List of virtual machine Rubrik IDs.
  workloadIds: [UUID!]!
}
# Contains the details about Rubrik Backup Agent (RBA) connectivity jobs.
type CloudNativeCheckRbaConnectivityReply {
  # List of VMs for which the job to check Rubrik backup service connectivity could be launched.
  successes: [Success!]!

  # List of VMs for which the job to check Rubrik backup service connectivity could not be launched.
  failures: [Failure!]!
}
# All customer-specified tags and their associated value, determining whether resource tags should be overridden by customer-specified tags for a specified cloud type.
type CloudNativeCustomerTagsReply {
  # List of customer-specified tags applied to all resources associated with a specific cloud type.
  customerTags: [TagObject!]!

  # Specifies whether customer-specified tags should override resource tags.
  shouldOverrideResourceTags: Boolean!
}
# Details of the setup for performing backups of a database.
type CloudNativeDatabaseBackupSetupSpecs {
  # Specifies whether backup setup is successful for the database or not.
  isSetupSuccessful: Boolean!

  # The object from where the setup specification is inherited.
  setupSourceObject: PathNode!
}
# Filter databases for a given list of servers.
input CloudNativeDatabaseServerFilter {
  # Name of database servers.
  serverNames: [String!]!
}
# Input required to download indexed cloud-native snapshot files.
input CloudNativeDownloadFilesInput {
  # Snapshot ID.
  snapshotId: UUID!

  # File/Directory(s) to download.
  filePaths: [String!]!

  # Use a snapshot type of source, replicated or archived for recovery.
  snapshotType: SnapshotType

  # Details of the recovery location.
  fileRecoveryLocationDetails: FileRecoveryLocationDetailsInput!

  # Type of download (download to cloud or virtual machine) intended.
  downloadType: FileDownloadType!

  # Rubrik ID of the account from which exocompute is launched during recovery. This is only applicable when the snapshot type is archived.
  exocomputeCloudNativeAccountId: UUID

  # Cloud account region where Rubrik Exocompute is launched during recovery. This is only applicable when the snapshot type is archived.
  exocomputeRegion: String
}
# Feature for which required permissions have to be checked.
input CloudNativeFeatureForPermissionsCheck {
  # Azure feature.
  azureFeature: AzureFeatureForPermissionCheck

  # AWS feature.
  awsFeature: AwsFeatureForPermissionCheck
}
# Contains file recovery feasibility status for a cloud-native snapshot.
type CloudNativeFileRecoveryFeasibility {
  # Cloud-native snapshot ID.
  snapshotId: String!

  # File recovery feasibility status.
  fileRecoveryFeasibility: FileRecoveryFeasibility!
}
# Contains metadata fields of a file specific to the version of the file in a snapshot.
type CloudNativeFileVersion {
  # Snapshot corresponding to the file version.
  snapshot: CloudNativeSnapshotInfo!

  # Time when the file was last modified.
  lastModified: DateTime!

  # Size of the file, in bytes.
  sizeInBytes: Long!

  # File mode (directory, file, symlink, or unknown).
  fileMode: FileModeEnum!
}
# DataType representing filters on cloud native tag or label rules.
input CloudNativeFilter {
  # Field to filter on.
  field: CloudNativeTagRuleFilterFields = SLA_DOMAIN

  # Text to filter on, corresponding to the field.
  texts: [String!] = []
}
# DataType representing cloud native ids.
input CloudNativeIds {
  # List of AWS native account IDs.
  awsNativeAccountIds: [String!]

  # List of Azure native subscriptions IDs.
  azureNativeSubscriptionIds: [String!]

  # List of GCP native project IDs.
  gcpNativeProjectIds: [String!]
}
# Filter cloud instances based on whether they have been added as hosts to a Rubrik Cluster.
input CloudNativeInstaceAppProtectionFilter {
  # Boolean value to filter cloud instances added as hosts to a Rubrik Cluster.
  isProtectionSetup: Boolean!
}
# A single label.
type CloudNativeLabel {
  # Label key.
  labelKey: String!

  # Label value.
  labelValue: String!

  # Specifies if all label values should be matched.
  matchAllValues: Boolean!
}
# Cloud-native object type for the label.
enum CloudNativeLabelObjectType {
  # GCP Disk.
  GCP_DISK

  # GCP GCE Instance.
  GCP_GCE_INSTANCE
}
# The archival location template types.
enum CloudNativeLocTemplateType {
  # Cloud native location type is invalid.
  INVALID

  # Specifies that the target archival location should be in the same region as that of source workload.
  SOURCE_REGION

  # Specifies that target archival location should be in a specified region irrespective of the region of the source workloads.
  SPECIFIC_REGION
}
# Cloud native object type enum.
enum CloudNativeObjectType {
  # AWS EBS VOLUME.
  AWS_EBS_VOLUME

  # AWS EC2 INSTANCE.
  AWS_EC2_INSTANCE

  # AWS RDS INSTANCE.
  AWS_RDS_INSTANCE

  # AWS S3 BUCKET.
  AWS_S3_BUCKET

  # AZURE MANAGED DISK.
  AZURE_MANAGED_DISK

  # AZURE SQL DATABASE DB.
  AZURE_SQL_DATABASE_DB

  # AZURE SQL DATABASE SERVER.
  AZURE_SQL_DATABASE_SERVER

  # AZURE SQL MANAGED INSTANCE SERVER.
  AZURE_SQL_MANAGED_INSTANCE_SERVER

  # AZURE STORAGE ACCOUNT.
  AZURE_STORAGE_ACCOUNT

  # AZURE VIRTUAL MACHINE.
  AZURE_VIRTUAL_MACHINE

  # GCP DISK.
  GCP_DISK

  # GCP GCE INSTANCE.
  GCP_GCE_INSTANCE
}
# Cloud-native Rubrik Backup Service(RBS) status.
enum CloudNativeRbaStatusType {
  # Cloud native RBS status is Not Registered.
  NOT_REGISTERED

  # Cloud native RBS status is Registered.
  REGISTERED

  # Cloud native RBS status is Unavailable.
  UNAVAILABLE
}
# Region where cloud native object exists.
type CloudNativeRegion {
  # Region where AWS native object exists. This field will be null if the object is not an AWS object.
  awsRegion: AwsNativeRegion

  # Region where Azure native object exists. This field will be null if the object is not an Azure object.
  azureRegion: AzureNativeRegion

  # Region where GCP native object exists. This field will be null if the object is not a GCP object.
  gcpRegion: GcpNativeRegion
}
# Recovery related details for a particular snapshot type.
type CloudNativeSnapshotDetailsForRecovery {
  # Type of the snapshot. Can be SOURCE/REPLICATED/ARCHIVED.
  snapshotType: SnapshotType!

  # Field specifying whether file recovery is feasible or not, and if infeasible, the reason for the same.
  fileRecoveryFeasibility: FileRecoveryFeasibility!

  # Name of the cloud provider. Can be AWS/Azure/GCP. This field is set only if file recovery is feasible.
  cloudType: CloudProviderType!

  # Region where the particular snapshot exists. This field is set only if file recovery is feasible.
  snapshotRegion: CloudNativeRegion!

  # Rubrik ID of the cloud account where the particular type of snapshot exists. This field is set only if file recovery is feasible. 
  cloudNativeAccountId: CloudNativeAccountIdWithName
}
# Recovery related details for different snapshot types.
type CloudNativeSnapshotDetailsForRecoveryReply {
  # Details required for file recovery for different snapshot types of SOURCE, ARCHIVED and REPLICATED.
  snapshotDetails: [CloudNativeSnapshotDetailsForRecovery!]!
}
# Contains information about the cloud-native snapshot.
type CloudNativeSnapshotInfo {
  # Snapshot ID.
  id: String!

  # Snapshot date.
  date: DateTime!

  # Specifies if the snapshot is on-demand.
  isOnDemandSnapshot: Boolean!
}
# Recovery details for different snapshot types.
type CloudNativeSnapshotTypeDetails {
  # Snapshot type required for different snapshot types.
  snapshotType: SnapshotType!

  # Cloud type required for different snapshot types.
  cloudType: CloudProviderType!

  # Snapshot region required for different snapshot types.
  snapshotRegion: CloudNativeRegion!

  # Cloud native account ID required for different snapshot types.
  cloudNativeAccountId: CloudNativeAccountIdWithName
}
# Recovery details for different snapshot types.
type CloudNativeSnapshotTypeDetailsReply {
  # Details required for different snapshot types.
  snapshotDetails: [CloudNativeSnapshotTypeDetails!]!
}
# Script to setup backups on a SQL Server database.
type CloudNativeSqlServerSetupScript {
  # Contents of the script.
  script: String!
}
# Object Type for cloud-native tag rule.
enum CloudNativeTagObjectType {
  # AWS EBS Volume.
  AWS_EBS_VOLUME

  # AWS EC2 Instance.
  AWS_EC2_INSTANCE

  # AWS RDS Instance.
  AWS_RDS_INSTANCE

  # AWS S3 Bucket.
  AWS_S3_BUCKET

  # Azure Managed Disk.
  AZURE_MANAGED_DISK

  # Azure SQL Database DB.
  AZURE_SQL_DATABASE_DB

  # Azure SQL Database Server.
  AZURE_SQL_DATABASE_SERVER

  # Azure SQL Managed Instance Server.
  AZURE_SQL_MANAGED_INSTANCE_SERVER

  # Azure Storage Account.
  AZURE_STORAGE_ACCOUNT

  # Azure Virtual Machine.
  AZURE_VIRTUAL_MACHINE
}
# Cloud-native tag rule.
type CloudNativeTagRule {
  # ID of the tag rule.
  id: String!

  # Name of the tag rule.
  name: String!

  # Tag for the tag rule.
  tag: TagRuleTag

  # Effective SLA domain to be assigned to objects.
  effectiveSla: TagRuleEffectiveSla

  # Object type to which the tag rule will be applied.
  objectType: ManagedObjectType!

  # Specifies whether the user has permissions to modify the tag rule.
  hasPermissionToModify: Boolean!

  # Cloud-native accounts for the tag rule.
  cloudNativeAccounts: [CloudNativeAccountIdWithName!]!

  # Does this tag rule apply to all cloud accounts.
  applyToAllCloudAccounts: Boolean!
}
# Fields to filter tag rules.
enum CloudNativeTagRuleFilterFields {
  # Filter by AWS account.
  AWS_ACCOUNT

  # Filter by cloud native account.
  CLOUD_NATIVE_ACCOUNT

  # Filter by name.
  NAME

  # Filter by SLA domain.
  SLA_DOMAIN
}
# Fields to sort tag rules.
enum CloudNativeTagRuleSortByFields {
  # Sort by name.
  NAME

  # Sort by SLA domain.
  SLA_DOMAIN

  # Sort by tag key and value.
  TAG
}
# Contains information about the cloud-native versioned file.
type CloudNativeVersionedFile {
  # File name.
  filename: String!

  # File path.
  path: String!

  # Absolute path.
  absolutePath: String!

  # Display path.
  displayPath: String!

  # File versions.
  fileVersions: [CloudNativeFileVersion!]!
}
# Paginated list of CloudNativeVersionedFile objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CloudNativeVersionedFileConnection {
  # List of CloudNativeVersionedFile objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CloudNativeVersionedFileEdge!]!

  # List of CloudNativeVersionedFile objects.
  nodes: [CloudNativeVersionedFile!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CloudNativeVersionedFile objects matching the request arguments.
  count: Int!
}
# Wrapper around the CloudNativeVersionedFile object. This wrapper is used for pagination.
type CloudNativeVersionedFileEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CloudNativeVersionedFile object wrapped by this edge.
  node: CloudNativeVersionedFile!
}
# Cloud-native virtual machine app-consistent object.
enum CloudNativeVmAppConsistentObjectType {
  # AWS EC2 instance.
  AWS_EC2_INSTANCE

  # Azure virtual machine.
  AZURE_VIRTUAL_MACHINE
}
# Cloud provider.
enum CloudProvider {
  # Cloud provider is AWS.
  AWS

  # Cloud provider is Azure.
  AZURE
}
# Cloud provider type.
enum CloudProviderType {
  # AWS cloud type.
  AWS

  # Azure cloud type.
  AZURE

  # GCP cloud type.
  GCP

  # Cloud type not specified.
  NOT_SPECIFIED
}
# Cloud provider type.
enum CloudVendor {
  # Cloud provider is AWS.
  AWS

  # Cloud provider is Azure.
  AZURE

  # Cloud provider is GCP.
  GCP
}
# A Rubrik CDM Cluster.
type Cluster {
  # The cluster uuid.
  id: UUID!

  # The cluster name.
  name: String!

  # The cluster's default IP address.
  defaultAddress: String

  # The cluster's default port.
  defaultPort: Int

  # System status of the cluster. For Mosaic clusters and Rubrik clusters running CDM versions earlier than 5.0, this value is null.
  systemStatus: ClusterSystemStatus

  # Pause status of the cluster.
  pauseStatus: ClusterPauseStatus

  # Human readable message explaining the systemStatus.
  systemStatusMessage: String

  # List of affected nodes in the cluster.
  systemStatusAffectedNodes: [ClusterNode!]

  # The time the cluster was registered.
  registrationTime: DateTime!

  # The time the cluster was last connected.
  lastConnectionTime: DateTime

  # The cluster product type (e.g., CDM, DATOS, etc.).
  productType: ClusterProductEnum

  # The software version.
  version: String

  # Whether or not the cluster is encrypted.
  encryptionEnabled: Boolean!

  # The number of days remaining before the system fills up.
  estimatedRunway: Long!

  # The total number of snapshots.
  snapshotCount: Long!

  # The cluster type.
  type: ClusterTypeEnum!

  # The cluster status.
  status: ClusterStatus!

  # The cluster sub status.
  subStatus: ClusterSubStatus!

  # The cluster state.
  state: clusterState!

  # Whether or not the cluster is healthy.
  isHealthy: Boolean! @deprecated(reason: "Use systemStatus instead.")

  # The cluster's location.
  geoLocation: GeoLocation

  # The cluster's timezone.
  timezone: String

  # The cluster's global manager connectivity status.
  globalManagerConnectivityStatus: GlobalManagerConnectivity

  # Whether the global manager connectivity is healthy.
  passesConnectivityCheck: Boolean

  # When the global manager connectivity was last updated.
  connectivityLastUpdated: DateTime

  # The cluster's replication sources.
  replicationSources: [ReplicationSource!]!

  # The cluster's replication targets.
  replicationTargets: [ReplicationTarget!]!

  # The most recent metric of a cluster.
  metric: ClusterMetric

  # The metric time series of a cluster.
  metricTimeSeries(
    # Time range input.
    timeRange: TimeRangeInput, unit: TimeUnitEnum!): [metricTimeSeries!]!

  # This field lists jobs that sync CDM cluster data to RSC.
  rubrikSyncStatus: RubrikSyncStatus!

  # The organizations to which this cluster is authorized.
  allOrgs: [Org!]!

  # The cluster's activity series.
  activitySeriesConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort activity series by field.
    sortBy: ActivitySeriesSortField, filters: ActivitySeriesFilter): ActivitySeriesConnection!

  # Rubrik cluster email notification settings.
  cdmNotificationSettings: NotificationSettingSummaryListResponse!

  # The cluster's snappables.
  snappableConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter protected objects by input.
    filter: SnappableFilterInput): SnappableConnection!

  # The cluster nodes.
  clusterNodeConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Rubrik Cluster node filter.
    filter: ClusterNodeFilterInput): ClusterNodeConnection!

  # The CDM cluster node details.
  cdmClusterNodeDetails: [CdmNodeDetail!]!

  # The node-level performance statistics of a Rubrik cluster.
  clusterNodeStats(
    # Rubrik cluster node ID.
    cdmClusterNodeID: String,

    # Time range input.
    timeRange: TimeRangeInput): [ClusterNodeStats!]!

  # The cluster disks.
  clusterDiskConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Rubrik Cluster disk filter.
    filter: ClusterDiskFilterInput): ClusterDiskConnection!

  # Lambda configuration.
  lambdaConfig: GetLambdaConfigReply

  # Lambda feature history.
  lambdaFeatureHistory: LambdaFeatureHistory

  # Sonar previewer configuration.
  datagovPreviewerConfig: PreviewerClusterConfig!

  # Auto Enable Sensitive Data Discovery policy configuration.
  datagovAutoEnablePolicyConfig: AutoEnablePolicyClusterConfigReply!

  # Metadata pull scheduler.
  metadataPullScheduler: JobsReply

  # Cluster upgrade information.
  cdmUpgradeInfo: CdmUpgradeInfo

  # Job status of a create cluster operation.
  ccprovisionInfo: CcprovisionInfo

  # Cloud information for this cluster.
  cloudInfo: CcWithCloudInfo

  # Operations that the user is authorized to perform on the Rubrik cluster.
  authorizedOperations: AuthorizedOperations!

  # Total number of protected NoSQL workloads.
  noSqlWorkloadCount: Int!

  # Config protection information.
  configProtectionInfo: ConfigProtectionInfo

  # The licensed products that belong to this cluster.
  licensedProducts: [Product!]!

  # The Rubrik cluster's registered mode.
  registeredMode: ClusterRegistrationMode
}
# CDM archiving specification.
type ClusterArchivalSpec {
  # Archival location name.
  archivalLocationName: String!

  # Archival location ID.
  archivalLocationId: String!

  # Archival threshold.
  threshold: Int!

  # Unit of archival threshold.
  thresholdUnit: RetentionUnit!

  # Archival tiering specification.
  archivalTieringSpec: ArchivalTieringSpec

  # Archives all snapshots taken with the specified frequency.
  frequencies: [RetentionUnit!]!

  # Archival location type.
  archivalLocationType: TargetType!
}
# Cluster capacity quota.
type ClusterCapacityQuota {
  # Organization on which the capacity quota is enforced.
  orgId: String!

  # Hard limit of the capacity quota (in gigabytes).
  hardLimitGb: Long!

  # Soft limit of the capacity quota (in gigabytes).
  softLimitGb: Long!

  # The organization's current usage on the cluster.
  currentUsageGb: Long!

  # The time at which the current usage was computed. If null, the usage has not been computed yet.
  usageComputedAt: DateTime

  # The type of capacity quota, either physical or logical bytes.
  clusterCapacityQuotaType: ClusterCapacityQuotaType!

  # Cluster on which the capacity quota is enforced.
  cluster: Cluster!
}
# Cluster capacity quota type.
enum ClusterCapacityQuotaType {
  # Logical Bytes.
  LOGICAL_BYTES

  # Physical Bytes.
  PHYSICAL_BYTES
}
# ClusterConfig for new CDM cloud cluster.
input ClusterConfigInput {
  # Cloud account ID.
  userEmail: String = ""

  # Cloud account ID.
  adminPassword: String = ""

  # Cloud account ID.
  clusterName: String = ""

  # Cloud account ID.
  numNodes: Int = 0

  # Array of DNS search domains for CDM clusters.
  dnsSearchDomains: [String!]

  # Array of DNS server names.
  dnsNameServers: [String!]

  # Array of NTP servers.
  ntpServers: [String!]

  # Azure storage container details.
  azureEsConfig: AzureEsConfigInput

  # AWS S3 bucket details.
  awsEsConfig: AwsEsConfigInput
}
# Paginated list of Cluster objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ClusterConnection {
  # List of Cluster objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ClusterEdge!]!

  # List of Cluster objects.
  nodes: [Cluster!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Cluster objects matching the request arguments.
  count: Int!

  # Aggregate statistics across Clusters with respect for the applied filters and pagination arguments.
  aggregateClusterStatistics: ClusterStatsAggregation!

  # Aggregate Rubrik clusters' health information based on filters and pagination arguments.
  aggregateClusterHealth: ClusterHealthAggregation!
}
# Connection status of the cluster with Rubrik.
enum ClusterConnectionStatus {
  # Cluster is connected to Rubrik.
  CONNECTED

  # Cluster is disconnected from Rubrik.
  DISCONNECTED

  # Cluster was not added or got removed from Rubrik.
  NOT_ATTACHED
}
# Supported in v7.0+
type ClusterCsr {
  # Required. Supported in v7.0+
  # Certificate signing request generated from the private key of the Rubrik cluster.
  csr: String!
}
# Rubrik cluster disk type.
type ClusterDisk {
  # Disk status.
  status: ClusterDiskStatus!

  # Specifies if the disk is encrypted.
  isEncrypted: Boolean!

  # Disk type.
  diskType: ClusterDiskType!

  # ID of the Rubrik cluster node.
  nodeId: String

  # Disk capacity, in bytes.
  capacityBytes: Long!

  # Disk path.
  path: String!

  # Disk unallocated bytes.
  unallocatedBytes: Long

  # Disk usable bytes.
  usableBytes: Long

  # ID of the Rubrik cluster.
  clusterId: UUID!

  # LED status of the disk, where true means ON and false is OFF.
  ledStatus: Boolean

  # Disk serial ID.
  serial: String

  # Specifies if the disk is resizable.
  isResizable: Boolean!

  # This field is deprecated.
  id: String! @deprecated(reason: "Please use diskId instead.")

  # ID of the Rubrik cluster disk type.
  diskId: String!
}
# Paginated list of ClusterDisk objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ClusterDiskConnection {
  # List of ClusterDisk objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ClusterDiskEdge!]!

  # List of ClusterDisk objects.
  nodes: [ClusterDisk!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ClusterDisk objects matching the request arguments.
  count: Int!
}
# Wrapper around the ClusterDisk object. This wrapper is used for pagination.
type ClusterDiskEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ClusterDisk object wrapped by this edge.
  node: ClusterDisk!
}
# Filters for the list of Rubrik cluster disks.
input ClusterDiskFilterInput {
  # The type of the Rubrik cluster disk.
  type: ClusterDiskType

  # The status of the Rubrik cluster disk.
  status: ClusterDiskStatus

  # The Rubrik cluster node ID.
  nodeId: String
}
# Enum representing the cluster's knowledge of a disk state.
enum ClusterDiskStatus {
  # Mounted disk.
  ACTIVE

  # Mounted disk continuously failing health checks.
  FAILED

  # Self encrypting disk in locked state (only for appliances supporting hardware encryption).
  LOCKED

  # Disk present in node table but not on the node.
  MISSING

  # Disk needs replacement. The disk is still readable but SDFS will drain the data gradually in the background.
  PRE_REMOVAL

  # Disk needs software repair (e.g, fsck) and is not writable.
  PRE_REPAIR

  # Disk finished draininig. User can unplug the disk.
  READY_TO_REMOVE

  # Disk explicitly removed from the cluster.
  REMOVED

  # Disk is under repair (e.g., fsck) and is not available. The expectation is that the disk will become available soon but is not guaranteed. Both read and write operations will not be allowed in this status.
  REPAIR

  # Disk with no ext4 partitions.
  UNFORMATTED

  # Unused.
  UNKNOWN
}
# Rubrik cluster disk type.
enum ClusterDiskType {
  # Flash disk.
  FLASH

  # Hard disk drives (HDD).
  HDD

  # Unknown disk.
  UNKNOWN
}
# Represents the response of a request to retrieve DNS information from a Rubrik cluster.
type ClusterDnsReply {
  # List of DNS name servers.
  servers: [String!]!

  # List of DNS search domains.
  domains: [String!]!
}
# Wrapper around the Cluster object. This wrapper is used for pagination.
type ClusterEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Cluster object wrapped by this edge.
  node: Cluster!
}
# Filters for the cluster list.
input ClusterFilterInput {
  # Cluster UUIDs.
  id: [UUID!]

  # Cluster names.
  name: [String!]

  # Cluster types.
  type: [ClusterTypeEnum!]

  # Object types of snappables protected by the cluster.
  objectType: [ObjectTypeEnum!]

  # Cluster registration time greater than.
  registrationTime_gt: DateTime

  # Cluster registration time less than.
  registrationTime_lt: DateTime

  # Returns clusters running software version equal to or greater than the specified version.
  minSoftwareVersion: String

  # Location of the Rubrik cluster.
  clusterLocation: [String!]

  # Exclude clusters that do not have any nodes connected.
  excludeEmptyCluster: Boolean

  # Type of Rubrik cluster.
  productType: [ClusterProductEnum!]

  # The mode in which the cluster is registered.
  registeredMode: [ClusterRegistrationMode!]

  # The licensed product type.
  product: Product

  # Filter for clusters belonging to the specified organizations.
  orgId: [UUID!]

  # Product type specific filters for the clusters.
  productFilters: [ClusterFilterPerProductInput!]

  # Exclude the Rubrik cluster UUIDs.
  excludeId: [UUID!]

  # System status of the Rubrik cluster.
  systemStatus: [ClusterSystemStatus!]

  # Connection status of the Rubrik cluster.
  connectionState: [ClusterStatus!]

  # Include Rubrik clusters which are disconnected  or in fatal state.
  isInFatalOrDisconnectedState: Boolean
}
# Input to filter clusters by parameters specific to product types.
input ClusterFilterPerProductInput {
  # Type of Rubrik cluster.
  productType: ClusterProductEnum!

  # Returns clusters running software version equal to or greater than the specified version.
  minSoftwareVersion: String
}
# Cluster geolocation type.
type ClusterGeolocation {
  # Address information for mapping the location of the Rubrik cluster.
  address: String!
}
# Cluster geolocation input.
input ClusterGeolocationInput {
  # Address information for mapping the location of the Rubrik cluster.
  address: String!
}
# Cluster data with groupby info applied to it.
type ClusterGroupBy {
  # The data groupby info.
  groupByInfo: ClusterGroupByInfo!

  # Paginated snappable data.
  clusterConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort clusters by field.
    sortBy: ClusterSortByEnum = ClusterType,

    # Cluster sort order.
    sortOrder: SortOrder = DESC): ClusterConnection!

  # Provides further groupings for the data.
  clusterGroupBy(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Group by field.
    groupBy: ClusterGroupByEnum!): [ClusterGroupBy!]!
}
# Paginated list of ClusterGroupBy objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ClusterGroupByConnection {
  # List of ClusterGroupBy objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ClusterGroupByEdge!]!

  # List of ClusterGroupBy objects.
  nodes: [ClusterGroupBy!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ClusterGroupBy objects matching the request arguments.
  count: Int!
}
# Wrapper around the ClusterGroupBy object. This wrapper is used for pagination.
type ClusterGroupByEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ClusterGroupBy object wrapped by this edge.
  node: ClusterGroupBy!
}
# Property representing fields to group a Rubrik cluster.
enum ClusterGroupByEnum {
  # Day.
  Day

  # Hour.
  Hour

  # Month.
  Month

  # Quarter.
  Quarter

  # Rubrik cluster type.
  Type

  # Week.
  Week

  # Year.
  Year
}
# Property to group a Rubrik cluster with.
union ClusterGroupByInfo = ClusterType | TimeRangeWithUnit
# Aggregate Rubrik clusters' health information.
type ClusterHealthAggregation {
  # The number of Rubrik clusters that have an OK status.
  ok: Long!

  # The number of Rubrik clusters that have a FATAL status.
  fatal: Long!

  # The number of Rubrik clusters that have a WARNING status.
  warning: Long!
}
# Supported in v6.0+
type ClusterHostGroupInfo {
  # Required. Supported in v6.0+
  # Name of data center the compute cluster is a member of.
  datacenterName: String!

  # Required. Supported in v6.0+
  # Host groups configured in the compute cluster.
  hostGroups: [HostGroupInfo!]!

  # Required. Supported in v6.0+
  # Moid of the compute cluster. This is not the Rubrik managed id.
  id: String!

  # Required. Supported in v6.0+
  # Name of the compute cluster.
  name: String!
}
# Cluster interface CIDR map.
type ClusterInfCidrs {
  clusterName: String!
  clusterId: String!
  interfaceCidr: [InterfaceCidr!]!
}
input ClusterInfCidrsInput {
  clusterName: String = ""
  clusterId: String = ""
  interfaceCidr: [InterfaceCidrInput!] = []
}
# IP allow list of Rubrik cluster mappings.
type ClusterIpMapping {
  # UUID of the Rubrik cluster.
  clusterUuid: UUID!

  # IP allow list of Rubrik clusters.
  ips: [String!]!
}
# Input for getting cluster IPv6 mode.
input ClusterIpv6ModeInput {
  #  Rubrik cluster UUID.
  clusterUuid: UUID!
}
# The IPv6 mode of the Rubrik cluster.
type ClusterIpv6ModeReply {
  # Specifies whether the cluster is in IPv6 mode.
  isIpv6Mode: Boolean!
}
# Represents a Rubrik cluster's upgrade job status.
enum ClusterJobStatusTypeEnum {
  # Represents that download job failed in the Rubrik cluster.
  DownloadPackageFailed

  # Represents that download job is running in the Rubrik cluster.
  DownloadingPackage

  # Represents that upgrade failed to start in the Rubrik cluster.
  FailedToInitiateUpgrade

  # Represents that the Rubrik cluster has one or more upgrade precheck failure.
  PreCheckFailureError

  # Represents that the Rubrik cluster has one or more upgrade precheck warning.
  PreCheckFailureWarning

  # Represents that the Rubrik cluster is ready to download a new tarball.
  ReadyForDownload

  # Represents that the Rubrik cluster is ready for upgrade.
  ReadyForUpgrade

  # Represents that upgrade has resumed in the Rubrik cluster.
  ResumingUpgrade

  # Represents that upgrade rollback has failed in the Rubrik cluster.
  RollbackFailed

  # Represents that upgrade is being rolled back in the Rubrik cluster.
  RollingBackUpgrade

  # Represents the Rubrik cluster's upgrade status is not known.
  Unknown

  # Represents that the Rubrik cluster is up-to-date.
  UpToDate

  # Represents that upgrade has failed in the Rubrik cluster.
  UpgradeFailed

  # Represents that the Rubrik cluster is upgrading.
  Upgrading
}
# Warnings and errors related to cluster license capacities.
type ClusterLicenseCapacityValidations {
  # The warnings related to cluster license capacities.
  warnings: [ClusterLicenseInfo!]!

  # The errors related to cluster license capacities.
  errors: [ClusterLicenseInfo!]!
}
# Information related to cluster licenses.
type ClusterLicenseInfo {
  # The type of information.
  type: ClusterLicenseInfoType!

  # The product included in this cluster license.
  product: Product!

  # The usable capacity of this product, in bytes.
  usableCapacityBytes: Float!

  # The total requested capacity, in bytes.
  requestedCapacityBytes: Float!

  # The capacity consumed, in bytes.
  usedCapacityBytes: Float!

  # The total requested capacity, in bytes.
  totalCapacityBytes: Float!

  # The last date among the term-end dates of all licenses of this product.
  maxTermEndDate: DateTime
}
# The type of cluster license information.
enum ClusterLicenseInfoType {
  # Represents cluster license information about an expired term.
  EXPIRED_TERM

  # Represents an unknown cluster license information type.
  INFO_TYPE_UNSPECIFIED

  # Represents cluster license information about insufficient capacity.
  INSUFFICIENT_CAPACITY

  # Represents cluster license information about licenses not found.
  LICENSE_NOT_FOUND

  # Represents cluster license information about valid licenses.
  VALID_LICENSE
}
# GeoLocation of the cluster.
input ClusterLocationEdit {
  address: String!
  latitude: Float!
  longitude: Float!
}
# Metrics of a Rubrik cluster.
type ClusterMetric {
  # Available bytes in the Rubrik cluster.
  availableCapacity: Long!

  # Used bytes in the Rubrik cluster.
  usedCapacity: Long!

  # Total bytes in the Rubrik cluster.
  totalCapacity: Long!

  # Total bytes used by snapshots in the Rubrik cluster.
  snapshotCapacity: Long!

  # Total bytes used by Live Mounts in the Rubrik cluster.
  liveMountCapacity: Long!

  # Total miscellaneous bytes used in the Rubrik cluster.
  miscellaneousCapacity: Long!

  # Ingested bytes for local snapshots.
  ingestedSnapshotStorage: Long!

  # Physical bytes for local snapshots.
  physicalSnapshotStorage: Long!

  # Ingested bytes for archived snapshots.
  ingestedArchivalStorage: Long!

  # Physical bytes for archived snapshots.
  physicalArchivalStorage: Long!

  # Time when the Rubrik cluster metrics was last updated.
  lastUpdateTime: DateTime!
}
union ClusterMetricGroupByInfo = TimeRangeWithUnit
# Rubrik cluster node.
type ClusterNode {
  # Brik ID of the Rubrik cluster node.
  brikId: String!

  # Status of the Rubrik cluster node.
  status: ClusterNodeStatus

  # IP address of the Rubrik cluster node.
  ipAddress: String

  # Platform type of the Rubrik cluster node.
  needsInspection: Boolean

  # CPU cores count of the Rubrik cluster node.
  cpuCores: Int

  # RAM of the Rubrik cluster node, in bytes.
  ram: Long

  # Rubrik cluster ID.
  clusterId: UUID!

  # Network speed of the Rubrik cluster node.
  networkSpeed: String

  # Hostname of the Rubrik cluster node.
  hostname: String

  # Rear view position of the Rubrik cluster node.
  position: ClusterNodePosition

  # Platform type of the Rubrik cluster node.
  platformType: ClusterNodePlatformType

  # Node ID.
  id: String!

  # Network interface of a Rubrik cluster node.
  interfaceCidrs: [ClusterNodeInterfaceCidr!]

  # Hardware health status of a Rubrik cluster node. The value is null when hardware health status is not available.
  hardwareHealth: [HealthPolicyStatus!]
}
# Paginated list of ClusterNode objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ClusterNodeConnection {
  # List of ClusterNode objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ClusterNodeEdge!]!

  # List of ClusterNode objects.
  nodes: [ClusterNode!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ClusterNode objects matching the request arguments.
  count: Int!
}
# Wrapper around the ClusterNode object. This wrapper is used for pagination.
type ClusterNodeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ClusterNode object wrapped by this edge.
  node: ClusterNode!
}
# Filters for the list of Rubrik cluster node.
input ClusterNodeFilterInput {
  # The status of the Rubrik cluster node.
  status: ClusterNodeStatus

  # The Rubrik cluster node ID.
  nodeId: String
}
# Network interface of a Rubrik cluster node.
type ClusterNodeInterfaceCidr {
  # Name of the interface.
  interfaceName: String!

  # CIDR address for the interface.
  cidr: String!
}
# The computing platform that is running the Rubrik CDM software.
enum ClusterNodePlatformType {
  # Cisco UCS C220 M4.
  C220M4

  # Cisco UCS C220 M5.
  C220M5

  # Cisco UCS C240 M4.
  C240M4

  # Cisco UCS C240 M5.
  C240M5

  # Cloud Edition.
  CE

  # Cloud cluster.
  CLOUD

  # Internal virtual clusters.
  DEV

  # HPE DL360.
  DL360

  # HPE DL380.
  DL380

  # Enterprise ROBO system.
  E1000

  # All-flash appliance.
  F10000

  # Fat twin development unit.
  FATTWIN

  # LeanCloud cluster.
  LEANCLOUD

  # Dell PowerEdge C6420.
  PE6420

  # Dell PowerEdge R740xd.
  PE740

  # Dell PowerEdge 740 Citi.
  PE740CITI

  # Dell PowerEdge R740xd special config.
  PE740HD

  # Dell R750.
  PE750

  # Production r300.
  R300

  # Production r500.
  R500

  # Production r6000f with FIPS.
  R6000F

  # Production r6000s with software encrypted.
  R6000S

  # Production r6000se with enhanced flash.
  R6000SE

  # Non-TPM r6408.
  R6408

  # R6408M with Azure bundle.
  R6408M

  # Forge supported developer OVA.
  RKDEV

  # Lenovo SR-630.
  SR630

  # ThinkServer sd350.
  THINKSERVERSD350

  # Third-party appliance.
  THIRDPARTY

  # Unknown platform type.
  UNKNOWN

  # Rubrik Virtual Appliance (Edge).
  VA

  # Rubrik Virtual Cluster.
  VC
}
# Represents the position of the node in a Rubrik chassis.
enum ClusterNodePosition {
  # Left bottom node in the Rubrik chassis.
  LEFT_BOTTOM

  # Left top node in the Rubrik chassis.
  LEFT_TOP

  # Right bottom node in the Rubrik chassis.
  RIGHT_BOTTOM

  # Right top node in the Rubrik chassis.
  RIGHT_TOP
}
# The node-level performance statistics of a Rubrik cluster.
type ClusterNodeStats {
  # CPU utilization of the node.
  cpuStat: Long!

  # Data received over the network, in bytes per second.
  networkBytesReceived: Long!

  # Data transmitted over the network, in bytes per second.
  networkBytesTransmitted: Long!

  # Input/output read operations per second.
  iopsReadsPerSecond: Long!

  # Input/output write operations per second.
  iopsWritesPerSecond: Long!

  # Read Input/output throughput, in bytes per second.
  readThroughputBytesPerSecond: Long!

  # Write Input/output throughput, in bytes per second.
  writeThroughputBytesPerSecond: Long!

  # Memory used on the node, in percentage.
  usedMemoryStat: Int!

  # Time at which the performance metrics were retrieved.
  time: DateTime!

  # Rubrik cluster UUID.
  clusterId: UUID!

  # Rubrik cluster node ID.
  nodeId: String!
}
# Represents the status of the node in a Rubrik cluster.
enum ClusterNodeStatus {
  # Node is unhealthy.
  BAD

  # Node is being bootstrapped with the Rubrik cluster. This state precedes the OK state and the node services will not be functional until the node transitions to status OK.
  BOOTSTRAPPING

  # Node is joining the cluster.
  JOINING

  # Node is down for maintenance.
  MAINTENANCE

  # Node is healthy and normal operation is expected.
  OK

  # Node is being taken down for maintenance. After all sanity checks, the node status will change to MAINTENANCE state.
  PRE_MAINTENANCE

  # Node has been removed from the cluster.
  REMOVED

  # Node status is not known.
  UNKNOWN

  # Node is being upgraded. The node will not accept any new jobs and the upgrade operation will begin after existing jobs are completed.
  UPGRADE

  # Node needs attention. Either the node is down, or some of the disks on the node are unavailable.
  WARNING
}
# Status and progress of a Rubrik cluster operation job. 
type ClusterOperationJobProgress {
  # Job progress.
  jobProgress: Int!

  # Job progess detail.
  message: String!

  # Job status.
  jobStatus: CdmJobStatus!

  # Job type.
  jobType: CcpJobType!
}
# Request parameters for checking the job progress of the Rubrik cluster operation.
input ClusterOperationJobProgressInput {
  # UUID of Rubrik cluster.
  clusterUuid: String = ""

  # Job type.
  jobType: CcpJobType!
}
# Pause Status of the cluster.
enum ClusterPauseStatus {
  # Cluster not paused.
  NOT_PAUSED

  # Cluster paused.
  PAUSED

  # Unknown Status.
  UNKNOWN
}
# Product type of the registered cluster.
enum ClusterProductEnum {
  # The cluster is CDM cluster.
  CDM

  # The cluster is CLOUD_DIRECT cluster.
  CLOUD_DIRECT

  # The cluster is DATOS cluster.
  DATOS

  # The cluster is POLARIS cluster.
  POLARIS
}
# Represents the response of a request to retrieve proxy information from a Rubrik cluster.
type ClusterProxyReply {
  # Proxy server.
  server: String!

  # Proxy port.
  port: Int!

  # Proxy account username.
  username: String!

  # Proxy protocol.
  protocol: ProxyProtocol!
}
# The mode in which the cluster is registered.
enum ClusterRegistrationMode {
  # The cluster is registered in Hybrid mode.
  HYBRID

  # The cluster is registered in Legacy mode.
  LEGACY

  # The cluster is registered in LOD mode.
  LIFE_OF_DEVICE

  # The cluster is not registered with Rubrik Security Cloud.
  NOT_REGISTERED
}
# Info about the cluster product types the user is entitled to.
type ClusterRegistrationProductInfoType {
  # Distinct cluster product types associated with the cluster registration tokens. Product type can only be either Hybrid or LifeOfDevice.
  productTypes: [String!]!

  # The latest product type associated with the user. Product type can only be either Hybrid or LifeOfDevice.
  latestProductType: String!
}
# Object type containing the token, public key, and product type used in registering a cluster.
type ClusterRegistrationToken {
  # The JWT that will be used to register the cluster.
  token: String!

  # The public key of the token.
  pubkey: String!

  # The product type this token should be used to register.
  productType: String!
}
enum ClusterRemovalState {
  DATA_DELETING
  DISCONNECTING
  FAILED
  REGISTERED
  UNREGISTERED
  WAITING_FOR_DATA_DELETION
}
# Replication target specific information.
type ClusterReplicationTarget {
  # Id of replication target.
  id: String!

  # Name of replication target.
  name: String!
}
# Response containing the cluster report migration job's status.
type ClusterReportMigrationJobStatus {
  # Status of the migration job.
  status: ClusterReportMigrationStatus!
}
# The enum describes the status of the migration job.
enum ClusterReportMigrationStatus {
  # The cluster's migration job has finished.
  DONE

  # The cluster's migration job is running.
  IN_PROGRESS

  # The cluster is ready for migration.
  READY

  # Unspecified.
  UNSPECIFIED
}
# Metadata for rendering a Rubrik cluster SLA Domain.
type ClusterSlaDomain implements SlaDomain {
  # Rubrik Cluster SLA Domain name.
  name: String!

  # Version for the SLA Domain.
  version: String

  # FID.
  fid: String!

  # Snapshot schedule for the SLA Domain.
  snapshotSchedule: SnapshotSchedule

  # Base frequency for the SLA Domain.
  baseFrequency: Duration

  # Local retention limit.
  localRetentionLimit: Duration

  # Archiving specification for the SLA Domain.
  archivalSpec: ClusterArchivalSpec

  # List of archival specifications for SLA Domain.
  archivalSpecs: [ClusterArchivalSpec!]!

  # Replication specification for the SLA Domain.
  replicationSpec: ReplicationSpec

  # Replication specification for the SLA Domain.
  replicationSpecsV2: [ReplicationSpecV2!]!

  # First full backup windows.
  firstFullBackupWindows: [BackupWindow!]!

  # Backup windows for the SLA Domain.
  backupWindows: [BackupWindow!]!

  # Rubrik SaaS managed ID for the SLA Domain.
  polarisManagedId: String

  # Protected object count for the SLA Domain.
  protectedObjectCount: Int!

  # SLA Domain upgrade information.
  upgradeInfo: SlaUpgradeInfo

  # Specifies if this SLA Domain is Retention Locked or not.
  isRetentionLockedSla: Boolean!

  # The object-specific configurations of the SLA Domain.
  objectSpecificConfigs: ObjectSpecificConfigs

  # Rubrik cluster ID of SLA Domain.
  cluster: Cluster

  # ID of Rubrik cluster SLA Domain.
  id: String!

  # ID of the Rubrik cluster.
  cdmId: String!

  # This field is deprecated.
  ownerOrgName: String! @deprecated(reason: "This field has been deprecated in favor of ownerOrg field.")

  # Specifies the owner organization of the SLA Domain.
  ownerOrg: SlaAssociatedOrganization!

  # Specifies the retention lock mode when enabled for the SLA Domain.
  retentionLockMode: RetentionLockMode!

  # Upgrade information about the configured archival locations and cascading archival locations.
  archivalLocationsUpgradeInfo: [ArchivalLocationUpgradeInfo!]
}
# Paginated list of ClusterSlaDomain objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ClusterSlaDomainConnection {
  # List of ClusterSlaDomain objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ClusterSlaDomainEdge!]!

  # List of ClusterSlaDomain objects.
  nodes: [ClusterSlaDomain!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ClusterSlaDomain objects matching the request arguments.
  count: Int!
}
# Wrapper around the ClusterSlaDomain object. This wrapper is used for pagination.
type ClusterSlaDomainEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ClusterSlaDomain object wrapped by this edge.
  node: ClusterSlaDomain!
}
# Property to order the cluster list results.
enum ClusterSortByEnum {
  # Location of the Rubrik cluster.
  CLUSTER_LOCATION

  # Rubrik cluster name.
  ClusterName

  # Rubrik cluster type.
  ClusterType

  # Estimated time before cluster runs out of storage.
  ESTIMATED_RUNWAY

  # Version of the installed Rubrik cluster.
  INSTALLED_VERSION

  # Rubrik cluster registration date.
  RegisteredAt
}
# Aggregated statistics across Clusters.
type ClusterStatsAggregation {
  # Ingested bytes for local snapshots.
  ingestedSnapshotStorage: Long!

  # Physical bytes for local snapshots.
  physicalSnapshotStorage: Long!

  # Ingested bytes for archived snapshots.
  ingestedArchivalStorage: Long!

  # Physical bytes for archived snapshots.
  physicalArchivalStorage: Long!
}
# Status of the Rubrik cluster.
enum ClusterStatus {
  # The Rubrik cluster is connected.
  Connected

  # The Rubrik cluster is disconnected.
  Disconnected

  # The Rubrik cluster is initializing.
  Initializing
}
# All storage arrays in a Rubrik cluster.
type ClusterStorageArrays {
  # Error message. Available only when the storage array retrieve operation fails.
  errorMessage: String

  # Details of the Rubrik cluster.
  cluster: Cluster!

  # Storage arrays in Rubrik cluster.
  storageArrays: [StorageArrayDetail!]!
}
# Sub status of the cluster.
enum ClusterSubStatus {
  # The cluster has no sub status.
  DEFAULT

  # The cluster is currently initializing events.
  INITIALIZING_EVENTS

  # The cluster is currently syncing objects and SLAs.
  INITIALIZING_METADATA

  # The cluster is currently initializing reports.
  INITIALIZING_REPORTS
}
# Cluster system status.
enum ClusterSystemStatus {
  # Several nodes are experiencing failures.
  FATAL

  # All nodes are functioning normally.
  OK

  # Some nodes are experiencing failures.
  WARNING
}
# Cluster time zone.
type ClusterTimezone {
  timezone: ClusterTimezoneType!
}
# Cluster timezone input.
input ClusterTimezoneInput {
  timezone: ClusterTimezoneType!
}
# Cluster timezone.
enum ClusterTimezoneType {
  # Cluster timezone Abidjan.
  CLUSTER_TIMEZONE_AFRICA_ABIDJAN

  # Cluster timezone Algiers.
  CLUSTER_TIMEZONE_AFRICA_ALGIERS

  # Cluster timezone Bissau.
  CLUSTER_TIMEZONE_AFRICA_BISSAU

  # Cluster timezone Ceuta.
  CLUSTER_TIMEZONE_AFRICA_CEUTA

  # Cluster timezone Johannesburg.
  CLUSTER_TIMEZONE_AFRICA_JOHANNESBURG

  # Cluster timezone Lagos.
  CLUSTER_TIMEZONE_AFRICA_LAGOS

  # Cluster timezone Maputo.
  CLUSTER_TIMEZONE_AFRICA_MAPUTO

  # Cluster timezone Monrovia.
  CLUSTER_TIMEZONE_AFRICA_MONROVIA

  # Cluster timezone Nairobi.
  CLUSTER_TIMEZONE_AFRICA_NAIROBI

  # Cluster timezone Ndjamena.
  CLUSTER_TIMEZONE_AFRICA_NDJAMENA

  # Cluster timezone Sao Tome.
  CLUSTER_TIMEZONE_AFRICA_SAO_TOME

  # Cluster timezone Tripoli.
  CLUSTER_TIMEZONE_AFRICA_TRIPOLI

  # Cluster timezone Tunis.
  CLUSTER_TIMEZONE_AFRICA_TUNIS

  # Cluster timezone Windhoek.
  CLUSTER_TIMEZONE_AFRICA_WINDHOEK

  # Cluster timezone Adak.
  CLUSTER_TIMEZONE_AMERICA_ADAK

  # Cluster timezone Anchorage.
  CLUSTER_TIMEZONE_AMERICA_ANCHORAGE

  # Cluster timezone Araguaina.
  CLUSTER_TIMEZONE_AMERICA_ARAGUAINA

  # Cluster timezone Argentina Buenos Aires.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_BUENOS_AIRES

  # Cluster timezone Argentina Catamarca.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_CATAMARCA

  # Cluster timezone Argentina Cordoba.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_CORDOBA

  # Cluster timezone Argentina Jujuy.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_JUJUY

  # Cluster timezone Argentina La Rioja.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_LA_RIOJA

  # Cluster timezone Argentina Mendoza.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_MENDOZA

  # Cluster timezone Argentina Rio Gallegos.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_RIO_GALLEGOS

  # Cluster timezone Argentina Salta.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_SALTA

  # Cluster timezone Argentina San Juan.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_SAN_JUAN

  # Cluster timezone Argentina San Luis.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_SAN_LUIS

  # Cluster timezone Argentina Tucuman.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_TUCUMAN

  # Cluster timezone Argentina Ushuaia.
  CLUSTER_TIMEZONE_AMERICA_ARGENTINA_USHUAIA

  # Cluster timezone Atikokan.
  CLUSTER_TIMEZONE_AMERICA_ATIKOKAN

  # Cluster timezone Bahia.
  CLUSTER_TIMEZONE_AMERICA_BAHIA

  # Cluster timezone Barbados.
  CLUSTER_TIMEZONE_AMERICA_BARBADOS

  # Cluster timezone Belem.
  CLUSTER_TIMEZONE_AMERICA_BELEM

  # Cluster timezone Belize.
  CLUSTER_TIMEZONE_AMERICA_BELIZE

  # Cluster timezone Boa Vista.
  CLUSTER_TIMEZONE_AMERICA_BOA_VISTA

  # Cluster timezone Bogota.
  CLUSTER_TIMEZONE_AMERICA_BOGOTA

  # Cluster timezone Boise.
  CLUSTER_TIMEZONE_AMERICA_BOISE

  # Cluster timezone Cambridge Bay.
  CLUSTER_TIMEZONE_AMERICA_CAMBRIDGE_BAY

  # Cluster timezone Campo Grande.
  CLUSTER_TIMEZONE_AMERICA_CAMPO_GRANDE

  # Cluster timezone Cancun.
  CLUSTER_TIMEZONE_AMERICA_CANCUN

  # Cluster timezone Caracas.
  CLUSTER_TIMEZONE_AMERICA_CARACAS

  # Cluster timezone Cayenne.
  CLUSTER_TIMEZONE_AMERICA_CAYENNE

  # Cluster timezone Chicago.
  CLUSTER_TIMEZONE_AMERICA_CHICAGO

  # Cluster timezone Chihuahua.
  CLUSTER_TIMEZONE_AMERICA_CHIHUAHUA

  # Cluster timezone Ciudad Juarez.
  CLUSTER_TIMEZONE_AMERICA_CIUDAD_JUAREZ

  # Cluster timezone Costa Rica.
  CLUSTER_TIMEZONE_AMERICA_COSTA_RICA

  # Cluster timezone Cuiaba.
  CLUSTER_TIMEZONE_AMERICA_CUIABA

  # Cluster timezone Danmarkshavn.
  CLUSTER_TIMEZONE_AMERICA_DANMARKSHAVN

  # Cluster timezone Dawson.
  CLUSTER_TIMEZONE_AMERICA_DAWSON

  # Cluster timezone Dawson Creek.
  CLUSTER_TIMEZONE_AMERICA_DAWSON_CREEK

  # Cluster timezone Denver.
  CLUSTER_TIMEZONE_AMERICA_DENVER

  # Cluster timezone Detroit.
  CLUSTER_TIMEZONE_AMERICA_DETROIT

  # Cluster timezone Edmonton.
  CLUSTER_TIMEZONE_AMERICA_EDMONTON

  # Cluster timezone Eirunepe.
  CLUSTER_TIMEZONE_AMERICA_EIRUNEPE

  # Cluster timezone El Salvador.
  CLUSTER_TIMEZONE_AMERICA_EL_SALVADOR

  # Cluster timezone Fortaleza.
  CLUSTER_TIMEZONE_AMERICA_FORTALEZA

  # Cluster timezone Fort Nelson.
  CLUSTER_TIMEZONE_AMERICA_FORT_NELSON

  # Cluster timezone Glace Bay.
  CLUSTER_TIMEZONE_AMERICA_GLACE_BAY

  # Cluster timezone Goose Bay.
  CLUSTER_TIMEZONE_AMERICA_GOOSE_BAY

  # Cluster timezone Grand Turk.
  CLUSTER_TIMEZONE_AMERICA_GRAND_TURK

  # Cluster timezone Guatemala.
  CLUSTER_TIMEZONE_AMERICA_GUATEMALA

  # Cluster timezone Guayaquil.
  CLUSTER_TIMEZONE_AMERICA_GUAYAQUIL

  # Cluster timezone Guyana.
  CLUSTER_TIMEZONE_AMERICA_GUYANA

  # Cluster timezone Halifax.
  CLUSTER_TIMEZONE_AMERICA_HALIFAX

  # Cluster timezone Havana.
  CLUSTER_TIMEZONE_AMERICA_HAVANA

  # Cluster timezone Indiana Indianapolis.
  CLUSTER_TIMEZONE_AMERICA_INDIANA_INDIANAPOLIS

  # Cluster timezone Indiana Knox.
  CLUSTER_TIMEZONE_AMERICA_INDIANA_KNOX

  # Cluster timezone Indiana Marengo.
  CLUSTER_TIMEZONE_AMERICA_INDIANA_MARENGO

  # Cluster timezone Indiana Petersburg.
  CLUSTER_TIMEZONE_AMERICA_INDIANA_PETERSBURG

  # Cluster timezone Indiana Tell City.
  CLUSTER_TIMEZONE_AMERICA_INDIANA_TELL_CITY

  # Cluster timezone Indiana Vevay.
  CLUSTER_TIMEZONE_AMERICA_INDIANA_VEVAY

  # Cluster timezone Indiana Vincennes.
  CLUSTER_TIMEZONE_AMERICA_INDIANA_VINCENNES

  # Cluster timezone Indiana Winamac.
  CLUSTER_TIMEZONE_AMERICA_INDIANA_WINAMAC

  # Cluster timezone Inuvik.
  CLUSTER_TIMEZONE_AMERICA_INUVIK

  # Cluster timezone Iqaluit.
  CLUSTER_TIMEZONE_AMERICA_IQALUIT

  # Cluster timezone Jamaica.
  CLUSTER_TIMEZONE_AMERICA_JAMAICA

  # Cluster timezone Juneau.
  CLUSTER_TIMEZONE_AMERICA_JUNEAU

  # Cluster timezone Kentucky Louisville.
  CLUSTER_TIMEZONE_AMERICA_KENTUCKY_LOUISVILLE

  # Cluster timezone Kentucky Monticello.
  CLUSTER_TIMEZONE_AMERICA_KENTUCKY_MONTICELLO

  # Cluster timezone La Paz.
  CLUSTER_TIMEZONE_AMERICA_LA_PAZ

  # Cluster timezone Lima.
  CLUSTER_TIMEZONE_AMERICA_LIMA

  # Cluster timezone Los Angeles.
  CLUSTER_TIMEZONE_AMERICA_LOS_ANGELES

  # Cluster timezone Maceio.
  CLUSTER_TIMEZONE_AMERICA_MACEIO

  # Cluster timezone Managua.
  CLUSTER_TIMEZONE_AMERICA_MANAGUA

  # Cluster timezone Manaus.
  CLUSTER_TIMEZONE_AMERICA_MANAUS

  # Cluster timezone Martinique.
  CLUSTER_TIMEZONE_AMERICA_MARTINIQUE

  # Cluster timezone Matamoros.
  CLUSTER_TIMEZONE_AMERICA_MATAMOROS

  # Cluster timezone Menominee.
  CLUSTER_TIMEZONE_AMERICA_MENOMINEE

  # Cluster timezone Merida.
  CLUSTER_TIMEZONE_AMERICA_MERIDA

  # Cluster timezone Metlakatla.
  CLUSTER_TIMEZONE_AMERICA_METLAKATLA

  # Cluster timezone Mexico City.
  CLUSTER_TIMEZONE_AMERICA_MEXICO_CITY

  # Cluster timezone Miquelon.
  CLUSTER_TIMEZONE_AMERICA_MIQUELON

  # Cluster timezone Moncton.
  CLUSTER_TIMEZONE_AMERICA_MONCTON

  # Cluster timezone Monterrey.
  CLUSTER_TIMEZONE_AMERICA_MONTERREY

  # Cluster timezone Montevideo.
  CLUSTER_TIMEZONE_AMERICA_MONTEVIDEO

  # Cluster timezone New York.
  CLUSTER_TIMEZONE_AMERICA_NEW_YORK

  # Cluster timezone Nome.
  CLUSTER_TIMEZONE_AMERICA_NOME

  # Cluster timezone Noronha.
  CLUSTER_TIMEZONE_AMERICA_NORONHA

  # Cluster timezone North Dakota Beulah.
  CLUSTER_TIMEZONE_AMERICA_NORTH_DAKOTA_BEULAH

  # Cluster timezone North Dakota Center.
  CLUSTER_TIMEZONE_AMERICA_NORTH_DAKOTA_CENTER

  # Cluster timezone North Dakota New Salem.
  CLUSTER_TIMEZONE_AMERICA_NORTH_DAKOTA_NEW_SALEM

  # Cluster timezone Ojinaga.
  CLUSTER_TIMEZONE_AMERICA_OJINAGA

  # Cluster timezone Panama.
  CLUSTER_TIMEZONE_AMERICA_PANAMA

  # Cluster timezone Paramaribo.
  CLUSTER_TIMEZONE_AMERICA_PARAMARIBO

  # Cluster timezone Phoenix.
  CLUSTER_TIMEZONE_AMERICA_PHOENIX

  # Cluster timezone Porto Velho.
  CLUSTER_TIMEZONE_AMERICA_PORTO_VELHO

  # Cluster timezone Puerto Rico.
  CLUSTER_TIMEZONE_AMERICA_PUERTO_RICO

  # Cluster timezone Punta Arenas.
  CLUSTER_TIMEZONE_AMERICA_PUNTA_ARENAS

  # Cluster timezone Rankin Inlet.
  CLUSTER_TIMEZONE_AMERICA_RANKIN_INLET

  # Cluster timezone Recife.
  CLUSTER_TIMEZONE_AMERICA_RECIFE

  # Cluster timezone Regina.
  CLUSTER_TIMEZONE_AMERICA_REGINA

  # Cluster timezone Resolute.
  CLUSTER_TIMEZONE_AMERICA_RESOLUTE

  # Cluster timezone Rio Branco.
  CLUSTER_TIMEZONE_AMERICA_RIO_BRANCO

  # Cluster timezone Santarem.
  CLUSTER_TIMEZONE_AMERICA_SANTAREM

  # Cluster timezone Santiago.
  CLUSTER_TIMEZONE_AMERICA_SANTIAGO

  # Cluster timezone Sao Paulo.
  CLUSTER_TIMEZONE_AMERICA_SAO_PAULO

  # Cluster timezone Scoresbysund.
  CLUSTER_TIMEZONE_AMERICA_SCORESBYSUND

  # Cluster timezone Sitka.
  CLUSTER_TIMEZONE_AMERICA_SITKA

  # Cluster timezone St. Johns.
  CLUSTER_TIMEZONE_AMERICA_ST_JOHNS

  # Cluster timezone Swift Current.
  CLUSTER_TIMEZONE_AMERICA_SWIFT_CURRENT

  # Cluster timezone Tegucigalpa.
  CLUSTER_TIMEZONE_AMERICA_TEGUCIGALPA

  # Cluster timezone Thule.
  CLUSTER_TIMEZONE_AMERICA_THULE

  # Cluster timezone Tijuana.
  CLUSTER_TIMEZONE_AMERICA_TIJUANA

  # Cluster timezone Toronto.
  CLUSTER_TIMEZONE_AMERICA_TORONTO

  # Cluster timezone Vancouver.
  CLUSTER_TIMEZONE_AMERICA_VANCOUVER

  # Cluster timezone Whitehorse.
  CLUSTER_TIMEZONE_AMERICA_WHITEHORSE

  # Cluster timezone Winnipeg.
  CLUSTER_TIMEZONE_AMERICA_WINNIPEG

  # Cluster timezone Yakutat.
  CLUSTER_TIMEZONE_AMERICA_YAKUTAT

  # Cluster timezone Casey.
  CLUSTER_TIMEZONE_ANTARCTICA_CASEY

  # Cluster timezone Davis.
  CLUSTER_TIMEZONE_ANTARCTICA_DAVIS

  # Cluster timezone Macquarie.
  CLUSTER_TIMEZONE_ANTARCTICA_MACQUARIE

  # Cluster timezone Mawson.
  CLUSTER_TIMEZONE_ANTARCTICA_MAWSON

  # Cluster timezone Palmer.
  CLUSTER_TIMEZONE_ANTARCTICA_PALMER

  # Cluster timezone Rothera.
  CLUSTER_TIMEZONE_ANTARCTICA_ROTHERA

  # Cluster timezone Troll.
  CLUSTER_TIMEZONE_ANTARCTICA_TROLL

  # Cluster timezone Almaty.
  CLUSTER_TIMEZONE_ASIA_ALMATY

  # Cluster timezone Anadyr.
  CLUSTER_TIMEZONE_ASIA_ANADYR

  # Cluster timezone Aqtau.
  CLUSTER_TIMEZONE_ASIA_AQTAU

  # Cluster timezone Aqtobe.
  CLUSTER_TIMEZONE_ASIA_AQTOBE

  # Cluster timezone Ashgabat.
  CLUSTER_TIMEZONE_ASIA_ASHGABAT

  # Cluster timezone Atyrau.
  CLUSTER_TIMEZONE_ASIA_ATYRAU

  # Cluster timezone Baghdad.
  CLUSTER_TIMEZONE_ASIA_BAGHDAD

  # Cluster timezone Baku.
  CLUSTER_TIMEZONE_ASIA_BAKU

  # Cluster timezone Bangkok.
  CLUSTER_TIMEZONE_ASIA_BANGKOK

  # Cluster timezone Barnaul.
  CLUSTER_TIMEZONE_ASIA_BARNAUL

  # Cluster timezone Bishkek.
  CLUSTER_TIMEZONE_ASIA_BISHKEK

  # Cluster timezone Chita.
  CLUSTER_TIMEZONE_ASIA_CHITA

  # Cluster timezone Choibalsan.
  CLUSTER_TIMEZONE_ASIA_CHOIBALSAN

  # Cluster timezone Colombo.
  CLUSTER_TIMEZONE_ASIA_COLOMBO

  # Cluster timezone Damascus.
  CLUSTER_TIMEZONE_ASIA_DAMASCUS

  # Cluster timezone Dhaka.
  CLUSTER_TIMEZONE_ASIA_DHAKA

  # Cluster timezone Dili.
  CLUSTER_TIMEZONE_ASIA_DILI

  # Cluster timezone Dubai.
  CLUSTER_TIMEZONE_ASIA_DUBAI

  # Cluster timezone Dushanbe.
  CLUSTER_TIMEZONE_ASIA_DUSHANBE

  # Cluster timezone Famagusta.
  CLUSTER_TIMEZONE_ASIA_FAMAGUSTA

  # Cluster timezone Hong Kong.
  CLUSTER_TIMEZONE_ASIA_HONG_KONG

  # Cluster timezone Hovd.
  CLUSTER_TIMEZONE_ASIA_HOVD

  # Cluster timezone Ho Chi Minh.
  CLUSTER_TIMEZONE_ASIA_HO_CHI_MINH

  # Cluster timezone Irkutsk.
  CLUSTER_TIMEZONE_ASIA_IRKUTSK

  # Cluster timezone Jakarta.
  CLUSTER_TIMEZONE_ASIA_JAKARTA

  # Cluster timezone Jayapura.
  CLUSTER_TIMEZONE_ASIA_JAYAPURA

  # Cluster timezone Jerusalem.
  CLUSTER_TIMEZONE_ASIA_JERUSALEM

  # Cluster timezone Kabul.
  CLUSTER_TIMEZONE_ASIA_KABUL

  # Cluster timezone Kamchatka.
  CLUSTER_TIMEZONE_ASIA_KAMCHATKA

  # Cluster timezone Karachi.
  CLUSTER_TIMEZONE_ASIA_KARACHI

  # Cluster timezone Kathmandu.
  CLUSTER_TIMEZONE_ASIA_KATHMANDU

  # Cluster timezone Khandyga.
  CLUSTER_TIMEZONE_ASIA_KHANDYGA

  # Cluster timezone Kolkata.
  CLUSTER_TIMEZONE_ASIA_KOLKATA

  # Cluster timezone Krasnoyarsk.
  CLUSTER_TIMEZONE_ASIA_KRASNOYARSK

  # Cluster timezone Kuching.
  CLUSTER_TIMEZONE_ASIA_KUCHING

  # Cluster timezone Macau.
  CLUSTER_TIMEZONE_ASIA_MACAU

  # Cluster timezone Magadan.
  CLUSTER_TIMEZONE_ASIA_MAGADAN

  # Cluster timezone Makassar.
  CLUSTER_TIMEZONE_ASIA_MAKASSAR

  # Cluster timezone Manila.
  CLUSTER_TIMEZONE_ASIA_MANILA

  # Cluster timezone Nicosia.
  CLUSTER_TIMEZONE_ASIA_NICOSIA

  # Cluster timezone Novokuznetsk.
  CLUSTER_TIMEZONE_ASIA_NOVOKUZNETSK

  # Cluster timezone Novosibirsk.
  CLUSTER_TIMEZONE_ASIA_NOVOSIBIRSK

  # Cluster timezone Omsk.
  CLUSTER_TIMEZONE_ASIA_OMSK

  # Cluster timezone Oral.
  CLUSTER_TIMEZONE_ASIA_ORAL

  # Cluster timezone Pontianak.
  CLUSTER_TIMEZONE_ASIA_PONTIANAK

  # Cluster timezone Pyongyang.
  CLUSTER_TIMEZONE_ASIA_PYONGYANG

  # Cluster timezone Qatar.
  CLUSTER_TIMEZONE_ASIA_QATAR

  # Cluster timezone Qostanay.
  CLUSTER_TIMEZONE_ASIA_QOSTANAY

  # Cluster timezone Qyzylorda.
  CLUSTER_TIMEZONE_ASIA_QYZYLORDA

  # Cluster timezone Riyadh.
  CLUSTER_TIMEZONE_ASIA_RIYADH

  # Cluster timezone Sakhalin.
  CLUSTER_TIMEZONE_ASIA_SAKHALIN

  # Cluster timezone Samarkand.
  CLUSTER_TIMEZONE_ASIA_SAMARKAND

  # Cluster timezone Seoul.
  CLUSTER_TIMEZONE_ASIA_SEOUL

  # Cluster timezone Shanghai.
  CLUSTER_TIMEZONE_ASIA_SHANGHAI

  # Cluster timezone Singapore.
  CLUSTER_TIMEZONE_ASIA_SINGAPORE

  # Cluster timezone Srednekolymsk.
  CLUSTER_TIMEZONE_ASIA_SREDNEKOLYMSK

  # Cluster timezone Taipei.
  CLUSTER_TIMEZONE_ASIA_TAIPEI

  # Cluster timezone Tashkent.
  CLUSTER_TIMEZONE_ASIA_TASHKENT

  # Cluster timezone Tbilisi.
  CLUSTER_TIMEZONE_ASIA_TBILISI

  # Cluster timezone Tehran.
  CLUSTER_TIMEZONE_ASIA_TEHRAN

  # Cluster timezone Thimphu.
  CLUSTER_TIMEZONE_ASIA_THIMPHU

  # Cluster timezone Tokyo.
  CLUSTER_TIMEZONE_ASIA_TOKYO

  # Cluster timezone Tomsk.
  CLUSTER_TIMEZONE_ASIA_TOMSK

  # Cluster timezone Ulaanbaatar.
  CLUSTER_TIMEZONE_ASIA_ULAANBAATAR

  # Cluster timezone Urumqi.
  CLUSTER_TIMEZONE_ASIA_URUMQI

  # Cluster timezone Vladivostok.
  CLUSTER_TIMEZONE_ASIA_VLADIVOSTOK

  # Cluster timezone Yakutsk.
  CLUSTER_TIMEZONE_ASIA_YAKUTSK

  # Cluster timezone Yangon.
  CLUSTER_TIMEZONE_ASIA_YANGON

  # Cluster timezone Yekaterinburg.
  CLUSTER_TIMEZONE_ASIA_YEKATERINBURG

  # Cluster timezone Yerevan.
  CLUSTER_TIMEZONE_ASIA_YEREVAN

  # Cluster timezone Azores.
  CLUSTER_TIMEZONE_ATLANTIC_AZORES

  # Cluster timezone Bermuda.
  CLUSTER_TIMEZONE_ATLANTIC_BERMUDA

  # Cluster timezone Canary.
  CLUSTER_TIMEZONE_ATLANTIC_CANARY

  # Cluster timezone Cape Verde.
  CLUSTER_TIMEZONE_ATLANTIC_CAPE_VERDE

  # Cluster timezone Faroe.
  CLUSTER_TIMEZONE_ATLANTIC_FAROE

  # Cluster timezone Madeira.
  CLUSTER_TIMEZONE_ATLANTIC_MADEIRA

  # Cluster timezone South Georgia.
  CLUSTER_TIMEZONE_ATLANTIC_SOUTH_GEORGIA

  # Cluster timezone Stanley.
  CLUSTER_TIMEZONE_ATLANTIC_STANLEY

  # Cluster timezone Adelaide.
  CLUSTER_TIMEZONE_AUSTRALIA_ADELAIDE

  # Cluster timezone Brisbane.
  CLUSTER_TIMEZONE_AUSTRALIA_BRISBANE

  # Cluster timezone Broken Hill.
  CLUSTER_TIMEZONE_AUSTRALIA_BROKEN_HILL

  # Cluster timezone Darwin.
  CLUSTER_TIMEZONE_AUSTRALIA_DARWIN

  # Cluster timezone Eucla.
  CLUSTER_TIMEZONE_AUSTRALIA_EUCLA

  # Cluster timezone Hobart.
  CLUSTER_TIMEZONE_AUSTRALIA_HOBART

  # Cluster timezone Lindeman.
  CLUSTER_TIMEZONE_AUSTRALIA_LINDEMAN

  # Cluster timezone Lord Howe.
  CLUSTER_TIMEZONE_AUSTRALIA_LORD_HOWE

  # Cluster timezone Melbourne.
  CLUSTER_TIMEZONE_AUSTRALIA_MELBOURNE

  # Cluster timezone Perth.
  CLUSTER_TIMEZONE_AUSTRALIA_PERTH

  # Cluster timezone Sydney.
  CLUSTER_TIMEZONE_AUSTRALIA_SYDNEY

  # Cluster timezone CET.
  CLUSTER_TIMEZONE_CET

  # Cluster timezone CST6CDT.
  CLUSTER_TIMEZONE_CST6CDT

  # Cluster timezone EET.
  CLUSTER_TIMEZONE_EET

  # Cluster timezone Est5edt.
  CLUSTER_TIMEZONE_EST5EDT

  # Cluster timezone Amsterdam.
  CLUSTER_TIMEZONE_EUROPE_AMSTERDAM

  # Cluster timezone Andorra.
  CLUSTER_TIMEZONE_EUROPE_ANDORRA

  # Cluster timezone Astrakhan.
  CLUSTER_TIMEZONE_EUROPE_ASTRAKHAN

  # Cluster timezone Athens.
  CLUSTER_TIMEZONE_EUROPE_ATHENS

  # Cluster timezone Belgrade.
  CLUSTER_TIMEZONE_EUROPE_BELGRADE

  # Cluster timezone Berlin.
  CLUSTER_TIMEZONE_EUROPE_BERLIN

  # Cluster timezone Brussels.
  CLUSTER_TIMEZONE_EUROPE_BRUSSELS

  # Cluster timezone Bucharest.
  CLUSTER_TIMEZONE_EUROPE_BUCHAREST

  # Cluster timezone Budapest.
  CLUSTER_TIMEZONE_EUROPE_BUDAPEST

  # Cluster timezone Chisinau.
  CLUSTER_TIMEZONE_EUROPE_CHISINAU

  # Cluster timezone Dublin.
  CLUSTER_TIMEZONE_EUROPE_DUBLIN

  # Cluster timezone Gibraltar.
  CLUSTER_TIMEZONE_EUROPE_GIBRALTAR

  # Cluster timezone Helsinki.
  CLUSTER_TIMEZONE_EUROPE_HELSINKI

  # Cluster timezone Istanbul.
  CLUSTER_TIMEZONE_EUROPE_ISTANBUL

  # Cluster timezone Kaliningrad.
  CLUSTER_TIMEZONE_EUROPE_KALININGRAD

  # Cluster timezone Kirov.
  CLUSTER_TIMEZONE_EUROPE_KIROV

  # Cluster timezone Kyiv.
  CLUSTER_TIMEZONE_EUROPE_KYIV

  # Cluster timezone Lisbon.
  CLUSTER_TIMEZONE_EUROPE_LISBON

  # Cluster timezone London.
  CLUSTER_TIMEZONE_EUROPE_LONDON

  # Cluster timezone Madrid.
  CLUSTER_TIMEZONE_EUROPE_MADRID

  # Cluster timezone Malta.
  CLUSTER_TIMEZONE_EUROPE_MALTA

  # Cluster timezone Minsk.
  CLUSTER_TIMEZONE_EUROPE_MINSK

  # Cluster timezone Moscow.
  CLUSTER_TIMEZONE_EUROPE_MOSCOW

  # Cluster timezone Paris.
  CLUSTER_TIMEZONE_EUROPE_PARIS

  # Cluster timezone Prague.
  CLUSTER_TIMEZONE_EUROPE_PRAGUE

  # Cluster timezone Riga.
  CLUSTER_TIMEZONE_EUROPE_RIGA

  # Cluster timezone Rome.
  CLUSTER_TIMEZONE_EUROPE_ROME

  # Cluster timezone Samara.
  CLUSTER_TIMEZONE_EUROPE_SAMARA

  # Cluster timezone Saratov.
  CLUSTER_TIMEZONE_EUROPE_SARATOV

  # Cluster timezone Simferopol.
  CLUSTER_TIMEZONE_EUROPE_SIMFEROPOL

  # Cluster timezone Sofia.
  CLUSTER_TIMEZONE_EUROPE_SOFIA

  # Cluster timezone Tallinn.
  CLUSTER_TIMEZONE_EUROPE_TALLINN

  # Cluster timezone Tirane.
  CLUSTER_TIMEZONE_EUROPE_TIRANE

  # Cluster timezone Ulyanovsk.
  CLUSTER_TIMEZONE_EUROPE_ULYANOVSK

  # Cluster timezone Vienna.
  CLUSTER_TIMEZONE_EUROPE_VIENNA

  # Cluster timezone Vilnius.
  CLUSTER_TIMEZONE_EUROPE_VILNIUS

  # Cluster timezone Volgograd.
  CLUSTER_TIMEZONE_EUROPE_VOLGOGRAD

  # Cluster timezone Warsaw.
  CLUSTER_TIMEZONE_EUROPE_WARSAW

  # Cluster timezone Zurich.
  CLUSTER_TIMEZONE_EUROPE_ZURICH

  # Cluster timezone Chagos.
  CLUSTER_TIMEZONE_INDIAN_CHAGOS

  # Cluster timezone Maldives.
  CLUSTER_TIMEZONE_INDIAN_MALDIVES

  # Cluster timezone Mauritius.
  CLUSTER_TIMEZONE_INDIAN_MAURITIUS

  # Cluster timezone MET.
  CLUSTER_TIMEZONE_MET

  # Cluster timezone MST7MDT.
  CLUSTER_TIMEZONE_MST7MDT

  # Cluster timezone Apia.
  CLUSTER_TIMEZONE_PACIFIC_APIA

  # Cluster timezone Auckland.
  CLUSTER_TIMEZONE_PACIFIC_AUCKLAND

  # Cluster timezone Bougainville.
  CLUSTER_TIMEZONE_PACIFIC_BOUGAINVILLE

  # Cluster timezone Chatham.
  CLUSTER_TIMEZONE_PACIFIC_CHATHAM

  # Cluster timezone Easter.
  CLUSTER_TIMEZONE_PACIFIC_EASTER

  # Cluster timezone Efate.
  CLUSTER_TIMEZONE_PACIFIC_EFATE

  # Cluster timezone Fakaofo.
  CLUSTER_TIMEZONE_PACIFIC_FAKAOFO

  # Cluster timezone Fiji.
  CLUSTER_TIMEZONE_PACIFIC_FIJI

  # Cluster timezone Galapagos.
  CLUSTER_TIMEZONE_PACIFIC_GALAPAGOS

  # Cluster timezone Gambier.
  CLUSTER_TIMEZONE_PACIFIC_GAMBIER

  # Cluster timezone Guadalcanal.
  CLUSTER_TIMEZONE_PACIFIC_GUADALCANAL

  # Cluster timezone Guam.
  CLUSTER_TIMEZONE_PACIFIC_GUAM

  # Cluster timezone Honolulu.
  CLUSTER_TIMEZONE_PACIFIC_HONOLULU

  # Cluster timezone Kanton.
  CLUSTER_TIMEZONE_PACIFIC_KANTON

  # Cluster timezone Kiritimati.
  CLUSTER_TIMEZONE_PACIFIC_KIRITIMATI

  # Cluster timezone Kosrae.
  CLUSTER_TIMEZONE_PACIFIC_KOSRAE

  # Cluster timezone Kwajalein.
  CLUSTER_TIMEZONE_PACIFIC_KWAJALEIN

  # Cluster timezone Marquesas.
  CLUSTER_TIMEZONE_PACIFIC_MARQUESAS

  # Cluster timezone Midway.
  CLUSTER_TIMEZONE_PACIFIC_MIDWAY

  # Cluster timezone Nauru.
  CLUSTER_TIMEZONE_PACIFIC_NAURU

  # Cluster timezone Niue.
  CLUSTER_TIMEZONE_PACIFIC_NIUE

  # Cluster timezone Norfolk.
  CLUSTER_TIMEZONE_PACIFIC_NORFOLK

  # Cluster timezone Noumea.
  CLUSTER_TIMEZONE_PACIFIC_NOUMEA

  # Cluster timezone Pago Pago.
  CLUSTER_TIMEZONE_PACIFIC_PAGO_PAGO

  # Cluster timezone Palau.
  CLUSTER_TIMEZONE_PACIFIC_PALAU

  # Cluster timezone Pitcairn.
  CLUSTER_TIMEZONE_PACIFIC_PITCAIRN

  # Cluster timezone Port Moresby.
  CLUSTER_TIMEZONE_PACIFIC_PORT_MORESBY

  # Cluster timezone Rarotonga.
  CLUSTER_TIMEZONE_PACIFIC_RAROTONGA

  # Cluster timezone Tahiti.
  CLUSTER_TIMEZONE_PACIFIC_TAHITI

  # Cluster timezone Tarawa.
  CLUSTER_TIMEZONE_PACIFIC_TARAWA

  # Cluster timezone Tongatapu.
  CLUSTER_TIMEZONE_PACIFIC_TONGATAPU

  # Cluster timezone PST8PDT.
  CLUSTER_TIMEZONE_PST8PDT

  # Cluster timezone unknown.
  CLUSTER_TIMEZONE_UNSPECIFIED

  # Cluster timezone UTC.
  CLUSTER_TIMEZONE_UTC

  # Cluster timezone WET.
  CLUSTER_TIMEZONE_WET
}
type ClusterType {
  enumValue: ClusterTypeEnum!
}
enum ClusterTypeEnum {
  Cloud
  ExoCompute
  OnPrem
  Polaris
  Robo
  Unknown
}
# Cluster update input.
input ClusterUpdateInput {
  # Version of the EULA accepted by admin. By modifying this attribute you
  # agree to the specific version of the EULA.
  acceptedEulaVersion: String

  # New geolocation for a Rubrik cluster.
  geolocation: ClusterGeolocationInput

  # New name for a Rubrik cluster.
  name: String

  # New time zone for a Rubrik cluster.
  timezone: ClusterTimezoneInput
}
# Contains the cluster UUID and Oracle database ID.
input ClusterUuidWithDbIdInput {
  # Required. Specifies UUID used to identify the cluster that the request goes to.
  clusterUuid: UUID!

  # ID of the Oracle database.
  dbId: String!
}
# Contains the cluster UUID and a Microsoft SQL object ID.
input ClusterUuidWithMssqlObjectIdInput {
  # Specifies the UUID used to identify the cluster that the request goes to.
  clusterUuid: UUID!

  # ID of a Microsoft SQL object.
  mssqlObjectId: String
}
# Supported in v6.0+
type ClusterVisibilityConfig {
  # Required. Supported in v6.0+
  # Names of the host groups being protected.
  hostGroupFilter: [String!]!

  # Required. Supported in v6.0+
  # VMware managed object ID of the compute cluster. This is not the ID managed by Rubrik.
  id: String!

  # Supported in v6.0+
  # A Boolean that specifies whether the compute cluster is a VMware Metro Storage Cluster.
  isVmwareMetroStorageCluster: Boolean
}
# Supported in v6.0+
input ClusterVisibilityConfigInput {
  # Supported in v6.0+
  # A Boolean that specifies whether the compute cluster is a VMware Metro Storage Cluster.
  isVmwareMetroStorageCluster: Boolean

  # Required. Supported in v6.0+
  # Names of the host groups being protected.
  hostGroupFilter: [String!]!

  # Required. Supported in v6.0+
  # VMware managed object ID of the compute cluster. This is not the ID managed by Rubrik.
  id: String!
}
# Supported in v6.0+
type ClusterVisibilityInfo {
  # Required. Supported in v6.0+
  # Name of the compute cluster.
  name: String!
  clusterVisibilityConfig: ClusterVisibilityConfig
}
# Web certificate and IPMI details for a cluster.
type ClusterWebCertAndIpmi {
  # Error message, in the case of an error.
  error: String!

  # ID of the Rubrik cluster.
  clusterUuid: UUID!

  # IPMI details.
  ipmiInfo: ModifyIpmiReply

  # Web server certificate.
  certInfo: ClusterWebSignedCertificateReply
}
input ClusterWebSignedCertificateInput {
  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Supported in v5.2+
type ClusterWebSignedCertificateReply {
  # Required. Supported in v5.2+
  # A Boolean value that indicates if the web server is configured to use a certificate signed by an external CA.
  webServerConfiguredWithCaSignedCertificate: Boolean!

  # Supported in v5.2+
  # Signed certificate of the web server.
  cert: AddClusterCertificateReply
}
# Available cold storage class options for tiering.
enum ColdStorageClass {
  # Glacier cold storage class for AWS.
  AWS_GLACIER

  # GDA cold storage class for AWS.
  AWS_GLACIER_DEEP_ARCHIVE

  # Archive cold storage tier for Azure.
  AZURE_ARCHIVE

  # Unknown cold storage class.
  COLD_STORAGE_CLASS_UNKNOWN
}
# Colossus container Immutability Status.
enum ColossusStorageContainerImmutabilityStatus {
  # Container immutability not enabled.
  DISABLED

  # Container immutability enabled.
  ENABLED

  # Container immutability migration in progress.
  MIGRATION_IN_PROGRESS

  # Unspecified type.
  STATUS_UNSPECIFIED
}
type Column {
  name: String!
  displayName: String!
  type: DataTypeEnum!
  nullable: Boolean!
  dimensional: Boolean!
  aggregate: Boolean!
  sortable: Boolean!
  default: Boolean!
}
# Filter cluster data.
input CommonClusterFilterInput {
  # Rubrik cluster UUID.
  id: [UUID!]

  # Rubrik cluster type.
  type: [ClusterTypeEnum!]
}
# Configuration to complete the Azure AD application creation flow.
input CompleteAzureAdAppSetupInput {
  # Domain name of the MSFT tenant for which the application was created.
  domainName: String!

  # CSRF token from the setup flow.
  stateToken: String!

  # Azure KMS configuration.
  kmsSpec: KmsSpecInput
}
# Response of the operation that onboards an Azure AD.
type CompleteAzureAdAppSetupReply {
  # Workload ID for the Azure AD.
  workloadFid: UUID!
}
# Configuration to complete an update to the Azure AD directory App.
input CompleteAzureAdAppUpdateInput {
  # Workload FID of the Azure AD directory to update.
  workloadFid: UUID!

  # CSRF token from the initiate flow.
  stateToken: String!
}
# Input for completing authentication of the Azure Cloud Accounts.
input CompleteAzureCloudAccountOauthInput {
  # Session ID of the current OAuth session.
  sessionId: String!

  # Domain name of the Azure Tenant.
  tenantDomainName: String!

  # Authorization code received after the OAuth consent flow. For more information, see https://auth0.com/docs/flows/authorization-code-flow.
  authorizationCode: String!

  # Redirect URL used in the OAuth flow.
  redirectUrl: String!

  # Features enabled on the Azure Cloud Account.
  features: [CloudAccountFeature!]!

  # Client ID of the application. The appID is empty if the tenant uses a Rubrik app or a custom app.
  appId: String

  # Client secret key of the application. The appSecretKey is empty if the tenant uses a Rubrik app or a custom app.
  appSecretKey: String

  # Specifies whether to skip permission checks of Azure subscriptions required for addition.
  shouldSkipPermissionChecks: Boolean!

  # Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud.
  azureCloudType: AzureCloudType = AZUREPUBLICCLOUD

  # The resource that requires OAuth access.
  resource: AzureOauthResource = AZURE_RESOURCE_MANAGER

  # Ensures that only basic OAuth is performed. The session will be stored in Rubrik, however, no additional information (such as list of subscriptions) is returned.
  performBasicOauth: Boolean = false

  # Indicates whether the OAuth refresh token should be retained for future use.
  shouldKeepRefreshToken: Boolean = false
}
# Response of the operation to complete Azure Cloud Account OAuth.
type CompleteAzureCloudAccountOauthReply {
  # Specifies whether the OAuth authentication was completed successfully. When true, it means the authentication was successful.
  isSuccess: Boolean!

  # Subscriptions for which the OAuth user has read permission on Azure.
  subscriptions: [AzureCloudAccountSubscription!]!
}
# All valid compliance ranges in the reporting table.
enum ComplianceDuration {
  # Filter for compliance range is unspecified.
  COMPLIANCE_DURATION_UNSPECIFIED

  # Filters data for the past 12 months.
  LAST_12_MONTHS

  # Filters data for the past 24 hours.
  LAST_24_HOURS

  # Filters data for the past 30 days.
  LAST_30_DAYS

  # Filters data for the past 7 days.
  LAST_7_DAYS

  # Filters data for the past 90 days.
  LAST_90_DAYS

  # Filters data from the start of object protection.
  START_OF_PROTECTION
}
type ComplianceStatus {
  enumValue: ComplianceStatusEnum!
}
# The compliance status of the workload.
enum ComplianceStatusEnum {
  EMPTY

  # The workload is in compliance.
  IN_COMPLIANCE

  # Compliance is not applicable for the workload.
  NOT_APPLICABLE

  # Compliance status is not available for the workload.
  NOT_AVAILABLE

  # Workload does not have a compliance status.
  NULL

  # The workload is out of compliance.
  OUT_OF_COMPLIANCE

  # The workload is unprotected.
  UNPROTECTED
}
# Supported in v5.0+
type ComputeClusterDetail {
  # Required. Supported in v5.0+
  moid: String!
  computeClusterSummary: ComputeClusterSummary

  # Required. Supported in v5.0+
  hosts: [VmwareHostSummary!]!

  # Required. Supported in v5.0+
  virtualMachines: [VirtualMachineSummary!]!
}
# Supported in v5.0+
type ComputeClusterSummary {
  # Required. Supported in v5.0+
  datacenterId: String!

  # Supported in v5.1+
  # Current Drs Status of Cluster.
  drsStatus: Boolean

  # Supported in v5.1+
  # List of Versions of ESXi Hosts in Compute Cluster.
  hostVersions: [String!]!

  # Supported in v5.1+
  lastUsedFqdn: String
  effectiveSlaDomainId: String
  effectiveSlaDomainName: String

  # Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
  effectiveSlaDomainPolarisManagedId: String
  effectiveSlaHolder: EffectiveSlaHolder

  # ID of the object from which the effective SLA domain is inherited
  effectiveSlaSourceObjectId: String

  # Name of the object from which the effective SLA domain is inherited
  effectiveSlaSourceObjectName: String
  ioFilterStatus: IoFilterStatus
  slaAssignable: SlaAssignable
}
# Configuration protection information.
type ConfigProtectionInfo {
  # The cluster UUID.
  clusterUuid: UUID!

  # Status of configuration protection.
  configProtectionStatus: ConfigProtectionStatus!

  # Type of upload location.
  uploadLocation: UploadLocationType!

  # The replication target name of the upload location.
  replicationTargetName: String

  # Date and time of last successful backup.
  lastSuccessfulBackupTime: DateTime

  # CA certificate UUID used for setup.
  caCertUuid: UUID
}
# Represents configuration protection status values.
enum ConfigProtectionStatus {
  # Configuration backup complete.
  BACKUP_COMPLETED

  # Configuration backup failed.
  BACKUP_FAILED

  # Configuration backup completed with warnings.
  BACKUP_PARTIALLY_COMPLETED

  # Configuration backup is in progress.
  BACKUP_RUNNING

  # Configuration protection is not set up.
  NOT_SETUP

  # Configuration restore complete.
  RESTORE_COMPLETED

  # Configuration restore failed.
  RESTORE_FAILED

  # Configuration restore completed with warnings.
  RESTORE_PARTIALLY_COMPLETED

  # Configuration restore is in progress.
  RESTORE_RUNNING

  # Configuration set up is complete, ready for configuration protection.
  SETUP_COMPLETED

  # Unable to complete configuration set up.
  SETUP_FAILED

  # Configuration set up is in progress.
  SETUP_RUNNING
}
# Supported in v7.0+
# Supported configuration types for backup and restore.
enum ConfigurationTypes {
  # Adaptive backup configuration.
  CONFIGURATION_TYPES_ADAPTIVE_BACKUP

  # Archival locations configuration.
  CONFIGURATION_TYPES_ARCHIVAL_LOCATIONS

  # Cluster settings configuration.
  CONFIGURATION_TYPES_CLUSTER_SETTINGS

  # Guest OS settings configuration.
  CONFIGURATION_TYPES_GUEST_OS_SETTINGS

  # KMIP settings configuration.
  CONFIGURATION_TYPES_KMIP_SETTINGS

  # LDAP servers configuration.
  CONFIGURATION_TYPES_LDAP_SERVERS

  # MSSQL defaults configuration.
  CONFIGURATION_TYPES_MSSQL_DEFAULTS

  # NAS hosts configuration.
  CONFIGURATION_TYPES_NAS_HOSTS

  # Network throttling configuration.
  CONFIGURATION_TYPES_NETWORK_THROTTLING

  # Notification settings configuration.
  CONFIGURATION_TYPES_NOTIFICATION_SETTINGS

  # Organizations configuration.
  CONFIGURATION_TYPES_ORGANIZATIONS

  # Replication targets configuration.
  CONFIGURATION_TYPES_REPLICATION_TARGETS

  # Reports configuration.
  CONFIGURATION_TYPES_REPORTS

  # Roles configuration.
  CONFIGURATION_TYPES_ROLES

  # SLA domains configuration.
  CONFIGURATION_TYPES_SLA_DOMAINS

  # SMTP settings configuration.
  CONFIGURATION_TYPES_SMTP_SETTINGS

  # SNMP settings configuration.
  CONFIGURATION_TYPES_SNMP_SETTINGS

  # Syslog settings configuration.
  CONFIGURATION_TYPES_SYSLOG_SETTINGS

  # Users configurations.
  CONFIGURATION_TYPES_USERS

  # Vcenter servers configuration.
  CONFIGURATION_TYPES_VCENTER_SERVERS

  # Windows and Unix hosts configuration.
  CONFIGURATION_TYPES_WIN_AND_UNIX_HOSTS
}
# Input for configuring SAP HANA database for restore.
input ConfigureSapHanaRestoreInput {
  # Required. ID of the target SAP HANA database to be configured.
  id: String!

  # Required. The object containing configuration related metadata for the source SAP HANA database.
  sourceConfig: SapHanaRestoreSourceConfigInput!
}
# Supported in v5.2+
# Specifies whether the SLA Domain is used for protection or retention.
enum ConfiguredSlaType {
  CONFIGURED_SLA_TYPE_PROTECTION_SLA
  CONFIGURED_SLA_TYPE_RETENTION_SLA
}
# Connected Through Enum Type.
enum ConnectedThroughEnumType {
  # CDM.
  CDM

  # NAS-DA.
  NAS_DA

  # No associated fileset.
  SRC_UNSPECIFIED
}
# Additional information about the connection status of the replication pair Rubrik clusters.
type ConnectionStatusDetails {
  # Connection between source cluster and Rubrik (connected, disconnected, or not added).
  sourceAndRubrik: ClusterConnectionStatus!

  # Connection between target cluster and Rubrik (connected, disconnected, or not added).
  targetAndRubrik: ClusterConnectionStatus!

  # Connection between source and target Rubrik clusters (connected or disconnected).
  sourceAndTarget: ConnectionStatusType!
}
# The connection status type enum.
enum ConnectionStatusType {
  # The connection has been connected.
  CONNECTED

  # The connection has been disconnected.
  DISCONNECTED
}
# Tells whether snapshot has app or crash consistency.
enum ConsistencyLevelEnum {
  APP_CONSISTENT
  CRASH_CONSISTENT
  FILE_SYSTEM_CONSISTENT
  INCONSISTENT
  UNKNOWN
  VSS_CONSISTENT
}
# The contact folder to be restored.
input ContactFolderInfo {
  # ID of the contact folder to be restored.
  contactFolderId: String!

  # ID of the snapshot from which to restore.
  snapshotId: UUID!

  # Num of the snapshot from which to restore.
  snapshotNum: Int!
}
# The contact to be restored.
input ContactInfo {
  # ID of the contact to be restored.
  contactId: String!

  # ID of the snapshot from which to restore.
  snapshotId: UUID!

  # Number of the snapshot from which to restore.
  snapshotNum: Int!
}
# The contacts to be restored.
input ContactsRestoreConfig {
  # Contact(s) to restore in this job.
  contactsToRestore: [ContactInfo!]!

  # Contact folder(s) to restore in this job.
  contactFoldersToRestore: [ContactFolderInfo!]!
}
# Parameters for contacts search.
input ContactsSearchFilter {
  # Filters on keywords appearing in the contact name, company name, emails or addresses.
  searchKeywordFilter: ContactsSearchKeywordFilter

  # Filters on object type (contact, folder, or all).
  searchObjectFilter: ContactsSearchObjectFilter

  # Parameters for using Lambda filters in the query.
  lambdaFilters: LambdaPathFilters
}
# Contacts search keyword.
input ContactsSearchKeywordFilter {
  # Filters on a search keyword.
  searchKeyword: String = ""
}
# Contacts search object type.
input ContactsSearchObjectFilter {
  # Filters on object type (contact, folder, or all).
  searchObjectType: O365ContactsSearchObjectType = CONTACT
}
# A node in a help topic document tree.
type ContentNode {
  # Markup tag name.
  tag: String!

  # Text content of this node.
  text: String!

  # Attributes of this node.
  attributes: [ContentNodeAttribute!]!

  # Index of this node in the document tree.
  index: Int

  # Index of the parent of this node.
  parentIndex: Int
}
# The attributes of a content node.
type ContentNodeAttribute {
  # Attribute name.
  key: String!

  # Attribute value.
  value: String!
}
# Filters for the list of SLA Domains.
input ContextFilterInputField {
  # The SLA Domain field.
  field: String!

  # The text of the SLA Domain field.
  text: String!
}
enum ContextFilterTypeEnum {
  APPFLOWS_FAILOVER_TO_AWS
  APPFLOWS_FAILOVER_TO_CDM
  DEFAULT
}
# Represents the conversation contents to be restored.
input ConversationsRestoreConfig {
  SearchFilter: TeamsConversationsSearchFilterJson
  ChannelInfoForFullRestore: TeamsConvChannelInfo
  RefreshTokenEncrypted: String!
  O365AppID: String!
  ChannelsToRestore: [TeamsConvChannelInfo!]!
  ShouldRestoreFileAttachments: Boolean!
}
# Response for the query to retrieve the number of objects protected by the SLA Domains.
type CountOfObjectsProtectedBySLAsResult {
  # Number of objects protected by SLA Domains.
  slaObjectCounts: [SLAIdToObjectCount!]!
}
type Crawl {
  id: String!
  name: String!
  status: CrawlStatusEnum!
  progress: Float!
  startTime: Long!
  endTime: Long!
  filesTotal: Long!
  filesAnalyzeable: Long!
  filesAnalyzed: Long!
  filesWithHits: Long!
  analyzerResults: [AnalyzerResult!]!
  analyzerGroupResults: [AnalyzerGroupResult!]!
  totalHits: Int!
  failedObjectCount: Int!
  crawlObjConnection: CrawlObjConnection!
  crawlObj(snappableFid: String!): CrawlObj!
  fileResultConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String, filter: ListFileResultFiltersInput, sort: FileResultSortInput): FileResultConnection!
  user: User
  snappableTypeSummaries: [SnappableTypeSummary!]!
}
# Paginated list of Crawl objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CrawlConnection {
  # List of Crawl objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CrawlEdge!]!

  # List of Crawl objects.
  nodes: [Crawl!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Crawl objects matching the request arguments.
  count: Int!
}
# Wrapper around the Crawl object. This wrapper is used for pagination.
type CrawlEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Crawl object wrapped by this edge.
  node: Crawl!
}
type CrawlObj {
  crawlId: String!
  snapshotFid: String!
  snapshotTime: Long!
  status: SnappableCrawlStatus!
  progress: Float!
  startTime: Long!
  endTime: Long!
  filesTotal: Long!
  filesAnalyzeable: Long!
  filesAnalyzed: Long!
  filesWithHits: Long!
  analyzerResults: [AnalyzerResult!]!
  analyzerGroupResults: [AnalyzerGroupResult!]!
  error: String!
  totalHits: Int!
  fileResultConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String, filter: BrowseDirectoryFiltersInput, sort: FileResultSortInput, stdPath: String!): FileResultConnection!
  cluster: Cluster!
  snappable: HierarchyObject!
}
# Paginated list of CrawlObj objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CrawlObjConnection {
  # List of CrawlObj objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CrawlObjEdge!]!

  # List of CrawlObj objects.
  nodes: [CrawlObj!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of CrawlObj objects matching the request arguments.
  count: Int!
}
# Wrapper around the CrawlObj object. This wrapper is used for pagination.
type CrawlObjEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual CrawlObj object wrapped by this edge.
  node: CrawlObj!
}
enum CrawlStatusEnum {
  COMPLETE
  COMPLETE_WITH_FAIL
  IN_PROGRESS
  IN_PROGRESS_WITH_FAIL
}
# Input for creating an Active Directory Live Mount.
input CreateActiveDirectoryLiveMountInput {
  # Required. Configuration for the Live Mount request.
  config: ActiveDirectoryLiveMountConfigInput!

  # Required. ID of the snapshot to be used to create the Live Mount.
  id: String!
}
# Input for deleting an Active Directory Live Mount.
input CreateActiveDirectoryUnmountInput {
  # Required. ID of the Live Mount.
  id: String!
}
# Input for creating an AWS target mapping.
input CreateAutomaticAwsTargetMappingInput {
  # Field for specifying name of the target mapping.
  name: String!

  # Field for specifying cloud account ID.
  cloudAccountId: UUID!

  # Field for specifying AWS bucket name.
  bucketPrefix: String!

  # Field for specifying storage class of the target.
  storageClass: AwsStorageClass!

  # Field for specifying region of the target.
  region: AwsRegion!

  # Field for specifying KMS master key for encryption.
  kmsMasterKeyId: String

  # Field for specifying RSA key for encryption.
  rsaKey: String

  # Field for specifying whether consolidation is enabled or not.
  isConsolidationEnabled: Boolean!

  # Field for creating proxy settings.
  proxySettings: ProxySettingsInput

  # Field for specifying list cluster UUID of the target.
  clusterUuidList: [String!]

  # Field for creating AWS compute settings ID.
  awsComputeSettingsId: String
}
# Input for create an Azure target mapping.
input CreateAutomaticAzureTargetMappingInput {
  # Field for specifying name of the target mapping.
  name: String!

  # Name or prefix of the storage account.
  storageAccountName: String!

  # Access key of the Azure target.
  accessKey: String!

  # Prefix of the container inside storage account. 
  containerNamePrefix: String!

  # Cloud Account Id of the target subscription.
  cloudAccountId: UUID!

  # Instance type of the Azure target.
  instanceType: InstanceTypeEnum!

  # Field for specifying RSA key for encryption.
  rsaKey: String!

  # Compute settings of the Azure target.
  computeSettings: AzureCloudComputeSettingsInput

  # Field for creating proxy settings.
  proxySettings: ProxySettingsInput

  # Field for specifying list cluster UUID of the target.
  clusterUuidList: [String!]

  # Field for specifying whether consolidation is enabled or not.
  isConsolidationEnabled: Boolean!
}
# Input for creating RCS locations.
input CreateAutomaticRcsTargetMappingInput {
  # Name of the RCS location.
  name: String!

  # Region for the RCS location.
  region: RcsRegionEnumType!

  # RSA key for the RCS location.
  rsaKey: String

  # Tier for the RCS location.
  tier: RcsTierEnumType!

  # Immutability lock period in days.
  lockDurationDays: Long!

  # List of Rubrik cluster UUIDs.
  clusterUuidList: [String!]

  # IP mapping for each Rubrik cluster.
  ipMapping: [IpMappingInput!]

  # Specifies whether the proxy settings must be bypassed for  the RCV archival target.
  shouldBypassProxy: Boolean
}
# Input for creating an AWS account.
input CreateAwsAccountInput {
  # Name of the AWS account.
  name: String!

  # Description of the AWS account.
  description: String

  # Access key of the AWS account.
  accessKey: String!

  # Secret key of the AWS account.
  secretKey: String!
}
# CreateAwsClusterInput for Aws account.
input CreateAwsClusterInput {
  # Cloud account ID of the AWS account.
  cloudAccountId: String = ""

  # Create disk based or CCES.
  isEsType: Boolean = false

  # Flag to keep the cluster on failure.
  keepClusterOnFailure: Boolean = false

  # Aws region.
  region: String = ""

  # Disable API termination on AWS instances.
  disableApiTermination: Boolean = false

  # Cluster configuration to initialize cluster.
  clusterConfig: ClusterConfigInput

  # Virtual Machine configuration to create nodes.
  vmConfig: AwsVmConfig
}
# Cloud compute settings input for the AWS archival target.
input CreateAwsComputeSettingInput {
  # Name of the AWS cloud compute setting.
  name: String = ""

  # Subnet ID of the AWS target.
  subnetId: String = ""

  # VPC ID of the AWS target.
  vpcId: String = ""

  # Security Group ID of the AWS target.
  securityGroupId: String = ""

  # Cloud account ID of the AWS target.
  cloudAccountId: String = ""

  # AWS target region.
  region: AwsRegion = UNKNOWN_AWS_REGION

  # Specify if the security group is Rubrik SaaS Managed.
  isSecurityGroupPolarisManaged: Boolean = false

  # List of cluster interface CIDR.
  clusterInterfaceCidrs: [ClusterInfCidrsInput!] = []
}
# Input to create AWS Exocompute configurations.
input CreateAwsExocomputeConfigsInput {
  # Rubrik ID for cloud account.
  cloudAccountId: UUID!

  # List of Exocompute configurations for the cloud account.
  configs: [AwsExocomputeConfigInput!]!

  # Specifies whether to start Exocompute health check.
  triggerHealthCheck: Boolean = false
}
# AWS Exocompute Configs Create Response.
type CreateAwsExocomputeConfigsReply {
  # List of Exocompute configurations.
  configs: [AwsExocomputeGetConfigResponse!]! @deprecated(reason: "Deprecated in favor of BYOK8s, use exocomputeConfigs instead.")

  # List of Exocompute configurations.
  exocomputeConfigs: [AwsExocomputeGetConfigurationResponse!]!
}
# Input for creating an AWS Reader Target.
input CreateAwsReaderTargetInput {
  # Field for specifying name of the target.
  name: String!

  # Field for specifying cloud account ID.
  cloudAccountId: UUID!

  # Field for specifying AWS bucket name.
  bucketName: String!

  # Field for specifying storage class of the target.
  storageClass: AwsStorageClass!

  # Field for specifying region of the target.
  region: AwsRegion!

  # Field for specifying KMS master key for encryption.
  kmsMasterKeyId: String

  # Field for specifying RSA key for encryption.
  rsaKey: String

  # Field for specifying a password for encrypting the AWS location contents.
  encryptionPassword: String

  # Field for specifying cluster UUID of the target.
  clusterUuid: String!

  # Field for specifying whether consolidation is enabled or not.
  isConsolidationEnabled: Boolean!

  # Field for creating proxy settings.
  proxySettings: ProxySettingsInput

  # Field for creating AWS compute settings ID.
  awsComputeSettingsId: String

  # Field for specifying cloud compute Settings.
  cloudComputeSettings: AwsCloudComputeSettingsInput

  # Field for specifying retrieval tier for this target.
  awsRetrievalTier: AwsRetrievalTier

  # Field for specifying the metadata to be retrieved from a target.
  readerRetrievalMethod: ReaderRetrievalMethod!

  # Optional field for specifying an AWS S3 endpoint, for example a VPC endpoint. When not specified, the default, region-based S3 endpoint is used.
  s3Endpoint: String

  # Optional field for specifying the KMS server endpoint when using KMS-based encryption, for example a VPC endpoint. When not specified, the default, region-based KMS server endpoint is used.
  kmsEndpoint: String

  # Compute proxy settings for AWS reader target.
  computeProxySettings: ProxySettingsInput

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean! = false
}
# Input for creating ab AWS archival target.
input CreateAwsTargetInput {
  # Name of the AWS archival target.
  name: String!

  # Cloud account ID of the AWS archival target.
  cloudAccountId: UUID!

  # Bucket name of the AWS archival target.
  bucketName: String!

  # Storage class of the AWS archival target.
  storageClass: AwsStorageClass!

  # Region of the AWS archival target.
  region: AwsRegion!

  # KMS master key ID to be used for encryption.
  kmsMasterKeyId: String

  # RSA key to be used for encryption.
  rsaKey: String

  # Encryption password for the AWS archival target.
  encryptionPassword: String

  # Cluster UUID to which the AWS archival target is associated.
  clusterUuid: String!

  # Flag to determine if consolidation is enabled in this AWS archival target.
  isConsolidationEnabled: Boolean!

  # Proxy settings of the AWS archival target.
  proxySettings: ProxySettingsInput

  # Compute settings ID of the AWS archival target.
  awsComputeSettingsId: String

  # Cloud compute settings of the AWS archival target.
  cloudComputeSettings: AwsCloudComputeSettingsInput

  # Compute Proxy settings of the AWS archival target.
  computeProxySettings: ProxySettingsInput

  # Retrieval tier of the AWS archival target.
  awsRetrievalTier: AwsRetrievalTier

  # AWS immutability settings.
  immutabilitySettings: AwsImmutabilitySettings

  # Optional field for specifying an AWS S3 endpoint, for example a VPC endpoint. When not specified, the default, region-based S3 endpoint is used.
  s3Endpoint: String

  # Optional field for specifying the KMS server endpoint when using KMS-based encryption, for example a VPC endpoint. When not specified, the default, region-based KMS server endpoint is used.
  kmsEndpoint: String

  # Specifies whether the proxy settings should be bypassed for creating this AWS archival target.
  bypassProxy: Boolean! = false
}
# Input for creating an Azure account.
input CreateAzureAccountInput {
  # Name of the Azure account.
  name: String!

  # Description of the Azure account.
  description: String

  # Subscription ID of the Azure account.
  subscriptionId: String!
}
# CreateAzureClusterInput for Azure account.
input CreateAzureClusterInput {
  # Customer Azure cloud account ID.
  cloudAccountId: String = ""

  # If cluster is CC-ES.
  isEsType: Boolean = false

  # Flag to keep the cluster on failure.
  keepClusterOnFailure: Boolean = false

  # Input cluster configuration.
  clusterConfig: ClusterConfigInput

  # Virtual Machine input configuration.
  vmConfig: AzureVmConfig
}
# Input for creating an Azure Reader Target.
input CreateAzureReaderTargetInput {
  # Field for specifying name of the target.
  name: String!

  # Field for specifying cluster UUID of the target.
  clusterUuid: UUID!

  # Field for specifying storage account name.
  storageAccountName: String!

  # Field for specifying access key of the target.
  accessKey: String!

  # Field for specifying container name of the target.
  containerName: String!

  # Field for specifying cloud account ID.
  cloudAccountId: UUID!

  # Field for specifying instance type of Azure target.
  instanceType: InstanceTypeEnum!

  # Field for specifying RSA key for encryption.
  rsaKey: String!

  # Field for Azure compute settings.
  computeSettings: AzureCloudComputeSettingsInput

  # Field for specifying compute settings.
  proxySettings: ProxySettingsInput

  # Field for specifying whether consolidation is enabled or not.
  isConsolidationEnabled: Boolean!

  # Field for specifying immutability settings of Azure target.
  immutabilitySettings: AzureImmutabilitySettings

  # Field for specifying the metadata to be retrieved from a target.
  readerRetrievalMethod: ReaderRetrievalMethod!

  # Retrieval tier to use for retrieving data from archive storage.
  retrievalTier: AzureRetrievalTier

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean! = false
}
# Response containing the Azure AAD application details.
type CreateAzureSaasAppAadReply {
  # App ID of the created Azure AAD application.
  clientId: UUID!
}
# Input for creating an Azure archival target.
input CreateAzureTargetInput {
  # Cluster UUID of the Azure archival target.
  clusterUuid: UUID!

  # Name of the Azure archival target.
  name: String!

  # Storage account name of the Azure archival target.
  storageAccountName: String!

  # Access key of the Azure archival target.
  accessKey: String!

  # Container name of the Azure archival target.
  containerName: String!

  # Cloud account ID of the Azure archival target.
  cloudAccountId: UUID!

  # Instance type of the Azure archival target.
  instanceType: InstanceTypeEnum!

  # RSA key of the Azure archival target for encryption.
  rsaKey: String!

  # Compute settings of the Azure archival target.
  computeSettings: AzureCloudComputeSettingsInput

  # Proxy settings of the Azure archival target.
  proxySettings: ProxySettingsInput

  # Flag to determine if consolidation is enabled.
  isConsolidationEnabled: Boolean!

  # Immutability settings of the Azure archival target.
  immutabilitySettings: AzureImmutabilitySettings

  # Retrieval tier to use for retrieving data from archive storage.
  retrievalTier: AzureRetrievalTier

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean! = false
}
# Input to create a storage setting for AWS.
input CreateCloudNativeAwsStorageSettingInput {
  name: String!
  cloudAccountId: UUID!
  bucketPrefix: String!
  storageClass: AwsStorageClass!
  region: AwsRegion
  kmsMasterKeyId: String
  cloudNativeLocTemplateType: CloudNativeLocTemplateType!
  bucketTags: TagsInput
}
# Response of the mutation to create a storage setting for AWS.
type CreateCloudNativeAwsStorageSettingReply {
  targetMapping: TargetMapping!
}
# Input for create storage settings for an account.
input CreateCloudNativeAzureStorageSettingInput {
  # Name of the storage setting.
  name: String!

  # Cloud Account Id of the target subscription.
  cloudAccountId: UUID!

  # Name or prefix of the storage account. This field can not be empty string and must contain only lowercase letters and numbers. For 'SOURCE_REGION' Template Type, this field must be less than 16 characters. Random UID of eight characters is appended to the prefix to create the actual storage accounts. For 'SPECIFIC_REGION' Template Type, this field must be less than 24 characters.
  storageAccountName: String!

  # Name of the container inside storage account. This field must be between 3 to 64 characters in length and must start with a letter or number, and can contain only lowercase letters, numbers, and the dash (-) characters.
  containerName: String!

  # Tags of the storage account.
  storageAccountTags: TagsInput

  # Region for the Storage Account. For 'SOURCE_REGION' Template Type, this field will be 'UNKNOWN_AZURE_REGION'. For 'SPECIFIC_REGION' Template Type, this field must be a azure region supporting GPV2, More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy#redundancy-in-the-primary-region.
  storageAccountRegion: AzureRegion

  # Storage Tier for the Storage Account. Only Cool, Hot storage tier are supported for now. More Info: https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-storage-tiers.
  storageTier: AzureStorageTier!

  # Redundancy type for the Storage Account. Some examples are: LRS, ZRS, GRS etc. More Info: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy.
  redundancy: AzureRedundancy!

  # Azure native subscription id.
  subscriptionNativeId: String!

  # Template type of the storage settings. Must be either SOURCE_REGION or SPECIFIC_REGION.
  cloudNativeLocTemplateType: CloudNativeLocTemplateType!

  # Information about the customer-managed key and key vault.
  cmkInfo: [AzureCmkInput!]

  # Cloud type of Azure cloud account.
  azureCloudType: AzureCloudType = AZUREPUBLICCLOUD
}
# Storage settings information for Azure.
type CreateCloudNativeAzureStorageSettingReply {
  targetMapping: TargetMapping!
}
# Input required to create a cloud-native label rule.
input CreateCloudNativeLabelRuleInput {
  # Type of managed object on which label rule will be applied.
  objectType: CloudNativeLabelObjectType!

  # Name of the label rule.
  labelRuleName: String!

  # Label key-value pair for label rule.
  label: LabelType!

  # Corresponds to the assignment type for the SLA.
  slaAssignType: TagRuleSlaAssignType!

  # Corresponds to optional global SLA Rubrik ID.
  slaId: UUID

  # Cloud native accounts on which label rule will be applied.
  cloudNativeAccountIds: CloudNativeIds

  # Specifies whether this label rule apply to all cloud accounts.
  applyToAllCloudAccounts: Boolean
}
# Status of the request to create a label rule. If the request succeeds, the status contains the ID of the new label rule.
type CreateCloudNativeLabelRuleReply {
  # ID of the new label rule.
  labelRuleId: String!
}
# Input for creating Rubrik Cloud Vault Azure storage settings.
input CreateCloudNativeRcvAzureStorageSettingInput {
  # Name of the storage setting.
  name: String!

  # Rubrik Cloud Vault location region. For source region template type, this field will be 'UNKNOWN_AZURE_REGION'. For specific region template type, this field must be an Azure region supported for RCV in COOL tier.
  region: AzureRegion!

  # Template type of the storage settings - SOURCE_REGION or SPECIFIC_REGION.
  cloudNativeLocTemplateType: CloudNativeLocTemplateType!
}
# Rubrik Cloud Vault storage settings information for Azure.
type CreateCloudNativeRcvAzureStorageSettingReply {
  # Rubrik Cloud Vault Azure storage setting.
  targetMapping: TargetMapping!
}
# Input required to create a cloud-native tag rule.
input CreateCloudNativeTagRuleInput {
  # Type of managed object on which tag rule will be applied.
  objectType: CloudNativeTagObjectType!

  # Name of the tag rule.
  tagRuleName: String!

  # Tag key-value pair for tag rule.
  tag: TagType!

  # Corresponds to the assignment type for the SLA.
  slaAssignType: TagRuleSlaAssignType!

  # Corresponds to optional global SLA Rubrik ID.
  slaId: UUID

  # Cloud native accounts on which tag rule will be applied.
  cloudNativeAccountIds: CloudNativeIds

  # Specifies whether this tag rule apply to all cloud accounts.
  applyToAllCloudAccounts: Boolean
}
# Status of the request to create a tag rule. If the request succeeds, the status contains the ID of the new tag rule.
type CreateCloudNativeTagRuleReply {
  # ID of the tag rule.
  tagRuleId: String!
}
# Input for cross-account OAuth registration.
input CreateCrossAccountRegOauthPayloadInput {
  # Fully qualified domain name of service provider RSC account.
  fqdn: String!
}
# Payload for cross-account OAuth registration.
type CreateCrossAccountRegOauthPayloadReply {
  # Payload for cross-account OAuth registration.
  oauthPayload: OauthRequestPayload
}
input CreateCustomAnalyzerInput {
  analyzerType: AnalyzerTypeEnum = UNDEFINED
  id: String = ""
  name: String = ""
  dictionaryCsv: String = ""
  dictionary: [String!] = []
  regex: String = ""

  # Represents the latest analyzer risk.
  analyzerRiskInstance: AnalyzerRiskInstanceInput

  # Represents risk associated with the given analyzer.
  risk: RiskLevelType = MEDIUM_RISK
}
# Input for creating a custom report.
input CreateCustomReportInput {
  # Name of the report.
  name: String!
  focus: ReportFocusEnum!

  # Chart configs for the report.
  charts: [ReportChartCreate!]

  # Table configs for the report.
  tables: [ReportTableCreate!]

  # Filters for the report data.
  filters: CustomReportFiltersConfig!

  # Specifies whether the report should be hidden from the gallery view.
  isHidden: Boolean = false

  # Specifies whether the report is auto-generated and not editable.
  isReadOnly: Boolean = false
}
# Metadata for rendering a custom report.
type CreateCustomReportReply {
  # ID of the custom report.
  id: Int!

  # Name of the custom report.
  name: String!

  # The metrics focus of the custom report.
  focus: ReportFocusEnum!

  # Specifies whether the report should be hidden from the gallery view.
  isHidden: Boolean!

  # Specifies whether the report is auto-generated and not editable.
  isReadOnly: Boolean!

  # The filters applied to the data in the report.
  filters: CustomReportFilters!

  # Time the report was created.
  createdAt: DateTime!

  # Time the report was last updated and saved.
  updatedAt: DateTime!

  # Time the report was last viewed or opened.
  viewedAt: DateTime!

  # Room of the report.
  room: String

  # The list of charts in the custom report.
  charts: [ReportChartType!]!

  # The list of tables in the custom report.
  tables: [ReportTableType!]!

  # The creator of the custom report.
  owner: User!

  # Date of the oldest sync for the report.
  oldestSyncDate: DateTime

  # Date of the most recent sync for the report.
  newestSyncDate: DateTime
  scheduledReportConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): ScheduledReportConnection!
}
# Input for creating Active Directory Domain Controller snapshot.
input CreateDomainControllerSnapshotInput {
  # Configuration for the on-demand backup.
  config: BaseOnDemandSnapshotConfigInput

  # Required. ID of the Active Directory Domain Controller.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
input CreateDownloadSnapshotForVolumeGroupInput {
  # Required. ID of snapshot.
  id: String!
}
input CreateExchangeSnapshotMountInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Configuration for the mount request.
  config: ExchangeMountSnapshotConfigInput!

  # Required. ID of the snapshot.
  id: String!
}
# Input for exporting an Oracle database excluding advanced options.
input CreateExportOracleDbInput {
  # Required. Configuration parameters for a job to export an Oracle database from a specified snapshot or timestamp.
  config: ExportOracleDbConfigInput!

  # Required. ID of the database to be exported.
  id: String!
}
# Input for V1CreateFailoverClusterApp.
input CreateFailoverClusterAppInput {
  # Required. Create configuration parameters for a failover cluster app.
  config: FailoverClusterAppConfigInput!
}
# Reply Object for CreateFailoverClusterApp.
type CreateFailoverClusterAppReply {
  output: FailoverClusterAppSummary
}
# Input for V1CreateFailoverCluster.
input CreateFailoverClusterInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Create configuration parameters for a failover cluster.
  config: FailoverClusterConfigInput!
}
# Reply Object for CreateFailoverCluster.
type CreateFailoverClusterReply {
  output: FailoverClusterDetail
}
# Creates a fileset job to take a backup.
input CreateFilesetSnapshotInput {
  # Configuration for the on-demand backup.
  config: BaseOnDemandSnapshotConfigInput

  # Required. ID of the Fileset.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
# Input for GCP Reader Target.
input CreateGcpReaderTargetInput {
  # Field for specifying cluster UUID of the target.
  clusterUuid: UUID!

  # Field for specifying name of the target.
  name: String!

  # Field for specifying region of the target.
  region: GcpRegion!

  # Field for specifying storage class of the target.
  storageClass: GcpStorageClass!

  # Field for specifying GCP bucket name.
  bucket: String!

  # Field for specifying encryption password.
  encryptionPassword: String!

  # Field for specifying service account JSON key.
  serviceAccountJsonKey: String!

  # Field for creating proxy settings.
  archivalProxySettings: ProxySettingsInput

  # Field for specifying the metadata to be retrieved from a target.
  readerRetrievalMethod: ReaderRetrievalMethod!

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean! = false
}
# Input for creating a GCP archival target.
input CreateGcpTargetInput {
  # Cluster UUID of the GCP archival target.
  clusterUuid: UUID!

  # Name of the GCP archival target.
  name: String!

  # Region of the GCP archival target.
  region: GcpRegion!

  # Storage class of the GCP archival target.
  storageClass: GcpStorageClass!

  # Bucket of the GCP archival target.
  bucket: String!

  # Encryption password for the GCP archival target.
  encryptionPassword: String!

  # Service account JSON key for the GCP archival target.
  serviceAccountJsonKey: String!

  # Proxy settings of the GCP archival target.
  archivalProxySettings: ProxySettingsInput

  # Specifies whether the proxy settings should be bypassed for creating this archival target location.
  bypassProxy: Boolean! = false
}
# Input for creating a new Glacier reader target.
input CreateGlacierReaderTargetInput {
  # Name of the target.
  name: String!

  # Cloud account ID.
  cloudAccountId: UUID!

  # Amazon Glacier vault name.
  vaultName: String!

  # Region of the target.
  region: AwsRegion!

  # Field for specifying a password for encrypting the Glacier location contents.
  encryptionPassword: String

  # Cluster UUID of the target.
  clusterUuid: String!

  # Retrieval tier for this target.
  retrievalTier: AwsRetrievalTier

  # Field for specifying the metadata to be retrieved from a target.
  readerRetrievalMethod: ReaderRetrievalMethod!
}
# Input to create SLA Domain.
input CreateGlobalSlaInput {
  # Name of the SLA Domain.
  name: String = ""

  # Description of the SLA Domain.
  description: String = ""

  # Snapshot schedule of the SLA Domain.
  snapshotSchedule: GlobalSnapshotScheduleInput

  # Replication specification of the SLA Domain.
  replicationSpecInput: ReplicationSpecInput

  # Retention limit for snapshots on the local Rubrik system. If none, they will remain as long as SLA requires.
  localRetentionLimit: SlaDurationInput

  # Backup Window specifications of first full backup for SLA Domain.
  firstFullBackupWindows: [BackupWindowInput!] = []

  # Backup Window specifications for SLA Domain.
  backupWindows: [BackupWindowInput!] = []

  # Log configuration of the SLA Domain.
  logConfig: LogConfig

  # Object-specific configuration of the SLA Domain.
  objectSpecificConfigsInput: ObjectSpecificConfigsInput

  # List of archival specifications for SLA Domain.
  archivalSpecs: [ArchivalSpecInput!] = []

  # Replication specifications of the SLA Domain.
  replicationSpecsV2: [ReplicationSpecV2Input!] = []

  # Object types of the SLA Domain.
  objectTypes: [SlaObjectType!] = []

  # Specifies if the SLA Domain to be created must be Retention Locked or not.
  isRetentionLockedSla: Boolean = false

  # Specifies the retention lock mode for the intended SLA Domain creation.
  retentionLockMode: RetentionLockMode = NO_MODE
}
input CreateGuestCredentialInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Object for guest OS credential definition.
  definition: GuestCredentialDefinitionInput!
}
# Supported in v5.0+
type CreateGuestCredentialReply {
  # Supported in v5.0+
  domain: String

  # Required. Supported in v5.0+
  id: String!

  # Base guest credential details.
  baseGuestCredentialDetail: BaseGuestCredentialDetail
}
# Input for initiating Live Mount for a Hyper-V virtual machine.
input CreateHypervVirtualMachineSnapshotMountInput {
  # Configuration for the mount request.
  config: HypervMountSnapshotJobConfigInput

  # Required. ID of Snapshot.
  id: String!
}
# Holds the input to a create integration request.
input CreateIntegrationInput {
  # The integration name.
  name: String!

  # The integration type.
  integrationType: IntegrationType!

  # The integration configuration.
  config: IntegrationConfigInput!
}
# Returned in response to a create integration request and holds the ID of the
# created integration.
type CreateIntegrationReply {
  # ID of the newly created integration.
  id: Long!
}
# Holds the input to a batch create integrations
# request.
input CreateIntegrationsInput {
  # The integrations.
  integrations: [CreateIntegrationInput!]!
}
# Returned in response to a create integrations request and holds the IDs of
# the created integrations.
type CreateIntegrationsReply {
  # The integration IDs.
  ids: [Long!]!
}
# A Set of fields needed to create Rubrik Kubernetes manifest.
input CreateK8sAgentManifestInput {
  # UUID of the Kubernetes cluster.
  clusterId: UUID!

  # Timeout for the SignedURL of Rubrik Kubernetes manifest in minutes.
  timeoutMinutes: Int!
}
# CreateK8sAgentManifest mutation reply.
type CreateK8sAgentManifestReply {
  # Kubernetes Agent manifest information.
  info: K8sAgentManifestInfo!
}
# Configuration of the Kubernetes cluster to onboard.
input CreateK8sClusterInput {
  # The ID of the CDM cluster for ON_PREM Kubernetes clusters.
  cdmClusterId: UUID

  # List of host IPs/hostnames of the Kubernetes nodes.
  hostList: [String!]!

  # Name of the Kubernetes cluster.
  name: String!

  # Port on the Kubernetes node for the Kubernetes Ingress Controller.
  port: Int!

  # Ports in the NodePort service range of the Kubernetes cluster.
  rbsPortRanges: [PortRange!]!

  # NodePort ranges dedicated for export operations.
  userDrivenPortRanges: [PortRange!]

  # KuprClusterType of the Kubernetes cluster.
  type: K8sClusterProtoType!

  # The proxy URL for the Kubernetes agent.
  proxyUrl: String
}
# Create Kubernetes cluster response.
type CreateK8sClusterReply {
  # The Kubernetes cluster ID created.
  clusterId: String!

  # The URL that allows you to download the yaml file for the Kubernetes Protection agent.
  yamlUrl: String!
}
# Configuration of the Kubernetes namespaces to be backed-up.
input CreateK8sNamespaceSnapshotsInput {
  # List of namespace IDs and corresponding SLA Domains.
  snapshotInput: [K8sNamespaceSnapshot!]!
}
# Input for creating manual target mapping.
input CreateManualTargetMappingInput {
  # Field for specifying name of the target mapping.
  name: String = ""

  # Field for specifying target type of the target mapping.
  type: TargetType = AWS

  # Field for specifying target and Rubrik cluster mapping.
  archivalLocationClusterMappings: [TargetToClusterMapping!] = []
}
# Input for creating a SQL Server Live Mount.
input CreateMssqlLiveMountInput {
  # Required. Configuration for the Live Mount.
  config: MountMssqlDbConfigInput!

  # Required. ID of the SQL Server database.
  id: String!
}
# Input for creating a SQL Server log shipping configuration.
input CreateMssqlLogShippingConfigurationInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. An object that contains the values of a log shipping configuration.
  config: MssqlLogShippingCreateConfigV2Input!

  # Required. ID of the primary database object.
  id: String!
}
# Input for creating a NFS Reader Target.
input CreateNfsReaderTargetInput {
  # Field for specifying name of the target.
  name: String!

  # Field for specifying cluster UUID of the target.
  clusterUuid: UUID!

  # Field for specifying the host of the NFS location.
  host: String!

  # Field for specifying the exported directory at the host of the NFS location.
  exportDir: String!

  # Field for specifying the version of NFS.
  nfsVersion: Int

  # Field for specifying the authentication type of NFS.
  nfsAuthType: AuthTypeEnum!

  # Field for specifying other NFS options.
  otherNfsOptions: String

  # Field for specifying file lock period, in seconds.
  fileLockPeriodInSeconds: Int!

  # Field for specifying destination folder of the NFS.
  destinationFolder: String!

  # Field for whether consolidation should be enabled or not for this target.
  isConsolidationEnabled: Boolean!

  # Field for specifying the encryption password.
  encryptionPassword: String

  # Field for specifying the metadata to be retrieved from a target.
  readerRetrievalMethod: ReaderRetrievalMethod!
}
# Input to create the NFS archival location.
input CreateNfsTargetInput {
  # Cluster UUID of the NFS archival location.
  clusterUuid: UUID!

  # Name of the NFS archival location.
  name: String!

  # Host IP address of the NFS archival location.
  host: String!

  # Export directory of the NFS archival location.
  exportDir: String!

  # Version of the NFS archival location.
  nfsVersion: Int

  # Authentication type of the NFS archival location.
  nfsAuthType: AuthTypeEnum!

  # Other options of the NFS archival location.
  otherNfsOptions: String

  # File lock period in seconds of the NFS archival location.
  fileLockPeriodInSeconds: Int!

  # Destination folder of the NFS archival location.
  destinationFolder: String!

  # Flag to determine if consolidation is enabled in the NFS archival location.
  isConsolidationEnabled: Boolean!

  # Encryption password for the NFS archival location.
  encryptionPassword: String
}
# Input for creating a Nutanix cluster.
input CreateNutanixClusterInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. IP address, natural ID of added cluster (since Prism central can manage multiple clusters), and credentials for Prism.
  nutanixClusterConfig: NutanixClusterConfigInput!
}
# Input for creating the Nutanix Prism Central object.
input CreateNutanixPrismCentralInput {
  # Configuration parameters for creating the Nutanix Prism Central object.
  prismCentralConfig: NutanixPrismCentralConfigInput!

  # A one-to-one mapping between each Prism Element and the corresponding CDM cluster to use while adding the Nutanix Prism Central object.
  prismElementCdmTuple: [PrismElementCdmTuple!]!
}
# Configuration for O365 Azure AD App creation flow completion.
input CreateO365AppCompleteInput {
  # ID of the created app.
  appClientId: String!

  # CSRF token for the setup flow.
  stateToken: String!

  # ID of the MSFT tenant for which the app was created.
  tenantId: String!
}
# Configuration for O365 Azure AD App creation kickoff.
input CreateO365AppKickoffInput {
  # UUID of the org.
  orgId: UUID!

  # Type of app to create.
  appType: String!
}
# O365 create app kickoff response.
type CreateO365AppKickoffResp {
  appClientId: String!
  csrfToken: String!
  o365TenantId: String!
}
# Input for creating an on-demand Db2 backup.
input CreateOnDemandDb2BackupInput {
  # Configuration for the on demand backup.
  config: BaseOnDemandSnapshotConfigInput

  # Required. ID assigned to a Db2 database object.
  id: String!
}
input CreateOnDemandExchangeDatabaseBackupInput {
  # Required. Configuration for the on-demand backup.
  config: ExchangeBackupJobConfigInput!

  # Required. ID of the Microsoft Exchange database.
  id: String!
}
# Reply to Create on-demand job request.
type CreateOnDemandJobReply {
  taskchainId: String!
  jobId: Long!
}
# Input for creating an on-demand SQL Server backup.
input CreateOnDemandMssqlBackupInput {
  # Required. Configuration for the on-demand backup.
  config: MssqlBackupJobConfigInput!

  # Required. ID of the Microsoft SQL database.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
# Input for creating an on-demand Nutanix backup.
input CreateOnDemandNutanixBackupInput {
  # Configuration for the on-demand backup.
  config: BaseOnDemandSnapshotConfigInput

  # Required. v5.0-v5.3: ID of the VM
  # v6.0-v8.0: ID of the VM.
  # v8.1+: ID of the virtual machine.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
# Input for creating an on-demand SAP HANA backup.
input CreateOnDemandSapHanaBackupInput {
  # Configuration for the on demand backup.
  config: BaseOnDemandSnapshotConfigInput

  # Required. ID assigned to a SAP HANA database object.
  id: String!
}
# Input for creating an on-demand SAP HANA storage snapshot.
input CreateOnDemandSapHanaStorageSnapshotInput {
  # Configuration for the on demand backup.
  config: BaseOnDemandSnapshotConfigInput

  # Required. ID assigned to a SAP HANA system object.
  id: String!
}
input CreateOnDemandVolumeGroupBackupInput {
  # Configuration for the on-demand backup. Configuration values are `volumeIdsIncludedInSnapshot`, which specifies the unique ID of each volume that is part of this snapshot of the Volume Group, and `slaID`, the ID of the SLA Domain for the snapshot.
  config: VolumeGroupOnDemandSnapshotConfigInput

  # Required. The ID of the Volume Group.
  id: String!
}
# Input for mounting an Oracle database excluding advanced options.
input CreateOracleMountInput {
  # Required. Configuration parameters for a job to Live Mount an Oracle database snapshot.
  config: MountOracleDbConfigInput!

  # Required. ID of the Oracle database.
  id: String!
}
input CreateOraclePdbRestoreInput {
  # Required. Configuration parameters for a job to restore PDBs on an Oracle database from a specified snapshot or timestamp.
  config: OraclePdbRestoreConfigInput!

  # Required. ID of the database on which PDBs are to be restored.
  id: String!
}
# Details for creating a new organization.
input CreateOrgInput {
  # Unique name ID of the organization.
  name: String!

  # Full name of the tenant organization.
  fullName: String!

  # Description for organization.
  description: String!

  # Use the SSO/LDAP configuration of the global organization or set the configuration specific to this organization.
  authDomainConfig: TenantAuthDomainConfig!

  # Enforce MFA for all users in the organization.
  shouldEnforceMfaForAll: Boolean!

  # Force organization to use envoy to connect their hosts.
  isEnvoyRequired: Boolean!

  # Allowed clusters for the organization.
  allowedClusters: [String!]!

  # Existing users to add to the tenant organization.
  existingUsers: [ExistingUserInput!]

  # Invitations to invite new users to the tenant organization.
  userInvites: [UserInviteInput!]

  # Permissions to be given to the org admin role.
  permissions: [PermissionInput!]!

  # Self-service permissions to be assigned to the organization.
  selfServicePermissions: [SelfServicePermissionInput!]!

  # Existing SSO groups to be authorized for this tenant organization.
  existingSsoGroups: [ExistingSsoGroupInput!]

  # New SSO groups to be authorized for this tenant organization.
  newSsoGroups: [NewSsoGroupInput!]

  # Specifies if service accounts are enabled for this organization.
  isServiceAccountEnabled: Boolean

  # Specifies cross-account capabilities enabled for this organization.
  crossAccountCapabilities: [CrossAccountCapability!]
}
# UUID of created organization.
type CreateOrgReply {
  # UUID of created organization.
  organizationId: String!
}
# Input required for generating a new authentication token for a user to switch organizations.
input CreateOrgSwitchSessionInput {
  # ID of the organization that the user is switching to.
  orgId: String!
}
# Reply for generating an authentication token to switch organizations.
type CreateOrgSwitchSessionReply {
  # Authentication token for the organization that the user is switching to.
  accessToken: String!
}
input CreatePolicyInput {
  id: String = ""
  name: String = ""
  description: String = ""
  colorEnum: ClassificationPolicyColor = UNKNOWN
  mode: ClassificationPolicyMode = DISCOVERY
  analyzerIds: [String!] = []
  updateName: Boolean = false
  updateDescription: Boolean = false
  updateMode: Boolean = false
  updateAnalyzerIds: Boolean = false
}
# Input for creating a RCS Reader Target.
input CreateRcsReaderTargetInput {
  # Field for specifying cluster UUID of the target.
  clusterUuid: UUID!

  # Field for specifying the name of reader location for RCS.
  readerLocationName: String!

  # Field for specifying the name of original reader location to which to connect as Reader.
  rcsArchivalLocationName: String!

  # Field for specifying the metadata to be retrieved from a target.
  readerRetrievalMethod: ReaderRetrievalMethod!
}
# Input to create RCS location.
input CreateRcsTargetInput {
  # Rubrik cluster UUID.
  clusterUuid: UUID!

  # Name of the RCS location.
  name: String!

  # Tier for the RCS location.
  tier: RcsTierEnumType!

  # Instance type of the RCS location.
  instanceType: InstanceTypeEnum!

  # RSA key for the RCS location.
  rsaKey: String!

  # Region for the RCS location.
  region: RcsRegionEnumType!

  # Space usage threshold of RCS location above which alert will be raised.
  spaceUsageAlertThreshold: Int!

  # Immutability lock period, in days.
  lockDurationDays: Long!

  # Specifies whether the proxy settings must be bypassed for  the RCV archival target.
  shouldBypassProxy: Boolean
}
# Input for creating Rubrik Cloud Vault locations.
input CreateRcvLocationsFromTemplateInput {
  # Name of the RCV location.
  name: String!

  # Region for the RCV location.
  region: RcsRegionEnumType!

  # Tier for the RCV location.
  tier: RcsTierEnumType!

  # Immutability lock period in days.
  lockDurationDays: Long!

  # List of Rubrik cluster UUIDs.
  clusterUuidList: [String!]

  # IP mapping for each Rubrik cluster.
  ipMapping: [IpMappingInput!]

  # Specifies whether the proxy settings must be bypassed for  the RCV archival target.
  shouldBypassProxy: Boolean

  # RSA key for the RCV location.
  rsaKey: String
}
# Input for adding private endpoint support to an RCV location.
input CreateRcvPrivateEndpointApprovalRequestInput {
  # Field for specifying location identifier of the target.
  locationId: UUID!

  # Field for specifying the Azure resource identifier for an RCV private endpoint.
  privateEndpointId: String!
}
# Required fields for adding private endpoint to RCV location.
type CreateRcvPrivateEndpointApprovalRequestReply {
  # Azure storage account identifier for the RCV location.
  storageAccountId: String!

  # Authentication token for approving request.
  requestMessage: String!
}
# Request to create a replication pair between two Rubrik clusters.
input CreateReplicationPairInput {
  # Gateway information of the source cluster when using the NAT setup type.
  sourceGateway: ReplicationGatewayInfo

  # Gateway information of the target cluster when using the NAT setup type.
  targetGateway: ReplicationGatewayInfo

  # Network interface for communication between the source and target clusters.
  targetNetworkInterface: NetworkInterfaceDetails

  # Specifies whether the replication pair is cross-account.
  isCrossAccount: Boolean = false

  # Source Rubrik cluster UUID.
  sourceClusterUuid: UUID!

  # Target Rubrik cluster UUID.
  targetClusterUuid: UUID!

  # NAT or Private replication setup type.
  setupType: ReplicationSetupType!
}
# Input for creating a S3Compatible Reader Target.
input CreateS3CompatibleReaderTargetInput {
  # Field for specifying cluster UUID of the target.
  clusterUuid: UUID!

  # Field for specifying name of the target.
  name: String!

  # Field for specifying access key of the target.
  accessKey: String!

  # Field for specifying the secret key of the target.
  secretKey: String!

  # Field for specifying the endpoint of the target.
  endpoint: String!

  # Field for specifying the bucket prefix of the S3Compatible target.
  bucketPrefix: String!

  # Field for specifying number of buckets.
  numberOfBuckets: Int!

  # Field for specifying encryption key.
  encryptionKeyInDer: String!

  # Field for whether consolidation should be enabled or not for this target.
  isConsolidationEnabled: Boolean!

  # Field for specifying whether to use system proxy or not.
  useSystemProxy: Boolean!

  # Field for specifying the metadata to be retrieved from a target.
  readerRetrievalMethod: ReaderRetrievalMethod!

  # Subtype of an S3-compatible target.
  subType: S3CompatibleSubType

  # Encryption password for the S3-compatible archival target.
  encryptionPassword: String

  # Deprecated: S3-compatible immutability settings is no longer used.
  immutabilitySettings: LocationImmutabilitySettings

  # Deprecated: IBM subtype location specific details is no longer used.
  ibmDetails: IbmCosDetails
}
# Input to create S3-compatible target.
input CreateS3CompatibleTargetInput {
  # Cluster UUID of the S3-compatible target.
  clusterUuid: UUID!

  # Name of the S3-compatible target.
  name: String!

  # Access key of the S3-compatible target.
  accessKey: String!

  # Secret key of the S3-compatible target.
  secretKey: String!

  # Endpoint of the S3-compatible target.
  endpoint: String!

  # Bucket prefix of the S3-compatible target.
  bucketPrefix: String!

  # Number of buckets of the S3-compatible target.
  numberOfBuckets: Int!

  # RSA key of the S3-compatible target for encryption.
  encryptionKeyInDer: String!

  # Specifies whether consolidation is enabled for the S3-compatible target.
  isConsolidationEnabled: Boolean!

  # Specifies whether system proxy will be used or not.
  useSystemProxy: Boolean!

  # Subtype of an S3-compatible target.
  subType: S3CompatibleSubType

  # Encryption password for the S3-compatible archival target.
  encryptionPassword: String

  # S3-compatible immutability settings.
  immutabilitySettings: LocationImmutabilitySettings

  # IBM subtype location specific details.
  ibmDetails: IbmCosDetails
}
# Input for refreshing a SAP HANA system.
input CreateSapHanaSystemRefreshInput {
  # Required. The ID of the SAP HANA system.
  id: String!
}
input CreateScheduledReportInput {
  # ID of the report for which a schedule needs to be created.
  reportId: Int!

  # Title of the report.
  title: String!

  # Time of the day for daily report delivery.
  dailyTime: LocalTime

  # Time of the day for weekly report delivery on the configured weekdays.
  weeklyTime: LocalTime

  # Date of the month for monthly report delivery.
  monthlyDate: Int

  # Time of the day for monthly report delivery on the configured monthly date.
  monthlyTime: LocalTime

  # List of Rubrik user IDs that are the intended recipients of the scheduled report.
  rubrikRecipientUserIds: [String!]!

  # List of email addresses of non-Rubrik user recipients of the scheduled report.
  nonRubrikRecipientEmails: [String!]!
  updateCreator: Boolean

  # List of weekdays for weekly schedule of reports.
  weeklyDays: [WeekDay!]

  # List of attachment types for report emails.
  attachmentTypes: [ReportAttachmentType!]
}
# Represents the response for creating a scheduled report.
type CreateScheduledReportReply {
  # Description of the newly created schedule.
  scheduledReport: ScheduledReport!
}
# Input parameters for creating service accounts.
input CreateServiceAccountInput {
  # Name of the service account.
  name: String!

  # Optional description of the service account.
  description: String

  # List of role IDs to assign to the service account.
  roleIds: [String!]!
}
# Service account details.
type CreateServiceAccountReply {
  # Client ID of the service account.
  clientId: String!

  # Client secret used to authenticate to the authorization server.
  clientSecret: String!

  # Name of the service account.
  name: String!

  # URI to retrieve the access token..
  accessTokenUri: String!
}
# Input for creating a Tape reader target.
input CreateTapeReaderTargetInput {
  # Field for specifying the cluster UUID for the archival location.
  clusterUuid: UUID!

  # Name of the reader Tape archival location.
  name: String!

  # IP address of the QStar server of the reader Tape archival location.
  hostName: String!

  # Port of the QStar server for the reader Tape archival location.
  hostPort: Int!

  # Integral volume for the reader Tape archival location.
  integralVolumeName: String!

  # Destination folder name for the reader Tape archival location.
  destinationFolderName: String!

  # Username for the reader Tape archival location.
  username: String!

  # User password for the reader Tape archival location.
  password: String!

  # Encryption password for the reader Tape archival location.
  encryptionPassword: String!

  # Field for specifying the metadata to be retrieved from a target.
  readerRetrievalMethod: ReaderRetrievalMethod!
}
# Input for creating a Tape archival location.
input CreateTapeTargetInput {
  # Field for specifying cluster UUID of the Tape archival location.
  clusterUuid: UUID!

  # Name of the Tape archival location.
  name: String!

  # IP address of the QStar server of the Tape archival location.
  hostName: String!

  # Port of the QStar server for the Tape archival location.
  hostPort: Int!

  # Integral volume for the Tape archival location.
  integralVolumeName: String!

  # Destination folder name for the Tape archival location.
  destinationFolderName: String!

  # Username for the Tape archival location.
  username: String!

  # User password for the Tape archival location.
  password: String!

  # Encryption password for the Tape archival location.
  encryptionPassword: String!
}
input CreateUserWithPasswordInput {
  # Email for new user.
  email: String = ""

  # Password for new user.
  password: String = ""

  # Role IDs to add to new user.
  roleIds: [String!] = []
}
# Instantly recover a vApp snapshot.
input CreateVappInstantRecoveryInput {
  # Required. Configuration to export the specified vApp snapshot.
  config: VappInstantRecoveryJobConfigInput!

  # Required. ID assigned to the vApp snapshot object.
  snapshotId: String!
}
# Instantly recover vApp snapshots in bulk.
input CreateVappsInstantRecoveryInput {
  # Required. Configuration to instantly recover specified vApp snapshots.
  inputs: [CreateVappInstantRecoveryInput!]!
}
# A list of async responses for the operation to instantly recover vApp snapshots from the Rubrik cluster.
type CreateVappsInstantRecoveryReply {
  # Responses of vApp snapshots instant recovery.
  responses: [AsyncRequestStatus!]!
}
input CreateVsphereAdvancedTagInput {
  # Required. Filter name and conditional logic for vSphere tags.
  filterInfo: FilterInfoInput!

  # Required. ID of the vCenter Server.
  id: String!
}
# Reply Object for CreateFilter.
type CreateVsphereAdvancedTagReply {
  output: FilterCreateResponse
}
# Input to add vSphere vCenter.
input CreateVsphereVcenterInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. The IP address and account credentials of the vCenter Server that is being added.
  vcenterDetail: VcenterConfigV2Input!
}
# Supported in v5.3+
type CreateVsphereVcenterReply {
  # Required. Supported in v5.3+
  # The ID of the vCenter server that controls the management of the virtual machine whose metadata will be refreshed.
  id: String!

  # Required. Specifies whether the new vCenter is a VMC instance.
  isVmc: Boolean!

  # Supported in v7.0+ An optional field that specifies whether HotAdd transport mode is enabled for On-Premise vCenter. When this value is `true`, HotAdd transport mode is enabled for this vCenter. When this value is `false`, HotAdd transport mode is not enabled for this vCenter. When this value is not specified, it indicates that this is an VMC vCenter.
  isHotAddProxyEnabledForOnPremVcenter: Boolean

  # Required. Supported in v5.3+
  asyncRequestStatus: AsyncRequestStatus
}
# Webhook configuration to add to an account.
input CreateWebhookInput {
  # A description of the webhook to be created.
  description: String

  # The Webhook server certificate that Rubrik uses to establish a TLS connection with the endpoint.
  serverCertificate: String

  # The ID of the service account attached to the webhook.
  serviceAccountId: String

  # The name of the webhook to be created.
  name: String!

  # The URL endpoint to the receiving application.
  url: URL!

  # A list of event and audit types to which the webhook is subscribed.
  subscriptionType: SubscriptionTypeInput!

  # A list of event and audit severities to which the webhook is subscribed.
  subscriptionSeverity: SubscriptionSeverityInput!

  # The application that will receive the webhook.
  providerType: ProviderType!

  # The authentication type and token to authenticate the endpoint.
  authInfo: AuthInfoInput
}
# The webhook that was created.
type CreateWebhookReply {
  # The webhook that was created.
  webhook: Webhook!
}
# Cross-account capability type.
enum CrossAccountCapability {
  # Cross-account capability unknown.
  CROSS_ACCOUNT_CAPABILITY_UNSPECIFIED

  # Replication as a service capability.
  REPLICATION_AS_A_SERVICE
}
# Certificate Signing Request (CSR) information.
type Csr {
  # Name of the Certificate Signing Request.
  name: String!

  # Hostnames for the Certificate Signing Request.
  hostnames: [String!]!

  # ID of the Certificate Signing Request.
  csrId: Long!

  # Content of the Certificate Signing Request.
  csr: String!

  # Email of the user who created the Certificate Signing Request.
  creatorEmail: String!

  # Creation timestamp of the Certificate Signing Request.
  createdAt: DateTime

  # Organization of the Certificate Signing Request.
  organization: String!

  # Organizational Unit of the Certificate Signing Request.
  organizationUnit: String!

  # Country of the Certificate Signing Request.
  country: String!

  # State of the Certificate Signing Request.
  state: String!

  # City of the Certificate Signing Request.
  city: String!

  # Email of the Certificate Signing Request.
  email: String!

  # Surname of the Certificate Signing Request.
  surname: String!

  # User ID of the Certificate Signing Request.
  userId: String!

  # The FID of the Certificate Signing Request.
  csrFid: UUID!
}
# Paginated list of Csr objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type CsrConnection {
  # List of Csr objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [CsrEdge!]!

  # List of Csr objects.
  nodes: [Csr!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Csr objects matching the request arguments.
  count: Int!
}
# Wrapper around the Csr object. This wrapper is used for pagination.
type CsrEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Csr object wrapped by this edge.
  node: Csr!
}
# Current rolling upgrade node status information.
type CurrentStateInfo {
  # Current stage.
  currentState: String!

  # Current task index in stage.
  currentTaskIndex: String!

  # Current task name.
  currentTaskName: String!

  # Current task result.
  result: String!

  # Pending stages.
  pendingStates: [String!]!

  # Completed stages.
  completedStates: [String!]!

  # Current status.
  status: StatusResponse
}
type CustomAnalyzerMatch {
  startIndex: Int!
  endIndex: Int!
}
# The custom authentication header key and value to authenticate the endpoint.
input CustomHeader {
  # The custom authentication header's key.
  headerKey: String!

  # The custom authentication header's value.
  headerValue: String!
}
input CustomReportCreate {
  # Name of the report.
  name: String!
  focus: ReportFocusEnum!

  # Chart configs for the report.
  charts: [ReportChartCreate!]

  # Table configs for the report.
  tables: [ReportTableCreate!]

  # Filters for the report data.
  filters: CustomReportFiltersConfig!

  # Specifies whether the report should be hidden from the gallery view.
  isHidden: Boolean = false

  # Specifies whether the report is auto-generated and not editable.
  isReadOnly: Boolean = false
}
# Filter configs for a report.
type CustomReportFilters {
  # List of activity object types to filter on.
  activityObjectType: [ActivityObjectTypeEnum!]

  # List of snappable types to filter on.
  objectType: [ObjectTypeEnum!]

  # List of activity statuses to filter on.
  lastActivityStatus: [ActivityStatusEnum!]

  # List of activity types to filter on.
  lastActivityType: [ActivityTypeEnum!]

  # List of cluster types to filter on.
  clusterType: [ClusterTypeEnum!]

  # List of clusters to filter on.
  cluster: [Cluster!]

  # Start and end time range to filter data on.
  timeRange: GenericTimeRange

  # The time range for SLA Domain compliance report.
  slaTimeRange: SlaComplianceTimeRange

  # List of organization IDs to filter on.
  orgId: [String!]

  # List of managed ids to filter data on.
  managedId: [String!]

  # Anomalous value to filter data on.
  isAnomaly: Boolean
  searchTerm: String
  complianceStatus: [ComplianceStatusEnum!]
  protectionStatus: [ProtectionStatusEnum!]
  failoverStatus: [FailoverStatusEnum!]
  failoverType: FailoverTypeEnum
  source: [String!]
  targetSite: [String!]

  # List of object types to filter on for Audits.
  userAuditObjectType: [UserAuditObjectTypeEnum!]

  # List of user audit types to filter on.
  userAuditType: [UserAuditTypeEnum!]

  # List of user audit status to filter on.
  userAuditStatus: [UserAuditStatusEnum!]
  replicationSource: [String!]
  clusterLocation: [String!]
  taskCategory: [String!]
  taskStatus: [String!]
  taskType: [String!]

  # List of policy IDs to filter on.
  policyId: [String!]
  sonarObjectTypes: [HierarchyObjectTypeEnum!]

  # Whether to apply whitelists for the report.
  shouldApplyWhitelists: Boolean!

  # The date for the report.
  date: DateTime
  slaDomain: [SlaDomain!]
}
input CustomReportFiltersConfig {
  activityObjectType: [ActivityObjectTypeEnum!]

  # List of snappable types to filter on.
  objectType: [ObjectTypeEnum!]

  # List of workload types to exclude. This should NOT be specified along with objectType.
  excludedObjectTypes: [ObjectTypeEnum!]

  # List of activity types to filter on.
  lastActivityStatus: [ActivityStatusEnum!]

  # List of activity types to filter on.
  lastActivityType: [ActivityTypeEnum!]

  # List of sla domain ids to filter on.
  slaDomainId: [String!]

  # List of cluster types to filter on.
  clusterType: [ClusterTypeEnum!]

  # List of cluster ID to filter on.
  clusterId: [UUID!]

  # Start and end time range to filter data on.
  timeRange: GenericTimeRangeInput
  slaTimeRange: SlaComplianceTimeRange

  # List of organization IDs to filter on.
  orgId: [String!]

  # List of managed ids to filter data on.
  managedId: [String!]

  # Whether the snapshot is anomalous or not.
  isAnomaly: Boolean
  searchTerm: String
  complianceStatus: [ComplianceStatusEnum!]
  protectionStatus: [ProtectionStatusEnum!]
  failoverStatus: [FailoverStatusEnum!]
  failoverType: FailoverTypeEnum
  source: [String!]
  targetSite: [String!]

  # List of object types to filter on for Audits.
  userAuditObjectType: [UserAuditObjectTypeEnum!]

  # List of user audit types to filter on.
  userAuditType: [UserAuditTypeEnum!]

  # List of user audit status to filter on.
  userAuditStatus: [UserAuditStatusEnum!]
  replicationSource: [String!]
  clusterLocation: [String!]
  taskCategory: [String!]
  taskStatus: [String!]
  taskType: [String!]

  # List of policy IDs to filter on.
  policyId: [String!]
  sonarObjectTypes: [HierarchyObjectTypeEnum!]

  # Whether to apply whitelists for the report.
  shouldApplyWhitelists: Boolean

  # The date for the report.
  date: DateTime
}
# AWS customer created permission policy details.
type CustomerManagedPolicy {
  # Feature associated with the policy.
  feature: CloudAccountFeature!

  # Custom name of the policy to be created in AWS.
  policyName: String!

  # Policy document JSON string to be used as policy body in AWS.
  policyDocumentJson: String!
}
# A daily summary of Ransomware Investigation results across all workloads.
type DailyAnalysisDetails {
  # The count of suspicious files.
  suspiciousFileCount: Long!

  # The count of files created.
  createdFileCount: Long!

  # The count of files deleted.
  deletedFileCount: Long!

  # The count of files modified.
  modifiedFileCount: Long!

  # The number of suspicious bytes.
  suspiciousDataBytes: Long!

  # The number of created bytes.
  createdDataBytes: Long!

  # The number of deleted bytes.
  deletedDataBytes: Long!

  # The number of modified bytes.
  modifiedDataBytes: Long!

  # The number of anomaly events generated.
  anomalyEventCount: Long!

  # The day for which the Ransomware Investigation results were recorded.
  # The value is formatted using the ISO 8601 standard and
  # appears as YYYY-MM-DD.
  day: String!
}
# A daily recurrence pattern (e.g. every 3 days).
type DailyRecurrencePattern {
  # The interval at which the recurrence applies.
  interval: Int!
}
# Daily snapshot schedule.
type DailySnapshotSchedule {
  # Basic daily snapshot schedule.
  basicSchedule: BasicSnapshotSchedule
}
# Daily snapshot schedule.
input DailySnapshotScheduleInput {
  # Basic daily snapshot schedule.
  basicSchedule: BasicSnapshotScheduleInput
}
# Supported in v5.0+
type DataCenterSummary {
  # Supported in v5.0
  effectiveSlaDomainId: String

  # Supported in v5.0
  effectiveSlaDomainName: String

  # Supported in v5.0
  # Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
  effectiveSlaDomainPolarisManagedId: String

  # Supported in v5.0
  # ID of the object from which the effective SLA domain is inherited
  effectiveSlaSourceObjectId: String

  # Supported in v5.0
  # Name of the object from which the effective SLA domain is inherited
  effectiveSlaSourceObjectName: String

  # Supported in v5.0+
  vcenterId: String
  effectiveSlaHolder: EffectiveSlaHolder
  slaAssignable: SlaAssignable
}
enum DataGovFileMode {
  DIRECTORY
  FILE
  SYMLINK
  UNKNOWN
}
# TODO: SPARK-150447 - Deprecate this enum to use managed object type
# Filters objects by object type.
# Note: All the object types, except CDM, are granular object types.
enum DataGovObjectType {
  # Represents an Azure-native managed disk.
  AZURE_NATIVE_MANAGED_DISK

  # Represents Microsoft Azure native root.
  AZURE_NATIVE_ROOT

  # Represents an Azure-native virtual machine.
  AZURE_NATIVE_VIRTUAL_MACHINE

  # Represents Azure common resource group.
  AZURE_RESOURCE_GROUP

  # Represents Azure subscription.
  AZURE_SUBSCRIPTION

  # Represents all the object types that belong to CDM. This is the default
  # value and is added for maintaining backward compatability.
  CDM

  # Represents Rubrik CDM cluster.
  CDM_CLUSTER

  # Represents NAS Cloud Direct objects.
  CLOUD_DIRECT_NAS_EXPORT

  # Represents Azure Cloud tag rule.
  CLOUD_NATIVE_TAG_RULE

  # Represents Hyper-V cluster.
  HYPERV_CLUSTER

  # Represents Hyper-V root.
  HYPERV_ROOT

  # Represents HyperV SCVMM.
  HYPERV_SCVMM

  # Represents HyperV Server.
  HYPERV_SERVER

  # Represents Hyper-V Virtual Machine objects.
  HYPERV_VIRTUAL_MACHINE

  # Represents Linux Fileset objects.
  LINUX_FILESET

  # Represents Linux host root.
  LINUX_HOST_ROOT

  # Represents MSSQL Database.
  MSSQL_DATABASE

  # Represents MSSQL Root.
  MSSQL_ROOT

  # Represents RSC NAS Filesets.
  NAS_FILESET

  # Represents Nutanix cluster.
  NUTANIX_CLUSTER

  # Represents Nutanix root.
  NUTANIX_ROOT

  # Represents Nutanix Virtual Machine objects.
  NUTANIX_VIRTUAL_MACHINE

  # Represents O365 group.
  O365_GROUP

  # Represents O365 OneDrive objects.
  O365_ONEDRIVE

  # Represents O365 organization.
  O365_ORGANIZATION

  # Represents Microsoft Office 365 root.
  O365_ROOT

  # Represents O365 SharePoint Drive objects.
  O365_SHAREPOINT_DRIVE

  # Represents O365 SharePoint Site objects.
  O365_SHAREPOINT_SITE

  # Unknown object type.
  OBJECT_TYPE_UNSPECIFIED

  # Represents Physical host.
  PHYSICAL_HOST

  # Represents Share Fileset objects.
  SHARE_FILESET

  # Represents VMware Data Center.
  VMWARE_DATACENTER

  # Represents VMware Host.
  VMWARE_HOST

  # Represents VMware resource pool.
  VMWARE_RESOURCE_POOL

  # Represents VMware Tag Category.
  VMWARE_TAG_CATEGORY

  # Represents Volume Group objects.
  VOLUME_GROUP

  # Represent VMWARE compute cluster.
  VSPHERE_COMPUTE_CLUSTER

  # Represents VMWARE VSPHERE_DATACENTER_FOLDER.
  VSPHERE_DATACENTER_FOLDER

  # Represents VMWARE VSPHERE_FOLDER.
  VSPHERE_FOLDER

  # Represents vSphere root.
  VSPHERE_ROOT

  # Represents VSPHERE VMWARE_TAG.
  VSPHERE_TAG

  # Represents VMWARE VSPHERE_VCENTER.
  VSPHERE_VCENTER

  # Represents vSphere Virtual Machine objects.
  VSPHERE_VIRTUAL_MACHINE

  # Represents Windows Fileset objects.
  WINDOWS_FILESET

  # Represents Windows host root.
  WINDOWS_HOST_ROOT
}
enum DataGovOsType {
  LINUX
  NONE
  WINDOWS
}
enum DataGovShareType {
  NFS
  SMB
  UNKNOWN_SHARE_TYPE
}
# Supported in v6.0+
type DataGuardGroupMember {
  # Required. Supported in v6.0+
  # Unique name of the member Oracle database.
  dbUniqueName: String!

  # Supported in v6.0+
  # Rubrik ID of the RAC on which this database is hosted. This field is empty when the database is not hosted on a RAC environment.
  racId: String

  # Supported in v6.0+
  # Cluster name assigned to the Oracle RAC.
  racName: String

  # Required. Supported in v6.0+
  # Current role of the member Oracle database.
  role: String!

  # Supported in v6.0+
  # Rubrik ID of the standalone Oracle host on which this database is hosted. This field is empty when the database is not hosted on a standalone system.
  standaloneHostId: String

  # Supported in v6.0+
  # Name of the standalone Oracle database host.
  standaloneHostName: String
}
# Data Guard type of the Oracle database.
enum DataGuardType {
  # An Oracle Data Guard group.
  DATA_GUARD_GROUP

  # An Oracle Data Guard group member.
  DATA_GUARD_MEMBER

  # An Oracle database that is not a Data Guard group member.
  NON_DATA_GUARD

  # Unrecognized Oracle Data Guard type.
  UNRECOGNIZED_DATA_GUARD_TYPE
}
# Data Location.
type DataLocation {
  # ID of the location.
  id: String!

  # Indicates whether the snapshots is retained beyond its expiration date for security reasons.
  createDate: DateTime!

  # Specifies if the data location is active.
  isActive: Boolean!

  # Specifies if the snapshot is archived.
  isArchived: Boolean!

  # Specifies the type of data location.
  type: DataLocationName!

  # Rubrik cluster UUID.
  clusterUuid: UUID!

  # The name of the data location.
  name: String!
}
# Specifies the data location type.
enum DataLocationName {
  # Azure Location.
  AZURE

  # Cleversafe Location.
  CLEVERSAFE
  CLOUD_NATIVE_AWS
  CLOUD_NATIVE_GCP

  # Dell Ecs Location.
  DELLECS

  # Glacier Location.
  GLACIER

  # Google Location.
  GOOGLE

  # HDS Location.
  HDS

  # Ibm Cos Location.
  IBMCOS
  LOCAL

  # NetApp SG Location.
  NETAPPSG

  # NFS Location.
  NFS

  # Qstar location.
  QSTAR

  # Rehydrated Location.
  REHYDRATED
  REPLICATION_OFF
  REPLICATION_POLARIS_SOURCE
  REPLICATION_SOURCE
  REPLICATION_SOURCE_AND_TARGET
  REPLICATION_TARGET

  # S3 location.
  S3

  # S3Compatible Location.
  S3_COMPATIBLE

  # Scality Location.
  SCALITY
}
# The supported Rubrik cluster-specific information.
type DataLocationSupportedCluster {
  # Name of the supported Rubrik cluster.
  name: String!

  # UUID of the supported Rubrik cluster.
  uuid: String!

  # Version of the supported Rubrik cluster.
  version: String!

  # API version of the supported Rubrik cluster.
  apiVersion: String!
}
# Supported in v5.0+
type DataStoreSummary {
  # Supported in v5.0+
  capacity: Long

  # Supported in v5.0+
  dataCenterName: String

  # Supported in v5.0+
  dataStoreType: String

  # Required. Supported in v5.0+
  id: String!

  # Supported in v5.0+
  isLocal: Boolean

  # Supported in v5.0+
  name: String
}
# All data types in the reporting table.
enum DataTypeEnum {
  BOOLEAN
  BYTE
  DATE_TIME

  # Compliance range filter data type.
  FILTER_COMPLIANCE_RANGE
  FILTER_DATE_RANGE
  FLOAT
  INTEGER
  LONG
  STRING
  URL
}
# All reporting table schemas.
enum DataViewTypeEnum {
  BACKUP_COMPLIANCE
  CDM_UPGRADES

  # Global object database table schema.
  GLOBAL_OBJECT

  # Global object summary daily database table schema.
  GLOBAL_OBJECT_SUMMARY_DAILY

  # Global object summary monthly database table schema.
  GLOBAL_OBJECT_SUMMARY_MONTHLY
  INDEXING

  # LatestGlobalObjects database view schema.
  LATEST_GLOBAL_OBJECTS
  MONITORING_ALL
  MONITORING_CANCELED
  MONITORING_COMPLETED
  MONITORING_FAILED
  MONITORING_IN_PROGRESS
  MONITORING_RETRYABLE_CANCELED
  MONITORING_RETRYABLE_FAILED
  MONITORING_SCHEDULED
  MONITORING_TASK_COUNT_TIME_SERIES
  OBJECT_AUDIT_DETAIL
  OBJECT_AUDIT_LIST

  # Specifies all protection audit information for the single protected workload.
  OBJECT_PROTECTION_AUDIT_DETAIL

  # Specifies the latest protection audit information for each protected workload.
  OBJECT_PROTECTION_AUDIT_LIST

  # Specifies the protection audit information for all protected workloads.
  OBJECT_PROTECTION_AUDIT_LIST_EXPORT
  PROTECTION_TASK_DETAILS

  # Specifies the database schema for QAuth objects.
  QAUTH_OBJECTS

  #  Specifies the database schema for QAuth roles.
  QAUTH_ROLES
  SLA_AUDIT_DETAIL

  # Specifies all audit information for the single SLA Domain.
  SLA_AUDIT_DETAIL_NG
  SLA_AUDIT_LIST

  # Specifies the latest audit information for each SLA Domain.
  SLA_AUDIT_LIST_NG
  SLA_COMPLIANCE

  # Specifies the Protection Task Detail report information.
  TASK_DETAILS

  # Specifies the Threat Monitoring report list information.
  THREAT_MONITORING_LIST

  # Specifies the Threat Monitoring snapshot result information.
  THREAT_MONITORING_SNAPSHOT_RESULTS
}
# Supported in v5.3+
# Type of database.
enum DatabaseType {
  # The database is an Oracle database.
  DATABASE_TYPE_ORACLE

  # The database is a SQL Server database.
  DATABASE_TYPE_SQL
}
# Supported in v5.0+
type Datastore {
  # Required. Supported in v5.0+
  # Name for the ESXi host datastore.
  name: String!
}
# Rubrik CDM storage array details.
type DatastoreFreespaceThresholdType {
  # Datastore freespace threshold details.
  datastoreFreespaceThreshold: VmwareDatastoreFreespaceThreshold!

  # Details of a Rubrik cluster.
  cluster: Cluster!
}
# DateTime.
scalar DateTime
# Day of the month.
enum DayOfMonth {
  # Fifteenth day of the month.
  FIFTEENTH

  # First day of the month.
  FIRST_DAY

  # Last day of the month.
  LAST_DAY
}
# Day of the quarter.
enum DayOfQuarter {
  # First day of the quarter.
  FIRST_DAY

  # Last day of the quarter.
  LAST_DAY
}
# Specifies the day of the week.
enum DayOfWeek {
  # Indicates Friday.
  FRIDAY

  # Indicates Monday.
  MONDAY

  # Indicates Saturday.
  SATURDAY

  # Indicates Sunday.
  SUNDAY

  # Indicates Thursday.
  THURSDAY

  # Indicates Tuesday.
  TUESDAY

  # Indicates Wednesday.
  WEDNESDAY
}
# Day of the week.
type DayOfWeekOpt {
  # Day of the week.
  day: DayOfWeek!
}
# Day of the week.
input DayOfWeekOptInput {
  # Day.
  day: DayOfWeek = MONDAY
}
# Day of the year.
enum DayOfYear {
  # First day of the year.
  FIRST_DAY

  # Last day of the year.
  LAST_DAY
}
# Db2 workload related app metadata for a snapshot.
type Db2AppMetadata {
  # Backup ID set by database.
  backupId: String

  # The ID for the backup object stored in snapshot table.
  snapshotId: String

  # Snapshot type: Full/Incremental/Differential.
  snapshotType: Db2SnapshotType

  # Snapshot ID of the base backup.
  baseSnapshotId: String

  # Snapshot type for base back up: Full/Incremental/Differential.
  baseSnapshotType: Db2SnapshotType

  # Backup ID of the base backup.
  baseBackupId: String

  # Start time for the backup in DB.
  startTime: DateTime

  # End time for the backup in DB.
  endTime: DateTime

  # List of files backed up as a part of this backup.
  files: [Db2DataBackupFile!]!

  # Denotes whether the backup was triggered by Rubrik or by an external agent.
  isExternalBackup: Boolean!

  # Whether the backup is triggered by Rubrik and is OnDemand.
  isRubrikTriggeredOnDemandBackup: Boolean!

  # Approximate DB size just around the time the snapshot is taken.
  approximateDbSizeBytes: Long

  # Snapshot metadata information specific to Db2.
  db2SnapshotMetadata: Db2WorkloadDataSnapshotMetadata
}
# The SLA Domain configuration for Db2 database.
type Db2Config {
  # Frequency value for incremental backup of Db2 databases.
  incrementalFrequency: Duration

  # Specifies the number of days for which the Db2 database logs will be retained.
  logRetention: Duration

  # Frequency value for differential backup of Db2 databases.
  differentialFrequency: Duration
}
# Input to configure the SLA Domain for Db2 database.
input Db2ConfigInput {
  # Frequency value for incremental backup of Db2 databases.
  incrementalFrequency: SlaDurationInput

  # Specifies the duration for which the Db2 database logs will be retained.
  logRetention: SlaDurationInput

  # Frequency value for differential backup of Db2 databases.
  differentialFrequency: SlaDurationInput
}
# File backed up as a part of db2 backup.
type Db2DataBackupFile {
  # Size of the backed up file in bytes.
  backupFileSizeInBytes: Long!

  # Backup file destination path. Path of the file in the backing storage.
  destinationPath: String!

  # Information specific to Db2 and which is already not available in DBDataBackupFile.
  db2BackupFile: Db2WorkloadDataBackupFile!
}
# Db2 Database details object.
type Db2Database implements CdmHierarchyObject , CdmHierarchySnappableNew , HierarchyObject , Db2InstanceDescendantType , Db2InstancePhysicalChildType {
  # Uuid of the primary cluster.
  primaryClusterUuid: UUID!

  # Time stamp of when last metadata sync happened for the Db2 database.
  lastSyncTime: DateTime

  # Id associated with Db2 database in CDM.
  cdmId: String!

  # Whether the db2 database is a relic.
  isRelic: Boolean!

  # Threshold before new log backup takes place.
  logBackupThreshold: String!

  # Db2 database SLA Domain protection start date.
  protectionDate: DateTime

  # Type of Db2 database: STANDALONE, PARTITIONED, HADR, or UNKNOWN.
  db2DbType: Db2DatabaseType!

  # Specifies the value of the configuration parameter for parallelism in backup operations.
  backupParallelism: Int!

  # Specifies the value of the configuration parameter for sessions in backup operations.
  backupSessions: Int!

  # Status of Db2 database: OK, WARNING, ERROR, UNKNOWN or UNSPECIFIED.
  status: Db2DatabaseStatus!

  # Additional information about the current status of the Db2 database.
  statusMessage: [String!]!

  # Stats for DB2 database.
  reportWorkload: Snappable

  # Db2 instance parent for the given database.
  db2Instance: Db2Instance

  # HADR metadata object for the specified Db2 database.
  db2HadrMetadata: Db2HadrMetadata

  # Connection of recoverable ranges for given Db2 database.
  recoverableRanges(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field to sort Db2 recoverable ranges.
    sortBy: Db2RecoverableRangeSortBy,

    # Field to filter Db2 recoverable ranges.
    filter: Db2RecoverableRangeFilterInput): Db2RecoverableRangeConnection!

  # Connection of log snapshots for given Db2 database.
  logSnapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field to sort Db2 log snapshots.
    sortBy: Db2LogSnapshotSortBy,

    # Field to filter Db2 log snapshots.
    filter: Db2LogSnapshotFilterInput): Db2LogSnapshotConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# The request object includes parameters such as backupSessions and backupParallelism to update the Db2 database properties on the Rubrik cluster.
input Db2DatabaseConfigInput {
  # Supported in v9.0+
  # Specifies the value of the configuration parameter for parallelism in backup operations.
  backupParallelism: Int

  # Supported in v9.0+
  # Specifies the value of the configuration parameter for sessions in backup operations.
  backupSessions: Int
}
# Paginated list of Db2Database objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type Db2DatabaseConnection {
  # List of Db2Database objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [Db2DatabaseEdge!]!

  # List of Db2Database objects.
  nodes: [Db2Database!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Db2Database objects matching the request arguments.
  count: Int!
}
# Wrapper around the Db2Database object. This wrapper is used for pagination.
type Db2DatabaseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Db2Database object wrapped by this edge.
  node: Db2Database!
}
# Db2 database status.
enum Db2DatabaseStatus {
  # Unable to determine the status of the Db2 database.
  DBSTATUS_UNSPECIFIED

  # Db2 database is in ERROR state.
  ERROR

  # Db2 database is in OK state.
  OK

  # Db2 database is in UNKNOWN state.
  UNKNOWN

  # Db2 database is in WARNING state.
  WARNING
}
# Db2 database type.
enum Db2DatabaseType {
  # Unable to determine type of the Db2 database.
  DBTYPE_UNSPECIFIED

  # Db2 database is an HADR database.
  HADR

  # Db2 database is a PureScale HADR database.
  HADR_PURESCALE

  # Db2 database is a Partitioned database.
  PARTITIONED

  # Db2 database is a PureScale database.
  PURESCALE

  # Db2 database is a Standalone database.
  STANDALONE
}
# Supported in v8.0+
input Db2DownloadRecoverableRangeRequestInput {
  # Required. Supported in v8.0+
  # Point in time for which the snapshots should be downloaded for recovery. The date-time string must be in the ISO8601 format. For example, "2016-01-01T01:23:45.678". The timezone is same as the timezone of the Rubrik cluster.
  pointInTime: DateTime

  # Required. Supported in v8.0+
  # ID of the location preferred for downloading the base full and log snapshots required for point in time recovery. The snapshots not available at the preferred location will be downloaded from the location where they are available.
  preferredLocationId: String!
}
# Details of instances related to a Db2 HADR database.
type Db2HadrInstanceInfo {
  # Role of the HADR database on the specified Db2 instance.
  role: String!

  # Db2 instance parent for the Db2 HADR database.
  db2Instance: Db2Instance!
}
# HADR metadata object for a Db2 instance.
type Db2HadrMetadata {
  # Specifies the details of instances related to the specified Db2 HADR database.
  instancesInfoList: [Db2HadrInstanceInfo!]!
}
# Db2 Instance details object.
type Db2Instance implements CdmHierarchyObject , HierarchyObject {
  # Uuid of the primary cluster.
  primaryClusterUuid: UUID!

  # Time stamp of when last metadata sync happened for the Db2 instance.
  lastSyncTime: DateTime

  # Timestamp when last refresh job got triggered for the Db2 instance.
  lastRefreshTime: DateTime

  # Id associated with Db2 instance in CDM.
  cdmId: String!

  # Current status for the Db2 instance: OK, WARNING, ERROR or UNKNOWN.
  status: Db2Status!

  # Additional information about the current status of the Db2 instance.
  statusMessage: [String!]!

  # Specifies whether the Db2 instance contains an HADR database.
  containsHadrDatabase: Boolean!

  # Type of Db2 instance: STANDALONE, PARTITIONED, PURESCALE, or UNSPECIFIED.
  instanceType: Db2InstanceType!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): Db2InstanceDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): Db2InstancePhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of Db2Instance objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type Db2InstanceConnection {
  # List of Db2Instance objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [Db2InstanceEdge!]!

  # List of Db2Instance objects.
  nodes: [Db2Instance!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Db2Instance objects matching the request arguments.
  count: Int!
}
# Descendant type of a Db2 instance.
interface Db2InstanceDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of Db2InstanceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type Db2InstanceDescendantTypeConnection {
  # List of Db2InstanceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [Db2InstanceDescendantTypeEdge!]!

  # List of Db2InstanceDescendantType objects.
  nodes: [Db2InstanceDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Db2InstanceDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the Db2InstanceDescendantType object. This wrapper is used for pagination.
type Db2InstanceDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Db2InstanceDescendantType object wrapped by this edge.
  node: Db2InstanceDescendantType!
}
# Wrapper around the Db2Instance object. This wrapper is used for pagination.
type Db2InstanceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Db2Instance object wrapped by this edge.
  node: Db2Instance!
}
# Supported in v7.0+
input Db2InstancePatchRequestConfigInput {
  # Supported in v7.0+
  # List of hosts that are a part of this Db2 instance.
  hostIds: [String!] = []

  # Supported in v7.0+
  # Password of the Db2 instance.
  password: String

  # Supported in v7.0+
  # Username of the Db2 instance.
  username: String

  # Instance name of the Db2 instance.
  instanceName: String
}
# Physical child type of a Db2 instance.
interface Db2InstancePhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of Db2InstancePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type Db2InstancePhysicalChildTypeConnection {
  # List of Db2InstancePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [Db2InstancePhysicalChildTypeEdge!]!

  # List of Db2InstancePhysicalChildType objects.
  nodes: [Db2InstancePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Db2InstancePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the Db2InstancePhysicalChildType object. This wrapper is used for pagination.
type Db2InstancePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Db2InstancePhysicalChildType object wrapped by this edge.
  node: Db2InstancePhysicalChildType!
}
# Supported in v7.0+
input Db2InstanceRequestConfigInput {
  # Required. Supported in v7.0+
  # List of hosts that are a part of this Db2 instance.
  hostIds: [String!]!

  # Required. Supported in v7.0+
  # Instance name of the Db2 instance.
  instanceName: String!

  # Required. Supported in v7.0+
  # Password of the Db2 instance.
  password: String!

  # Required. Supported in v7.0+
  # Username of the Db2 instance.
  username: String!
}
# Supported in v7.0+
type Db2InstanceSummary {
  # Required. Supported in v7.0+
  # List of IDs of databases present in this Db2 instance.
  databaseIds: [String!]!

  # Required. Supported in v7.0+
  # v7.0: List of hosts that are a part of this Db2 instance.
  # v8.0+: A list of IDs of the hosts that are part of this Db2 instance.
  hostIds: [String!]!

  # Required. Supported in v7.0+
  # ID of the Db2 instance.
  id: String!

  # Required. Supported in v7.0+
  # UTC timestamp of the most recent Db2 instance refresh job.
  lastRefreshTime: String!

  # Required. Supported in v7.0+
  # Name of the Db2 instance.
  name: String!

  # Required. Supported in v7.0+
  # ID of the CDM cluster that protects the Db2 instance.
  primaryClusterUuid: String!

  # Required. Supported in v7.0+
  # UTC timestamp of the most recent Db2 instance refresh job.
  protectionDate: String!

  # Required. Supported in v7.0+
  # SLA Domain ID assigned to the Db2 instance.
  slaDomainId: String!

  # Required. Supported in v7.0+
  # Type of the SLA Domain assigned to the Db2 instance.
  slaType: String!

  # Required. Supported in v7.0+
  # Status messsage of the most recent Db2 instance refresh job.
  statusMessage: String!

  # Required. Supported in v7.0+
  # Username provided by the user that will be used while interacting with Db2 system.
  username: String!

  # Supported in v8.0+
  # A list of names of the hosts that are part of this Db2 instance.
  hostNames: [String!]!

  # Supported in v8.0+
  # Specifies whether a Db2 instance is archived.
  isArchived: Boolean

  # Supported in v8.0+
  # List of relic database IDs present in this Db2 instance.
  relicDatabaseIds: [String!]!

  # Supported in v8.1+
  # List of HADR database IDs present in this Db2 instance.
  hadrDatabaseIds: [String!]!

  # Supported in v7.0+
  # Status of the most recent Db2 instance refresh job.
  status: Db2InstanceSummaryStatus!
}
# Represents the different status values for a Db2 instance.
enum Db2InstanceSummaryStatus {
  # The Db2 instance is in ERROR state.
  DB2_INSTANCE_SUMMARY_STATUS_ERROR

  # The Db2 instance is in OK state.
  DB2_INSTANCE_SUMMARY_STATUS_OK

  # The Db2 instance is in UNKNOWN state.
  DB2_INSTANCE_SUMMARY_STATUS_UNKNOWN

  # The Db2 instance is in WARNING state.
  DB2_INSTANCE_SUMMARY_STATUS_WARNING
}
# Db2 instance type.
enum Db2InstanceType {
  # Unable to determine the type of the Db2 instance.
  INSTANCETYPE_UNSPECIFIED

  # The Db2 instance is a Partitioned instance.
  PARTITIONED

  # The Db2 instance is a PureScale instance.
  PURESCALE

  # The Db2 instance is a Standalone instance.
  STANDALONE
}
# Backup file associated with the Db2 log back object.
type Db2LogBackupFile {
  # Size of the db2 log backup.
  backupFileSizeInBytes: Long

  # Location of the backup file.
  destinationPath: String

  # The ID for the Db2 log back object.
  backupId: String

  # End time for log backup.
  endTime: DateTime
}
# Db2 log snapshot object.
type Db2LogSnapshot {
  # The Rubrik FID of the Db2 snapshot object.
  fid: String!

  # The CDM fid of the Db2 snapshot object.
  cdmId: String!

  # UUID of the CDM cluster associated with Db2 workload.
  clusterUuid: UUID!

  # The internal time stamp of the Db2 snapshot object.
  internalTimestamp: Long!

  # Boolean for archival status of the Db2 snapshot object.
  isArchived: Boolean!

  # The workload type on which snapshot was taken.
  workloadType: String!

  # The Rubrik fid of the workload on which snapshot was taken.
  workloadId: String!

  # The creation date of the snapshot.
  date: DateTime

  # App metadata of log snapshots in Db2.
  appMetadata: Db2LogSnapshotAppMetadata
}
# Metadata related to the Db2 log snapshot.
type Db2LogSnapshotAppMetadata {
  # The ID for the backup object stored in snapshot table.
  snapshotId: String

  # List of Backups for a Db2 log snapshot.
  backups: [Db2LogBackupFile!]
}
# Paginated list of Db2LogSnapshot objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type Db2LogSnapshotConnection {
  # List of Db2LogSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [Db2LogSnapshotEdge!]!

  # List of Db2LogSnapshot objects.
  nodes: [Db2LogSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Db2LogSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the Db2LogSnapshot object. This wrapper is used for pagination.
type Db2LogSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Db2LogSnapshot object wrapped by this edge.
  node: Db2LogSnapshot!
}
# Filter Db2 log snapshots.
input Db2LogSnapshotFilterInput {
  # The workload ID for which log snapshots are filtered.
  workloadId: [String!]

  # The cluster uuid for which log snapshots are filtered.
  clusterUuid: [UUID!]

  # Start time for the log snapshots connection.
  fromTime: DateTime

  # End time for the log snapshots connection.
  toTime: DateTime

  # Filter by the archival status of log snapshots. By default, archived snapshots are excluded.
  isArchived: Boolean
}
# Enum for db2 log snapshot sort by field.
enum Db2LogSnapshotSortBy {
  # Sort db2 snapshots by date.
  DATE
}
# Db2 recoverable range object.
type Db2RecoverableRange {
  # The Rubrik FID of the Db2 recoverable range object.
  fid: String!

  # The CDM fid of the Db2 recoverable range object.
  cdmId: String!

  # UUID of the CDM cluster associated with Db2 workload.
  clusterUuid: UUID!

  # Boolean for archival status of Db2 recoverable range object.
  isArchived: Boolean!

  # The Rubrik FID for the Db2 database associated with the Db2 recoverable range object.
  dbId: String!

  # ID of the associated base snapshot.
  baseSnapshotId: String

  # Start time of the Db2 recoverable range object.
  startTime: DateTime

  # End time of the Db2 recoverable range object.
  endTime: DateTime
}
# Paginated list of Db2RecoverableRange objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type Db2RecoverableRangeConnection {
  # List of Db2RecoverableRange objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [Db2RecoverableRangeEdge!]!

  # List of Db2RecoverableRange objects.
  nodes: [Db2RecoverableRange!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Db2RecoverableRange objects matching the request arguments.
  count: Int!
}
# Wrapper around the Db2RecoverableRange object. This wrapper is used for pagination.
type Db2RecoverableRangeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Db2RecoverableRange object wrapped by this edge.
  node: Db2RecoverableRange!
}
# Filter Db2 recoverable ranges.
input Db2RecoverableRangeFilterInput {
  # The cluster uuid for which db2 recoverable ranges are filtered.
  clusterUuid: [UUID!]

  # The db2 database ID for which db2 recoverable ranges are filtered.
  databaseId: [String!]

  # Start time for db2 recoverable range.
  fromTime: DateTime

  # End time for the db2 recoverable range.
  toTime: DateTime

  # Filter by archival status of the Db2 recoverable range. By default archived recoverable ranges are excluded.
  isArchived: Boolean
}
# Enum for db2 recoverable ranges sort by field.
enum Db2RecoverableRangeSortBy {
  # Sort Db2 recoverable range by end time.
  END_TIME

  # Sort Db2 recoverable range by start time.
  START_TIME
}
# Enum for db2 snapshot type.
enum Db2SnapshotType {
  # Db2 Snapshot since last successful full snapshot.
  DIFFERENTIAL

  # Db2 Full Snapshot.
  FULL

  # Db2 Snapshot since any (full/differential/incremental) successful snapshot.
  INCREMENTAL
}
# Db2 instance status.
enum Db2Status {
  # Error while connecting to Db2 Instance.
  ERROR

  # Db2 Instance is successfully connected.
  OK

  # Db2 Instance is in the connecting stage.
  UNKNOWN

  # Db2 Instance is connected with warnings.
  WARNING
}
# Db2 information that is not already available in DBDataBackupFile.
type Db2WorkloadDataBackupFile {
  # Sequence number of the backed up file in the database.
  sequenceNum: Int!

  # Partition number of the backed up file in the database.
  partitionNum: Int!
}
# Any snapshot metadata information specific to Db2 that is not already part of the DBDataSnapshotMetadata structure.
type Db2WorkloadDataSnapshotMetadata {
  # List of serialized InternalFileInstanceInfo instances for all files in the snapshot.
  kvSnapshotFileInstancesInfoList: [String!]!
}
# Supported in v5.3+
type DbLogReportProperties {
  # Required. Supported in v5.3+
  # Indicates whether the database log backup delay notification is enabled. Set to 'true' to send an email notification when the log backup delay is more than the configured threshold, and 'false' to disable the behavior.
  enableDelayNotification: Boolean!

  # Required. Supported in v5.3+
  # The threshold for the delay in log backup before an email notification should be created.
  logDelayThresholdInMin: Long!

  # Required. Supported in v5.3+
  # The frequency for sending an email notification to the customer when the log backup delay is more than the threshold.
  logDelayNotificationFrequencyInMin: Long!
}
# Supported in v5.3+
input DbLogReportPropertiesUpdateInput {
  # Supported in v5.3+
  # Indicates whether the database log backup delay notification is enabled. Set to 'true' to send an email notification when the log backup delay is more than the configured threshold, and 'false' to disable the behavior.
  enableDelayNotification: Boolean

  # Supported in v5.3+
  # An integer that specifies an interval in minutes. The CDM cluster sends an email notification when a log backup is delayed for longer than the specified interval.
  logDelayThresholdInMin: Long

  # Supported in v5.3+
  # An integer that specifies an interval in minutes. Email notifications about the log backup delay exceeding the specified threshold are sent at a maximum frequency specified by the interval.
  logDelayNotificationFrequencyInMin: Long
}
# Supported in v5.3+
type DbLogReportSummary {
  # Required. Supported in v5.3+
  id: String!

  # Required. Supported in v5.3+
  # Name of the database.
  name: String!

  # Supported in v5.3+
  # Time, in UTC, of the last database backup.
  lastSnapshotTime: DateTime

  # Supported in v5.3+
  # Amount of time, in seconds, that has elapsed since the next expected log backup.
  logBackupDelay: Long

  # Required. Supported in v5.3+
  # ID of the primary Rubrik cluster on which the database is located.
  primaryClusterId: String!

  # Supported in v5.3+
  # Latest point in time, in UTC, to which the database can be restored.
  latestRecoveryTime: DateTime

  # Required. Supported in v5.3+
  # ID of the SLA Domain controlling the database protection.
  effectiveSlaDomainId: String!

  # Required. Supported in v5.3+
  # Name of the SLA Domain controlling the database protection.
  effectiveSlaDomainName: String!

  # Supported in v5.3+
  # Frequency, in seconds, of the database log backup.
  logBackupFrequency: Int

  # Required. Supported in v5.3+
  # Location of the customer database. For a standalone SQL database, this includes the host and instance name.
  location: String!

  # The type of the database.
  databaseType: DatabaseType!
}
# Supported in v5.3+
type DbLogReportSummaryListReply {
  # Supported in v5.3+
  # List of matching objects.
  data: [DbLogReportSummary!]!

  # Supported in v5.3+
  # Total list responses.
  total: Int

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String

  # Supported in v5.3+
  # If there is more.
  hasMore: Boolean
}
# Represents a DB parameter group in AWS.
type DbParameterGroup {
  # Name of the DB parameter group.
  name: String!

  # Family name of the DB parameter group.
  family: String!

  # Amazon Resource Name (ARN) of the DB parameter group.
  arn: String!

  # Type of RDS deployment.
  rdsType: AwsNativeRdsType!
}
# Default Action type for network rules.
enum DefaultActionType {
  # Allow network access.
  ALLOW

  # Deny network access.
  DENY
}
# Configuration for the deletion of Azure AD Groups.
input DeleteAdGroupsFromHierarchyInput {
  # UUID of the org.
  orgId: UUID!

  # The IDs of the groups to delete.
  groupIds: [UUID!]!
}
input DeleteAllOracleDatabaseSnapshotsInput {
  # Required. ID assigned to an Oracle database object.
  id: String!
}
# Result of deletion of an AWS cloud account.
type DeleteAwsCloudAccountWithoutCftResp {
  # Feature that was being deleted.
  feature: CloudAccountFeature!

  # Specifies whether feature deletion was successful.
  success: Boolean!
}
# Input for deleting AWS compute setting.
input DeleteAwsComputeSettingInput {
  # Field for specifying ID of the AWS compute setting.
  id: String = ""
}
# Input to delete AWS Exocompute configurations.
input DeleteAwsExocomputeConfigsInput {
  # IDs of Exocompute configurations to be deleted.
  configIdsToBeDeleted: [UUID!]!
}
# AWS Exocompute Configs Delete Response.
type DeleteAwsExocomputeConfigsReply {
  # Deletion status for Exocompute configurations.
  deletionStatus: [AwsExocomputeConfigsDeletionStatusType!]!
}
# Configuration to delete AzureAdDirectory.
input DeleteAzureAdDirectoryInput {
  # Workload Fid of the Azure AD Directory to delete.
  workloadFid: UUID!
}
# Input for deleting Exocompute configurations for an Azure Cloud Account.
input DeleteAzureCloudAccountExocomputeConfigurationsInput {
  # Rubrik IDs of the cloud accounts to be deleted.
  cloudAccountIds: [UUID!]!
}
# Response of the operation to delete Exocompute Configuration from the Azure Cloud Account.
type DeleteAzureCloudAccountExocomputeConfigurationsReply {
  # IDs of the Azure Cloud Accounts that were deleted successfully.
  deletionSuccessIds: [String!]!

  # IDs of the Azure Cloud Accounts that could not be deleted.
  deletionFailedIds: [String!]!
}
# Input for deleting an Azure Cloud Account.
input DeleteAzureCloudAccountInput {
  # Session ID of the current OAuth session.
  sessionId: String!

  # Features enabled on the Azure Cloud Account.
  features: [CloudAccountFeature!]!

  # Rubrik IDs of the subscriptions to be deleted.
  azureSubscriptionRubrikIds: [UUID!]!
}
# Response of the operation to delete Azure Cloud Account.
type DeleteAzureCloudAccountReply {
  # Status of the operation to delete Azure Cloud Account.
  status: [DeleteAzureCloudAccountStatus!]!
}
# Status of the operation to delete Azure Cloud Account.
type DeleteAzureCloudAccountStatus {
  # Native ID of the Azure Subscription.
  azureSubscriptionNativeId: String!

  # Specifies whether the deletion of Azure Cloud Account was successful. When true, the deletion was successful.
  isSuccess: Boolean!

  # Error received during deletion of Azure Cloud Account.
  error: String!
}
# Input for deleting an Azure Cloud Account without OAuth.
input DeleteAzureCloudAccountWithoutOauthInput {
  # Features enabled on the Azure Cloud Account.
  features: [CloudAccountFeature!]!

  # Rubrik IDs of the subscriptions to be deleted.
  azureSubscriptionRubrikIds: [UUID!]!
}
# Response of the operation to delete Azure Cloud Account without OAuth.
type DeleteAzureCloudAccountWithoutOauthReply {
  # Status of the operation to delete Azure Cloud Account.
  status: [DeleteAzureCloudAccountStatus!]!
}
# Input required to delete a label rule.
input DeleteCloudNativeLabelRuleInput {
  # Label rule ID.
  ruleId: UUID!
}
# Input required to delete a tag rule.
input DeleteCloudNativeTagRuleInput {
  # Tag rule ID.
  ruleId: UUID!
}
# The input for deleting Rubrik Security Cloud on-demand snapshot.
input DeleteCloudWorkloadSnapshotInput {
  # The forever UUID in Rubrik Security Cloud for the snapshot to be deleted.
  snapshotId: UUID!
}
# Input required for deleting a certificate signing request (CSR).
input DeleteCsrInput {
  # FIDs of the CSRs to delete.
  csrFids: [UUID!]!
}
# Input for deleting a custom report.
input DeleteCustomReportInput {
  # ID of the custom report to be deleted.
  id: Int!
}
# Input for deleting a Db2 database.
input DeleteDb2DatabaseInput {
  # Required. ID of the Db2 database.
  id: String!
}
# Input for deleting a DB2 instance.
input DeleteDb2InstanceInput {
  # Required. ID of the Db2 instance.
  id: String!
}
# Input for deleting distribution list digests.
input DeleteDistributionListDigestBatchInput {
  # IDs of the distribution list digests that must be deleted.
  digestIds: [Int!]!
}
# Input for deleting an event digest.
input DeleteEventDigestInput {
  # User IDs of recipients whose event digests must be deleted.
  recipientUserIds: [String!]!
}
input DeleteExchangeSnapshotMountInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the mount to remove.
  id: String!
}
# Input for V1BulkDeleteFailoverClusterApp.
input DeleteFailoverClusterAppInput {
  # Specifies whether to preserve the fileset snapshots that belong to a failover cluster application. When this value is 'true', the snapshots are preserved. The default value is 'true'.
  preserveSnapshots: Boolean

  # Required. ID of the failover cluster app.
  id: String!
}
# Input for V1BulkDeleteFailoverCluster.
input DeleteFailoverClusterInput {
  # Specifies whether to preserve the fileset snapshots that belong to a failover cluster. When this value is 'true', the snapshots are preserved. The default value is 'true'.
  preserveSnapshots: Boolean

  # Required. ID of the failover cluster.
  id: String!
}
# Input for deleting fileset snapshots.
input DeleteFilesetSnapshotsInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the fileset.
  id: String!
}
# Input to delete a global certificate.
input DeleteGlobalCertificateInput {
  # The ID of the global certificate (either the Rubrik Security Cloud ID or the Rubrik CDM certificate ID).
  certificateId: String!
}
# The Rubrik clusters from which the certificate was successfully deleted.
type DeleteGlobalCertificateReply {
  # The Rubrik clusters from which the certificate was successfully deleted.
  clusterUuids: [UUID!]!

  # The errors originating from deleting certificates from the Rubrik clusters.
  clusterErrors: [CertificateClusterOperationError!]!
}
input DeleteGuestCredentialByIdInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the guest OS credential to remove.
  id: String!
}
# Input for deleting a Hyper-V virtual machine snapshot.
input DeleteHypervVirtualMachineSnapshotInput {
  # Required. Snapshot location to delete. Use **_local_** to delete all local snapshots and **_all_** to delete the snapshot in all locations.
  location: InternalDeleteHypervVirtualMachineSnapshotRequestLocation!

  # Required. ID of snapshot.
  id: String!
}
# Input for deleting a Live Mount of a Hyper-V virtual machine.
input DeleteHypervVirtualMachineSnapshotMountInput {
  # Force unmount to deal with situations where host has been moved.
  force: Boolean

  # Required. ID of the mount to remove.
  id: String!
}
# Holds the input to a delete integration request.
input DeleteIntegrationInput {
  # ID of the integration to be deleted.
  id: Long!
}
# Holds the input to a batch delete integrations request.
input DeleteIntegrationsInput {
  # IDs of all integrations to be deleted.
  ids: [Long!]!
}
# Input for deleting a SQL Server log shipping target.
input DeleteLogShippingInput {
  # Boolean value that determines whether to attempt to delete the secondary database associated with the specified log shipping configuration. The default value is false. When set to false, no attempt is made to delete the secondary database. When set to true, starts an asynchronous job to delete the secondary database.
  deleteSecondaryDatabase: Boolean

  # Required. ID of a log shipping configuration object.
  id: String!
}
# Input for deleting a Managed Volume.
input DeleteManagedVolumeInput {
  # Flag to indicate whether to convert snapshots of this Managed Volume to relics or to delete them.  Default is true.
  preserveSnapshots: Boolean

  # Required. ID of Managed Volume.
  id: String!
}
# Supported in v7.0+
type DeleteManagedVolumeReply {
  # Supported in v7.0+
  # Status of the triggered asynchronous unexport job.
  asyncRequestStatus: AsyncRequestStatus
}
# Input for deleting a Managed Volume snapshot export.
input DeleteManagedVolumeSnapshotExportInput {
  # Required. ID of the exported snapshot.
  id: String!
}
# Input for deleting a MongoDB source.
input DeleteMongoSourceInput {
  # Required. ID of the MongoDB source to be deleted.
  id: String!
}
# Input for deleting a NoSQL protection source.
input DeleteMosaicSourceInput {
  # Type of the NoSQL source to be deleted.
  sourceType: V2DeleteMosaicSourceRequestSourceType

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Name of the NoSQL source to be deleted.
  sourceName: String!
}
# Input for deleting a NoSQL protection store.
input DeleteMosaicStoreInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Name of the Mosaic store to be deleted.
  storeName: String!
}
# Input for deleting SQL Server snapshots.
input DeleteMssqlDbSnapshotsInput {
  # Required. ID of the Microsoft SQL database.
  id: String!
}
# Input for deleting a SQL Server Live Mount.
input DeleteMssqlLiveMountInput {
  # Remove all data within the Rubrik cluster related to the Live Mount, even if the SQL Server database cannot be contacted. Default value is false.
  force: Boolean

  # Required. ID of the Live Mount to delete.
  id: String!
}
# Input for deleting a registered NAS system.
input DeleteNasSystemInput {
  # Required. ID of the NAS system to delete.
  id: String!
}
# Input for deleting a Nutanix cluster.
input DeleteNutanixClusterInput {
  # Required. ID of the Nutanix cluster to remove.
  id: String!
}
# Input for deleting a Nutanix mount.
input DeleteNutanixMountV1Input {
  # Required. ID of the Live Mount.
  id: String!
}
# Input for deleting Nutanix Prism Central.
input DeleteNutanixPrismCentralInput {
  # Required. ID of the Nutanix Prism Central to remove.
  id: String!
}
# Input for deleting a Nutanix snapshot.
input DeleteNutanixSnapshotInput {
  # Required. Snapshot location to delete. Use **_local_** to delete all local snapshots and **_all_** to delete the snapshot in all locations.
  location: InternalDeleteNutanixSnapshotRequestLocation!

  # Required. ID of snapshot.
  id: String!
}
# Input for deleting multiple Nutanix snapshots.
input DeleteNutanixSnapshotsInput {
  # Required. Virtual machine ID.
  id: String!
}
input DeleteOracleMountInput {
  # Force unmount to remove metadata for the Live Mount of an Oracle database snapshot, even when the database cannot be contacted. Default value is 'false'.
  force: Boolean

  # Required. ID assigned to a Live Mount of an Oracle database snapshot.
  id: String!
}
# Delete organization.
input DeleteOrgInput {
  # Id of the organization to delete.
  organizationId: String!
}
# Request to delete an existing replication pairing between two Rubrik clusters. When the replication pairing is deleted, the source Rubrik cluster will no longer replicate data to the target Rubrik cluster.
input DeleteReplicationPairInput {
  # Source Rubrik cluster UUID.
  sourceClusterUuid: UUID!

  # Target Rubrik cluster UUID.
  targetClusterUuid: UUID!
}
# Input for deleting a SAP HANA snapshot.
input DeleteSapHanaDbSnapshotInput {
  # Required. ID assigned to a SAP HANA database full snapshot.
  id: String!
}
# Input for deleting a SAP HANA system.
input DeleteSapHanaSystemInput {
  # Required. The ID of the SAP HANA system.
  id: String!
}
# Input for deleting a scheduled report.
input DeleteScheduledReportInput {
  # ID of the report schedule to be deleted.
  id: Int!

  # ID of the scheduled report to be deleted.
  reportId: Int
}
# Input parameters for deleting service accounts.
input DeleteServiceAccountsFromAccountInput {
  # IDs of service accounts to be deleted.
  ids: [String!]!
}
input DeleteSmbDomainInput {
  # Required. SMB domain name.
  domainName: String!
}
# Delete Storage arrays.
input DeleteStorageArraysInput {
  # Required. List of Storage arrays to delete.
  inputs: [StorageArrayInput!]!
}
# Responses of operations to delete storage arrays from Rubrik clusters.
type DeleteStorageArraysReply {
  # Delete storage arrays responses.
  responses: [StorageArrayOperationOutputType!]!
}
# Input for deleting a syslog export rule.
input DeleteSyslogExportRuleInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. The ID of the syslog export rule.
  id: String!
}
# Input for deleting an archival location.
input DeleteTargetInput {
  # ID of the archival location.
  id: String = ""
}
# Request to delete mapping of target.
input DeleteTargetMappingInput {
  # ID of the target to which the archival location is mapped.
  id: String = ""
}
# Input required for resetting TOTP for multiple users.
input DeleteTotpConfigsInput {
  # Users for whom TOTP is reset.
  userIds: [String!] = []
}
# Enum for delete VMware snapshot location.
enum DeleteVmwareSnapshotRequestLocation {
  # Delete snapshot in all locations.
  V1_DELETE_VMWARE_SNAPSHOT_REQUEST_LOCATION_ALL

  # Delete snapshot in local only.
  V1_DELETE_VMWARE_SNAPSHOT_REQUEST_LOCATION_LOCAL
}
# Input to delete volume group mount.
input DeleteVolumeGroupMountInput {
  # Required. ID of the mount to remove.
  id: String!
}
input DeleteVsphereAdvancedTagInput {
  # Required. ID of the multi-tag filter.
  filterId: String!

  # Required. ID of the vCenter Server.
  id: String!
}
# Input for deleting vSphere live mount.
input DeleteVsphereLiveMountInput {
  # Force unmount to remove metadata when the datastore of the Live Mount virtual machine was moved off of the Rubrik cluster.
  force: Boolean

  # Required. ID of a Live Mount.
  id: String!
}
# The webhook to delete from the account.
input DeleteWebhookInput {
  # The ID of the webhook to be deleted.
  id: Int!
}
# An object providing the parameters for the recovery of a snapshot and a next snapshot delta.
input DeltaRecoveryInput {
  # The fid of the next snapshot to perform the delta on.
  nextSnapshotFid: UUID!

  # The delta type options which the files will be filtered on.
  deltaTypeFilter: [DeltaType!]!
}
# Categories for comparing a selected snapshot and the snapshot taken prior
# to the selected snapshot, at the time of browsing or searching snapshots.
enum DeltaType {
  # Number of bytes created.
  BYTES_CREATED

  # Number of bytes deleted.
  BYTES_DELETED

  # Number of bytes modified.
  BYTES_MODIFIED

  # Number of files created.
  NODES_CREATED

  # Number of files deleted.
  NODES_DELETED

  # Number of files modified.
  NODES_MODIFIED

  # Number of files affected by the identified ransomware strain.
  NODES_RANSOMWARE_STRAIN_AFFECTED

  # Number of ransomware notes corresponding to the identified ransomware
  # strain.
  NODES_RANSOMWARE_STRAIN_NOTE

  # Number of files that are suspicious.
  NODES_SUSPICIOUS
}
# DevicePathToVolumeSnapshotId type to take key value input.
type DevicePathToVolumeSnapshotId {
  # Key representing device path.
  key: String!

  # Value representing volume snapshot ID.
  value: String!
}
# DevicePathToVolumeSnapshotIdMap type to take map input.
type DevicePathToVolumeSnapshotIdMap {
  # List of key-value pairs that map device path to volume snapshot.
  devicePathToVolumeSnapshotIdList: [DevicePathToVolumeSnapshotId!]!
}
# Recommendation represents a single textual recommendation how to increase the
# score for a specific category. Recommendations are derived from a set of
# metrics.
type DhrcActiveRecommendation {
  # The key uniquely identifies the type of the recommendation. One use-case is
  # for translation of the recommendation message.
  key: DhrcRecommendationKey!

  # The category that the recommendation belong to.
  category: DhrcCategory!

  # The time that the recommendation was compiled from the set of metrics.
  compiledAt: DateTime

  # The earliest (oldest) metric used to compile the recommendation.
  earliestMetric: DateTime

  # The weight of the issue this recommendation aims to resolve. Heavier means
  # the issue is more severe.
  weight: Float!

  # The textual recommendation compiled by the service, always in English.
  message: String!

  # The translation arguments of the recommendation. Stored as key/value pairs.
  translationArgs: [DhrcKeyValue!]!
}
# Category is used to categorize scores and recommendations. Note that the
# values are stored in a database and hence cannot be changed.
enum DhrcCategory {
  # The ANOMALIES_DETECTED category deals with objects flagged by the Radar
  # component.
  ANOMALIES_DETECTED

  # The CATEGORY_UNSPECIFIED category represents an unspecified category.
  CATEGORY_UNSPECIFIED

  # The DATA_SAFETY_SCORE category represents the combined score for all
  # categories.
  DATA_SAFETY_SCORE

  # The RECOVERABILITY_STATUS category deals with job status, meeting SLAs,
  # etc.
  RECOVERABILITY_STATUS

  # The SECURITY_CONFIG category deals with the safety of configurations such
  # as permissions, key management, audit logs, etc.
  SECURITY_CONFIG

  # The SENSITIVE_DATA category deals with policy violations, content flagging,
  # etc.
  SENSITIVE_DATA

  # The SUSPICIOUS_USER_ACTIVITY category deals with suspicious user activity.
  SUSPICIOUS_USER_ACTIVITY
}
# The metric message represents a metric as collected from the system.
type DhrcCollectedMetric {
  # The value of the metric.
  value: Float!

  # The maximum value of the metric.
  maxValue: Float!

  # The time that the metric was collected from the system.
  collectedAt: DateTime

  # The metric identity.
  metric: DhrcMetric!
}
# KeyValue represents a key/value pair.
type DhrcKeyValue {
  # The key of the key/value pair.
  key: String!

  # The value of the key/value pair.
  value: String!
}
# The metric identity.
enum DhrcMetric {
  # The ANOMALIES_DETECTED_PAST_WEEK metric represent the total
  # number of anomalous snapshots detected in the past week.
  ANOMALIES_DETECTED_PAST_WEEK

  # The CDM_LOW_RUNWAY_REMAINING metric represents the total number of clusters
  # with low runway remaining.
  CDM_LOW_RUNWAY_REMAINING

  # The CDM_NEXT_RELEASE_UPGRADE_AVAILABLE metric represents the total number
  # of clusters which have a major upgrade available.
  CDM_NEXT_RELEASE_UPGRADE_AVAILABLE

  # The CDM_NODE_ENCRYPTION metric represents the total number of clusters
  # having node encryption turned on.
  CDM_NODE_ENCRYPTION

  # The CDM_SAME_RELEASE_UPGRADE_AVAILABLE metric represents the total number
  # of clusters which have a minor or patch upgrade available.
  CDM_SAME_RELEASE_UPGRADE_AVAILABLE

  # The CDM_VERSION_UNSUPPORTED metric represents the total number of clusters
  # running an unsupported software version.
  CDM_VERSION_UNSUPPORTED

  # The DATA_DISCOVERY_ENABLED_CLUSTERS metric represents the total number of
  # clusters having Sensitive Data Discovery enabled.
  DATA_DISCOVERY_ENABLED_CLUSTERS

  # The DO_NOT_PROTECT_OBJECTS metric represents the total number of objects
  # marked as Do Not Protect.
  DO_NOT_PROTECT_OBJECTS

  # The LOGGED_IN_TO_SUPPORT_PORTAL metric represents whether the account is
  # logged in to the Support Portal.
  LOGGED_IN_TO_SUPPORT_PORTAL

  # The METRIC_UNSPECIFIED metric represents an unspecified metric.
  METRIC_UNSPECIFIED

  # The OPEN_ACCESS_SENSITIVE_FILES metric represents the total number of
  # sensitive files with open access, excluding files with hits which have
  # been marked as allowed.
  OPEN_ACCESS_SENSITIVE_FILES

  # The PROTECTED_OBJECTS metric represents the total number of objects
  # protected by an SLA Domain.
  PROTECTED_OBJECTS

  # The RADAR_ENABLED_CLUSTERS metric represents the total number of clusters
  # having Ransomware Investigation enabled.
  RADAR_ENABLED_CLUSTERS

  # The SLA_COMPLIANCE metric represents the total number of objects in
  # compliance with their SLA Domain.
  SLA_COMPLIANCE

  # The SLA_USING_RETENTION_LOCK metric represents the total number of SLA
  # Domains protected by retention lock.
  SLA_USING_RETENTION_LOCK

  # The USERS_USING_TOTP metric represents the total number of users
  # using TOTP.
  USERS_USING_TOTP
}
# Recommendation keys uniquely identify the type of recommendation.
enum DhrcRecommendationKey {
  # Recommendation to connect Rubrik Security Cloud to the
  # Rubrik Support portal.
  CONNECT_RSC_TO_SUPPORT_PORTAL

  # Recommendation to increase the number of clusters enabled with Sensitive
  # Data Discovery.
  INCREASE_NUMBER_OF_DATA_DISCOVERY_ENABLED_CLUSTERS

  # INCREASE_NUMBER_OF_ENCRYPTED_CDM_NODES recommend the user to increase
  # the number of encrypted CDM nodes.
  INCREASE_NUMBER_OF_ENCRYPTED_CDM_NODES

  # INCREASE_NUMBER_OF_PROTECTED_OBJECTS recommend the user to increase the
  # number of objects protected by Rubrik.
  INCREASE_NUMBER_OF_PROTECTED_OBJECTS

  # INCREASE_NUMBER_OF_RADAR_ENABLED_CLUSTERS recommend the user to increase
  # the number of Ransomware Investigation enabled clusters.
  INCREASE_NUMBER_OF_RADAR_ENABLED_CLUSTERS

  # INCREASE_NUMBER_OF_SLAS_USING_RETENTION_LOCK recommend the user to
  # increase the number of SLAs using retention lock.
  INCREASE_NUMBER_OF_SLAS_USING_RETENTION_LOCK

  # INCREASE_NUMBER_OF_SLA_COMPLIANT_OBJECTS recommend the user to increase
  # the number of objects in compliance with the SLA.
  INCREASE_NUMBER_OF_SLA_COMPLIANT_OBJECTS

  # INCREASE_NUMBER_OF_USERS_USING_TOTP recommend the user to increase the
  # number of users using TOTP.
  INCREASE_NUMBER_OF_USERS_USING_TOTP

  # Recommendation to increase the runway remaining on Rubrik clusters.
  INCREASE_RUNWAY_REMAINING_ON_CDM_CLUSTERS

  # Recommendation to investigate recent anomaly events.
  INVESTIGATE_ANOMALY_EVENTS

  # The KEY_UNSPECIFIED key represents an unspecified key.
  KEY_UNSPECIFIED

  # Recommendation to secure sensitive files with open access.
  SECURE_OPEN_ACCESS_SENSITIVE_FILES

  # Recommendation to upgrade Rubrik clusters which have a software
  # version upgrade available.
  UPGRADE_CDM_CLUSTERS_SOFTWARE_VERSION
}
# Score represent a score for a single category. Scores are calculated from a
# set of metrics.
type DhrcScore {
  # The category that the score belong to.
  category: DhrcCategory!

  # The time that the score was calculated.
  calculatedAt: DateTime

  # The time at which the earliest (oldest) metric used to calculate the score
  # was collected.
  earliestMetric: DateTime

  # The score value, always between 0 and 100.
  value: Float!

  # The time of this score. This may differ from the time the score was
  # calculated if padding was used to introduce the score.
  date: DateTime

  # The calculation context for the score.
  context: DhrcScoreContext
}
# Context represents the context in which the score calculation took place.
type DhrcScoreContext {
  # The metrics associated with this score calculation context.
  metrics: [DhrcScoreMetric!]!
}
# Metric represents a specific metric as included in the score calculation.
type DhrcScoreMetric {
  # The value of the metric.
  value: Float!

  # The maximum value of the metric.
  maxValue: Float!

  # The impact the metric had on the score calculation. Note that the impact
  # is scaled by the weight before being used in the score calculation.
  impact: Float!

  # The weight of the impact value for the score calculation.
  weight: Float!

  # The metric version. Increase by one every time the metric definition is
  # updated.
  version: Int!

  # The metric identity.
  metric: DhrcMetric!
}
# Timespan specifies a length of time.
enum DhrcScoreTimespan {
  # The MONTH timespan represents a timespan of one month.
  MONTH

  # The THREE_DAYS timespan represents a timespan of three days.
  THREE_DAYS

  # The THREE_MONTH timespan represents a timespan of three months.
  THREE_MONTHS

  # The TIMESPAN_UNSPECIFIED represents an unspecified timespan.
  TIMESPAN_UNSPECIFIED

  # The WEEK timespan represents a timespan of one week.
  WEEK

  # The YEAR timespan represents a timespan of one year.
  YEAR
}
# Supported in v5.0+
# Status of the task.
enum DiagnosticTaskStatus {
  DIAGNOSTIC_TASK_STATUS_CANCELED
  DIAGNOSTIC_TASK_STATUS_FAILED
  DIAGNOSTIC_TASK_STATUS_QUEUED
  DIAGNOSTIC_TASK_STATUS_RETRIED
  DIAGNOSTIC_TASK_STATUS_STARTED
  DIAGNOSTIC_TASK_STATUS_SUCCEEDED
}
# Statistic result for certain file/folder.
type DiffData {
  # Absolute path of the file or folder.
  path: String!

  # Number of files deleted under this path.
  filesDeleted: Long!

  # Number of files modified under this path.
  filesModified: Long!

  # Number of files created under this path.
  filesCreated: Long!

  # Number of suspicious files added under this path.
  suspiciousFilesAdded: Long!

  # Mode of the inode of the file or folder at this path.
  mode: Int!

  # Boolean indicating whether this is a file or folder.
  isFolder: Boolean!

  # Number of bytes created under this path.
  bytesCreated: Long!

  # Number of bytes deleted under this path.
  bytesDeleted: Long!

  # Number of bytes modified under this path.
  bytesModified: Long!

  # Total size of the files under this path.
  totalSize: Long!

  # Modification time of the inode of the file or folder at this path.
  lastModifiedTime: Long!

  # Boolean indicating whether this file or folder was deleted in this snapshot.
  isDeleted: Boolean!

  # Additional information corresponding to the anomaly detected.
  anomalyInfo: AnomalyInfo
}
# Diff fmd result.
type DiffResult {
  # A list of changed files and folders in the snapshot.
  data: [DiffData!]!

  # The id of the previous snapshot.
  previousSnapshotId: String!

  # The date of the previous snapshot.
  previousSnapshotDate: Long!
}
# Sort by direct resource assignment type.
enum DirectResourceAssignmentSortBy {
  # SortBy field is resource name.
  RESOURCE_NAME

  # SortBy field is unspecified.
  RESOURCE_SORT_UNSPECIFIED
}
# Supported in v5.3+
input DisablePerLocationPauseInput {
  # Required. Supported in v5.3+
  # Specifies whether to replicate snapshots taken during and before replication pause. When this value is 'true,' snapshots taken during and before the replication pause are not replicated. In all other cases, snapshots taken before and during the replication pause are replicated.
  shouldSkipOldSnapshots: Boolean!

  # Required. Supported in v5.3+
  # Replication from specified Rubrik clusters are resumed. Specified Rubrik clusters must be paused replication sources of local Rubrik cluster.
  sourceClusterUuids: [String!]!
}
# Input for disabling replication per location pause.
input DisableReplicationPauseInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. A configuration value that specifies which source clusters resume replication. Snapshots taken before or during the replication pause can be skipped.
  disablePerLocationPause: DisablePerLocationPauseInput!
}
# Input for disabling a Rubrik Support representative's access to the customer account.
input DisableSupportUserAccessInput {
  # Support user access ID.
  id: Int = 0

  # User ID of the customer on whose behalf the Rubrik Support representative is accessing the customer account.
  impersonatedUserId: String = ""
}
# Input for disabling archival location.
input DisableTargetInput {
  # ID of the archival location.
  id: String = ""
}
# Archival location disable result.
type DisableTargetReply {
  # Rubrik Security Cloud managed location ID.
  locationId: String!

  # Ownership status of the archival location.
  status: ArchivalLocationStatus!
}
# Input for discovering a Db2 instance.
input DiscoverDb2InstanceInput {
  # Required. ID of the Db2 instance.
  id: String!
}
# Input for discovering a MongoDB source.
input DiscoverMongoSourceInput {
  # Required. ID of the MongoDB source.
  id: String!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Input to start auto discover jobs on multiple NAS systems.
input DiscoverNasSystemRequestInput {
  # Required. Supported in v7.0+
  # IDs of NAS systems.
  ids: [String!]!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Status of auto discover job for a NAS system.
type DiscoverNasSystemSummary {
  # Required. Supported in v7.0+
  # The asynchronous request status of the job that discovers the NAS system.
  nasDiscoverJobStatus: AsyncRequestStatus

  # Required. Supported in v7.0+
  # ID of the NAS system.
  nasSystemId: String!
}
enum DiscoveryContentReportGroupBy {
  ANALYZER
  CLUSTER
  FILE
  OBJECT_NAME
  POLICY
  SLA_DOMAIN
  TIME
}
enum DiscoveryContentReportSortBy {
  ANALYZER_NAME
  CLUSTER
  FILES_WITH_HITS
  FILE_NAME
  LOCATION
  OBJECT_NAME
  PATH
  POLICY_NAME
  SIZE
  SLA_DOMAIN
  SNAPSHOT_TIME
  TOTAL_HITS
}
enum DiscoveryReportGroupBy {
  POLICY_VIOLATIONS
  STATUS_POLICY
  TIME_ISSUES
  TIME_VIOLATIONS
}
enum DiscoveryReportSortBy {
  NUM_HIGH_RISK_LOCATIONS
  NUM_OBJECTS
  NUM_VIOLATED_FILES
  NUM_VIOLATION
  POLICY_NAME
  POLICY_STATUS
}
enum DiscoveryReportTablePolicyStatus {
  DISCOVERY
  IN_COMPLIANCE
  OUT_OF_COMPLIANCE
}
# GCP native disk encryption type.
enum DiskEncryptionType {
  # Encrypt disk using customer managed key in structured form.
  CUSTOMER_MANAGED_KEY

  # Encrypt disk using customer managed key in raw string form.
  CUSTOMER_MANAGED_KEY_RESOURCE_ID

  # Encrypt disk using Google managed key.
  GOOGLE_MANAGED_KEY

  # Encrypt disk using the same key as the source disk.
  SOURCE_DISK_ENCRYPTION
}
# Input specifying whether a disk should be excluded from the snapshot.
input DiskIdToIsExcluded {
  # ID of the disk.
  diskId: UUID!

  # Whether this disk is excluded from the snapshot.
  isExcluded: Boolean!
}
# Supported in v5.0+
type DiskInfo {
  # Required. Supported in v5.0+
  capacityBytes: Long!

  # Required. Supported in v5.0+
  path: String!

  # Supported in v5.0+
  unallocatedBytes: Long

  # Supported in v5.0+
  usableBytes: Long

  # Supported in v8.1+
  isResizable: Boolean
  diskStatus: DiskStatus
}
# Supported in v5.0+
type DiskStatus {
  # Required. Supported in v5.0+
  diskType: String!

  # Required. Supported in v5.0+
  id: String!

  # Required. Supported in v5.0+
  isDegraded: Boolean!

  # Required. Supported in v5.0+
  isEncrypted: Boolean!

  # Required. Supported in v5.0+
  nodeId: String!

  # Required. Supported in v5.0+
  status: String!
}
interface DisplayableValue {
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
type DisplayableValueBoolean implements DisplayableValue {
  value: Boolean
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
# Compliance range display value.
type DisplayableValueComplianceRange implements DisplayableValue {
  # The compliance duration.
  value: ComplianceDuration

  # The compliance duration string displayed on the UI.
  displayValue: String!

  # The compliance duration serialized string.
  serializedValue: String!

  # The compliance duration string displayed in the report header.
  reportHeader: String!
}
type DisplayableValueDateRange implements DisplayableValue {
  value: PastDurationEnum
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
type DisplayableValueDateTime implements DisplayableValue {
  value: DateTime
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
type DisplayableValueFloat implements DisplayableValue {
  value: Float
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
type DisplayableValueInteger implements DisplayableValue {
  value: Int
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
type DisplayableValueLong implements DisplayableValue {
  value: Long
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
type DisplayableValueNull implements DisplayableValue {
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
type DisplayableValueString implements DisplayableValue {
  value: String
  displayValue: String!
  serializedValue: String!
  reportHeader: String!
}
# Input for retrieving distribution list digest by ID.
input DistributionDigestByIdInput {
  # ID of the distribution list digest that must be retrieved.
  digestId: Int = 0
}
# Holds the configuration for the Data Loss Prevention integration.
type DlpConfig {
  # The target to use when exporting files for fingerprinting.
  targetType: DlpConfigTargetType!

  # The generic NAS target configuration.
  genericNas: DlpConfigGenericNas

  # The VMware virtual machine target configuration.
  vmwareVm: DlpConfigVmwareVm

  # Policies to which the configuration applies.
  policies: [String!]

  # The service account ID. Optional, if empty the Data Loss Prevention job
  # runs with administrator privileges.
  serviceAccountId: String

  # The service account name. Optional, if empty the integration name is used
  # to create a service account name.
  serviceAccountName: String

  # The status of the integration.
  status: DlpStatus!
}
# Holds the configuration for a generic NAS target.
type DlpConfigGenericNas {
  # The share type.
  shareType: DlpConfigShareType!

  # The NAS share ID.
  shareId: String!

  # The path to which files will be recovered on the target.
  path: String!

  # The NAS host workload ID.
  workloadId: UUID!
}
# Holds the configuration for a generic NAS target.
input DlpConfigGenericNasInput {
  # The NAS host workload ID.
  workloadId: UUID!

  # The share type.
  shareType: DlpConfigShareType!

  # The NAS share ID.
  shareId: String!

  # The path to which files will be recovered on the target.
  path: String!
}
# Holds the configuration for the Data Loss Prevention integration.
input DlpConfigInput {
  # Policies to which the configuration applies.
  policies: [String!] = []

  # The generic NAS target configuration.
  genericNas: DlpConfigGenericNasInput

  # The VMware virtual machine target configuration.
  vmwareVm: DlpConfigVmwareVmInput

  # The service account ID. Optional, if empty the Data Loss Prevention job
  # runs with administrator privileges.
  serviceAccountId: String = ""

  # The service account name. Optional, if empty the integration name is used
  # to create a service account name.
  serviceAccountName: String = ""

  # The status of the integration.
  status: DlpStatusInput

  # The target to use when exporting files for fingerprinting.
  targetType: DlpConfigTargetType!
}
# Specifies the OS type of the target.
enum DlpConfigOsType {
  # Linux OS.
  LINUX

  # Represents an unspecified OS type.
  OS_TYPE_UNSPECIFIED

  # Windows OS.
  WINDOWS
}
# Represents the share type of an NFS workload.
enum DlpConfigShareType {
  # NFS share.
  NFS

  # An unspecified share type.
  SHARE_TYPE_UNSPECIFIED

  # SMB share.
  SMB
}
# Specifies the type of the target that files will be recovered
# to. Note, this also specifies which configuration contains valid data.
enum DlpConfigTargetType {
  # Generic NAS share target.
  GENERIC_NAS

  # The TARGET_TYPE_UNSPECIFIED type represents an unspecified target type.
  TARGET_TYPE_UNSPECIFIED

  # VMware virtual machine target.
  VMWARE_VM
}
# Holds the configuration for a VMware virtual machine target.
type DlpConfigVmwareVm {
  # The OS type.
  osType: DlpConfigOsType!

  # The path to which files will be recovered on the target.
  path: String!

  # Workload ID of the target.
  workloadId: UUID!
}
# Holds the configuration for a VMware virtual machine target.
input DlpConfigVmwareVmInput {
  # Workload ID of the target.
  workloadId: UUID!

  # The OS type.
  osType: DlpConfigOsType!

  # The path to which files will be recovered on the target.
  path: String!
}
# Holds the status of the Data Loss Prevention integration.
type DlpStatus {
  # The status code.
  code: DlpStatusCode!
}
# The Data Loss Prevention status codes.
enum DlpStatusCode {
  # Unspecified integration status.
  INTEGRATION_STATUS_UNSPECIFIED

  # The integration is working as expected.
  OK

  # The service account lacks permissions required by the integration.
  SERVICE_ACCOUNT_INSUFFICIENT_PERMISSIONS

  # The service account assigned to an integration is missing.
  SERVICE_ACCOUNT_MISSING
}
# Holds the status of the Data Loss Prevention integration.
input DlpStatusInput {
  # The status code.
  code: DlpStatusCode = INTEGRATION_STATUS_UNSPECIFIED
}
# Information about the archival location.
type DlsArchivalLocation {
  # ID of the archival location.
  id: UUID!

  # Name of the archival location.
  name: String!

  # Type of target.
  targetType: TargetType
}
# Config for each of the Active Directory Domain Controller to be restored.
input DomainControllerRestoreConfigInput {
  # Supported in v9.0+
  # ID of the alternate host on which the restore must be performed.
  hostId: String

  # Required. ID of the snapshot to be used to restore the Active Directory Domain Controller.
  snapshotId: String!
}
# Input for downloading an Active Directory domain controller snapshot from a replicated or archived location.
input DownloadActiveDirectorySnapshotFromLocationInput {
  # Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded.
  downloadConfig: ActiveDirectorySnapshotDownloadConfigInput

  # Required. ID of the replication location.
  locationId: String!

  # Required. ID of the snapshot to be downloaded.
  snapshotId: String!
}
# Input for asynchronously downloading an audit log in CSV format.
input DownloadAuditLogCsvAsyncInput {
  # Audit log filters.
  filters: CustomReportFiltersConfig!
}
# Filters for cdm upgrades page for pdf generation.
input DownloadCdmUpgradesPdfFiltersInput {
  # List of cluster ID.
  clusterUuids: [String!] = []

  # List of cluster names.
  clusterNames: [String!] = []

  # List of cluster types.
  clusterTypes: [String!] = []

  # List of downloaded versions.
  downloadedVersions: [String!] = []

  # List of installed versions.
  installedVersions: [String!] = []

  # List of cluster locations.
  clusterLocations: [String!] = []

  # Cluster upgrade job status.
  upgradeJobStatus: [String!] = []

  # Cluster precheck status.
  prechecksStatus: [String!] = []

  # Cluster version status.
  versionStatus: [String!] = []
}
# Download CDM upgrades report response.
type DownloadCdmUpgradesPdfReply {
  # Download link of the pdf report.
  downloadLink: String!
}
type DownloadCsvReply {
  # Status of queueing a download CSV job.
  isSuccessful: Boolean!
}
# Input for downloading a Db2 snapshot from an archival location.
input DownloadDb2SnapshotInput {
  # Required. ID of the location from where the Db2 database snapshot will be downloaded.
  locationId: String!

  # Required. ID of the Db2 database snapshot.
  snapshotId: String!
}
# Download Db2 snapshots from archival location to the local Rubrik cluster for point-in-time (PIT) recovery.
input DownloadDb2SnapshotsForPointInTimeRecoveryInput {
  # Required. Object containing information required for downloading snapshots for a point in time recovery. The object includes the point in time and the ID of the archival location for the snapshots to be downloaded.
  downloadConfig: Db2DownloadRecoverableRangeRequestInput!

  # Required. ID of the Db2 database.
  id: String!
}
input DownloadExchangeSnapshotInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the location from where the Microsoft Exchange database will be downloaded.
  locationId: String!

  # Required. ID of the Microsoft Exchange database snapshot.
  snapshotId: String!
}
# Input for downloading files from Nutanix snapshots.
input DownloadFilesNutanixSnapshotInput {
  # Configuration information for a job to download files and folders from a Nutanix virtual machine snapshot.
  config: NutanixDownloadFilesJobConfigInput!

  # Required. ID assigned to a Nutanix virtual machine backup object.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
# The status of download cloud native files req. It contains the taskchain ID of the download job if succeeded.
type DownloadFilesReply {
  # Taskchain ID of the download job.
  taskchainId: String!
}
# Input for downloading the fileset snapshot from a location.
input DownloadFilesetSnapshotFromLocationInput {
  # Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded.
  downloadConfig: FilesetDownloadRequestInput

  # Required. ID of the replication location.
  locationId: String!

  # Required. ID of the snapshot to be downloaded.
  snapshotId: String!
}
# Download fileset snapshot.
input DownloadFilesetSnapshotInput {
  # Required. ID of snapshot.
  id: String!
}
# Input location to download the Hyper-V snapshot from.
input DownloadHypervSnapshotFromLocationInput {
  # Required. ID of the replication location.
  locationId: String!

  # Required. ID of the snapshot to be downloaded.
  snapshotId: String!

  # Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded.
  downloadConfig: HypervVirtualMachineSnapshotDownloadConfigInput!
}
# Input for downloading Hyper-V snapshot files.
input DownloadHypervVirtualMachineSnapshotFilesInput {
  # Configuration information for a job to download files and folders from a Hyper-V virtual machine backup.
  config: HypervDownloadFilesJobConfigInput!

  # ID assigned to a Hyper-V virtual machine backup object.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
# Input for downloading a Hyper-V virtual machine snapshot.
input DownloadHypervVirtualMachineSnapshotInput {
  # Required. ID of snapshot.
  id: String!
}
# Identifier for download files.
enum DownloadIdentifierEnum {
  # Threat hunt result CSV.
  ORION_THREAT_HUNT_DOWNLOAD

  # CDM API metrics in CSV format.
  PRECHECKS_CDM_API_METRICS_CSV_DOWNLOAD

  # Download report CSV/PDF.
  REPORT

  # File generated by Ruby AI.
  RUBY_AI

  # Send report email.
  SEND_NOW_EMAIL

  # CSV report of SLA Domains with replication enabled to this Rubrik cluster.
  SLA_WITH_REPLICATION

  # Files Downloaded from a Snapshot.
  SNAPSHOT_FILES_DOWNLOAD

  # Data classification files download.
  SONAR_DOWNLOAD
}
# Download job progress information.
type DownloadJobInfo {
  # Job ID of download package job.
  jobInstanceId: String!

  # Status of download package job.
  status: String!

  # Download job progress.
  progress: Float!

  # Time remaining for download job to complete.
  remainingTimeEstimateInSeconds: Long!

  # Event series ID related to download package job.
  eventId: String!
}
# Input for downloading Managed Volume files.
input DownloadManagedVolumeFilesInput {
  # Required. Configuration information for a job to download files and folders from a managed volume backup.
  config: ManagedVolumeDownloadFilesJobConfigInput!

  # Required. ID assigned to a managed volume backup object.
  id: String!
}
# Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location can be a replication target or an archival location.
input DownloadManagedVolumeFromLocationInput {
  # Additional configuration for the operation. This includes the SLA Domain to be assigned to the snapshot when it is downloaded.
  downloadConfig: DownloadManagedVolumeRequestInput

  # Required. v7.0-v8.1: ID of the replication location.
  # v9.0+: ID of the remote location.
  locationId: String!

  # Required. ID of the snapshot to be downloaded.
  snapshotId: String!
}
# Additional parameters for the download request.
input DownloadManagedVolumeRequestInput {
  # Supported in v7.0+
  # ID of the SLA Domain to manage retention of the downloaded snapshot.
  slaId: String
}
# Supported in v5.2+
input DownloadMssqlBackupFilesByIdJobConfigInput {
  # Supported in v5.2+
  # v5.2: Optional. A Boolean that specifies whether the download is in response to a Legal Hold.
  # v5.3+: Optional. A Boolean that specifies if the download is in response to a Legal Hold.
  legalHoldDownloadConfig: LegalHoldDownloadConfigInput

  # Required. Supported in v5.2+
  # A list of snapshots and logs to download.
  items: [String!]!
}
# Input for downloading SQL Server database backup files.
input DownloadMssqlDatabaseBackupFilesInput {
  # Required. Configuration for a download files by id job.
  config: DownloadMssqlBackupFilesByIdJobConfigInput!

  # Required. ID of the Microsoft SQL database.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
# Input for downloading SQL Server database files from an archival location.
input DownloadMssqlDatabaseFilesFromArchivalLocationInput {
  # Required. Configuration for the archive download request.
  config: MssqlDownloadFromArchiveConfigInput!

  # Required. ID of the Microsoft SQL database.
  id: String!
}
# Input for downloading Nutanix snapshot.
input DownloadNutanixSnapshotInput {
  # Required. ID of snapshot.
  id: String!
}
# Input for downloading a Nutanix snapshot from a replication target.
input DownloadNutanixVmFromLocationInput {
  # Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded.
  downloadConfig: NutanixVmDownloadRequestInput

  # Required. ID of the replication location.
  locationId: String!

  # Required. ID of the snapshot to be downloaded.
  snapshotId: String!
}
input DownloadObjectFilesCsvInput {
  # The filters to apply on the list of activities.
  filters: ListObjectFilesFiltersInput!

  # The day, (YYYY-MM-DD), from which to collect user activity.
  day: String!

  # The user's IANA timezone.
  timezone: String!
}
input DownloadObjectsListCsvInput {
  # The day (YYYY-MM-DD) to get the latest snapshots of.
  day: String!

  # The user's IANA timezone.
  timezone: String!
}
input DownloadOracleDatabaseSnapshotInput {
  # Required. ID assigned to an Oracle database snapshot.
  snapshotId: String!
}
# Download package response.
type DownloadPackageReply {
  # Download job ID.
  jobId: String!
}
# Start download job request response.
type DownloadPackageReplyWithUuid {
  # Cluster uuid.
  uuid: String!

  # Download package job ID.
  jobId: String!
}
# Download package job status information.
type DownloadPackageStatusReply {
  # CDM upgrade package version.
  version: String!

  # Download job status description.
  description: String!

  # Availability of CDM package.
  availability: String!

  # CDM download job information.
  downloadJobInfo: DownloadJobInfo

  # Size of CDM package.
  size: Long!

  # MD5Sum of the CDM package.
  md5Sum: String!
}
# Input for asynchronously downloading a report in CSV format.
input DownloadReportCsvAsyncInput {
  # ID of the report to download.
  id: Int!
  config: CustomReportCreate
}
# Input for asynchronously downloading a report in PDF format.
input DownloadReportPdfAsyncInput {
  # ID of the report to download.
  id: Int!
  config: CustomReportCreate
}
input DownloadResultsCsvFiltersInput {
  analyzerGroupIds: [String!] = []
  browseDirectorySnappablePath: SnappablePathInput
  listFileResultsSnappablePaths: [SnappablePathInput!] = []
  listFileResultsSnappableTypes: [String!] = []
  listFileResultsSearchText: String = ""
  whitelistEnabled: Boolean = false
  fileType: FileCountType!
}
type DownloadResultsCsvReply {
  downloadLink: String!
}
# Initiates a job to download a snapshot from the specified location when the snapshot does not exist locally. The specified location can be replication target or archival location. If SLA Domain is not selected, the snapshot will be retained forever.
input DownloadSapHanaSnapshotFromLocationInput {
  # Additional configuration for the download operation. This includes the SLA Domain assigned to the downloaded snapshot.
  downloadConfig: SapHanaDownloadRequestInput

  # Required. ID of the remote location.
  locationId: String!

  # Required. ID of the snapshot to be downloaded.
  snapshotId: String!
}
# Input for downloading SAP HANA snapshot from an archival location.
input DownloadSapHanaSnapshotInput {
  # Required. ID of the location from where the SAP HANA database snapshot will be downloaded.
  locationId: String!

  # Required. ID of the SAP HANA database snapshot.
  snapshotId: String!
}
# Input for download SAP HANA snapshots from an archival location for point-in-time (PIT) recovery.
input DownloadSapHanaSnapshotsForPointInTimeRecoveryInput {
  # Required. Object containing information required for downloading snapshots for a point in time recovery. The object includes the point in time and the ID of the archival location for the snapshots to be downloaded.
  downloadConfig: SapHanaDownloadRecoverableRangeRequestInput!

  # Required. ID of the SAP HANA database.
  id: String!
}
enum DownloadStatusEnum {
  COMPLETED
  FAILED
  IN_PROGRESS
  PENDING
}
# Request to download threat hunt result as CSV.
input DownloadThreatHuntCsvInput {
  # Threat hunt ID.
  huntId: UUID!
}
# Response for the operation to download threat hunt result as CSV.
type DownloadThreatHuntCsvReply {
  # Specifies if the download operation is successful.
  isSuccessful: Boolean!
}
input DownloadUserActivityCsvInput {
  # The filters to apply on the list of activities.
  filters: ListObjectFilesFiltersInput!

  # The day, (YYYY-MM-DD), from which to collect user activity.
  day: String!

  # The user's IANA timezone.
  timezone: String!
}
input DownloadUserFileActivityCsvInput {
  # The user to fetch activity for.
  userId: String!

  # The path's corresponding snapshot.
  snapshot: ResourceInput!

  # The path to get all activity from.
  nativePath: String!

  # The user's IANA timezone.
  timezone: String!

  # The day (YYYY-MM-DD) from which to collect all activity after.
  startDay: String!
}
# Input for downloading Virtual Machine file job config.
input DownloadVirtualMachineFileJobConfigInput {
  # Required. Supported in v9.0+
  # List of file names to download.
  fileNamesToDownload: [String!]!

  # Required. Supported in v9.0+
  # ID of the Virtual Machine the files are downloaded from.
  vmId: String!
}
# Input for downloading volume group snapshot files.
input DownloadVolumeGroupSnapshotFilesInput {
  # Required. ID of Snapshot.
  id: String!

  # The FID of the next fileset snapshot.
  nextSnapshotFid: UUID

  # Configuration information for a job to download files and folders from a volume group backup.
  config: VolumeGroupDownloadFilesJobConfigInput!

  # Filter for delta type.
  deltaTypeFilter: [DeltaType!]
}
input DownloadVolumeGroupSnapshotFromLocationInput {
  # Additional configuration for the operation. This consists of the SLA Domain to be applied to the snapshot after it is downloaded.
  downloadConfig: VolumeGroupSnapshotDownloadConfigInput

  # Required. ID of the replication location.
  locationId: String!

  # Required. ID of the snapshot to be downloaded.
  snapshotId: String!
}
# Input for downloading Virtual Machine files.
input DownloadVsphereVirtualMachineFilesInput {
  # Required. 
  config: DownloadVirtualMachineFileJobConfigInput!

  # Required. ID of the snapshot.
  id: String!
}
# Represents the OneDrive contents to be restored.
input DriveRestoreConfig {
  filesToRestore: [FileInfo!]!
  foldersToRestore: [FolderInfo!]!
  restoreFolderPath: String!
}
# Duplicated vSphere vApp.
type DuplicatedVapp {
  # FID of the vApp.
  fid: UUID!

  # The Rubrik cluster for this object.
  cluster: Cluster!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!
}
# Duplicated vSphere virtual machine.
type DuplicatedVm {
  # FID of the virtual machine.
  fid: UUID!

  # The Rubrik cluster for this virtual machine.
  cluster: Cluster!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The snapshot distribution of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # Specifies statistics, such as capacity, for the protected objects.
  reportWorkload: Snappable
}
# Duration.
type Duration {
  # Duration.
  duration: Int!

  # Unit of duration.
  unit: RetentionUnit!
}
# Response for the request to get a download link for Rubrik Edge Deployment Tool for Microsoft Windows.
type EdgeWindowsToolLink {
  # Download link for Rubrik Edge Deployment Tool for Microsoft Windows.
  downloadLink: String!
}
# Filter to return objects with an effective SLA Domain ID that matches one of the specified SLA Domain IDs.
input EffectiveSlaFilter {
  # Effective SLA Domain IDs to filter for.
  effectiveSlaIds: [String!]!
}
# Supported in v5.1+
type EffectiveSlaHolder {
  # Required. Supported in v5.1+
  # v5.1: ID of the effective SLA domain
  # v5.2+: The ID of the SLA Domain that controls the protection of the Rubrik object.
  effectiveSlaDomainId: String!

  # Required. Supported in v5.1+
  # v5.1: name of the effective SLA domain
  # v5.2+: The name of the SLA Domain that controls the protection of the Rubrik object.
  effectiveSlaDomainName: String!

  # Supported in v5.1+
  # v5.1: Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
  # v5.2+: Optional. This field contains the managed ID of of the Polaris-managed effective SLA Domain.
  effectiveSlaDomainPolarisManagedId: String

  # Supported in v5.1+
  # v5.1: ID of the object from which the effective SLA domain is inherited.
  # v5.2+: The ID of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
  effectiveSlaSourceObjectId: String

  # Supported in v5.1+
  # v5.1: Name of the object from which the effective SLA domain is inherited.
  # v5.2+: The name of the parent of the Rubrik object from which the SLA Domain that controls the protection of Rubrik object is inherited.
  effectiveSlaSourceObjectName: String

  # Supported in v5.1+
  # v5.1: A Boolean that indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA Domain is a Retention Lock SLA Domain.
  # v5.2+: Indicates whether the effective SLA Domain is Retention Locked. When this value is 'true', the effective SLA domain is a Retention Lock SLA Domain.
  isEffectiveSlaDomainRetentionLocked: Boolean
}
# Elastic storage configuration for CCES (Cloud Cluster with Elastic Storage).
type ElasticStorageConfig {
  # Object Store location (bucket name on S3 and container on Azure) name.
  locationName: String!

  # Rubrik generated ID of the object store location.
  locationId: String!

  # Specifies whether the Cloud Cluster is using immutable cloud storage.
  isImmutable: Boolean!

  # Specifies whether the Cloud Cluster is using managed identities to authenticate to Azure cloud storage.
  isUsingManagedIdentity: Boolean!
}
# Email address and to/from/both.
input EmailAddressFilter {
  emailAddress: String = ""
  emailAddressType: EmailAddressFilterType = TO
}
# Email address filter for Mailbox search.
enum EmailAddressFilterType {
  # Search sender or recipients by email.
  ALL

  # Search sender by email.
  FROM

  # Search recipients by email.
  TO
}
# Enable/disable auto fmd upload on given cluster.
input EnableAutomaticFmdUploadInput {
  # The uuid of the cluster.
  clusterId: UUID!

  # To enable or disable auto fmd upload.
  enabled: Boolean!
}
# Status of 'enable automatic upload' service on certain cluster.
type EnableAutomaticFmdUploadReply {
  # The cluster UUID.
  clusterId: String!

  # Specifies whether automatic snapshot metadata (FMD) upload is enabled
  # for the cluster or not.
  enabled: Boolean!
}
# Input required to enable application consistent snapshots.
input EnableDisableAppConsistencyInput {
  # List of virtual machine Rubrik IDs.
  workloadIds: [UUID!]!

  # Specifies whether to enable app consistency on VMs.
  enable: Boolean!

  # Object type for enabling app consistent protection.
  objectType: CloudNativeVmAppConsistentObjectType!
}
# List of workload IDs classified based on success or failure of enabling or disabling application-consistent protection for virtual machines.
type EnableDisableAppConsistencyReply {
  # List of workload IDs for which enabling or disabling app-consistency failed.
  failedWorkloadIds: [UUID!]!

  # List of workload IDs for which enabling or disabling app-consistency succeeded.
  successWorkloadIds: [UUID!]!
}
# Configuration for enabling Sharepoint.
input EnableO365SharePointInput {
  # Exocompute Cluster ID.
  exocomputeClusterId: String!
}
# Supported in v5.3+
input EnablePerLocationPauseInput {
  # Supported in v8.0+
  # Specifies whether replication jobs are paused immediately while pulling data from the source cluster. When this value is 'true', replication jobs will be paused immediately without losing their progress. Either 'shouldCancelImmediately' or 'shouldPauseImmediately' must be 'true', but not both at the same time. When both are 'false', current running replication jobs will be allowed to finish before pausing.
  shouldPauseImmediately: Boolean

  # Required. Supported in v5.3+
  # v5.3-v7.0: Specifies whether replication jobs are canceled immediately. When this value is 'true,' replication jobs will be canceled immediately. In all other cases, current running replication jobs will be allowed to finish before pausing.
  # 
  # v8.0+: Specifies whether replication jobs are canceled immediately. When this value is 'true', replication jobs will be canceled immediately.
  shouldCancelImmediately: Boolean!

  # Required. Supported in v5.3+
  # Replication from specified Rubrik clusters are paused. Specified Rubrik clusters must be active replication sources of local Rubrik cluster.
  sourceClusterUuids: [String!]!
}
# Input for replication per location pause.
input EnablePerLocationPauseInputVariable {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. v5.3-v7.0: A configuration value that specifies which source clusters pause replication. Replication jobs can be canceled immediately or be allowed to finish.
  # 
  # v8.0+: A configuration value that specifies which source clusters pause replication. Replication jobs can be canceled immediately, paused immediately or be allowed to finish.
  enablePerLocationPause: EnablePerLocationPauseInput!
}
# Input for enabling a Rubrik Support representative's access to the customer account.
input EnableSupportUserAccessInput {
  # User ID of the customer on whose behalf the Rubrik Support representative is accessing the customer account.
  impersonatedUserId: String = ""

  # Ticket associated with the support user access request.
  ticketNumber: String = ""

  # Duration of support user access, in hours.
  durationInHours: Int = 0
}
# Input for enabling archival location.
input EnableTargetInput {
  # Id of the archival location to be enabled.
  id: String = ""
}
# Archival location enable result.
type EnableTargetReply {
  # Rubrik Security Cloud managed location ID.
  locationId: String!

  # Ownership status of the archival location.
  status: ArchivalLocationStatus!
}
# Request to enable Threat Monitoring for a Rubrik cluster.
input EnableThreatMonitoringInput {
  # Threat Monitoring enablement status.
  status: ThreatMonitoringEnablementStatusInput!
}
# Level of encryption detected.
enum EncryptionLevel {
  # High level of encryption.
  HIGH

  # Low level of encryption.
  LOW

  # Medium level of encryption.
  MEDIUM

  # Encryption level is unavailable.
  UNAVAILABLE
}
# A recurrence range with a start and end (e.g. repeat the pattern from 7/29/2019 until 4/13/2022).
type EndDateRecurrenceRange {
  # The starting date of the recurrence.
  startDate: DateTime!

  # The ending date of the recurrence.
  endDate: DateTime!
}
# Input for invoking the API endpoint to end a Managed Volume snapshot.
input EndManagedVolumeSnapshotInput {
  # Snapshot parameters. By default, all Managed Volume snapshots follow the SLA Domain assigned to the Managed Volume. To assign a different SLA Domain to this snapshot, specify the ID of the overriding SLA Domain here. Assigning an overriding SLA Domain turns this snapshot into an on-demand snapshot.
  params: EndSnapshotManagedVolumeRequestInput

  # Specifies an interval in seconds. The snapshot will not end before the specified interval elapses. When this value is defined, the end snapshot operation happens asynchronously after the API call returns.
  endSnapshotDelayInSeconds: Int

  # A string representing the owner of a snapshot. The end snapshot request fails when the owner of the in-flight snapshot is different from the one specified in the request.
  ownerId: String

  # Required. ID of Managed Volume.
  id: String!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Response for end managed volume snapshot.
type EndManagedVolumeSnapshotReply {
  # Supported in v7.0+
  # Status of the asynchronous request that was initiated for the Managed Volume End Snapshot job.
  asyncRequestStatus: AsyncRequestStatus

  # Summary of the Managed Volume snapshot.
  managedVolumeSnapshotSummary: ManagedVolumeSnapshotSummary
}
# Supported in v7.0+
input EndSnapshotManagedVolumeRequestInput {
  # Supported in v7.0+
  # Specifies whether the current request is synchronous or asynchronous. By default the value of isAsync is true. In other words, when a value is not specified, the request is asynchronous.
  isAsync: Boolean

  # Supported in v7.0+
  # Overridden SLA Domain Id for Managed Volume snapshot.
  retentionConfig: BaseOnDemandSnapshotConfigInput
}
# The status code and message describing an error.
type ErrorInfo {
  # The error's three digit status code.
  statusCode: Int!

  # The message describing the error.
  errorMessage: String!
}
# A user's EULA acceptance state.
type EulaState {
  # Specifies whether a user has accepted the EULA.
  isAccepted: Boolean! @deprecated(reason: "Use pactsafeEulaState instead.")

  # Specifies whether PactSafe EULA should be used.
  isPactsafeEnabled: Boolean! @deprecated(reason: "Use isPactsafeV2Enabled instead.")

  # Specifies whether PactSafe EULA version 2 should be used.
  isPactsafeV2Enabled: Boolean!
}
# Enum representing all the cluster types.
enum EventClusterType {
  # Cloud Cluster.
  CLOUD

  # Exocompute cluster.
  EXO_COMPUTE

  # On-premises cluster.
  ON_PREM

  # ROBO cluster.
  ROBO

  # Rubrik SaaS cluster.
  RUBRIK_SAAS

  # Unknown cluster type.
  UNKNOWN_CLUSTER_TYPE
}
# An Event Digest.
type EventDigest {
  # Account related to the event digest.
  account: String!

  # ID of the event digest.
  digestId: Int!

  # Name of the event digest.
  digestName: String!

  # Frequency, in hours, with which the event digests are sent.
  frequency: Int!

  # Specifies whether to send the event digest immediately.
  isImmediate: Boolean!

  # Event digest configuration.
  eventDigestConfigJson: String!

  # User ID of the recipient.
  recipientUserId: String!

  # Specifies whether to include audits in the event digest.
  includeAudits: Boolean!

  # Specifies whether to include events in the event digest.
  includeEvents: Boolean!

  # Specifies the cluster UUIDs that this event digest applies to.
  clusterUuids: [UUID!]!
}
# Event digest configuration to specify events criteria.
input EventDigestConfig {
  # Object type to include in event digest.
  objectType: [ActivityObjectTypeEnum!]

  # Activity statuses to include in event digest.
  activityStatus: [ActivityStatusEnum!]

  # Activity types included in event digest. Valid types are: Storage, THREAT_MONITORING, Tpr, Classification, LegalHold, HypervScvmm, THREAT_FEED, Hdfs, SCHEDULE_RECOVERY, RadarAnalysis, VolumeGroup, LockSnapshot, Instantiate, BULK_RECOVERY, LOG_BACKUP, HypervServer, ISOLATED_RECOVERY, Configuration, Upgrade, ENCRYPTION_MANAGEMENT_OPERATION, CloudNativeVm, StorageArray, Connection, Conversion, AuthDomain, UnknownEventType, CloudNativeVirtualMachine, Discovery, Replication, Maintenance, Support, Fileset, LocalRecovery, System, Failover, OWNERSHIP, StormResource, Diagnostic, Vcd, Anomaly, Archive, CloudNativeSource, HostEvent, AwsEvent, ResourceOperations, Backup, Sync, Hardware, TestFailover, Recovery, Download, EmbeddedEvent, TENANT_OVERLAP, NutanixCluster, VCenter, Index, ThreatHunt, and OTHER_FILTER_ITEM.
  activityType: [String!]

  # Audit types included in event digest. Valid types are: Audit, Classification, SlaModification, LegalHold, BULK_RECOVERY, THREAT_HUNT, ISOLATED_RECOVERY, Configuration, ENCRYPTION_MANAGEMENT_OPERATION, RECOVERY_SCHEDULE, QUARANTINE, Login, LOCAL_RECOVERY, Failover, Diagnostic, RUBY_AI, UnknownUserAuditType, SlaAssignment, AccessManagement, Search, Backup, Sync, Recovery, Download, FILE_DOWNLOAD, and Index.
  auditType: [UserAuditTypeEnum!]

  # Activity severities to include in event digest.
  activitySeverity: [ActivitySeverityEnum!]

  # Clusters to include in event digest.
  clusters: [String!]

  # Email addresses of the event digest recipients.
  emailAddresses: [String!]
}
# Represents the Calendar event to be restored.
input EventInfo {
  # ID of the event to be restored.
  eventId: String!

  # ID of the snapshot from which to restore.
  snapshotId: UUID!
}
# Enum representing all the possible object types which generate events.
enum EventObjectType {
  # Active Directory domain.
  ACTIVE_DIRECTORY_DOMAIN

  # Active Directory domain controller.
  ACTIVE_DIRECTORY_DOMAIN_CONTROLLER

  # App Blueprint object.
  APP_BLUEPRINT

  # AppRecovery object.
  APP_FLOWS

  # Atlassian site.
  ATLASSIAN_SITE

  # AWS account object.
  AWS_ACCOUNT

  # AWS object.
  AWS_EVENT_TYPE

  # AWS native account object.
  AWS_NATIVE_ACCOUNT

  # AWS native EBS volume object.
  AWS_NATIVE_EBS_VOLUME

  # AWS native EC2 instance object.
  AWS_NATIVE_EC2_INSTANCE

  # AWS native RDS instance.
  AWS_NATIVE_RDS_INSTANCE

  # AWS native S3 bucket object.
  AWS_NATIVE_S3_BUCKET

  # Azure AD Directory object.
  AZURE_AD_DIRECTORY

  # Azure native disk object.
  AZURE_NATIVE_DISK

  # Azure native subscription object.
  AZURE_NATIVE_SUBSCRIPTION

  # Azure native virtual machine object.
  AZURE_NATIVE_VM

  # Azure SQL database object.
  AZURE_SQL_DATABASE

  # Azure SQL database server object.
  AZURE_SQL_DATABASE_SERVER

  # Azure SQL managed instance object.
  AZURE_SQL_MANAGED_INSTANCE

  # Azure SQL managed instance database object.
  AZURE_SQL_MANAGED_INSTANCE_DATABASE

  # Azure storage account.
  AZURE_STORAGE_ACCOUNT

  # Capacity bundle object.
  CAPACITY_BUNDLE

  # Cassandra column family.
  CASSANDRA_COLUMN_FAMILY

  # Cassandra keyspace.
  CASSANDRA_KEYSPACE

  # Cassandra source.
  CASSANDRA_SOURCE

  # Certificate object.
  CERTIFICATE

  # Certificate Management.
  CERTIFICATE_MANAGEMENT

  # Cloud Direct NAS export.
  CLOUD_DIRECT_NAS_EXPORT

  # Cluster object.
  CLUSTER

  # Compute instance object.
  COMPUTE_INSTANCE

  # Data location object.
  DATA_LOCATION

  # Db2 database object.
  DB2_DATABASE

  # Db2 instance object.
  DB2_INSTANCE

  # EC2 instance object.
  EC2_INSTANCE

  # Encryption Management object.
  ENCRYPTION_MANAGEMENT

  # Envoy object.
  ENVOY

  # Exchange database object.
  EXCHANGE_DATABASE

  # Exocompute object.
  EXOCOMPUTE

  # Failover cluster app.
  FAILOVER_CLUSTER_APP

  # GCP native disk.
  GCP_NATIVE_DISK

  # GCP native GCE instance.
  GCP_NATIVE_GCE_INSTANCE

  # GCP native project.
  GCP_NATIVE_PROJECT

  # Host object.
  HOST

  # HyperV virtual machine object.
  HYPERV_VM

  # Atlassian Jira project.
  JIRA_PROJECT

  # Atlassian Jira settings.
  JIRA_SETTINGS

  # Job instance.
  JOB_INSTANCE

  # Kubernetes Cluster object.
  K8S_CLUSTER

  # Kubernetes Protection Set object.
  K8S_PROTECTION_SET

  # Kubernetes cluster object.
  KUPR_CLUSTER

  # Kubernetes namespace object.
  KUPR_NAMESPACE

  # LDAP object.
  LDAP

  # Linux fileset object.
  LINUX_FILESET

  # Linux host object.
  LINUX_HOST

  # Managed Volume object.
  MANAGED_VOLUME

  # MongoDB collection.
  MONGODB_COLLECTION

  # MongoDB database.
  MONGODB_DATABASE

  # MongoDB source.
  MONGODB_SOURCE

  # MongoDB collection.
  MONGO_COLLECTION

  # MongoDB database.
  MONGO_DATABASE

  # MongoDB source.
  MONGO_SOURCE

  # MsSQL Object.
  MSSQL

  # NAS fileset object.
  NAS_FILESET

  # NAS host object.
  NAS_HOST

  # NAS system.
  NAS_SYSTEM

  # Nutanix virtual machine object.
  NUTANIX_VM

  # O365 Calendar object.
  O365_CALENDAR

  # O365 Group.
  O365_GROUP

  # O365 Mailbox object.
  O365_MAILBOX

  # O365 OneDrive object.
  O365_ONEDRIVE

  # O365 Organization object.
  O365_ORGANIZATION

  # O365 SharePoint drive object.
  O365_SHARE_POINT_DRIVE

  # O365 SharePoint list object.
  O365_SHARE_POINT_LIST

  # O365 Site object.
  O365_SITE

  # O365 Team object.
  O365_TEAM

  # OAuth token.
  OAUTH_TOKEN

  # Object protection.
  OBJECT_PROTECTION

  # Auth domain object.
  OBJECT_TYPE_AUTH_DOMAIN

  # Cloud-native virtual machine object.
  OBJECT_TYPE_CLOUD_NATIVE_VIRTUAL_MACHINE

  # Cloud-native virtual machine.
  OBJECT_TYPE_CLOUD_NATIVE_VM

  # HDFS object.
  OBJECT_TYPE_HDFS

  # HyperV SCVMM object.
  OBJECT_TYPE_HYPERV_SCVMM

  # HyperV server object.
  OBJECT_TYPE_HYPERV_SERVER

  # Nutanix cluster object.
  OBJECT_TYPE_NUTANIX_CLUSTER

  # Nutanix Prism Central object.
  OBJECT_TYPE_NUTANIX_PRISM_CENTRAL

  # Storage array.
  OBJECT_TYPE_STORAGE_ARRAY

  # Upgrade.
  OBJECT_TYPE_UPGRADE

  # VCD.
  OBJECT_TYPE_VCD

  # VCenter.
  OBJECT_TYPE_VCENTER

  # Volume group.
  OBJECT_TYPE_VOLUME_GROUP

  # Oracle.
  ORACLE

  # Oracle database object.
  ORACLE_DB

  # Oracle host object.
  ORACLE_HOST

  # Oracle RAC object.
  ORACLE_RAC

  # Public cloud machine instance.
  PUBLIC_CLOUD_MACHINE_INSTANCE

  # Rubrik cluster replication pair.
  REPLICATION_PAIR

  # Rubrik SaaS account object.
  RUBRIK_SAAS_ACCOUNT

  # Rubrik SAAS EBS volume.
  RUBRIK_SAAS_EBS_VOLUME

  # Rubrik SAAS EC2 instance.
  RUBRIK_SAAS_EC2_INSTANCE

  # SAML single sign-on.
  SAML_SSO

  # SAP HANA database.
  SAP_HANA_DB

  # SAP HANA system.
  SAP_HANA_SYSTEM

  # Share fileset object.
  SHARE_FILESET

  # SLA domain.
  SLA_DOMAIN

  # Samba domain.
  SMB_DOMAIN

  # SnapMirror cloud.
  SNAP_MIRROR_CLOUD

  # Storage array Volume group.
  STORAGE_ARRAY_VOLUME_GROUP

  # Storage location.
  STORAGE_LOCATION

  # Storm object.
  STORM

  # Support bundle.
  SUPPORT_BUNDLE

  # Unknown event object type.
  UNKNOWN_EVENT_OBJECT_TYPE

  # User.
  USER

  # VCD vApp.
  VCD_VAPP

  # VMware compute cluster.
  VMWARE_COMPUTE_CLUSTER

  # VMware host.
  VMWARE_HOST

  # VMware virtual machine.
  VMWARE_VM

  # Webhook object.
  WEBHOOK

  # Windows fileset.
  WINDOWS_FILESET

  # Windows host.
  WINDOWS_HOST
}
# Enum representing the severity of the event.
enum EventSeverity {
  # Severity Critical.
  SEVERITY_CRITICAL

  # Severity Informational.
  SEVERITY_INFO

  # Severity Warning.
  SEVERITY_WARNING
}
# Enum representing all the possible event statuses.
enum EventStatus {
  # Canceled.
  CANCELED

  # Cancelling.
  CANCELING

  # Failure.
  FAILURE

  # Information.
  INFO

  # Represents completion with warnings.
  PARTIAL_SUCCESS

  # Queued status.
  QUEUED

  # Running.
  RUNNING

  # Success.
  SUCCESS

  # Task failure status.
  TASK_FAILURE

  # Task success status.
  TASK_SUCCESS

  # Unknown event status.
  UNKNOWN_EVENT_STATUS

  # Warning.
  WARNING
}
# Enum representing all the possible event types.
enum EventType {
  # Anomaly event.
  ANOMALY

  # Archive event.
  ARCHIVE

  # Auth domain event.
  AUTH_DOMAIN

  # Aws event.
  AWS_EVENT

  # Backup event.
  BACKUP

  # Bulk recovery event type.
  BULK_RECOVERY

  # Classification event.
  CLASSIFICATION

  # Event from cloud-native source.
  CLOUD_NATIVE_SOURCE

  # Event from cloud-native virtual machine.
  CLOUD_NATIVE_VIRTUAL_MACHINE

  # Event from cloud-native virtual machine.
  CLOUD_NATIVE_VM

  # Configuration event.
  CONFIGURATION

  # Connection event.
  CONNECTION

  # Conversion event.
  CONVERSION

  # Diagnostic event.
  DIAGNOSTIC

  # Discovery event.
  DISCOVERY

  # Download event.
  DOWNLOAD

  # Embedded event.
  EMBEDDED_EVENT

  # Encryption Management event type.
  ENCRYPTION_MANAGEMENT_OPERATION

  # Failover event.
  FAILOVER

  # Fileset event.
  FILESET

  # Hardware event.
  HARDWARE

  # HDFS event.
  HDFS

  # Host event.
  HOST_EVENT

  # Hyper-V system center virtual machine event.
  HYPERV_SCVMM

  # HyperV Server event.
  HYPERV_SERVER

  # Index event.
  INDEX

  # Instantiate event.
  INSTANTIATE

  # Isolated recovery.
  ISOLATED_RECOVERY

  # Legal hold event.
  LEGAL_HOLD

  # Local recovery event.
  LOCAL_RECOVERY

  # Snapshot lock event.
  LOCK_SNAPSHOT

  # Log Backup event type.
  LOG_BACKUP

  # Maintenance event.
  MAINTENANCE

  # Nutanix cluster event.
  NUTANIX_CLUSTER

  # Ownership change event.
  OWNERSHIP

  # Ransomware Investigation analysis event.
  RANSOMWARE_INVESTIGATION_ANALYSIS

  # Recovery event.
  RECOVERY

  # Replication event.
  REPLICATION

  # Resource operations event.
  RESOURCE_OPERATIONS

  # Orchestrated Application Recovery schedule-recovery event type.
  SCHEDULE_RECOVERY

  # Storage event.
  STORAGE

  # Storage array event.
  STORAGE_ARRAY

  # Storm resource event.
  STORM_RESOURCE

  # Support event.
  SUPPORT

  # Sync event.
  SYNC

  # System event.
  SYSTEM

  # Tenant overlap event type.
  TENANT_OVERLAP

  # Test failover event.
  TEST_FAILOVER

  # Threat feed event type.
  THREAT_FEED

  # Threat hunt event.
  THREAT_HUNT

  # Threat monitoring event type.
  THREAT_MONITORING

  # TPR event.
  TPR

  # Unknown event type.
  UNKNOWN_EVENT_TYPE

  # Upgrade event.
  UPGRADE

  # VCD event.
  VCD

  # Vcenter event.
  VCENTER

  # Volume group event.
  VOLUME_GROUP
}
# Supported in v8.0+
input ExchangeBackupJobConfigInput {
  # Supported in v8.0+
  # Specifies whether to take a full snapshot. When true, a full snapshot is taken. When false, an incremental snapshot is taken.
  forceFullSnapshot: Boolean
  baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
}
# Supported in v8.0+
# Backup preference of an Exchange DAG.
enum ExchangeBackupPreference {
  EXCHANGE_BACKUP_PREFERENCE_PASSIVE_ONLY
  EXCHANGE_BACKUP_PREFERENCE_PREFER_PASSIVE
}
# Exchange DAG details object.
type ExchangeDag implements CdmHierarchyObject , HierarchyObject {
  # UUID of the primary cluster.
  primaryClusterUuid: UUID!

  # ID associated with the Exchange DAG in CDM.
  cdmId: String!

  # Number of hosts associated with the Exchange DAG.
  totalHosts: Int!

  # Backup Preference for databases present in the Exchange Dag.
  backupPreference: String!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): ExchangeDagDescendantTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ExchangeDag objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ExchangeDagConnection {
  # List of ExchangeDag objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ExchangeDagEdge!]!

  # List of ExchangeDag objects.
  nodes: [ExchangeDag!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ExchangeDag objects matching the request arguments.
  count: Int!
}
# Descendant of the Exchange DAG object.
interface ExchangeDagDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ExchangeDagDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ExchangeDagDescendantTypeConnection {
  # List of ExchangeDagDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ExchangeDagDescendantTypeEdge!]!

  # List of ExchangeDagDescendantType objects.
  nodes: [ExchangeDagDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ExchangeDagDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the ExchangeDagDescendantType object. This wrapper is used for pagination.
type ExchangeDagDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ExchangeDagDescendantType object wrapped by this edge.
  node: ExchangeDagDescendantType!
}
# Wrapper around the ExchangeDag object. This wrapper is used for pagination.
type ExchangeDagEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ExchangeDag object wrapped by this edge.
  node: ExchangeDag!
}
# Supported in v8.0+
type ExchangeDagSummary {
  # Required. Supported in v8.0+
  # SLA Domain ID assigned to the Exchange DAG.
  configuredSlaDomainId: String!

  # Required. Supported in v8.0+
  # Type of the SLA Domain assigned to the Exchange DAG.
  configuredSlaType: String!

  # Required. Supported in v8.0+
  # ID of the Exchange DAG.
  id: String!

  # Required. Supported in v8.0+
  # Name of the Exchange DAG.
  name: String!
  backupPreference: ExchangeBackupPreference!
}
# Supported in v8.0+
input ExchangeDagUpdateConfigInput {
  # Required. Supported in v8.0+
  # ID of the Exchange DAG.
  id: String!

  # Required. Supported in v8.0+
  updateProperties: ExchangeDagUpdateInput!
}
# Supported in v8.0+
input ExchangeDagUpdateInput {
  # Required. Supported in v8.0+
  backupPreference: ExchangeBackupPreference!
}
# Exchange Database details object.
type ExchangeDatabase implements CdmHierarchyObject , HierarchySnappable , CdmHierarchySnappableNew , HierarchyObject , ExchangeDagDescendantType , ExchangeServerDescendantType {
  # UUID of the primary cluster.
  primaryClusterUuid: UUID!

  # ID associated with the Exchange Database in CDM.
  cdmId: String!

  # Boolean flag indicating if the database is disconnected and has snapshots present in CDM cluster.
  isRelic: Boolean!

  # Total number of database copies.
  totalCopies: Int!

  # Number of database copies which are active.
  activeCopies: Int!

  # Exchange Server parent of the database.
  exchangeServer: ExchangeServer!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Paginated list of ExchangeDatabase objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ExchangeDatabaseConnection {
  # List of ExchangeDatabase objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ExchangeDatabaseEdge!]!

  # List of ExchangeDatabase objects.
  nodes: [ExchangeDatabase!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ExchangeDatabase objects matching the request arguments.
  count: Int!
}
# Wrapper around the ExchangeDatabase object. This wrapper is used for pagination.
type ExchangeDatabaseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ExchangeDatabase object wrapped by this edge.
  node: ExchangeDatabase!
}
# Exchange live mount.
type ExchangeLiveMount {
  # Describes if the live mount is ready.
  isReady: Boolean!

  # NodeId of the node with the live mount.
  nodeCompositeId: String!

  # Node Ip of the node with the live mount.
  nodeIp: String!

  # Fid of the live mount.
  id: UUID!

  # CDM ID of the live mount.
  cdmId: UUID!

  # Source snapshot of the live mount.
  sourceSnapshot: CdmSnapshot!

  # Cluster of the live mount.
  cluster: Cluster!

  # Source database of the live mount.
  sourceDatabase: ExchangeDatabase
}
# Paginated list of ExchangeLiveMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ExchangeLiveMountConnection {
  # List of ExchangeLiveMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ExchangeLiveMountEdge!]!

  # List of ExchangeLiveMount objects.
  nodes: [ExchangeLiveMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ExchangeLiveMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the ExchangeLiveMount object. This wrapper is used for pagination.
type ExchangeLiveMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ExchangeLiveMount object wrapped by this edge.
  node: ExchangeLiveMount!
}
# Filter for Exchange Live Mount results.
enum ExchangeLiveMountFilterField {
  # Cluster UUID filter for Exchange Live Mount results.
  CLUSTER_UUID

  # Exchange Database ID filter for Exchange Live Mount results.
  DATABASE_ID

  # Organization ID filter for Exchange Live Mount results.
  ORG_ID

  # Filter is not specified. Any filter text would
  # not be considered.
  UNSPECIFIED
}
# Filter exchange live mount results.
input ExchangeLiveMountFilterInput {
  # Type of filter.
  field: ExchangeLiveMountFilterField = UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Sort by parameters for Exchange Live Mount results.
enum ExchangeLiveMountSortByField {
  # Sort by Cluster Name.
  CLUSTER_NAME

  # Sort by Mount Creation Date.
  CREATION_DATE

  # Sort by field is not specified. Any filter text would
  # not be considered.
  UNSPECIFIED
}
# Sort exchange live mounts results.
input ExchangeLiveMountSortByInput {
  # Field for exchange live mounts sort by.
  field: ExchangeLiveMountSortByField = UNSPECIFIED

  # Sort order for exchange live mounts sort by.
  sortOrder: SortOrder = ASC
}
# Supported in v8.0+
input ExchangeMountSnapshotConfigInput {
  # Supported in v8.0+
  # Domain name of the users that are authenticated to access the SMB share.
  smbDomainName: String

  # Supported in v8.0+
  # IP address of the hosts that are authenticated to access the SMB share.
  smbValidIps: [String!] = []

  # Supported in v8.0+
  # Usernames of the users authenticated to access the SMB share.
  smbValidUsers: [String!] = []
}
# Exchange Server details object.
type ExchangeServer implements CdmHierarchyObject , HierarchyObject , PhysicalHostDescendantType , PhysicalHostPhysicalChildType {
  # UUID of the primary cluster.
  primaryClusterUuid: UUID!

  # ID associated with the Exchange Server in CDM.
  cdmId: String!

  # Number of database copies present in the Exchange Server.
  totalDbs: Int!

  # Version of the Exchange Server.
  version: String!

  # Indicates that the underlying host has conflicts with Exchange Server as a result of its volume group backup.
  hasVgConflict: Boolean!

  # Indicates that the user has resolved the conflict between Exchange Server and volume group backup running on the host.
  vgConflictResolvedByUser: Boolean!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): ExchangeServerDescendantTypeConnection!

  # Host parent for the Exchange Server.
  host: PhysicalHost!

  # Dag parent for Exchange Server.
  exchangeDag: ExchangeDag

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ExchangeServer objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ExchangeServerConnection {
  # List of ExchangeServer objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ExchangeServerEdge!]!

  # List of ExchangeServer objects.
  nodes: [ExchangeServer!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ExchangeServer objects matching the request arguments.
  count: Int!
}
# Descendant of the Exchange Server object.
interface ExchangeServerDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ExchangeServerDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ExchangeServerDescendantTypeConnection {
  # List of ExchangeServerDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ExchangeServerDescendantTypeEdge!]!

  # List of ExchangeServerDescendantType objects.
  nodes: [ExchangeServerDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ExchangeServerDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the ExchangeServerDescendantType object. This wrapper is used for pagination.
type ExchangeServerDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ExchangeServerDescendantType object wrapped by this edge.
  node: ExchangeServerDescendantType!
}
# Wrapper around the ExchangeServer object. This wrapper is used for pagination.
type ExchangeServerEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ExchangeServer object wrapped by this edge.
  node: ExchangeServer!
}
# Input to mark volumes to be excluded for EC2 snapshot.
input ExcludeAwsNativeEbsVolumesFromSnapshotInput {
  # Rubrik ID of EC2 instance.
  awsNativeEc2InstanceId: UUID!

  # List of maps of Rubrik IDs to excluded status of volumes.
  volumeIdExclusions: [VolumeIdExclusion!]!
}
# Inputs to trigger Exclusion of Azure Native Managed Disk From Snapshot.
input ExcludeAzureNativeManagedDisksFromSnapshotInput {
  # Rubrik ID of the virtual machine (VM).
  virtualMachineRubrikId: UUID!

  # A list that specifies which disks are excluded from snapshots of the virtual machine.
  managedDiskExclusions: [ManagedDiskExclusion!]!
}
# Configuration for the exclusion of SharePoint objects from protection.
input ExcludeSharepointObjectsFromProtectionInput {
  # ID of the org.
  orgId: String!

  # Configurations for the exclusions for each SharePoint site collection.
  exclusions: [O365FullSpSiteExclusions!]!
}
# Set disks to be included/excluded in snapshot.
input ExcludeVmDisksInput {
  # Fid of virtual disk.
  virtualDiskFid: UUID!

  # Specifies whether the virtual disk is excluded from the snapshot.
  excludeFromSnapshots: Boolean!
}
# Existing compute configuration.
input ExistingComputeConfig {
  vnetId: String = ""
  subnetId: String = ""
}
# Supported in v5.0+
# Specifies the retention policy to apply to existing snapshots when unprotecting an object.
enum ExistingSnapshotRetention {
  EXISTING_SNAPSHOT_RETENTION_EXPIRE_IMMEDIATELY
  EXISTING_SNAPSHOT_RETENTION_KEEP_FOREVER
  EXISTING_SNAPSHOT_RETENTION_RETAIN_SNAPSHOTS
}
# Details of an existing SSO Group.
input ExistingSsoGroupInput {
  # Id of the SSO group.
  id: String!

  # Specifies whether the SSO group is an org admin or not.
  isOrgAdmin: Boolean!
}
# Existing storage account configuration.
input ExistingStorageAccountConfig {
  id: String = ""
}
# Details of an existing user.
type ExistingUser {
  # ID of the user.
  id: String!

  # Specifies whether the user is an org admin.
  isOrgAdmin: Boolean!

  # Specifies user details.
  user: User!
}
# Details of the existing user.
input ExistingUserInput {
  # Id of the user.
  id: String!

  # Specifies whether the user should be an org admin or not.
  isOrgAdmin: Boolean!
}
# Describes the Exocompute health check status.
type ExocomputeHealthCheckStatus {
  # Status of the health check.
  status: ExocomputeHealthCheckStatusValue!

  # Time of last update for the health check status.
  lastUpdatedAt: DateTime

  # ID for the health check status job.
  taskchainId: String!

  # Reason for the health check failure.
  failureReason: String!
}
# Status values for Exocompute health check.
enum ExocomputeHealthCheckStatusValue {
  # Exocompute is healthy.
  HEALTHY

  # Health check job failed to determine the Exocompute health status.
  JOB_UNSUCCESSFUL

  # Exocompute is not healthy.
  UNHEALTHY

  # Health check status is unknown.
  UNKNOWN

  # Health check is in progress.
  VERIFYING
}
type ExocomputeStorageAccountIds {
  ids: [String!]!
}
# Specifies the input for expiring downloaded Db2 snapshots.
input ExpireDownloadedDb2SnapshotsInput {
  # Specifies the time to expire only the snapshots that were taken after the specified time. The date-time string should be in ISO8601 format. For example, \"2016-01-01T01:23:45.678\".
  afterTime: DateTime

  # Specifies the time to expire only the snapshots that were taken before the specified time. The date-time string should be in ISO8601 format. For example, \"2016-01-01T01:23:45.678\".
  beforeTime: DateTime

  # Specifies whether to expire only the log snapshots or the data snapshots as well. If not configured, both data and log snapshots will be expired.
  shouldExpireLogsOnly: Boolean

  # Required. ID of the Db2 database.
  id: String!
}
# Input for expiring downloaded SAP HANA snapshots.
input ExpireDownloadedSapHanaSnapshotsInput {
  # Specifies the time to expire only the snapshots that were taken after the specified time. The date-time string should be in ISO8601 format. For example, \"2016-01-01T01:23:45.678\".
  afterTime: DateTime

  # Specifies the time to expire only the snapshots that were taken before the specified time. The date-time string should be in ISO8601 format. For example, \"2016-01-01T01:23:45.678\".
  beforeTime: DateTime

  # Specifies whether to expire only the log snapshots or the data snapshots as well. If not configured, both data and log snapshots will be expired.
  shouldExpireLogsOnly: Boolean

  # Required. ID of the SAP HANA database.
  id: String!
}
# Required. Input for exporting a Hyper-V virtual machine.
input ExportHypervVirtualMachineInput {
  # Required. Configuration for the export request.
  config: HypervExportSnapshotJobConfigInput!

  # Required. ID of snapshot.
  id: String!
}
# Configuration of the Kubernetes namespace snapshot to be exported and the target details.
input ExportK8sNamespaceInput {
  # The UUID of the Kubernetes namespace snapshot to be exported.
  snapshotUuid: UUID!

  # The UUID of the target cluster to export the namespace snapshot to.
  targetClusterUuid: UUID!

  # The name of the target namespace to export the namespace snapshot to.
  targetNamespaceName: String!

  # Filter resources based on labels.
  labelSelector: LabelSelector
}
# Input for the mutation to export a Managed Volume snapshot.
input ExportManagedVolumeSnapshotInput {
  # Snapshot ID.
  id: UUID!

  # Export parameters.
  params: ManagedVolumeExportRequestInput
}
# Input for exporting a SQL Server database.
input ExportMssqlDatabaseInput {
  # Required. Configuration for the export.
  config: ExportMssqlDbJobConfigInput!

  # Required. ID of the Microsoft SQL database.
  id: String!
}
# Supported in v5.0+
input ExportMssqlDbJobConfigInput {
  # Supported in v5.0+
  # A Boolean value that determines whether an existing database can be overwritten by a database this is exported from a backup. Set to false to prevent overwrites. This is the default. Set to true to allow overwrites.
  allowOverwrite: Boolean

  # Supported in v5.0+
  # A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
  finishRecovery: Boolean

  # Supported in v5.0+
  # Maximum number of parallel data streams that can be used to copy data to the target system.
  maxDataStreams: Int

  # Supported in v5.0+
  # The target path to store all data files.
  targetDataFilePath: String

  # Supported in v5.0+
  # One target path for each individual database file. Overrides targetDataFilePath and targetLogFilePath.
  targetFilePaths: [MssqlDbFileExportPathInput!] = []

  # Supported in v5.0+
  # The target path to store all log files.
  targetLogFilePath: String

  # Required. Supported in v5.0+
  recoveryPoint: MssqlRecoveryPointInput!

  # Required. Supported in v5.0+
  # Name of the new database.
  targetDatabaseName: String!

  # Required. Supported in v5.0+
  # ID of the Microsoft SQL instance for the new database.
  targetInstanceId: String!
}
# Input for exporting a Nutanix snapshot.
input ExportNutanixSnapshotInput {
  # Required. Configuration for the export request.
  config: NutanixVmExportSnapshotJobConfigInput!

  # Required. ID of snapshot.
  id: String!
}
# Configuration for O365 mailbox export.
input ExportO365MailboxInput {
  # Polaris ID of O365 subscription.
  orgUuid: UUID

  # Polaris ID of the source mailbox.
  fromMailboxUuid: UUID!

  # Polaris ID of the destination mailbox.
  toMailboxUuid: UUID!

  # Polaris ID of restoring snapshot.
  snapshotUuid: UUID

  # Configuration for restore job.
  exportConfigs: [RestoreObjectConfig!]!

  # Specifies the recovery type for the job.
  actionType: O365RestoreActionType

  # In-place restore configuration for the restore job.
  inplaceRestoreConfig: InplaceRestoreConfig
}
# Input for ExportOracleDatabase.
input ExportOracleDatabaseInput {
  # Request parameters for the Oracle database export.
  request: CreateExportOracleDbInput!

  # Advanced Recovery Configuration map for the Oracle database export.
  advancedRecoveryConfigMap: [AdvancedRecoveryConfigMap!]
}
# Supported in v5.0+
input ExportOracleDbConfigInput {
  # Supported in v5.0+
  # The full path for the directory on the target host to use to store the restored database files.
  restoreFilesPath: String

  # Specifies whether the database files are copied to the target host without recreating the database.
  shouldRestoreFilesOnly: Boolean

  # Supported in v5.0+
  # The full path for the directory on the target host where the NFS share will be mounted.
  targetMountPath: String

  # Supported in v5.2+
  # v5.2-v5.3: Configuration file for advanced Oracle recovery in base64 encoded format.
  # v6.0+: The configuration file for Oracle advanced recovery in base64 encoded format. This field cannot be specified if `advancedRecoveryConfigMap` is specified.
  advancedRecoveryConfigBase64: String

  # Supported in v5.2+
  # The full path for the directory containing the archive log files on the Oracle host.
  archiveLogPath: String

  # Supported in v5.3+
  # The new value of the db_name parameter for a clone operation. This is used to specify the new name during rman duplicate.
  cloneDbName: String

  # Supported in v5.3+
  # The full path of the pfile on the target Oracle Host or RAC to use for the database recovery.
  customPfilePath: String

  # Supported in v6.0+
  # Number of channels used during clone or same-host recovery.
  numChannels: Int

  # Supported in v6.0+
  # Path to the post-script to run after the recovery task.
  postScriptPath: String

  # Supported in v6.0+
  # Path to the pre-script to run before the recovery task.
  preScriptPath: String

  # Supported in v6.0+
  # Boolean value that determines whether to stop the recovery task if the pre-script exits with a non-zero value. Set to True to stop the recovery task on pre-script failure. The default setting is False, which allows the task to continue.
  shouldStopRecoveryOnPreScriptFailure: Boolean

  # Supported in v8.0+
  # List of PDB names to be cloned in the target database.
  pdbsToClone: [String!] = []

  # Supported in v8.1+
  # Indicates whether to skip dropping the database in undo task if the database was partially recovered.
  shouldSkipDropDbInUndo: Boolean

  # Supported in v9.0+
  # List of RAC host simple IDs to recover the database during the clone.
  targetRacHostIds: [String!] = []

  # Supported in v9.0+
  # Specifies the host simple ID for the primary RAC node, which will be used for recovery. The provided host simple ID must be among the list of host simple IDs specified in `targetRacHostIds`.
  targetRacPrimaryHostId: String

  # Supported in v9.0+
  # A boolean value determines if the database can be renamed back to the source Oracle host or RAC during the clone.
  shouldAllowRenameToSource: Boolean

  # Required. Supported in v5.0+
  # v5.0-v5.2: Snapshot ID or timestamp for which the export is done.
  # v5.3+: Snapshot ID or timestamp for which the clone is done.
  recoveryPoint: OracleRecoveryPointInput!

  # Required. Supported in v5.0+
  # v5.0-v5.2: ID of the Oracle Host or Oracle RAC object that is the target for the export of the specified database snapshot. The referenced Oracle host or RAC must have the Rubrik Backup Service installed and connected. Standalone source databases can be exported to OracleHost and clustered source databases can be exported to OracleRac only.
  # v5.3+: ID of the Oracle Host or Oracle RAC object that is the target for the clone of the specified database snapshot. The referenced Oracle host or RAC must have the Rubrik Backup Service installed and connected. Standalone source databases can be cloned to OracleHost and clustered source databases can be cloned to OracleRac only.
  targetOracleHostOrRacId: String!
}
# Supported in v5.0+
input ExportOracleTablespaceConfigInput {
  # Supported in v5.2+
  # Expose all logs that were backed up between the selected recovery point and the latest log backup.
  exposeAllLogs: Boolean

  # Required. Supported in v5.0+
  # The full path to the directory on the source host where the auxiliary database files will be created.
  auxiliaryDestinationPath: String!

  # Required. Supported in v5.0+
  # Snapshot ID or timestamp for which the export is done.
  recoveryPoint: OracleRecoveryPointInput!

  # Required. Supported in v5.0+
  # Name of the tablespace to be exported from the existing database snapshot.
  tablespaceName: String!
}
input ExportOracleTablespaceInput {
  # Required. Configuration parameters for a job to export an Oracle tablespace from a specified snapshot or timestamp.
  config: ExportOracleTablespaceConfigInput!

  # Required. ID of the database containing the tablespace to export.
  id: String!
}
# Supported in v5.0+
input ExportPathPairInput {
  # Required. Supported in v5.0+
  # v5.0-v7.0: Destination path of export files.
  # v8.0+: Destination path where files will be exported.
  dstPath: String!

  # Required. Supported in v5.0+
  # v5.0-v7.0: Original file path.
  # v8.0+: Path of the original file to be exported.
  srcPath: String!
}
# Input for the mutation to export an SLA Managed Volume snapshot.
input ExportSlaManagedVolumeSnapshotInput {
  # Snapshot ID.
  id: UUID!

  # Export parameters.
  params: ManagedVolumeSlaExportRequestInput
}
# Supported in v6.0+
input ExportSnapshotJobConfigForBatchInput {
  # Supported in v6.0+
  # Exports the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
  snapshotAfterDate: DateTime

  # Supported in v6.0+
  # Exports the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
  snapshotBeforeDate: DateTime

  # Supported in v6.0+
  # The ID of the snapshot to export. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
  snapshotId: String

  # Supported in v6.0+
  # Prefix to be added to the name of the exported virtual machine.
  vmNamePrefix: String

  # Required. Supported in v6.0+
  # Configuration for snapshot export.
  config: ExportSnapshotJobConfigV2Input!

  # Required. Supported in v6.0+
  # ID of the virtual machine whose snapshot needs to be exported.
  vmId: String!
}
# Supported in Rubrik CDM version 9.0 and later. Input for batch export snapshots for vSphere.
input ExportSnapshotJobConfigForBatchV3Input {
  # Supported in v8.1+
  # Exports the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
  snapshotAfterDate: DateTime

  # Supported in v8.1+
  # Exports the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
  snapshotBeforeDate: DateTime

  # Supported in v8.1+
  # The ID of the snapshot to export. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
  snapshotId: String

  # Supported in v8.1+
  # Prefix to be added to the name of the exported virtual machine.
  vmNamePrefix: String

  # Required. Supported in v8.1+
  # Configuration for snapshot export.
  config: ExportSnapshotJobConfigV3Input!

  # Required. Supported in v8.1+
  # ID of the virtual machine whose snapshot needs to be exported.
  vmId: String!
}
# Supported in v5.1+
input ExportSnapshotJobConfigV2Input {
  # Supported in v5.1+
  # ID of the ESXi host to export the new virtual machine to.
  hostId: String

  # Supported in v5.1+
  # The job recovers any tags that were assigned to the virtual machine.
  shouldRecoverTags: Boolean

  # Supported in v5.1+
  # A Boolean value that determines whether the new virtual machine created from a snapshot is registered with the vCenter Server. When this value is 'true', the registration is removed from the vCenter Server. When this value is 'false', the registration is kept on the vCenter Server. The default is 'false'.
  unregisterVm: Boolean

  # ID of the Rubrik cluster to export the new virtual machine to.
  clusterId: String

  # Supported in v5.2+
  # ID of the resource pool to export the new virtual machine to.
  resourcePoolId: String

  # Supported in v6.0+
  # The network binding for vNIC of the virtual machine.
  vNicBindings: [VmwareVnicBindingInfoV2Input!] = []

  # Supported in v7.0+
  # Boolean value that determines whether Export uses a HotAdd mode to transport virtual disk data. When this value is `true`, Export uses HotAdd mode to transport virtual disk data. When this value is `false`, Export uses NBDSSL to transport virtual disk data. The default value is `false`.
  shouldUseHotAddProxy: Boolean
  mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
  requiredRecoveryParameters: RequiredRecoveryParametersInput

  # Supported in v9.1+
  # ID of the virtual machine folder to export the new virtual machine to.
  folderId: String

  # Supported in v9.1+
  # ID of the content library to which the new content library item is being exported.
  contentLibraryId: String

  # Supported in v9.1+
  # Specifies whether Export converts the recovered virtual machine to a template.
  shouldConvertToTemplate: Boolean

  # Required. Supported in v5.1+
  # ID of the datastore to assign to the exported virtual machine.
  datastoreId: String!
}
# Supported in Rubrik CDM version 9.0 and later.
input ExportSnapshotJobConfigV3Input {
  # ID of the cluster to export the new virtual machine to.
  clusterId: String

  # List of disk device keys to storage ID mappings. If the list is not defined, the export virtual machine is created at the storageLocationId. If the list is defined, the storageLocationId specifies where the vmx file is created. When this mapping is provided, each virtual disk in the snapshot must be mapped to a valid storage location, either a datastore or a datastore cluster. An incomplete or invalid mapping will result in the failure of the export operation.
  diskDeviceKeyToStorageId: [VmwareStorageIdWithDeviceKeyV2Input!] = []

  # Supported in v8.1+
  # ID of the ESXi host to export the new virtual machine to.
  hostId: String

  # Supported in v8.1+
  # ID of the resource pool to export the new virtual machine to.
  resourcePoolId: String

  # Supported in v8.1+
  # The job recovers any tags that were assigned to the virtual machine.
  shouldRecoverTags: Boolean

  # Specifies whether the export uses a HotAdd mode to transport virtual disk data. When this value is `true`, the export uses HotAdd mode to transport virtual disk data. When this value is `false`, the export uses NBDSSL to transport virtual disk data. The default value is `false`.
  shouldUseHotAddProxy: Boolean

  # Supported in v8.1+
  # ID of the datastore or datastore cluster to assign to the exported virtual machine.
  storageLocationId: String

  # Specifies whether the new virtual machine created from a snapshot is registered with the vCenter Server. When this value is `true`, the registration is removed from the vCenter Server. When this value is `false`, the registration is kept on the vCenter Server. The default value is `false`.
  unregisterVm: Boolean

  # The network binding for the vNIC of the virtual machine.
  vNicBindings: [VmwareVnicBindingInfoV2Input!] = []

  # Common fields for recovery operations.
  mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input

  # Target snapshot ID or a point in time for recovery.
  requiredRecoveryParameters: RequiredRecoveryParametersInput

  # Supported in v9.1+
  # ID of the virtual machine folder to export the new virtual machine to.
  folderId: String

  # Supported in v9.1+
  # ID of the content library to which the new content library item is being exported.
  contentLibraryId: String

  # Supported in v9.1+
  # Specifies whether Export converts the recovered virtual machine to a template.
  shouldConvertToTemplate: Boolean
}
# Supported in v5.0+
input ExportSnapshotToStandaloneHostRequestInput {
  mountExportSnapshotJobCommonOptions: MountExportSnapshotJobCommonOptionsInput

  # Required. Supported in v5.0+
  # Name of the datastore to assign to the exported. virtual machine.
  datastoreName: String!

  # Required. Supported in v5.0+
  # The IP address of the standalone ESXi host.
  hostIpAddress: String!

  # Required. Supported in v5.0+
  # The admin password of standalone ESXi host.
  hostPassword: String!

  # Required. Supported in v5.0+
  # The admin username of standalone ESXi host.
  hostUsername: String!
}
# Specs required for Export URL.
type ExportUrlSpecs {
  # SAS URI of the blob.
  blobSasUri: String!

  # Name of the blob.
  blobName: String!

  # Polaris account of the user.
  polarisAccount: String!
}
# Key value pair for external artifacts associated with an AWS account.
input ExternalArtifactMap {
  # AWS unique identifier of the external artifact.
  externalArtifactValue: String!

  # Keyword for external artifacts.
  externalArtifactKey: AwsCloudExternalArtifact
}
# A map of an AWS artifact to its value.
type ExternalArtifactMapReply {
  # Keyword for external artifact.
  externalArtifactKey: AwsCloudExternalArtifact!

  # AWS unique identifier of the external artifact.
  externalArtifactValue: String!
}
# Key value pair for external artifacts associated with an AWS account.
input ExternalArtifacts {
  # Keyword for external artifacts.
  externalArtifactKey: AwsCloudExternalArtifact

  # AWS unique identifier of the external artifact.
  externalArtifactValue: String
}
# Represents information on Microsoft 365 restore
# failed items performed by Rubrik.
type FailedRestoreItemsInfoReply {
  # Click the link to download a CSV file containing
  # the Microsoft 365 failed items.
  csvDownloadLink: URL!
}
type FailoverChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [FailoverGroupByEnum!]
}
# Failover cluster App.
type FailoverClusterApp implements CdmHierarchyObject , HierarchyObject , HostFailoverClusterDescendantType , HostFailoverClusterPhysicalChildType , FailoverClusterTopLevelDescendantType {
  # ID of the CDM cluster.
  cdmId: String!

  # ID of the failover cluster.
  failoverClusterId: String!

  # Virtual IP addresses.
  vips: [String!]!

  # Failover Rubrik cluster type.
  failoverClusterType: String

  # Connectivity status of failover cluster.
  status: FailoverClusterStatus

  # Boolean variable denoting if archived.
  isArchived: Boolean!

  # Get the host failover cluster app object.
  hostFailoverCluster: HostFailoverCluster!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): FailoverClusterAppDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): FailoverClusterAppPhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Supported in v5.2+
type FailoverClusterAppConfig {
  # Supported in v5.2+
  # ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Required. Supported in v5.2+
  # The source used by the failover cluster app to perform fileset backups. Either a virtual IP address or a node order must be specified in order for the failover cluster app to perform app backup.
  failoverClusterAppSource: FailoverClusterAppSource

  # Required. Supported in v5.2+
  # Cluster ID of the failover cluster app.
  failoverClusterId: String!

  # Required. Supported in v5.2+
  # Name of the failover cluster app.
  name: String!
  failoverClusterType: FailoverClusterType!
}
# Supported in v5.2+
input FailoverClusterAppConfigInput {
  # Supported in v5.2+
  # ID of the SLA Domain that is assigned to the specified failover cluster app. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Required. Supported in v5.2+
  # Cluster type of the failover cluster app.
  failoverClusterType: FailoverClusterType!

  # Required. Supported in v5.2+
  # The source used by the failover cluster app to perform fileset backups. Either a virtual IP address or a node order must be specified in order for the failover cluster app to perform app backup.
  failoverClusterAppSource: FailoverClusterAppSourceInput!

  # Required. Supported in v5.2+
  # Cluster ID of the failover cluster app.
  failoverClusterId: String!

  # Required. Supported in v5.2+
  # Name of the failover cluster app.
  name: String!
}
# Paginated list of FailoverClusterApp objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type FailoverClusterAppConnection {
  # List of FailoverClusterApp objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [FailoverClusterAppEdge!]!

  # List of FailoverClusterApp objects.
  nodes: [FailoverClusterApp!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of FailoverClusterApp objects matching the request arguments.
  count: Int!
}
# Supported in v5.2+
# Connection type options for the failover cluster app.
enum FailoverClusterAppConnectionStatus {
  FAILOVER_CLUSTER_APP_CONNECTION_STATUS_CONNECTED
  FAILOVER_CLUSTER_APP_CONNECTION_STATUS_DISCONNECTED
  FAILOVER_CLUSTER_APP_CONNECTION_STATUS_REPLICATION_TARGET
}
# Failover Rubrik cluster descendant.
interface FailoverClusterAppDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of FailoverClusterAppDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type FailoverClusterAppDescendantTypeConnection {
  # List of FailoverClusterAppDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [FailoverClusterAppDescendantTypeEdge!]!

  # List of FailoverClusterAppDescendantType objects.
  nodes: [FailoverClusterAppDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of FailoverClusterAppDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the FailoverClusterAppDescendantType object. This wrapper is used for pagination.
type FailoverClusterAppDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual FailoverClusterAppDescendantType object wrapped by this edge.
  node: FailoverClusterAppDescendantType!
}
# Wrapper around the FailoverClusterApp object. This wrapper is used for pagination.
type FailoverClusterAppEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual FailoverClusterApp object wrapped by this edge.
  node: FailoverClusterApp!
}
# Failover cluster app physical child.
interface FailoverClusterAppPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of FailoverClusterAppPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type FailoverClusterAppPhysicalChildTypeConnection {
  # List of FailoverClusterAppPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [FailoverClusterAppPhysicalChildTypeEdge!]!

  # List of FailoverClusterAppPhysicalChildType objects.
  nodes: [FailoverClusterAppPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of FailoverClusterAppPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the FailoverClusterAppPhysicalChildType object. This wrapper is used for pagination.
type FailoverClusterAppPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual FailoverClusterAppPhysicalChildType object wrapped by this edge.
  node: FailoverClusterAppPhysicalChildType!
}
# Supported in v5.2+
type FailoverClusterAppSource {
  # Supported in v5.2+
  # Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
  nodeOrders: [FailoverClusterNodeOrder!]!

  # Supported in v5.3+
  # Virtual IP addresses of the failover cluster.
  virtualIps: [String!]!

  # Virtual IP addresses of the failover cluster.
  vips: [String!]!
}
# Supported in v5.2+
input FailoverClusterAppSourceInput {
  # Supported in v5.2+
  # Specifies an order for the failover cluster nodes. Failover cluster app backups use the failover cluster nodes in the specified order.
  nodeOrders: [FailoverClusterNodeOrderInput!] = []

  # Supported in v5.3+
  # Virtual IP addresses of the failover cluster.
  virtualIps: [String!] = []

  # Virtual IP addresses of the failover cluster.
  vips: [String!] = []
}
# Supported in v5.2+
type FailoverClusterAppSummary {
  # Required. Supported in v5.2+
  # ID assigned to the failover cluster app.
  id: String!

  # Required. Supported in v5.2+
  primaryClusterId: String!

  # Supported in v5.3+
  # The failover cluster name of the failover cluster app. The failover cluster is a group of hosts that provides high availability for running failover clustered applications.
  failoverClusterName: String
  effectiveSlaHolder: EffectiveSlaHolder
  failoverClusterAppConfig: FailoverClusterAppConfig
  connectionStatus: FailoverClusterAppConnectionStatus!
  operatingSystemType: FailoverClusterOsType
  slaAssignment: SlaAssignment
  slaAssignable: SlaAssignable
}
# Supported in v5.2+
input FailoverClusterConfigInput {
  # Supported in v5.2+
  # ID of the SLA Domain that is assigned to the specified failover cluster. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Required. Supported in v5.2+
  # Managed ID's of Hosts of the failover cluster.
  hostIds: [String!]!

  # Required. Supported in v5.2+
  # Name of the failover cluster.
  name: String!
}
# Supported in v5.2+
# Connection type options for the failover cluster.
enum FailoverClusterConnectionStatus {
  FAILOVER_CLUSTER_CONNECTION_STATUS_CONNECTED
  FAILOVER_CLUSTER_CONNECTION_STATUS_DISCONNECTED
  FAILOVER_CLUSTER_CONNECTION_STATUS_PARTIALLY_CONNECTED
  FAILOVER_CLUSTER_CONNECTION_STATUS_REPLICATION_TARGET
}
# Connection status between the Failover cluster objects and the CDM cluster.
enum FailoverClusterConnectivityStatus {
  # Failover cluster object is connected with the CDM cluster.
  CONNECTED

  # Failover cluster object is disconnected with the CDM cluster.
  DISCONNECTED

  # The connection status between CDM cluster and the failover cluster is refreshing.
  PARTIALLY_CONNECTED

  # Failover cluster object is connected with the replicated CDM cluster.
  REPLICATION_TARGET

  # The connection status between the failover cluster object and the CDM cluster is unknown.
  UNKNOWN_CONNECTIVITY_STATUS
}
# Supported in v5.2+
type FailoverClusterDetail {
  # Required. Supported in v5.2+
  # Count of the number of failover cluster apps.
  numApps: Int!

  # Required. Supported in v5.2+
  # Count of the number of nodes on the failover cluster.
  numNodes: Int!
  failoverClusterSummary: FailoverClusterSummary
}
# Supported in v5.2+
type FailoverClusterNode {
  # Required. Supported in v5.2+
  # ID of the node in the failover cluster.
  id: String!

  # Required. Supported in v5.2+
  # Name of the node in the failover cluster.
  name: String!

  # Supported in v5.3+
  # Operating system of the node in the failover cluster.
  operatingSystem: String
  connectionStatus: FailoverClusterNodeConnectionStatus!
}
# Supported in v5.2+
# Connection type options for the failover cluster node.
enum FailoverClusterNodeConnectionStatus {
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTED
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTING
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_CONNECTOR_NOT_DEPLOYED
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DELETED
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DELETING
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_DISCONNECTED
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_PARTIALLY_CONNECTED
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_REFRESHING
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_REPLICATION_TARGET
  FAILOVER_CLUSTER_NODE_CONNECTION_STATUS_SECONDARY_CLUSTER
}
# Supported in v5.2+
type FailoverClusterNodeOrder {
  # Required. Supported in v5.2+
  # ID of the failover cluster node.
  nodeId: String!

  # Required. Supported in v5.2+
  # An integer that specifies the place occupied by this node in the failover cluster app backup order.
  order: Int!

  # Supported in v5.3+
  # The name of the failover cluster node.
  nodeName: String
}
# Supported in v5.2+
input FailoverClusterNodeOrderInput {
  # Supported in v5.3+
  # The name of the failover cluster node.
  nodeName: String

  # Required. Supported in v5.2+
  # ID of the failover cluster node.
  nodeId: String!

  # Required. Supported in v5.2+
  # An integer that specifies the place occupied by this node in the failover cluster app backup order.
  order: Int!
}
# Supported in v5.2+
# Operating system type of the failover cluster.
enum FailoverClusterOsType {
  FAILOVER_CLUSTER_OS_TYPE_AIX
  FAILOVER_CLUSTER_OS_TYPE_ANY
  FAILOVER_CLUSTER_OS_TYPE_HPUX
  FAILOVER_CLUSTER_OS_TYPE_LINUX
  FAILOVER_CLUSTER_OS_TYPE_SUN_OS
  FAILOVER_CLUSTER_OS_TYPE_UNIX_LIKE
  FAILOVER_CLUSTER_OS_TYPE_WINDOWS
}
# The connection status of a failover cluster.
type FailoverClusterStatus {
  # Specifies connectivity status of failover cluster.
  connectivity: FailoverClusterConnectivityStatus!

  # Specifies the timestamp in milliseconds.
  timestampMillis: DateTime
}
# Supported in v5.2+
type FailoverClusterSummary {
  # Required. Supported in v5.2+
  # ID assigned to the failover cluster.
  id: String!

  # Required. Supported in v5.2+
  # Cluster name assigned to the failover cluster.
  name: String!

  # Required. Supported in v5.2+
  # Details of the nodes of this failover cluster.
  nodes: [FailoverClusterNode!]!

  # Required. Supported in v5.2+
  primaryClusterId: String!
  effectiveSlaHolder: EffectiveSlaHolder
  connectionStatus: FailoverClusterConnectionStatus!
  operatingSystemType: FailoverClusterOsType
  slaAssignment: SlaAssignment
  slaAssignable: SlaAssignable
}
# The top level descendent of failover cluster.
interface FailoverClusterTopLevelDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of FailoverClusterTopLevelDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type FailoverClusterTopLevelDescendantTypeConnection {
  # List of FailoverClusterTopLevelDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [FailoverClusterTopLevelDescendantTypeEdge!]!

  # List of FailoverClusterTopLevelDescendantType objects.
  nodes: [FailoverClusterTopLevelDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of FailoverClusterTopLevelDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the FailoverClusterTopLevelDescendantType object. This wrapper is used for pagination.
type FailoverClusterTopLevelDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual FailoverClusterTopLevelDescendantType object wrapped by this edge.
  node: FailoverClusterTopLevelDescendantType!
}
# Supported in v5.2+
# Cluster type options for the failover cluster app.
enum FailoverClusterType {
  FAILOVER_CLUSTER_TYPE_UNIX_LIKE
  FAILOVER_CLUSTER_TYPE_WINDOWS
}
enum FailoverGroupByEnum {
  Day
  FailoverStatus
  FailoverType
  Hour
  LastTestStatus
  Month
  Quarter
  Source
  TargetSite
  Week
  Year
}
enum FailoverSortByEnum {
  AppBlueprintName
  SourceSiteName
  StartTime
  TargetSiteName
}
# The Recovery plan recovery statuses.
enum FailoverStatusEnum {
  # Failover cleanup started.
  FAILOVER_CLEANUP_STARTED

  # Failover failed.
  FAILOVER_FAILED

  # Failover job failed.
  FAILOVER_JOB_FAILED

  # Failover job succeeded.
  FAILOVER_JOB_SUCCEEDED

  # Isolated recovery cleanup started.
  ISOLATED_RECOVERY_CLEANUP_STARTED

  # Isolated recovery failed.
  ISOLATED_RECOVERY_FAILED

  # Isolated recovery failed and cleaned.
  ISOLATED_RECOVERY_FAILED_AND_CLEANED

  # Isolated recovery locked.
  ISOLATED_RECOVERY_LOCKED

  # Isolated recovery ongoing.
  ISOLATED_RECOVERY_ONGOING

  # Isolated recovery paused.
  ISOLATED_RECOVERY_PAUSED

  # Isolated recovery promotion failed.
  ISOLATED_RECOVERY_PROMOTION_FAILED

  # Isolated recovery promotion started.
  ISOLATED_RECOVERY_PROMOTION_STARTED

  # Isolated recovery promotion succeeded.
  ISOLATED_RECOVERY_PROMOTION_SUCCEEDED

  # Isolated recovery queued.
  ISOLATED_RECOVERY_QUEUED

  # Isolated recovery succeeded.
  ISOLATED_RECOVERY_SUCCEEDED

  # Isolated recovery succeeded and cleaned.
  ISOLATED_RECOVERY_SUCCEEDED_AND_CLEANED

  # Local recovery succeeded.
  LOCAL_RECOVERY_SUCCEEDED

  # Status not supported.
  NOT_SUPPORTED

  # Failover job ongoing.
  ONGOING

  # Failover job paused.
  PAUSED

  # Test failover succeeded.
  TEST_FAILOVER_SUCCEEDED
}
type FailoverTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [FailoverGroupByEnum!]
  selectedColumns: [FailoverTableColumnEnum!]!
  sortBy: FailoverSortByEnum

  # Sorts by order.
  sortOrder: SortOrder
}
enum FailoverTableColumnEnum {
  AppBlueprintName
  Duration
  EndTime
  FailoverStatus
  FailoverType
  LastTestStatus
  LastTestTime
  Source
  StartTime
  TargetSite
}
# The Blueprint failover types.
enum FailoverTypeEnum {
  # Blueprint Failover.
  FAILOVER

  # Isolated Recovery.
  ISOLATED_RECOVERY

  # Local Recovery.
  LOCALRECOVERY

  # Blueprint Test Failover.
  TEST_FAILOVER
}
# Contains the failure details for the Rubrik Backup Service connectivity.
type Failure {
  # Rubrik Backup Service connectivity checks were performed on Workload ID.
  snappableId: String!

  # Details of the error that occurred when connecting to the Rubrik Backup Service.
  error: String!
}
# Input to check feature support for CDM version.
input FeatureCdmVersionInput {
  # Required. Cluster to check for feature.
  clusterUuid: UUID!

  # Required. Feature type to check.
  featureType: CdmFeatureFlagType!
}
# Cluster version support for feature details.
type FeatureCdmVersionReply {
  # Flag denoting feature support.
  isSupported: Boolean!
}
# Feature specific details for a cloud account.
type FeatureDetail {
  # Feature enum.
  feature: CloudAccountFeature!

  # Role ARN for feature. This field has a non-empty value only for CFT-based accounts.
  roleArn: String!

  # Stack ARN for feature. This field has a non-empty value only for CFT-based accounts.
  stackArn: String!

  # Feature status for a cloud account.
  status: CloudAccountStatus!

  # AWS regions. The list will be non-empty for cloud accounts on AWS GovCloud and commercial clouds.
  awsRegions: [AwsCloudAccountRegion!]!

  # User ARN for feature. This field has a non-empty value only for accounts with an IAM user credential provider.
  userArn: String

  # IAM user access key for feature. This field has a non-empty value only for accounts with an IAM user credential provider.
  accessKey: String

  # Details for authentication server-based cloud accounts. This field is only applicable to the accounts in AWS DCA and LCK regions.
  authServerDetail: AwsAuthServerDetail
}
# Input to minimum CDM version supporting all given features.
input FeatureListMinimumCdmVersionInputType {
  # Required. Feature type to check.
  featureTypes: [CdmFeatureFlagType!]!
}
# Minimum cluster version required for feature set details.
type FeatureListMinimumCdmVersionReply {
  # Minimum cluster version required.
  minimumVersion: String!
}
# Feature along with permissions serialized in JSON format.
type FeaturePermission {
  # Feature name, for example, CLOUD_NATIVE_PROTECTION, CLOUD_NATIVE_ARCHIVAL.
  feature: CloudAccountFeature!

  # The permissions required for supporting the feature given by the feature field.
  permissionJson: String!

  # Feature permission version.
  version: Int!

  # Permissions group versions.
  permissionsGroupVersions: [PermissionsGroupWithVersion!]!
}
# Optional additional information needed to retrieve the policy for a feature.
input FeatureSpecificDetailsInput {
  # Rubrik can assign roles using this role path to a recovered EC2 instance.
  ec2RecoveryRolePath: String = ""
}
# Cloud account feature with specific permissions groups.
input FeatureWithPermissionsGroups {
  # The cloud account feature.
  featureType: CloudAccountFeature = ARCHIVAL

  # The permissions groups to include for the feature. If the list is empty, all permissions groups will be included.
  permissionsGroups: [PermissionsGroup!] = []
}
# Status of the Federated Access feature for the specified account.
type FederatedLoginStatus {
  # Specifies whether Federated Access is enabled.
  enabled: Boolean!

  # Specifies whether UI should display the inventory cards after Federated login.
  inventoryCardEnabled: Boolean!
}
enum FieldEnum {
  ALL

  # When true, returns unexpired snapshots or snapshots that
  # have unexpired archived snapshots.
  # When false, returns expired snapshots and snapshots that
  # do not have any unexpired archived snapshots.
  HAS_UNEXPIRED_ARCHIVED_OR_SOURCE_SNAPSHOTS

  # When true, returns unGCed snapshots (may/may not have expiry hint time
  # set) or snapshots that have unexpired archived snapshots.
  # When false, returns GCed snapshots that do not have any unexpired
  # archived snapshots.
  # Note that this filter is only for source snapshots, so it is
  # incompatible with IS_REPLICA = true. No snapshots would be returned in
  # that case.
  HAS_UNEXPIRED_ARCHIVED_OR_UNGCED_SOURCE_SNAPSHOTS

  # When true, returns snapshots that have unexpired archived snapshots.
  # When false, returns snapshots that do not have any unexpired archived
  # snapshots.
  HAS_UNEXPIRED_ARCHIVED_SNAPSHOTS
  IS_COMPLETE
  IS_CORRUPTED
  IS_DELETED_FROM_SOURCE
  IS_EXPIRED
  IS_HINT_SET
  IS_INDEXED
  IS_INDEX_MERGED
  IS_ON_DEMAND
  IS_REPLICA
  IS_SKIPPED_FOR_REPLICATION

  # Returns snapshots with a sequence number greater than the
  # specified sequence number.
  SEQUENCE_NUMBER_GREATER_THAN

  # SPECIFIC_SNAPSHOT_NOT_REQUIRED when added as a filter returns Snapshots
  # without the specific snapshots details. When not provided, Specific
  # Snapshot details are returned. Add the filter for efficiency if specific
  # snapshot details are not required.
  SPECIFIC_SNAPSHOT_NOT_REQUIRED
  TIME_RANGE_WITH_OFFSET
}
type FileAccessResult {
  nativePath: String!
  filename: String!
  directory: String!
  numAccesses: Int!
  accessType: ActivityAccessType!
}
# Sorts to apply when listing a file's user activities.
input FileActivitiesSort {
  # The field to sort on.
  sortBy: FileActivitiesSortBy = USER_NAME

  # The direction to sort on.
  sortOrder: SortOrder = ASC
}
enum FileActivitiesSortBy {
  NUM_ACTIVITIES
  USER_NAME
}
enum FileCountType {
  ANY
  HITS
  OPEN_ACCESS
  OPEN_ACCESS_HITS
  STALE
  STALE_HITS
}
# Details of a particular file.
type FileDetails {
  # Name of the file.
  fileName: String!
}
# Configuration which describes file details.
input FileDetailsInput {
  # Name of the file.
  fileName: String!
}
# Type of file download location.
enum FileDownloadType {
  # Download to cloud.
  DOWNLOAD_TO_CLOUD

  # Download to virtual machine.
  DOWNLOAD_TO_VM

  # Unspecified download type.
  UNSPECIFIED
}
# Represents the OneDrive file to be restored.
input FileInfo {
  fileId: String!
  fileName: String!
  fileSnapshotsToRestore: [FileSnapshotInfo!]!
  channelInfo: TeamsChannelInfo
}
# Enum for file modes of files in snapshot.
enum FileModeEnum {
  # File mode is directory.
  DIRECTORY

  # File mode is file.
  FILE

  # File mode is share.
  SHARE

  # File mode is symlink.
  SYMLINK
}
# Cloud-native file recovery feasibility.
enum FileRecoveryFeasibility {
  # File recovery is not feasible because Exocompute is not configured.
  EXOCOMPUTE_NOT_CONFIGURED

  # File recovery is feasible.
  FEASIBLE

  # File recovery is not feasible because the snapshot expired.
  SNAPSHOT_EXPIRED

  # File recovery feasibility is unknown.
  UNKNOWN

  # Rubrik-hosted compute is not supported in the region.
  UNSUPPORTED_HOSTED_REGION
}
# Input for details regarding download location. The two fields are mutually exclusive. Only one of them should be specified at a time.
input FileRecoveryLocationDetailsInput {
  # Populate this field with details of the download location for downloading to cloud.
  cloudDownloadLocationDetails: CloudDownloadLocationDetailsInput

  # Populate this field with details of the download location for downloading to a virtual machine.
  vmDownloadLocationDetails: VmDownloadLocationDetailsInput
}
type FileResult {
  nativePath: String!
  filename: String!
  directory: String!
  mode: DataGovFileMode!
  size: Long!
  lastModifiedTime: Long!
  lastAccessTime: Long!
  numDescendantFiles: Int!
  numDescendantErrorFiles: Long!
  numDescendantSkippedExtFiles: Long!
  numDescendantSkippedSizeFiles: Long!
  numDescendantFolders: Long!
  analyzerResults: [AnalyzerResult!]!
  analyzerGroupResults: [AnalyzerGroupResult!]!
  paginationId: String!
  hits: Hits!
  stdPath: String!
  errorCode: AnalyzerErrorCode!
  filesWithHits: Hits
  staleFilesWithHits: Hits
  openAccessFilesWithHits: Hits
  staleFiles: Hits
  openAccessFiles: Hits
  openAccessFolders: Hits
  openAccessStaleFiles: Hits
  openAccessType: OpenAccessType!
  stalenessType: StalenessType!
  numActivities: Long!
  numActivitiesBreakdown: [ActivityResult!]!
  numActivitiesDelta: Long!
  owner: String!
  snapshotFid: String!
  snapshotTimestamp: Long!

  # Represents the type of user access for a file.
  userAccessType: UserAccessType!

  # Representation of SIDs that can access this file.
  accessibleBySidsRepresentation: String!

  # A short form of representation of SIDs that will be used by indexing.
  accessibleBySidsRepresentationShortForm: String!

  # Sensitive file count for various risk levels.
  sensitiveFiles: SensitiveFiles

  # Analyzer risk hits for various risk levels.
  analyzerRiskHits: AnalyzerHits

  # Risk level of the file.
  riskLevel: RiskLevelType!

  # File access risk reasons.
  riskReasons: [RiskReason!]!

  # Represents if file has direct ACL.
  isDirectAcl: Boolean!

  # Represents principal access information for the file.
  principalAccessInfo: PrincipalAccessInfo

  # Represents number of children at each level.
  numChildren: Long!

  # Represents data type of column for databases.
  type: String!
  snappable: HierarchyObject!
}
# Paginated list of FileResult objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type FileResultConnection {
  # List of FileResult objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [FileResultEdge!]!

  # List of FileResult objects.
  nodes: [FileResult!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of FileResult objects matching the request arguments.
  count: Int!

  # Specifies whether the response contains the latest indexed data or not.
  hasLatestData: Boolean!

  # Specifies the indexing version. 
  indexingVersion: Int!
}
# Wrapper around the FileResult object. This wrapper is used for pagination.
type FileResultEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual FileResult object wrapped by this edge.
  node: FileResult!
}
enum FileResultSortBy {
  CLUSTER
  DAILY_CHANGE
  FILES_WITH_HITS
  FILES_WITH_OPEN_ACCESS_HITS
  HITS
  LAST_ACCESS_TIME
  NAME
  NATIVE_PATH
  NUM_ACTIVITIES
  NUM_ACTIVITIES_DELTA
  OBJECT_LOCATION
  OBJECT_NAME
  OPEN_ACCESS_TYPE
  SNAPSHOT_TIME
  STALE_FILES_WITH_HITS
}
input FileResultSortInput {
  sortBy: FileResultSortBy = HITS
  sortOrder: SortOrder = ASC
  analyzerGroupId: String = ""
}
# Represents the OneDrive file snapshot to be restored.
input FileSnapshotInfo {
  snapshotId: UUID!
  snapshotNum: Int!
  fileSize: Long!
}
# Supported in v5.0+
# The type of the file system on this Volume.
enum FileSystemType {
  FILE_SYSTEM_TYPE_NTFS
  FILE_SYSTEM_TYPE_RE_FS
}
# Supported in v5.0+
type FileVersion {
  # Supported in v5.0+
  # The type of file, either a regular file or a directory.
  fileMode: String

  # Supported in v5.0+
  lastModified: String

  # Supported in v5.0+
  size: Long

  # Supported in v5.0+
  # The snapshot this file belongs to.
  snapshotId: String

  # Supported in v5.0+
  # The location where the file is stored, either in the cloud or locally.
  source: String
}
enum FileVersionSourceEnum {
  CLOUD
}
# Supported in v5.0+
type FilesetArraySpec {
  # Supported in v5.0+
  # ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
  proxyHostId: String
}
# Supported in v5.0+
input FilesetArraySpecInput {
  # Supported in v5.0+
  # ID assigned to a proxy host for array-enabled backups. This property is only required for array-enabled backups.
  proxyHostId: String
}
# Supported in v5.0+
input FilesetCreateInput {
  # Supported in v5.0+
  arraySpec: FilesetArraySpecInput

  # Supported in v5.0+
  hostId: String

  # Supported in v5.0+
  # v5.0: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup.
  # v5.1+: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
  isPassthrough: Boolean

  # Supported in v5.0+
  shareId: String

  # Supported in v5.1+
  # A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
  enableHardlinkSupport: Boolean

  # Supported in v5.1+
  # A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
  enableSymlinkResolution: Boolean

  # Supported in v5.2+
  # ID of the failover cluster app.
  failoverClusterAppId: String

  # Supported in v5.3+
  # Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
  snapMirrorLabelForFullBackup: String

  # Supported in v5.3+
  # Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
  snapMirrorLabelForIncrementalBackup: String

  # Specifies whether the fileset is managed by Rubrik Security Cloud.
  isManagedByPolaris: Boolean

  # Specifies whether the fileset is created in Rubrik Security Cloud and is based on the new NAS model.
  isPolarisNasModel: Boolean

  # Required. Supported in v5.0+
  templateId: String!
}
# Supported in v5.0+
type FilesetDetail {
  # Supported in v5.0+
  archiveStorage: Long

  # Supported in v5.0+
  archivedSnapshotCount: Int

  # Supported in v5.0+
  # Action taken if script fails. Options are "abort", "continue".
  backupScriptErrorHandling: String

  # Supported in v5.0+
  # Number of seconds after which the script is killed if it has not completed execution.
  backupScriptTimeout: Long

  # Supported in v5.0+
  localStorage: Long

  # Supported in v5.0+
  # Script to run after backup of this Fileset ends.
  postBackupScript: String

  # Supported in v5.0+
  # Script to run before backup of this Fileset starts.
  preBackupScript: String

  # Supported in v5.0+
  protectionDate: DateTime

  # Required. Supported in v5.0+
  snapshotCount: Int!

  # Supported in v5.0+
  snapshots: [FilesetSnapshotSummary!]!
  filesetSummary: FilesetSummary
  filesetUpdate: FilesetUpdate
}
# Supported in v5.0+
input FilesetDownloadFilesJobConfigInput {
  # Supported in v5.2+
  # An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
  legalHoldDownloadConfig: LegalHoldDownloadConfigInput

  # Supported in v9.0+
  # Password to protect generated zip with.
  zipPassword: String

  # Required. Supported in v5.0+
  # An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
  sourceDirs: [String!]!
}
# Supported in v7.0+
input FilesetDownloadRequestInput {
  # Supported in v7.0+
  # ID of the SLA Domain to manage retention of the downloaded snapshot.
  slaId: String
}
# Input for Fileset Download Snapshot files.
input FilesetDownloadSnapshotFilesInput {
  # ID assigned to a fileset snapshot object.
  id: String!

  # The fid of the next fileset snapshot.
  nextSnapshotFid: UUID

  # Optional User note.
  userNote: String

  # Rubrik CDM is version 9.0.1 or later. Password for zip archive created.
  zipPassword: String

  # Configuration information for a job to download files and folders from a fileset backup.
  config: FilesetDownloadFilesJobConfigInput!

  # Filter for delta type.
  deltaTypeFilter: [DeltaType!]
}
# Supported in v5.0+
input FilesetExportFilesJobConfigInput {
  # Supported in v5.0+
  # Host ID.
  hostId: String

  # Supported in v5.0+
  # Optional Boolean value that determines whether or not to ignore errors during an export. By default, this value is set to False. Set this value to True to ignore errors.
  ignoreErrors: Boolean

  # Supported in v5.0+
  # Network share ID.
  shareId: String

  # Supported in v9.1+
  # Optional field that specifies whether to recreate directory structure when using the 'Export to host' option in the UI.
  shouldRecreateDirectoryStructure: Boolean

  # Required. Supported in v5.0+
  # Pairs of source path and destination path.
  exportPathPairs: [FilesetExportPathPairInput!]!
}
# Supported in v5.0+
input FilesetExportPathPairInput {
  # Pair of source path and destination path.
  exportPathPair: ExportPathPairInput
}
# Input for Fileset export snapshot files.
input FilesetExportSnapshotFilesInput {
  # Corresponds to snapshot forever UUID in Rubrik tables.
  id: String!

  # The fid of the next fileset snapshot.
  nextSnapshotFid: UUID

  # Filter for delta type.
  deltaTypeFilter: [DeltaType!]

  # The configuration of a job that exports one or more files or folders from a fileset backup.
  config: FilesetExportFilesJobConfigInput!

  # Share type of fileset.
  shareType: ShareTypeEnum! = NoShareType

  # OS Type of the Fileset Host.
  osType: GuestOsType!
}
# Supported in v5.0+
type FilesetOptions {
  # Supported in v5.0+
  # Include or exclude hidden folders inside locally-mounted remote file systems from backups.
  allowBackupHiddenFoldersInNetworkMounts: Boolean

  # Supported in v5.0+
  # Include or exclude locally-mounted remote file systems from backups.
  allowBackupNetworkMounts: Boolean

  # Supported in v5.0+
  # Use VSS during Windows backups.
  useWindowsVss: Boolean
}
# Supported in v5.0+
input FilesetOptionsInput {
  # Supported in v5.0+
  # Include or exclude hidden folders inside locally-mounted remote file systems from backups.
  allowBackupHiddenFoldersInNetworkMounts: Boolean

  # Supported in v5.0+
  # Include or exclude locally-mounted remote file systems from backups.
  allowBackupNetworkMounts: Boolean

  # Supported in v5.0+
  # Use VSS during Windows backups.
  useWindowsVss: Boolean
}
# OS type of fileset.
enum FilesetOsType {
  # Linux OS.
  LINUX

  # No OS Type.
  NO_OS_TYPE

  # Unix like OS.
  UNIX_LIKE

  # Windows OS.
  WINDOWS
}
# Input for Fileset recover files.
input FilesetRecoverFilesInput {
  # Corresponds to snapshot forever UUID in Rubrik tables.
  snapshotFid: UUID!

  # The fid of the next fileset snapshot.
  nextSnapshotFid: UUID

  # List of restore path pairs.
  restorePathPairList: [OldRestorePathPairInput!]!

  # Filter for delta type.
  deltaTypeFilter: [DeltaType!]

  # Configuration for job to restore one or more files or folders from a fileset backup.
  config: FilesetRestoreFilesJobConfigInput!

  # Share type of fileset.
  shareType: ShareTypeEnum! = NoShareType

  # OS Type of the Fileset Host.
  osType: GuestOsType!
}
# Supported in v5.0+
input FilesetRestoreFilesJobConfigInput {
  # Supported in v5.0+
  # Optional field to determine if we should ignore single error during restore. Default value is false.
  ignoreErrors: Boolean

  # Supported in v9.1+
  # Optional field that specifies whether to recreate directory structure when using the 'Restore to separate folder' option in the UI.
  shouldRecreateDirectoryStructure: Boolean

  # Required. Supported in v5.0+
  # v5.0-v5.3: Absolute file path and restore path if not restored back to itself
  # v6.0+: Absolute file path.. and restore path if not restored back to itself.
  restoreConfig: [FilesetRestorePathPairInput!]!
}
# Supported in v5.0+
input FilesetRestorePathPairInput {
  # Absolute file path and restore path when not restored back to itself.
  restorePathPair: RestorePathPairInput
}
# Supported in v5.0+
type FilesetSnapshotDetail {
  # Required. Supported in v5.0+
  lastModified: String!

  # Required. Supported in v5.0+
  size: Long!

  # Supported in v5.0+
  verbose: FilesetSnapshotVerbose
  filesetSnapshotSummary: FilesetSnapshotSummary
}
# Supported in v5.0+
type FilesetSnapshotSummary {
  # Supported in v5.0+
  fileCount: Long

  # Required. Supported in v5.0+
  filesetName: String!

  # Supported in v5.1+
  snapdiffUsed: Boolean

  # Supported in v8.0+
  errorsCollected: Long
  baseSnapshotSummary: BaseSnapshotSummary
}
# Supported in v5.0+
type FilesetSnapshotVerbose {
  # Required. Supported in v5.0+
  # Whether or not the fileset snapshot has fingerprint info.
  hasFingerprint: Boolean!

  # Required. Supported in v5.0+
  # List a partition paths for the fileset snapshot.
  partitionPaths: [String!]!
}
# Supported in v5.0+
type FilesetSummary {
  # Supported in v5.0+
  arraySpec: FilesetArraySpec

  # Supported in v5.0+
  # v5.0: The ID of the effective SLA domain for this Fileset
  # v5.1+: The ID of the effective SLA Domain for this fileset.
  effectiveSlaDomainId: String

  # Supported in v5.0+
  # v5.0: The name of the effective SLA domain for this Fileset
  # v5.1+: The name of the effective SLA Domain for this fileset.
  effectiveSlaDomainName: String

  # Supported in v5.0+
  # v5.0: Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
  # v5.1+: Optional field containing Polaris managed ID of the effective SLA domain if it is Polaris managed.
  effectiveSlaDomainPolarisManagedId: String

  # Supported in v5.0+
  exceptions: [String!]!

  # Supported in v5.0+
  excludes: [String!]!

  # Supported in v5.0+
  hostId: String

  # Required. Supported in v5.0+
  hostName: String!

  # Required. Supported in v5.0+
  includes: [String!]!

  # Supported in v5.0+
  # v5.0: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup.
  # v5.1+: A Boolean value that determines whether to take a direct archive backup. When 'true,' performs a direct archive backup. When 'false,' performs a normal backup. If not specified, this defaults to false.
  isPassthrough: Boolean

  # Required. Supported in v5.0+
  isRelic: Boolean!

  # Supported in v5.0+
  operatingSystemType: String

  # Supported in v5.0+
  shareId: String

  # Required. Supported in v5.0+
  templateId: String!

  # Required. Supported in v5.0+
  templateName: String!

  # Supported in v5.1+
  # A Boolean value that determines whether to recognize and dedupe hardlinks in a fileset. When 'true,' performs a hardlink deduplication. When 'false,' performs a normal backup that treats hardlinks as normal files. If not specified, this defaults to false.
  enableHardlinkSupport: Boolean

  # Supported in v5.1+
  # A Boolean value that determines whether to resolve symlink in a fileset. When 'true,' performs a symlink resolution. When 'false,' performs no symlink resolution. If not specified, this defaults to false.
  enableSymlinkResolution: Boolean

  # Supported in v5.1+
  # An optional Boolean value that specifies whether the effective SLA Domain of a fileset is Retention Locked. When this value is 'true,' the SLA Domain is retention locked. When this value is 'false,' the SLA Domain is not Retention Locked.
  isEffectiveSlaDomainRetentionLocked: Boolean

  # Supported in v5.2+
  # ID of the failover cluster app.
  failoverClusterAppId: String

  # Supported in v5.2+
  # v5.2: Describes any pending SLA Domain assignment to this object.
  # v5.3+: Describes any pending SLA Domain assignment on this object.
  pendingSlaDomain: ManagedObjectPendingSlaInfo

  # Supported in v5.3+
  # The name of the failover cluster app.
  failoverClusterAppName: String

  # Supported in v5.3+
  # Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
  snapMirrorLabelForFullBackup: String

  # Supported in v5.3+
  # Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
  snapMirrorLabelForIncrementalBackup: String
  filesetOptions: FilesetOptions
  slaAssignable: SlaAssignable
}
# Fileset template.
type FilesetTemplate implements CdmHierarchyObject , HierarchyObject {
  # Exceptions for backup of fileset.
  exceptions: [String!]!

  # Paths excluded in fileset template.
  excludes: [String!]!

  # Paths included in fileset template.
  includes: [String!]!

  # Operating system type of host.
  osType: FilesetOsType!

  # Pre backup script.
  preBackupScript: String!

  # Post backup script.
  postBackupScript: String!

  # Boolean variable denoting array is enabled.
  isArrayEnabled: Boolean!

  # Error handling for backup script.
  backupScriptErrorHandling: String!

  # Boolean variable denoting if network mounts can be backed up.
  allowBackupNetworkMounts: Boolean!

  # Boolean variable specifying if hidden folders can be backed up.
  allowBackupHiddenFoldersInNetworkMounts: Boolean!

  # Share type of the fileset template.
  shareType: ShareTypeEnum!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): FilesetTemplateDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): FilesetTemplatePhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of FilesetTemplate objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type FilesetTemplateConnection {
  # List of FilesetTemplate objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [FilesetTemplateEdge!]!

  # List of FilesetTemplate objects.
  nodes: [FilesetTemplate!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of FilesetTemplate objects matching the request arguments.
  count: Int!
}
# Supported in v5.0+
type FilesetTemplateCreate {
  # Supported in v5.0+
  # Action taken if script fails. Options are "abort", "continue".
  backupScriptErrorHandling: String

  # Supported in v5.0+
  # Number of seconds after which the script is killed if it has not completed execution.
  backupScriptTimeout: Long

  # Supported in v5.0+
  exceptions: [String!]!

  # Supported in v5.0+
  excludes: [String!]!

  # Required. Supported in v5.0+
  includes: [String!]!

  # Supported in v5.0+
  # Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
  isArrayEnabled: Boolean

  # Required. Supported in v5.0+
  name: String!

  # Supported in v5.0+
  # Script to run after backup of this fileset ends.
  postBackupScript: String

  # Supported in v5.0+
  # Script to run before backup of this fileset starts.
  preBackupScript: String

  # Supported in v7.0+
  # Specifies whether this is created by a Kupr Host.
  isCreatedByKupr: Boolean

  # Supported in v7.0+
  # Specifies whether the template was created for Polaris NAS.
  isCreatedByPolarisNas: Boolean
  filesetOptions: FilesetOptions
  operatingSystemType: FilesetTemplateCreateOperatingSystemType
  shareType: FilesetTemplateCreateShareType
}
# Supported in v5.0+
input FilesetTemplateCreateInput {
  # Supported in v5.0+
  # Action taken if script fails. Options are "abort", "continue".
  backupScriptErrorHandling: String

  # Supported in v5.0+
  # Number of seconds after which the script is killed if it has not completed execution.
  backupScriptTimeout: Long

  # Supported in v5.0+
  exceptions: [String!] = []

  # Supported in v5.0+
  excludes: [String!] = []

  # Supported in v5.0+
  # Boolean value that determines whether the fileset is array-enabled. Set to true to indicate that the fileset is array-enabled. Set to false to indicate that the fileset is not array-enabled. When a fileset is array-enabled, the includes must be top-level LVM logical volume mount points.
  isArrayEnabled: Boolean

  # Supported in v5.0+
  # Script to run after backup of this fileset ends.
  postBackupScript: String

  # Supported in v5.0+
  # Script to run before backup of this fileset starts.
  preBackupScript: String

  # Supported in v7.0+
  # Specifies whether this is created by a Kupr Host.
  isCreatedByKupr: Boolean

  # Specifies whether the template was created for Rubrik Security Cloud NAS.
  isCreatedByPolarisNas: Boolean

  # Fileset options.
  filesetOptions: FilesetOptionsInput

  # Supported in v5.0+
  # Operating system type of filesets created by template.
  operatingSystemType: FilesetTemplateCreateOperatingSystemType

  # Supported in v5.0+
  shareType: FilesetTemplateCreateShareType

  # Required. Supported in v5.0+
  includes: [String!]!

  # Required. Supported in v5.0+
  name: String!
}
enum FilesetTemplateCreateOperatingSystemType {
  FILESET_TEMPLATE_CREATE_OPERATING_SYSTEM_TYPE_UNIX_LIKE
  FILESET_TEMPLATE_CREATE_OPERATING_SYSTEM_TYPE_WINDOWS
}
enum FilesetTemplateCreateShareType {
  FILESET_TEMPLATE_CREATE_SHARE_TYPE_NFS
  FILESET_TEMPLATE_CREATE_SHARE_TYPE_SMB
}
# Fileset template descendent.
interface FilesetTemplateDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of FilesetTemplateDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type FilesetTemplateDescendantTypeConnection {
  # List of FilesetTemplateDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [FilesetTemplateDescendantTypeEdge!]!

  # List of FilesetTemplateDescendantType objects.
  nodes: [FilesetTemplateDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of FilesetTemplateDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the FilesetTemplateDescendantType object. This wrapper is used for pagination.
type FilesetTemplateDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual FilesetTemplateDescendantType object wrapped by this edge.
  node: FilesetTemplateDescendantType!
}
# Supported in v5.0+
type FilesetTemplateDetail {
  # Supported in v5.0+
  # Number of hosts where this template has been applied.
  hostCount: Int

  # Required. Supported in v5.0+
  id: String!

  # Supported in v5.0+
  isArchived: Boolean

  # Required. Supported in v5.0+
  primaryClusterId: String!

  # Supported in v5.0+
  # Number of shares where this template has been applied.
  shareCount: Int

  # Supported in v6.0
  # Specifies whether this is created by a Kupr Host.
  isCreatedByKupr: Boolean
  filesetTemplateCreate: FilesetTemplateCreate
}
# Wrapper around the FilesetTemplate object. This wrapper is used for pagination.
type FilesetTemplateEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual FilesetTemplate object wrapped by this edge.
  node: FilesetTemplate!
}
# Supported in v5.0+
input FilesetTemplatePatchInput {
  # Supported in v5.0+
  # Action taken if script fails. Options are "abort", "continue".
  backupScriptErrorHandling: String

  # Supported in v5.0+
  # Number of seconds after which the script is killed if it has not completed execution.
  backupScriptTimeout: Long

  # Supported in v5.0+
  exceptions: [String!] = []

  # Supported in v5.0+
  excludes: [String!] = []

  # Supported in v5.0+
  includes: [String!] = []

  # Supported in v5.0+
  name: String

  # Supported in v5.0+
  # Script to run after backup of this Fileset ends.
  postBackupScript: String

  # Supported in v5.0+
  # Script to run before backup of this Fileset starts.
  preBackupScript: String

  # Supported in v7.0+
  # Specifies whether this is created by a Kupr Host.
  isCreatedByKupr: Boolean

  # Specifies whether the template was created for Rubrik Security Cloud NAS.
  isCreatedByPolarisNas: Boolean

  # Fileset options.
  filesetOptions: FilesetOptionsInput

  # Supported in v5.0+
  # Operating system type of filesets created by template.
  operatingSystemType: FilesetTemplatePatchOperatingSystemType

  # Supported in v5.0+
  shareType: FilesetTemplatePatchShareType

  # Required. Supported in v5.0+
  id: String!
}
enum FilesetTemplatePatchOperatingSystemType {
  FILESET_TEMPLATE_PATCH_OPERATING_SYSTEM_TYPE_UNIX_LIKE
  FILESET_TEMPLATE_PATCH_OPERATING_SYSTEM_TYPE_WINDOWS
}
enum FilesetTemplatePatchShareType {
  FILESET_TEMPLATE_PATCH_SHARE_TYPE_NFS
  FILESET_TEMPLATE_PATCH_SHARE_TYPE_SMB
}
# Fileset template physical child.
interface FilesetTemplatePhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of FilesetTemplatePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type FilesetTemplatePhysicalChildTypeConnection {
  # List of FilesetTemplatePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [FilesetTemplatePhysicalChildTypeEdge!]!

  # List of FilesetTemplatePhysicalChildType objects.
  nodes: [FilesetTemplatePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of FilesetTemplatePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the FilesetTemplatePhysicalChildType object. This wrapper is used for pagination.
type FilesetTemplatePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual FilesetTemplatePhysicalChildType object wrapped by this edge.
  node: FilesetTemplatePhysicalChildType!
}
# Supported in v5.0+
type FilesetUpdate {
  # Supported in v5.0+
  # v5.0-v5.1: Assign Fileset to SLA domain
  # v5.2+: Assign Fileset to SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.2+
  # Whether to force a full on the whole fileset or certain partitions of the fileset. If this is set to true and no partitionIds are provided, then a full will be forced on the whole fileset. If set to true and partitionIds are provided, then we will force a full on only those partitions.
  forceFull: Boolean

  # Supported in v5.2+
  # Assign partition ids to set the force full. In order for this to be valid input, forceFull must be set to true.
  forceFullPartitionIds: [Int!]!

  # Supported in v5.3+
  # Rubrik CDM uses a prefix match to select the latest SnapMirror snapshot that matches this value during a full backup of a SnapMirror destination share.
  snapMirrorLabelForFullBackup: String

  # Supported in v5.3+
  # Rubrik CDM selects the latest SnapMirror snapshot that matches this value using a prefix match during an incremental backup of a SnapMirror destination share.
  snapMirrorLabelForIncrementalBackup: String
}
# A set of parameters to filter objects.
input Filter {
  field: HierarchyFilterField = IS_ARCHIVED
  texts: [String!] = []
  tagFilterParams: [TagFilterParams!] = []
  objectTypeFilterParams: [ManagedObjectType!] = []
  awsNativeProtectionFeatureNames: [AwsNativeProtectionFeature!] = []
  isNegative: Boolean = false
  isSlowSearchEnabled: Boolean = false
  azureNativeProtectionFeatureNames: [AzureNativeProtectionFeature!] = []
  unmanagedObjectAvailabilityFilter: [UnmanagedObjectAvailabilityFilter!] = []
}
# Supported in v7.0+
# Information about the asynchronous request initiated to create the multi-tag filter.
type FilterCreateResponse {
  # Required. Supported in v7.0+
  asyncRequestStatus: AsyncRequestStatus

  # Required. Supported in v7.0+
  # Conditional logic in the filter.
  condition: String!

  # Required. Supported in v7.0+
  # The ID of the filter created.
  id: String!

  # Required. Supported in v7.0+
  # Filter name.
  name: String!
}
# Supported in v7.0+
# Information needed to create a multi-tag filter.
input FilterInfoInput {
  # Supported in v7.0+
  # Filter description.
  description: String

  # Required. Supported in v7.0+
  # Conditional logic for vSphere tags.
  condition: String!

  # Required. Supported in v7.0+
  # Filter name.
  name: String!
}
type FilterOption {
  value: String
  displayValue: String!
}
# Supported in v7.0+
# A virtual machine that satisfies the proposed multi-tag filter condition.
type FilterPreviewResult {
  # Required. Supported in v7.0+
  # The proposed multi-tag filter condition.
  filterCondition: String!

  # Required. Supported in v7.0+
  virtualMachineSummary: VirtualMachineSummary
}
# Supported in v7.0+
type FilterPreviewResultListResponse {
  # Supported in v7.0+
  # List of matching objects.
  data: [FilterPreviewResult!]!

  # Supported in v7.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v7.0+
  # Total list responses.
  total: Int

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Input to process and finalize deletion of AWS cloud account.
input FinalizeAwsCloudAccountDeletionInput {
  # Rubrik ID of account to be deleted.
  cloudAccountId: UUID!

  # Protection feature to be deleted for the cloud account.
  feature: CloudAccountFeature!
}
# Process delete of aws cloud account.
type FinalizeAwsCloudAccountDeletionReply {
  # Contains success response message.
  message: String
}
# Input to finalize set up of an AWS cloud account.
input FinalizeAwsCloudAccountProtectionInput {
  # Action to be performed with cloud account.
  action: CloudAccountAction!

  # List of features for native protection of cloud account.
  features: [CloudAccountFeature!]!

  # Admin account, required for bulk upload.
  awsAdminAccount: AwsCloudAccountInput

  # List of AWS accounts.
  awsChildAccounts: [AwsCloudAccountInput!]!

  # List of AWS regions for the cloud account.
  awsRegions: [AwsCloudAccountRegion!]

  # Name of the CloudFormation stack to be created.
  stackName: String

  # Stackset name of the CloudFormation stack to be created.
  stackSetName: String

  # External ID of the IAM role trust policy for the cloud account.
  externalId: String

  # List of feature types to be protected for the cloud account.
  featureVersion: [AwsCloudAccountFeatureVersionInput!]
}
# Response for the operation to finalize protection for AWS cloud accounts.
type FinalizeAwsCloudAccountProtectionReply {
  # Contains success response message.
  message: String

  # Contains success response message.
  awsChildAccounts: [AwsCloudAccount!]!
}
# Supported in v9.0+
# API credentials to add or update the Pure NAS system with API integration. Also contains credentials for SMB share access.
input FlashBladeSystemParametersInput {
  # Supported in v9.0+
  # TLS certification to validate the NAS server.
  apiCertificate: String

  # Supported in v9.0+
  # ID corresponding to the imported certificate.
  certificateId: String

  # Supported in v9.0+
  # Credentials to access SMB shares.
  smbCredentials: GenericNasSystemCredentialsInput

  # Required. Supported in v9.0+
  apiToken: String!

  # Required. Supported in v9.0+
  # Specifies whether to enable SMB for this NAS system.
  hasSmbSupport: Boolean!
}
# The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
scalar Float
# Represents the OneDrive folder to be restored.
input FolderInfo {
  folderId: String!
  folderName: String!
  folderSize: Long!
  snapshotId: UUID!
  snapshotNum: Int!
  channelInfo: TeamsChannelInfo
}
# A Domain Controller can perform a wide range of roles.
enum FsmoRoles {
  # Domain Naming Master.
  DOMAIN_NAMING_MASTER

  # Infrastructure Master.
  INFRASTRUCTURE_MASTER

  # Primary Domain Controller Emulator.
  PDC_EMULATOR

  # Relative ID Master.
  RID_MASTER

  # Schema master.
  SCHEMA_MASTER

  # Unknown role.
  UNKNOWN_ROLE
}
# SharePoint object excluded from protection.
type FullSpObjectExclusion {
  # The fid of the SharePoint object.
  fid: String!

  # The name of the SharePoint object.
  name: String!

  # The URL of the SharePoint object.
  url: URL!

  # The object type.
  objectType: SharePointDescendantType!
}
# SharePoint objects excluded from protection under a site collection.
type FullSpSiteExclusions {
  # The fid of the SharePoint site collection.
  siteFid: String!

  # The objects to be excluded under the site collection.
  excludedObjects: [FullSpObjectExclusion!]!
}
# Supported in v5.1+
input FullyQualifiedDomainNameInfoInput {
  # Required. Supported in v5.1+
  # Fully qualified domain name where the filter should be hosted for install/upgrade operations.
  fqdn: String!
}
# Gateway information for NAT replication setup.
type GatewayInfo {
  # IPv4 address of the gateway.
  address: String!

  # Ports of the gateway.
  ports: [Int!]!
}
# Input required to add a GCP cloud account manually.
input GcpCloudAccountAddManualAuthProjectInput {
  # The native project ID of the GCP project.
  gcpNativeProjectId: String!

  # The project name of the GCP project.
  gcpProjectName: String!

  # The project number of the GCP project.
  gcpProjectNumber: Long!

  # The name of the organization containing the project.
  organizationName: String

  # The JWT configuration of the service account.
  serviceAccountJwtConfig: String

  # Features to be enabled for the GCP cloud account.
  features: [CloudAccountFeature!]!
}
# Detail of the Gcp Cloud Account Add operations.
type GcpCloudAccountAddProjectDetail {
  # Rubrik ID of the project.
  uuid: String!

  # GCP project ID.
  projectId: String!

  # Error while adding a GCP project, if any.
  error: String!
}
# Input required to add a GCP cloud account.
input GcpCloudAccountAddProjectsInput {
  # Session ID of the current OAuth session.
  sessionId: String!

  # List of GCP project native IDs to be added for native protection.
  nativeProtectionProjectIds: [String!]!

  # List of GCP shared VPC host project native IDs.
  sharedVpcHostProjectIds: [String!]!

  # List of project native IDs.
  cloudAccountsProjectIds: [String!]!
}
# Gcp Cloud Account Add Projects Response.
type GcpCloudAccountAddProjectsReply {
  # GCP cloud account add projects details.
  details: [GcpCloudAccountAddProjectDetail!]!
}
# Input required to delete a list of GCP projects.
input GcpCloudAccountDeleteProjectsInput {
  # Session ID of the current OAuth session (optional).
  sessionId: String

  # List of GCP project native IDs to be added for native protection.
  nativeProtectionProjectIds: [UUID!]!

  # List of GCP shared VPC host project native IDs.
  sharedVpcHostProjectIds: [UUID!]!

  # List of project native IDs.
  cloudAccountsProjectIds: [UUID!]!

  # Specifies whether cleanup of GCP resources should be skipped. If this flag is set, then the session ID is ignored.
  skipResourceDeletion: Boolean!
}
# Response for the request to delete GCP cloud account projects.
type GcpCloudAccountDeleteProjectsReply {
  # Statuses of the operation to delete GCP cloud account projects.
  gcpProjectDeleteStatuses: [GcpCloudAccountProjectDeleteStatus!]!
}
# Details of the Gcp Cloud Account feature.
type GcpCloudAccountFeatureDetail {
  # The cloud account feature.
  feature: CloudAccountFeature!

  # Specifies the status of the cloud account.
  status: CloudAccountStatus!
}
# List of permissions missing for project addition for projects ineligible for addition.
type GcpCloudAccountMissingPermissionsForAddition {
  # GCP project ID.
  projectId: String!

  # Permissions which are missing for adding a GCP project.
  missingPermissions: [String!]!
}
# Input to complete the GCP cloud account OAuth flow.
input GcpCloudAccountOauthCompleteInput {
  # Session ID of the current OAuth session.
  sessionId: String!

  # Authorization code received after the OAuth flow.
  authorizationCode: String!

  # Redirect URL used in the OAuth flow.
  redirectUrl: String!
}
# GCP Cloud Account OAuth Complete Response.
type GcpCloudAccountOauthCompleteReply {
  # GCP cloud account user information.
  userInfo: GcpOauthUserInfo
}
# Input to initiate the GCP cloud account OAuth flow.
input GcpCloudAccountOauthInitiateInput {
  # Customer URL.
  customerUrl: String!
}
# GCP Cloud Account OAuth Initiate Response.
type GcpCloudAccountOauthInitiateReply {
  # Client ID.
  clientId: String!

  # Session ID.
  sessionId: String!

  # State.
  state: String!

  # Redirect URL.
  redirectUrl: String!

  # Scope.
  scope: [String!]!
}
# GCP Cloud Account Project.
type GcpCloudAccountProject {
  # Rubrik ID of the GCP project.
  id: String!

  # Native ID of the GCP Project.
  projectId: String!

  # Name of the GCP project.
  name: String!

  # Native Project Number of the GCP Project.
  projectNumber: Long!

  # Google managed ID of the role created in the GCP project.
  roleId: String!

  # Whether the GCP project uses global configuration for authentication.
  usesGlobalConfig: Boolean!

  # The name of the organization containing the GCP Project.
  organizationName: String!
}
# Status of the Gcp Cloud Account delete operation.
type GcpCloudAccountProjectDeleteStatus {
  # GCP project ID.
  projectUuid: String!

  # Specifies whether project deletion succeeded.
  success: Boolean!

  # Error during deletion, if any.
  error: String!
}
# Details of the Gcp Cloud Account project configured for a feature.
type GcpCloudAccountProjectDetail {
  # GCP cloud account project.
  project: GcpCloudAccountProject

  # Details of the GCP cloud account feature.
  featureDetail: GcpCloudAccountFeatureDetail
}
# Details of a GCP project for OAuth.
type GcpCloudAccountProjectForOauth {
  # GCP project ID.
  projectId: String!

  # GCP project name.
  name: String!

  # List of permissions missing in the GCP project.
  missingPermissions: [String!]
}
# Status of the Gcp Cloud Account upgrade operation.
type GcpCloudAccountProjectUpgradeStatus {
  # GCP project ID.
  projectUuid: String!

  # Specifies whether upgrade succeeded.
  success: Boolean!

  # Error during upgrade, if any.
  error: String!
}
# Input required to upgrade a list of GCP projects.
input GcpCloudAccountUpgradeProjectsInput {
  # Session ID of the current OAuth session.
  sessionId: String!

  # List of GCP project IDs to be upgraded.
  projectIds: [UUID!]!

  # Cloud account feature.
  feature: CloudAccountFeature!
}
# Response for the request to upgrade GCP cloud account projects.
type GcpCloudAccountUpgradeProjectsReply {
  # Statuses of the operation to upgrade GCP cloud account projects.
  gcpProjectUpgradeStatuses: [GcpCloudAccountProjectUpgradeStatus!]!
}
# Attachment details of the GCP native disk.
type GcpNativeAttachmentDetails {
  # GCP disk Rubrik ID.
  diskId: String!

  # GCP native disk name.
  diskName: String!

  # Size of disk in GiB.
  sizeInGiBs: Int!

  # Specifies whether the disk is a boot disk or not.
  isBootDisk: Boolean!

  # Device name.
  deviceName: String!

  # Specifies whether the disk is excluded from virtual machine snapshot or not.
  isExcluded: Boolean!

  # GCP GCE instance Rubrik ID.
  instanceId: String!

  # GCP native GCE instance name.
  instanceName: String!

  # GCP native GCE zone.
  instanceZone: String!
}
# Input required to disable protection for a GCP native project.
input GcpNativeDisableProjectInput {
  # GCP native project ID.
  projectId: UUID!

  # Specifies whether to delete the native snapshots while disabling the project.
  shouldDeleteNativeSnapshots: Boolean!
}
type GcpNativeDisk implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , GcpNativeProjectLogicalChildType , GcpNativeProjectDescendantType {
  # GCP project ID for the disk.
  projectId: String!

  # GCP native disk ID.
  diskId: String!

  # Name of the disk.
  diskName: String!

  # Size of disk in GiB.
  sizeInGiBs: Int!

  # Type of the disk.
  diskType: String!

  # Region of the disk.
  region: String!

  # Zone of the disk.
  zone: String!

  # Replica zones of the disk.
  replicaZones: [String!]!

  # KMS key for the disk.
  kmsKey: String!

  # Relic status of the disk.
  isRelic: Boolean!

  # Labels attached to the disk.
  labels: [Label!]!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # GCP Project of the disk.
  gcpNativeProject: GcpNativeProject!

  # Instances to which the disk is attached.
  attachedInstances: [GcpNativeAttachmentDetails!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of GcpNativeDisk objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GcpNativeDiskConnection {
  # List of GcpNativeDisk objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GcpNativeDiskEdge!]!

  # List of GcpNativeDisk objects.
  nodes: [GcpNativeDisk!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GcpNativeDisk objects matching the request arguments.
  count: Int!
}
# Wrapper around the GcpNativeDisk object. This wrapper is used for pagination.
type GcpNativeDiskEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GcpNativeDisk object wrapped by this edge.
  node: GcpNativeDisk!
}
# Filters for list of GCP disks.
input GcpNativeDiskFilters {
  # Filter by name or ID substring.
  nameOrIdSubstringFilter: GcpNativeDiskNameOrIdSubstringFilter

  # Filter by the effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by GCP project name.
  projectFilter: GcpNativeDiskProjectFilter

  # Filter by GCP disk location.
  locationFilter: GcpNativeDiskLocationFilter

  # Filter by GCP disk type.
  diskTypeFilter: GcpNativeDiskTypeFilter

  # Filter by relic status.
  relicFilter: RelicFilter

  # Filter by GCP native labels.
  labelFilter: GcpNativeLabelFilter

  # Filter by organization ID.
  orgFilter: OrgFilter
}
# Filter to return GCP disks which have location in the given list of locations. Location can be a zone or a region.
input GcpNativeDiskLocationFilter {
  # Filter GCP disks by location.
  locations: [String!]!
}
# Filter to return GCP disks with a given substring in their name or ID.
input GcpNativeDiskNameOrIdSubstringFilter {
  # Name or ID substring.
  nameOrIdSubstring: String!
}
# Filter to return GCP disks which have project rubrik ID in the given list of project rubrik IDs.
input GcpNativeDiskProjectFilter {
  # Filter by GCP project ID.
  projectIds: [String!]!
}
# Fields to sort GCP native disks.
enum GcpNativeDiskSortFields {
  # Sort by SLA Domain assignment.
  ASSIGNED_SLA_DOMAIN

  # Sort by SLA Domain.
  EFFECTIVE_SLA_DOMAIN

  # Sort by GCP disk location.
  GCP_DISK_LOCATION

  # Sort by GCP disk native ID.
  GCP_DISK_NATIVE_ID

  # Sort by GCP disk native name.
  GCP_DISK_NATIVE_NAME

  # Sort by GCP project name.
  GCP_DISK_PROJECT_NAME

  # Sort by GCP disk size.
  GCP_DISK_SIZE
}
# Filter to return GCP disks which have disk type in the given list of disk types.
input GcpNativeDiskTypeFilter {
  # Filter by GCP disk type.
  diskTypes: [String!]!
}
# Input required to exclude GCP native disks from GCE instance snapshots.
input GcpNativeExcludeDisksFromInstanceSnapshotInput {
  # GCP instance Rubrik ID.
  instanceId: UUID!

  # Mapping from disk ID to whether it is excluded from GCP instance snapshots.
  diskIdToIsExcluded: [DiskIdToIsExcluded!]!
}
# Input required to export a GCP native disk snapshot.
input GcpNativeExportDiskInput {
  # Snapshot Rubrik ID.
  snapshotId: UUID!

  # The region of the exported disk.
  targetRegion: String!

  # The zone of the exported disk.
  targetZone: String

  # The name of the exported disk.
  targetDiskName: String!

  # The type of the exported disk.
  targetDiskType: String!

  # The size of the exported disk in GBs.
  targetDiskSizeGb: Int!

  # Specifies whether the exported disk should replace the source disk from the attached instance.
  replaceAttached: Boolean!

  # The zones where the regional exported disk should be replicated.
  replicaZones: [String!]

  # Specfies whether the labels will be copied to the exported disk from the source disk that were there at the time of taking the snapshot or not.
  shouldCopyLabels: Boolean!

  # Specifies whether to allow Rubrik labels on the exported disk or not.
  shouldAddRubrikLabels: Boolean!

  # Encryption type of exported disk.
  diskEncryptionType: DiskEncryptionType!

  # Customer managed key to encrypt exported disk. This is only applicable when encryption type is CustomerManagedKey.
  kmsCryptoKey: KmsCryptoKey

  # Customer managed key to encrypt exported disk. This is only applicable when encryption type is CustomerManagedKeyResourceId.
  kmsCryptoKeyResourceId: String
}
# Input required to export a GCP GCE instance snapshot.
input GcpNativeExportGceInstanceInput {
  # Snapshot Rubrik ID.
  snapshotId: UUID!

  # The zone of the exported disk.
  targetZone: String!

  # The name of the exported instance.
  targetInstanceName: String!

  # The machine type of the exported instance.
  targetMachineType: String!

  # The subnet name of the exported instance.
  targetSubnetName: String!

  # The network tags of the exported instance.
  targetNetworkTags: [String!]

  # Specifies whether the exported instance will be created in a powered-off state.
  shouldPowerOff: Boolean!

  # Specfies whether the labels will be copied to the exported disk from the source disk that were there at the time of taking the snapshot or not.
  shouldCopyLabels: Boolean!

  # Specifies whether to allow Rubrik labels on the exported disk or not.
  shouldAddRubrikLabels: Boolean!

  # Native ID of the shared VPC host project for the current service project.
  sharedVpcHostProjectNativeId: String

  # Encryption type of created disk.
  diskEncryptionType: DiskEncryptionType!

  # Customer managed key to encrypt exported instance. This is only applicable when encryption type is CustomerManagedKey.
  kmsCryptoKey: KmsCryptoKey

  # Customer managed key to encrypt exported instance. This is only applicable when encryption type is CustomerManagedKeyResourceId.
  kmsCryptoKeyResourceId: String
}
# GCP native firewall rule.
type GcpNativeFirewallRule {
  name: String!
  targetTags: [String!]!
}
# Represents a GCP GCE instance.
type GcpNativeGceInstance implements PolarisHierarchyObject , PolarisHierarchySnappable , HierarchyObject , GcpNativeProjectLogicalChildType , GcpNativeProjectDescendantType {
  # GCP project ID.
  projectId: String!

  # GCP GCE instance native ID.
  nativeId: String!

  # GCP GCE instance native name.
  nativeName: String!

  # The region of the GCP GCE instance.
  region: String!

  # The zone of the GCP GCE instance.
  zone: String!

  # The machine type of the GCP instance.
  machineType: String!

  # Name of Virtual Private Cloud (VPC) associated with the GCP GCE instance.
  vpcName: String!

  # Network host project native ID.
  networkHostProjectNativeId: String!

  # Specifies whether the GCP GCE instance is relic or not.
  isRelic: Boolean!

  # List of labels attached to the GCP instance.
  labels: [Label!]!

  # The authorized operations on the object.
  authorizedOperations: [PolarisSnappableAuthorizedOperationsEnum!]!

  # GCP Project of the GCE Instance.
  gcpNativeProject: GcpNativeProject!

  # List of attached GCP native disks.
  attachedDisks: [GcpNativeAttachmentDetails!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of GcpNativeGceInstance objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GcpNativeGceInstanceConnection {
  # List of GcpNativeGceInstance objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GcpNativeGceInstanceEdge!]!

  # List of GcpNativeGceInstance objects.
  nodes: [GcpNativeGceInstance!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GcpNativeGceInstance objects matching the request arguments.
  count: Int!
}
# Wrapper around the GcpNativeGceInstance object. This wrapper is used for pagination.
type GcpNativeGceInstanceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GcpNativeGceInstance object wrapped by this edge.
  node: GcpNativeGceInstance!
}
# Filters for list of GCP GCE instances.
input GcpNativeGceInstanceFilters {
  # Filter by name or ID substring.
  nameOrIdSubstringFilter: GcpNativeInstanceNameOrIdSubstringFilter

  # Filter by GCP project name.
  projectFilter: GcpNativeProjectFilter

  # Filter by region.
  regionFilter: GcpNativeRegionFilter

  # Filter by GCP instance type.
  machineTypeFilter: GcpNativeMachineTypeFilter

  # Filter by GCP instance network name.
  networkFilter: GcpNativeNetworkFilter

  # Filter by GCP native labels.
  labelFilter: GcpNativeLabelFilter

  # Filter by the effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter

  # Filter by relic status.
  relicFilter: RelicFilter

  # Filter by organization ID.
  orgFilter: OrgFilter
}
# Fields to sort GCP native GCE instances.
enum GcpNativeGceInstanceSortFields {
  # Sort by SLA Domain assignment.
  ASSIGNED_SLA_DOMAIN

  # Sort by SLA Domain.
  EFFECTIVE_SLA_DOMAIN

  # Sort by GCP instance native ID.
  GCP_INSTANCE_NATIVE_ID

  # Sort by GCP instance native name.
  GCP_INSTANCE_NATIVE_NAME

  # Sort by network name.
  GCP_INSTANCE_NETWORK_NAME

  # Sort by GCP project name.
  GCP_INSTANCE_PROJECT_NAME

  # Sort by GCP region.
  GCP_INSTANCE_REGION

  # Sort by GCP instance type.
  GCP_INSTANCE_TYPE
}
# Filter to return GCP GCE instances with a given substring in their name or ID.
input GcpNativeInstanceNameOrIdSubstringFilter {
  # Name or ID substring.
  nameOrIdSubstring: String!
}
# Represents a fully qualified GCP native KMS crypto key.
type GcpNativeKmsCryptoKey {
  # GCP project native ID.
  projectNativeId: String!

  # KMS crypto key location.
  location: String!

  # KMS crypto key ring.
  keyRing: String!

  # KMS crypto key.
  key: String!
}
# Filter to return GCP objects which have at least one label in the given list of labels.
input GcpNativeLabelFilter {
  # Filter by GCP labels.
  labelFilterParams: [LabelFilterParams!]!
}
# GCP native label filter type.
enum GcpNativeLabelFilterType {
  # Filter by label key.
  LABEL_KEY

  # Filter by label key and value.
  LABEL_KEY_VALUE
}
# Filter to return GCP GCE instances which have instance type in the given list of machine types.
input GcpNativeMachineTypeFilter {
  # Filter by GCP instance type.
  machineTypes: [String!]!
}
# Represents a GCP native VPC network.
type GcpNativeNetwork {
  # Name of the GCP native VPC network.
  name: String!

  # Project ID of the  GCP native VPC network.
  nativeProjectId: String!

  # Subnetworks of the GCP native VPC network.
  subnetworks: [GcpNativeSubnetwork!]!

  # Firewall rules of the GCP native VPC network.
  firewallRules: [GcpNativeFirewallRule!]!
}
# Filter to return GCP GCE instances which have network name in the given list of network names.
input GcpNativeNetworkFilter {
  # Filter by GCP instance network name.
  networkNames: [String!]!
}
# Represents a GCP project.
type GcpNativeProject implements PolarisHierarchyObject , HierarchyObject {
  # Status of the GCP project.
  status: GcpNativeProjectStatus!

  # Native id of the GCP project.
  nativeId: String!

  # Native name of the GCP project.
  nativeName: String!

  # Organization name of the GCP project.
  organizationName: String!

  # Project number of the GCP project.
  projectNumber: String!

  # Last refreshed time of the GCP project.
  lastRefreshedAt: DateTime

  # Number of virtual machines in the GCP project.
  vmCount: Int!

  # Number of disks in the GCP project.
  diskCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): GcpNativeProjectLogicalChildTypeConnection!

  # List of all GCE instances under this GCP project.
  gcpNativeGceInstanceConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder, gceInstanceFilters: GcpNativeGceInstanceFilters): GcpNativeGceInstanceConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of GcpNativeProject objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GcpNativeProjectConnection {
  # List of GcpNativeProject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GcpNativeProjectEdge!]!

  # List of GcpNativeProject objects.
  nodes: [GcpNativeProject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GcpNativeProject objects matching the request arguments.
  count: Int!
}
# Descendant type for GCP project.
interface GcpNativeProjectDescendantType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Wrapper around the GcpNativeProject object. This wrapper is used for pagination.
type GcpNativeProjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GcpNativeProject object wrapped by this edge.
  node: GcpNativeProject!
}
# Filter to return GCP objects which have project rubrik ID in the given list of project rubrik IDs.
input GcpNativeProjectFilter {
  projectIds: [String!]!
}
# Filters for list of GCP projects.
input GcpNativeProjectFilters {
  # Filter by name or ID substring.
  nameOrNumberSubstringFilter: GcpNativeProjectNameOrNumberSubstringFilter

  # Filter GCP projects by their native ID.
  idSubstringFilter: GcpNativeProjectIdSubstringFilter

  # Filter by the effective SLA Domain.
  effectiveSlaFilter: EffectiveSlaFilter
}
# Filter to return GCP projects with the given string in their project ID.
input GcpNativeProjectIdSubstringFilter {
  # Native ID of the GCP project.
  idSubstring: String!
}
# Logical child type for GCP project.
interface GcpNativeProjectLogicalChildType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of GcpNativeProjectLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GcpNativeProjectLogicalChildTypeConnection {
  # List of GcpNativeProjectLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GcpNativeProjectLogicalChildTypeEdge!]!

  # List of GcpNativeProjectLogicalChildType objects.
  nodes: [GcpNativeProjectLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GcpNativeProjectLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the GcpNativeProjectLogicalChildType object. This wrapper is used for pagination.
type GcpNativeProjectLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GcpNativeProjectLogicalChildType object wrapped by this edge.
  node: GcpNativeProjectLogicalChildType!
}
# Filter to return GCP projects with a given substring in their name or number.
input GcpNativeProjectNameOrNumberSubstringFilter {
  nameOrNumberSubstring: String!
}
# Fields to sort GCP native projects.
enum GcpNativeProjectSortFields {
  # Sort by SLA Domain.
  EFFECTIVE_SLA_DOMAIN

  # Sort by disk count.
  GCP_PROJECT_DISK_COUNT

  # Sort by GCE instance count.
  GCP_PROJECT_INSTANCE_COUNT

  # Sort by GCP project native ID.
  GCP_PROJECT_NATIVE_ID

  # Sort by GCP project number.
  GCP_PROJECT_NUMBER

  # Sort by GCP project native name.
  GCP_PROJECT_ORG_NAME

  # Sort by GCP project name.
  NAME
}
# Status of a GCP project.
enum GcpNativeProjectStatus {
  # The GCP project has been deleted.
  DELETED

  # The GCP project is in the process of getting deleted.
  DELETING

  # The deletion of the GCP project has failed.
  DELETION_FAILED

  # The GCP project has been refreshed.
  REFRESHED

  # The GCP project is refreshing.
  REFRESHING
}
# Input to refresh GCP native projects.
input GcpNativeRefreshProjectsInput {
  # List of project IDs.
  projectIds: [UUID!]!
}
# Represents a GCP native region.
type GcpNativeRegion {
  # Name of the GCP region.
  name: String!

  # Zones within the region.
  zones: [String!]!
}
# Filter to return GCP objects which have region in the given list of regions.
input GcpNativeRegionFilter {
  # List of GCP regions.
  regions: [String!]!
}
# Input required to restore a GCP GCE instance snapshot.
input GcpNativeRestoreGceInstanceInput {
  # Snapshot Rubrik ID.
  snapshotId: UUID!

  # Specifies whether to allow Rubrik labels on the restored disk or not.
  shouldAddRubrikLabels: Boolean!

  # Specifies whether to restore labels of the instance from snapshot or not.
  shouldRestoreLabels: Boolean!

  # Specfies whether the the restored instance should be started or not.
  shouldStartRestoredInstance: Boolean!
}
# GCP native subnetwork.
type GcpNativeSubnetwork {
  # Name of the subnet.
  name: String!

  # Region of the subnet.
  region: String!
}
# GCP user information received after OAuth flow is completed.
type GcpOauthUserInfo {
  # Email ID.
  emailId: String!

  # First name.
  firstName: String!

  # Domain name.
  domain: String!
}
# Represents a GCP permission.
type GcpPermission {
  # The permission.
  permission: String!
}
# Regions for GCP.
enum GcpRegion {
  # GCP region is Asia.
  ASIA

  # GCP region is Asia 1.
  ASIA1

  # GCP region is Asia East 1.
  ASIA_EAST1

  # GCP region is Asia East 2.
  ASIA_EAST2

  # GCP region is Asia North East 1.
  ASIA_NORTHEAST1

  # GCP region is Asia North East 2.
  ASIA_NORTHEAST2

  # GCP region is Asia North East 3.
  ASIA_NORTHEAST3

  # GCP region is Asia South 1.
  ASIA_SOUTH1

  # GCP region is Asia South East 1.
  ASIA_SOUTHEAST1

  # GCP region is Asia South East 2.
  ASIA_SOUTHEAST2

  # GCP region is Australia South East 1.
  AUSTRALIA_SOUTHEAST1

  # GCP region is Europe.
  EU

  # GCP region is Europe 4.
  EUR4

  # GCP region is Europe North 1.
  EUROPE_NORTH1

  # GCP region is Europe West 1.
  EUROPE_WEST1

  # GCP region is Europe West 2.
  EUROPE_WEST2

  # GCP region is Europe West 3.
  EUROPE_WEST3

  # GCP region is Europe West 4.
  EUROPE_WEST4

  # GCP region is Europe West 6.
  EUROPE_WEST6

  # GCP region is North America 4.
  NAM4

  # GCP region is North America North East 1.
  NORTHAMERICA_NORTHEAST1

  # GCP region is South America East 1.
  SOUTHAMERICA_EAST1

  # GCP region is Unknown.
  UNKNOWN_GCP_REGION

  # GCP region is in US.
  US

  # GCP region is US Central 1.
  USCENTRAL1

  # GCP region is US East 1.
  USEAST1

  # GCP region is US East 4.
  USEAST4

  # GCP region is US West 1.
  USWEST1

  # GCP region is US West 2.
  USWEST2

  # GCP region is US West 3.
  US_WEST3

  # GCP region is US West 4.
  US_WEST4
}
# Input required to set default GCP service account JWT configuration.
input GcpSetDefaultServiceAccountJwtConfigInput {
  # The name of the service account.
  serviceAccountName: String!

  # The JWT configuration for a service account.
  serviceAccountJwtConfig: String!
}
# Storage class for GCP type location.
enum GcpStorageClass {
  # Coldline GCP storage class.
  COLDLINE_GCP

  # Durable reduced availability GCP storage class.
  DURABLE_REDUCED_AVAILABILITY_GCP @deprecated(reason: "Deprecated. Use STANDARD instead.")

  # Nearline GCP storage class.
  NEARLINE_GCP

  # Standard GCP storage class.
  STANDARD_GCP

  # Unknown GCP storage class.
  UNKNOWN_STORAGE_CLASS_GCP
}
# Input required for providing cluster configuration details for registration.
input GenerateClusterRegistrationTokenInput {
  # If true, generate a token for registering a Hybrid cluster. If false, generate a token for registering LifeOfDevice cluster. If it's not passed, the product type is inferred automatically. Value would be absent in case of single SKU.
  managedByPolaris: Boolean

  # Configuration details for nodes in the cluster. Input is optional as all CDM releases don't support this configuration generation.
  nodeConfigs: [NodeRegistrationConfigsInput!]

  # Indicates whethere the registration is being performed in offline mode or online. Input is optional as all CDM releases don't support offline registration.
  isOfflineRegistration: Boolean
}
# Input for generating configuration protection restore form.
input GenerateConfigProtectionRestoreFormInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Request to generate restore form.
  restoreFormRequest: RestoreFormRequestInput!
}
# Supported in v7.0+
type GenerateConfigProtectionRestoreFormReply {
  # Required. Supported in v7.0+
  # Configurations backed-up.
  configurations: RestoreFormConfigurations

  # Supported configuration types for configuration protection.
  configurationTypes: [ConfigurationTypes!]!
}
# Input for generating support bundle.
input GenerateSupportBundleInput {
  # Either event id or request id list of the request to be collected, if both are provided, request id list would be ignored.
  definitions: GenerateSupportBundleRequestInput

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Supported in v5.0+
input GenerateSupportBundleRequestInput {
  # Supported in v5.0+
  eventId: String

  # Supported in v5.0+
  requestIds: [String!] = []
}
# TOTP secret for a user.
type GenerateTotpSecretReply {
  # TOTP secret key.
  secret: String!

  # TOTP secret URI.
  secretUri: String!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Credentials to add or update a generic NAS system.
input GenericNasSystemCredentialsInput {
  # Required. Supported in v7.0+
  # Password associated with the NAS user account.
  password: String!

  # Required. Supported in v7.0+
  # Username to access the NAS server and share.
  username: String!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Protocol support and SMB credentials for a NAS system.
input GenericNasSystemParametersInput {
  # Supported in v7.0+
  # The credentials to access SMB server.
  smbCredentials: GenericNasSystemCredentialsInput

  # Required. Supported in v7.0+
  # Specifies whether to enable NFS for this server.
  hasNfsSupport: Boolean!

  # Required. Supported in v7.0+
  # Specifies whether to enable SMB for this server.
  hasSmbSupport: Boolean!
}
# A generic snapshot type.
interface GenericSnapshot {
  # The ID of the snapshot.
  id: UUID!

  # The date of the snapshot.
  date: DateTime!

  # Specifies whether or not the snapshot is corrupted.
  isCorrupted: Boolean!

  # Specifies whether or not the snapshot is indexed.
  isIndexed: Boolean!

  # Specifies whether or not the snapshot is unindexable.
  isUnindexable: Boolean!

  # The number of indexing attempts for the snapshot.
  indexingAttempts: Long!

  # The expirationDate of the snapshot.
  expirationDate: DateTime

  # Specifies whether or not the snapshot is expired.
  isExpired: Boolean!

  # Specifies whether the snapshot is an on-demand snapshot.
  isOnDemandSnapshot: Boolean!

  # The workload ID of the snapshot.
  snappableId: String!

  # Specifies whether the snapshot is quarantined.
  isQuarantined: Boolean!
}
# Paginated list of GenericSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GenericSnapshotConnection {
  # List of GenericSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GenericSnapshotEdge!]!

  # List of GenericSnapshot objects.
  nodes: [GenericSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GenericSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the GenericSnapshot object. This wrapper is used for pagination.
type GenericSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GenericSnapshot object wrapped by this edge.
  node: GenericSnapshot!
}
type GenericTimeRange {
  absoluteTimeRange: TimeRange
  relativeTimeRange: RelativeTimeRange
}
input GenericTimeRangeInput {
  relativeTimeRange: RelativeTimeRangeInput
  absoluteTimeRange: TimeRangeInput
}
type GeoLocation {
  address: String!
  latitude: Float!
  longitude: Float!
}
# Anomaly analysis report from lambda service.
type GetAnomalyDetailsReply {
  # The internal FID of the object.
  workloadFid: String!

  # The internal ID of the object.
  workloadId: String!

  # The name of the object.
  workloadName: String!

  # The internal ID of the snapshot.
  snapshotId: String!

  # The internal FID of the snapshot.
  snapshotFid: String!

  # The internal managed ID of the object.
  managedId: String!

  # The ID of the previous snapshot.
  previousSnapshotId: String!

  # The count of new files created.
  filesCreatedCount: Long!

  # The count of files deleted.
  filesDeletedCount: Long!

  # The count of files modified.
  filesModifiedCount: Long!

  # Total number of suspicious files.
  suspiciousFilesCount: Long!

  # Total new bytes created.
  bytesCreatedCount: Long!

  # Total bytes modified.
  bytesModifiedCount: Long!

  # Total bytes deleted.
  bytesDeletedCount: Long!

  # Net change in the number of bytes. For example, if 5 bytes are added and 3 bytes deleted, this field returns 2 as the number of bytes that changed.
  bytesNetChangedCount: Long!

  # Total suspicious bytes.
  bytesSuspiciousCount: Long!

  # Level of encryption detected.
  encryption: EncryptionLevel!

  # The probability of the snapshot being anomalous.
  anomalyProbability: Float!

  # Specifies whether the snapshot is anomalous.
  isAnomaly: Boolean!

  # The date of the snapshot.
  snapshotDate: DateTime

  # The date of the previous snapshot.
  previousSnapshotDate: DateTime

  # Information about possible ransomware strains.
  anomalyInfo: AnomalyInfo

  # The id of the anomaly.
  id: String!

  # Time when the anomaly was detected.
  detectionTime: DateTime

  # Activity series id for the events of this anomaly.
  activitySeriesId: String!

  # Type of the anomaly detected.
  anomalyType: AnomalyType!

  # The FID of the previous snapshot.
  previousSnapshotFid: String!

  # Severity of the anomaly.
  severity: ActivitySeverityEnum!

  # The type of the object.
  objectType: ObjectTypeEnum

  # The Rubrik cluster of the object.
  cluster: Cluster!

  # The location of the object.
  location: String!

  # The analyzed snapshot.
  snapshot: CdmSnapshot

  # The previous snapshot.
  previousSnapshot: CdmSnapshot

  # The ransomware analysis result, including encryption.
  ransomwareResult: RansomwareResult
}
type GetAzureHostTypeResp {
  # Host type.
  hostType: AzureHostType!
}
type GetAzureO365ExocomputeResp {
  cluster: AzureO365ExocomputeCluster
}
# Input to retrieve the metadata of a certificate.
input GetCertificateInfoInput {
  # The certificate, in x509 PEM format.
  certificatePem: String!
}
# Certificate metadata details.
type GetCertificateInfoReply {
  # The expiration date of the certificate.
  expiringAt: DateTime

  # The date when the certificate was issued.
  issuedOn: DateTime

  # The certificate in x509 PEM format.
  certificate: String!

  # To whom the certificate was issued.
  issuedTo: String!

  # The issuer of the certificate.
  issuedBy: String!

  # The sha-1 fingerprint, in hexadecimal format, of the certificate.
  sha1Fingerprint: String!

  # The sha-256 fingerprint, in hexadecimal format, of the certificate.
  sha256Fingerprint: String!

  # The serial number in hexadecimal format of the certificate.
  serialNumber: String!
}
# Input to retrieve cloud compute connectivity status.
input GetCloudComputeConnectivityCheckRequestStatusInput {
  # Required. ID of the request.
  id: String!
}
# Represents the list of user-visible label rules.
type GetCloudNativeLabelRulesReply {
  # List of label rules visible to the user.
  labelRules: [LabelRule!]!
}
# Represents the list of user-visible tag rules.
type GetCloudNativeTagRulesReply {
  # List of tag rules visible to the user.
  tagRules: [CloudNativeTagRule!]!
}
# Input for getting cluster certificate signing request.
input GetClusterCsrInput {
  # Required. ID of the Rubrik cluster hosting the API session or *me* for self.
  id: String!
}
input GetClusterIpsInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
input GetClusterNtpServersInput {
  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Input for getting compatible instances for the recovery of a SQL Server database.
input GetCompatibleMssqlInstancesV1Input {
  # Time, in ISO8601 format, to recover to. For example \"2016-01-01T01:23:45.678Z\". If this is not specified, the latest recoverable time is used.
  recoveryTime: DateTime

  # Required. Recovery type.
  recoveryType: V1GetCompatibleMssqlInstancesV1RequestRecoveryType!

  # Required. ID of the Microsoft SQL database.
  id: String!
}
input GetComputeClusterInput {
  # Required. ID of the compute cluster.
  id: String!
}
# Input for retrieving Nutanix containers.
input GetContainersInput {
  # Required. ID of the Nutanix cluster.
  id: String!
}
# Input required for retrieving a specific Certificate Signing Request (CSR).
input GetCsrInput {
  # FID of the CSR to retrieve.
  csrFid: UUID!
}
type GetDashboardSummaryReply {
  analyzerResults: [AnalyzerResult!]!
  policyResults: [AnalyzerGroupResult!]!
}
# Input for retrieving details about a Db2 database-related job.
input GetDb2DatabaseAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the request object used to poll the status.
  id: String!
}
# Input for getting default properties of SQL Server databases.
input GetDefaultDbPropertiesV1Input {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
input GetDefaultGatewayInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for retrieving details about a fileset-related async request.
input GetFilesetAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the request.
  id: String!
}
# Input for retrieving the health monitor policy status.
input GetHealthMonitorPolicyStatusInput {
  # Indicates if the policy enforcement status should include expanded result for each policy.
  hasDetailedStatus: Boolean

  # Optional list of Node IDs. If not provided, the response includes the status of all the nodes.
  nodeIds: [String!] = []

  # Optional list of policy IDs. If not provided, the response includes the status of all the policies.
  policyIds: [String!] = []

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Response to get policy status.
type GetHealthMonitorPolicyStatusReply {
  # List of health monitor policies and their status.
  items: [NodePolicyCheckResult!]!
}
input GetHotAddBandwidthInput {
  # Required. The ID of the vCenter server from which to derive the number of proxies needed.
  id: String!
}
input GetHotAddNetworkInput {
  # Required. ID of the vCenter server for which the Rubrik cluster is retrieving the configured HotAdd network information.
  id: String!
}
# Input for retrieving the status of an async request from the specified Hyper-V host.
input GetHypervHostAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the request.
  id: String!
}
# Input for retrieving the status of an async request from the specified Hyper-V SCVMM.
input GetHypervScvmmAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the request.
  id: String!
}
# Input for retrieving the status of an async request from the specified Hyper-V virtual machine.
input GetHypervVirtualMachineAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the request.
  id: String!
}
# Input for getting the details of a Hyper-V virtual machine.
input GetHypervVirtualMachineInput {
  # Required. ID of the Virtual Machine.
  id: String!
}
# Get implicitly authorized ancestors response.
type GetImplicitlyAuthorizedAncestorSummariesResponse {
  objectSummaries: [ObjectSummary!]!
}
# Get implicitly authorized objects response.
type GetImplicitlyAuthorizedObjectSummariesResponse {
  objectSummaries: [ObjectSummary!]!
}
input GetIpmiInput {
  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Lambda configuration details of the Rubrik cluster.
type GetLambdaConfigReply {
  # The account id associated with the request.
  accountId: String!

  # The cluster UUID.
  clusterId: String!

  # Whether automatic fmd upload is enabled for the cluster.
  enableAutomaticFmdUpload: Boolean!

  # Whether fmd upload is enabled for all resources.
  enableFmdUploadForAllResources: Boolean!

  # The default diff fmd upload prefix.
  defaultDiffFmdUploadPrefix: String!

  # The maximum number of snapshots to upload automatically.
  maxSnapshotsToUploadAutomatically: Int!

  # Enable or disable threat monitoring.
  isThreatMonitoringEnabled: Boolean!
}
# Information about the licensed products the customer has.
type GetLicensedProductsInfoReply {
  # Represents a list of licensed cluster products.
  clusterProducts: [LicensedClusterProduct!]!
}
# MFA settings for an account.
type GetMfaSettingReply {
  # Boolean value indicating whether TOTP is globally enforced.
  isTotpEnforcedGlobal: Boolean!

  # Integer value indicating the period of showing TOTP configuration reminder in hours.
  totpReminderHours: Int!

  # Integer value indicating the time of remembering the MFA login in hours.
  mfaRememberHours: Int!

  # Boolean value indicating whether TOTP global enforcement is locked.
  isTotpGlobalEnforceLocked: Boolean!

  # Specifies the date when TOTP enforcement becomes mandatory.
  mandatoryTotpEnforcementDate: DateTime

  # Specifies whether TOTP is mandatory.
  isTotpMandatory: Boolean!
}
# Input for getting missed snapshots of a SQL Server database.
input GetMissedMssqlDbSnapshotsInput {
  # Filter snapshots to those missed on or after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  afterTime: DateTime

  # Filter snapshots to those missed on or before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  beforeTime: DateTime

  # Required. ID of the Microsoft SQL database.
  id: String!
}
input GetMissedOracleDbSnapshotsInput {
  # Filter the matches in the response to include only the snapshots taken on or after the time specified by a date-time string. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  afterTime: DateTime

  # Filter the matches in the response to include only the snapshots taken on or after the time specified by a date-time string. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  beforeTime: DateTime

  # Required. ID assigned to an Oracle database object.
  id: String!
}
# Input for getting NoSQL protection recoverable range of snapshots.
input GetMosaicRecoverableRangeInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Request Object with details of Tables whose recovery range is required.
  recoveryRangeRequestData: MosaicRecoverableRangeRequestInput!
}
# Supported in m3.2.0-m4.2.0
# Request Range Response Object carrying details of restore range for the table and request status details.
type GetMosaicRecoverableRangeResponse {
  # Supported in m3.2.0-m4.2.0
  # Object with details of Any Point In Time restore Range.
  data: MosaicRecoverableRangeObject

  # Supported in m3.2.0-m4.2.0
  # Response Message string.
  message: String

  # Supported in m3.2.0-m4.2.0
  # Return Code.
  returnCode: Long

  # Supported in m3.2.0-m4.2.0
  # Status of the request.
  status: Boolean
}
# Input for querying NoSQL protection store.
input GetMosaicStoreInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for querying NoSQL protection table schema.
input GetMosaicTableSchemaInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Schema request Object with details of schema which needs to be retrieved.
  schemaRequestData: MosaicGetSchemaRequestInput!
}
# Input for querying NoSQL protection version.
input GetMosaicVersionInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Version filters.
  versionData: VersionInput!
}
# Input for getting missed recoverable ranges of a SQL Server database.
input GetMssqlDbMissedRecoverableRangesInput {
  # Filter the missed ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  afterTime: DateTime

  # Filter the missed ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  beforeTime: DateTime

  # Required. ID of the Microsoft SQL database.
  id: String!
}
# Input for getting recoverable ranges of a SQL Server database.
input GetMssqlDbRecoverableRangesInput {
  # Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678Z\".
  afterTime: DateTime

  # Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  beforeTime: DateTime

  # Required. ID of the Microsoft SQL database.
  id: String!
}
input GetNetworkInterfaceInput {
  # Will retrieve info for a specific interface if passed in.
  interface: String

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
input GetNetworksInput {
  # Required. The ID of the vCenter server for which to retrieve user-configured networks.
  id: String!
}
# Input for getting a list of nodes in a Rubrik cluster.
input GetNodesInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
input GetNumProxiesNeededInput {
  # Required. The ID of the vCenter server for which to get the number of proxies needed.
  id: String!
}
# Input for retrieving the status of an async request from a specified Nutanix cluster.
input GetNutanixClusterAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the request.
  id: String!
}
# Input for retrieving Nutanix networks.
input GetNutanixNetworksInput {
  # Required. ID of the Nutanix cluster.
  id: String!
}
# Input for retrieving Nutanix virtual machine snapshot detail.
input GetNutanixSnapshotDetailInput {
  # Required. ID of snapshot.
  id: String!
}
# Input for retrieving the status of an async request from a specified Nutanix virtual machine.
input GetNutanixVmAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the request.
  id: String!
}
type GetO365ServiceStatusResp {
  status: O365ServiceStatusIndication!
  lastUpdated: DateTime
}
type GetO365StorageStatsResp {
  liveDataSizeInBytes: Long!
  physicalDataSizeInBytes: Long!
  storageEfficiencyPercent: Long!
  physicalDataSizeTimeSeries: [O365PhysicalDataSizeTimeStamp!]!
  dailyGrowthInBytes: Long!
  estimatedThirtyDaysStorageInBytes: Long!
}
# Input for retrieving details about an Oracle-related async request.
input GetOracleAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the async request job.
  id: String!
}
input GetOracleDbMissedRecoverableRangesInput {
  # Filter the missed ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  afterTime: DateTime

  # Filter the missed ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  beforeTime: DateTime

  # Required. ID of the Oracle database.
  id: String!
}
input GetOracleDbRecoverableRangesInput {
  # Filter ranges to end after this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678Z\".
  afterTime: DateTime

  # Filter ranges to start before this time. The date-time string should be in ISO8601 format, such as \"2016-01-01T01:23:45.678\".
  beforeTime: DateTime

  # Include database snapshot summaries in the response.
  shouldIncludeDbSnapshotSummaries: Boolean

  # Required. ID of the Oracle database.
  id: String!
}
# Supported in v8.0+
input GetOraclePdbDetailsRequestInput {
  # Required. Supported in v8.0+
  # Snapshot ID or timestamp for which the PDB details are to be retrieved.
  recoveryPoint: OracleRecoveryPointInput!
}
# Input for getting pending SLA Domain assignment status.
input GetPendingSlaAssignmentsInput {
  # Required. Object with a list of object IDs to use when retrieving pending SLA Domain assignments.
  pendingAssignmentsRequest: PendingSlaOperationsRequestInput!
}
# Supported in v5.2+
type GetPendingSlaAssignmentsReply {
  # Required. List of invalid managed IDs from the input. These IDs either do not exist or cannot have an SLA Domain assigned to them.
  invalidIds: [String!]!

  # Required. List of objects with completed SLA Domain operations.
  objectsWithNoOp: [ManagedObjectSlaInfo!]!

  # Required. List of objects with pending SLA Domain operations.
  objectsWithPendingOp: [ManagedObjectPendingSlaInfo!]!
}
# Specifies the health metric for the Ransomware Investigation pipeline covering the backup, indexing, and analysis jobs.
type GetPipelineHealthReply {
  # The total number of backups in the specified time range.
  totalBackup: Long!

  # The number of failed backups in the specified time range.
  failedBackup: Long!

  # The total number of indexing operations in the specified time range.
  totalIndexing: Long!

  # The number of failed indexing operations in the specified time range.
  failedIndexing: Long!

  # The total number of analysis operations in the specified time range.
  totalAnalysis: Long!

  # The number of failed analysis operations in the specified time range.
  failedAnalysis: Long!
}
type GetPoliciesTimelineReply {
  policyHitsEntries: [TimelineEntry!]!
  totalHitsEntries: [TimelineEntry!]!
  policyFilesHitsEntries: [TimelineEntry!]!
  totalFilesHitsEntries: [TimelineEntry!]!
  policyOaFilesHitsEntries: [TimelineEntry!]!
  totalOaFilesHitsEntries: [TimelineEntry!]!
  policyStaleFilesHitsEntries: [TimelineEntry!]!
  totalStaleFilesHitsEntries: [TimelineEntry!]!
  totalOaFilesEntries: [TimelineEntry!]!
  totalOaFoldersEntries: [TimelineEntry!]!
  totalStaleOaFilesEntries: [TimelineEntry!]!

  # Count of high-risk objects.
  highRiskObjects: [TimelineEntry!]!

  # Count of low-risk objects.
  lowRiskObjects: [TimelineEntry!]!

  # Count of no-risk objects.
  noRiskObjects: [TimelineEntry!]!

  # Count of workloads undergoing initial analysis.
  initialAnalysisStatus: [TimelineCountEntry!]!

  # Count of workloads that are up to date.
  upToDateStatus: [TimelineCountEntry!]!

  # Count of workloads that are not up to date.
  outOfDateStatus: [TimelineCountEntry!]!

  # Count of medium-risk objects.
  mediumRiskObjects: [TimelineEntry!]!
  policySummaries: [ClassificationPolicySummary!]!
}
# Specifies the versioning and object ACL state of the AWS S3 bucket.
type GetS3BucketStateForRecoveryReply {
  # Specifies whether the versioning is enabled on the AWS S3 bucket.
  isVersioningEnabled: Boolean!

  # Specifies whether object ACL is enabled on the AWS S3 bucket.
  isObjectAclEnabled: Boolean!
}
# Supported in m3.2.0-m4.2.0
# Schema Response Object carrying details of schema for the table and request status details.
type GetSchemaResponse {
  # Supported in m3.2.0-m4.2.0
  # Response Message string.
  message: String

  # Supported in m3.2.0-m4.2.0
  # Return Code.
  returnCode: Long

  # Supported in m3.2.0-m4.2.0
  # Status of the request.
  status: Boolean

  # Supported in m3.2.0-m4.2.0
  # Object with schema details.
  data: CassandraSchemaObject
}
input GetSmbConfigurationInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Reply Object for GetSmbConfiguration.
type GetSmbConfigurationReply {
  output: SmbConfig
}
# Input for retrieving an SNMP configuration.
input GetSnmpConfigurationInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Input for retrieving multiple syslog export rules.
input GetSyslogExportRulesInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Taskchain status reply.
type GetTaskchainStatusReply {
  taskchain: Taskchain
}
# TOTP status for a user.
type GetTotpStatusReply {
  # TOTP as 2FA is enabled.
  isEnabled: Boolean!

  # TOTP as 2FA is enforced.
  isEnforced: Boolean!

  # Integer value indicating the period of showing TOTP configuration reminder in hours.
  totpReminderHours: Int!

  # Timestamp of last TOTP configuration update.
  totpConfigUpdateAt: DateTime

  # Specifies whether TOTP is supported for the user.
  isSupported: Boolean!
  isEnforcedUserLevel: Boolean!
}
# Input for getting the status of SSH Tunnel for Support Access.
input GetTunnelStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the node to check the tunnel status for.
  id: String!
}
type GetUserDetailReply {
  name: String!
  risk: RiskLevelType!
  location: String!
  numFilesAccessible: Int!
}
# Specifies information about the session management configuration for the user account.
type GetUserSessionManagementConfigReply {
  # User session management configuration.
  config: UserSessionManagementConfig
}
input GetVlanInput {
  # Will retrieve info for a specific VLAN if passed in.
  vlan: Int

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
input GetVmwareHostInput {
  # Required. ID of the VMWare host.
  id: String!
}
# Get IP whitelist configuration.
type GetWhitelistReply {
  enabled: Boolean!
  mode: WhitelistModeEnum!
  ipCidrs: [String!]!
}
# Specifies the Ransomware Investigation alert enablement for a workload.
type GetWorkloadAlertSettingReply {
  # Specifies whether anomaly alerts are enabled or not.
  enabled: Boolean!
}
# Information about a certificate on Rubrik Security Cloud.
type GlobalCertificate {
  # The ID of the certificate.
  certificateId: String!

  # The display name of the certificate.
  name: String!

  # The description of the certificate.
  description: String!

  # Specifies whether the certificate has a private key.
  hasKey: Boolean!

  # The expiration date of the certificate.
  expiringAt: DateTime

  # The certificate in raw PEM format.
  certificate: String!

  # To whom the certificate was issued.
  issuedTo: String!

  # The issuer of the certificate.
  issuedBy: String!

  # The date on which the certificate was issued.
  issuedOn: DateTime

  # Specifies if the certificate is signed by a Certificate Authority.
  isCaSigned: Boolean!

  # The expiration status of the certificate.
  status: GlobalCertificateStatus!

  # The SHA-1 fingerprint of the certificate, in hexadecimal format.
  sha1Fingerprint: String!

  # The SHA-256 fingerprint of the certificate, in hexadecimal format.
  sha256Fingerprint: String!

  # The serial number of the certificate, in hexadecimal format.
  serialNumber: String!

  # Specifies whether the certificate was imported directly from Rubrik CDM.
  isCdmBorn: Boolean!

  # The FID of the certificate.
  certificateFid: UUID!

  # The Rubrik clusters to which the certificate has been uploaded.
  clusters: [CertificateClusterInfo!]

  # The usages for the certificate on Rubrik clusters.
  cdmUsages: [CdmCertificateUsageInfo!]!

  # The usages for the certificate on Rubrik Security Cloud.
  usages: [CertificateUsageInfo!]!

  # The organization to which the certificate has been assigned.
  org: Org
}
# Paginated list of GlobalCertificate objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GlobalCertificateConnection {
  # List of GlobalCertificate objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GlobalCertificateEdge!]!

  # List of GlobalCertificate objects.
  nodes: [GlobalCertificate!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GlobalCertificate objects matching the request arguments.
  count: Int!
}
# Wrapper around the GlobalCertificate object. This wrapper is used for pagination.
type GlobalCertificateEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GlobalCertificate object wrapped by this edge.
  node: GlobalCertificate!
}
# How to sort the certificates.
enum GlobalCertificateSortBy {
  # Sort by the expiration date of the certificate.
  SORT_BY_EXPIRATION_DATE

  # Sort by the name of the certificate.
  SORT_BY_NAME

  # The sorting filter is unknown.
  SORT_BY_UNSPECIFIED
}
# The expiration status of the certificate.
enum GlobalCertificateStatus {
  # The certificate has expired.
  EXPIRED

  # The certificate is expiring within 30 days.
  EXPIRING_SOON

  # The expiration status of the certificate is unknown.
  STATUS_UNSPECIFIED

  # The certificate does not expire within 30 days.
  VALID
}
# Input to list global certificates.
input GlobalCertificatesQueryInput {
  # The query to filter the certificates.
  searchText: String

  # Specifies whether to return only the certificates with private keys.
  hasKey: Boolean

  # The status of the certificates.
  statuses: [GlobalCertificateStatus!]

  # The UUIDs of the Rubrik clusters on which to filter.
  clusterIds: [UUID!]

  # Specifies whether the certificate is in the trust store of the Rubrik cluster.
  isTrustedAny: Boolean

  # Specifies whether to include only certificates imported via RSC.
  isRscBorn: Boolean
}
# Available options for retention of existing snapshots.
enum GlobalExistingSnapshotRetention {
  # Expire immediately.
  EXPIRE_IMMEDIATELY

  # Keep forever.
  KEEP_FOREVER

  # Not applicable.
  NOT_APPLICABLE

  # Preserve retention from previous SLA Domain.
  RETAIN_SNAPSHOTS
}
# Input for searching files across a Rubrik cluster.
input GlobalFileSearchInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Global search query.
  query: GlobalFileSearchQueryInput!
}
# Supported in v5.1+
input GlobalFileSearchQueryInput {
  # Required. Supported in v5.1+
  # Regex to match.
  regex: String!

  # Required. Supported in v5.1+
  # Managed IDs of snappables to search across.
  snappableIds: [String!]!
}
# Supported in v5.1+
type GlobalFileSearchReply {
  # Supported in v5.1+
  # List of matching objects.
  data: [GlobalSearchFile!]!

  # Supported in v5.1+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.1+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Global manager connectivity status.
type GlobalManagerConnectivity {
  # URLs pinged to check connectivity.
  urls: [GlobalManagerUrl!]!
}
# URLs pinged to check connectivity.
type GlobalManagerUrl {
  # URL pinged to check connectivity.
  url: String!

  # Whether or not the URL check has passed.
  isReachable: Boolean!
}
# Supported in v5.1+
type GlobalSearchFile {
  # Required. Supported in v5.1+
  # List of directories containing the file.
  dirs: [String!]!

  # Required. Supported in v5.1+
  # Filename of the file.
  filename: String!

  # Required. Supported in v5.1+
  # True if the returned path is not a directory.
  isFile: Boolean!

  # Required. Supported in v5.1+ Managed ID of the workload containing the file.
  snappableId: String!

  # Required. Supported in v5.1+ Name of the workload containing the file.
  snappableName: String!

  # Supported in v7.0+
  # Last time, in seconds, this file was modified since epoch.
  modifiedTime: Long

  # Supported in v7.0+
  # Number of snapshots containing the file.
  numSnapshots: Int

  # Supported in v7.0+
  # Size, in bytes, of the file.
  sizeInBytes: Long

  # Supported in v7.0+
  # Time latest, in milliseconds, snapshot was taken with this file since epoch.
  snapshotTime: Long
}
# Filters for SLA Domains.
input GlobalSlaFilterInput {
  # Field for the SLA Domain filter.
  field: GlobalSlaQueryFilterInputField = NAME

  # Text for the SLA Domain filter.
  text: String = ""

  # List of workload types for the SLA Domain filter.
  objectTypeList: [SlaObjectType!] = []

  # List of text strings for the SLA Domain filter.
  textList: [String!] = []
}
# Metadata for rendering an SLA for filter.
type GlobalSlaForFilter {
  # ID of the SLA Domain.
  id: String!

  # Name of the SLA Domain.
  name: String!
}
# Paginated list of GlobalSlaForFilter objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GlobalSlaForFilterConnection {
  # List of GlobalSlaForFilter objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GlobalSlaForFilterEdge!]!

  # List of GlobalSlaForFilter objects.
  nodes: [GlobalSlaForFilter!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GlobalSlaForFilter objects matching the request arguments.
  count: Int!
}
# Wrapper around the GlobalSlaForFilter object. This wrapper is used for pagination.
type GlobalSlaForFilterEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GlobalSlaForFilter object wrapped by this edge.
  node: GlobalSlaForFilter!
}
# Sort Global SLA Domains by filter.
enum GlobalSlaQueryFilterInputField {
  # Filter SLA Domains for assigned to this Archival group.
  ARCHIVAL_GROUP_ID

  # Filter SLA Domains for assigned to this Archival location.
  ARCHIVAL_LOCATION_ID

  # Filter by Rubrik cluster.
  CLUSTER_UUID

  # Filter SLA Domains eligible for upgrade.
  IS_ELIGIBLE_FOR_UPGRADE

  # Filter by SLA Domain name.
  NAME

  # Filter by object type.
  OBJECT_TYPE

  # Filter SLA Domains for the organizations that have view access.
  ORG_ID_WITH_VIEW_ACCESS_ONLY

  # Filter SLA Domains for the organizations that have ownership.
  OWNER_ORG_ID

  # Get all Global and cluster SLA Domains.
  SHOW_ALL_RUBRIK_AND_APPLIANCE_SLAS

  # Filter SLA Domains for this Rubrik cluster.
  SHOW_CLUSTER_SLAS_ONLY

  # Filter by SLA Domain upgrade status.
  UPGRADE_STATUS
}
# Metadata for rendering an SLA Domain.
type GlobalSlaReply implements SlaDomain {
  # SLA Domain ID.
  id: String!

  # SLA Domain name.
  name: String!

  # Version for the SLA Domain.
  version: String

  # Description of the SLA Domain.
  description: String!

  # Workload count for the SLA Domain.
  protectedObjectCount: Int!

  # Color of the SLA Domain on the User Interface.
  uiColor: String!

  # Snapshot schedule for the SLA Domain.
  snapshotSchedule: SnapshotSchedule

  # Local retention limit.
  localRetentionLimit: Duration

  # Archiving specification for the SLA Domain.
  archivalSpec: ArchivalSpec

  # List of archival specifications for SLA Domain.
  archivalSpecs: [ArchivalSpec!]!

  # Replication specification for the SLA Domain.
  replicationSpec: ReplicationSpec

  # Replication specification for the SLA Domain.
  replicationSpecsV2: [ReplicationSpecV2!]!

  # Last update timestamp of the snapshot schedule of the SLA Domain.
  snapshotScheduleLastUpdatedAt: DateTime

  # Base frequency for the SLA Domain.
  baseFrequency: Duration

  # Specifies whether the SLA Domain is archived or not.
  isArchived: Boolean!

  # State version of the SLA Domain.
  stateVersion: Long!

  # First full backup windows.
  firstFullBackupWindows: [BackupWindow!]!

  # Backup windows for the SLA Domain.
  backupWindows: [BackupWindow!]!

  # Sync status of the clusters.
  clusterToSyncStatusMap: [GlobalSlaSyncStatus!]!

  # Log configuration of the SLA Domain.
  logConfig: LogConfigResult

  # The object-specific configurations of the SLA Domain.
  objectSpecificConfigs: ObjectSpecificConfigs

  # The object-types supported by the SLA Domain.
  objectTypes: [SlaObjectType!]!

  # Rubrik cluster ID of the SLA Domain.
  clusterUuid: String!

  # Specifies whether the SLA Domain is a default SLA Domain or not.
  isDefault: Boolean!

  # SLA Domain upgrade information.
  upgradeInfo: SlaUpgradeInfo

  # Information about Rubrik clusters where this SLA Domain is paused.
  pausedClustersInfo: PausedClustersInfo

  # Specifies if this SLA Domain is retention-locked or not.
  isRetentionLockedSla: Boolean!

  # Specifies the retention lock mode when enabled for the SLA Domain.
  retentionLockMode: RetentionLockMode!

  # This field is deprecated.
  allOrgsWithAccess: [Org!]! @deprecated(reason: "This field is deprecated and has been replaced by the allOrgsHavingAccess field, which must be used instead.")

  # Specifies the list of organizations that have view access for the SLA Domain.
  allOrgsHavingAccess: [SlaAssociatedOrganization!]!

  # This field is deprecated.
  ownerOrgName: String! @deprecated(reason: "This field has been deprecated in favor of ownerOrg field.")

  # Specifies the owner organization of the SLA Domain.
  ownerOrg: SlaAssociatedOrganization!

  # Upgrade information about the configured archival locations and cascading archival locations.
  archivalLocationsUpgradeInfo: [ArchivalLocationUpgradeInfo!]
}
# Global SLA status for cluster.
type GlobalSlaStatus {
  # Sync status of given cluster.
  syncStatus: SlaSyncStatus!

  # Pause status of given cluster.
  pauseStatus: PauseStatus!

  # Cluster where the global SLA is synced.
  cluster: Cluster
}
# Paginated list of GlobalSlaStatus objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GlobalSlaStatusConnection {
  # List of GlobalSlaStatus objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GlobalSlaStatusEdge!]!

  # List of GlobalSlaStatus objects.
  nodes: [GlobalSlaStatus!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GlobalSlaStatus objects matching the request arguments.
  count: Int!
}
# Wrapper around the GlobalSlaStatus object. This wrapper is used for pagination.
type GlobalSlaStatusEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GlobalSlaStatus object wrapped by this edge.
  node: GlobalSlaStatus!
}
# SLA Domain sync status for a specified Rubrik cluster.
type GlobalSlaSyncStatus {
  # Cluster UUID.
  clusterUuid: String!

  # SLA Domain sync status.
  slaSyncStatus: SlaSyncStatus!
}
# Snapshot schedule for different frequencies.
input GlobalSnapshotScheduleInput {
  # Minute schedule of the SLA Domain.
  minute: MinuteSnapshotScheduleInput

  # Hourly schedule of the SLA Domain.
  hourly: HourlySnapshotScheduleInput

  # Daily schedule of the SLA Domain.
  daily: DailySnapshotScheduleInput

  # Weekly schedule of the SLA Domain.
  weekly: WeeklySnapshotScheduleInput

  # Monthly schedule of the SLA Domain.
  monthly: MonthlySnapshotScheduleInput

  # Quarterly schedule of the SLA Domain.
  quarterly: QuarterlySnapshotScheduleInput

  # Yearly schedule of the SLA Domain.
  yearly: YearlySnapshotScheduleInput
}
# User group details.
type Group {
  # The ID of the user group.
  groupId: String!

  # The name of the user group.
  groupName: String!

  # Users from the user group who are logged-in to the account.
  users: [User!]!

  # User group roles in the context organization.
  roles: [Role!]!

  # The suborganizations in which the user group has roles.
  allOrgs: [Org!]!
}
enum GroupByFieldEnum {
  ANALYZER
  CLUSTER

  # The unique ID of the cluster.
  CLUSTER_UUID
  Cluster
  ClusterType
  ComplianceStatus

  # Group by day.
  DAY
  Day
  FILE
  FailoverStatus
  FailoverType

  # Group by hour.
  HOUR
  Hour

  # Specifies whether the result is an anomaly.
  IS_ANOMALY
  LastActivityStatus
  LastActivityType
  LastTestStatus

  # The managed ID of the object.
  MANAGED_ID

  # Group by month.
  MONTH
  Month
  OBJECT_NAME
  Object
  ObjectType
  POLICY
  POLICY_VIOLATIONS
  ProtectionStatus
  PullTimeWithOffset
  Quarter

  # Group by severity of the anomaly.
  SEVERITY
  SLA_DOMAIN
  STATUS_POLICY
  SlaDomain
  Source
  Status
  TIME
  TIME_ISSUES
  TIME_VIOLATIONS

  # Bytes transferred group by object type.
  TRANSFERRED_BYTES_OBJECT_TYPE
  TargetSite
  TaskDetailClusterType
  TaskDetailObjectType
  Type
  UserAuditStatus
  UserAuditType

  # Group by week.
  WEEK
  Week

  # Group by year.
  YEAR
  Year
}
# Group configuration.
input GroupConfig {
  name: String = ""
}
# Paginated list of Group objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GroupConnection {
  # List of Group objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GroupEdge!]!

  # List of Group objects.
  nodes: [Group!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Group objects matching the request arguments.
  count: Int!
}
# Represents count of clusters grouped by upgrade status.
type GroupCount {
  # Group name.
  group: String!

  # Group member count.
  count: Int!
}
# Represents total count of clusters in each group of upgrade type.
type GroupCountListWithTotal {
  # Total count of Rubrik clusters.
  totalCount: Int!

  # List of clusters grouped by upgrade status.
  groupList: [GroupCount!]!
}
# Wrapper around the Group object. This wrapper is used for pagination.
type GroupEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Group object wrapped by this edge.
  node: Group!
}
# Input for filtering user groups.
input GroupFilterInput {
  # Filter user groups by organization IDs.
  orgIdsFilter: [String!] = []

  # Filter user groups that have the specified roles assigned in the current
  # organization.
  roleIdsFilter: [String!] = []

  # Filter user groups by name.
  nameFilter: String = ""
}
# Fields by which we can sort user groups.
enum GroupSortByField {
  # Group Name.
  NAME
}
# Input for sort parameters.
input GroupSortByParam {
  # Field to sort by.
  field: GroupSortByField = NAME

  # Sort order.
  sortOrder: SortOrder = ASC
}
# Guest credential authorization status.
enum GuestCredentialAuthorizationStatus {
  # Authorization failed.
  FAILED

  # Authorization pending.
  PENDING

  # Authorization succeeded.
  SUCCESSFUL
}
# Supported in v5.0+
input GuestCredentialDefinitionInput {
  # Supported in v5.0+
  domain: String
  baseGuestCredential: BaseGuestCredentialInput
}
# Supported in v5.0+
type GuestCredentialDetailListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [CreateGuestCredentialReply!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Guest OS Credential.
type GuestOsCredential {
  # ID of the Guest OS credential.
  id: String!

  # Username of the Guest OS credential.
  username: String!

  # Domain name of the Guest OS credential.
  domain: String!

  # Cluster of the Guest OS credential.
  cluster: Cluster!
}
# Paginated list of GuestOsCredential objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type GuestOsCredentialConnection {
  # List of GuestOsCredential objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [GuestOsCredentialEdge!]!

  # List of GuestOsCredential objects.
  nodes: [GuestOsCredential!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of GuestOsCredential objects matching the request arguments.
  count: Int!
}
# Wrapper around the GuestOsCredential object. This wrapper is used for pagination.
type GuestOsCredentialEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual GuestOsCredential object wrapped by this edge.
  node: GuestOsCredential!
}
# Filter for Guest OS credential results.
enum GuestOsCredentialFilterField {
  # Cluster UUID filter for Guest OS credential results.
  CLUSTER_UUID

  # A filter has not been specified, and any provided filter text will not be taken into consideration.
  FIELD_UNSPECIFIED

  # Username filter for Guest OS credential results.
  USER_NAME
}
# Filter for Guest OS credential results.
input GuestOsCredentialFilterInput {
  # Type of filter.
  field: GuestOsCredentialFilterField = FIELD_UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Sort Guest OS credential results.
input GuestOsCredentialSortBy {
  # Field to sort Guest OS credentials.
  field: GuestOsCredentialSortByField = FIELD_UNSPECIFIED

  # Sort order for Guest OS credential.
  sortOrder: SortOrder = ASC
}
# Sort by the field for Guest OS credential results.
enum GuestOsCredentialSortByField {
  # Sort by the cluster name.
  CLUSTER_NAME

  # A filter has not been specified, and any provided filter text will not be taken into consideration.
  FIELD_UNSPECIFIED

  # Sort by username.
  USER_NAME
}
# The guest operating system.
enum GuestOsType {
  # Linux operating system.
  LINUX

  # Unknown guest operating system type.
  UNKNOWN

  # Windows operating system.
  WINDOWS
}
# Represents policies for checking hardware health.
enum HardwareHealthPolicyName {
  # Policy to check health of Chassis.
  CHASSIS_CHECKER

  # Policy to check health of DIMM.
  DIMM_CHECKER

  # Policy to check disk status.
  DISK_CHECKER

  # Policy to trigger on-demand hardware health check.
  HARDWARE_HEALTH_UPDATER

  # Policy to check health of primary network interface.
  NETWORK_INTERFACE_CHECKER_PRIMARY

  # Policy to check health of secondary network interface.
  NETWORK_INTERFACE_CHECKER_SECONDARY

  # Policy to check health of Node FRU.
  NODE_CHECKER

  # Policy to check health of power supply.
  P_S_U_CHECKER
}
# Configuration to check if Microsoft Entra ID has relic snapshots.
input HasRelicAzureAdSnapshotInput {
  # Domain name of the Microsoft Entra ID for which relic snapshots are being checked.
  domainName: String!
}
# Response of the operation that checks if Microsoft Entra ID has relic snapshots.
type HasRelicAzureAdSnapshotReplyType {
  # Specifies whether the Microsoft Entra ID has relic snapshots.
  hasRelicSnapshots: Boolean!
}
# Supported in v6.0+
type HashDetail {
  # Required. Supported in v6.0+
  # Hash algorithm type.
  hashType: String!

  # Required. Supported in v6.0+
  # Hash value of the content at path.
  hashValue: String!
}
# Supported in v6.0+
# Type of hash function to be computed for malware hits.
enum HashType {
  HASH_TYPE_M_D5
  HASH_TYPE_SH_A1
  HASH_TYPE_SH_A256
}
# Supported in v5.2+
type HdfsBaseConfig {
  # Supported in v5.2+
  # API token to access Hdfs.
  apiToken: String

  # Required. Supported in v5.2+
  # List of Hdfs Namenode Hosts.
  hosts: [HdfsHost!]!

  # Supported in v5.2+
  # Ticket Cache Path of Kerberos Ticket.
  kerberosTicket: String

  # Supported in v5.2+
  # Logical name for nameservice for Hdfs HA.
  nameservices: String

  # Supported in v5.2+
  # Username to access Hdfs API.
  username: String
}
# Supported in v5.2+
input HdfsBaseConfigInput {
  # Supported in v5.2+
  # API token to access Hdfs.
  apiToken: String

  # Supported in v5.2+
  # Ticket Cache Path of Kerberos Ticket.
  kerberosTicket: String

  # Supported in v5.2+
  # Logical name for nameservice for Hdfs HA.
  nameservices: String

  # Supported in v5.2+
  # Username to access Hdfs API.
  username: String

  # Required. Supported in v5.2+
  # List of Hdfs Namenode Hosts.
  hosts: [HdfsHostInput!]!
}
# Supported in v5.2+
input HdfsConfigInput {
  # HDFS base config.
  hdfsBaseConfig: HdfsBaseConfigInput
}
# Supported in v5.2+
type HdfsHost {
  # Required. Supported in v5.2+
  # Hostname or Ip of Namenode.
  hostname: String!

  # Required. Supported in v5.2+
  # Port number of Namenode.
  port: Int!
}
# Supported in v5.2+
input HdfsHostInput {
  # Required. Supported in v5.2+
  # Hostname or Ip of Namenode.
  hostname: String!

  # Required. Supported in v5.2+
  # Port number of Namenode.
  port: Int!
}
# Health-check status.
type HealthPolicyStatus {
  # Name of the policy used for the hardware component health check.
  policyName: HardwareHealthPolicyName!

  # Result of the hardware health check.
  isHealthy: Boolean!

  # Output from the hardware health-check policy.
  message: String!
}
# A snippet of help content.
type HelpContentSnippet {
  # ID of the help content.
  id: String!

  # Title of the help content.
  title: String!

  # Summary of the help content.
  description: String!

  # Datasource for help content.
  source: HelpContentSource!

  # URL pointing to the complete help content.
  link: URL
}
# Paginated list of HelpContentSnippet objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HelpContentSnippetConnection {
  # List of HelpContentSnippet objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HelpContentSnippetEdge!]!

  # List of HelpContentSnippet objects.
  nodes: [HelpContentSnippet!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HelpContentSnippet objects matching the request arguments.
  count: Int!
}
# Wrapper around the HelpContentSnippet object. This wrapper is used for pagination.
type HelpContentSnippetEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HelpContentSnippet object wrapped by this edge.
  node: HelpContentSnippet!
}
# Initiator of a search request.
enum HelpContentSnippetsFilterInitiator {
  # Search request issued for testing purposes.
  DEBUG

  # Unspecified.
  INITIATOR_UNSPECIFIED

  # Search request issued on behalf of the user.
  RECOMMENDATION

  # Search request issued by user.
  USER
}
# Filter help contents results.
input HelpContentSnippetsFilterInput {
  # Indicator for entity issuing a search request.
  initiator: HelpContentSnippetsFilterInitiator = INITIATOR_UNSPECIFIED

  # Text to search for.
  query: String = ""

  # Language code in ISO 639-1.
  language: String = ""

  # Datasource.
  source: HelpContentSource = SOURCE_UNSPECIFIED

  # List of categories to filter by.
  categories: [String!] = []

  # List of product documentation types to filter by.
  productDocumentationTypes: [ProductDocumentationType!]!
}
# Datasource of help content.
enum HelpContentSource {
  # Knowledge base articles.
  KB_ARTICLES

  # Product documentation.
  PRODUCT_DOCS

  # Unspecified.
  SOURCE_UNSPECIFIED
}
# Filter for users based on their hidden status.
enum HiddenStateFilter {
  # Select all users.
  ALL_USERS

  # Select only the users that are hidden.
  HIDDEN

  # Select only the users that are not hidden.
  NOT_HIDDEN
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Input for operation to hide or reveal one or more NAS namespaces.
input HideNasNamespacesRequestInput {
  # Required. Supported in v7.0+
  # Specifies whether the selected NAS namespaces should be hidden or revealed.
  action: HideRevealAction!

  # Required. Supported in v7.0+
  # IDs of NAS namespaces.
  ids: [String!]!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Input for operation to hide or reveal one or more NAS shares.
input HideNasSharesRequestInput {
  # Required. Supported in v7.0+
  # Specifies whether the selected NAS shares should be hidden or revealed.
  action: HideRevealAction!

  # Required. Supported in v7.0+
  # IDs of NAS shares.
  ids: [String!]!
}
# Supported in v7.0+
# v7.0: Actions to hide or reveal NAS shares and NAS namespaces.
# v8.0+: Visibility actions that can be performed on a NAS shares and NAS namespaces.
enum HideRevealAction {
  HIDE_REVEAL_ACTION_HIDE
  HIDE_REVEAL_ACTION_REVEAL
}
# Input for operation to hide or reveal NAS namespaces.
input HideRevealNasNamespacesInput {
  # Required. IDs of the selected NAS namespaces and the action to perform on them.
  hideNasNamespacesRequest: HideNasNamespacesRequestInput!
}
# Input for operation to hide or reveal NAS shares.
input HideRevealNasSharesInput {
  # Required. IDs of the selected NAS shares and the action to perform on them.
  hideNasSharesRequest: HideNasSharesRequestInput!
}
enum HierarchyFilterField {
  # Filter by name of an Active Directory domain.
  ACTIVE_DIRECTORY_DOMAIN_NAME

  # Filter AWS EC2 instances based on RBS connection status.
  AWS_INSTANCE_CC_OR_CNP_RBS_CONNECTION_STATUS

  # Filter AWS native accounts based on the features enabled for them.
  AWS_NATIVE_ACCOUNT_ENABLED_FEATURE

  # Filter by AWS account ID.
  AWS_NATIVE_ACCOUNT_ID

  # Filter by the AWS Cloud Type.
  AWS_NATIVE_CLOUD_TYPE

  # ID of the AWS native EC2 instance (Rubrik ID), applicable for filtering
  # EBS volumes with their EC2 instance IDs. Applicable only if the object
  # type is AwsNativeEbsVolume.
  AWS_NATIVE_EC2_INSTANCE_ID

  # Filter by RDS Instace DB Engine.
  AWS_NATIVE_RDS_DB_ENGINE

  # Filter by RDS Instance DB Instance Class.
  AWS_NATIVE_RDS_DB_INSTANCE_CLASS

  # Filter by AWSAccount.aws_region_spec.region, EC2Instance.region, and
  # EBSVolume.region.
  AWS_REGION

  # Filter by aws_native_tags.
  AWS_TAG

  # Filter by VPC ID.
  AWS_VPC_ID

  # Filter Azure disks by ID of the attached virtual machine.
  AZURE_DISK_ATTACHED_VM

  # Filter Azure disks by common resource group name.
  AZURE_DISK_CRG_NAME

  # Filter Azure disks on subscription ID of common resource group.
  AZURE_DISK_CRG_SUBSCRIPTION_ID

  # Filter Azure disks on Disk size.
  AZURE_DISK_SIZE

  # Filter Azure disks by subscription ID.
  # todo (SPARK-88655): remove usage of VMRG and DiskRG
  AZURE_DISK_SUBSCRIPTION_ID

  # Filter Azure disks on Disk type.
  AZURE_DISK_TYPE

  # Filters Azure disks whose regions have a \"CONNECTED\" exocompute.
  AZURE_NATIVE_DISK_EXOCOMPUTE_CONNECTED

  # Filter by the \"indexing status\" of Azure disks.
  AZURE_NATIVE_DISK_INDEXING_STATUS

  # Filter Azure native subscriptions based on the features enabled for them.
  AZURE_NATIVE_SUBSCRIPTION_ENABLED_FEATURE

  # Filters Azure virtual machines whose regions have a \"CONNECTED\" exocompute.
  AZURE_NATIVE_VM_EXOCOMPUTE_CONNECTED

  # Filter by the \"indexing status\" of Azure VMs.
  AZURE_NATIVE_VM_INDEXING_STATUS

  # Filter by AzureSubscription.region_spec.region, AzureResourceGroup.region,
  # AzureVm.Region and AzureDisk.region.
  AZURE_REGION

  # Filter Azure resource groups by disk SLA or virtual machine SLA.
  AZURE_RG_DISK_OR_VM_SLA

  # Filter Azure resource groups by subscription ID.
  AZURE_RG_SUBSCRIPTION_ID

  # Filter Azure Resource Groups by SLAs of given workload types.
  # SLAs need to be passed as "texts" and workload types need to be
  # passed as "object_type_filter_params".
  # Note: When using this filter for more than two types of workloads,
  # test the performance for large data sizes because internally the operation performs
  # some heavy joins to filter the results.
  AZURE_RG_WORKLOAD_TYPES_SLA_DOMAIN

  # Filter Azure SQL Databases on resource group name.
  AZURE_SQL_DB_RG_NAME

  # Filter Azure SQL Database Servers on resource group name.
  AZURE_SQL_DB_SERVER_RG_NAME

  # Filter Azure SQL Database Servers on subscription ID.
  AZURE_SQL_DB_SERVER_SUBSCRIPTION_ID

  # Filter Azure SQL Databases on subscription ID.
  AZURE_SQL_DB_SUBSCRIPTION_ID

  # Filter Azure SQL Managed Instance Databases on resource group name.
  AZURE_SQL_MI_DB_RG_NAME

  # Filter Azure SQL Managed Instances Databases on subscription ID.
  AZURE_SQL_MI_DB_SUBSCRIPTION_ID

  # Filter Azure SQL Managed Instance Database Servers on resource group name.
  AZURE_SQL_MI_SERVER_RG_NAME

  # Filter Azure SQL Managed Instances Database Servers on subscription ID.
  AZURE_SQL_MI_SERVER_SUBSCRIPTION_ID

  # Filter by azure_native_tags.
  AZURE_TAG

  # Filter Azure Virtual Machines based on RBS connection status.
  AZURE_VM_CC_OR_CNP_RBS_CONNECTION_STATUS

  # Filter Azure virtual machines on common resource group name.
  AZURE_VM_CRG_NAME

  # Filter Azure virtual machines on subscription ID of common resource group.
  AZURE_VM_CRG_SUBSCRIPTION_ID

  # Filter Azure virtual machines on virtual machine size.
  AZURE_VM_SIZE

  # Filter Azure virtual machines on subscription ID.
  # todo (SPARK-88655): remove usage of VMRG and DiskRG
  AZURE_VM_SUBSCRIPTION_ID

  # Filter Azure virtual machines on VNet name.
  AZURE_VNET_NAME

  # Filter by ID of parent Cassandra Keyspace.
  CASSANDRA_KEYSPACE_ID

  # Filter by ID of parent Cassandra Source.
  CASSANDRA_SOURCE_ID

  # Filter by status of CassandraSource.
  CASSANDRA_SOURCE_STATUS

  # Filter by IO filter installation status of CDP Virtual Machine.
  CDP_IO_FILTER_STATUS

  # Filter by CDP state of CDP Virtual Machine.
  CDP_LOCAL_STATUS

  # Filter by CDP replication state of CDP Virtual Machine.
  CDP_REPLICATION_STATUS

  # Filter by CDP Virtual Machines.
  CDP_VMS

  # Filter by effective SLA Domain name of CDP Virtual Machine.
  CDP_VM_EFFECTIVE_SLA_ID

  # Filter by name of CDP Virtual Machine.
  CDP_VM_NAME

  # Filter by source cluster of the CDP Virtual Machine.
  CDP_VM_SOURCE_CLUSTER_ID

  # Filter cloud instances based on whether CDM App Protection
  # is setup through a cloud cluster.
  CLOUD_INSTANCE_CDM_APP_PROTECTION_SETUP

  # Filter cloud instance physical host by descendant object type.
  CLOUD_INSTANCE_HOST_DESCENDANT_OBJECT_TYPE

  # Filter cloud native databases using server name.
  CLOUD_NATIVE_SERVER_NAME_FILTER

  # Filter Rubrik CDM objects by cluster ID.
  CLUSTER_ID

  # Filter clusters by the ClusterTypeEnum.
  CLUSTER_TYPE

  # Filter the Db2 databases by database type.
  DB2_DB_TYPE

  # Filter based on fid of DB2 instance.
  DB2_INSTANCE_ID

  # Filter by status of Db2Instance.
  DB2_INSTANCE_STATUS

  # Filter to select a singular object from a group of duplicated nutanix objects.
  DEDUPE_NUTANIX_PRISM_CENTRAL_OBJECTS

  # Filter by relic filesets of a NAS Share.
  DOES_NAS_SHARE_HAVE_RELIC_FILESETS

  # Filter NAS volumes based on whether they are associated
  # with a SnapMirror Cloud object.
  DOES_NAS_VOLUME_HAVE_SMC

  # Filter physical hosts that have protected filesets.
  DOES_PHYSICAL_HOST_HAVE_PROTECTED_FILESETS

  # Filter physical hosts that have protected volume group.
  DOES_PHYSICAL_HOST_HAVE_PROTECTED_VOLUME_GROUP

  # Filter by relic filesets of a physical host.
  DOES_PHYSICAL_HOST_HAVE_RELIC_FILESETS

  # Filter by relic volume group of a physical host.
  DOES_PHYSICAL_HOST_HAVE_RELIC_VOLUME_GROUP

  # Filter whether the sharepoint is relic or contains relic object.
  DOES_SHAREPOINT_HAVE_RELIC_OBJECTS

  # Filter by the Active Directory domain controller connection status.
  DOMAIN_CONTROLLER_CONNECTION_STATUS

  # Filter by FSMO role of a domain controller.
  DOMAIN_CONTROLLER_FSMO_ROLE

  # Filter by EBSVolume native ID.
  EBS_VOLUME_ID

  # Filter EBS Volumes by status of indexing.
  EBS_VOLUME_INDEXING_STATUS

  # Filter by EBSVolume.name.
  EBS_VOLUME_NAME

  # Filter by EBS volume name or volume ID.
  EBS_VOLUME_NAME_OR_VOLUME_ID

  # Filter by EbsVolume.type.
  EBS_VOLUME_TYPE

  # Filter by EC2Instance native ID.
  EC2_INSTANCE_ID

  # Filter EC2 Instances by status of indexing. Possible values for
  # filter are generated strings from AwsIndexingStatusFilter enum.
  EC2_INSTANCE_INDEXING_STATUS

  # Filter by EC2Instance.name.
  EC2_INSTANCE_NAME

  # Filter by EC2 instance name or instance ID.
  EC2_INSTANCE_NAME_OR_INSTANCE_ID

  # Filter by Ec2Instance.type.
  EC2_INSTANCE_TYPE

  # Filter managed objects by the SLA Domain ID. Objects returned are
  # either retained or protected by the SLA Domain.
  EFFECTIVE_RETENTION_SLA

  # Filter by effective SLA Domain.
  EFFECTIVE_SLA

  # Filter to include or exclude objects with a specific effective SLA
  # source object.
  EFFECTIVE_SLA_SOURCE_OBJECT

  # Filter by the SLA type of the effective SLA.
  EFFECTIVE_SLA_TYPE

  # The behavior of this filter is similar to the EFFECTIVE_SLA filter,
  # except, the behavior when it returns objects that have a
  # retention SLA Domain assigned along with the DoNotProtect SLA Domain.
  EFFECTIVE_SLA_WITH_RETENTION_SLA

  # Filter Exchange Databases by the ID of the Exchange Dag.
  EXCHANGE_DATABASE_BY_DAG_ID

  # Filter Exchange Databases by the ID of the Exchange Host.
  EXCHANGE_DATABASE_BY_HOST_ID

  # Filter Exchange Databases by the ID of the Exchange Server.
  EXCHANGE_DATABASE_BY_SERVER_ID

  # Filter Exchange Server by the ID of the Exchange Dag.
  EXCHANGE_SERVER_BY_DAG_ID

  # Filter to exclude root resource pool.
  EXCLUDED_ROOT_RESOURCE_POOL_TYPE

  # Filter SharePoint Libraries by excluding list template types.
  EXCLUDED_SHAREPOINT_LIBRARY_TYPE

  # Filter by SLA domain of the Microsoft SQL (MSSQL) Failover Clusters.
  FAILOVER_CLUSTERS_BY_MSSQL_EFFECTIVE_SLA

  # Filter by failover cluster app connection status.
  FAILOVER_CLUSTER_APP_CONNECTION_STATUS

  # Filter by the ID of Failover cluster app.
  FAILOVER_CLUSTER_APP_ID

  # Filter by failover cluster connection status.
  FAILOVER_CLUSTER_CONNECTION_STATUS

  # Filter by ID of parent of Failover Cluster.
  FAILOVER_CLUSTER_ID

  # Filter according to the migration status of the filesets.
  FILESET_MIGRATION_STATUS

  # Filter physical hosts by SLAs attached to their filesets.
  FILESET_SLA

  # Filter physical hosts by which fileset templates are attached
  # to them.
  FILESET_TEMPLATE_ID

  # Filter fileset templates by OS Type.
  FILESET_TEMPLATE_OS_TYPE

  # Filter by gcp_native_labels.
  GCP_LABEL

  # Filter by GCP Disk location (for regional disk: location=region, for zonal disk: location=zone).
  GCP_NATIVE_DISK_LOCATION

  # Filter by GCP Disk name or native ID.
  GCP_NATIVE_DISK_NAME_OR_NATIVE_ID

  # Filter by GCP Disk project name.
  GCP_NATIVE_DISK_PROJECT

  # Filter by GCP Disk type.
  # Text of the GCP_DISK_TYPE can have one of the following values:
  # regional-pd-ssd regional-pd-standard regional-pd-balanced
  # zonal-pd-ssd zonal-pd-standard zonal-pd-balanced.
  GCP_NATIVE_DISK_TYPE

  # Filter by GCP instance native ID or name.
  GCP_NATIVE_INSTANCE_NAME_OR_NATIVE_ID

  # Filter by GCP Instance Network Name.
  GCP_NATIVE_INSTANCE_NETWORK_NAME

  # Filter by GCP instance type.
  GCP_NATIVE_INSTANCE_TYPE

  # Filter by GCP project ID for GCE instances.
  GCP_NATIVE_PROJECT_ID

  # Filter by GCP project name or project number.
  GCP_NATIVE_PROJECT_NAME_OR_PROJECT_NUMBER

  # Filter GCP projects by their native ID.
  GCP_NATIVE_PROJECT_NATIVE_ID

  # Filter by GCP region.
  GCP_NATIVE_REGION

  # Filter VSphere and Hyper-V virtual machines by guest OS type for file export.
  GUEST_OS_TYPE_FOR_FILE_RESTORE

  # Filter objects if they have snapshots that are expired and indexed.
  HAS_EXPIRED_INDEXED_SNAPSHOTS

  # Filter if a workload has parent workload.
  HAS_PARENT_SNAPPABLE

  # Filter objects with unexpired snapshots.
  HAS_UNEXPIRED_SNAPSHOTS

  # Filter hosts based on CBT status.
  HOST_CBT_STATUS

  # Filter hosts based on the domain controller FID.
  HOST_DOMAIN_CONTROLLER_FID

  # Filter according to the migration status of the physical hosts.
  HOST_MIGRATION_STATUS

  # Filter the hosts by their Operating System.
  HOST_OPERATING_SYSTEM

  # Filter according to the migration status of the host shares.
  HOST_SHARE_MIGRATION_STATUS

  # Filter by the vendor type of the NAS Host.
  HOST_VENDOR_TYPE

  # Filter Hyper-V virtual machines by the agent's connection status.
  HYPERV_VM_BY_AGENT_STATUS

  # Return only the workloads that are active.
  # An active workload is a workload that is without a workload group or
  # workload with the highest primary sequence number in the workload group.
  IS_ACTIVE

  # Filters active object from a group of duplicated objects.
  IS_ACTIVE_AMONG_DUPLICATED_OBJECTS

  # Filters archived workloads.
  IS_ARCHIVED

  # Filter workloads deleted from the Rubrik cluster.
  IS_DELETED_IN_CDM

  # Filter archived and non-relic managed-objects.
  IS_GHOST

  # Filter physical hosts that have protected filesets.
  IS_HOST_PROTECTED

  # Filter the kooper hosts from the host list.
  IS_KUPR_HOST

  # Filter MSSQL databases that are log shipping secondaries.
  IS_LOG_SHIPPING_SECONDARY

  # Filter Live Mounts from Managed Volume Exports.
  IS_MAIN_MOUNT

  # Filter child objects by Managed Volume archival status.
  IS_MANAGED_VOLUME_ARCHIVED

  # Filter MSSQL databases that are Live Mounts.
  IS_MOUNT

  # Filter by the protection status of a NAS share.
  IS_NAS_SHARE_PROTECTED

  # Workload must not be a member of any active Blueprint.
  IS_NOT_BLUEPRINT_CHILD

  # Filter by whether object is protected by an SLA Domain.
  IS_PROTECTED

  # Filter by recovery plan visibility.
  IS_RECOVERY_PLAN_VISIBLE

  # Filters workloads that are relics.
  IS_RELIC

  # Filters replicated workloads.
  IS_REPLICATED

  # Filter unmanaged objects.
  IS_UNMANAGED_OBJECT

  # Filter by the Jira project key or name.
  JIRA_PROJECT_KEY_OR_NAME

  # Filter by the Jira project lead.
  JIRA_PROJECT_LEAD

  # Filter by the Jira project type.
  JIRA_PROJECT_TYPE

  # Filter based on Kubernetes cluster name.
  K8S_CLUSTER_NAME

  # Filter by the status of the K8s cluster.
  K8S_CLUSTER_STATUS

  # Filter Kubernetes clusters based on associated Rubrik cluster.
  # Since the Kubernetes cluster is natively managed by Rubrik SaaS, a separate filter is used.
  KUPR_CDM_CLUSTER_ID

  # Filter Kubernetes clusters based on connection status.
  KUPR_CLUSTER_STATUS

  # Filter Kubernetes namespaces based on the associated Rubrik cluster of the parent Kubernetes cluster.
  # Since Kubernetes namespace is natively managed by Rubrik SaaS, a separate filter is used.
  KUPR_NAMESPACE_CDM_CLUSTER_ID

  # Filter Kubernetes namespace based on the connection status of the parent.
  KUPR_NAMESPACE_CLUSTER_STATUS

  # Filter by location or path of an object.
  LOCATION

  # Filter by preferred data location. Applicable for M365 workloads.
  M365_PREFERRED_DATA_LOCATION

  # Filter by Managed Volume Export ID.
  MANAGED_VOLUME_EXPORT_ID

  # Filter according to the Managed Volume export mount type.
  MANAGED_VOLUME_EXPORT_MOUNT_TYPE

  # Filter the Managed Volume based on the RBS status of its host.
  MANAGED_VOLUME_HOST_CONNECTION_STATUS

  # Filter the Managed Volume based on its host ID.
  MANAGED_VOLUME_HOST_ID

  # Filter Managed Volume Exports for a given Managed Volume ID.
  MANAGED_VOLUME_ID

  # Filter Managed Volume Type.
  MANAGED_VOLUME_TYPE

  # Filter to show all migrated hosts, including ghost objects.
  MIGRATED_HOSTS_WITH_GHOST_OBJECTS

  # Filter to show all migrated host shares, including ghost objects.
  MIGRATED_HOST_SHARES_WITH_GHOST_OBJECTS

  # Filter by ID of parent MongoDB Keyspace.
  MONGODB_DATABASE_ID

  # Filter by ID of parent MongoDB Source.
  MONGODB_SOURCE_ID

  # Filter by status of MongoDB Source.
  MONGODB_SOURCE_STATUS

  # Filter protected MongoDB collections.
  MONGO_COLLECTION_PROTECTED

  # Filter by ID of parent Mongo Database.
  MONGO_DATABASE_ID

  # Filter by ID of parent Mongo Source.
  MONGO_SOURCE_ID

  # Filter Microsoft SQL Server failover clusters that are protected by an SLA Domain.
  MSSQL_IS_FAILOVER_CLUSTER_PROTECTED

  # Filter Microsoft SQL Server hosts that are protected by an SLA Domain.
  MSSQL_IS_HOST_PROTECTED

  # Filter by name. For an exact match, use NAME_EXACT_MATCH.
  NAME

  # There is already a filter called NAME which filters for all the rows
  # where name is "LIKE" the provided string. We have a use-case in
  # Azure where we would like to Filter by name but exact-match, not just
  # similar match. The use case is that resource groups are identified by
  # the tuple of subscription ID and resource group name, similarity
  # measure will not distinguish between two similar names.
  NAME_EXACT_MATCH

  # Filter by name or email-address of O365 user.
  NAME_OR_EMAIL_ADDRESS

  # Filter by the ID of the NAS namespace.
  NAS_NAMESPACE_ID

  # Filter by hidden shares.
  NAS_SHARE_HIDDEN

  # Filter by the Namespace ID of the NAS Share.
  NAS_SHARE_NAMESPACE_ID

  # Filter by the effective SLA Domain ID of the NAS Share.
  NAS_SHARE_SLA

  # Filter by stale shares.
  NAS_SHARE_STALE

  # Filter by the type of the NAS Share.
  NAS_SHARE_TYPE

  # Filter by NAS System.
  NAS_SYSTEM_FOR_NAS_MIGRATION

  # Filter by the vendor type of the NAS System.
  NAS_VENDOR_TYPE

  # Filter by the SLA Domain of the SnapMirror Cloud objects under
  # the NAS volume.
  NAS_VOLUME_EFFECTIVE_SLA

  # Filter Nutanix clusters by the Nutanix Prism Central ID.
  NUTANIX_PRISM_CENTRAL_ID

  # Filter out the standalone Nutanix cluster objects that are not
  # associated with any Prism Central object.
  NUTANIX_SHOW_ONLY_STANDALONE_CLUSTERS

  # Filter Nutanix virtual machines by the agent's connection status.
  NUTANIX_VM_BY_AGENT_STATUS

  # Filter Nutanix virtual machines by the Nutanix cluster CDMID.
  NUTANIX_VM_BY_NUTANIX_CLUSTER_CDMID

  # Filter by group type. Applicable to Microsoft 365 group workloads.
  O365_GROUP_TYPE

  # Filter objects by Microsoft Office 365 organization ID.
  O365_ORGANIZATION_ID

  # O365 specific type: O365_SHARED_USER, O365_SHARED_MAILBOX...This filter is
  # introduced to support api-server since it is not convenient to add object-specific
  # subtype knowledge there. To query for shared users, we can either:
  # 1. Specify O365_USER in object type AND this filter with value O365_SHARED_USER
  # (api-server way)
  # 2. Specify O365_SHARED_USER in object type, ignore this filter
  # (others should do this).
  O365_SPECIFIC_TYPE

  # Filter by software version of the cluster.
  ON_OR_ABOVE_CLUSTER_VERSION

  # Filter by organization ID.
  ORGANIZATION_ID

  # Filter physical hosts by OS name.
  OS_NAME

  # Filter physical hosts by OS type.
  OS_TYPE

  # Filter physical host by cloud instance id.
  PHYSICAL_HOST_BY_CLOUD_INSTANCE_ID

  # Filter by SLA domain of the Microsoft SQL (MSSQL) hosts.
  PHYSICAL_HOST_BY_MSSQL_EFFECTIVE_SLA

  # Filter by the SLA Domain of the volume group of the physical host.
  PHYSICAL_HOST_BY_VOLUME_GROUP_EFFECTIVE_SLA

  # Filter by the RBS status of the physical host.
  PHYSICAL_HOST_CONNECTION_STATUS

  # Filter by the SLA Domain of the host filesets.
  PHYSICAL_HOST_EFFECTIVE_SLA

  # tag_filter_params field.
  # Filter by the ID of a Physical Host.
  PHYSICAL_HOST_ID

  # Filter by recovery plan name.
  RECOVERY_PLAN_NAME

  # Filter by recovery plan type.
  RECOVERY_PLAN_TYPE

  # Filter by recovery status.
  RECOVERY_STATUS

  # Filter by the name by a given regex expression.
  REGEX

  # Filter by objects with at least one snapshot.
  RUBRIK_NATIVE_HAS_AT_LEAST_ONE_SNAPSHOT

  # Filter by whether Rubrik SaaS native workload object
  # has an unindexed snapshot or it has a snapshot that is expired
  # and has an unmerged index.
  RUBRIK_NATIVE_HAS_UNINDEXED_OR_EXPIRED_SNAPSHOT

  # Filter according to the natural ID field of the SaaS app resource.
  SAASAPPS_NATURAL_ID

  # Filter by the Rubrik CDM ID of the SAP HANA database.
  SAP_HANA_DATABASE_CDM_ID

  # Filter by the ID of parent SAP HANA system.
  SAP_HANA_SYSTEM_ID

  # Filter by SID of SapHanaSystem.
  SAP_HANA_SYSTEM_SID

  # Filter by status of SapHanaSystem.
  SAP_HANA_SYSTEM_STATUS

  # Filter objects that are top level sites of all the O365 Orgs.
  # Note that an org ID is not passed as a filter here so the top level
  # sites under all the O365 orgs are returned.
  TOP_LEVEL_SITES_OF_O365_ORG

  # Filter based on type of database in UDF schema.
  UDF_DATABASE_TYPE

  # Filter vCD vApps by type.
  VCD_VAPP_TYPE

  # Filter template type of VMware virtual machines.
  VMWARE_VM_TEMPLATE_TYPE

  # Filter isLocal of virtualhost.descendant.
  VSPHERE_DATASTORE_IS_LOCAL

  # Filter for the the root level of compute resources for the restore
  # hierarchy, which includes compute clusters and standalone hosts.
  VSPHERE_GET_ROOT_RESTORE_HIERARCHY
}
# A generic hierarchy object.
interface HierarchyObject {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Common object definition.
type HierarchyObjectCommon {
  # The object ID.
  fid: UUID!

  # The object name.
  name: String!

  # The object type.
  objectType: HierarchyObjectTypeEnum!
}
# Paginated list of HierarchyObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HierarchyObjectConnection {
  # List of HierarchyObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HierarchyObjectEdge!]!

  # List of HierarchyObject objects.
  nodes: [HierarchyObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HierarchyObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the HierarchyObject object. This wrapper is used for pagination.
type HierarchyObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HierarchyObject object wrapped by this edge.
  node: HierarchyObject!
}
# Type of hierarchy object.
enum HierarchyObjectTypeEnum {
  # Active Directory domain.
  ACTIVE_DIRECTORY_DOMAIN

  # Active Directory domain controller.
  ACTIVE_DIRECTORY_DOMAIN_CONTROLLER

  # Atlassian site.
  ATLASSIAN_SITE

  # AWS native S3 bucket.
  AWS_NATIVE_S3_BUCKET

  # Azure AD Directory.
  AZURE_AD_DIRECTORY
  AZURE_SQL_DATABASE_DB
  AZURE_SQL_MANAGED_INSTANCE_DB

  # Azure Storage Account.
  AZURE_STORAGE_ACCOUNT
  AllSubHierarchyType
  AppBlueprint
  AwsNativeAccount
  AwsNativeEbsVolume
  AwsNativeEc2Instance
  AwsNativeRdsInstance
  AzureNativeManagedDisk
  AzureNativeResourceGroup
  AzureNativeSubscription
  AzureNativeVm
  AzureSqlDatabaseServer
  AzureSqlManagedInstanceServer
  Blueprint

  # Cassandra Column Family.
  CASSANDRA_COLUMN_FAMILY

  # Cassandra Keyspace.
  CASSANDRA_KEYSPACE

  # Cassandra Source.
  CASSANDRA_SOURCE

  # Cloud Direct NAS export.
  CLOUD_DIRECT_NAS_EXPORT
  CloudNativeTagRule
  Db2Database
  Db2Instance

  # Exchange DAG.
  EXCHANGE_DAG

  # Exchange Server.
  EXCHANGE_SERVER
  Ec2Instance

  # Exchange Database.
  ExchangeDatabase

  # Failover Cluster App.
  FAILOVER_CLUSTER_APP
  FeldsparSite
  Fileset
  FilesetTemplate
  GcpNativeDisk
  GcpNativeGCEInstance
  GcpNativeProject

  # Host Failover Cluster.
  HOST_FAILOVER_CLUSTER
  Hdfs
  HostShare
  HypervCluster
  HypervSCVMM
  HypervServer
  HypervVirtualMachine

  # Jira fixed object.
  JIRA_FIXED_OBJECT

  # Jira project.
  JIRA_PROJECT

  # Kubernetes cluster.
  K8S_CLUSTER

  # Kubernetes Protection Set.
  K8S_PROTECTION_SET
  KuprCluster
  KuprNamespace
  LinuxFileset

  # Managed Volume Export.
  MANAGED_VOLUME_EXPORT

  # MongoDB Collection.
  MONGODB_COLLECTION

  # MongoDB Database.
  MONGODB_DATABASE

  # MongoDB Source Cluster.
  MONGODB_SOURCE

  # MongoDB Collection.
  MONGO_COLLECTION

  # MongoDB Database.
  MONGO_COLLECTION_SET

  # MongoDB Database.
  MONGO_DATABASE

  # MongoDB database.
  MONGO_DB

  # MongoDB Source.
  MONGO_SOURCE

  # Managed Volume.
  ManagedVolume
  Mssql
  MssqlAvailabilityGroup
  MssqlDatabaseBatchMaintenance
  MssqlInstance

  # NAS Fileset.
  NAS_FILESET

  # Nutanix Category.
  NUTANIX_CATEGORY

  # Nutanix Category Value.
  NUTANIX_CATEGORY_VALUE

  # Nutanix Prism Central.
  NUTANIX_PRISM_CENTRAL
  NasNamespace
  NasShare
  NasSystem
  NasVolume
  NutanixCluster
  NutanixVirtualMachine
  O365Calendar
  O365File
  O365Group
  O365Mailbox
  O365Onedrive
  O365Org
  O365SharePointDrive
  O365SharePointList
  O365Site
  O365Teams
  O365User
  ORACLE_DATA_GUARD_GROUP

  # Orchestrated Application Recovery Blueprint.
  ORCHESTRATED_APPLICATION_RECOVERY_BLUEPRINT

  # Orchestrated Application Recovery Plan.
  ORCHESTRATED_APPLICATION_RECOVERY_PLAN
  OracleDatabase
  OracleHost
  OracleRac
  PhysicalHost
  RubrikEbsVolume
  RubrikEc2Instance
  SapHanaDatabase
  SapHanaSystem
  ShareFileset
  SnapMirrorCloud
  StorageArrayVolumeGroup

  # VSphere Content Library.
  VSPHERE_CONTENT_LIBRARY

  # VSphere datacenter folder.
  VSPHERE_DATACENTER_FOLDER

  # VSphere Datastore cluster.
  VSPHERE_DATASTORE_CLUSTER

  # VSphere Virtual Disk.
  VSPHERE_VIRTUAL_DISK
  VSphereComputeCluster
  VSphereDatacenter
  VSphereDatastore
  VSphereFolder
  VSphereHost
  VSphereNetwork
  VSphereResourcePool
  VSphereTag
  VSphereTagCategory
  VSphereVCenter
  Vcd
  VcdCatalog
  VcdOrg
  VcdOrgVdc
  VcdVapp
  VcdVimServer
  VmwareVirtualMachine
  VolumeGroup
  WindowsCluster
  WindowsFileset
  WindowsVolumeGroup
}
# A generic hierarchy protected objects.
interface HierarchySnappable {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HierarchySnappable objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HierarchySnappableConnection {
  # List of HierarchySnappable objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HierarchySnappableEdge!]!

  # List of HierarchySnappable objects.
  nodes: [HierarchySnappable!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HierarchySnappable objects matching the request arguments.
  count: Int!
}
# Wrapper around the HierarchySnappable object. This wrapper is used for pagination.
type HierarchySnappableEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HierarchySnappable object wrapped by this edge.
  node: HierarchySnappable!
}
type HierarchySnappableFileVersion {
  lastModified: DateTime!
  size: Long!
  fileMode: FileModeEnum!
  snapshotId: String!
  source: FileVersionSourceEnum!

  # Quarantine information corresponding to the path.
  quarantineInfo: QuarantineInfo
  snapshot: CdmSnapshot
}
enum HierarchySortByField {
  # Sort based on Active Directory domain name.
  ACTIVE_DIRECTORY_DOMAIN_NAME
  ASSIGNED_SLA_DOMAIN

  # Sort by AWS native account name.
  AWS_NATIVE_ACCOUNT_NAME

  # Sort RDS Instance DB Instance Class.
  AWS_NATIVE_RDS_DB_ENGINE

  # Sort RDS Instance DB Engine.
  AWS_NATIVE_RDS_DB_INSTANCE_CLASS

  # Sort by AWS region.
  AWS_REGION

  # Sort by AWS VPC ID.
  AWS_VPC_ID
  AZURE_DISK_ATTACHED_VM

  # Sort Azure disks by common resource group name.
  AZURE_DISK_CRG_NAME

  # Sort Azure disks by subscription name from common resource group.
  AZURE_DISK_CRG_SUBSCRIPTION_NAME

  # Sort Azure disks by Disk size.
  AZURE_DISK_SIZE

  # Sort Azure disks by Disk type.
  AZURE_DISK_TYPE

  # Sort by Azure region.
  AZURE_REGION

  # Sort Azure resource groups by disk count.
  AZURE_RG_DISKCOUNT

  # Sort Azure resource groups by effective SLA Domain.
  AZURE_RG_DISK_EFFECTIVE_SLA

  # Sort Azure resource groups by effective SLA for SQL Database DB.
  AZURE_RG_SQL_DATABASE_DB_EFFECTIVE_SLA

  # Sort Azure resource groups by effective SLA for SQL Managed Instance DB.
  AZURE_RG_SQL_MANAGED_INSTANCE_DB_EFFECTIVE_SLA

  # Sort Azure resource groups by subscription name.
  AZURE_RG_SUBSCRIPTION_NAME

  # Sort Azure resource groups by virtual machine count.
  AZURE_RG_VMCOUNT

  # Sort Azure resource groups by effective SLA Domain for virtual machine.
  AZURE_RG_VM_EFFECTIVE_SLA

  # Sort by region for Azure SQL Database.
  AZURE_SQL_DATABASE_DB_REGION

  # Sort by region for Azure SQL Database Server.
  AZURE_SQL_DATABASE_SERVER_REGION

  # Sort by resource group for Azure SQL Database or Azure SQL Managed Instance Database.
  AZURE_SQL_DB_RESOURCE_GROUP

  # Sort by region for Azure Managed Instance Database.
  AZURE_SQL_MANAGED_INSTANCE_DB_REGION

  # Sort by region for Azure Managed Instance Server.
  AZURE_SQL_MANAGED_INSTANCE_SERVER_REGION

  # Sort by resource group for Azure SQL Database Server or Azure SQL Managed Instance Server.
  AZURE_SQL_SERVER_RESOURCE_GROUP

  # Sort Azure virtual machines by Subnet name.
  AZURE_SUBNET_NAME

  # Sort Azure subscription by disk count.
  AZURE_SUBSCRIPTION_DISKCOUNT

  # Sort Azure Subscription by virtual machine count.
  AZURE_SUBSCRIPTION_VMCOUNT

  # Sort by Azure Tenant ID.
  AZURE_TENANT_ID

  # Sort Azure virtual machines by common resource group name.
  AZURE_VM_CRG_NAME

  # Sort Azure virtual machines by subscription_name from common resource group.
  AZURE_VM_CRG_SUBSCRIPTION_NAME

  # Sort Azure virtual machines by virtual machine size.
  AZURE_VM_SIZE

  # Sort Azure virtual machines by VNet name.
  AZURE_VNET_NAME

  # Sort based on Rubrik cluster name.
  CDM_CLUSTER_NAME

  # Sort based on the IO filter status of the CDP virtual machines.
  CDP_IO_FILTER_STATUS

  # Sort based on the latest snapshot time of the CDP virtual machine.
  CDP_LATEST_SNAPSHOT_TIME

  # Sort based on the local CDP status of the CDP virtual machine.
  CDP_LOCAL_STATUS

  # Sort based on the replication cluster name of the CDP virtual machine.
  CDP_REPLICATION_CLUSTER_NAME

  # Sort based on the replication CDP status of the CDP virtual machine.
  CDP_REPLICATION_STATUS

  # Sort based on the source cluster name of the CDP virtual machine.
  CDP_VM_CLUSTER_NAME

  # Sort based on the effective SLA Domain name of the CDP virtual machine.
  CDP_VM_EFFECTIVE_SLA_NAME

  # Sort based on the name of the CDP virtual machine.
  CDP_VM_NAME

  # Sort based on the vCenter of the CDP virtual machine.
  CDP_VM_VCENTER_LOCATION

  # Sort DB2 Instance based on instance ID.
  DB2_INSTANCE_ID

  # Sort by EBS volume count.
  EBS_VOLUME_COUNT

  # Sort by EBS volume native ID.
  EBS_VOLUME_ID

  # Sort by EBS volume name.
  EBS_VOLUME_NAME

  # Sort by EBS volume size.
  EBS_VOLUME_SIZE

  # Sort by for EBS volume type.
  EBS_VOLUME_TYPE

  # Sort by EC2 instance count.
  EC2_INSTANCE_COUNT

  # Sort by EC2 instance native ID.
  EC2_INSTANCE_ID

  # Sort by EC2 instance name.
  EC2_INSTANCE_NAME

  # Sort by EC2 instance type.
  EC2_INSTANCE_TYPE
  EFFECTIVE_SLA_DOMAIN

  # Sort by O365 user email address.
  EMAIL_ADDRESS

  # Sort based on failover cluster app connection status.
  FAILOVER_CLUSTER_APP_CONNECTION_STATUS

  # Sort based on failover cluster connection status.
  FAILOVER_CLUSTER_CONNECTION_STATUS

  # Sort fileset templates based on the not excluded files.
  FILESET_TEMPLATE_DOES_NOT_EXCLUDE

  # Sort fileset templates based on the excluded files.
  FILESET_TEMPLATE_EXCLUDES

  # Sort fileset templates by included files.
  FILESET_TEMPLATE_INCLUDES

  # Sort GCP disk by location (for regional disk: location=region, for zonal disk: location=zone).
  GCP_DISK_LOCATION

  # Sort GCP disks by native ID.
  GCP_DISK_NATIVE_ID

  # Sort GCP disks by native name.
  GCP_DISK_NATIVE_NAME

  # Sort GCP disks by project name.
  GCP_DISK_PROJECT_NAME

  # Sort GCP disk by size.
  GCP_DISK_SIZE

  # Sort GCP Instances by Native ID.
  GCP_INSTANCE_NATIVE_ID

  # Sort GCP Instances by Native Name.
  GCP_INSTANCE_NATIVE_NAME

  # Sort GCP Instances by Network Name.
  GCP_INSTANCE_NETWORK_NAME

  # Sort GCP Instances by Project Name.
  GCP_INSTANCE_PROJECT_NAME

  # Sort GCP Instances by Region.
  GCP_INSTANCE_REGION

  # Sort GCP Instances by Instance Type.
  GCP_INSTANCE_TYPE

  # Sort GCP Project by Disk count.
  GCP_PROJECT_DISK_COUNT

  # Sort GCP Projects by Instance Count.
  GCP_PROJECT_INSTANCE_COUNT

  # Sort GCP Projects by Native ID.
  GCP_PROJECT_NATIVE_ID

  # Sort GCP Projects by Project Number.
  GCP_PROJECT_NUMBER

  # Sort GCP Projects by Organization Name.
  GCP_PROJECT_ORG_NAME

  # Sort by ID of managed object.
  ID

  # Sort based on Kubernetes cluster name.
  K8S_CLUSTER_NAME

  # Sort MSSQL availability groups by copy only.
  MSSQL_AVAILABILITY_GROUP_COPY_ONLY

  # Sort MSSQL databases by copy only.
  MSSQL_DATABASE_COPY_ONLY

  # Sort MSSQL failover clusters by database count.
  MSSQL_FAILOVER_DATABASE_COUNT

  # Sort MSSQL hosts by number of databases.
  MSSQL_HOST_DB_COUNT

  # Sort MSSQL instance count on host page.
  MSSQL_HOST_INSTANCE_COUNT

  # Sort MSSQL instances by number of databases.
  MSSQL_INSTANCE_DB_COUNT
  NAME

  # Sort physical hosts by connection status.
  PHYSICAL_HOST_CONNECTION_STATUS

  # Sort physical hosts by OS name.
  PHYSICAL_HOST_OS_NAME

  # Sort SAP HANA systems by system SID.
  SAP_HANA_SYSTEM_SID

  # Sort SAP HANA systems by system RBS status.
  SAP_HANA_SYSTEM_STATUS

  # Sort unmanaged objects by archival storage size.
  UNMANAGED_OBJECTS_ARCHIVAL_STORAGE_BYTES

  # Sort unmanaged objects by local storage size.
  UNMANAGED_OBJECTS_LOCAL_STORAGE_BYTES

  # Sort based on unmanaged object location.
  UNMANAGED_OBJECTS_LOCATION

  # Sort based on unmanaged object status.
  UNMANAGED_OBJECTS_STATUS

  # Sort unmanaged objects by number of snapshot count.
  UNMANAGED_OBJECTS_UNEXPIRED_SNAPSHOT_COUNT

  # Sort based on the combination of vCenter name and virtual machine name.
  VMWARE_VCENTER_NAME_AND_VM_NAME

  # Sort based on the VMware virtual machine agent status.
  VMWARE_VM_AGENT_STATUS

  # Sort vSphere datastores by capacity.
  VSPHERE_DATASTORE_CAPACITY

  # Sort vSphere datastores by free space.
  VSPHERE_DATASTORE_FREE_SPACE

  # Sort vSphere datastores by datastore type.
  VSPHERE_DATASTORE_TYPE
}
type Hits {
  totalHits: Int!
  violations: Int!
  permittedHits: Int!
  totalHitsDelta: Int!
  violationsDelta: Int!
  permittedHitsDelta: Int!
}
# Hits summary details.
type HitsSummary {
  # Summary of total hits.
  totalHitsSummary: TotalRiskSummary

  # Summary of delta hits.
  deltaHitsSummary: TotalRiskSummary
}
# The connection status of a host.
type HostConnectionStatus {
  # Connectivity status of host.
  connectivity: HostConnectivityStatusEnum!

  # Timestamp when status was updated.
  timestampMillis: DateTime
}
enum HostConnectivityStatusEnum {
  BADLY_CONFIGURED
  CONNECTED
  CONNECTING
  CONNECTOR_NOT_DEPLOYED
  DELETED
  DELETING
  DELETION_FAILED
  DISCONNECTED
  PARTIALLY_CONNECTED
  REFRESHING
  REFRESH_FAILED
  REMOTE
  REPLICATED_TARGET
  SECONDARY_CLUSTER
  UNKNOWN_CONNECTIVITY_STATUS
}
# Supported in v5.0+
type HostConnectivitySummary {
  # Required. Supported in v5.0+
  action: String!

  # Required. Supported in v5.0+
  status: String!
}
# Supported in v5.0+
type HostDetail {
  # Supported in v5.0-v9.0
  # v5.0-v5.2:
  # v5.3-v9.0: ID of the Rubrik Backup Service (RBS) installed on the host.
  agentId: String

  # Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: Indicates if compression is enabled while transferring data between the host and the Rubrik cluster.
  compressionEnabled: Boolean

  # Required. Supported in v5.0+
  # A relic host is deleted, but still may have snapshots associated with its children (e.g. Fileset).
  isRelic: Boolean!

  # Required. Supported in v5.0+
  # v5.0-v5.2: Boolean value that indicates whether the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed
  # v5.3: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed
  # v6.0+: Indicates if the CBT driver is installed for SQL Server instances on the specified Windows host. Set to true when the CBT driver is installed. Set to false when the CBT driver is not installed.
  mssqlCbtDriverInstalled: Boolean!

  # Supported in v5.0+
  # Specifies the Oracle username for an account with query privileges.
  oracleQueryUser: String

  # Supported in v5.0+
  # Specifies the Oracle username for an account with sysdba privileges.
  oracleSysDbaUser: String

  # Supported in v5.2+
  # v5.2: Specifies whether the host is an Oracle host. When the host is an Oracle host, the UI displays the Oracle discovery fields.
  # v5.3: Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
  # v6.0+: Specifies whether this is an Oracle host. This indicates whether to show Oracle discovery fields in the UI.
  isOracleHost: Boolean

  # Supported in v9.0+
  # Specifies whether the refresh of host metadata for this host is paused.
  isRefreshPaused: Boolean
  hostSummary: HostSummary

  # Supported in v9.0+
  # Specify the name of active directory domain.
  hostDomainName: String

  # Supported in v9.0+
  # Id of the Active Directory Domain if the windows host has domain controller hosted.
  hostDomainId: String
  hostVfdDriverState: HostVfdState!
  hostVfdEnabled: HostVfdInstallConfig
}
# Supported in v5.0+
type HostDiagnosisSummary {
  # Supported in v5.0+
  connectivity: [HostConnectivitySummary!]!
}
# Host failover cluster.
type HostFailoverCluster implements CdmHierarchyObject , HierarchyObject , FailoverClusterTopLevelDescendantType {
  # ID of the CDM cluster.
  cdmId: String!

  # Connectivity status of failover cluster.
  status: FailoverClusterStatus

  # Boolean variable denoting if archived.
  isArchived: Boolean!

  # The OS type of the host failover cluster.
  nodesOsType: GuestOsType

  # The list of Hosts making up this Host Failover Cluster.
  allNodes: [PhysicalHost!]!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HostFailoverClusterDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HostFailoverClusterPhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HostFailoverCluster objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HostFailoverClusterConnection {
  # List of HostFailoverCluster objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HostFailoverClusterEdge!]!

  # List of HostFailoverCluster objects.
  nodes: [HostFailoverCluster!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HostFailoverCluster objects matching the request arguments.
  count: Int!
}
# Host failover cluster descendant.
interface HostFailoverClusterDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HostFailoverClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HostFailoverClusterDescendantTypeConnection {
  # List of HostFailoverClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HostFailoverClusterDescendantTypeEdge!]!

  # List of HostFailoverClusterDescendantType objects.
  nodes: [HostFailoverClusterDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HostFailoverClusterDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HostFailoverClusterDescendantType object. This wrapper is used for pagination.
type HostFailoverClusterDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HostFailoverClusterDescendantType object wrapped by this edge.
  node: HostFailoverClusterDescendantType!
}
# Wrapper around the HostFailoverCluster object. This wrapper is used for pagination.
type HostFailoverClusterEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HostFailoverCluster object wrapped by this edge.
  node: HostFailoverCluster!
}
# Host failover cluster physical child.
interface HostFailoverClusterPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HostFailoverClusterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HostFailoverClusterPhysicalChildTypeConnection {
  # List of HostFailoverClusterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HostFailoverClusterPhysicalChildTypeEdge!]!

  # List of HostFailoverClusterPhysicalChildType objects.
  nodes: [HostFailoverClusterPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HostFailoverClusterPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HostFailoverClusterPhysicalChildType object. This wrapper is used for pagination.
type HostFailoverClusterPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HostFailoverClusterPhysicalChildType object wrapped by this edge.
  node: HostFailoverClusterPhysicalChildType!
}
# Host failover cluster roots.
enum HostFailoverClusterRoot {
  # Linux host Root.
  LINUX_HOST_ROOT

  # Windows host Root.
  WINDOWS_HOST_ROOT
}
# Supported in v5.1+
# Status of Rubrik Io Filter on Hosts.
enum HostFilterStatus {
  HOST_FILTER_STATUS_INSTALLED
  HOST_FILTER_STATUS_OUT_OF_DATE
  HOST_FILTER_STATUS_PAST_EXPECTED_DATE
  HOST_FILTER_STATUS_UNINSTALLED
  HOST_FILTER_STATUS_UNKNOWN
  HOST_FILTER_STATUS_UNSUPPORTED_BY_VMWARE
}
# Supported in v6.0+
type HostGroupInfo {
  # Supported in v6.0+
  # ID of the host group.
  id: String

  # Required. Supported in v6.0+
  # Name of the host group.
  name: String!
}
# Supported in v5.3+
type HostInfo {
  # Required. Supported in v5.3+
  # Name of the host.
  hostname: String!

  # Required. Supported in v5.3+
  # The managed id of the host.
  id: String!

  # Required. Supported in v5.3+
  # Oracle discovery user.
  oracleQueryUser: String!

  # Required. Supported in v5.3+
  # Oracle sysdba user to use on the host.
  oracleSysDbaUser: String!
}
# Supported in v5.3+
input HostMakePrimaryRequestInput {
  # Supported in v5.3+
  # IDs of hosts to migrate.
  ids: [String!] = []

  # Supported in v5.3+
  # For all hosts and virtual machines registered with this cluster, make itself the primary if the current primary is oldPrimaryClusterUuid.
  oldPrimaryClusterUuid: String
}
# Supported in v5.0+
input HostRegisterInput {
  # Supported in v5.0+
  hasAgent: Boolean

  # Supported in v5.0+
  nasConfig: NasConfigInput

  # Supported in v5.0+
  # Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
  oracleQueryUser: String

  # Supported in v5.0+
  # v5.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable backup and recovery of Oracle databases for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
  # v5.1+: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
  oracleSysDbaUser: String

  # Supported in v5.0+
  # v5.0-v8.0: The ID of the organization to which the host is assigned.
  # v8.1+: The ID of the CDM organization to which the host is assigned. For RSC driven host registration, this field should be set to None, and host will be added to CDM global org. For CDM driven host registration, this field should be set to the Org the host belongs to.
  organizationId: String

  # Supported in v5.1+
  # A user-specified string that returns this host in searches.
  alias: String

  # Supported in v5.2+
  hdfsConfig: HdfsConfigInput

  # Supported in v5.2+
  # A Boolean that specifies whether to discover Oracle information at registration. A value of 'true' discovers Oracle information at registration.
  isOracleHost: Boolean

  # Supported in v8.1+
  # The ID of the RSC orgNetwork to which the host is assigned. This field should only be set when the host registration is called by RSC and the host belongs to a RSC orgNetwork. This field should always be set to None in other cases. 1) The call is from CDM; or 2) the call is from RSC but the host does not belong to an orgNetwork.
  orgNetworkId: String

  # Required. Supported in v5.0+
  hostname: String!
}
# Host roots.
enum HostRoot {
  # Exchange Host Root.
  EXCHANGE_ROOT

  # Linux Host Root.
  LINUX_HOST_ROOT

  # NAS Host Root.
  NAS_HOST_ROOT

  # Windows Host Root.
  WINDOWS_HOST_ROOT
}
# Host share type.
type HostShare implements CdmHierarchyObject , HierarchyObject , PhysicalHostDescendantType , PhysicalHostPhysicalChildType {
  # Information pertaining to migration of the NAS host from Rubrik CDM to RSC.
  nasMigrationInfo: String!

  # Data access protocol (NFS/SMB) for NAS host share.
  nasShareType: String!

  # Specifies whether the Changelist option is enabled.
  isChangelistEnabled: Boolean!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HostShareDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HostSharePhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HostShare objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HostShareConnection {
  # List of HostShare objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HostShareEdge!]!

  # List of HostShare objects.
  nodes: [HostShare!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HostShare objects matching the request arguments.
  count: Int!
}
# Host share type.
interface HostShareDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HostShareDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HostShareDescendantTypeConnection {
  # List of HostShareDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HostShareDescendantTypeEdge!]!

  # List of HostShareDescendantType objects.
  nodes: [HostShareDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HostShareDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HostShareDescendantType object. This wrapper is used for pagination.
type HostShareDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HostShareDescendantType object wrapped by this edge.
  node: HostShareDescendantType!
}
# Wrapper around the HostShare object. This wrapper is used for pagination.
type HostShareEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HostShare object wrapped by this edge.
  node: HostShare!
}
# Host share physical child.
interface HostSharePhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HostSharePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HostSharePhysicalChildTypeConnection {
  # List of HostSharePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HostSharePhysicalChildTypeEdge!]!

  # List of HostSharePhysicalChildType objects.
  nodes: [HostSharePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HostSharePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HostSharePhysicalChildType object. This wrapper is used for pagination.
type HostSharePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HostSharePhysicalChildType object wrapped by this edge.
  node: HostSharePhysicalChildType!
}
# Supported in v5.0+
type HostSummary {
  # Required. Supported in v5.0+
  # Deprecated. Please use 'name' instead.
  hostname: String!

  # Required. Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: Unique identifier for host.
  id: String!

  # Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: IP address or hostname of the host.
  name: String

  # Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: Operating system of the host. One of Windows, Linux, AIX, HPUX, and SunOS.
  operatingSystem: String

  # Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: The operating system of the host. Possible choices are Windows, Linux, AIX, HPUX, SunOS.
  operatingSystemType: String

  # Supported in v5.0+
  # The ID of the organization to which the host is assigned (set by envoy).
  organizationId: String

  # Supported in v5.0+
  # The name of the organization to which the host is assigned (set by envoy).
  organizationName: String

  # Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: ID of the Rubrik cluster to which the host belongs.
  primaryClusterId: String

  # Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: Specifies the connect status for the host. Status is Refreshing while discovery is running or Connected once discovery was successful and the host is available.
  status: String

  # Supported in v5.1+
  # A user-specified string that returns this host in searches.
  alias: String

  # Supported in v5.2+
  hdfsBaseConfig: HdfsBaseConfig

  # Supported in v9.0+
  # Specifies whether the refresh of host metadata for this host is paused.
  isRefreshPaused: Boolean

  # Supported in v9.1+
  # ID of the Rubrik Backup Service (RBS) installed on the host.
  agentId: String

  # Supported in v9.0+
  # Specifies the last refresh epoch time in msec.
  lastRefreshTimeStamp: Long
  mssqlCbtEffectiveStatus: MssqlCbtEffectiveStatusType
  mssqlCbtEnabled: MssqlCbtStatusType

  # Supported in v5.0+
  nasBaseConfig: NasBaseConfig
}
# Supported in v5.1+
# Status of Rubrik Io Filter on ESX Host.
enum HostUiFilterStatus {
  HOST_UI_FILTER_STATUS_CHECK_VCENTER
  HOST_UI_FILTER_STATUS_ERROR_CONTACT_SUPPORT
  HOST_UI_FILTER_STATUS_ERROR_MAINTENANCE_MODE
  HOST_UI_FILTER_STATUS_INSTALL_IN_PROGRESS
  HOST_UI_FILTER_STATUS_NO_FILTER
  HOST_UI_FILTER_STATUS_OK
  HOST_UI_FILTER_STATUS_RETRY_INSTALL
  HOST_UI_FILTER_STATUS_UNINSTALL_IN_PROGRESS
  HOST_UI_FILTER_STATUS_UNKNOWN
  HOST_UI_FILTER_STATUS_UNSUPPORTED_BY_VMWARE
  HOST_UI_FILTER_STATUS_UPGRADE_IN_PROGRESS
  HOST_UI_FILTER_STATUS_UPGRADE_NEEDED
}
# Supported in v5.0+
input HostUpdateIdInput {
  # Required. Supported in v5.0+
  # ID of the host.
  hostId: String!

  # Required. Supported in v5.0+
  updateProperties: HostUpdateInput!
}
# Supported in v5.0+
input HostUpdateInput {
  # Supported in v5.0+
  compressionEnabled: Boolean

  # When VFD is not enabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the VFD driver from a specified Windows host. Before using this property, disable VFD on the specified Windows host by setting the value of HostVfdEnabled to not enabled.
  hostVfdDriverInstalled: Boolean

  # Supported in v5.0+
  hostname: String

  # When CBT is not enabled on the specified Windows host, set this property to false to instruct the Rubrik cluster to remove the CBT driver from a specified Windows host. Before using this property, disable CBT on the specified Windows host by setting the value of mssqlCbtEnabled to not enabled.
  mssqlCbtDriverInstalled: Boolean

  # Supported in v5.0+
  nasConfig: NasConfigInput

  # Supported in v5.0+
  # Specifies the Oracle username for an account with query privileges. The account must have query privileges for a specified Oracle installation to enable Oracle discovery queries for that installation.
  oracleQueryUser: String

  # Supported in v5.0+
  # v5.0: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable backup and recovery of Oracle databases for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
  # v5.1-v5.3: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
  # v6.0+: Specifies the Oracle username for an account with sysdba privileges. The account must have sysdba privileges for a specified Oracle installation to enable Oracle discovery queries for that installation. This field overrides the configured global sysdba user for the specified Oracle installation.
  oracleSysDbaUser: String

  # Supported in v5.1+
  # A user-specified string that returns this host in searches.
  alias: String

  # Supported in v5.2+
  hdfsConfig: HdfsConfigInput

  # Supported in v5.2+
  # v5.2-v5.3: A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
  # v6.0: A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
  # 
  # v7.0-v8.0: A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
  # 
  # v8.1: A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
  # 
  # v9.0+: A Boolean that specifies whether to discover Oracle information during host refresh. A value of 'true' discovers Oracle information during host refresh.
  isOracleHost: Boolean

  # Supported in v7.0+
  # A Boolean that specifies whether to update the Rubrik Backup Agent and agent ID during host edit.
  isUpdateCertAndAgentIdEnabled: Boolean

  # Supported in v9.0+
  # A Boolean that specifies whether the host refresh is paused or not.
  isRefreshPaused: Boolean

  # Supported in v5.0+
  hostVfdEnabled: HostVfdInstallConfig

  # Supported in v5.0+
  mssqlCbtEnabled: MssqlCbtStatusType
}
# Supported in v5.0+
# VFD host support status.
enum HostVfdInstallConfig {
  HOST_VFD_INSTALL_CONFIG_DISABLED
  HOST_VFD_INSTALL_CONFIG_ENABLED
}
# Supported in v5.0+
input HostVfdInstallRequestInput {
  # Required. Supported in v5.0+
  # Ids of host on which to install/uninstall VFD.
  hostIds: [String!]!

  # Required. Supported in v5.0+
  install: Boolean!
}
# Supported in v5.0+
type HostVfdInstallResponse {
  # Supported in v5.0+
  errorInfo: String

  # Required. Supported in v5.0+
  hostId: String!
  hostVfdDriverState: HostVfdState!
}
# Supported in v5.0+
# VFD host install state.
enum HostVfdState {
  HOST_VFD_STATE_INSTALLED
  HOST_VFD_STATE_INSTALLED_BUT_RESTART_REQUIRED
  HOST_VFD_STATE_INSTALLED_BUT_TWO_RESTARTS_REQUIRED
  HOST_VFD_STATE_NOT_INSTALLED
  HOST_VFD_STATE_UNINSTALLED_BUT_RESTART_REQUIRED
}
# Supported in v5.0+
type HostVolumeSummary {
  # Required. Supported in v5.0+
  # v5.0-v5.2: A boolean value that describes whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.
  # v5.3+: Indicates whether a volume is present on the host. When 'true', the volume is present. When 'false', the volume is not present. Volumes that are not present on the host are still included in snapshots and trigger warnings until the missing volumes are excluded from snapshots.
  isCurrentlyPresentOnSystem: Boolean!

  # Required. Supported in v5.0+
  # v5.0-v5.2: Windows ID on the Host
  # v5.3+: The unique ID of the volume on the Windows host.
  naturalId: String!

  # Supported in v5.0+
  # v5.0-v5.2: The Volume Group ID of the volume.
  # v5.3+: The unique ID of the Volume Group.
  volumeGroupId: String
  volumeGroupSnapshotVolumeSummary: VolumeGroupSnapshotVolumeSummary
}
# Supported in v5.3+
type HotAddBandwidthInfo {
  # Required. Supported in v5.3+
  # The HotAdd bandwidth limit in Mbps for export.
  exportLimit: Int!

  # Required. Supported in v5.3+
  # The HotAdd bandwidth limit in Mbps for ingest.
  ingestLimit: Int!
}
# Supported in v5.3+
input HotAddBandwidthInfoInput {
  # Required. Supported in v5.3+
  # The HotAdd bandwidth limit in Mbps for export.
  exportLimit: Int!

  # Required. Supported in v5.3+
  # The HotAdd bandwidth limit in Mbps for ingest.
  ingestLimit: Int!
}
# Supported in v5.3+
input HotAddNetworkConfigWithIdInput {
  # Supported in v5.3+
  # The static IP information of a user-configured vCenter network selected for HotAdd backup and recovery.
  staticIpInfo: StaticIpInfoInput

  # Required. Supported in v5.3+
  # The ID of a user-configured vCenter network selected for HotAdd backup and recovery.
  networkId: String!
}
# Supported in v5.3+
type HotAddNetworkConfigWithName {
  # Supported in v5.3+
  # The name of the HotAdd proxy virtual machine network.
  networkName: String

  # Supported in v5.3+
  staticIpConfig: StaticIpInfo
}
# Supported in v5.3+
type HotAddProxyVmInfo {
  # Supported in v5.3+
  # The name of the compute cluster that contains the HotAdd proxy virtual machine.
  computeClusterName: String

  # Required. Supported in v5.3+
  # The name of the datastore that the HotAdd proxy virtual machine uses.
  datastoreName: String!

  # Supported in v5.3+
  # The name of the ESX host that contains the HotAdd proxy virtual machine.
  hostName: String

  # Required. Supported in v5.3+
  # The ID of the HotAdd proxy virtual machine.
  id: String!

  # Required. Supported in v5.3+
  # The name of the HotAdd proxy virtual machine.
  name: String!

  # Supported in v5.3+
  # The network configuration of the HotAdd proxy virtual machine.
  proxyNetworkInfo: HotAddNetworkConfigWithName

  # Required. Supported in v5.3+
  # The number of port in use for the HotAdd proxy virtual machine.
  usedPortCount: Int!

  # Required. Supported in v5.3+
  # The name of the vCenter that contains the HotAdd proxy virtual machine.
  vcenterName: String!

  # Supported in v5.3+
  status: HotAddProxyVmStatusType!
}
# Supported in v5.3+
type HotAddProxyVmInfoListResponse {
  # Supported in v5.3+
  # List of matching objects.
  data: [HotAddProxyVmInfo!]!

  # Supported in v5.3+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.3+
  # Total list responses.
  total: Int

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.3+
# The type of the HotAdd proxy virtual machine.
enum HotAddProxyVmStatusType {
  HOT_ADD_PROXY_VM_STATUS_TYPE_EXPIRED
  HOT_ADD_PROXY_VM_STATUS_TYPE_FAILED
  HOT_ADD_PROXY_VM_STATUS_TYPE_MAINTAINING
  HOT_ADD_PROXY_VM_STATUS_TYPE_RUNNING
}
# Hourly snapshot schedule.
type HourlySnapshotSchedule {
  # Basic hourly snapshot schedule.
  basicSchedule: BasicSnapshotSchedule
}
# Hourly snapshot schedule.
input HourlySnapshotScheduleInput {
  # Basic hourly snapshot schedule.
  basicSchedule: BasicSnapshotScheduleInput
}
# Hyper-V cluster details.
type HyperVCluster implements HierarchyObject , CdmHierarchyObject , HyperVSCVMMDescendantType , HyperVSCVMMLogicalChildType , HypervTopLevelDescendantType {
  # List of HyperV Server IDs in the cluster.
  serverIds: [String!]!

  # Connectivity Status of HyperV Cluster.
  connectionStatus: HypervHostStatusType!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HyperVClusterDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HyperVClusterLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Hyper-V cluster descendant type.
interface HyperVClusterDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HyperVClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HyperVClusterDescendantTypeConnection {
  # List of HyperVClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HyperVClusterDescendantTypeEdge!]!

  # List of HyperVClusterDescendantType objects.
  nodes: [HyperVClusterDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HyperVClusterDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HyperVClusterDescendantType object. This wrapper is used for pagination.
type HyperVClusterDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HyperVClusterDescendantType object wrapped by this edge.
  node: HyperVClusterDescendantType!
}
# Hyper-V cluster logical child type.
interface HyperVClusterLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HyperVClusterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HyperVClusterLogicalChildTypeConnection {
  # List of HyperVClusterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HyperVClusterLogicalChildTypeEdge!]!

  # List of HyperVClusterLogicalChildType objects.
  nodes: [HyperVClusterLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HyperVClusterLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HyperVClusterLogicalChildType object. This wrapper is used for pagination.
type HyperVClusterLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HyperVClusterLogicalChildType object wrapped by this edge.
  node: HyperVClusterLogicalChildType!
}
# HyperV live mount.
type HyperVLiveMount {
  # Describes if the live mount is ready.
  isVmReady: Boolean!

  # Name of the live mount.
  name: String!

  # Name of the source virtual machine.
  sourceVm: String!

  # Specification of the live mount in JSON string.
  mountSpec: String!

  # Host name of the server where Hyper-V virtual machine is live mounted.
  serverName: String!

  # Time when the snapshot was mounted.
  mountTime: DateTime

  # Describes if the mount is a disk mount.
  isDiskLevelMount: Boolean!

  # Name of the target virtual machine for disk mount.
  targetVm: String

  # Number of disks attached to the target virtual machine.
  attachedDiskCount: Int!

  # Power Status of HyperV Live Mount.
  mountedVmStatus: HypervMountedVmStatusType!

  # Fid of the live mount.
  id: UUID!

  # ID of the source virtual machine..
  sourceVmFid: UUID!

  # ID of the mounted virtual machine..
  mountedVmFid: UUID!

  # ID of the HyperV server.
  serverFid: UUID!

  # Source snapshot of the live mount.
  sourceSnapshot: CdmSnapshot

  # Cluster of the live mount.
  cluster: Cluster!

  # ID of the target virtual machine for disk mount.
  targetVmFid: UUID
}
# Paginated list of HyperVLiveMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HyperVLiveMountConnection {
  # List of HyperVLiveMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HyperVLiveMountEdge!]!

  # List of HyperVLiveMount objects.
  nodes: [HyperVLiveMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HyperVLiveMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the HyperVLiveMount object. This wrapper is used for pagination.
type HyperVLiveMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HyperVLiveMount object wrapped by this edge.
  node: HyperVLiveMount!
}
# Hyper-V SCVMM details.
type HyperVSCVMM implements HierarchyObject , CdmHierarchyObject , PhysicalHostDescendantType , PhysicalHostPhysicalChildType , HypervTopLevelDescendantType {
  # Connection status of the SCVMM server.
  status: HyperVStatus!

  # The RunAs account which will be used to install the Rubrik Backup Service on the hosts.
  runAsAccount: String!

  # Flag to specify if Rubrik can deploy the Rubrik Backup Service to the hosts. If true, Rubrik tries to deploy the Rubrik Backup Service to the Hyper-V hosts. If false, the deployment of the Rubrik Backup Service will be handled by the client.
  shouldDeployAgent: Boolean!

  # The additional information available for the System Center Virtual Machine Manager (SCVMM) currently includes only the version details.
  scvmmInfo: ScvmmInfo

  # Name or IP Address of SCVMM Host.
  hostName: String!

  # Connectivity Status of SCVMM Host.
  connectionStatus: HypervHostStatusType!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HyperVSCVMMDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HyperVSCVMMLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Paginated list of HyperVSCVMM objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HyperVSCVMMConnection {
  # List of HyperVSCVMM objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HyperVSCVMMEdge!]!

  # List of HyperVSCVMM objects.
  nodes: [HyperVSCVMM!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HyperVSCVMM objects matching the request arguments.
  count: Int!
}
# Hyper-V SCVMM descendant type.
interface HyperVSCVMMDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HyperVSCVMMDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HyperVSCVMMDescendantTypeConnection {
  # List of HyperVSCVMMDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HyperVSCVMMDescendantTypeEdge!]!

  # List of HyperVSCVMMDescendantType objects.
  nodes: [HyperVSCVMMDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HyperVSCVMMDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HyperVSCVMMDescendantType object. This wrapper is used for pagination.
type HyperVSCVMMDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HyperVSCVMMDescendantType object wrapped by this edge.
  node: HyperVSCVMMDescendantType!
}
# Wrapper around the HyperVSCVMM object. This wrapper is used for pagination.
type HyperVSCVMMEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HyperVSCVMM object wrapped by this edge.
  node: HyperVSCVMM!
}
# Hyper-V SCVMM logical child type.
interface HyperVSCVMMLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HyperVSCVMMLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HyperVSCVMMLogicalChildTypeConnection {
  # List of HyperVSCVMMLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HyperVSCVMMLogicalChildTypeEdge!]!

  # List of HyperVSCVMMLogicalChildType objects.
  nodes: [HyperVSCVMMLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HyperVSCVMMLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HyperVSCVMMLogicalChildType object. This wrapper is used for pagination.
type HyperVSCVMMLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HyperVSCVMMLogicalChildType object wrapped by this edge.
  node: HyperVSCVMMLogicalChildType!
}
# Additional information about the status of a Hyperv SCVMM.
type HyperVStatus {
  # Connection status of the SCVMM server.
  connectivity: String!

  # Timestamp when status was updated.
  timestampMillis: DateTime
}
# Hyper-V virtual machine details.
type HyperVVirtualMachine implements HierarchyObject , CdmHierarchyObject , CdmHierarchySnappableNew , HyperVSCVMMDescendantType , HyperVClusterDescendantType , HypervServerLogicalChildType , HypervServerDescendantType , HypervTopLevelDescendantType {
  # ID of the virtual machine in Rubrik CDM.
  cdmId: String!

  # Flag to indicate whether the virtual machine is a relic.
  isRelic: Boolean!

  # Type of operating system used by the Hyper-V virtual machine.
  osType: String

  # Hyper-V virtual machine SLA Domain protection start date.
  protectionDate: DateTime

  # Agent status of Hyper-V virtual machine.
  agentStatus: HypervVmAgentStatus

  # Stats for Hyper-V virtual machine (e.g., capacity).
  reportWorkload: Snappable

  # Hyper-V virtual machine Live Count Connection.
  hypervVmMountCount: Int!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Paginated list of HyperVVirtualMachine objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HyperVVirtualMachineConnection {
  # List of HyperVVirtualMachine objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HyperVVirtualMachineEdge!]!

  # List of HyperVVirtualMachine objects.
  nodes: [HyperVVirtualMachine!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HyperVVirtualMachine objects matching the request arguments.
  count: Int!
}
# Wrapper around the HyperVVirtualMachine object. This wrapper is used for pagination.
type HyperVVirtualMachineEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HyperVVirtualMachine object wrapped by this edge.
  node: HyperVVirtualMachine!
}
# Supported in v7.0+
type HypervAsyncRequestFailureSummary {
  # Required. Supported in v7.0+
  # Information about why the request failed.
  error: String!

  # Required. Supported in v7.0+
  # ID of the Hyper-V virtual machine.
  vmId: String!
}
# Supported in v7.0+
type HypervAsyncRequestSuccessSummary {
  # Required. Supported in v7.0+
  # Information for tracking the status of asynchronous requests.
  asyncRequestStatus: AsyncRequestStatus

  # Required. Supported in v7.0+
  # ID of the Hyper-V virtual machine.
  vmId: String!
}
# Supported in v7.0+
input HypervBatchExportSnapshotJobConfigInput {
  # Required. Supported in v7.0+
  # Array of objects containing information about snapshots for export.
  snapshots: [HypervExportSnapshotJobConfigForBatchInput!]!
}
# Supported in v7.0+
input HypervBatchInstantRecoverSnapshotJobConfigInput {
  # Required. Supported in v7.0+
  # Array of objects that contain information about snapshots to be instantly recovered.
  snapshots: [HypervInstantRecoverConfigForBatchInput!]!
}
# Supported in v7.0+
input HypervBatchMountSnapshotJobConfigInput {
  # Required. Supported in v7.0+
  # Array of objects containing information about snapshots to be mounted.
  snapshots: [HypervMountSnapshotConfigForBatchInput!]!
}
# Input configuration for taking on-demand snapshot of multiple HyperV virtual machines.
input HypervBatchOnDemandBackupJobConfigInput {
  # Array of objects containing information about Hyper-V virtual machines to be backed up.
  vms: [HypervOnDemandBackupJobConfigForBatchInput!]!
}
# Required. Input for deleting all snapshots of a Hyper-V virtual machine.
input HypervDeleteAllSnapshotsInput {
  # Required. Virtual machine ID.
  id: String!
}
# Supported in v5.0+
input HypervDownloadFilesJobConfigInput {
  # Supported in v5.2+
  # v5.2-v7.0: An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
  # v8.0+: Optional Boolean argument indicating if the download is being triggered due to a Legal Hold.
  legalHoldDownloadConfig: LegalHoldDownloadConfigInput

  # Required. Supported in v5.0+
  # v5.0-v7.0: An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path. When the source is a Windows virtual machine, the paths must all be on the same disk.
  # v8.0+: Array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path. When the source is a Windows virtual machine, the paths must all be on the same disk.
  paths: [String!]!
}
# Sort by parameters for Hyper-V virtual hard disks.
enum HypervExcludeDiskSortByField {
  # Sort by disk name.
  NAME

  # Sort by disk size.
  SIZE
}
# Supported in v7.0+
input HypervExportSnapshotJobConfigForBatchInput {
  # Supported in v7.0+
  # Exports the oldest snapshot taken after the specified date. snapshotAfterDate is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
  snapshotAfterDate: DateTime

  # Supported in v7.0+
  # Exports the snapshot most recently taken prior to the specified date. snapshotBeforeDate is only evaluated when no value is set for snapshotId.
  snapshotBeforeDate: DateTime

  # Supported in v7.0+
  # ID of the snapshot to export. This parameter is optional if the snapshotBeforeDate or snapshotAfterDate parameters are configured.
  snapshotId: String

  # Supported in v7.0+
  # Prefix to be added to the name of the exported virtual machine.
  vmNamePrefix: String

  # Required. Supported in v7.0+
  # Configuration for exporting the snapshot.
  exportConfig: HypervExportSnapshotJobConfigInput!

  # Required. Supported in v7.0+
  # ID of the virtual machine with snapshot that requires exporting.
  vmId: String!
}
# Supported in v5.0+
input HypervExportSnapshotJobConfigInput {
  # Supported in v5.0+
  # v5.0-v6.0: Sets the state of the network interfaces when the virtual machine is mounted. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts. Default value is 'true'.
  # v7.0+: Sets the state of the network interfaces when the virtual machine is exported. 'false' enables the network interfaces. 'true' disables the network interfaces. The default value is 'true'. Disabling the interfaces can prevent IP address conflicts.
  disableNetwork: Boolean

  # Supported in v5.0+
  # v5.0-v5.3: ID of the host to export to
  # v6.0: ID of the host to export to.
  # v7.0+: ID of the host for export.
  hostId: String

  # Specifies whether the virtual machine should be powered on after export. The default value is true.
  powerOn: Boolean

  # Supported in v5.0+
  # v5.0-v6.0: Determines whether to remove the network interfaces from the mounted virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
  # v7.0+: Specifies whether to remove the network interfaces from the exported virtual machine. When the value is 'true' all the network interfaces are removed. The default value is 'true'.
  removeNetworkDevices: Boolean

  # Name of the new virtual machine being exported.
  vmName: String

  # Destination path for the new virtual machine virtual disks.
  path: String!
}
# The connection status of Hyper-V object.
enum HypervHostStatusType {
  # Hyper-V object is connected.
  CONNECTED

  # Hyper-V object is connecting.
  CONNECTING

  # Hyper-V object is deleted.
  DELETED

  # Hyper-V object is deleting.
  DELETING

  # Hyper-V object is disconnected.
  DISCONNECTED

  # Some servers in the Hyper-V cluster are connected.
  PARTIALLYCONNECTED

  # Hyper-V object is refreshing.
  REFRESHING

  # Hyper-V object status could
  # not be parsed.
  UNKNOWN
}
# Supported in v5.0+
type HypervHostSummary {
  # Required. Supported in v5.0+
  # IP Address or the hostname using which the host was added.
  hostname: String!

  # Required. Supported in v5.0+
  # The ID of the Hyper-V host.
  id: String!

  # Required. Supported in v5.0+
  primaryClusterId: String!

  # Name of the Hyper-V Server.
  serverName: String!
}
# Supported in v5.0+
type HypervHostSummaryListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [HypervHostSummary!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long
  nextCursor: String
}
# Supported in v7.0+
input HypervInstantRecoverConfigForBatchInput {
  # Supported in v7.0+
  # Recovers the first snapshot taken after the specified date. The value of 'snapshotAfterDate' is considered only when 'snapshotId' and 'snapshotBeforeDate' are not configured.
  snapshotAfterDate: DateTime

  # Supported in v7.0+
  # Recovers the snapshot most recently taken before the specified date. The value of 'snapshotBeforeDate' is considered only when a snapshot ID is not set using 'snapshotId'.
  snapshotBeforeDate: DateTime

  # Supported in v7.0+
  # ID of the snapshot to recover. This parameter is optional if the snapshotBeforeDate or snapshotAfterDate parameters are configured.
  snapshotId: String

  # Required. Supported in v7.0+
  # Configuration for recovering the snapshot.
  instantRecoveryConfig: HypervInstantRecoveryJobConfigInput!

  # Required. Supported in v7.0+
  # ID of the virtual machine that contains a snapshot requiring instant recovery.
  vmId: String!
}
# Supported in v5.0+
input HypervInstantRecoveryJobConfigInput {
  # Supported in v5.0+
  # v5.0-v5.3: ID of the host to instantly recover to
  # v6.0: ID of the host to instantly recover to.
  # v7.0+: ID of the instant recovery target host.
  hostId: String

  # Name of the new virtual machine to instantly recover.
  vmName: String
}
# Filter for Hyper-V Live Mount results.
enum HypervLiveMountFilterField {
  # Cluster UUID filter for Hyper-V Live Mount results.
  CLUSTER_UUID

  # Mount Name filter for Hyper-V Live Mount results.
  MOUNT_NAME

  # Organization ID filter field for Hyper-V
  # Live Mount results.
  ORG_ID

  # Hyper-V original virtual machine ID filter for Live Mount results.
  ORIGINAL_VM_ID

  # Filter is not specified. Any filter text would
  # not be considered.
  UNSPECIFIED
}
# Filter Hyper-V live mount results.
input HypervLiveMountFilterInput {
  # Type of filter.
  field: HypervLiveMountFilterField = UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Sort by parameters for Hyper-V Live mount results.
enum HypervLiveMountSortByField {
  # Sort by Rubrik cluster name.
  CLUSTER_NAME

  # Sort by mount creation date.
  CREATION_DATE

  # Sort by mount name.
  MOUNT_NAME

  # Sort by field is not specified. Any filter text would
  # not be considered.
  UNSPECIFIED
}
# Sort Hyper-V Live Mount results.
input HypervLiveMountSortByInput {
  # Field for sorting the Hyper-V Live Mount results.
  field: HypervLiveMountSortByField = UNSPECIFIED

  # Sorting order for Hyper-V Live Mount results.
  sortOrder: SortOrder = ASC
}
# Supported in v7.0+
input HypervMountSnapshotConfigForBatchInput {
  # Supported in v7.0+
  # Mounts the first snapshot taken after the specified date. The value of 'snapshotAfterDate' is considered only when 'snapshotId' and 'snapshotBeforeDate' are not configured.
  snapshotAfterDate: DateTime

  # Supported in v7.0+
  # Mounts the snapshot most recently taken before the specified date. The value of 'snapshotBeforeDate' is considered only when a snapshot ID is not set using 'snapshotId'.
  snapshotBeforeDate: DateTime

  # Supported in v7.0+
  # ID of the snapshot to mount. This parameter is optional if the snapshotBeforeDate or snapshotAfterDate parameters are configured.
  snapshotId: String

  # Supported in v7.0+
  # Prefix to be added to the name of the mounted virtual machine.
  vmNamePrefix: String

  # Required. Supported in v7.0+
  # Configuration for mounting the snapshot.
  mountConfig: HypervMountSnapshotJobConfigInput!

  # Required. Supported in v7.0+
  # ID of the virtual machine with snapshot that requires mounting.
  vmId: String!
}
# Supported in v5.0+
input HypervMountSnapshotJobConfigInput {
  # Supported in v5.0+
  # v5.0-v6.0: Sets the state of the network interfaces when the virtual machine is mounted. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts. Default value is 'true'.
  # v7.0+: Sets the state of the network interfaces when the virtual machine is mounted. 'false' enables the network interfaces. 'true' disables the network interfaces. The default value is 'true'. Disabling the interfaces can prevent IP address conflicts.
  disableNetwork: Boolean

  # Supported in v5.0+
  # v5.0-v5.3: ID of host for the mount to use
  # v6.0: ID of host for the mount to use.
  # v7.0+: ID of host to be used for mounting the snapshot.
  hostId: String

  # Determines whether the virtual machine should be powered on after mount. The default value is true.
  powerOn: Boolean

  # Supported in v5.0+
  # v5.0-v6.0: Determines whether to remove the network interfaces from the mounted virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
  # v7.0+: Determines whether to remove the network interfaces from the mounted virtual machine. 'true' removes all network interfaces. The default value is 'false'.
  removeNetworkDevices: Boolean

  # Supported in v5.0+
  # v5.0-v5.3: Name of the mounted VM
  # v6.0: Name of the mounted VM.
  # v7.0+: Name of the mounted virtual machine.
  vmName: String
}
# The connection status of Hyper-V Host server.
enum HypervMountedVmStatusType {
  # Hyper-V Live Mount
  # is Powered Off.
  POWEREDOFF

  # Hyper-V Live Mount
  # is Powered On.
  POWEREDON

  # Hyper-V Live Mount
  # is Powering Off.
  POWERINGOFF

  # Hyper-V Live Mount
  # is Powering On.
  POWERINGON

  # Hyper-V Live Mount virtual machine status could
  # not be parsed.
  UNKNOWN
}
# Input configuration for taking batch on-demand snapshot of a Hyper-V virtual machine.
input HypervOnDemandBackupJobConfigForBatchInput {
  # Configuration for on-demand backup of Hyper-V virtual machines.
  backupConfig: BaseOnDemandSnapshotConfigInput

  # ID of the Hyper-V virtual machine to be backed up.
  vmId: String = ""
}
# Required. Input for taking a on-demand snapshot of a Hyper-V virtual machine.
input HypervOnDemandSnapshotInput {
  # Configuration for the on-demand backup.
  config: BaseOnDemandSnapshotConfigInput

  # Required. ID of the VM.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
# Supported in v5.0+
input HypervRestoreFileConfigInput {
  # Required. Supported in v5.0+
  # Absolute file path.
  path: String!

  # Required. Supported in v5.0+
  # Directory of folder to copy files into.
  restorePath: String!
}
# Supported in v5.0+
input HypervRestoreFilesConfigInput {
  # Supported in v9.0+
  # Workload ID of the target HyperV virtual machine, which is the destination for the recovered data.
  targetVirtualMachineId: String

  # Required. Supported in v5.0+
  # v5.0-v5.3: Absolute path of the target location for the copied files
  # v6.0-v7.0: Absolute path of the target location for the copied files.
  # v8.0+: Absolute path for the copied files to the target location.
  restoreConfig: [HypervRestoreFileConfigInput!]!
}
# Input parameters for deleting Hyper-V SCVMM.
input HypervScvmmDeleteInput {
  # ID of the Hyper-V SCVMM.
  id: String!
}
# Supported in v5.0+
input HypervScvmmRegisterInput {
  # Required. Supported in v5.0+
  # Name of the SCVMM host.
  hostname: String!

  # Required. Supported in v5.0+
  # The RunAs account which will be used to install connector on hosts.
  runAsAccount: String!

  # Required. Supported in v5.0+
  # Flag to specify if Rubrik can deploy connector to hosts. If true, Rubrik tries to deploy connector to the hyperv hosts. If false, Rubrik deployment of connector will be handled by the client.
  shouldDeployAgent: Boolean!
}
# Supported in v5.0+
type HypervScvmmSummary {
  # Required. Supported in v5.0+
  # The ID of the Hyper-V SCVMM.
  id: String!

  # Required. Supported in v5.0+
  primaryClusterId: String!

  # Required. Supported in v5.0+
  # The RunAs account which will be used to install connector on hosts.
  runAsAccount: String!

  # Required. Supported in v5.0+
  # Flag to specify if Rubrik can deploy connector to hosts. If true, Rubrik tries to deploy connector to the hyperv hosts. If false, Rubrik deployment of connector will be handled by the client.
  shouldDeployAgent: Boolean!

  # Required. Supported in v5.0+
  # Connection status of the SCVMM server.
  status: String!

  # Supported in v9.0+
  # Version of SCVMM.
  scvmmVersion: String
  slaAssignable: SlaAssignable
}
# Supported in v5.0+
type HypervScvmmUpdate {
  # Supported in v5.0+
  # v5.0-v5.1: Assign this SCVMM to the given SLA domain.
  # v5.2+: Assign this SCVMM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # Name of the SCVMM host.
  hostname: String

  # Supported in v5.0+
  # The RunAs account which will be used to install connector on hosts.
  runAsAccount: String

  # Supported in v5.0+
  # Flag to specify if Rubrik can deploy connector to hosts. If true, Rubrik tries to deploy connector to the hyperv hosts. If false, Rubrik deployment of connector will be handled by the client.
  shouldDeployAgent: Boolean
}
# Required. Input for Hyper-V SCVMM update.
input HypervScvmmUpdateInput {
  # Required. ID of Hyper-V SCVMM.
  id: String!

  # Required. Properties to update.
  updateProperties: UpdateHypervScvmmUpdatePropertiesInput!
}
# Supported in v5.0+
type HypervScvmmUpdateReply {
  hypervScvmmSummary: HypervScvmmSummary

  # Properties of Hyper-V SCVMM object.
  hypervScvmmUpdate: HypervScvmmUpdate
}
# Hyper-V server details.
type HypervServer implements HierarchyObject , CdmHierarchyObject , PhysicalHostDescendantType , PhysicalHostPhysicalChildType , HyperVSCVMMDescendantType , HyperVSCVMMLogicalChildType , HyperVClusterDescendantType , HyperVClusterLogicalChildType , HypervTopLevelDescendantType {
  # Status of the Hyper-V server.
  status: HyperVStatus!

  # Connectivity Status of HyperV Host.
  connectionStatus: HypervHostStatusType!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HypervServerDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HypervServerLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Hyper-V server descendant type.
interface HypervServerDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HypervServerDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HypervServerDescendantTypeConnection {
  # List of HypervServerDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HypervServerDescendantTypeEdge!]!

  # List of HypervServerDescendantType objects.
  nodes: [HypervServerDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HypervServerDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HypervServerDescendantType object. This wrapper is used for pagination.
type HypervServerDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HypervServerDescendantType object wrapped by this edge.
  node: HypervServerDescendantType!
}
# Hyper-V server logical child type.
interface HypervServerLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HypervServerLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HypervServerLogicalChildTypeConnection {
  # List of HypervServerLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HypervServerLogicalChildTypeEdge!]!

  # List of HypervServerLogicalChildType objects.
  nodes: [HypervServerLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HypervServerLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HypervServerLogicalChildType object. This wrapper is used for pagination.
type HypervServerLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HypervServerLogicalChildType object wrapped by this edge.
  node: HypervServerLogicalChildType!
}
# Hyper-V top-level descendant type.
interface HypervTopLevelDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of HypervTopLevelDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type HypervTopLevelDescendantTypeConnection {
  # List of HypervTopLevelDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [HypervTopLevelDescendantTypeEdge!]!

  # List of HypervTopLevelDescendantType objects.
  nodes: [HypervTopLevelDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of HypervTopLevelDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the HypervTopLevelDescendantType object. This wrapper is used for pagination.
type HypervTopLevelDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual HypervTopLevelDescendantType object wrapped by this edge.
  node: HypervTopLevelDescendantType!
}
# Supported in v5.0+
input HypervUpdateMountConfigInput {
  # Required. Supported in v5.0+
  # True to power on, false to power off.
  powerStatus: Boolean!
}
# Supported in v5.2+
type HypervVirtualDiskInfo {
  # Required. Supported in v5.2+
  # The ID of the Hyper-V virtual disk.
  id: String!

  # Required. Supported in v5.2+
  # The name of the Hyper-V virtual disk.
  name: String!

  # Required. Supported in v5.2+
  # The path of the Hyper-V virtual disk.
  path: String!

  # Supported in v9.0+
  # The size of the Hyper-V virtual disk.
  size: Long
}
# Supported in v5.0+
type HypervVirtualMachineDetail {
  # Supported in v5.0+
  # Returns whether the Rubrik connector is installed and service is registered.
  isAgentRegistered: Boolean
  naturalId: String
  hypervVirtualMachineSummary: HypervVirtualMachineSummary
  hypervVirtualMachineUpdate: HypervVirtualMachineUpdate
  guestOsType: HypervVirtualMachineDetailGuestOsType!
  operatingSystemType: HypervVirtualMachineDetailOperatingSystemType

  # Supported in v5.2+
  # Brief information about all virtual disks of the selected virtual machine.
  virtualDiskInfo(
    # Filter Hyper-V virtual disk by name.
    diskNameFilter: String,

    # Sort by argument for hyper-v virtual hard disks. By default, name of the disk will be used.
    sortBy: HypervExcludeDiskSortByField,

    # Sorting order for the results.
    sortOrder: SortOrder): [HypervVirtualDiskInfo!]!
}
enum HypervVirtualMachineDetailGuestOsType {
  HYPERV_VIRTUAL_MACHINE_DETAIL_GUEST_OS_TYPE_LINUX
  HYPERV_VIRTUAL_MACHINE_DETAIL_GUEST_OS_TYPE_UNKNOWN
  HYPERV_VIRTUAL_MACHINE_DETAIL_GUEST_OS_TYPE_WINDOWS
}
enum HypervVirtualMachineDetailOperatingSystemType {
  HYPERV_VIRTUAL_MACHINE_DETAIL_OPERATING_SYSTEM_TYPE_LINUX
  HYPERV_VIRTUAL_MACHINE_DETAIL_OPERATING_SYSTEM_TYPE_WINDOWS
}
# Supported in v5.0+
type HypervVirtualMachineMountSummary {
  # Supported in v5.0+
  hostId: String

  # Supported in v5.0+
  hostName: String

  # Required. Supported in v5.0+
  id: String!

  # Required. Supported in v5.0+
  isReady: Boolean!

  # Supported in v5.0+
  mountRequestId: String

  # Supported in v5.0+
  mountedVmId: String

  # Supported in v5.0+
  mountedVmName: String

  # Required. Supported in v5.0+
  snapshotDate: DateTime

  # Supported in v5.0+
  unmountRequestId: String

  # Required. Supported in v5.0+
  vmId: String!

  # Required. Supported in v5.0+
  vmName: String!

  # Supported in v9.1+
  # The name of the target virtual machine.
  targetVmName: String

  # Supported in v9.1+
  # The number of disks attached to the target virtual machine, if the mount is a disk-level mount.
  attachedDiskCount: Int

  # Supported in v9.1+
  # A boolean field that indicates whether the mount is a disk-level mount.
  isDiskLevelMount: Boolean
  powerStatus: HypervVirtualMachineMountSummaryPowerStatus!
}
enum HypervVirtualMachineMountSummaryPowerStatus {
  HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_MOUNTED
  HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_MOUNTING
  HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_POWERED_OFF
  HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_POWERED_ON
  HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_POWERING_OFF
  HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_POWERING_ON
  HYPERV_VIRTUAL_MACHINE_MOUNT_SUMMARY_POWER_STATUS_UNMOUNTING
}
# Input configuration for downloading a Hyper-V virtual machine snapshot.
input HypervVirtualMachineSnapshotDownloadConfigInput {
  # ID of the SLA Domain to manage retention of the downloaded snapshot.
  slaId: String
}
# Supported in v5.0+
type HypervVirtualMachineSummary {
  # Supported in v5.0+
  # Cloud instantiation specification for the selected virtual machine.
  cloudInstantiationSpec: CloudInstantiationSpec

  # Required. Supported in v5.0+
  # The ID of the Hyper-V host.
  hostId: String!

  # Required. Supported in v5.0+
  id: String!

  # Required. Supported in v5.0+
  # Brief info of all the objects in the infrastructure path to this VM.
  infraPath: [ManagedHierarchyObjectAncestor!]!

  # Required. Supported in v5.0+
  isRelic: Boolean!

  # Required. Supported in v5.0+
  name: String!

  # Supported in v5.3+
  # Describes any pending SLA Domain assignment on this object.
  pendingSlaDomain: ManagedObjectPendingSlaInfo

  # Supported in v6.0+
  # Indicates if the Hyper-V virtual machine is configured to perform a full snapshot for the next backup.
  forceFull: Boolean

  # Supported in v9.0+
  # The status of the Rubrik Backup Service agent for virtual machines.
  agentStatus: CdmAgentStatus
  snappable: CdmWorkload
}
# Supported in v5.0+
type HypervVirtualMachineUpdate {
  # Supported in v5.0+
  # Cloud instantiation specification for the selected virtual machine.
  cloudInstantiationSpec: CloudInstantiationSpec

  # Supported in v5.0+
  # v5.0-v5.1: Assign this VM to the given SLA domain.
  # v5.2+: Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.2+
  # A comma-separated list of Hyper-V virtual disk IDs that are excluded from backup.
  virtualDiskIdsExcludedFromSnapshot: [String!]!
}
# Supported in v5.0+
input HypervVirtualMachineUpdateInput {
  # Supported in v5.0+
  # Cloud instantiation specification for the selected virtual machine.
  cloudInstantiationSpec: CloudInstantiationSpecInput

  # Assign this virtual machine to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.2+
  # A comma-separated list of Hyper-V virtual disk IDs that are excluded from backup.
  virtualDiskIdsExcludedFromSnapshot: [String!] = []
}
# Agent connection status of Hyper-V virtual machine.
enum HypervVmAgentConnectionStatus {
  # Agent is connected.
  CONNECTED

  # Agent is disconnected.
  DISCONNECTED

  # Agent is registered as secondary.
  SECONDARY_CLUSTER

  # Agent connection status is not known.
  UNKNOWN

  # Agent is not registered.
  UNREGISTERED
}
# Agent status of Hyper-V virtual machine.
type HypervVmAgentStatus {
  # Reason for disconnected agent status.
  disconnectReason: String

  # Connection status of the agent.
  connectionStatus: HypervVmAgentConnectionStatus!
}
# The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.
scalar ID
# IBM COS type location specific details.
input IbmCosDetails {
  # Provisioning code.
  provisioningCode: String = ""

  # IBM deployment type.
  deploymentType: IbmDeploymentType = IBM_DEPLOYMENT_TYPE_UNSPECIFIED
}
# IBM COS details for target.
type IbmCosDetailsType {
  # Provisioning code.
  provisioningCode: String!

  # IBM deployment type.
  deploymentType: IbmDeploymentType!
}
# IBM deployment type.
enum IbmDeploymentType {
  # Cloud deployment.
  CLOUD

  # Container deployment.
  CONTAINER

  # Type of deployment is unknown.
  IBM_DEPLOYMENT_TYPE_UNSPECIFIED

  # Vault deployment.
  VAULT
}
# Identity Provider is an entity responsible for authenticating a user account.
type IdentityProvider {
  # Name of the Identity provider.
  name: String!

  # URL of single sign-on endpoint.
  signInUrl: String!

  # EntityId of the Identity provider.
  entityId: String!

  # URL of service provider initiated single sign-on.
  spInitiatedSignInUrl: String!

  # URL of service provider initiated single sign-on for the purpose of testing a configured identity provider.
  spInitiatedTestUrl: String!

  # URL of the single sign-out endpoint.
  signOutUrl: String!

  # ID of the organization that owns the identity provider.
  ownerOrgId: String!

  # Metadata of the identity provider in JSON format.
  metadataJson: String!

  # Expiration date of the identity providers metadata.
  expirationDate: DateTime
}
# Supported in v6.0+
input InPlaceRecoveryJobConfigForBatchInput {
  # Supported in v6.0+
  # Runs in-place recovery with the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
  snapshotAfterDate: DateTime

  # Supported in v6.0+
  # Runs in-plance recovery with the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
  snapshotBeforeDate: DateTime

  # Supported in v6.0+
  # The ID of the snapshot to use for in-place recovery. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
  snapshotId: String

  # Required. Supported in v6.0+
  # Configuration for in-place recovery.
  config: InPlaceRecoveryJobConfigV2Input!

  # Required. Supported in v6.0+
  # ID of the virtual machine to be recovered.
  vmId: String!
}
# Supported in v5.3+
input InPlaceRecoveryJobConfigV2Input {
  # Supported in v5.3+
  # Indicates whether to keeep the vSphere snapshot on the vCenter Server after the in-place recovery or not. Use `true` to keep the snapshot after in-place recovery. Use `false` to delete the snapshot after in-place recovery. The default is `false`.
  shouldKeepVsphereSnapshotAfterRecovery: Boolean
  requiredRecoveryParameters: RequiredRecoveryParametersInput
}
# Indicator of Compromise.
type IndicatorOfCompromise {
  # IOC kind.
  iocKind: IndicatorOfCompromiseKind!

  # IOC value as a string.
  iocValue: String!
}
# The data which represents indicator of compromise: a file path/pattern, hash, or YARA rule.
input IndicatorOfCompromiseInput {
  # IOC kind.
  iocKind: IndicatorOfCompromiseKind!

  # IOC value as a string.
  iocValue: String!
}
# Supported Indicators Of Compromise are Yara, File Hash, and File Pattern.
enum IndicatorOfCompromiseKind {
  # Matching file patterns.
  IOC_FILE_PATTERN

  # Match for files with specified hash.
  IOC_HASH

  # Unused default.
  IOC_UNSPECIFIED

  # Matching Yara rules.
  IOC_YARA
}
type InfrastructureChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [ClusterGroupByEnum!]
}
type InfrastructureTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [ClusterGroupByEnum!]
  selectedColumns: [InfrastructureTableColumnEnum!]!
  sortBy: ClusterSortByEnum

  # Sorts by order.
  sortOrder: SortOrder
}
enum InfrastructureTableColumnEnum {
  ClusterName
  ClusterType
  EncryptionEnabled
  Location
  TotalCapacity
  UsedCapacity
}
enum InodeType {
  DIRECTORY
  FILE
  UNKNOWN_INODE
}
# Represents the in-place restore configurations.
input InplaceRestoreConfig {
  # Name collision resolution rule.
  nameCollisionRule: NameCollisionRule!
}
# Details of the customer-owned O365 app to insert.
input InsertCustomerO365AppInput {
  # Type of app to insert.
  appType: String!

  # ID of the app.
  appClientId: String!

  # Secret for the app.
  appClientSecret: String!

  # ID of the subscription that the app would access.
  subscriptionId: String!

  # Certificate for a SharePoint-typed app.
  base64AppCertificate: String

  # Private key for a SharePoint-typed app.
  base64AppPrivateKey: String
}
input InstallIoFilterInput {
  # Required. 
  fqdnInfo: FullyQualifiedDomainNameInfoInput!

  # Required. ID of the VMware compute cluster.
  id: String!
}
# Represents count of clusters grouped by cluster version.
type InstalledVersionGroupCount {
  # Version name.
  group: String!

  # Count of clusters in each version.
  count: Int!

  # Upgrade recommendation value.
  isUpgradeRecommended: Boolean!
}
# Instance type of the location.
enum InstanceTypeEnum {
  # Azure China instance type.
  AZURE_CHINA

  # Azure Default instance type.
  AZURE_DEFAULT

  # Azure Germany instance type.
  AZURE_GERMANY

  # Azure Government instance type.
  AZURE_GOVERNMENT

  # Instance type of location is unknown.
  UNKNOWN_INSTANCE
}
# Required. Input for recovering a Hyper-V virtual machine.
input InstantRecoverHypervVirtualMachineSnapshotInput {
  # Required. Configuration for the instant recover request.
  config: HypervInstantRecoveryJobConfigInput!

  # Required. ID of Snapshot.
  id: String!
}
input InstantRecoverOracleSnapshotInput {
  # Required. Configuration parameters for a job to instantly recover from an Oracle database snapshot.
  config: RecoverOracleDbConfigInput!

  # Required. ID of the Oracle database.
  id: String!
}
# Supported in v6.0+
input InstantRecoveryJobConfigForBatchInput {
  # Supported in v6.0+
  # Mounts the oldest snapshot taken after the specified date. This parameter is only evaluated when no values are set for snapshotId and snapshotBeforeDate.
  snapshotAfterDate: DateTime

  # Supported in v6.0+
  # Mounts the most recent snapshot taken prior to the specified date. This parameter is only evaluated when no value is set for snapshotId.
  snapshotBeforeDate: DateTime

  # Supported in v6.0+
  # The ID of the snapshot to mount. This parameter is optional if either of the snapshotBeforeDate or snapshotAfterDate parameters is configured.
  snapshotId: String

  # Required. Supported in v6.0+
  # Configuration for snapshot export.
  config: InstantRecoveryJobConfigV2Input!

  # Required. Supported in v6.0+
  # ID of the virtual machine whose snapshot needs to be mounted.
  vmId: String!
}
# Supported in v5.1+
input InstantRecoveryJobConfigV2Input {
  # Supported in v5.1+
  # ID of the ESXi host to use for Instant Recovery.
  hostId: String

  # Supported in v5.1+
  # A Boolean value that determines whether the MOID of the source virtual machine is preserved in a restore operation. When this value is 'true', the MOID of the source is preserved. When this value is 'false', the restored virtual machine is assigned a new MOID.
  preserveMoid: Boolean

  # Supported in v5.1+
  # A Boolean value that determines whether the job recovers the tags assigned to the virtual machine. When this value is 'true', the job recovers the tags. When this value is 'false', the job does not recover the tags.
  shouldRecoverTags: Boolean

  # Supported in v5.1+
  # The preferred VLAN ID used by the VLAN ESXi host to mount the datastore.
  vlan: Int

  # Supported in v6.0+
  # ID of the compute cluster where the new virtual machine will be mounted.
  clusterId: String

  # Supported in v6.0+
  # ID of the resource pool where the new virtual machine will be mounted.
  resourcePoolId: String

  # Supported in v6.0+
  # The network binding for vNIC of the virtual machine.
  vNicBindings: [VmwareVnicBindingInfoV2Input!] = []
  mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
  requiredRecoveryParameters: RequiredRecoveryParametersInput

  # Supported in v9.0+
  # Configuration for datastore migration.
  migrationConfig: RelocateMountConfigV2Input

  # Supported in v9.0+
  # Specifies whether to trigger datastore migration immediately when the Instant Recovery succeeds.
  shouldMigrateImmediately: Boolean
}
# The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
scalar Int
# Holds an integration and its configuration.
type Integration {
  # The integration ID.
  id: Long!

  # The integration name.
  name: String!

  # The integration type.
  integrationType: IntegrationType!

  # The timestamp for when the integration was first created.
  createdAt: DateTime!

  # The timestamp for when the integration was last updated.
  updatedAt: DateTime!

  # The configuration.
  config: IntegrationConfig!
}
# Holds the configuration of a single integration. Note that IntegrationConfig
# can hold multiple configurations at once but only the configuration specified
# with IntegrationType will be considered.
type IntegrationConfig {
  # The Data Loss Prevention configuration.
  dataLossPrevention: DlpConfig
}
# Holds the configuration of a single integration. Note that IntegrationConfig
# can hold multiple configurations at once but only the configuration specified
# with IntegrationType will be considered.
input IntegrationConfigInput {
  # The Data Loss Prevention configuration.
  dataLossPrevention: DlpConfigInput
}
# Specifies the type of an integration. Note that the values are stored in a
# database and therefore cannot be changed.
enum IntegrationType {
  # Represents a security integration that fingerprints files with sensitive
  # data hits to prevent them from being exfiltrated.
  DATA_LOSS_PREVENTION

  # Represents an unspecified integration.
  INTEGRATION_TYPE_UNSPECIFIED
}
# Interface CIDR Info.
type InterfaceCidr {
  interfaceType: InterfaceType!
  cidr: String!
  selected: Boolean!
}
input InterfaceCidrInput {
  interfaceType: InterfaceType = UNKNOWN_TYPE
  cidr: String = ""
  selected: Boolean = false
}
enum InterfaceType {
  BOND0
  BOND1
  CUSTOM
  UNKNOWN_TYPE
}
type InternalBulkUpdateHostResponse {
  items: [HostDetail!]!
}
type InternalChangeVfdOnHostResponse {
  items: [HostVfdInstallResponse!]!
}
enum InternalDeleteHypervVirtualMachineSnapshotRequestLocation {
  INTERNAL_DELETE_HYPERV_VIRTUAL_MACHINE_SNAPSHOT_REQUEST_LOCATION_ALL
  INTERNAL_DELETE_HYPERV_VIRTUAL_MACHINE_SNAPSHOT_REQUEST_LOCATION_LOCAL
}
enum InternalDeleteNutanixSnapshotRequestLocation {
  INTERNAL_DELETE_NUTANIX_SNAPSHOT_REQUEST_LOCATION_ALL
  INTERNAL_DELETE_NUTANIX_SNAPSHOT_REQUEST_LOCATION_LOCAL
}
type InternalGetClusterIpsResponse {
  items: [String!]!
}
type InternalGetDefaultGatewayResponse {
  items: [RouteConfig!]!
}
enum InternalQueryHypervHostRequestSlaAssignment {
  INTERNAL_QUERY_HYPERV_HOST_REQUEST_SLA_ASSIGNMENT_DERIVED
  INTERNAL_QUERY_HYPERV_HOST_REQUEST_SLA_ASSIGNMENT_DIRECT
  INTERNAL_QUERY_HYPERV_HOST_REQUEST_SLA_ASSIGNMENT_UNASSIGNED
}
enum InternalQueryHypervHostRequestSortBy {
  INTERNAL_QUERY_HYPERV_HOST_REQUEST_SORT_BY_EFFECTIVE_SLA_DOMAIN_NAME
  INTERNAL_QUERY_HYPERV_HOST_REQUEST_SORT_BY_NAME
}
enum InternalQueryHypervHostRequestSortOrder {
  INTERNAL_QUERY_HYPERV_HOST_REQUEST_SORT_ORDER_ASC
  INTERNAL_QUERY_HYPERV_HOST_REQUEST_SORT_ORDER_DESC
}
# Resource Id Type for identifying network throttle operations.
enum InternalQueryNetworkThrottleRequestResourceId {
  # Archival Resource Id Enum.
  INTERNAL_QUERY_NETWORK_THROTTLE_REQUEST_RESOURCE_ID_ARCHIVAL_EGRESS

  # Replication Resource Id Enum.
  INTERNAL_QUERY_NETWORK_THROTTLE_REQUEST_RESOURCE_ID_REPLICATION_EGRESS
}
# Replication Incoming Bandwidth Response.
type InternalReplicationBandwidthIncomingResponse {
  # TimeSeries, in bytes per second.
  items: [TimeStat!]!
}
# Replication Outgoing Bandwidth Response.
type InternalReplicationBandwidthOutgoingResponse {
  # TimeSeries, in bytes per second.
  items: [TimeStat!]!
}
# Inventory Card options that the user can select as a workload.
enum InventoryCard {
  # Inventory Card is AHV VMS.
  AHV_VMS_CDM

  # Inventory card is Atlassian.
  ATLASSIAN

  # Inventory Card is AWS EC2.
  AWS_EC2

  # Inventory Card is AWS RDS.
  AWS_RDS

  # Inventory Card is AWS S3.
  AWS_S3

  # Inventory Card is Azure Virtual Machines.
  AZURE

  # Inventory card is Azure Active Directory.
  AZURE_AD

  # Inventory Card is Azure Blob Storage.
  AZURE_BLOB_STORAGE

  # Inventory Card is Azure SQL Databases.
  AZURE_SQL_DB

  # Inventory Card is Azure SQL Managed Instances.
  AZURE_SQL_MI

  # Inventory Card is Cassandra.
  CASSANDRA

  # Inventory Card is DB2.
  DB2

  # Inventory Card is Exchange.
  EXCHANGE

  # Inventory Card is GCP.
  GCP

  # Inventory Card is HyperV.
  HYPERV

  # Inventory Card is HyperV CDM.
  HYPERV_VMS_CDM

  # Inventory Card is Kubernetes.
  KUBERNETES

  # Inventory Card is Kubernetes V2.
  KUBERNETES_V2

  # Inventory Card is Linux Filesets.
  LINUX_UNIX_FILESETS

  # Inventory Card is Linux Hosts.
  LINUX_UNIX_HOSTS_CDM

  # Inventory Card is Managed Volumes.
  MANAGED_VOLUMES

  # Inventory Card is Managed Volumes CDM.
  MANAGED_VOLUMES_CDM

  # Inventory Card is Microsoft 365.
  MICROSOFT_365

  # Inventory Card is Mongo.
  MONGO

  # Inventory Card is MongoDB.
  MONGODB

  # Inventory Card is MSSQL.
  MSSQL

  # Inventory Card is NAS Shares.
  NAS_SHARES

  # Inventory Card is NAS Shares CDM.
  NAS_SHARES_CDM

  # Inventory Card is Nutanix AHV.
  NUTANIX_AHV

  # Inventory card is on-prem Active Directory.
  ON_PREM_AD

  # Inventory Card is Oracle.
  ORACLE

  # Inventory Card is Oracle DBs.
  ORACLE_DBS_CDM

  # Inventory Card is Sap Hana.
  SAP_HANA

  # Inventory Card is Snapmirror.
  SNAPMIRROR

  # Inventory Card is SQL Server DBs.
  SQL_SERVER_DBS_CDM

  # Inventory Card is vCD vApps.
  VCD_VAPPS

  # Inventory Card is vCD vApps CDM.
  VCD_VAPPS_CDM

  # Inventory Card is vSphere.
  VSPHERE

  # Inventory Card is vSphere VMs.
  VSPHERE_VMS_CDM

  # Inventory Card is Windows Filesets.
  WINDOWS_FILESETS

  # Inventory Card is Windows Hosts.
  WINDOWS_HOSTS_CDM

  # Inventory Card is Windows Volume Group.
  WINDOWS_VOLUME_GROUP
}
type InventoryRoot {
  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HierarchyObjectConnection!
}
type InventorySubHierarchyRoot {
  rootEnum: InventorySubHierarchyRootEnum!

  # List of children.
  childConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HierarchyObjectConnection!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): HierarchyObjectConnection!

  # List of top-level descendants (with respect to RBAC).
  topLevelDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): HierarchyObjectConnection!
}
# Inventory workloads that are supported on Rubrik.
enum InventorySubHierarchyRootEnum {
  # Active Directory root.
  ACTIVE_DIRECTORY_ROOT
  APPFLOWS_ROOT

  # Atlassian root.
  ATLASSIAN_ROOT
  AWSNATIVE_ROOT
  AZURENATIVE_ROOT

  # Azure AD root.
  AZURE_AD_ROOT

  # Cassandra Root.
  CASSANDRA_ROOT

  # Cloud Direct NAS export root.
  CLOUD_DIRECT_NAS_EXPORT_ROOT
  CLOUD_NATIVE_TAG_RULE_ROOT
  DB2_ROOT

  # Root of exchange hierarchy.
  EXCHANGE_ROOT
  FELDSPAR_ROOT
  GCPNATIVE_ROOT
  HYPERV_ROOT

  # K8S root.
  K8S_ROOT
  KUPR_ROOT
  LINUX_HOST_ROOT
  MANAGED_VOLUME_ROOT

  # MongoDB Root.
  MONGODB_ROOT

  # MongoDB Root.
  MONGO_ROOT
  MSSQL_ROOT
  NAS_HOST_ROOT
  NAS_ROOT
  NUTANIX_ROOT
  O365_ROOT
  ORACLE_ROOT
  PHYSICAL_HOST_ROOT
  SAP_HANA_ROOT
  VCD_ROOT
  VSPHERE_ROOT
  WINDOWS_HOST_ROOT
}
# Link to download investigation results as CSV.
type InvestigationCsvDownloadLinkReply {
  # Link for the CSV file which can be downloaded.
  downloadLink: String!
}
# Specifies the input required for inviting new SSO groups to the current organization.
input InviteSsoGroupInput {
  # SSO group name.
  groupName: String!

  # List of role IDs.
  roleIds: [String!]!
}
# Supported in v5.1+
# Status of Rubrik Io Filter on Cluster.
enum IoFilterStatus {
  IO_FILTER_STATUS_INCONSISTENT
  IO_FILTER_STATUS_INSTALLED
  IO_FILTER_STATUS_INSTALL_ERROR
  IO_FILTER_STATUS_INSTALL_IN_PROGRESS
  IO_FILTER_STATUS_OUT_OF_DATE
  IO_FILTER_STATUS_UNAVAILABLE
  IO_FILTER_STATUS_UNINSTALLED
  IO_FILTER_STATUS_UNINSTALL_ERROR
  IO_FILTER_STATUS_UNINSTALL_IN_PROGRESS
  IO_FILTER_STATUS_UNKNOWN
  IO_FILTER_STATUS_UNSUPPORTED
  IO_FILTER_STATUS_UNSUPPORTED_BY_RUBRIK
  IO_FILTER_STATUS_UNSUPPORTED_BY_VMWARE
  IO_FILTER_STATUS_UPGRADE_ERROR
  IO_FILTER_STATUS_UPGRADE_IN_PROGRESS
}
# Details of IP configuration.
input IpConfigInput {
  # VLAN ID.
  vlan: Int

  # IP address.
  address: String!

  # Gateway IP address.
  gateway: String!

  # Subnet mask.
  netmask: String!
}
# IP allow list of Rubrik cluster mappings.
input IpMappingInput {
  # Rubrik cluster UUID.
  clusterUuid: UUID!

  # IP addresses on the Rubrik cluster allow list.
  ips: [String!]!
}
# IP Rules for Azure storage account.
type IpRule {
  # IP for which the network access should be allowed.
  ip: String!
}
# Supported in v5.0+
type IpmiAccess {
  # Required. Supported in v5.0+
  https: Boolean!

  # Required. Supported in v5.0+
  iKvm: Boolean!
}
# Supported in v5.0+
input IpmiAccessUpdateInput {
  # Supported in v5.0+
  https: Boolean

  # Supported in v5.0+
  iKvm: Boolean
}
# Supported in v5.0+
input IpmiUpdateInput {
  # Supported in v5.0+
  access: IpmiAccessUpdateInput

  # Supported in v5.0+
  # IPMI password, password should be 5-20 characters.
  password: String
}
# Determines if the rule name is unique or not.
type IsCloudNativeTagRuleNameUniqueReply {
  # Indicates whether the rule name is unique or not.
  isUnique: Boolean!
}
# Specifies whether the volume snapshot is restorable.
type IsVolumeSnapshotRestorableReply {
  # Specifies whether the EBS volume snapshot is restorable. The snapshot would be restorable only if the EBS volume exists in the AWS account, and is attached to exactly one EC2 instance.
  isRestorable: Boolean!
}
type Issue {
  id: String!
  latestPolicyObj: PolicyObj!
  fileResult: FileResult!
  violations: Int!
  resolvedTime: Long!
  openTime: Long!
  paginationId: String!
  events: [IssueEvent!]!
  policies: [ClassificationPolicySummary!]!
}
# Paginated list of Issue objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type IssueConnection {
  # List of Issue objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [IssueEdge!]!

  # List of Issue objects.
  nodes: [Issue!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Issue objects matching the request arguments.
  count: Int!
}
# Wrapper around the Issue object. This wrapper is used for pagination.
type IssueEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Issue object wrapped by this edge.
  node: Issue!
}
type IssueEvent {
  timestamp: Long!
  type: IssueEventType!
  violationsDelta: Int!
  snapshotFid: String!
  violations: Int!
}
enum IssueEventType {
  ADD_WHITELIST_EVENT
  CREATE_EVENT
  DELETE_POLICY_EVENT
  NO_ISSUES_SNAPSHOT_EVENT
  REMOVE_POLICY_OBJ_EVENT
  REMOVE_WHITELIST_EVENT
  SNAPSHOT_EVENT
}
enum IssueStatus {
  OPEN
  RESOLVED
}
type JobMetadata {
  id: Long!
  createdAt: DateTime
  updatedAt: DateTime
  currentInstance: Int!
  state: String!
  progress: String!
  progressedAt: DateTime
  retryAttempts: Int!
  startTime: DateTime
  owner: String!
  info: String!
  lastOwner: String!
  lastSuccess: DateTime
  lastFailure: DateTime
  startedAt: DateTime
  jobType: String!
  numSuccessfulRuns: Int!
  numScheduledRuns: Int!
  lastSkipped: DateTime
  logLevel: LogLevel!
}
type JobReply {
  metadata: JobMetadata
  customerAccount: String!
  clusterUuid: String!
  clusterName: String!
  version: String!
}
type JobsReply {
  jobs: [JobReply!]!
}
input JoinSmbDomainInput {
  # Required. Configuration for joining Active Directory.
  config: SmbDomainJoinRequestInput!

  # Required. SMB domain name.
  domainName: String!
}
# Basic information about Rubrik Kubernetes Agent manifest.
type K8sAgentManifestInfo {
  # UUID of the kubernetes Cluster.
  clusterId: UUID!

  # SignedURL containing the created manifest.
  signedUrl: String!
}
# Response of the query that retrieves the Kubernetes app manifest.
type K8sAppManifest {
  # Kubernetes Rubrik Backup Service version.
  version: String!

  # Specifies the success or failure status.
  isSuccessful: Boolean!

  # Manifest information to apply the new version.
  toApply: AppManifestInfo

  # Manifest information to delete the old version.
  toDelete: AppManifestInfo
}
# Kubernetes cluster.
type K8sCluster implements HierarchyObject , PolarisHierarchyObject {
  # Connection status of the Kubernetes cluster.
  status: K8sClusterStatus!

  # Time of the last successful refresh task on the Kubernetes cluster.
  lastRefreshTime: DateTime

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): K8sClusterDescendantConnection!

  # Namespaces belonging to the Kubernetes cluster.
  k8sDescendantNamespaces(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): K8sNamespaceConnection!

  # Information about the Kubernetes cluster.
  clusterInfo: K8sClusterInfo!

  # List of IPs for the Kubernetes cluster.
  clusterIp: [String!]!

  # Deprecated. Use clusterPortRanges instead.
  rbsPortRanges: [K8sRbsInfo!]!

  # Ranges for ports used for backup and recovery.
  clusterPortRanges: [K8sClusterPortsInfo!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of K8sCluster objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type K8sClusterConnection {
  # List of K8sCluster objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [K8sClusterEdge!]!

  # List of K8sCluster objects.
  nodes: [K8sCluster!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of K8sCluster objects matching the request arguments.
  count: Int!
}
interface K8sClusterDescendant {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of K8sClusterDescendant objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type K8sClusterDescendantConnection {
  # List of K8sClusterDescendant objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [K8sClusterDescendantEdge!]!

  # List of K8sClusterDescendant objects.
  nodes: [K8sClusterDescendant!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of K8sClusterDescendant objects matching the request arguments.
  count: Int!
}
# Wrapper around the K8sClusterDescendant object. This wrapper is used for pagination.
type K8sClusterDescendantEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual K8sClusterDescendant object wrapped by this edge.
  node: K8sClusterDescendant!
}
# Wrapper around the K8sCluster object. This wrapper is used for pagination.
type K8sClusterEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual K8sCluster object wrapped by this edge.
  node: K8sCluster!
}
# Information of the Kubernetes cluster.
type K8sClusterInfo {
  # UUID of the Kubernetes cluster.
  kuprClusterUuid: UUID!

  # Port on the Kubernetes cluster used for communication with RSC.
  port: Int!

  # Kubernetes version.
  k8sVersion: String

  # Type of the Kubernetes cluster.
  type: K8sClusterType!

  # Rubrik CDM cluster associated with the the Kubernetes cluster.
  associatedCdm: Cluster
}
# Represents a range of ports for a Kubernetes cluster.
type K8sClusterPortsInfo {
  # UUID of the Kubernetes cluster.
  kuprClusterUuid: UUID!

  # The lower bound (inclusive) of the port range.
  minPort: Int!

  # The upper bound (inclusive) of the port range.
  maxPort: Int!

  # The type of the port range. Allowed values: 'BACKUP' and 'USER_DRIVEN'. BACKUP type of ports are used for backup and USER_DRIVEN type of ports are used for recovery.
  portRangeType: KuprClusterPortsType!
}
# Type of the Kubernetes cluster.
enum K8sClusterProtoType {
  # The cluster is hosted on AWS.
  AWS

  # The cluster is hosted on Azure.
  AZURE

  # The cluster is hosted on GCP.
  GCP

  # The cluster is hosted on private cloud.
  ON_PREM

  # Unknown cluster host.
  UNKNOWN
}
# Connection status of the Kubernetes cluster.
enum K8sClusterStatus {
  # The cluster is connected.
  STATUS_CONNECTED

  # The cluster is disconnected.
  STATUS_DISCONNECTED

  # The cluster connection has encountered errors.
  STATUS_ERROR

  # The cluster has not established connection with RSC yet.
  STATUS_INIT

  # Unknown connection status.
  STATUS_UNKNOWN
}
# Type of the Kubernetes cluster.
enum K8sClusterType {
  # The cluster is hosted on AWS.
  AWS

  # The cluster is hosted on Azure.
  AZURE

  # The cluster is hosted on GCP.
  GCP

  # The cluster is hosted on private cloud.
  ON_PREM
}
# Content type of the Kubernetes manifest information.
enum K8sContentType {
  # Manifest contains a string in the YAML format.
  STRING

  # Manifest contains a signed URL to download the YAML file.
  URL
}
# Kubernetes namespace.
type K8sNamespace implements HierarchyObject , HierarchySnappable , PolarisHierarchyObject , PolarisHierarchySnappable , K8sClusterDescendant {
  # Kubernetes cluster ID.
  k8sClusterId: String!

  # Name of the namespace.
  namespaceName: String!

  # Specifies whether the namespace contains Kubernetes cluster-scoped resources.
  clusterScoped: Boolean!

  # API version of the namespace.
  apiVersion: String!

  # Version of the namespace on the Kubernetes cluster.
  resourceVersion: String!

  # Specifies whether the namespace is a relic.
  isRelic: Boolean!

  # Number of workloads.
  numWorkloads: Int!

  # Number of persistent volume claims.
  numPvcs: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Object ID.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of K8sNamespace objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type K8sNamespaceConnection {
  # List of K8sNamespace objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [K8sNamespaceEdge!]!

  # List of K8sNamespace objects.
  nodes: [K8sNamespace!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of K8sNamespace objects matching the request arguments.
  count: Int!

  # The aggregate persistent volume claims (PVC) across namespaces based on applied filters and pagination arguments.
  aggregateK8sPvcs: Int!

  # The aggregate workloads across namespaces based on applied filters and pagination arguments.
  aggregateK8sWorkloads: Int!
}
# Wrapper around the K8sNamespace object. This wrapper is used for pagination.
type K8sNamespaceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual K8sNamespace object wrapped by this edge.
  node: K8sNamespace!
}
# Configuration of the Kubernetes namespaces to be backed-up.
input K8sNamespaceSnapshot {
  # The ID of the Kubernetes namespace managed object to snapshot.
  namespaceId: UUID!

  # The SLA ID of the on demand snapshot request.
  onDemandSnapshotSlaId: String
}
# Deprecated. Use KuprClusterPortsInfoType instead.
type K8sRbsInfo {
  # UUID of the Kubernetes cluster.
  kuprClusterUuid: UUID!

  # The lower bound (inclusive) of a particular the port range.
  minPort: Int!

  # The upper bound (inclusive) of a particular the port range.
  maxPort: Int!
}
# Response of the query that retrieves the Kubernetes snapshot information.
type K8sSnapshotInfo {
  # Kubernetes namespace name.
  namespace: String!

  # Expiration time of the snapshot.
  expirationTime: DateTime

  # Specifies whether the snapshot is archived.
  isArchived: Boolean!

  # List of information about PVCs in the namespace.
  pvcList: [PvcInformation!]!

  # Creation time of the snapshot.
  snapshotTime: DateTime!
}
# GCP KMS crypto key.
input KmsCryptoKey {
  # GCP project native ID.
  projectNativeId: String = ""

  # KMS crypto key location.
  location: String = ""

  # KMS crypto key ring.
  keyRing: String = ""

  # KMS crypto key.
  key: String = ""
}
# A Key management system (KMS) key in AWS realm.
type KmsEncryptionKey {
  # ID of KMS key.
  id: String!

  # Amazon Resource Name (ARN) of the KMS key.
  arn: String!

  # Aliases of KMS key.
  aliases: [String!]!
}
# Parameters to build KMS.
type KmsSpec {
  # The cloud type. The allowed values are PUBLIC and USGOV.
  cloudType: O365AzureCloudType!

  # The tenant hosting the Azure Key Vault.
  tenantId: String!

  # The complete ID of the Azure Key Vault.
  kmsId: String!

  # The ID of the client app.
  appId: String!

  # The secret of the client app. Deprecated and will be removed soon.
  appSecret: String!

  # The key encryption key (KeK) name.
  keyName: String!

  # The key encryption key (KeK) name for Colossus.
  kekNameColossus: String!
}
# Azure KMS configuration, excluding the app secret.
input KmsSpecInput {
  # The cloud type. The allowed values are PUBLIC and USGOV.
  cloudType: O365AzureCloudType = PUBLIC

  # The tenant hosting the Azure Key Vault.
  tenantId: String = ""

  # The complete ID of the Azure Key Vault.
  kmsId: String = ""

  # The ID of the client app.
  appId: String = ""

  # The secret of the client app. Deprecated and will be removed soon.
  appSecret: String = ""

  # The key encryption key (KeK) name.
  keyName: String = ""

  # The key encryption key (KeK) name for Colossus.
  kekNameColossus: String = ""
}
# A knowledge base article.
type KnowledgeBaseArticle {
  # ID of the knowledge base article.
  id: String!

  # Article number of the knowledge base article.
  articleNumber: String!

  # Title of the knowledge base article.
  title: String!

  # Summary of the knowledge base article.
  description: String!

  # A flattened list of nodes representing the cause section of the knowledge base article.
  cause: [ContentNode!]!

  # A flattened list of nodes representing the environment section of the knowledge base article.
  environment: [ContentNode!]!

  # A flattened list of nodes representing the notes section of the knowledge base article.
  notes: [ContentNode!]!

  # A flattened list of nodes representing the resolution section of the knowledge base article.
  resolution: [ContentNode!]!

  # A flattened list of nodes representing the summary section of the knowledge base article.
  summary: [ContentNode!]!
}
# The type of the port range.
enum KuprClusterPortsType {
  # BACKUP type of ports.
  BACKUP

  # USER_DRIVEN type of ports.
  USER_DRIVEN
}
type Label {
  key: String!
  value: String!
}
# Label filter parameters for GCP objects.
input LabelFilterParams {
  # Type of the label filter.
  filterType: GcpNativeLabelFilterType!

  # Key of the label filter.
  labelKey: String!

  # Value of the label filter.
  labelValue: String!
}
# A single label Rule.
type LabelRule {
  # ID of the label rule.
  id: String!

  # Name of the label rule.
  name: String!

  # Label key and value.
  label: CloudNativeLabel

  # Effective SLA Domain defined in the label rule.
  effectiveSla: TagRuleEffectiveSla

  # Object type for which the label rule is applicable.
  objectType: ManagedObjectType!

  # Specifies whether the user has permissions to modify the label rule.
  hasPermissionToModify: Boolean!

  # List of cloud-native accounts.
  cloudNativeAccounts: [CloudNativeAccountIdWithName!]!

  # Does this tag rule apply to all cloud accounts.
  applyToAllCloudAccounts: Boolean!
}
# Label query over a set of K8's resources.
input LabelSelector {
  # List of label selector requirements. The requirements are ANDed.
  matchExpressions: [LabelSelectorRequirement!] = []
}
# Selector that contains values, a key, and an operator that relates the key and values.
input LabelSelectorRequirement {
  # Label key that the selector applies to.
  key: String = ""

  # Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
  operator: String = ""

  # Array of string values.
  values: [String!] = []
}
# DataType represents label key-value pair.
input LabelType {
  # Key of the label.
  labelKey: String!

  # Value of the label.
  labelValue: String!

  # Specifies whether to match all label values or not.
  matchAllValues: Boolean!
}
# History of Ransomware Investigation and Sensitive Data Discovery features.
type LambdaFeatureHistory {
  # True if Ransomware Investigation was ever enabled.
  wasRansomwareInvestigationEverEnabled: Boolean!

  # True if Sensitive Data Discovery was ever enabled.
  wasSensitiveDataDiscoveryEverEnabled: Boolean!
}
# Parameters to use lambda filters in query.
input LambdaPathFilters {
  # Determines if documents are returned with absolute paths the from root in reply.
  enableAbsolutePaths: Boolean = false

  # Determines if all folders in passed snapshot are queried to build absolute paths from root and used in conjunction with enableAbsolutePaths to return absolute paths from root in QueryV2Reply.
  enableAbsolutePathCachePreload: Boolean = false

  # Retrieves all the folders whose ID's are provided in the list used for generating absolute paths for passed items primarily.
  parentFolderIdBatch: [String!] = []

  # The Folder ID under which recursive search will be performed.
  searchRecurseFolderId: String = ""
}
type LambdaSettings {
  anomalyThreshold: Float
  ransomwareThreshold: Float
  isAnomalyAlertEnabled: Boolean
}
# Latest user note information.
type LatestUserNote {
  # User note attachment time.
  time: DateTime!

  # Name of the user who attached the note.
  userName: String

  # Object ID where note is attached.
  objectId: String!

  # User note text.
  userNote: String
}
# Field Enum for Authorized LDAP Principal list.
enum LdapAuthorizedPrincipalFieldEnum {
  # Authentication domain of principal.
  DirectoryName

  # Email of principal.
  Email

  # Last login time of principal.
  LAST_LOGIN

  # Name of principal.
  Name
}
# LDAP integration information.
type LdapIntegration {
  # ID for your LDAP integration.
  id: String!

  # Name for your LDAP integration.
  name: String!

  # BindUserName for your LDAP integration.
  bindUserName: String!

  # BaseDn for your LDAP integration.
  baseDn: String!

  # TrustedCerts for your LDAP integration.
  trustedCerts: String

  # Dynamic DNS name for your LDAP integration.
  dynamicDnsName: String!

  # LdapServers for your LDAP integration.
  ldapServers: [LdapServer!]!

  # User search filter for your LDAP integration.
  userSearchFilter: String

  # User name attribute for your LDAP integration.
  userNameAttr: String

  # Group membership attribute for your LDAP integration.
  groupMembershipAttr: String

  # Group search filter for your LDAP integration.
  groupSearchFilter: String

  # Group member attribute for your LDAP integration.
  groupMemberAttr: String

  # Whether TOTP as 2FA is enforced for the LDAP integration.
  isTotpEnforced: Boolean!
}
# Paginated list of LdapIntegration objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type LdapIntegrationConnection {
  # List of LdapIntegration objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [LdapIntegrationEdge!]!

  # List of LdapIntegration objects.
  nodes: [LdapIntegration!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of LdapIntegration objects matching the request arguments.
  count: Int!
}
# Wrapper around the LdapIntegration object. This wrapper is used for pagination.
type LdapIntegrationEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual LdapIntegration object wrapped by this edge.
  node: LdapIntegration!
}
enum LdapIntegrationFieldEnum {
  Name
}
enum LdapPrincipalFieldEnum {
  Name
}
# LDAP server information.
type LdapServer {
  # Hostname for the LDAP server.
  hostname: String!

  # Port used by the LDAP server.
  port: Int!

  # Whether the LDAP server uses TLS.
  useTls: Boolean!
}
# LDAP Server.
input LdapServerInput {
  # Hostname for the LDAP server.
  hostname: String = ""

  # Port used by the LDAP server.
  port: Int = 0

  # Whether the LDAP server uses TLS.
  useTls: Boolean = false
}
# TOTP status for a LDAP principal.
type LdapTotpStatus {
  # TOTP as 2FA is enforced.
  isEnforced: Boolean!

  # TOTP as 2FA is enabled.
  isEnabled: Boolean!

  # Whether TOTP is supported for the LDAP principal.
  isSupported: Boolean!
}
# Supported in v5.2+
input LegalHoldDownloadConfigInput {
  # Required. Supported in v5.2+
  # v5.2: Specifies whether the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that is used for integrity verification by external bodies.
  # v5.3+: Specifies if the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that external bodies can use for integrity verification.
  isLegalHoldDownload: Boolean!
}
# Contains information about the legal hold placed on the Snapshot.
type LegalHoldInfo {
  # Boolean which describes whether snapshot has to be held in place.
  shouldHoldInPlace: Boolean!
}
# Legal Hold query filter.
input LegalHoldQueryFilter {
  # Filters for legal hold query.
  filterField: LegalHoldQueryFilterField = UNKNOWN

  # Filter snapshots before the specific time.
  beforeTime: DateTime

  # Filter snapshots after the specific time.
  afterTime: DateTime

  # Workload name.
  snappableName: String = ""

  # Workload types.
  snappableTypes: [ManagedObjectType!] = []

  # Snapshot types.
  snapshotTypes: [SnapshotTypeEnum!] = []
  snapshotCustomizations: [SnapshotCustomization!] = []
}
# Legal hold query filter field.
enum LegalHoldQueryFilterField {
  # Legal hold time.
  LEGAL_HOLD_TIME

  # Workload name.
  SNAPPABLE_NAME

  # Workload type.
  SNAPPABLE_TYPE
  SNAPSHOT_CUSTOMIZATION

  # Time the snapshot was taken.
  SNAPSHOT_TAKEN_TIME

  # Snapshot type.
  SNAPSHOT_TYPE

  # Unknown filter field.
  UNKNOWN
}
# Legal hold details of the workload.
type LegalHoldSnappableDetail {
  # Workload name.
  name: String!

  # ID.
  id: String!

  # Workload type.
  snappableType: ManagedObjectType!

  # Snapshot details.
  snapshotDetails: [LegalHoldSnapshotDetail!]!

  # Number of snapshots on legal hold.
  snapshotCount: Int!

  # Physical path to this workload.
  physicalLocation: [LocationPathPoint!]!
}
# Paginated list of LegalHoldSnappableDetail objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type LegalHoldSnappableDetailConnection {
  # List of LegalHoldSnappableDetail objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [LegalHoldSnappableDetailEdge!]!

  # List of LegalHoldSnappableDetail objects.
  nodes: [LegalHoldSnappableDetail!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of LegalHoldSnappableDetail objects matching the request arguments.
  count: Int!
}
# Wrapper around the LegalHoldSnappableDetail object. This wrapper is used for pagination.
type LegalHoldSnappableDetailEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual LegalHoldSnappableDetail object wrapped by this edge.
  node: LegalHoldSnappableDetail!
}
# LegalHoldSnapshotDetails.
type LegalHoldSnapshotDetail {
  # ID.
  id: String!

  # Snapshot type.
  type: SnapshotTypeEnum!

  # Snapshot time.
  snapshotTime: DateTime

  # Legal hold time.
  legalHoldTime: DateTime
  customizations: [SnapshotCustomization!]!
}
# Paginated list of LegalHoldSnapshotDetail objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type LegalHoldSnapshotDetailConnection {
  # List of LegalHoldSnapshotDetail objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [LegalHoldSnapshotDetailEdge!]!

  # List of LegalHoldSnapshotDetail objects.
  nodes: [LegalHoldSnapshotDetail!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of LegalHoldSnapshotDetail objects matching the request arguments.
  count: Int!
}
# Wrapper around the LegalHoldSnapshotDetail object. This wrapper is used for pagination.
type LegalHoldSnapshotDetailEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual LegalHoldSnapshotDetail object wrapped by this edge.
  node: LegalHoldSnapshotDetail!
}
# Input to query workloads with legal hold snapshots.
input LegalHoldSnapshotsForSnappableInput {
  # Rubrik cluster UUID of the workload.
  clusterUuid: String!

  # Workload ID.
  snappableId: String!

  # Filter Parameters list.
  filterParams: [LegalHoldQueryFilter!]!

  # Sorting Parameters.
  sortParam: LegalHoldSortParam
}
# Legal hold sorting parameters.
input LegalHoldSortParam {
  # Sort type.
  type: LegalHoldSortType = UNKNOWN

  # Sorts by order.
  sortOrder: SortOrder = ASC
}
# Legal hold sort type Enum.
enum LegalHoldSortType {
  # Legal hold snapshot count.
  LEGAL_HOLD_SNAPSHOT_COUNT

  # Legal hold time.
  LEGAL_HOLD_TIME

  # Workload name.
  SNAPPABLE_NAME

  # Workload type.
  SNAPPABLE_TYPE

  # Snapshot time.
  SNAPSHOT_TIME

  # Snapshot type.
  SNAPSHOT_TYPE

  # Unknown type.
  UNKNOWN
}
# Information about a license.
type License {
  # The product for which this license can be used.
  product: Product!

  # The quantity of licenses.
  quantity: Float!

  # The start date of the support term.
  termStartDate: DateTime

  # The end date of the support term.
  termEndDate: DateTime
}
# Represents a single licensed product.
type LicensedClusterProduct {
  # The name of the product.
  product: Product!

  # The total purchased capacity of this product, in bytes.
  purchasedCapacityBytes: Float!

  # The total registered capacity of this product, in bytes.
  registeredCapacityBytes: Float!

  # The amount of bytes under the license with the nearest expiry date.
  nextExpiringBytes: Float!

  # The next expiry date of a license under this product.
  nextExpiringTime: DateTime

  # The product types under this product that the customer has.
  productTypes: [String!]!

  # The number of Rubrik clusters included in this product.
  numClusters: Int!

  # The contributions from other products that make up the used capacity of this product. Only valid when product type is Scale.
  contributions: [CapacityContribution!]!
}
# Licenses for a cluster product grouped by product types.
type LicensesForClusterProductReply {
  # Aggregated information about the cluster product.
  overview: LicensedClusterProduct

  # Information about the distinct product types of this product.
  infos: [ProductTypeInfo!]!
}
# Input required to get licenses for a cluster product.
input LicensesForClusterProductSummaryInput {
  # The cluster product for which the licenses are requested.
  product: Product = PRODUCT_UNKNOWN
}
# Supported in v5.0+
type Link {
  # Required. Supported in v5.0+
  # v5.0: The link's destination.
  # v5.1+: The destination of the link.
  href: String!

  # Required. Supported in v5.0+
  # v5.0: The relation of this link's destination to the current resource.
  # v5.1+: The relation of the destination of this link to the current resource.
  rel: String!
}
# Linux fileset type.
type LinuxFileset implements CdmHierarchyObject , CdmHierarchySnappableNew , HierarchyObject , HierarchySnappable , PhysicalHostDescendantType , PhysicalHostPhysicalChildType , HostFailoverClusterDescendantType , HostFailoverClusterPhysicalChildType , FailoverClusterAppDescendantType , FailoverClusterAppPhysicalChildType , FailoverClusterTopLevelDescendantType , FilesetTemplateDescendantType , FilesetTemplatePhysicalChildType {
  # ID of the CDM cluster.
  cdmId: String!

  # List of paths included in the fileset.
  pathIncluded: [String!]!

  # List of paths excluded from fileset.
  pathExcluded: [String!]!

  # Variable indicating path exceptions.
  pathExceptions: [String!]!

  # Boolean variable denoting if fileset is relic.
  isRelic: Boolean!

  # Boolean variable denoting if this is a NAS Direct Archive fileset.
  isPassThrough: Boolean!

  # Boolean variable denoting if symlink resolution is enabled.
  symlinkResolutionEnabled: Boolean!

  # Boolean variable denoting if hard link support is enabled.
  hardlinkSupportEnabled: Boolean!

  # Host of the linux fileset.
  host: PhysicalHost

  # Includes statistics for the protected objects, for example, archive storage.
  reportWorkload: Snappable

  # Fileset template of the Linux fileset.
  filesetTemplate: FilesetTemplate

  # Failover cluster app.
  failoverClusterApp: FailoverClusterApp

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
input ListAccessGroupsFilterInput {
  groupName: String = ""
  userId: String = ""
}
input ListAccessUsersFilterInput {
  groupsIds: [String!] = []
  search: String = ""
  timeRange: UserTimeRangeInput!
}
enum ListAccessUsersSort {
  EMAIL
  NUM_ACTIVITIES
  NUM_ACTIVITY_DELTA
  USERNAME
}
input ListAccessUsersSortInput {
  sortBy: ListAccessUsersSort = USERNAME
  sortOrder: SortOrder = ASC
}
# Input to get the list of CIDRs for compute settings.
input ListCidrsForComputeSettingInput {
  # Optional List of Cluster IDs.
  clusterIds: [UUID!]
}
# Response to list CIDRs for compute settings.
type ListCidrsForComputeSettingReply {
  # List of cluster interface CIDR map.
  clusterInterfaceCidrs: [ClusterInfCidrs!]!
}
input ListFileActivitiesInput {
  # The corresponding snappable's FID.
  snappableFid: String!

  # The standardized path to fetch user activities for.
  stdPath: String!

  # The datetime to collect user activity from.
  startDateTime: String!

  # The user's IANA timezone.
  timezone: String!
}
input ListFileResultFiltersInput {
  analyzerGroupIds: [String!] = []
  snappablePaths: [SnappablePathInput!] = []
  snappableTypes: [String!] = []
  searchText: String = ""
  whitelistEnabled: Boolean = false

  # List of principal IDs to filter the paths.
  sids: [String!] = []
  fileType: FileCountType!
}
# Returned in response to a ListIntegrationsReq and
# holds the requested integrations.
type ListIntegrationsReply {
  # The requested integrations.
  integrations: [Integration!]!
}
# List of Ransomware Investigation workload locations.
type ListLocationsReply {
  # List of Ransomware Investigation workload locations.
  locations: [String!]!
}
input ListObjectFilesFiltersInput {
  openAccessTypes: [OpenAccessType!] = []
  stalenessTypes: [StalenessType!] = []
  analyzerGroupIds: [String!] = []
  clusterIds: [String!] = []
  pathPrefix: String = ""
  snappableTypes: [String!] = []
  searchText: String = ""
  whitelistEnabled: Boolean = false
  fileCountTypes: [FileCountType!] = []
  accessTypes: [AccessType!] = []
  activityTypes: [ActivityAccessType!] = []
  objectIds: [String!] = []
  inodeTypes: [InodeType!] = []
  objectTypes: [HierarchyObjectTypeEnum!]!
}
# Supported in m3.2.0-m4.2.0
# Response object for list store on mosaic.
type ListStoreResponse {
  # Supported in m3.2.0-m4.2.0
  # Object with Response from ListStore.
  data: [MosaicStoreObject!]!

  # Supported in m3.2.0-m4.2.0
  # Error message in case of failure.
  message: String

  # Supported in m3.2.0-m4.2.0
  # Return Code.
  returnCode: Long

  # Supported in m3.2.0-m4.2.0
  # Status of the request.
  status: Boolean
}
# List of locations where your GCP disks are present.
type ListStoredDiskLocationsReply {
  # List of regions where your GCP disks are present.
  regions: [String!]!

  # List of zones where your GCP disks are present.
  zones: [String!]!
}
# Field to sort by for valid replication targets.
enum ListValidReplicationTargetsSortByField {
  # Rubrik cluster name.
  NAME

  # Unspecified sort by field.
  SORT_BY_FIELD_UNSPECIFIED
}
# Supported in m3.2.0-m4.2.0
# Response object for list version on mosaic.
type ListVersionResponse {
  # Supported in m3.2.0-m4.2.0
  # Object with Response from ListVersion.
  data: [MosaicVersionObject!]!

  # Supported in m3.2.0-m4.2.0
  # Error message in case of failure.
  message: String

  # Supported in m3.2.0-m4.2.0
  # Return Code.
  returnCode: Long

  # Supported in m3.2.0-m4.2.0
  # Status of the request.
  status: Boolean
}
# The `LocalTimeType` scalar type a time of day (i.e., between 00:00 and 23:59) WITHOUT an associated timezone. The timezone is assumed to be the local timezone, so if you want an explicit timezone you'll need to associate it explicitly.
scalar LocalTime
# Immutability settings for creating archival locations.
input LocationImmutabilitySettings {
  # Immutability lock duration of location, in days.
  bucketLockDurationDays: Int = 0
}
# Immutability settings for target.
type LocationImmutabilityType {
  # Number of days location is immutable.
  bucketLockDurationDays: Int!
}
# Location Path Point.
type LocationPathPoint {
  # Managed ID.
  managedId: String!

  # Location name.
  name: String!
}
# Scope of the target location based on how it is managed.
enum LocationScope {
  # Target location is managed by Rubrik.
  GLOBAL

  # Target location is managed by cluster.
  LOCAL

  # Scope of target location is unknown.
  UNKNOWN
}
# Locking mechanisms for a user account.
enum LockMethod {
  # Account locked by the administrator.
  ADMINISTRATIVE_LOCK

  # Account locked due to too many failed login attempts (Brute-force attack).
  BRUTE_FORCE

  # Unspecified.
  LOCK_METHOD_UNSPECIFIED
}
# Specifices the information about the users being locked.
input LockUsersByAdminInput {
  # Required. Specifies the list of user IDs.
  userIds: [String!]!
}
# Specifies information about lockout configuration.
type LockoutConfig {
  # Specifies the number of failed login attempts allowed after which the account is locked.
  loginAttemptsLimit: Int!

  # Specifies the validity of the current self service token.
  selfServiceTokenValidityInMins: Int!

  # Specifies the number of times self-service is allowed to unlock the account.
  selfServiceAttemptsLimit: Int!

  # Specifies whether self service is enabled for all users in this organization.
  isSelfServiceEnabled: Boolean!

  # Specifies the time after which the account is unlocked automatically.
  accountAutoUnlockDurationInMins: Int!

  # Specifies whether the account lockout feature is enabled on the UI.
  isBruteForceLockoutEnabled: Boolean!

  # Specifies whether the auto unlock feature is enabled on the UI.
  isAutoUnlockFeatureEnabled: Boolean!
}
# User account lockout details.
type LockoutState {
  # Specifies whether the account is locked.
  isLocked: Boolean!

  # Mechanism for locking the user account.
  lockMethod: LockMethod!

  # Method for unlocking the locked account. Possible values are: self-service, administrative-unlocking, support-unlocking.
  unlockMethod: UnlockMethod!

  # The time at which the account was previously locked.
  lockedAt: DateTime

  # The time at which the account was previously unlocked.
  unlockedAt: DateTime
}
# The filter for lockout status.
enum LockoutStateFilter {
  # Select all users irrespective of lockout status.
  ALL

  # Select only the locked-out users.
  LOCKED

  # Select only the users that are not locked-out.
  NOT_LOCKED
}
# Input to configure the log settings for databases in an SLA Domain.
input LogConfig {
  # SLA Domain log frequency configuration.
  slaLogFrequencyConfig: SlaLogFrequencyConfig
}
# Input to configure the log settings for databases in an SLA Domain.
type LogConfigResult {
  # SLA Domain log frequency configuration.
  slaLogFrequencyConfig: SlaLogFrequencyConfigResult
}
# Log level to be used in the Rubrik CDM cluster jobs.
enum LogLevel {
  # Debug level logs.
  DEBUG

  # Information level logs.
  INFO
}
# Input for logging in.
input LoginCredentials {
  # Login.
  login: String!

  # Password for the login.
  password: String!
}
# The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
scalar Long
# Input required for retrieving account information.
input LookupAccountInput {
  # Specifies whether account expiry date must be included or not.
  includeExpiryDate: Boolean! = false
}
# Information on the account.
type LookupAccountReply {
  # Account state.
  accountState: AccountState!

  # Account Type.
  accountType: AccountType!

  # Account expiration date.
  accountExpiryDate: DateTime

  # Specifies the number of days before account goes from hold to deleted state.
  accountHoldLength: Long!

  # Specifies number of days for which ui should show the warning.
  holdWarningLength: Long!

  # Specifies last state update date of account.
  accountStateUpdatedAt: DateTime
}
# Supported in v5.0+
input LsnRecoveryPointInput {
  # Supported in v5.0+
  # Recovery fork GUID of the recovery point. If not provided, the recovery fork GUID of the latest snapshot is used.
  recoveryForkGuid: String

  # Required. Supported in v5.0+
  # LSN of the recovery point.
  lsn: String!
}
# The cloud type for o365 subscription.
enum M365Cloud {
  # Commercial cloud type.
  COMMERCIAL

  # GCC high cloud type.
  GCC_HIGH

  # GCC mil cloud type.
  GCC_MIL

  # Cloud type not defined.
  NULL_CLOUD_TYPE
}
# Represents Microsoft 365 region as described in the Microsoft Multi-Geo documentation.
type M365Region {
  # The three-letter code identifying the region.
  code: String!

  # The human-readable name of the region.
  name: String!
}
# The M365 regions of the organization.
type M365RegionsResp {
  # The list of regions.
  regions: [M365Region!]!
}
# Represents backup information for a specific M365 snapshot taken by Rubrik.
type M365Snapshot implements PolarisSpecificSnapshot {
  # BackupEventStatus for the M365 snapshot.
  backupEventStatus: BackupEventStatus

  # ID of the snapshot.
  snapshotId: UUID!
}
# Type representing the mailbox contents to be restored.
input MailboxRestoreConfig {
  SnapshotUUID: UUID
  RestoreConfigs: [RestoreObjectConfig!]!
}
# Input for operation to make a host primary.
input MakePrimaryInput {
  # Required. Description of hosts to migrate.
  hosts: HostMakePrimaryRequestInput!
}
# Supported in v6.0+
type MalwareMatch {
  # Required. Supported in v6.0+
  # Index into MalwareScanConfig.indicators_of_compromise.
  indicatorIndex: Int!

  # Required. Supported in v6.0+
  paths: [PathInfo!]!
}
# Supported in v6.0+
type MalwareScanFileCriteria {
  # Supported in v6.0+
  # Specify the smallest and largest files to scan.
  fileSizeLimits: MalwareScanFileSizeLimits

  # Supported in v6.0+
  # Specify limits around file creation and modification time. The top-level API field `shouldTrustFilesystemTimeInfo` must be set to true when this field is specified.
  fileTimeLimits: MalwareScanFileTimeLimits

  # Supported in v6.0+. For more information on interpretation of includes, exclusions, and exceptions, see /fileset_template.
  pathFilter: MalwareScanPathFilter
}
# Supported in v6.0+
input MalwareScanFileCriteriaInput {
  # Supported in v6.0+
  # Specify the smallest and largest files to scan.
  fileSizeLimits: MalwareScanFileSizeLimitsInput

  # Supported in v6.0+
  # Specify limits around file creation and modification time. The top-level API field `shouldTrustFilesystemTimeInfo` must be set to true when this field is specified.
  fileTimeLimits: MalwareScanFileTimeLimitsInput

  # Supported in v6.0+
  # Please see /fileset_template for a detailed description of how includes, excludes, and exceptions are interpreted.
  pathFilter: MalwareScanPathFilterInput
}
# Supported in v6.0+
type MalwareScanFileSizeLimits {
  # Supported in v6.0+
  # Maximum size of files to scan. Files that are bigger than this size are ignored.
  maximumSizeInBytes: Long

  # Supported in v6.0+
  # Minimum size of files to scan. Files smaller than this size are ignored.
  minimumSizeInBytes: Long
}
# Supported in v6.0+
input MalwareScanFileSizeLimitsInput {
  # Supported in v6.0+
  # Maximum size of files to scan. Files that are bigger than this size are ignored.
  maximumSizeInBytes: Long

  # Supported in v6.0+
  # Minimum size of files to scan. Files smaller than this size are ignored.
  minimumSizeInBytes: Long
}
# Supported in v6.0+
type MalwareScanFileTimeLimits {
  # Supported in v6.0+
  # Earliest file creation time.  Any files created before this time will be elided.
  earliestCreationTime: DateTime

  # Supported in v6.0+
  # Earliest file modification time.  Any files last modified before this time will be elided.
  earliestModificationTime: DateTime

  # Supported in v6.0+
  # Latest file creation time.  Any files created after this time will be elided.
  latestCreationTime: DateTime

  # Supported in v6.0+
  # Latest file modification time.  Any files modified after this time will be elided.
  latestModificationTime: DateTime
}
# Supported in v6.0+
input MalwareScanFileTimeLimitsInput {
  # Supported in v6.0+
  # Earliest file creation time.  Any files created before this time will be elided.
  earliestCreationTime: DateTime

  # Supported in v6.0+
  # Earliest file modification time.  Any files last modified before this time will be elided.
  earliestModificationTime: DateTime

  # Supported in v6.0+
  # Latest file creation time.  Any files created after this time will be elided.
  latestCreationTime: DateTime

  # Supported in v6.0+
  # Latest file modification time.  Any files modified after this time will be elided.
  latestModificationTime: DateTime
}
# Malware scan result for a snapshot.
type MalwareScanInSnapshotResult {
  # ID of the most recent job run against this snapshot, if any.
  lastJobId: String

  # List of malware matches found in this snapshot.
  matches: [MalwareMatch!]!

  # Stats collected during the scan.  Note that the stats capture what was actually scanned.  It's possible a scan for a snapshot terminates early;  it's also possible a scan is retried after an error. This means the counts could be less than or more than the actual count of entites (files, bytes, etc.) in the snapshot.
  scanStats: MalwareScanStats

  # Date of the snapshot.
  snapshotDate: DateTime

  # ID of the snapshot.
  snapshotId: String!

  # Status of the scan.
  status: MalwareScanInSnapshotStatus!

  # Specifies whether the snapshot has expired.
  isSnapshotExpired: Boolean!

  # The snapshot's quarantine details.
  quarantineDetails: QuarantineSpec
}
# Supported in v6.0+
# Status of detecting malware within a Snapshot.
enum MalwareScanInSnapshotStatus {
  MALWARE_SCAN_IN_SNAPSHOT_STATUS_ERROR
  MALWARE_SCAN_IN_SNAPSHOT_STATUS_FINISHED
  MALWARE_SCAN_IN_SNAPSHOT_STATUS_PARTIALLY_SUCCEEDED
  MALWARE_SCAN_IN_SNAPSHOT_STATUS_PENDING
}
# Supported in v6.0+. For more information on the interpretation of includes, exclusions, and exceptions, see v1/fileset_template.
type MalwareScanPathFilter {
  # Supported in v6.0+
  # Paths to exempt from exclusion.
  exceptions: [String!]!

  # Supported in v6.0+
  # Paths to exclude.
  excludes: [String!]!

  # Supported in v6.0+
  # Paths to include.
  includes: [String!]!
}
# Supported in v6.0+
# Please see v1/fileset_template API doc for a detailed description of how includes, excludes, & exceptions are interpreted.
input MalwareScanPathFilterInput {
  # Supported in v6.0+
  # Paths to exempt from exclusion.
  exceptions: [String!] = []

  # Supported in v6.0+
  # Paths to exclude.
  excludes: [String!] = []

  # Supported in v6.0+
  # Paths to include.
  includes: [String!] = []
}
# Malware scan results for an object.
type MalwareScanResult {
  # Results for each scanned snapshot.
  snapshotResults: [MalwareScanInSnapshotResult!]!

  # The scanned object.
  object: CdmHierarchySnappableNew

  # The object location.
  location: String!
}
# Supported in v6.0+
type MalwareScanSnapshotLimit {
  # Supported in v6.0+
  # Maximum snapshot time.  Any snapshots taken after this time will be elided.
  endTime: DateTime

  # Supported in v6.0+
  # Maximum number of snapshots to scan per object.  The snapshots of each object are scanned in reverse chronological order, so this is equivalent to scan-last-n-snapshots.
  maxSnapshotsPerObject: Int

  # Supported in v6.0+
  # Minimum snapshot time.  Any snapshots taken before this time will be elided.
  startTime: DateTime

  # Supported in v6.0+
  # A array of object ID and list of snapshots of that object to scan. If this field is specified, none of the other `MalwareScanSnapshotLimit` fields may be specified.
  snapshotsToScanPerObject: [ObjectIdToSnapshotIds!]!
}
# Supported in v6.0+
input MalwareScanSnapshotLimitInput {
  # Supported in v6.0+
  # Maximum snapshot time.  Any snapshots taken after this time will be elided.
  endTime: DateTime

  # Supported in v6.0+
  # Maximum number of snapshots to scan per object.  The snapshots of each object are scanned in reverse chronological order, so this is equivalent to scan-last-n-snapshots.
  maxSnapshotsPerObject: Int

  # Supported in v6.0+
  # A array of object ID and list of snapshots of that object to scan. If this field is specified, none of the other `MalwareScanSnapshotLimit` fields may be specified.
  snapshotsToScanPerObject: [ObjectIdToSnapshotIdsInput!] = []

  # Supported in v6.0+
  # Minimum snapshot time.  Any snapshots taken before this time will be elided.
  startTime: DateTime
}
# Supported in v6.0+
type MalwareScanStats {
  # Required. Supported in v6.0+
  # The number of files encountered during the scan.  This may be less than the total number of files in the snapshot if the scan terminates early.
  numFiles: Long!

  # Required. Supported in v6.0+
  # The number of files scanned.
  numFilesScanned: Long!

  # Required. Supported in v6.0+
  # The total file size of the files scanned.  This may differ from the actual number of bytes read as part of the scan.  For example a YARA rule might only need to read a part of a file at a specific offset, whereas other rules might need to read the entire file to compute a hash.
  totalFilesScannedSizeBytes: Long!

  # Supported in v8.1+
  # v8.1: The total time in seconds spent in yara analysis.
  # v9.0+: The total time, in seconds, spent on YARA analysis.
  totalYaraAnalysisDurationInSeconds: Long
}
# Represents whether a cluster is managed by Rubrik Security Cloud.
enum ManagedByRubrik {
  # The cluster is not managed by Rubrik Security Cloud.
  NO

  # It is unknown whether the cluster is managed by Rubrik Security Cloud or not.
  UNKNOWN

  # The cluster is managed by Rubrik Security Cloud.
  YES
}
# Specifies which Managed Disks are excluded from snapshots.
input ManagedDiskExclusion {
  # Rubrik ID of the Managed Disk.
  managedDiskRubrikId: UUID!

  # Specifies whether the Managed Disk is excluded from snapshots or not. When true, the Managed Disk will be excluded from the snapshot.
  isExcludedFromSnapshot: Boolean!
}
# Supported in v5.0+
type ManagedHierarchyObjectAncestor {
  # Required. Supported in v5.0+
  id: String!

  # Required. Supported in v5.0+
  name: String!
}
# Supported in v5.2+
type ManagedObjectPendingSlaInfo {
  # Supported in v5.2+
  isPendingSlaDomainRetentionLocked: Boolean

  # Required. Supported in v5.2+
  # Managed ID of the object.
  objectId: String!

  # Required. Supported in v5.2+
  pendingSlaDomainId: String!

  # Required. Supported in v5.2+
  pendingSlaDomainName: String!
}
# Supported in v5.2+
type ManagedObjectSlaInfo {
  # Required. Supported in v5.2+
  configuredSlaDomainId: String!

  # Required. Supported in v5.2+
  configuredSlaDomainName: String!

  # Required. Supported in v5.2+
  effectiveSlaDomainId: String!

  # Required. Supported in v5.2+
  effectiveSlaDomainName: String!

  # Supported in v5.2+
  effectiveSlaDomainSourceId: String

  # Supported in v5.2+
  effectiveSlaDomainSourceName: String

  # Supported in v5.2+
  effectiveSlaPolarisManagedId: String

  # Supported in v5.2+
  isEffectiveSlaDomainRetentionLocked: Boolean

  # Required. Supported in v5.2+
  # Managed ID of the object.
  objectId: String!

  # Specifies the method used to assign an SLA Domain to the workload. Possible values are Derived, Direct, and Unassigned.
  slaAssignment: SlaAssignment!
}
# All supported managed objects.
enum ManagedObjectType {
  # On-prem Active Directory domain.
  ACTIVE_DIRECTORY_DOMAIN

  # On-prem Active Directory domain controller.
  ACTIVE_DIRECTORY_DOMAIN_CONTROLLER

  # Orchestrated Application Recovery Blueprint.
  APP_BLUEPRINT

  # Atlassian site.
  ATLASSIAN_SITE

  # AWS account.
  AWS_NATIVE_ACCOUNT

  # AWS Elastic Block Store volume.
  AWS_NATIVE_EBS_VOLUME

  # AWS Elastic Compute Cloud instance.
  AWS_NATIVE_EC2_INSTANCE

  # AWS Relational Database Service instance.
  AWS_NATIVE_RDS_INSTANCE

  # AWS native S3 Bucket.
  AWS_NATIVE_S3_BUCKET

  # Azure AD Directory.
  AZURE_AD_DIRECTORY

  # Azure managed disk.
  AZURE_MANAGED_DISK

  # Azure common resource group.
  AZURE_RESOURCE_GROUP

  # Azure resource group for disk hierarchy.
  AZURE_RESOURCE_GROUP_FOR_DISK_HIERARCHY

  # Azure resource group for virtual machine hierarchy.
  AZURE_RESOURCE_GROUP_FOR_VM_HIERARCHY

  # Azure SQL Database.
  AZURE_SQL_DATABASE_DB

  # Azure SQL Database server.
  AZURE_SQL_DATABASE_SERVER

  # Azure SQL Managed Instance database.
  AZURE_SQL_MANAGED_INSTANCE_DB

  # Azure SQL Managed Instance server.
  AZURE_SQL_MANAGED_INSTANCE_SERVER

  # Azure Storage Account.
  AZURE_STORAGE_ACCOUNT

  # Azure subscription.
  AZURE_SUBSCRIPTION

  # Azure unmanaged disk.
  AZURE_UNMANAGED_DISK

  # Azure virtual machine.
  AZURE_VIRTUAL_MACHINE

  # Blueprint.
  BLUEPRINT

  # Cassandra column family.
  CASSANDRA_COLUMN_FAMILY

  # Cassandra keyspace.
  CASSANDRA_KEYSPACE

  # Cassandra source.
  CASSANDRA_SOURCE

  # Cloud Direct NAS export.
  CLOUD_DIRECT_NAS_EXPORT

  # Cloud tag rule.
  CLOUD_NATIVE_TAG_RULE

  # DB2 database.
  DB2_DATABASE

  # DB2 instance.
  DB2_INSTANCE

  # Exchange Database Availability Group.
  EXCHANGE_DAG

  # Exchange Database.
  EXCHANGE_DATABASE

  # Exchange Server.
  EXCHANGE_SERVER

  # Failover cluster app.
  FAILOVER_CLUSTER_APP

  # Feldspar site.
  FELDSPAR_SITE

  # Fileset template.
  FILESET_TEMPLATE

  # GCP disk.
  GCP_NATIVE_DISK

  # GCP Google Compute Engine instance.
  GCP_NATIVE_GCE_INSTANCE

  # GCP project.
  GCP_NATIVE_PROJECT

  # Rubrik SaaS user group.
  GROUP

  # Host failover cluster.
  HOST_FAILOVER_CLUSTER

  # Host share.
  HOST_SHARE

  # Hyper-V cluster.
  HYPERV_CLUSTER

  # Hyper-V System Center Virtual Machine Manager.
  HYPERV_SCVMM

  # Hyper-V server.
  HYPERV_SERVER

  # Hyper-V virtual machine.
  HYPERV_VIRTUAL_MACHINE

  # Jira fixed object.
  JIRA_FIXED_OBJECT

  # Jira project.
  JIRA_PROJECT

  # On-prem Kubernetes Cluster.
  K8S_CLUSTER

  # On-prem Kubernetes Protection Set.
  K8S_PROTECTION_SET

  # Kubernetes cluster.
  KUPR_CLUSTER

  # Kubernetes namespace.
  KUPR_NAMESPACE

  # Linux fileset.
  LINUX_FILESET

  # Managed Volume.
  MANAGED_VOLUME

  # Managed Volume Export.
  MANAGED_VOLUME_EXPORT

  # MongoDB collection.
  MONGODB_COLLECTION

  # MongoDB database.
  MONGODB_DATABASE

  # MongoDB source.
  MONGODB_SOURCE

  # MongoDB collection.
  MONGO_COLLECTION

  # MongoDB Collection Set.
  MONGO_COLLECTION_SET

  # MongoDB Database.
  MONGO_DATABASE

  # MongoDB database - deprecated.
  MONGO_DB

  # MongoDB source.
  MONGO_SOURCE

  # MSSQL availability group.
  MSSQL_AVAILABILITY_GROUP

  # MSSQL database availability group.
  MSSQL_DAG

  # MSSQL database.
  MSSQL_DATABASE

  # MSSQL instance.
  MSSQL_INSTANCE

  # NAS fileset associated with a NAS share object.
  NAS_FILESET

  # NAS namespace.
  NAS_NAMESPACE

  # NAS share.
  NAS_SHARE

  # NAS system.
  NAS_SYSTEM

  # NAS volume.
  NAS_VOLUME

  # Nutanix Category.
  NUTANIX_CATEGORY

  # Nutanix Category Value.
  NUTANIX_CATEGORY_VALUE

  # Nutanix cluster.
  NUTANIX_CLUSTER

  # Nutanix Prism Central.
  NUTANIX_PRISM_CENTRAL

  # Nutanix virtual machine.
  NUTANIX_VIRTUAL_MACHINE

  # O365 calendar.
  O365_CALENDAR

  # O365 group.
  O365_GROUP

  # O365 individual mailbox.
  O365_INDIVIDUAL_MAILBOX

  # O365 individual user.
  O365_INDIVIDUAL_USER

  # O365 mailbox.
  O365_MAILBOX

  # O365 OneDrive.
  O365_ONEDRIVE

  # O365 organization.
  O365_ORGANIZATION

  # O365 shared mailbox.
  O365_SHARED_MAILBOX

  # O365 shared user.
  O365_SHARED_USER

  # O365 SharePoint drive.
  O365_SHAREPOINT_DRIVE

  # O365 SharePoint list.
  O365_SHAREPOINT_LIST

  # O365 site.
  O365_SITE

  # O365 Teams.
  O365_TEAMS

  # O365 user.
  O365_USER

  # Oracle database.
  ORACLE_DATABASE

  # Oracle Data Guard Group.
  ORACLE_DATA_GUARD_GROUP

  # Oracle host.
  ORACLE_HOST

  # Oracle Real Application Cluster.
  ORACLE_RAC

  # Physical host.
  PHYSICAL_HOST

  # Recovery plan - deprecated.
  RECOVERY_PLAN

  # SAP HANA database.
  SAP_HANA_DATABASE

  # SAP HANA system.
  SAP_HANA_SYSTEM

  # Share fileset.
  SHARE_FILESET

  # SnapMirror Cloud.
  SNAPMIRROR_CLOUD

  # Unsupported managed object type
  # NB: ideally we should use 0, but we missed it.
  # using 10000 to make coding and debugging easier with number in logs.
  UNKNOWN_MANAGED_OBJECT_TYPE

  # Rubrik SaaS user.
  USER

  # VMware vCloud Director.
  VCD

  # VMware vCloud Director catalog.
  VCD_CATALOG

  # VMware vCloud Director organization.
  VCD_ORG

  # VMware vCloud Director organization virtual datacenter.
  VCD_ORG_VDC

  # VMware vCloud Director vApp.
  VCD_VAPP

  # VMware vCloud Director Virtualized Infrastructure Manager Server.
  VCD_VIM_SERVER

  # Volume Group.
  VOLUME_GROUP

  # VMware vSphere compute cluster.
  VSPHERE_COMPUTE_CLUSTER

  # VMware vSphere content library.
  VSPHERE_CONTENT_LIBRARY

  # VMware vSphere datacenter.
  VSPHERE_DATACENTER

  # VMware vSphere datacenter folder.
  VSPHERE_DATACENTER_FOLDER

  # VMware vSphere datastore.
  VSPHERE_DATASTORE

  # VMware vSphere database cluster.
  VSPHERE_DATASTORE_CLUSTER

  # VMware vSphere folder.
  VSPHERE_FOLDER

  # VMware vSphere host.
  VSPHERE_HOST

  # VMware vSphere network.
  VSPHERE_NETWORK

  # VMware vSphere resource pool.
  VSPHERE_RESOURCE_POOL

  # VMware vSphere tag.
  VSPHERE_TAG

  # VMware vSphere tag category.
  VSPHERE_TAG_CATEGORY

  # VMware vSphere vCenter.
  VSPHERE_VCENTER

  # VMware vSphere virtual disk.
  VSPHERE_VIRTUAL_DISK

  # VMware vSphere virtual machine.
  VSPHERE_VIRTUAL_MACHINE

  # Windows cluster.
  WINDOWS_CLUSTER

  # Windows fileset.
  WINDOWS_FILESET
}
# Managed Volume information.
type ManagedVolume implements HierarchyObject , CdmHierarchyObject , CdmHierarchySnappableNew {
  # Size provisioned for the Managed Volume in bytes.
  provisionedSize: Long!

  # Number of channels in the Managed Volume.
  numChannels: Int!

  # Allowed host names.
  clientNamePatterns: [String!]!

  # If the managed volume is in relic state.
  isRelic: Boolean!

  # Subnet of the Managed Volume.
  subnet: String

  # SMB share details of the Managed Volume.
  smbShare: ManagedVolumeSmbShare

  # The type of the Managed Volume.
  managedVolumeType: ManagedVolumeType!

  # The date on which the effective SLA Domain was assigned or inherited.
  protectionDate: DateTime

  # Client configuration related to backup scripts.
  clientConfig: ManagedVolumeSlaClientConfig

  # Specifies host details for the SLA Managed Volume.
  hostDetail: ManagedVolumeHostDetail

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): ManagedVolumeDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): ManagedVolumePhysicalChildTypeConnection!

  # Cdm cluster information.
  cluster: Cluster!

  # The list of queued snapshots for this Managed Volume.
  queuedSnapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter queued snapshots by date.
    filter: ManagedVolumeQueuedSnapshotFilterInput,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): ManagedVolumeQueuedSnapshotConnection

  # Includes statistics for the protected objects, for example, archive Storage.
  reportWorkload: Snappable

  # The list of Managed Volume queued snapshots for this workload.
  queuedSnapshotGroupBys(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter queued snapshots by date.
    filter: ManagedVolumeQueuedSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: ManagedVolumeQueuedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): ManagedVolumeQueuedSnapshotGroupByConnection

  # Mount state of the Managed Volume.
  mountState: MountState

  # Paginated list of Live Mounts for Managed Volume.
  liveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): ManagedVolumeMountConnection!

  # Main Mount for the Managed Volume.
  mainMount: ManagedVolumeMount

  # Physical Host for the Managed Volume.
  host: PhysicalHost

  # The Managed Volume's physical size in bytes.
  physicalUsedSize: Long! @deprecated(reason: "Use reportWorkload with the metric physicalBytes instead.")

  # Mount protocol used for Managed Volume.
  protocol: ManagedVolumeShareType!

  # State of the Managed Volume.
  state: ManagedVolumeState!

  # Mount protocol used for Managed Volume.
  applicationTag: ManagedVolumeApplicationTag

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The ID of the workload on the Rubrik CDM cluster.
  cdmId: String!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Managed Volume workload related app metadata for a snapshot.
type ManagedVolumeAppMetadata {
  # Stats related to Managed Volume snapshot.
  stats: ManagedVolumeSnapshotStats!
}
# Supported in v5.0+
# Application whose data will be stored in managed volume.
enum ManagedVolumeApplicationTag {
  # Application tag for creating a Managed Volume for DB Transaction log backups.
  MANAGED_VOLUME_APPLICATION_TAG_DB_TRANSACTION_LOG

  # Application tag for creating a Managed Volume for MSSQL backups.
  MANAGED_VOLUME_APPLICATION_TAG_MS_SQL

  # Application tag for creating a Managed Volume for MySQL backups.
  MANAGED_VOLUME_APPLICATION_TAG_MY_SQL

  # Application tag for creating Managed Volume for Oracle backups.
  MANAGED_VOLUME_APPLICATION_TAG_ORACLE

  # Application tag for creating Managed Volume for Oracle incremental backups.
  MANAGED_VOLUME_APPLICATION_TAG_ORACLE_INCREMENTAL

  # Application tag for creating Managed Volume for Postgres backups.
  MANAGED_VOLUME_APPLICATION_TAG_POSTGRE_SQL

  # Application tag for creating Managed Volume for RecoverX backups.
  MANAGED_VOLUME_APPLICATION_TAG_RECOVER_X

  # Application tag for creating Managed Volume for SAP HANA backups.
  MANAGED_VOLUME_APPLICATION_TAG_SAP_HANA

  # Application tag for creating Managed Volume for SAP HANA log backups.
  MANAGED_VOLUME_APPLICATION_TAG_SAP_HANA_LOG
}
# Supported in v5.0+
type ManagedVolumeChannelConfig {
  # Required. Supported in v5.0+
  # v5.0-v6.0: IP address of channel export.
  # v7.0+: IP address of the channel export.
  ipAddress: String!

  # Required. Supported in v5.0+
  # The path of the NFS mount if exported over NFS, or the SMB share name if exported over SMB.
  mountPoint: String!

  # Supported in v5.3+
  # Directory path on the host machine used to export the NFS mount or SMB share.
  hostMountPoint: String
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Managed Volume Config.
input ManagedVolumeConfigInput {
  # Supported in v5.0+
  # v5.0-v6.0: Number of channels to divide the volume into. Each channel provides a unique share to write to.
  # v7.0+: Number of channels to divide the Managed Volume into. Each channel provides a unique share for writing.
  numChannels: Int

  # Supported in v5.0+
  # v5.0-v5.3: IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This is a required value when creating a managed volume on a Rubrik node that has multiple VLAN interfaces
  # v6.0: IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This is a required value when creating a managed volume on a Rubrik node that has multiple VLAN interfaces.
  # v7.0: IP subnet specifying an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
  # v8.0+: IP subnet specifing an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
  subnet: String

  # Supported in v5.3+
  slaClientConfig: SlaManagedVolumeClientConfigInput

  # Supported in v5.0+
  # v5.0-v6.0: Application whose data will be stored by this managed volume, like - Oracle, SAP Hana, MS SQL, etc.
  # v7.0+: Application whose data this Managed Volume will store. For example, Oracle, SAP Hana, MS SQL, etc.
  applicationTag: ManagedVolumeApplicationTag

  # Supported in v5.3+
  # v5.3-v8.0:
  # v8.1+: Type of the Managed Volume (SlaBased / AlwaysMounted).
  mvType: CdmManagedVolumeType

  # Required. Supported in v5.0+
  # v5.0-v8.0:
  # v8.1+: Config for a Managed Volume Export.
  exportConfig: ManagedVolumeExportConfigInput!

  # Required. Supported in v5.0+
  # v5.0-v6.0: Name of the managed volume.
  # v7.0: Name of the Managed Volume.
  # v8.0+: Name of the managed volume.
  name: String!

  # Required. Supported in v5.0+
  # v5.0-v6.0: Maximum capacity for the volume across all the channels.
  # v7.0+: Maximum capacity for the Managed Volume across all channels.
  volumeSize: Long!
}
# Paginated list of ManagedVolume objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ManagedVolumeConnection {
  # List of ManagedVolume objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ManagedVolumeEdge!]!

  # List of ManagedVolume objects.
  nodes: [ManagedVolume!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ManagedVolume objects matching the request arguments.
  count: Int!
}
# Managed Volume descendant type. For example, ManagedVolumeMount.
interface ManagedVolumeDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ManagedVolumeDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ManagedVolumeDescendantTypeConnection {
  # List of ManagedVolumeDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ManagedVolumeDescendantTypeEdge!]!

  # List of ManagedVolumeDescendantType objects.
  nodes: [ManagedVolumeDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ManagedVolumeDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the ManagedVolumeDescendantType object. This wrapper is used for pagination.
type ManagedVolumeDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ManagedVolumeDescendantType object wrapped by this edge.
  node: ManagedVolumeDescendantType!
}
# Supported in v5.0+
input ManagedVolumeDownloadFilesJobConfigInput {
  # Supported in v5.2+
  # v5.2-v7.0: An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
  # v8.0+: Optional Boolean argument indicating if the download is being triggered due to a Legal Hold.
  legalHoldDownloadConfig: LegalHoldDownloadConfigInput

  # Required. Supported in v5.0+
  # v5.0-v7.0: An array that contains the full source path of each file and folder in a download job. This array must contain at least one path. All Windows paths in the array must be on the same disk.
  # v8.0+: An array containing the full source path of each file and folder in a download job. This array must contain at least one path. All Windows paths in the array must be on the same disk.
  paths: [String!]!
}
# Wrapper around the ManagedVolume object. This wrapper is used for pagination.
type ManagedVolumeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ManagedVolume object wrapped by this edge.
  node: ManagedVolume!
}
# Supported in v5.0+
type ManagedVolumeExport {
  # Required. Supported in v5.0+
  # Channels of this export.
  channels: [ManagedVolumeChannelConfig!]!

  # Required. Supported in v5.0+
  # v5.0-v8.0:
  # v8.1+: Config for a Managed Volume Export.
  config: ManagedVolumeExportConfig

  # Required. Supported in v5.0+
  # v5.0-v6.0: Is export active.
  # v7.0+: Indicates if export is active.
  isActive: Boolean!
}
# Export channel metadata of the Managed Volume.
type ManagedVolumeExportChannel {
  # Id of the Managed Volume export channel.
  id: String!

  # Stats of the Managed Volume Export Channel.
  channelStats: ManagedVolumeExportChannelStats!

  # Mount Specification for the Managed Volume.
  mountSpec: ManagedVolumeMountSpec!

  # Path of the Managed Volume mount.
  mountPath: String!

  # Floating IP address of a Managed Volume channel.
  floatingIpAddress: String!

  # Export date of the Managed Volume channel.
  exportDate: DateTime!
}
# Stats of the Managed Volume Export Channel.
type ManagedVolumeExportChannelStats {
  # Used size in bytes.
  usedSize: Long!

  # Total size in bytes.
  totalSize: Long!
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Config for a Managed Volume Export.
type ManagedVolumeExportConfig {
  # Supported in v5.0+
  # v5.0-v6.0: IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This is a required value when creating a managed volume on a Rubrik node that has multiple VLAN interfaces.
  # v7.0: IP subnet specifying an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
  # v8.0+: IP subnet specifing an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
  subnet: String

  # Configuration for updating a Managed Volume.
  managedVolumePatchConfig: ManagedVolumePatchConfig

  # Mount protocol used for Managed Volume.
  shareType: ManagedVolumeShareType
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Config for a Managed Volume Export.
input ManagedVolumeExportConfigInput {
  # Supported in v5.0+
  # v5.0-v6.0: IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This is a required value when creating a managed volume on a Rubrik node that has multiple VLAN interfaces.
  # v7.0: IP subnet specifying an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
  # v8.0+: IP subnet specifing an outgoing VLAN interface for a Rubrik node. This is a required value when creating a Managed Volume on a Rubrik node that has multiple VLAN interfaces.
  subnet: String

  # Configuration for updating a Managed Volume.
  managedVolumePatchConfig: ManagedVolumePatchConfigInput

  # Supported in v5.0+
  # v5.0-v6.0: Specifies if the managed volume is exported over NFS or SMB. This defaults to NFS if this optional property is not specified.
  # v7.0+: Indicates if the Managed Volume is exported over NFS or SMB. Defaults to NFS if this optional property is not specified.
  shareType: ManagedVolumeShareType
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Request object for creating a Managed Volume export.
input ManagedVolumeExportRequestInput {
  # Supported in v7.0+
  # Specifies if the snapshot should be downloaded to local when not available locally.
  shouldDownloadToLocal: Boolean
  managedVolumeExportConfig: ManagedVolumeExportConfigInput
}
# Specifies host details for the SLA Managed Volume.
type ManagedVolumeHostDetail {
  # Specifies the Rubrik FID of the host.
  id: String!

  # Specifies the host name.
  name: String!

  # Specifies connectivity status of the host.
  status: HostConnectivityStatusEnum!
}
# Managed Volume inventory statistics.
type ManagedVolumeInventoryStats {
  # Always-mounted Managed Volume inventory statistics.
  alwaysMounted: ManagedVolumeStats!

  # SLA-based Managed Volume inventory statistics.
  slaBased: ManagedVolumeStats!
}
# Managed Volume Export details object.
type ManagedVolumeMount implements HierarchyObject , CdmHierarchyObject , ManagedVolumeDescendantType , ManagedVolumePhysicalChildType {
  # Number of channels in the Managed Volume Export.
  numChannels: Int!

  # Fid of the Managed Volume Export.
  id: UUID!

  # Logical size used by the Managed Volume in bytes.
  logicalUsedSize: Long!

  # Channel metadata of the Managed Volume mount.
  channels: [ManagedVolumeExportChannel!]!

  # Managed Volume for the export.
  managedVolume: ManagedVolume!

  # Source snapshot of the Live Mount.
  sourceSnapshot: CdmSnapshot!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Paginated list of ManagedVolumeMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ManagedVolumeMountConnection {
  # List of ManagedVolumeMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ManagedVolumeMountEdge!]!

  # List of ManagedVolumeMount objects.
  nodes: [ManagedVolumeMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ManagedVolumeMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the ManagedVolumeMount object. This wrapper is used for pagination.
type ManagedVolumeMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ManagedVolumeMount object wrapped by this edge.
  node: ManagedVolumeMount!
}
# Mount Specification for the Managed Volume.
type ManagedVolumeMountSpec {
  # Mount Directory for the export channel.
  mountDir: String!

  # Size of the mount image.
  imageSizeOpt: Long

  # CDM node specification for the channel mount.
  node: ClusterNode
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Config for updating a Managed Volume.
type ManagedVolumePatchConfig {
  # Supported in v5.0+
  # v5.0-v5.3: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?
  # v6.0: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
  # v7.0: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards *, or ?.
  # v8.0+: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
  hostPatterns: [String!]!

  # Supported in v5.0+
  # v5.0-v6.0: List of node-ids to use for mounting this managed volume channels. Caller should specify at least one node per channel in the managed volume. If the nodeHint is not provided, system will randomly select a subset of nodes in cluster to mount the channels.
  # v7.0+: List of node-IDs to use for mounting the channels of this Managed Volume. Caller should specify at least one node per channel in the Managed Volume. If nodeHint is not provided, the system randomly selects a subset of Rubrik cluster nodes to mount the channels.
  nodeHint: [String!]!

  # Supported in v5.0+
  # v5.0-v5.3: Valid Active Directory domain name for users accessing this managed volume over SMB
  # v6.0: Valid Active Directory domain name for users accessing this managed volume over SMB.
  # v7.0+: Valid Active Directory domain name for users accessing this Managed Volume over SMB.
  smbDomainName: String

  # Supported in v5.0+
  # v5.0-v5.3: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
  # v6.0: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
  # v7.0+: List of valid SMB host IP addresses that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
  smbValidIps: [String!]!

  # Supported in v5.0+
  # v5.0-v5.3: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
  # v6.0: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
  # v7.0+: List of valid usersnames in the domain that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
  smbValidUsers: [String!]!
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Config for updating a Managed Volume.
input ManagedVolumePatchConfigInput {
  # Supported in v5.0+
  # v5.0-v5.3: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?
  # v6.0: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
  # v7.0: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards *, or ?.
  # v8.0+: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
  hostPatterns: [String!] = []

  # Supported in v5.0+
  # v5.0-v6.0: List of node-ids to use for mounting this managed volume channels. Caller should specify at least one node per channel in the managed volume. If the nodeHint is not provided, system will randomly select a subset of nodes in cluster to mount the channels.
  # v7.0+: List of node-IDs to use for mounting the channels of this Managed Volume. Caller should specify at least one node per channel in the Managed Volume. If nodeHint is not provided, the system randomly selects a subset of Rubrik cluster nodes to mount the channels.
  nodeHint: [String!] = []

  # Supported in v5.0+
  # v5.0-v5.3: Valid Active Directory domain name for users accessing this managed volume over SMB
  # v6.0: Valid Active Directory domain name for users accessing this managed volume over SMB.
  # v7.0+: Valid Active Directory domain name for users accessing this Managed Volume over SMB.
  smbDomainName: String

  # Supported in v5.0+
  # v5.0-v5.3: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
  # v6.0: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
  # v7.0+: List of valid SMB host IP addresses that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
  smbValidIps: [String!] = []

  # Supported in v5.0+
  # v5.0-v5.3: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
  # v6.0: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
  # v7.0+: List of valid usersnames in the domain that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
  smbValidUsers: [String!] = []
}
# Supported in v5.3+
input ManagedVolumePatchSlaClientConfigInput {
  # The full command with arguments to run the main backup script that backs up data from the host.
  backupScriptCommand: String

  # Supported in v5.3+
  # An optional timeout for the main backup script in seconds. When this value is 0 or unspecified no timeout is used.
  backupScriptTimeout: Long

  # Supported in v5.3+
  # A list of mount paths where the host mounts individual channels for managed volumes.
  channelHostMountPaths: [String!] = []

  # Supported in v5.3+
  # The ID of the host that mounts the managed volume channels and where the backup scripts run.
  clientHostId: String

  # The full command with arguments to run the optional post-backup script that runs after unsuccessful data backup.
  postBackupScriptOnBackupFailureCommand: String

  # Supported in v5.3+
  # An optional timeout for the post-backup script that runs after unsuccessful data backup in seconds. When this value is 0 or unspecified no timeout is used.
  postBackupScriptOnBackupFailureTimeout: Long

  # The full command with arguments to run the optional post-backup script that runs after data backup is complete.
  postBackupScriptOnBackupSuccessCommand: String

  # Supported in v5.3+
  # An optional timeout for the post-backup script that runs after data backup is complete in seconds. When this value is 0 or unspecified no timeout is used.
  postBackupScriptOnBackupSuccessTimeout: Long

  # The full command with arguments to run the optional pre-backup script that runs after data backup is complete.
  preBackupScriptCommand: String

  # Supported in v5.3+
  # An optional timeout for the pre-backup script in seconds. When this value is 0 or unspecified no timeout is used.
  preBackupScriptTimeout: Long

  # Supported in v5.3+
  # Specifies whether a failure of the pre-backup script halts the backup process.
  shouldCancelBackupOnPreBackupScriptFailure: Boolean

  # Supported in v5.3+
  # The name of the user that runs the scripts on the host.
  username: String

  # Required. Supported in v5.3+
  # Specifies whether to disable the execution of the optional post-backup script that runs after unsuccessful data backup.
  shouldDisablePostBackupScriptOnBackupFailure: Boolean!

  # Required. Supported in v5.3+
  # Specifies whether to disable the execution of the optional post-backup script that runs after data backup is complete.
  shouldDisablePostBackupScriptOnBackupSuccess: Boolean!

  # Required. Supported in v5.3+
  # Specifies whether to disable the execution of the optional pre-backup script.
  shouldDisablePreBackupScript: Boolean!
}
# Managed Volume physical child type eg. ManagedVolumeMount.
interface ManagedVolumePhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of ManagedVolumePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ManagedVolumePhysicalChildTypeConnection {
  # List of ManagedVolumePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ManagedVolumePhysicalChildTypeEdge!]!

  # List of ManagedVolumePhysicalChildType objects.
  nodes: [ManagedVolumePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ManagedVolumePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the ManagedVolumePhysicalChildType object. This wrapper is used for pagination.
type ManagedVolumePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ManagedVolumePhysicalChildType object wrapped by this edge.
  node: ManagedVolumePhysicalChildType!
}
# The Queued snapshot object associated with the Managed Volume.
type ManagedVolumeQueuedSnapshot {
  # Date and time of the snapshot.
  date: DateTime!
}
# Paginated list of ManagedVolumeQueuedSnapshot objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ManagedVolumeQueuedSnapshotConnection {
  # List of ManagedVolumeQueuedSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ManagedVolumeQueuedSnapshotEdge!]!

  # List of ManagedVolumeQueuedSnapshot objects.
  nodes: [ManagedVolumeQueuedSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ManagedVolumeQueuedSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the ManagedVolumeQueuedSnapshot object. This wrapper is used for pagination.
type ManagedVolumeQueuedSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ManagedVolumeQueuedSnapshot object wrapped by this edge.
  node: ManagedVolumeQueuedSnapshot!
}
# Represents the filter input for Managed Volume queued snapshots.
input ManagedVolumeQueuedSnapshotFilterInput {
  # Store information.
  timeRange: TimeRangeInput
}
# ManagedVolumeQueued Snapshot data with groupby info applied to it.
type ManagedVolumeQueuedSnapshotGroupBy {
  # The data groupby info.
  groupByInfo: ManagedVolumeQueuedSnapshotGroupByInfo!

  # Paginated ManagedVolumeQueued snapshot data.
  managedVolumeQueuedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sorts snapshots by field.
    sortBy: ManagedVolumeQueuedSnapshotSortBy = DATE): ManagedVolumeQueuedSnapshotConnection!

  # Provides further groupings for the data.
  managedVolumeQueuedSnapshotGroupBy(
    # Groups snapshots by field.
    groupBy: ManagedVolumeQueuedSnapshotGroupByTime!): [ManagedVolumeQueuedSnapshotGroupBy!]!
}
# Paginated list of ManagedVolumeQueuedSnapshotGroupBy objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ManagedVolumeQueuedSnapshotGroupByConnection {
  # List of ManagedVolumeQueuedSnapshotGroupBy objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ManagedVolumeQueuedSnapshotGroupByEdge!]!

  # List of ManagedVolumeQueuedSnapshotGroupBy objects.
  nodes: [ManagedVolumeQueuedSnapshotGroupBy!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ManagedVolumeQueuedSnapshotGroupBy objects matching the request arguments.
  count: Int!
}
# Wrapper around the ManagedVolumeQueuedSnapshotGroupBy object. This wrapper is used for pagination.
type ManagedVolumeQueuedSnapshotGroupByEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ManagedVolumeQueuedSnapshotGroupBy object wrapped by this edge.
  node: ManagedVolumeQueuedSnapshotGroupBy!
}
# Group by information for Managed Volume queued snapshots.
union ManagedVolumeQueuedSnapshotGroupByInfo = TimeRangeWithUnit
# Group Managed Volume queued snapshots by time.
enum ManagedVolumeQueuedSnapshotGroupByTime {
  # Group by day.
  DAY

  # Group by hour.
  HOUR

  # Group by month.
  MONTH

  # Group by quarter.
  QUARTER

  # Group by week.
  WEEK

  # Group by year.
  YEAR
}
# Sort Managed Volume queued snapshots.
enum ManagedVolumeQueuedSnapshotSortBy {
  # Sort by date.
  DATE
}
# Supported in v5.3+
input ManagedVolumeResizeInput {
  # Supported in v5.3+
  # New size of the managed volume.
  newSize: Long
}
# Supported in v5.0+
# Type of exported share.
enum ManagedVolumeShareType {
  # Specifies that the share type for Managed Volume is NFS.
  MANAGED_VOLUME_SHARE_TYPE_NFS

  # Specifies that the share type for Managed Volume is SMB.
  MANAGED_VOLUME_SHARE_TYPE_SMB
}
# Client configuration related to backup scripts.
type ManagedVolumeSlaClientConfig {
  # Client username.
  username: String!

  # Backup script configuration.
  backupScript: ManagedVolumeSlaScriptConfig!

  # Pre backup script configuration.
  preBackupScript: ManagedVolumeSlaScriptConfig

  # Post successful backup script configuration.
  successfulPostBackupScript: ManagedVolumeSlaScriptConfig

  # Post failed backup script configuration.
  failedPostBackupScript: ManagedVolumeSlaScriptConfig

  # Cancel backup if pre backup script fails.
  shouldCancelBackupOnPreBackupScriptFailure: Boolean!

  # Host mount path for the channels.
  channelHostMountPaths: [String!]!

  # Host ID for the channels.
  hostId: String!
}
# SLA Domain configuration for Managed Volume.
type ManagedVolumeSlaConfig {
  # Specifies the duration for which the Managed Volume logs will be retained.
  logRetention: Duration
}
# Input to configure the SLA Domain for Managed Volume logs.
input ManagedVolumeSlaConfigInput {
  # Specifies the duration for which the Managed Volume logs will be retained.
  logRetention: SlaDurationInput
}
# Supported in v5.3+
# v5.3-v8.0:
# v8.1+: Config for an SLA Managed Volume Export.
input ManagedVolumeSlaExportConfigInput {
  # Configuration for a Managed Volume Export.
  managedVolumeExportConfig: ManagedVolumeExportConfigInput

  # Required. Supported in v5.3+
  # v5.3-v8.0: Managed ID of the host on which this snapshot export is supposed to be mounted.
  # v8.1+: Managed ID of the host to mount the snapshot export.
  hostId: String!

  # Required. Supported in v5.3+
  # v5.3-v8.0: Valid paths on the host where the NFS/SMB mount points from this snapshot export are to be mounted.
  # v8.1+: Valid paths on the host to mount the NFS or SMB mount points from the snapshot export.
  hostMountPaths: [String!]!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Request object for creating an SLA Managed Volume export.
input ManagedVolumeSlaExportRequestInput {
  # Supported in v7.0+
  # Specifies if the snapshot should be downloaded to local when not available locally.
  shouldDownloadToLocal: Boolean
  managedVolumeSlaExportConfig: ManagedVolumeSlaExportConfigInput
}
# Backup script configurations.
type ManagedVolumeSlaScriptConfig {
  # Full command with arguments to run the script.
  scriptCommand: String!

  # Timeout for the script in seconds.
  timeout: Long!
}
# SMB share information of the channel.
type ManagedVolumeSmbShare {
  # Domain name of the Managed Volume.
  domainName: String!

  # List of valid IPs.
  validIps: [String!]!

  # List of valid users.
  validUsers: [String!]!

  # List of active directory groups.
  activeDirectoryGroups: [String!]!
}
# Supported in v5.0+
input ManagedVolumeSnapshotConfigInput {
  # Supported in v5.0+
  # v5.0-v6.0:
  # v7.0+: Overridden SLA Domain Id for Managed Volume snapshot.
  retentionConfig: BaseOnDemandSnapshotConfigInput
}
# Supported in v5.0+
type ManagedVolumeSnapshotLinks {
  # Supported in v5.0+
  # v5.0-v6.0:
  # v7.0+: Reference to Managed Volume snapshot related object.
  exportLink: Link

  # Supported in v5.0+
  self: Link
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Reference for a Managed Volume snapshot.
input ManagedVolumeSnapshotReferenceDefinitionInput {
  # Reference for a Managed Volume snapshot.
  managedVolumeSnapshotReferencePatch: ManagedVolumeSnapshotReferencePatchInput

  # Required. Supported in v5.0+
  # v5.0-v5.1: An ID representing the owner of a snapshot. This must be the same for all references of a snapshot.
  # v5.2-v6.0: An ID representing the owner of a snapshot. All references to a snapshot must use the same ID.
  # v7.0+: An ID representing the owner of a snapshot. All references to the snapshot must use the same ID.
  ownerId: String!
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Reference for a Managed Volume snapshot.
input ManagedVolumeSnapshotReferenceInput {
  # Reference for a Managed Volume snapshot.
  managedVolumeSnapshotReferenceDefinition: ManagedVolumeSnapshotReferenceDefinitionInput

  # Required. Supported in v5.0+
  # v5.0-v6.0: A unique string representing a reference to a snapshot.
  # v7.0+: A unique string representing a reference to a Managed Volume snapshot.
  refId: String!
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Reference for a Managed Volume snapshot.
input ManagedVolumeSnapshotReferencePatchInput {
  # Supported in v5.0+
  # v5.0-v5.1: Specifies a time interval in minutes. This reference expires from the snapshot after the specified interval. A value of -1 indicates that the snapshot should not expire.
  # v5.2-v6.0: Specifies a time interval in minutes. This reference expires from the snapshot after the specified interval. A value of -1 indicates that the snapshot does not expire.
  # v7.0+: A time interval, in minutes, after which the reference expires from the snapshot. A value of -1 indicates that the snapshot does not expire.
  expiryDurationInMinutes: Int
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: A wrapper around ManagedVolumeSnapshotReference.
input ManagedVolumeSnapshotReferenceWrapperInput {
  # Supported in v5.0+
  # A wrapper around ManagedVolumeSnapshotReference to be used when an optional argument is needed.
  reference: ManagedVolumeSnapshotReferenceInput
}
# Stats related to managed volume snapshot.
type ManagedVolumeSnapshotStats {
  # The number of used inodes.
  usedInodes: Long

  # Total number of inodes.
  totalInodes: Long

  # The amount of logical space used.
  logicalBytes: Long!

  # The amount of physical space used.
  physicalBytes: Long!
}
# Supported in v5.0+
# v5.0-v8.0:
# v8.1+: Summary of the managed volume snapshot.
type ManagedVolumeSnapshotSummary {
  # Required. Supported in v5.0+
  # Links to actions available on the snapshot.
  links: ManagedVolumeSnapshotLinks

  # Supported in v5.2+
  # A Boolean that specifies whether the snapshot is queued to be stored as a patch file. When this value is 'true', the snapshot is in queue and not yet stored as a patch file.
  isQueuedSnapshot: Boolean

  # The base snapshot summary for Managed Volume snapshot.
  baseSnapshotSummary: BaseSnapshotSummary
}
# Supported in v5.0+
# State of a managed volume.
enum ManagedVolumeState {
  # Specifies that the Managed Volume is in destroyed state.
  MANAGED_VOLUME_STATE_DESTROYED

  # Specifies that the Managed Volume is in exported state.
  MANAGED_VOLUME_STATE_EXPORTED

  # Specifies that the Managed Volume is exporting.
  MANAGED_VOLUME_STATE_EXPORTING

  # Specifies that export has been requested for the Managed Volume.
  MANAGED_VOLUME_STATE_EXPORT_REQUESTED

  # Specifies that the Managed Volume is in resetting state.
  MANAGED_VOLUME_STATE_RESETTING

  # Specifies that reset has been requested for the Managed Volume.
  MANAGED_VOLUME_STATE_RESET_REQUESTED

  # Specifies that resize has been requested for the Managed Volume.
  MANAGED_VOLUME_STATE_RESIZE_REQUESTED

  # Specifies that the Managed Volume is in resizing state.
  MANAGED_VOLUME_STATE_RESIZING

  # Specifies that the Managed Volume is in snapshotting state.
  MANAGED_VOLUME_STATE_SNAPSHOTTING

  # Specifies that a snapshot has been requested for the Managed Volume.
  MANAGED_VOLUME_STATE_SNAPSHOT_REQUESTED

  # Specifies that the Managed Volume is in unexporting state.
  MANAGED_VOLUME_STATE_UNEXPORTING

  # Specifies that unexport has been requested for the Managed Volume.
  MANAGED_VOLUME_STATE_UNEXPORT_REQUESTED
}
# Managed Volume inventory card information.
type ManagedVolumeStats {
  # Total number of Managed Volumes.
  count: Int!

  # Total size provisioned for all the Managed Volumes, in bytes.
  provisionedSize: Long!

  # Total physical size used by all the Managed Volumes, in bytes.
  usedSize: Long!
}
# Type of Managed Volume.
enum ManagedVolumeType {
  # Always Mounted Managed Volume.
  ALWAYS_MOUNTED

  # Unspecified Managed Volume.
  MANAGED_VOLUME_TYPE_UNSPECIFIED

  # SLA Managed Volume.
  SLA_BASED
}
# Supported in v5.0+
input ManagedVolumeUpdateInput {
  # Supported in v5.0+
  # v5.0-v8.0:
  # v8.1+: Config for updating a Managed Volume.
  config: ManagedVolumePatchConfigInput

  # Supported in v5.0+
  # v5.0-v5.1: Assign this managed volume to the given SLA domain.
  # v5.2+: Assign this managed volume to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # Change the name of this managed volume.
  name: String

  # Supported in v5.0+
  # Increase capacity for the volume across all the channels.
  volumeSize: Long

  # Supported in v5.3+
  slaClientConfig: ManagedVolumePatchSlaClientConfigInput

  # Supported in v5.3+
  # Change the IP subnet that specifies an outgoing VLAN interface for a Rubrik node. This option is only available for SLA Managed Volumes.
  subnet: String
}
# Relationships of the Azure AD object.
type Map {
  # Relationship names.
  keys: [String!]!

  # Related object IDs.
  values: [RelatedObjectIdsType!]!
}
# Input for mapping Azure cloud accounts to an Exocompute subscription.
input MapAzureCloudAccountExocomputeSubscriptionInput {
  # Rubrik IDs of the cloud accounts to be mapped.
  cloudAccountIds: [UUID!]!

  # Rubrik ID of the Exocompute cloud account to map to for launching Exocompute.
  exocomputeCloudAccountId: UUID!
}
# Response of the operation to map Azure cloud accounts to an Exocompute subscription.
type MapAzureCloudAccountExocomputeSubscriptionReply {
  # Specifies whether the mapping was completed successfully.
  isSuccess: Boolean!
}
# Input for mapping Azure cloud accounts to a persistent storage location.
input MapAzureCloudAccountToPersistentStorageLocationInput {
  # Rubrik IDs of the cloud accounts to be mapped.
  cloudAccountIds: [UUID!]!

  # Rubrik ID of the storage account to be used for persistent storage location.
  persistentStorageId: UUID!

  # Type of native protection feature to be mapped to.
  azureNativeProtectionFeature: AzureNativeProtectionFeature!
}
# Response of the operation to map Azure cloud accounts to a persistent storage location.
type MapAzureCloudAccountToPersistentStorageLocationReply {
  # Specifies whether the mapping was completed successfully.
  isSuccess: Boolean!
}
# Input for mapping cloud accounts to an Exocompute account.
input MapCloudAccountExocomputeAccountInput {
  # Rubrik IDs of the cloud accounts to be mapped.
  cloudAccountIds: [UUID!]!

  # Rubrik ID of the Exocompute cloud account to which the Exocompute launch must be mapped.
  exocomputeCloudAccountId: UUID!

  # Cloud provider type.
  cloudVendor: CloudVendor!
}
# Response of the operation to map cloud accounts to an Exocompute account.
type MapCloudAccountExocomputeAccountReply {
  # Specifies whether the mapping was completed successfully.
  isSuccess: Boolean!
}
# Input for operation to mark a secondary cluster certificate to be asynchronously synced to all Rubrik Backup Service instances.
input MarkAgentSecondaryCertificateInput {
  # Required. ID of certificate to add.
  certId: String!

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Supported in v5.3+
type MarkAgentSecondaryCertificateReply {
  # Required. Supported in v5.3+
  # ID of the certificate.
  certId: String!

  # Required. Supported in v5.3+
  # Parsed cluster ID from the certificate.
  clusterUuid: String!

  # Required. Supported in v5.3+
  # Whether this certificate has been marked for use by agents.
  isAgentEnabled: Boolean!

  # Required. Supported in v5.3+
  # Display name for the certificate.
  name: String!
}
type Metadata {
  key: String!
  value: Value
}
# Microsoft 365 subscription on which Ransomware Monitoring can be enabled.
type Microsoft365RansomwareInvestigationEnablement {
  # Microsoft 365 subscription information.
  subscription: HierarchyObjectCommon!

  # Whether Ransomware Monitoring is enabled.
  enabled: Boolean!
}
# Input for migrating a Nutanix live Mount.
input MigrateNutanixMountV1Input {
  # Required. ID of the Live Mount.
  id: String!
}
# Minute snapshot schedule.
type MinuteSnapshotSchedule {
  # Basic minute snapshot schedule.
  basicSchedule: BasicSnapshotSchedule
}
# Minute snapshot schedule.
input MinuteSnapshotScheduleInput {
  # Basic minute snapshot schedule.
  basicSchedule: BasicSnapshotScheduleInput
}
# Supported in v5.0+
type MissedSnapshot {
  # Required. Supported in v5.0+
  archivalLocationType: [String!]!

  # Required. Supported in v5.0+
  missedSnapshotTime: DateTime

  # Required. Supported in v5.0+
  missedSnapshotTimeUnits: [MissedSnapshotTimeUnitConfig!]!
}
# The missed snapshot object associated with the virtual machine.
type MissedSnapshotCommon {
  archivalLocationType: [String!]!
  date: DateTime!
}
# Paginated list of MissedSnapshotCommon objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MissedSnapshotCommonConnection {
  # List of MissedSnapshotCommon objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MissedSnapshotCommonEdge!]!

  # List of MissedSnapshotCommon objects.
  nodes: [MissedSnapshotCommon!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MissedSnapshotCommon objects matching the request arguments.
  count: Int!
}
# Wrapper around the MissedSnapshotCommon object. This wrapper is used for pagination.
type MissedSnapshotCommonEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MissedSnapshotCommon object wrapped by this edge.
  node: MissedSnapshotCommon!
}
# Supported in v5.0+
# Units for missed snapshot dayOfTime.
enum MissedSnapshotDayOfTimeUnit {
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FIFTEENTH
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FIRST_DAY
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_FRIDAY
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_LAST_DAY
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_MONDAY
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_SATURDAY
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_SUNDAY
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_THURSDAY
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_TUESDAY
  MISSED_SNAPSHOT_DAY_OF_TIME_UNIT_WEDNESDAY
}
input MissedSnapshotFilterInput {
  timeRange: TimeRangeInput
}
# Missed Snapshot data with groupby info applied to it.
type MissedSnapshotGroupBy {
  # The data groupby info.
  groupByInfo: MissedSnapshotGroupByInfo!

  # Paginated missed snapshot data.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sorts snapshots by field.
    sortBy: MissedSnapshotSortByEnum = Date): MissedSnapshotCommonConnection!

  # Provides further groupings for the data.
  missedSnapshotGroupBy(
    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!): [MissedSnapshotGroupBy!]!
}
# Paginated list of MissedSnapshotGroupBy objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MissedSnapshotGroupByConnection {
  # List of MissedSnapshotGroupBy objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MissedSnapshotGroupByEdge!]!

  # List of MissedSnapshotGroupBy objects.
  nodes: [MissedSnapshotGroupBy!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MissedSnapshotGroupBy objects matching the request arguments.
  count: Int!
}
# Wrapper around the MissedSnapshotGroupBy object. This wrapper is used for pagination.
type MissedSnapshotGroupByEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MissedSnapshotGroupBy object wrapped by this edge.
  node: MissedSnapshotGroupBy!
}
union MissedSnapshotGroupByInfo = TimeRangeWithUnit
# Group missed snapshots by time.
enum MissedSnapshotGroupByTime {
  # Group by day.
  DAY

  # Group by hour.
  HOUR

  # Group by month.
  MONTH

  # Group by quarter.
  QUARTER

  # Group by week.
  WEEK

  # Group by year.
  YEAR
}
# Supported in v5.0+
type MissedSnapshotListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [MissedSnapshot!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
enum MissedSnapshotSortByEnum {
  Date
}
# Supported in v5.0+
type MissedSnapshotTimeUnitConfig {
  # Required. Supported in v5.0+
  frequency: Int!

  # Required. Supported in v5.0+
  retention: Int!
  dayOfTime: MissedSnapshotDayOfTimeUnit
  timeUnit: SlaTimeUnit!
}
# Input to modify an Active Directory Live Mount.
input ModifyActiveDirectoryLiveMountInput {
  # Required. Live Mount request configuration.
  config: ActiveDirectoryModifyLiveMountConfigInput!

  # Required. ID of the Live Mount.
  id: String!
}
input ModifyIpmiInput {
  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!

  # Required. password to set.
  updateProperties: IpmiUpdateInput!
}
# Supported in v5.0+
type ModifyIpmiReply {
  # Required. Supported in v5.0+
  access: IpmiAccess

  # Required. Supported in v5.0+
  isAvailable: Boolean!
}
# Input to modify NoSQL protection source.
input ModifyMosaicSourceInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Source object with details of the source to be modified.
  sourceData: SourceInput!
}
# Input to modify Mosaic Store.
input ModifyMosaicStoreInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Modify store request object with modified details of a store.
  modifyStoreData: MosaicModifyStoreRequestInput!
}
# Supported in v9.0+
# Type of user authentication used when adding the MongoDB cluster.
# 
enum MongoAuthenticationType {
  MONGO_AUTHENTICATION_TYPE_LDAP
  MONGO_AUTHENTICATION_TYPE_SCRAM
}
# Supported in v8.1+
# MongoDB client host information.
input MongoClientHostInput {
  # Required. Supported in v8.1+
  # Port on which the mongod process is running.
  configurationPort: Int!

  # Required. Supported in v8.1+
  # ID of the host where MongoDB is hosted.
  hostId: String!
}
# Information about MongoDB Collection.
type MongoCollection implements HierarchyObject , CdmHierarchyObject , MongoSourceDescendantType , MongoDatabaseDescendantType , MongoCollectionSetDescendantType , MongoCollectionSetPhysicalChildType {
  # Identifier of the host cluster.
  clusterUuid: UUID!

  # Identifier of the primary host cluster.
  primaryClusterUuid: UUID!

  # CDM ID of the MongoDB collection.
  cdmId: String!

  # Specifies whether the MongoDB collection is a relic in CDM.
  isRelic: Boolean!

  # Parent source connection.
  source: MongoSource!

  # Parent database connection.
  database: MongoDatabase!

  # The list of MongoDB Collection Snapshots.
  mongoSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for MongoDB Collection Snapshots.
  mongoSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups MongoDB Snapshots by field.
    groupBy: MongoSnapshotGroupByTime!): MongoSnapshotGroupByConnection

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # Parent collection set connection.
  collectionSet: MongoCollectionSet!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Supported in v8.1+
# Configuration for assigning SLA Domain to MongoDB collection objects.
input MongoCollectionAssignSlaConfigInput {
  # Required. Supported in v8.1+
  # List of MongoDB collection objects.
  ids: [String!]!

  # Required. Supported in v8.1+
  # ID of the SLA Domain to assign to the collection objects.
  slaId: String!
}
# Paginated list of MongoCollection objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoCollectionConnection {
  # List of MongoCollection objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoCollectionEdge!]!

  # List of MongoCollection objects.
  nodes: [MongoCollection!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoCollection objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongoCollection object. This wrapper is used for pagination.
type MongoCollectionEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoCollection object wrapped by this edge.
  node: MongoCollection!
}
# Information about MongoDB Collection Set.
type MongoCollectionSet implements HierarchyObject , CdmHierarchyObject , MongoSourceDescendantType , MongoDatabaseDescendantType , MongoDatabasePhysicalChildType , CdmHierarchySnappableNew {
  # Identifier of the host cluster.
  clusterUuid: UUID!

  # Identifier of the primary host cluster.
  primaryClusterUuid: UUID!

  # CDM ID of the MongoDB Collection Set.
  cdmId: String!

  # Specifies whether the MongoDB Collection Set is a relic in CDM.
  isRelic: Boolean!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongoCollectionSetDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongoCollectionSetPhysicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# MongoDB Collection Set descendant Type.
interface MongoCollectionSetDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongoCollectionSetDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoCollectionSetDescendantTypeConnection {
  # List of MongoCollectionSetDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoCollectionSetDescendantTypeEdge!]!

  # List of MongoCollectionSetDescendantType objects.
  nodes: [MongoCollectionSetDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoCollectionSetDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongoCollectionSetDescendantType object. This wrapper is used for pagination.
type MongoCollectionSetDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoCollectionSetDescendantType object wrapped by this edge.
  node: MongoCollectionSetDescendantType!
}
# MongoDB Collection Set Child Type.
interface MongoCollectionSetPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongoCollectionSetPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoCollectionSetPhysicalChildTypeConnection {
  # List of MongoCollectionSetPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoCollectionSetPhysicalChildTypeEdge!]!

  # List of MongoCollectionSetPhysicalChildType objects.
  nodes: [MongoCollectionSetPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoCollectionSetPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongoCollectionSetPhysicalChildType object. This wrapper is used for pagination.
type MongoCollectionSetPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoCollectionSetPhysicalChildType object wrapped by this edge.
  node: MongoCollectionSetPhysicalChildType!
}
# The SLA Domain configuration for MongoDB database.
type MongoConfig {
  # Frequency value for log backup of MongoDB databases.
  logFrequency: Duration

  # Specifies the duration for which the MongoDB database logs will be retained.
  logRetention: Duration
}
# Input to configure the SLA Domain for MongoDB database.
input MongoConfigInput {
  # Frequency value for log backup of MongoDB databases.
  logFrequency: SlaDurationInput

  # Specifies the duration for which the MongoDB database logs will be retained.
  logRetention: SlaDurationInput
}
# Information about MongoDB Database.
type MongoDatabase implements HierarchyObject , CdmHierarchyObject , MongoSourceDescendantType , MongoSourcePhysicalChildType {
  # Identifier of the host cluster.
  clusterUuid: UUID!

  # Identifier of the primary host cluster.
  primaryClusterUuid: UUID!

  # CDM ID of the MongoDB database.
  cdmId: String!

  # Specifies whether the MongoDB database is a relic in CDM.
  isRelic: Boolean!

  # Parent source connection.
  source: MongoSource!

  # Count of active collections for this MongoDB database.
  activeCollectionCount: Int!

  # Count of protected collections for this MongoDB database.
  protectedCollectionCount: Int!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongoDatabaseDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongoDatabasePhysicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Paginated list of MongoDatabase objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoDatabaseConnection {
  # List of MongoDatabase objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoDatabaseEdge!]!

  # List of MongoDatabase objects.
  nodes: [MongoDatabase!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoDatabase objects matching the request arguments.
  count: Int!
}
# MongoDB Database descendant Type.
interface MongoDatabaseDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongoDatabaseDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoDatabaseDescendantTypeConnection {
  # List of MongoDatabaseDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoDatabaseDescendantTypeEdge!]!

  # List of MongoDatabaseDescendantType objects.
  nodes: [MongoDatabaseDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoDatabaseDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongoDatabaseDescendantType object. This wrapper is used for pagination.
type MongoDatabaseDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoDatabaseDescendantType object wrapped by this edge.
  node: MongoDatabaseDescendantType!
}
# Wrapper around the MongoDatabase object. This wrapper is used for pagination.
type MongoDatabaseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoDatabase object wrapped by this edge.
  node: MongoDatabase!
}
# MongoDB Database Physical Child Type.
interface MongoDatabasePhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongoDatabasePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoDatabasePhysicalChildTypeConnection {
  # List of MongoDatabasePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoDatabasePhysicalChildTypeEdge!]!

  # List of MongoDatabasePhysicalChildType objects.
  nodes: [MongoDatabasePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoDatabasePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongoDatabasePhysicalChildType object. This wrapper is used for pagination.
type MongoDatabasePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoDatabasePhysicalChildType object wrapped by this edge.
  node: MongoDatabasePhysicalChildType!
}
# Represents the state of discovery of the MongoDB source.
enum MongoDiscoveryStatus {
  # Invalid discovery status of the MongoDB source.
  INVALID_DISCOVERY_STATUS

  # No discovery job for the MongoDB source is running.
  NO_DISCOVERY_IN_PROGRESS

  # On demand discovery job is running for the MongoDB source.
  ON_DEMAND_DISCOVERY_IN_PROGRESS

  # Scheduled dicovery job is running for the MongoDB source.
  SCHEDULED_DISCOVERY_IN_PROGRESS
}
# MongoDB recoverable range object.
type MongoRecoverableRange {
  # Recoverable range start time.
  beginTime: DateTime!

  # Recoverable range end time.
  endTime: DateTime!
}
# MongoDB recoverable range collection.
type MongoRecoverableRanges {
  # MongoDB recoverable range objects.
  recoverableRanges: [MongoRecoverableRange!]!
}
# Configuration for recovering MongoDB databases or collections from source to target cluster.
input MongoRecoveryRequestConfigInput {
  # Supported in v9.0+
  # Prefix for the restored collections.
  prefix: String

  # Supported in v9.0+
  # Password of the target MongoDB source.
  restoreDbPassword: String

  # Supported in v9.0+
  # Username of the target MongoDB source.
  restoreDbUsername: String

  # Specifies whether the collection can be dropped because it already exists on the target MongoDB cluster.
  shouldDropExistingCollection: Boolean

  # Supported in v9.0+
  # List of MongoDB collection objects.
  sourceCollectionIds: [String!] = []

  # Supported in v9.0+
  # List of MongoDB database objects.
  sourceDatabaseIds: [String!] = []

  # Supported in v9.0+
  # Name of the target collection for recovery.
  targetCollectionName: String

  # Supported in v9.0+
  # Name of the target database for recovery.
  targetDatabaseName: String

  # Required. Supported in v9.0+
  # Timestamp of the snapshot version to be used for restore.
  versionTime: DateTime

  # Supported in v9.0+
  # Rate limit restore data ingestion on target MongoDB cluster.
  restoreThrottleInBytesPerSecond: Long

  # Supported in v9.0+
  # Boolean flag to restore MongoDB collections with index.
  isRestoreWithIndex: Boolean

  # Supported in v9.0+
  # v9.0: Type of user authentication used when recovering to a target MongoDB cluster. If no specific option is provided, the authentication mechanism used for recovery in the target MongoDB cluster will be the one that was originally used when adding the target MongoDB cluster.
  # v9.1+: Type of user authentication used when recovering to a target MongoDB cluster. If no option is provided, the one used during adding the target source will be used.
  targetAuthenticationType: MongoAuthenticationType

  # Required. Supported in v9.0+
  # ID of the MongoDB source cluster.
  sourceMongoClusterId: String!

  # Required. Supported in v9.0+
  # ID of the MongoDB target cluster.
  targetMongoClusterId: String!
}
# MongoDB Snapshot data with groupby info applied to it.
type MongoSnapshotGroupBy {
  # The data groupby info.
  groupByInfo: MongoSnapshotGroupByInfo!

  # Paginated MongoDB Snapshot data.
  mongoSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date): CdmSnapshotConnection!

  # Further provide groupings for the data.
  mongoSnapshotGroupBy(
    # Groups MongoDB Snapshots by field.
    groupBy: MongoSnapshotGroupByTime!): [MongoSnapshotGroupBy!]!
}
# Paginated list of MongoSnapshotGroupBy objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoSnapshotGroupByConnection {
  # List of MongoSnapshotGroupBy objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoSnapshotGroupByEdge!]!

  # List of MongoSnapshotGroupBy objects.
  nodes: [MongoSnapshotGroupBy!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoSnapshotGroupBy objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongoSnapshotGroupBy object. This wrapper is used for pagination.
type MongoSnapshotGroupByEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoSnapshotGroupBy object wrapped by this edge.
  node: MongoSnapshotGroupBy!
}
# Group by information for MongoDB Snapshots.
union MongoSnapshotGroupByInfo = TimeRangeWithUnit
# Group MongoDB Snapshots by time.
enum MongoSnapshotGroupByTime {
  # Group by day.
  DAY

  # Group by hour.
  HOUR

  # Group by month.
  MONTH

  # Group by quarter.
  QUARTER

  # Group by week.
  WEEK

  # Group by year.
  YEAR
}
# Information about MongoDB Source.
type MongoSource implements HierarchyObject , CdmHierarchyObject {
  # UUID of the CDM cluster.
  clusterUuid: UUID!

  # IP of the MongoDB source.
  primaryClusterUuid: UUID!

  # CDM ID of the MongoDB source.
  cdmId: String!

  # Specifies whether the MongoDB source is a relic in CDM.
  isRelic: Boolean!

  # Type of the MongoDB source.
  sourceType: MongoSourceType!

  # List of source nodes.
  sourceNodes: [CdmMongoNode!]!

  # Status of the MongoDB source.
  status: MongoSourceStatus!

  # MongoDB username.
  username: String!

  # SSL Options.
  sslParams: CdmMongoSslParams

  # Timestamp of the latest successful MongoDB source refresh.
  lastRefreshTime: DateTime

  # List of ignored secondary MongoDB source nodes.
  ignoreSecondaryNodes: [CdmMongoNode!]

  # Discovery status of the MongoDB source.
  discoveryStatus: MongoDiscoveryStatus!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongoSourceDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongoSourcePhysicalChildTypeConnection!

  # Information about CDM cluster for this MongoDB cluster.
  cluster: Cluster!

  # Count of active collections for this MongoDB source.
  activeCollectionCount: Int!

  # Count of protected collections for this MongoDB source.
  protectedCollectionCount: Int!

  # The list of data hosts associated with this MongoDB source.
  dataHosts(
    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): PhysicalHostConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Supported in v8.1+
# Configuration for adding a MongoDB source.
input MongoSourceAddRequestConfigInput {
  # Supported in v8.1+
  # Path to the CA certificate file.
  caCertfilePath: String

  # Supported in v8.1+
  # List of secondaries that should be ignored.
  ignoreSecondaries: [String!] = []

  # Supported in v8.1+
  # Password of the mongod driver user account.
  sourceDriverPassword: String

  # Supported in v8.1+
  # Username of mongod driver user account.
  sourceDriverUser: String

  # Supported in v8.1+
  # Path to the SSL key file.
  sslKeyfilePath: String

  # Path to the SSL certificate file.
  sslCertfilePath: String

  # Required. Supported in v8.1+
  # Type of MongoDB cluster.
  mongoType: MongoType!

  # Supported in v9.0+
  # Type of user authentication used when adding the MongoDB cluster.
  sourceAuthenticationType: MongoAuthenticationType

  # Supported in v8.1+
  # Specifies whether SSL certificates are required for the connection.
  sslCertificateRequired: MongoSslCertificateRequirement

  # Required. Supported in v8.1+
  # List of host details where MongoDB is hosted.
  mongoClientHosts: [MongoClientHostInput!]!

  # Required. Supported in v8.1+
  # Name of the MongoDB cluster.
  sourceName: String!
}
# Paginated list of MongoSource objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoSourceConnection {
  # List of MongoSource objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoSourceEdge!]!

  # List of MongoSource objects.
  nodes: [MongoSource!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoSource objects matching the request arguments.
  count: Int!
}
# MongoDB Source DescendantType.
interface MongoSourceDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongoSourceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoSourceDescendantTypeConnection {
  # List of MongoSourceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoSourceDescendantTypeEdge!]!

  # List of MongoSourceDescendantType objects.
  nodes: [MongoSourceDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoSourceDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongoSourceDescendantType object. This wrapper is used for pagination.
type MongoSourceDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoSourceDescendantType object wrapped by this edge.
  node: MongoSourceDescendantType!
}
# Wrapper around the MongoSource object. This wrapper is used for pagination.
type MongoSourceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoSource object wrapped by this edge.
  node: MongoSource!
}
# Supported in v8.1+
# Configuration for patching a MongoDB source.
input MongoSourcePatchRequestConfigInput {
  # Supported in v8.1+
  # Path to the CA certificate file.
  caCertfilePath: String

  # Supported in v8.1+
  # List of secondaries that should be ignored.
  ignoreSecondaries: [String!] = []

  # Supported in v8.1+
  # Password of the mongod driver user account.
  sourceDriverPassword: String

  # Supported in v8.1+
  # Username of mongod driver user account.
  sourceDriverUser: String

  # Supported in v8.1+
  # Path to the SSL key file.
  sslKeyfilePath: String

  # Path to the SSL certificate file.
  sslCertfilePath: String

  # Supported in v9.0+
  # Type of user authentication used when adding the MongoDB cluster.
  sourceAuthenticationType: MongoAuthenticationType

  # Supported in v8.1+
  # Specifies whether SSL certificates are required for the connection.
  sslCertificateRequired: MongoSslCertificateRequirement
}
# MongoDB source physical child type.
interface MongoSourcePhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongoSourcePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongoSourcePhysicalChildTypeConnection {
  # List of MongoSourcePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongoSourcePhysicalChildTypeEdge!]!

  # List of MongoSourcePhysicalChildType objects.
  nodes: [MongoSourcePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongoSourcePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongoSourcePhysicalChildType object. This wrapper is used for pagination.
type MongoSourcePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongoSourcePhysicalChildType object wrapped by this edge.
  node: MongoSourcePhysicalChildType!
}
# Represents the state of the MongoDB source.
enum MongoSourceStatus {
  # Add Source Failed state.
  ADD_SOURCE_FAILED

  # Add Source in Progress state.
  ADD_SOURCE_IN_PROGRESS

  # Add Source Successful state.
  ADD_SOURCE_SUCCESSFUL

  # Unsupported.
  _UNSUPPORTED
}
# Represents the type of MongoDB deployment.
enum MongoSourceType {
  # MongoDB replica set.
  REPLICA_SET

  # MongoDB sharded cluster.
  SHARDED
}
# Supported in v8.1+
# Specifies whether SSL certificates are required.
# 
enum MongoSslCertificateRequirement {
  MONGO_SSL_CERTIFICATE_REQUIREMENT_NONE
  MONGO_SSL_CERTIFICATE_REQUIREMENT_OPTIONAL
  MONGO_SSL_CERTIFICATE_REQUIREMENT_REQUIRED
}
# Supported in v8.1+
# Type of MongoDB being added.
# 
enum MongoType {
  MONGO_TYPE_REPLICA_SET
  MONGO_TYPE_SHARDED_CLUSTER
}
# Backup parameters configured on the management object.
type MongodbBackupParams {
  # Name of the store used to store backups.
  storeName: String!

  # Monitoring frequency used by watcher.
  watcherFrequency: Long!
}
# Information about MongoDB Collection.
type MongodbCollection implements HierarchyObject , PolarisHierarchyObject , MongodbSourceDescendantType , MongodbDatabaseDescendantType , MongodbDatabasePhysicalChildType {
  # UUID of the Mosaic cluster.
  clusterUuid: UUID!

  # Number of backups for the MongoDB collection.
  backupCount: Int

  # Backup parameters for the MongoDB collection.
  backupParams: MongodbBackupParams

  # Specifies whether MongoDB collection is relic.
  isRelic: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [PolarisObjectAuthorizedOperationsEnum!]!

  # The MongoDB collection ID.
  id: UUID!

  # Parent source connection.
  source: MongodbSource!

  # Parent database connection.
  database: MongodbDatabase!

  # Mosaic cluster information.
  cluster: Cluster!

  # Paginated list of snapshots for Mongodb collection.
  snapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter mosaic snapshot connection.
    filter: MosaicSnapshotFilterInput,

    # Sort mosaic snapshots by field.
    sortBy: MosaicSnapshotSortBy = DATE,

    # Sorting order for the results.
    sortOrder: SortOrder): MosaicSnapshotConnection!

  # Group By paginated list for mongodb snapshots.
  snapshotGroupBys(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter mosaic snapshot connection.
    filter: MosaicSnapshotFilterInput,

    # Group mosaic snapshots by field.
    groupBy: MosaicSnapshotGroupBy!): MosaicSnapshotGroupByTypeConnection

  # The most recent snapshot of this workload.
  newestSnapshot: MosaicSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: MosaicSnapshot

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongodbCollection objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongodbCollectionConnection {
  # List of MongodbCollection objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongodbCollectionEdge!]!

  # List of MongodbCollection objects.
  nodes: [MongodbCollection!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongodbCollection objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongodbCollection object. This wrapper is used for pagination.
type MongodbCollectionEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongodbCollection object wrapped by this edge.
  node: MongodbCollection!
}
# Information about MongoDB Database.
type MongodbDatabase implements HierarchyObject , PolarisHierarchyObject , MongodbSourceDescendantType , MongodbSourcePhysicalChildType {
  # UUID of the Nosql cluster.
  clusterUuid: UUID!

  # Backup count for the MongoDB database.
  backupCount: Int

  # Watcher status of this MongoDB database.
  watcherEnabled: Boolean!

  # Backup parameters for the MongoDB database.
  backupParams: MongodbBackupParams

  # Specifies whether MongoDB database is relic.
  isRelic: Boolean!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongodbDatabaseDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongodbDatabasePhysicalChildTypeConnection!

  # Parent source connection.
  source: MongodbSource!

  # Mosaic cluster information.
  cluster: Cluster!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongodbDatabase objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongodbDatabaseConnection {
  # List of MongodbDatabase objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongodbDatabaseEdge!]!

  # List of MongodbDatabase objects.
  nodes: [MongodbDatabase!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongodbDatabase objects matching the request arguments.
  count: Int!
}
# MongoDB Database descendant type information.
interface MongodbDatabaseDescendantType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongodbDatabaseDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongodbDatabaseDescendantTypeConnection {
  # List of MongodbDatabaseDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongodbDatabaseDescendantTypeEdge!]!

  # List of MongodbDatabaseDescendantType objects.
  nodes: [MongodbDatabaseDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongodbDatabaseDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongodbDatabaseDescendantType object. This wrapper is used for pagination.
type MongodbDatabaseDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongodbDatabaseDescendantType object wrapped by this edge.
  node: MongodbDatabaseDescendantType!
}
# Wrapper around the MongodbDatabase object. This wrapper is used for pagination.
type MongodbDatabaseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongodbDatabase object wrapped by this edge.
  node: MongodbDatabase!
}
# MongoDB Database physical child type information.
interface MongodbDatabasePhysicalChildType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongodbDatabasePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongodbDatabasePhysicalChildTypeConnection {
  # List of MongodbDatabasePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongodbDatabasePhysicalChildTypeEdge!]!

  # List of MongodbDatabasePhysicalChildType objects.
  nodes: [MongodbDatabasePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongodbDatabasePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongodbDatabasePhysicalChildType object. This wrapper is used for pagination.
type MongodbDatabasePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongodbDatabasePhysicalChildType object wrapped by this edge.
  node: MongodbDatabasePhysicalChildType!
}
# Host description for MongoDB source object.
type MongodbHost {
  # Host address of MongoDB.
  hostname: String!

  # Port on which MongoDB is running.
  port: String!
}
# Information about MongoDB Source.
type MongodbSource implements HierarchyObject , PolarisHierarchyObject {
  # UUID of the Nosql cluster.
  clusterUuid: UUID!

  # IP of the MongoDB source.
  sourceIp: String!

  # Number of nodes in MongoDB source node.
  nodeCount: Int

  # Overall data size of MongoDB source cluster in bytes.
  size: Long

  # Number of backups for the MongoDB source cluster.
  backupCount: Int

  # Source connectivity status.
  status: MongodbSourceStatus!

  # Watcher status for the MongoDB source cluster.
  watcherEnabled: Boolean!

  # Backup Parameters for the MongoDB source cluster.
  backupParams: MongodbBackupParams

  # Configuration Params for the MongoDB source cluster.
  configParams: MongodbSourceConfigParams

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongodbSourceDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MongodbSourcePhysicalChildTypeConnection!

  # Information about NoSql cluster for this MongoDB cluster.
  cluster: Cluster!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Configuration parameters for the MongoDB source object.
type MongodbSourceConfigParams {
  # List of seed hosts for establishing connection to source cluster.
  mongodbHosts: [MongodbHost!]!

  # We do not backup the secondary nodes if this configuration is true.
  ignoreSecondaries: [MongodbHost!]!

  # SSH Port.
  sourceSshPort: Int!

  # Username for MongoDB source .
  sourceDbUser: String!

  # SSH user name for the source nodes.
  sourceNodeUser: String!

  # SSL configuration for the source cluster.
  sslOptions: MongodbSslOptions
}
# Paginated list of MongodbSource objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongodbSourceConnection {
  # List of MongodbSource objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongodbSourceEdge!]!

  # List of MongodbSource objects.
  nodes: [MongodbSource!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongodbSource objects matching the request arguments.
  count: Int!
}
# MongoDB Source descendant type information.
interface MongodbSourceDescendantType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongodbSourceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongodbSourceDescendantTypeConnection {
  # List of MongodbSourceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongodbSourceDescendantTypeEdge!]!

  # List of MongodbSourceDescendantType objects.
  nodes: [MongodbSourceDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongodbSourceDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongodbSourceDescendantType object. This wrapper is used for pagination.
type MongodbSourceDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongodbSourceDescendantType object wrapped by this edge.
  node: MongodbSourceDescendantType!
}
# Wrapper around the MongodbSource object. This wrapper is used for pagination.
type MongodbSourceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongodbSource object wrapped by this edge.
  node: MongodbSource!
}
# MongoDB Source physical child type information.
interface MongodbSourcePhysicalChildType {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MongodbSourcePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MongodbSourcePhysicalChildTypeConnection {
  # List of MongodbSourcePhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MongodbSourcePhysicalChildTypeEdge!]!

  # List of MongodbSourcePhysicalChildType objects.
  nodes: [MongodbSourcePhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MongodbSourcePhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MongodbSourcePhysicalChildType object. This wrapper is used for pagination.
type MongodbSourcePhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MongodbSourcePhysicalChildType object wrapped by this edge.
  node: MongodbSourcePhysicalChildType!
}
# Represents connection status of MongoDB source to Mosaic cluster.
enum MongodbSourceStatus {
  # Source is being added to nosql cluster. Onboarding tasks are in process and source is not confirmed yet.
  ADDING

  # Source is connected.
  CONNECTED

  # Source is deleted from nosql cluster and it will not be tracked.
  DELETED

  # Source is being removed from nosql cluster and cleanup activities are in process.
  DELETING

  # Source is disconnected. This message is displayed when source is down or unreachable from nosql cluster.
  DISCONNECTED

  # Source is connected and metadata is being refreshed.
  REFRESHING

  # Represents error in displaying status. This status does not necessarily mean that something is wrong with the source.
  UNKNOWN_SYSTEM_STATUS
}
# SSL Configuration for MongoDB source object.
type MongodbSslOptions {
  # Whether ssl is enabled or not.
  ssl: Boolean!

  # Path to CA certificate.
  sslCaCerts: String!

  # Path to SSL Certificate.
  sslCertfile: String!

  # Path to SSL Key.
  sslKeyfile: String!

  # SSL certificate requirements.
  sslCertRequirements: SourceSslCertReqs!
}
# Month.
enum Month {
  # April.
  APRIL

  # August.
  AUGUST

  # December.
  DECEMBER

  # February.
  FEBRUARY

  # January.
  JANUARY

  # July.
  JULY

  # June.
  JUNE

  # March.
  MARCH

  # May.
  MAY

  # November.
  NOVEMBER

  # October.
  OCTOBER

  # September.
  SEPTEMBER
}
# Monthly snapshot schedule.
type MonthlySnapshotSchedule {
  # Basic monthly snapshot schedule.
  basicSchedule: BasicSnapshotSchedule

  # Day of the month.
  dayOfMonth: DayOfMonth!
}
# Monthly snapshot schedule.
input MonthlySnapshotScheduleInput {
  # Basic monthly snapshot schedule.
  basicSchedule: BasicSnapshotScheduleInput

  # Day of the month.
  dayOfMonth: DayOfMonth = FIRST_DAY
}
# Supported in m3.2.0-m4.2.0
# Object for stores added on mosaic.
input MosaicAddStoreRequestInput {
  # Supported in m3.2.0-m4.2.0
  # Access key id.
  accessKeyId: String

  # Supported in m3.2.0-m4.2.0
  # Nfs server.
  nfsServer: String

  # Supported in m3.2.0-m4.2.0
  # Nfs server mount path.
  nfsServerMountPath: String

  # Supported in m3.2.0-m4.2.0
  # Secret key.
  secretKey: String

  # Supported in m3.2.0-m4.2.0
  # Whether to skip key file config.
  skipKeyFileConfig: Boolean

  # Required. Supported in m3.2.0-m4.2.0
  # Type of the store on mosaic.
  storeType: MosaicAddStoreRequestStoreType!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the store.
  storeName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Store path/url.
  storeUrl: String!
}
enum MosaicAddStoreRequestStoreType {
  MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_AZURE_STORE
  MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_GS_STORE
  MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_NFS_STORE
  MOSAIC_ADD_STORE_REQUEST_STORE_TYPE_S3_STORE
}
# Supported in m3.2.0-m4.2.0
# Response object from an async request to mosaic.
type MosaicAsyncResponse {
  # Supported in m3.2.0-m4.2.0
  # Mosaic Job ID of submitted job in case of successful job submission. This job id can be used to track progress of the request.
  data: String

  # Supported in m3.2.0-m4.2.0
  # Error message in case of failure.
  message: String

  # Supported in m3.2.0-m4.2.0
  # Return Code from Mosaic.
  returnCode: Long

  # Supported in m3.2.0-m4.2.0
  # Status of the request.
  status: Boolean
}
# Represents the store input for protection.
input MosaicBackupStoreInfoInput {
  # Name of the store.
  storeName: String = ""
}
# Supported in m3.2.0-m4.2.0
# Request object to bulk get recoverable range on mosaic.
input MosaicBulkRecoverableRangeRequestInput {
  # Supported in m4.1.0-m4.2.0
  # Source type.
  sourceType: MosaicBulkRecoverableRangeRequestSourceType

  # Required. Supported in m3.2.0-m4.2.0
  # List of management objects.
  managementObjects: MosaicDatabaseManagementObjectInput!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the source.
  sourceName: String!
}
# Source type for NoSQL protection bulk recoverable range request.
enum MosaicBulkRecoverableRangeRequestSourceType {
  # Specifies that the source type for NoSQL protection bulk recoverable range request is Cassandra.
  MOSAIC_BULK_RECOVERABLE_RANGE_REQUEST_SOURCE_TYPE_CASSANDRA

  # Specifies that the source type for NoSQL protection bulk recoverable range request is MongoDB.
  MOSAIC_BULK_RECOVERABLE_RANGE_REQUEST_SOURCE_TYPE_MONGO
}
# Input for querying NoSQL protection recoverable range for objects in bulk.
input MosaicBulkRecoveryRangeInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Retrieve Recoverable Range required for Restore operation.
  recoveryRangeData: MosaicBulkRecoverableRangeRequestInput!
}
# Supported in m3.2.0-m4.2.0
# Database management object for mosaic.
input MosaicDatabaseManagementObjectInput {
  # Supported in m3.2.0-m4.2.0
  # List of databases.
  databases: [MosaicDatabaseObjectInput!] = []
}
# Supported in m3.2.0-m4.2.0
# Database object for mosaic.
input MosaicDatabaseObjectInput {
  # Supported in m3.2.0-m4.2.0
  # Name of the database.
  dbName: String

  # Supported in m3.2.0-m4.2.0
  # List of tables.
  tables: [String!] = []
}
# Supported in m3.2.0-m4.2.0
# Request object to get schema from mosaic.
input MosaicGetSchemaRequestInput {
  # Required. Supported in m3.2.0-m4.2.0
  # Name of the database.
  databaseName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the source.
  sourceName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the table.
  tableName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Timestamp of the version.
  versionTimestamp: String!
}
# Supported in m3.2.0-m4.2.0
# Object for stores added on mosaic.
input MosaicModifyStoreRequestInput {
  # Supported in m3.2.0-m4.2.0
  # Access key id.
  accessKeyId: String

  # Supported in m3.2.0-m4.2.0
  # Secret key.
  secretKey: String

  # Supported in m3.2.0-m4.2.0
  # Whether to skip key file config.
  skipKeyFileConfig: Boolean

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the store.
  storeName: String!
}
# Represents the monitor input for protection.
input MosaicMonitorInfoInput {
  # Specifies whether to enable monitor.
  isEnabled: Boolean = false

  # Frequency of monitor.
  frequency: Int = 0

  # Frequency unit of monitor.
  frequencyUnit: RetentionUnit = MINUTES
}
# Supported in m3.2.0-m4.2.0
# Object with details of Any Point In Time restore Range.
type MosaicRecoverableRangeObject {
  # Supported in m3.2.0-m4.2.0
  # Start timestamp of recoverable range.
  earliestTimestamp: String

  # Supported in m3.2.0-m4.2.0
  # End timestamp of recoverable range.
  latestTimestamp: String
}
# Supported in m3.2.0-m4.2.0
# Request object to get recoverable range on mosaic.
input MosaicRecoverableRangeRequestInput {
  # Supported in m4.1.0-m4.2.0
  # Source type.
  sourceType: MosaicRecoverableRangeRequestSourceType

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the database.
  databaseName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the source.
  sourceName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Table name.
  # m4.1.0-m4.2.0: Name of the table.
  tableName: String!
}
# Source type for NoSQL protection recoverable range request.
enum MosaicRecoverableRangeRequestSourceType {
  # Specifies that the source type for NoSQL protection recoverable range request is Cassandra.
  MOSAIC_RECOVERABLE_RANGE_REQUEST_SOURCE_TYPE_CASSANDRA

  # Specifies that the source type for NoSQL protection recoverable range request is MongoDB.
  MOSAIC_RECOVERABLE_RANGE_REQUEST_SOURCE_TYPE_MONGO
}
# Supported in m3.2.0-m4.2.0
# Recovery range object for mosaic.
type MosaicRecoveryRangeObject {
  # Supported in m3.2.0-m4.2.0
  # Start timestamp of recovery range.
  earliestTimestamp: String

  # Supported in m3.2.0-m4.2.0
  # End timestamp of recovery range.
  latestTimestamp: String
}
# Supported in m3.2.0-m4.2.0
# Response object for recovery range object on mosaic.
type MosaicRecoveryRangeResponse {
  # Supported in m3.2.0-m4.2.0
  # Object with details of Any Point In Time restore Range.
  data: MosaicRecoveryRangeObject

  # Supported in m3.2.0-m4.2.0
  # Response Message string.
  message: String

  # Supported in m3.2.0-m4.2.0
  # Return Code.
  returnCode: Long

  # Supported in m3.2.0-m4.2.0
  # Status of the request.
  status: Boolean
}
# Input for querying NoSQL protection restore data.
input MosaicRestoreDataInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Retrieve Request Object with details required for Restore operation.
  recoveryData: MosaicRetrieveRequestInput!
}
# Supported in m3.2.0-m4.2.0
# Request object for retrieve request on mosaic.
input MosaicRetrieveRequestInput {
  # Supported in m3.2.0-m4.2.0
  # Destination Management objects for retrieve.
  destinationManagementObjects: MosaicDatabaseManagementObjectInput

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Source name for destination (restore).
  # m4.1.0-m4.2.0: Destination source name for retrieve.
  destinationSourceName: String

  # Supported in m3.2.0-m4.2.0
  # Keyspace config.
  keyspaceConfig: String

  # Supported in m3.2.0-m4.2.0
  # Max disk usage.
  maxDiskUsage: String

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Restore db password.
  # m4.1.0-m4.2.0: Db password of database to restore to.
  restoreDbUserPwd: String

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Restore db username.
  # m4.1.0-m4.2.0: Db name of database to restore to.
  restoreDbUsername: String

  # Supported in m3.2.0-m4.2.0
  # Start timestamp.
  startTimestamp: Int

  # Supported in m3.2.0-m4.2.0
  # Target encryption key.
  targetEncryptionKey: String

  # Supported in m3.2.0-m4.2.0
  # Target query.
  targetQuery: String

  # Supported in m4.1.0-m4.2.0
  # Source type.
  sourceType: MosaicRetrieveRequestSourceType

  # Required. Supported in m3.2.0-m4.2.0
  # Destination path for restore.
  destinationPath: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Source Management objects.
  managementObjects: MosaicDatabaseManagementObjectInput!

  # Required. Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: If the parameter is encoded.
  # m4.1.0-m4.2.0: If parameter is encoded.
  parameterEncoded: Boolean!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the source.
  sourceName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Timestamp of the version.
  versionTime: Int!
}
# Source type for NoSQL protection retrieve request.
enum MosaicRetrieveRequestSourceType {
  # Specifies that the source type for NoSQL protection retrieve request is Cassandra.
  MOSAIC_RETRIEVE_REQUEST_SOURCE_TYPE_CASSANDRA

  # Specifies that the source type for NoSQL protection retrieve request is MongoDB.
  MOSAIC_RETRIEVE_REQUEST_SOURCE_TYPE_MONGO
}
# Represents the protection backup input.
input MosaicSlaInfoInput {
  # Store information.
  mosaicBackupStoreInfo: MosaicBackupStoreInfoInput

  # Monitor information.
  mosaicMonitorInfo: MosaicMonitorInfoInput

  # Specifies whether to backup table index.
  shouldBackupIndex: Boolean

  # Specifies whether to delete all previous versions.
  shouldDelete: Boolean

  # Specifies whether to delete data copy versions.
  shouldDeleteData: Boolean
}
# Mosaic Snapshot information.
type MosaicSnapshot {
  # ID of the snapshot.
  id: String!

  # ID of the Mosaic cluster.
  clusterUuid: UUID!

  # The workload ID.
  workloadId: String!

  # Time of expiration.
  expirationTime: DateTime

  # Time of the snapshot version.
  version: DateTime!

  # State of the snapshot version.
  versionState: String

  # Snapshot size information.
  dbInfo: String

  # Duration of the snapshot job.
  jobDuration: Int

  # Snapshot type.
  snapshotType: MosaicSnapshotType!

  # SLA domain of the snapshot.
  slaDomain: SlaDomain
}
# Paginated list of MosaicSnapshot objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MosaicSnapshotConnection {
  # List of MosaicSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MosaicSnapshotEdge!]!

  # List of MosaicSnapshot objects.
  nodes: [MosaicSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MosaicSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the MosaicSnapshot object. This wrapper is used for pagination.
type MosaicSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MosaicSnapshot object wrapped by this edge.
  node: MosaicSnapshot!
}
# Represents the mosaic snapshot filter input.
input MosaicSnapshotFilterInput {
  # ID of the workload.
  workloadId: [String!]

  # Range of time.
  timeRange: TimeRangeInput
}
# Group mosaic snapshots.
enum MosaicSnapshotGroupBy {
  # Group snapshots by day.
  DAY

  # Group snapshots by hour.
  HOUR

  # Group snapshots by month.
  MONTH

  # Group snapshots by quarter.
  QUARTER

  # Group snapshots by week.
  WEEK

  # Group snapshots by year.
  YEAR
}
# GroupBy information of snapshot.
union MosaicSnapshotGroupByInfo = TimeRangeWithUnit
# Mosaic Snapshot data with group by info applied to it.
type MosaicSnapshotGroupByType {
  # The data group by info.
  groupByInfo: MosaicSnapshotGroupByInfo!

  # Paginated snapshot data.
  snapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort mosaic snapshots by field.
    sortBy: MosaicSnapshotSortBy = DATE): MosaicSnapshotConnection!

  # Provides further groupings for the data.
  allSnapshotGroupBys(
    # Group mosaic snapshots by field.
    groupBy: MosaicSnapshotGroupBy!): [MosaicSnapshotGroupByType!]!
}
# Paginated list of MosaicSnapshotGroupByType objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MosaicSnapshotGroupByTypeConnection {
  # List of MosaicSnapshotGroupByType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MosaicSnapshotGroupByTypeEdge!]!

  # List of MosaicSnapshotGroupByType objects.
  nodes: [MosaicSnapshotGroupByType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MosaicSnapshotGroupByType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MosaicSnapshotGroupByType object. This wrapper is used for pagination.
type MosaicSnapshotGroupByTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MosaicSnapshotGroupByType object wrapped by this edge.
  node: MosaicSnapshotGroupByType!
}
# Sort mosaic snapshots.
enum MosaicSnapshotSortBy {
  # Sort snapshots by date.
  DATE

  # Sort snapshots by snapshot ID.
  SNAPSHOT_ID

  # Sort snapshots by workload ID.
  WORKLOAD_ID
}
# Type of Mosaic snapshot.
enum MosaicSnapshotType {
  # Full(initial) sync snapshot.
  FULL

  # Incremental(delta) sync snapshot.
  INCREMENTAL

  # Invalid snapshot type.
  INVALID
}
# Response object for list store on mosaic.
type MosaicStorageLocation {
  # Fid of Mosaic Storage Locations.
  fid: String!

  # Mosaic ID of Storage Location.
  id: String!

  # UUID of Mosaic Cluster.
  clusterUuid: String!

  # Name of Storage Location.
  storageLocationName: String!

  # Geographic Location of Store.
  geographicLocation: String!

  # Count of backups stored in storage location.
  backupCount: Int!

  # Space consumed on storage location.
  spaceConsumedBytes: Long!

  # Various parameters used for connecting with store.
  connectionParameters: MosaicStoreConnectionParameters

  # Connection Status of Mosaic with Store.
  storeConnectionStatus: MosaicStoreConnectionStatus!

  # Type of Mosaic Store.
  storeType: MosaicStoreType!
}
# Mosaic storage location filter.
enum MosaicStorageLocationFilterField {
  # Cluster ID of Mosaic cluster.
  CLUSTER_UUID

  # Name of storage location.
  NAME

  # Type of storage location.
  STORE_TYPE
}
# Input for MosaicStorageLocation Query Filter.
input MosaicStorageLocationFilterInput {
  # Field from which query should be filtered.
  field: MosaicStorageLocationFilterField = NAME

  # Value of the field.
  text: String = ""
}
# Field to sort by for mosaic storage locations.
enum MosaicStorageLocationQuerySortByField {
  # Field Name.
  NAME
}
# Response object for list store on mosaic.
type MosaicStoreConnectionParameters {
  # URL of store.
  storeUrl: String!

  # NFS server IP.
  nfsServer: String!

  # Mount Path on NFS Server.
  nfsServerMountPath: String!
}
# Status of Mosaic Store Connection.
enum MosaicStoreConnectionStatus {
  # Unable to determine the connection status right now.
  STATUS_UNAVAILABLE

  # Store is connected with Mosaic.
  STORE_CONNECTED

  # Store is disconnected with Mosaic.
  STORE_DISCONNECTED
}
# Supported in m3.2.0-m4.2.0
# Object for stores added on mosaic.
type MosaicStoreObject {
  # Required. Supported in m3.2.0-m4.2.0
  # UUID of the store.
  id: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the store.
  storeName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Store path/url.
  storeUrl: String!

  # Supported in m3.2.0-m4.2.0
  # Url for nfs server.
  surlNfs: String
  storeType: MosaicStoreObjectStoreType!

  # Supported in m3.2.0-m4.2.0
  # Metadata information for store.
  storeMetadata: StoreMetadata
}
enum MosaicStoreObjectStoreType {
  MOSAIC_STORE_OBJECT_STORE_TYPE_AZURE_STORE
  MOSAIC_STORE_OBJECT_STORE_TYPE_GS_STORE
  MOSAIC_STORE_OBJECT_STORE_TYPE_NFS_STORE
  MOSAIC_STORE_OBJECT_STORE_TYPE_S3_STORE
  MOSAIC_STORE_OBJECT_STORE_TYPE_SWIFT_STORE
  MOSAIC_STORE_OBJECT_STORE_TYPE_VFS_STORE
}
# Type of storage location.
enum MosaicStoreType {
  # Microsoft Azure Store.
  AZURE_STORE

  # Google Cloud Store.
  GS_STORE

  # NFS Store.
  NFS_STORE

  # AWS S3 Store.
  S3_STORE

  # Store Type is not available for this store.
  TYPE_UNAVAILABLE
}
# Supported in m3.2.0-m4.2.0
# Object for mosaic versions.
type MosaicVersionObject {
  # Supported in m3.2.0-m4.2.0
  # Information of version space.
  dbInfo: String

  # Supported in m3.2.0-m4.2.0
  # Expiration time of the version.
  expirationTime: Int

  # Supported in m3.2.0-m4.2.0
  # UUID of group policy.
  groupPolicyId: String

  # Supported in m3.2.0-m4.2.0
  # UUID of the version.
  id: String

  # Supported in m3.2.0-m4.2.0
  # Type of interval.
  intervalType: Int

  # Supported in m3.2.0-m4.2.0
  # Duration of the backup job.
  jobDuration: Int

  # Supported in m3.2.0-m4.2.0
  # Need sstable loader.
  needSstableLoaderStr: String

  # Supported in m3.2.0-m4.2.0
  # Replica set.
  rsList: String

  # Supported in m3.2.0-m4.2.0
  # Name of the management object.
  sourceMgmtObj: String

  # Supported in m3.2.0-m4.2.0
  # Name of the source.
  sourceName: String

  # Supported in m3.2.0-m4.2.0
  # Type of the source.
  sourceType: String

  # Supported in m3.2.0-m4.2.0
  # UUID of system policy.
  systemPolicyId: String

  # Supported in m3.2.0-m4.2.0
  # Timestamp of the version.
  timestamp: Int
  versionState: MosaicVersionObjectVersionState
}
# Version state of NoSQL protection version object.
enum MosaicVersionObjectVersionState {
  # Specifies that the version state of NoSQL protection version object is data copied.
  MOSAIC_VERSION_OBJECT_VERSION_STATE_DATA_COPIED

  # Specifies that the version state of NoSQL protection version object is replayed.
  MOSAIC_VERSION_OBJECT_VERSION_STATE_REPLAYED
}
# Input required to mount disks.
input MountDiskInput {
  # Snapshot ID from which disk will be mounted.
  snapshotId: UUID!

  # Target workload ID on which the disk must be mounted.
  targetWorkloadId: UUID!

  # Snapshot types.
  snapshotType: SnapshotType!

  # List of disk IDs that would be mounted.
  mountDiskIds: [UUID!]!

  # Workload type.
  workloadType: CloudNativeObjectType!
}
# Supported in v5.0+
input MountDiskJobConfigInput {
  # Supported in v5.0+
  # ID of the target virtual machine where the disks will be attached to. The default value will be the virtual machine of the snapshot.
  targetVmId: String

  # Supported in v5.0+
  # The VLAN used by the ESXi host to mount the datastore.
  vlan: Int

  # Supported in v5.0+
  # The VMDK files to attach to the existing virtual machine. By default, this value is empty, which attaches all of the VMDKs in the snapshot to the target virtual machine.
  vmdkIds: [String!] = []
}
# Contains the information about taskchain ID of the mount job if succeeded.
type MountDiskReply {
  # Taskchain ID of the mount job.
  taskchainUuid: UUID!
}
# Supported in v5.0+
input MountExportSnapshotJobCommonOptionsInput {
  # Supported in v5.0+
  # Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
  disableNetwork: Boolean

  # Supported in v5.0+
  # Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
  keepMacAddresses: Boolean

  # Supported in v5.0+
  # v5.0-v8.0: Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
  # v8.1+: Determines whether the virtual machine is powered on after a recovery operation. Set to 'true' to power on the virtual machine. Set to 'false' to recover the virtual machine but not power it on. The default value is 'false' for export and 'true' for live mount, instant recovery, and in-place recovery.
  powerOn: Boolean

  # Supported in v5.0+
  # Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
  removeNetworkDevices: Boolean

  # Supported in v5.0+. Name of the new virtual machine created by mount or export.
  vmName: String
}
# Supported in v5.1+
input MountExportSnapshotJobCommonOptionsV2Input {
  # Supported in v5.1+
  # Sets the state of the network interfaces when the virtual machine is mounted or exported. Use 'false' to enable the network interfaces. Use 'true' to disable the network interfaces. Disabling the interfaces can prevent IP conflicts.
  disableNetwork: Boolean

  # Supported in v5.1+
  # Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine. Set to 'false' to assign new MAC addresses. The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
  keepMacAddresses: Boolean

  # Supported in v5.1+
  # v5.1-v8.0: Determines whether the virtual machine should be powered on after mount or export. Set to 'true' to power on the virtual machine. Set to 'false' to mount or export the virtual machine but not power it on. The default is 'true'.
  # v8.1+: Determines whether the virtual machine is powered on after a recovery operation. Set to 'true' to power on the virtual machine. Set to 'false' to recover the virtual machine but not power it on. The default value is 'false' for export and 'true' for Live Mount, Instance Recovery, and In-Place Recovery.
  powerOn: Boolean

  # Supported in v5.1+
  # Determines whether to remove the network interfaces from the mounted or exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'.
  removeNetworkDevices: Boolean

  # Supported in v5.1+
  # v5.1-v5.3: Name of the new VM created by mount or export
  # v6.0-v8.0: Name of the new VM created by mount or export.
  # v8.1+: Name of the new virtual machine created by mount or export.
  vmName: String
}
# Supported in v5.0+
input MountMssqlDbConfigInput {
  # Supported in v5.0+
  # ID of the SQL Server instance to mount the database on. For availability source databases, this must be specified. When unspecified for non-availability source databases, the source SQL Server instance is used.
  targetInstanceId: String

  # Supported in v5.1+
  # Recovery model to assign to the mounted database. If not specified, then assigns the recovery model of the mounted database to the recovery model of the source database.
  recoveryModel: MssqlDatabaseRecoveryModel

  # Required. Supported in v5.0+
  # Name to assign to the mounted database.
  mountedDatabaseName: String!

  # Required. Supported in v5.0+
  recoveryPoint: MssqlRecoveryPointInput!
}
# Input for creating a Nutanix live Mount.
input MountNutanixSnapshotV1Input {
  # Required. Configuration for the Live Mount request.
  config: NutanixVmMountSnapshotJobConfigInput!

  # Required. ID of the virtual machine snapshot.
  id: String!
}
# Input for MountOracleDatabase.
input MountOracleDatabaseInput {
  # Request parameters for the Oracle database mount.
  request: CreateOracleMountInput!

  # Advanced Recovery Configuration map for the Oracle database mount.
  advancedRecoveryConfigMap: [AdvancedRecoveryConfigMap!]
}
# Supported in v5.0+
input MountOracleDbConfigInput {
  # Supported in v5.0+
  # v5.0: A Boolean value that determines whether the database files are only mounted to the target host without recreating the database.
  # v5.1+: A Boolean value that determines whether the database files are mounted to the target host without recreating the database. When 'true', the database is not recreated. When 'false', the database is recreated. The default value is 'false'.
  shouldMountFilesOnly: Boolean

  # Supported in v5.0+
  # The full path on the target host where the NFS share with the snapshot files will be mounted.
  targetMountPath: String

  # Supported in v5.2+
  # v5.2-v5.3: Configuration file for advanced Oracle recovery in base64 encoded format.
  # v6.0+: The configuration file for Oracle advanced recovery in base64 encoded format. This field cannot be specified if `advancedRecoveryConfigMap` is specified.
  advancedRecoveryConfigBase64: String

  # Supported in v5.3+
  # The full path of the pfile on the target Oracle Host or RAC to use for the database recovery.
  customPfilePath: String

  # Supported in v5.3+
  # v5.3: Number of channels used during live mount. The default value is decided based on the number of channels used during backups.
  # v6.0+: Number of channels used during live mount.
  numChannels: Int

  # Supported in v6.0+
  # Path to the post-script to run after the recovery task.
  postScriptPath: String

  # Supported in v6.0+
  # Path to the pre-script to run before the recovery task.
  preScriptPath: String

  # Supported in v6.0+
  # Boolean value that determines whether to stop the recovery task if the pre-script exits with a non-zero value. Set to True to stop the recovery task on pre-script failure. The default setting is False, which allows the task to continue.
  shouldStopRecoveryOnPreScriptFailure: Boolean

  # Supported in v8.0+
  # List of PDB names to be live mounted in the target database.
  pdbsToLiveMount: [String!] = []

  # Supported in v9.0+
  # List of RAC host simple IDs to recover the database during the Live Mount.
  targetRacHostIds: [String!] = []

  # Supported in v9.0+
  # The new value of the db_name parameter for a LM operation. This is used to specify the new target database name of the live mounted database.
  lmDbName: String

  # Supported in v9.0+
  # Specifies the host simple ID for the primary RAC node, which will be used for recovery. The provided host simple ID must be among the list of host simple IDs specified in `targetRacHostIds`.
  targetRacPrimaryHostId: String

  # Supported in v9.0+
  # Boolean value that determines whether to allow renaming the database back to the source Oracle host or RAC during a Live Mount.
  shouldAllowRenameToSource: Boolean

  # Required. Supported in v5.0+
  # v5.0-v5.2: Snapshot ID or timestamp for which the export is done.
  # v5.3+: Snapshot ID or timestamp for which the mount is done.
  recoveryPoint: OracleRecoveryPointInput!

  # Required. Supported in v5.0+
  # ID of the Oracle Host or Oracle RAC object for the created database. The referenced Oracle host or RAC must have the Rubrik Backup Service installed and connected. Standalone source databases can be live mounted to OracleHost and clustered source databases can be live mounted to OracleRac only.
  targetOracleHostOrRacId: String!
}
# Supported in v6.0+
input MountSnapshotJobConfigForBatchV2Input {
  # Supported in v6.0+
  # Mounts the oldest snapshot taken after the specified date. This parameter is evaluated only snapshotId and snapshotBeforeDate. do not have values set.
  snapshotAfterDate: DateTime

  # Supported in v6.0+
  # Mounts the most recent snapshot taken prior to the specified date. This parameter is evaluated only when snapshotId does not have a value set.
  snapshotBeforeDate: DateTime

  # Supported in v6.0+
  # ID of the snapshot to mount. This parameter is optional if either the `snapshotBeforeDate` or `snapshotAfterDate` parameters are configured.
  snapshotId: String

  # Supported in v7.0+
  # Prefix added to the name of new virtual machines created by the mount or export operation.
  vmNamePrefix: String

  # Required. Supported in v6.0+
  # Snapshot mount configuration.
  config: MountSnapshotJobConfigV2Input!

  # Required. Supported in v6.0+
  # ID of the virtual machine whose snapshot must be mounted.
  vmId: String!
}
# Supported in v5.1+
input MountSnapshotJobConfigV2Input {
  # Supported in v5.1+
  # The job creates a datastore that contains the VMDK, but does not create the corresponding virtual machine.
  createDatastoreOnly: Boolean

  # Supported in v5.1+
  # Obsolete parameter.
  dataStoreName: String

  # Supported in v5.1+
  # ID of the ESXi host to mount the new virtual machine on.
  hostId: String

  # Supported in v5.1+
  # The job recovers the tags that were assigned to the virtual machine.
  shouldRecoverTags: Boolean

  # Supported in v5.1+
  # VLAN ID for the VLAN ESXi host preferred to use for mounting the datastore.
  vlan: Int

  # Supported in v6.0+
  # ID of the compute cluster where the new virtual machine will be mounted.
  clusterId: String

  # Supported in v6.0+
  # ID of the resource pool where the new virtual machine will be mounted.
  resourcePoolId: String

  # Supported in v6.0+
  # The network binding for vNIC of the virtual machine.
  vNicBindings: [VmwareVnicBindingInfoV2Input!] = []

  # Supported in v8.1+
  # Configuration for migration.
  migrationConfig: RelocateMountConfigV2Input

  # Supported in v8.1+
  # Specifies whether to trigger migration immediately when the Live Mount succeeds.
  shouldMigrateImmediately: Boolean
  mountExportSnapshotJobCommonOptionsV2: MountExportSnapshotJobCommonOptionsV2Input
  requiredRecoveryParameters: RequiredRecoveryParametersInput

  # Supported in v9.1+
  # ID of the virtual machine folder where the new virtual machine will be mounted.
  folderId: String
}
# Mount state of the Managed Volume.
enum MountState {
  # Changing to read only mount state.
  CHANGING_TO_READ_ONLY

  # Changing to writable mount state.
  CHANGING_TO_WRITABLE

  # Invalid mount state.
  INVALID

  # Read only mount state.
  READ_ONLY

  # Writable mount state.
  WRITABLE
}
# Details about the mounted volume.
type MountedVolume {
  # Id of the mounted volume.
  id: String!

  # Volume's mount points.
  originalMountPoints: [String!]!

  # Size of the mounted volume.
  size: Long!

  # Volume's file system type.
  fileSystemType: String!

  # Volume's Smb Path.
  smbPath: String

  # Mount path in host.
  hostMountPath: String
}
# Backup metadata for a Mssql snapshot.
type MssqlAppMetadata {
  # End timestamp for the backup.
  endBackupTimestampMs: Long
}
# SQL Server always on availability group.
type MssqlAvailabilityGroup implements HierarchyObject , CdmHierarchyObject , MssqlTopLevelDescendantType {
  # CopyOnly flag of the availability group.
  copyOnly: Boolean!

  # Number of seconds between two log backups. When the value is set to 0, log backups are not enabled. When the value is set to -1, the default log backup frequency of the Rubrik cluster is used. When the value is set to -2, the log backup frequency is derived from the SLA Domain.
  logBackupFrequencyInSeconds: Long!

  # Number of hours to retain a log backup. When the value is set to -1, the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired. When the value is set to -2, the default log backup retention of the Rubrik cluster is used. When the value is set to -3, the log backup retention is derived from the SLA Domain.
  logBackupRetentionInHours: Int!

  # Interval, in seconds, between the deletion of archived log files whose 'nextTime' field specifies a time longer than this interval. To specify an interval, enter a positive integer. To immediately delete archived log files regardless of age, specify an interval of -1. To preserve all archived log files, specify an interval of -2.
  hostLogRetention: Long!

  # Boolean flag indicating if the availability group derives log backup configurations from SLA.
  hasLogConfigFromSla: Boolean!

  # The list of instances associated with an availability group.
  instances: [MssqlInstance!]!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MssqlAvailabilityGroupDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MssqlAvailabilityGroupLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# SQL Server availability group descendant.
interface MssqlAvailabilityGroupDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MssqlAvailabilityGroupDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MssqlAvailabilityGroupDescendantTypeConnection {
  # List of MssqlAvailabilityGroupDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MssqlAvailabilityGroupDescendantTypeEdge!]!

  # List of MssqlAvailabilityGroupDescendantType objects.
  nodes: [MssqlAvailabilityGroupDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MssqlAvailabilityGroupDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MssqlAvailabilityGroupDescendantType object. This wrapper is used for pagination.
type MssqlAvailabilityGroupDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MssqlAvailabilityGroupDescendantType object wrapped by this edge.
  node: MssqlAvailabilityGroupDescendantType!
}
# SQL Server availability group logical child.
interface MssqlAvailabilityGroupLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MssqlAvailabilityGroupLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MssqlAvailabilityGroupLogicalChildTypeConnection {
  # List of MssqlAvailabilityGroupLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MssqlAvailabilityGroupLogicalChildTypeEdge!]!

  # List of MssqlAvailabilityGroupLogicalChildType objects.
  nodes: [MssqlAvailabilityGroupLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MssqlAvailabilityGroupLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MssqlAvailabilityGroupLogicalChildType object. This wrapper is used for pagination.
type MssqlAvailabilityGroupLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MssqlAvailabilityGroupLogicalChildType object wrapped by this edge.
  node: MssqlAvailabilityGroupLogicalChildType!
}
# Supported in v5.2+
type MssqlBackup {
  # Required. Supported in v5.2+
  # The unique identifier for the object.
  backupId: String!

  # Required. Supported in v5.2+
  # The total uncompressed size of the files in bytes.
  backupSize: Long!

  # Required. Supported in v5.2+
  # Timestamp of the backup.
  date: DateTime

  # Required. Supported in v5.2+
  # LSN of the backup.
  lsn: String!

  # Required. Supported in v5.2+
  # The file path the backup will be stored at in downloaded zip files containing it.
  path: String!

  # Required. Supported in v5.2+
  # GUID of the recovery fork attached to the LSN.
  recoveryForkGuid: String!
  backupType: MssqlBackupType!
}
# Supported in v5.0+
input MssqlBackupJobConfigInput {
  # Supported in v5.0+
  # Whether to force a full snapshot or an incremental.
  forceFullSnapshot: Boolean

  # Configuration for the on-demand SQL Server snapshot.
  baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
}
# Supported in v5.2+
input MssqlBackupSelectionInput {
  # Supported in v5.2+
  endPoint: MssqlRecoveryPointInput

  # Supported in v5.2+
  # v5.2: Optional. A Boolean that specifies whether the download is in response to a Legal Hold.
  # v5.3+: Optional. A Boolean that specifies if the download is in response to a Legal Hold.
  legalHoldDownloadConfig: LegalHoldDownloadConfigInput

  # Supported in v5.2+
  recoveryPoint: MssqlRecoveryPointInput

  # Supported in v5.2+
  startPoint: MssqlRecoveryPointInput

  # Supported in v5.2+
  # A filter for responses that are of the specified type.
  backupType: MssqlBackupType
}
# Supported in v5.2+
# The type of the backup.
enum MssqlBackupType {
  MSSQL_BACKUP_TYPE_LOG
  MSSQL_BACKUP_TYPE_SNAPSHOT
}
# Supported in v5.0+
input MssqlBatchBackupJobConfigInput {
  # Supported in v5.0+
  # v5.0-v5.2: IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list will be considered.
  # v5.3+: IDs of the Microsoft SQL availability groups. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
  availabilityGroupIds: [String!] = []

  # Supported in v5.0+
  # v5.0-v5.2: IDs of the Microsoft SQL databases. All databases in this list will be considered.
  # v5.3+: IDs of the Microsoft SQL databases. All databases in this list are considered for taking an on demand snapshot.
  databaseIds: [String!] = []

  # Supported in v5.0+
  # v5.0-v5.2: Whether to force a full snapshot or an incremental.
  # v5.3+: Determines whether to force a full or incremental snapshot.
  forceFullSnapshot: Boolean

  # Supported in v5.0+
  # v5.0-v5.2: IDs of the hosts. All databases with a `rootId` belonging to this list will be considered.
  # v5.3+: IDs of the hosts. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
  hostIds: [String!] = []

  # Supported in v5.0+
  # v5.0-v5.2: IDs of the Microsoft SQL instances. All non-availability databases on these instances will be considered.
  # v5.3+: IDs of the Microsoft SQL instances. All non-availability databases on these instances are considered for taking an on demand snapshot.
  instanceIds: [String!] = []

  # Supported in v5.0+
  # v5.0-v5.2: IDs of the Windows clusters. All databases with a `rootId` belonging to this list will be considered.
  # v5.3+: IDs of the Windows clusters. All databases with a `rootId` belonging to this list are considered for taking an on demand snapshot.
  windowsClusterIds: [String!] = []

  # Configuration for the on-demand SQL Server snapshots.
  baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
}
# Supported in v5.0+
# Effective CBT host status.
enum MssqlCbtEffectiveStatusType {
  MSSQL_CBT_EFFECTIVE_STATUS_TYPE_OFF
  MSSQL_CBT_EFFECTIVE_STATUS_TYPE_OFF_DEFAULT
  MSSQL_CBT_EFFECTIVE_STATUS_TYPE_ON
  MSSQL_CBT_EFFECTIVE_STATUS_TYPE_ON_DEFAULT
}
# Supported in v5.0+
# CBT host support status.
enum MssqlCbtStatusType {
  MSSQL_CBT_STATUS_TYPE_DEFAULT
  MSSQL_CBT_STATUS_TYPE_DISABLED
  MSSQL_CBT_STATUS_TYPE_ENABLED
}
# Filter for MSSQL compatible instances.
enum MssqlCompatibleInstancesFilterField {
  # Unspecified filter field for MSSQL compatible instances.
  FILTER_UNSPECIFIED

  # Name filter field for MSSQL compatible instances.
  NAME
}
# Filter MSSQL compatible instances.
input MssqlCompatibleInstancesFilterInput {
  # Type of filter.
  field: MssqlCompatibleInstancesFilterField = FILTER_UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Parameters to sort MSSQL compatible instances.
enum MssqlCompatibleInstancesSortByField {
  # Name sort by field for MSSQL compatible instances results.
  NAME

  # Unspecified sort by field for MSSQL compatible instances results.
  SORT_UNSPECIFIED
}
# Sort MSSQL compatible instances.
input MssqlCompatibleInstancesSortByInput {
  # Field for MSSQL compatible instances sort by.
  field: MssqlCompatibleInstancesSortByField = SORT_UNSPECIFIED

  # Specify the sorting order for MSSQL compatible instances.
  sortOrder: SortOrder = ASC
}
# The SLA Domain configuration for SQL Server database.
type MssqlConfig {
  # Frequency value for log backups of SQL Server databases.
  frequency: Duration

  # Specifies the duration for which the logs will be retained.
  logRetention: Duration
}
# Input to configure the log settings for SQL Server database in an SLA Domain.
input MssqlConfigInput {
  # Frequency for log backups of SQL Server databases.
  frequency: SlaDurationInput

  # The duration for which the logs will be retained.
  logRetention: SlaDurationInput
}
# SQL Server database.
type MssqlDatabase implements HierarchyObject , CdmHierarchyObject , HierarchySnappable , CdmHierarchySnappableNew , MssqlTopLevelDescendantType , PhysicalHostDescendantType , WindowsClusterDescendantType , MssqlAvailabilityGroupDescendantType , MssqlAvailabilityGroupLogicalChildType , MssqlInstanceDescendantType , MssqlInstanceLogicalChildType {
  # CDM ID of the SQL Server database.
  cdmId: String!

  # Specifies if the SQL Server database is a relic.
  isRelic: Boolean!

  # Specifies if the SQL Server database is a live mount.
  isMount: Boolean!

  # Specifies if the SQL Server database is a log shipping secondary.
  isLogShippingSecondary: Boolean!

  # List of reasons that a SQL Server database cannot be protected.
  unprotectableReasons: [String!]!

  # Specifies whether the the Rubrik Backup Service has permission to back up a SQL Server database.
  hasPermissions: Boolean!

  # Specifies if the SQL Server database is online.
  isOnline: Boolean!

  # Specifies if the SQL Server database is in an availability group.
  isInAvailabilityGroup: Boolean!

  # Specifies if the recovery model is simple, full, or bulk-logged.
  recoveryModel: String!

  # List of the replicas available for the SQL Server database.
  replicas: [CdmMssqlDbReplica!]!

  # Information about the script run before a backup.
  preBackupScript: String!

  # Information about the script run after a backup.
  postBackupScript: String!

  # Specifies if copy-only backups are enabled. When false, database backups are full backups.
  copyOnly: Boolean!

  # Number of seconds between two log backups. When the value is set to 0, log backups are not enabled. When the value is set to -1, the default log backup frequency of the Rubrik cluster is used. When the value is set to -2, the log backup frequency is derived from the SLA Domain.
  logBackupFrequencyInSeconds: Float!

  # Number of hours to retain a log backup. When the value is set to -1, the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired. When the value is set to -2, the default log backup retention of the Rubrik cluster is used. When the value is set to -3, the log backup retention is derived from the SLA Domain.
  logBackupRetentionInHours: Int!

  # Interval, in seconds, between the deletion of archived log files whose 'nextTime' field specifies a time longer than this interval. To specify an interval, enter a positive integer. To immediately delete archived log files regardless of age, specify an interval of -1. To preserve all archived log files, specify an interval of -2.
  hostLogRetention: Long!

  # Boolean flag indicating if the database derives log backup configurations from SLA.
  hasLogConfigFromSla: Boolean!

  # ID of the associated SQL Server distributed availability group object.
  dagId: UUID!

  # The list of snapshots taken for a SQL Server database.
  cdmSnapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter CDM snapshots.
    CdmSnapshotFilter: [CdmSnapshotFilter!],

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date): CdmWorkloadSnapshotConnection!

  # The count of on demand snapshots for a SQL Server database.
  cdmOnDemandSnapshotCount: Int!

  # List of live mounts for a SQL Server database.
  liveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort by argument for Mssql database live mounts.
    sortBy: MssqlDatabaseLiveMountSortByInput,

    # Filters for Mssql database live mounts.
    filters: [MssqlDatabaseLiveMountFilterInput!]): MssqlDatabaseLiveMountConnection!

  # List of snapshots taken for a Rubrik CDM workload grouped by attributes.
  cdmGroupedSnapshots(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Filter CDM snapshots.
    CdmSnapshotFilter: [CdmSnapshotFilter!],

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): CdmGroupedSnapshotConnection!

  # The oldest snapshot taken for a CDM workload.
  cdmOldestSnapshot: CdmWorkloadSnapshot

  # The newest snapshot taken for a CDM workload.
  cdmNewestSnapshot: CdmWorkloadSnapshot

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Paginated list of MssqlDatabase objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MssqlDatabaseConnection {
  # List of MssqlDatabase objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MssqlDatabaseEdge!]!

  # List of MssqlDatabase objects.
  nodes: [MssqlDatabase!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MssqlDatabase objects matching the request arguments.
  count: Int!
}
# Wrapper around the MssqlDatabase object. This wrapper is used for pagination.
type MssqlDatabaseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MssqlDatabase object wrapped by this edge.
  node: MssqlDatabase!
}
# Supported in v5.0+
# File type of a database file.
enum MssqlDatabaseFileType {
  MSSQL_DATABASE_FILE_TYPE_DATA
  MSSQL_DATABASE_FILE_TYPE_FILESTREAM
  MSSQL_DATABASE_FILE_TYPE_LOG
}
# Live mount of a SQL Server database.
type MssqlDatabaseLiveMount {
  # Forever ID of the live mount.
  fid: String!

  # Internal ID of the live mount.
  cdmId: String!

  # Internal ID of the mounted database.
  mountedDatabaseId: String!

  # Name of the mounted database.
  mountedDatabaseName: String!

  # ID of the database mount request job.
  mountRequestId: String!

  # ID of the database unmount request job.
  unmountRequestId: String!

  # Timestamp when the mount was created.
  creationDate: DateTime

  # Status of the live mount.
  isReady: Boolean!

  # Recovery point of the live mount.
  recoveryPoint: DateTime

  # Owner ID of the live mount.
  ownerId: String!

  # Target instance of the live mount.
  targetInstance: MssqlInstance

  # Source database of the live mount.
  sourceDatabase: MssqlDatabase

  # Cluster of the live mount.
  cluster: Cluster
}
# Paginated list of MssqlDatabaseLiveMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MssqlDatabaseLiveMountConnection {
  # List of MssqlDatabaseLiveMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MssqlDatabaseLiveMountEdge!]!

  # List of MssqlDatabaseLiveMount objects.
  nodes: [MssqlDatabaseLiveMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MssqlDatabaseLiveMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the MssqlDatabaseLiveMount object. This wrapper is used for pagination.
type MssqlDatabaseLiveMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MssqlDatabaseLiveMount object wrapped by this edge.
  node: MssqlDatabaseLiveMount!
}
# Filter for MSSQL database Live Mount results.
enum MssqlDatabaseLiveMountFilterField {
  # Cluster UUID filter field for MSSQL database Live Mount results.
  CLUSTER_UUID

  # Mounted database name filter field for MSSQL database Live Mount
  # results.
  MOUNTED_DATABASE_NAME

  # Organization ID filter field for MSSQL database Live Mount
  # results.
  ORG_ID

  # Source database ID filter field for MSSQL database Live Mount
  # results.
  SOURCE_DATABASE_ID
}
# Filter Mssql database live mount results.
input MssqlDatabaseLiveMountFilterInput {
  # Type of filter.
  field: MssqlDatabaseLiveMountFilterField = MOUNTED_DATABASE_NAME

  # Values for the filter type.
  texts: [String!] = []
}
# Parameters to sort MSSQL database Live Mount results.
enum MssqlDatabaseLiveMountSortByField {
  # Creation date sort by field for MSSQL database
  # Live Mount results.
  CREATION_DATE

  # Mounted database name sort by field for MSSQL database
  # Live Mount results.
  MOUNTED_DATABASE_NAME
}
# Sort Mssql database live mount results.
input MssqlDatabaseLiveMountSortByInput {
  # Field for Mssql database sort by.
  field: MssqlDatabaseLiveMountSortByField = MOUNTED_DATABASE_NAME

  # Sort order for Mssql database sort by.
  sortOrder: SortOrder = ASC
}
# Supported in v5.1+
# Recovery model for a SQL Server database.
enum MssqlDatabaseRecoveryModel {
  MSSQL_DATABASE_RECOVERY_MODEL_BULK_LOGGED
  MSSQL_DATABASE_RECOVERY_MODEL_FULL
  MSSQL_DATABASE_RECOVERY_MODEL_SIMPLE
}
# Supported in v5.0+
input MssqlDbDefaultsUpdateInput {
  # Supported in v5.0+
  # v5.0-v5.2: True to enable CBT based backup, false to disable.
  # v5.3+: True to enable a CBT-based backup, false to disable a CBT-based backup.
  cbtStatus: Boolean

  # Supported in v5.0+
  logBackupFrequencyInSeconds: Long

  # Supported in v5.3+
  logRetentionTimeInHours: Int

  # Supported in v7.0+
  # Use the default backup location configured in SQL Server for file-based log backups.
  shouldUseDefaultBackupLocation: Boolean
}
# Supported in v5.0+
type MssqlDbDetail {
  # Supported in v5.0+
  archiveStorage: Long

  # Supported in v5.0+
  isLocal: Boolean

  # Supported in v5.0+
  # This field is deprecated. Use the isStandby field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
  isStandby: Boolean

  # Supported in v5.0+
  localStorage: Long

  # Supported in v5.0+
  maxDataStreams: Int

  # Supported in v5.0+
  postBackupScript: MssqlScriptDetail

  # Supported in v5.0+
  preBackupScript: MssqlScriptDetail

  # Supported in v5.0+
  # This field is deprecated. Use the recoveryForkGuid field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
  recoveryForkGuid: String

  # Required. Supported in v5.0+
  snapshotCount: Int!
  blackoutWindowResponseInfo: BlackoutWindowResponseInfo
  latestRecoveryPointV50: String
  latestRecoveryPointV51: String
  latestRecoveryPointV52: String
  latestRecoveryPointV53: String
  latestRecoveryPointV60: DateTime
  latestRecoveryPointV70: DateTime
  latestRecoveryPointV80: DateTime
  latestRecoveryPointV81: DateTime
  latestRecoveryPointV90: DateTime
  mssqlDbSummary: MssqlDbSummary
  oldestRecoveryPointV50: String
  oldestRecoveryPointV51: String
  oldestRecoveryPointV52: String
  oldestRecoveryPointV53: String
  oldestRecoveryPointV60: DateTime
  oldestRecoveryPointV70: DateTime
  oldestRecoveryPointV80: DateTime
  oldestRecoveryPointV81: DateTime
  oldestRecoveryPointV90: DateTime
  protectionDateV50: String
  protectionDateV51: String
  protectionDateV52: String
  protectionDateV53: String
  protectionDateV60: DateTime
  protectionDateV70: DateTime
  protectionDateV80: DateTime
  protectionDateV81: DateTime
  protectionDateV90: DateTime
  oldestRecoveryPointV91: DateTime
  oldestRecoveryPointV92: DateTime
  latestRecoveryPointV91: DateTime
  latestRecoveryPointV92: DateTime
  protectionDateV91: DateTime
  protectionDateV92: DateTime
}
# Supported in v5.0+
input MssqlDbFileExportPathInput {
  # Supported in v5.0+
  # New filename for the database file.
  newFilename: String

  # Supported in v5.0+
  # New logical name for the database file.
  newLogicalName: String

  # Required. Supported in v5.0+
  # The target path for the database file.
  exportPath: String!

  # Required. Supported in v5.0+
  # Logical name of the database file.
  logicalName: String!
}
# Supported in v5.0+
type MssqlDbReplica {
  # Supported in v5.0+
  # For an availability database, provides additional information about a database replica.
  availabilityInfo: MssqlDbReplicaAvailabilityInfo

  # Required. Supported in v5.0+
  # `True` when the Rubrik cluster has sufficient permissions to perform all necessary operations.
  hasPermissions: Boolean!

  # Required. Supported in v5.0+
  # ID of the SQL Server instance managing the replica.
  instanceId: String!

  # Required. Supported in v5.0+
  # Name of the SQL Server instance managing the replica.
  instanceName: String!

  # Required. Supported in v5.0+
  # Deprecated. Please use 'isDeleted' instead.
  isArchived: Boolean!

  # Required. Supported in v5.0+
  # `True` when the replica is deleted.
  isDeleted: Boolean!

  # Required. Supported in v5.0+
  # `True` when the replica is in standby mode.
  isStandby: Boolean!

  # Supported in v5.0+
  # The recovery fork GUID of the replica.
  recoveryForkGuid: String

  # Required. Supported in v5.0+
  rootProperties: MssqlRootProperties

  # Required. Supported in v5.0+
  # The state of the replica.
  state: String!
  recoveryModel: MssqlDbReplicaRecoveryModel!
}
# Supported in v5.0+
type MssqlDbReplicaAvailabilityInfo {
  # Supported in v5.0+
  # Role of the availability database replica. Possible values are: `PRIMARY`, `SECONDARY`, or `RESOLVING`.
  role: MssqlDbReplicaAvailabilityInfoRole!
}
enum MssqlDbReplicaAvailabilityInfoRole {
  MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_PRIMARY
  MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_RESOLVING
  MSSQL_DB_REPLICA_AVAILABILITY_INFO_ROLE_SECONDARY
}
enum MssqlDbReplicaRecoveryModel {
  MSSQL_DB_REPLICA_RECOVERY_MODEL_BULK_LOGGED
  MSSQL_DB_REPLICA_RECOVERY_MODEL_FULL
  MSSQL_DB_REPLICA_RECOVERY_MODEL_SIMPLE
}
# Supported in v5.0+
type MssqlDbSummary {
  # Supported in v5.0+
  # For an availability database, the ID of the availability group that the database belongs to.
  availabilityGroupId: String

  # Required. Supported in v5.0+
  # Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
  copyOnly: Boolean!

  # Required. Supported in v5.0+
  # v5.0: Boolean value that specifies whether the cluster has permission to backup the database.
  # v5.1: Boolean value that specifies whether the cluster has permission to back up the database.
  # v5.2+: A Boolean value that specifies whether the cluster has permission to back up the database. When this value is 'true', the cluster has permission to back up the database.
  hasPermissions: Boolean!

  # Required. Supported in v5.0+
  id: String!

  # Supported in v5.0+
  # This field is deprecated. Use the instanceId field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
  instanceId: String

  # Supported in v5.0+
  # This field is deprecated. Use the instanceName field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
  instanceName: String

  # Required. Supported in v5.0+
  isInAvailabilityGroup: Boolean!

  # Required. Supported in v5.0+
  # Boolean value that specifies whether a database object is a Live Mount. Value is 'true' when the database object is a Live Mount.
  isLiveMount: Boolean!

  # Required. Supported in v5.0+
  # Boolean value that specifies whether a database object represents a secondary database. Value is 'true' when the database object represents a secondary database in a log shipping configuration.
  isLogShippingSecondary: Boolean!

  # Required. Supported in v5.0+
  # v5.0-v5.1: Boolean value that specifies whether the database state is ONLINE.
  # v5.2+: A Boolean value that specifies whether the database is in the ONLINE state. When this value is 'true', the database is in the ONLINE state.
  isOnline: Boolean!

  # Required. Supported in v5.0+
  isRelic: Boolean!

  # Required. Supported in v5.0+
  logBackupFrequencyInSeconds: Int!

  # Required. Supported in v5.0+
  # Hours to keep a log backup. A value of -1 indicates that a log will only expire when the preceding snapshots have expired.
  logBackupRetentionHours: Int!

  # Required. Supported in v5.0+
  name: String!

  # Required. Supported in v5.0+
  primaryClusterId: String!

  # Required. Supported in v5.0+
  # List of replicas of this database. An availability database may have multiple replicas, while other databases will have only one replica.
  replicas: [MssqlDbReplica!]!

  # Required. Supported in v5.0+
  rootProperties: MssqlRootProperties

  # Supported in v5.0+
  # This field is deprecated. Use the state field on the replicas list instead. This field will continue to work for non-availability databases, but it is meaningless for availability databases.
  state: String

  # Supported in v5.1+
  # Information about the current backup task.
  currentBackupTaskInfo: BackupTaskDiagnosticInfo

  # Supported in v5.1+
  # True/false value indicating if backup task information is included in the response.
  includeBackupTaskInfo: Boolean

  # Supported in v5.1+
  # v5.1: The timestamp of the previous snapshot
  # v5.2-v5.3: The timestamp of the previous snapshot. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
  # v6.0+: The timestamp of the previous snapshot.. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
  lastSnapshotTime: DateTime

  # Supported in v5.1+
  # v5.1: An integer that specifies the number of missed snapshots.
  # v5.2+: An integer that specifies the number of missed snapshots. Only available in the /v1/mssql/db endpoint request body. The information will not be available for other endpoints.
  numMissedSnapshot: Int

  # Supported in v5.2+
  # v5.2: Describes any pending SLA assignment on this object.
  # v5.3+: Describes any pending SLA Domain assignment on this object.
  pendingSlaDomain: ManagedObjectPendingSlaInfo

  # Supported in v7.0+
  # A boolean value that specifies whether the database derives the log backup configurations from SLA.
  hasLogConfigFromSla: Boolean

  # Supported in v9.0+
  # Specifies the interval, in seconds, the Rubrik cluster waits before the next log backup job deletes MSSQL log files whose 'nextTime' field specifies a time longer than this interval. To specify a wait interval, enter a positive integer. To immediately delete log files regardless of age, specify an interval of -1. To preserve all log files, specify an interval of -2.
  hostLogRetention: Int

  # A list of reasons that a SQL Server database cannot be protected by Rubrik.
  unprotectableReasonsV50: [MssqlUnprotectableReason!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV51: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV52: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV53: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV60: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV70: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV80: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV81: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV90: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV91: [String!]!

  # A list of reasons that a SQL Server database cannot be protected by the Rubrik CDM.
  unprotectableReasonsV92: [String!]!
  recoveryModel: MssqlDbSummaryRecoveryModel
  snappable: CdmWorkload
}
enum MssqlDbSummaryRecoveryModel {
  MSSQL_DB_SUMMARY_RECOVERY_MODEL_BULK_LOGGED
  MSSQL_DB_SUMMARY_RECOVERY_MODEL_FULL
  MSSQL_DB_SUMMARY_RECOVERY_MODEL_SIMPLE
}
# Supported in v5.0+
input MssqlDbUpdateIdInput {
  # Required. Supported in v5.0+
  # ID of the Microsoft SQL database.
  databaseId: String!

  # Required. Supported in v5.0+
  updateProperties: MssqlDbUpdateInput!
}
# Supported in v5.0+
input MssqlDbUpdateInput {
  # Assign database to SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # Maximum number of parallel data streams that can be used to back up the database.
  maxDataStreams: Int

  # Supported in v5.0+
  postBackupScript: MssqlScriptDetailInput

  # Supported in v5.0+
  preBackupScript: MssqlScriptDetailInput

  # Supported in v5.2+
  # Whether to pause or resume backups/archival for this database.
  isPaused: Boolean

  # Supported in v5.2+
  # Determines whether to force a full for the next snapshot of a SQL Server database. When this value is true, the Rubrik cluster takes a full snapshot. This value is false by default and is reset to false after a successful full snapshot.
  shouldForceFull: Boolean

  # Supported in Rubrik cluster versions 4.0 and later. Non-SLA-Domain properties of a SQL Server database.
  # In Rubrik cluster versions 5.2 and later, use 'MssqlSlaPatchProperties' instead.
  # In Rubrik cluster versions 9.0 and later, use 'MssqlSlaRelatedProperties' instead.
  mssqlNonSlaProperties: MssqlNonSlaPropertiesInput

  # Supported in Rubrik cluster versions 5.2 and later. SLA Domain properties of a SQL Server database. In Rubrik cluster versions 9.0 and later, use 'MssqlSlaRelatedProperties' instead.
  mssqlSlaPatchProperties: MssqlSlaPatchPropertiesInput

  # Supported in Rubrik cluster versions 9.0 and later. Non-SLA-Domain properties of a SQL Server database.
  mssqlSlaRelatedProperties: MssqlSlaRelatedPropertiesInput
}
# Supported in v5.0+
type MssqlDefaultPropertiesOnClusterReply {
  # Required. Supported in v5.0+
  # v5.0-v5.2: True to enable CBT based backup, false to disable.
  # v5.3+: True to enable a CBT-based backup, false to disable a CBT-based backup.
  cbtStatus: Boolean!

  # Required. Supported in v5.0+
  logBackupFrequencyInSeconds: Long!

  # Supported in v5.3+
  logRetentionTimeInHours: Int

  # Supported in v7.0+
  # Use the default backup location configured in SQL Server for file-based log backups.
  shouldUseDefaultBackupLocation: Boolean
}
# Supported in v5.2+
input MssqlDownloadFromArchiveConfigInput {
  # Required. Supported in v5.2+
  recoveryPoint: MssqlRecoveryPointInput!
}
# Input for getting restore files of a SQL Server database.
input MssqlGetRestoreFilesV1Input {
  # LSN to recover to. This value or the time are required.
  lsn: String

  # Recovery fork GUID of LSN to recover to. Meaningful only when lsn is specified.
  recoveryForkGuid: String

  # Time, in ISO8601 date-time format, to recover to. For example, \"2016-01-01T01:23:45.678\". This value or the LSN are required.
  time: DateTime

  # Required. ID of the Microsoft SQL database.
  id: String!
}
# SQL Server instance.
type MssqlInstance implements HierarchyObject , CdmHierarchyObject , MssqlTopLevelDescendantType , PhysicalHostDescendantType , PhysicalHostPhysicalChildType , WindowsClusterDescendantType , WindowsClusterLogicalChildType {
  # List of reasons that a SQL Server instance cannot be protected.
  unprotectableReasons: [String!]!

  # Number of seconds between two log backups. When the value is set to 0, log backups are not enabled. When the value is set to -1, the default log backup frequency of the Rubrik cluster is used. When the value is set to -2, the log backup frequency is derived from the SLA Domain.
  logBackupFrequencyInSeconds: Long!

  # Number of hours to retain a log backup. When the value is set to -1, the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired. When the value is set to -2, the default log backup retention of the Rubrik cluster is used. When the value is set to -3, the log backup retention is derived from the SLA Domain.
  logBackupRetentionInHours: Int!

  # Interval, in seconds, between the deletion of archived log files whose 'nextTime' field specifies a time longer than this interval. To specify an interval, enter a positive integer. To immediately delete archived log files regardless of age, specify an interval of -1. To preserve all archived log files, specify an interval of -2.
  hostLogRetention: Long!

  # Boolean flag indicating if the instance derives log backup configurations from SLA.
  hasLogConfigFromSla: Boolean!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MssqlInstanceDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): MssqlInstanceLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# SQL Server instance descendant.
interface MssqlInstanceDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MssqlInstanceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MssqlInstanceDescendantTypeConnection {
  # List of MssqlInstanceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MssqlInstanceDescendantTypeEdge!]!

  # List of MssqlInstanceDescendantType objects.
  nodes: [MssqlInstanceDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MssqlInstanceDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MssqlInstanceDescendantType object. This wrapper is used for pagination.
type MssqlInstanceDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MssqlInstanceDescendantType object wrapped by this edge.
  node: MssqlInstanceDescendantType!
}
# SQL Server instance logical child.
interface MssqlInstanceLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MssqlInstanceLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MssqlInstanceLogicalChildTypeConnection {
  # List of MssqlInstanceLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MssqlInstanceLogicalChildTypeEdge!]!

  # List of MssqlInstanceLogicalChildType objects.
  nodes: [MssqlInstanceLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MssqlInstanceLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MssqlInstanceLogicalChildType object. This wrapper is used for pagination.
type MssqlInstanceLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MssqlInstanceLogicalChildType object wrapped by this edge.
  node: MssqlInstanceLogicalChildType!
}
# Supported in v5.0+
type MssqlInstanceSummary {
  # Supported in v5.0+
  # The address of the instance in a Windows server failover cluster, populated only if it belongs to one.
  clusterInstanceAddress: String

  # Supported in v5.0+
  # SLA Domain ID assigned to instance.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # SLA Domain name assigned to instance.
  configuredSlaDomainName: String

  # Required. Supported in v5.0+
  id: String!

  # Supported in v5.0+
  internalTimestamp: Long

  # Supported in v5.0+
  name: String

  # Required. Supported in v5.0+
  primaryClusterId: String!

  # Required. Supported in v5.0+
  rootProperties: MssqlRootProperties

  # Supported in v5.0+
  version: String

  # Supported in v5.1+
  # Boolean value that identifies a Retention Lock SLA Domain. Value is true when the SLA Domain assigned to the instance is Retention Locked and false when it is not.
  isRetentionLocked: Boolean

  # Supported in v5.2+
  # Specifies whether the SLA Domain is used for protection or retention.
  configuredSlaDomainType: String
  mssqlNonSlaProperties: MssqlNonSlaProperties
  mssqlSlaRelatedProperties: MssqlSlaRelatedProperties
  protectionDateV50: String
  protectionDateV51: String
  protectionDateV52: String
  protectionDateV53: String
  protectionDateV60: DateTime
  protectionDateV70: DateTime
  protectionDateV80: DateTime
  protectionDateV81: DateTime
  protectionDateV90: DateTime

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by Rubrik.
  unprotectableReasonsV50: [MssqlUnprotectableReason!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV51: [String!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV52: [String!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV53: [String!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV60: [String!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV70: [String!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV80: [String!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV81: [String!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV90: [String!]!
  protectionDateV91: DateTime
  protectionDateV92: DateTime

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV91: [String!]!

  # A list of reasons that all the SQL Server databases in a SQL Server instance cannot be protected by the Rubrik CDM.
  unprotectableReasonsV92: [String!]!
}
# Supported in v5.0+
type MssqlInstanceSummaryListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [MssqlInstanceSummary!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
input MssqlLogShippingCreateConfigInput {
  # Supported in v5.0+
  # Maximum number of parallel data streams that can be used to copy data to the target system.
  maxDataStreams: Int

  # Supported in v5.0+
  # The path to the default target location for data file storage.
  targetDataFilePath: String

  # Supported in v5.0+
  # Array of database file storage paths. Each path is the target storage location for a database file. Values in this array override the values in targetDataFilePath and targetLogFilePath for the specified database files.
  targetFilePaths: [MssqlDbFileExportPathInput!] = []

  # Supported in v5.0+
  # The path to the location of the log files.
  targetLogFilePath: String

  # State options of a SQL Server log shipping target.
  mssqlLogShippingTargetStateOptions: MssqlLogShippingTargetStateOptionsInput

  # Required. Supported in v5.0+
  # The name of the secondary database.
  targetDatabaseName: String!

  # Required. Supported in v5.0+
  # The ID of the SQL Server instance that hosts the secondary database.
  targetInstanceId: String!
}
# Supported in v5.3+
input MssqlLogShippingCreateConfigV2Input {
  # Supported in v5.3+
  # Maximum number of makeup reseed attempts during a 24 hour period.
  makeupReseedLimit: Int

  # Configuration for creating a SQL Server log shipping target.
  mssqlLogShippingCreateConfig: MssqlLogShippingCreateConfigInput
}
# Supported in v5.0+
type MssqlLogShippingLinks {
  # Required. Supported in v5.0+
  primaryDatabase: Link

  # Supported in v5.0+
  secondaryDatabase: Link

  # Required. Supported in v5.0+
  secondaryInstance: Link

  # Supported in v5.0+
  seedRequest: Link
}
# Supported in v5.0+
# v5.0-v5.2: Secondary database states for log shipping configurations which have a status of OK.
# v5.3+: Secondary database states for log shipping configurations with a status of OK.
enum MssqlLogShippingOkState {
  MSSQL_LOG_SHIPPING_OK_STATE_RESTORING
  MSSQL_LOG_SHIPPING_OK_STATE_STANDBY
}
# Supported in v5.0+
input MssqlLogShippingReseedConfigInput {
  # State options of a SQL Server log shipping target.
  mssqlLogShippingTargetStateOptions: MssqlLogShippingTargetStateOptionsInput
}
# Supported in v5.0+
# v5.0-v5.2: Status of a log shipping configuration.
# v5.3: Status of the log shipping configuration. One of:
# v6.0+: Status of the log shipping configuration.
enum MssqlLogShippingStatus {
  MSSQL_LOG_SHIPPING_STATUS_BROKEN
  MSSQL_LOG_SHIPPING_STATUS_INITIALIZING
  MSSQL_LOG_SHIPPING_STATUS_OK
  MSSQL_LOG_SHIPPING_STATUS_STALE
}
# Supported in v5.0+
type MssqlLogShippingStatusInfo {
  # Required. Supported in v5.0+
  # v5.0-v5.2: Detailed message describing the current status of the log shipping configuration.
  # v5.3+: Detailed message describing the status of the log shipping configuration.
  message: String!

  # Supported in v5.0+
  status: MssqlLogShippingStatus!
}
# Supported in v5.0+
type MssqlLogShippingSummary {
  # Required. Supported in v5.0+
  # v5.0-v5.2: The ID assigned to the log shipping configuration object.
  # v5.3+: ID assigned to the log shipping configuration object.
  id: String!

  # Supported in v5.0+
  # v5.0-v5.2: The number of milliseconds between the time the latest backup was applied to the secondary database and when that backup was taken on the primary database.
  # v5.3+: Number of milliseconds elapsed since the latest backup was applied to the secondary database and the time the backup was taken on the primary database.
  lagTime: Long

  # Supported in v5.0+
  # v5.0-v5.2: The timestamp of the last transaction that was applied using the specified log shipping configuration object.
  # v5.3+: Timestamp of the last transaction applied using the specified log shipping configuration object.
  lastAppliedPoint: DateTime

  # Required. Supported in v5.0+
  # v5.0-v5.2: The location of a specified secondary database in the format "host/instance".
  # v5.3+: Location of a specified secondary database. Location uses this format: "host/instance".
  location: String!

  # Required. Supported in v5.0+
  # v5.0-v5.2: The ID of the primary database.
  # v5.3+: ID of the primary database.
  primaryDatabaseId: String!

  # Required. Supported in v5.0+
  # v5.0-v5.2: The name of the primary database.
  # v5.3+: Name of the primary database.
  primaryDatabaseName: String!

  # Supported in v5.0+
  # v5.0-v5.2: The ID of the secondary database.
  # v5.3+: ID of the secondary database.
  secondaryDatabaseId: String

  # Required. Supported in v5.0+
  # v5.0-v5.2: The name of the secondary database.
  # v5.3+: Name of the secondary database.
  secondaryDatabaseName: String!

  # Supported in v5.0+
  # The current state of the secondary database.
  state: String

  # Required. Supported in v5.0+
  status: MssqlLogShippingStatusInfo

  # Supported in v5.2+
  # v5.2: Configured log backup frequency of the primary database, in seconds.
  # v5.3+: Log backup frequency, in seconds, of the primary database.
  primaryDatabaseLogBackupFrequency: Long
}
# Supported in v5.3+
type MssqlLogShippingSummaryV2 {
  # Supported in v5.3+
  # Maximum number of makeup reseed attempts during a 24 hour period.
  makeupReseedLimit: Int
  mssqlLogShippingSummary: MssqlLogShippingSummary
}
# Supported in v5.3+
type MssqlLogShippingSummaryV2ListResponse {
  # Supported in v5.3+
  # List of matching objects.
  data: [MssqlLogShippingSummaryV2!]!

  # Supported in v5.3+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.3+
  # Total list responses.
  total: Int

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# SQL Server log shipping target.
type MssqlLogShippingTarget {
  # Forever ID of the log shipping target.
  fid: String!

  # Internal ID of the log shipping target.
  cdmId: String!

  # Location of the log shipping target.
  location: String!

  # Lag time of the log shipping target.
  lagTimeFromPrimary: Long!

  # Last applied point of the log shipping target.
  lastAppliedPoint: DateTime

  # Status of the log shipping target.
  status: String!

  # State of the log shipping target.
  state: String!

  # Frequency that the primary database takes log backups.
  logFrequency: Long!

  # Secondary database of the log shipping target.
  secondaryDatabase: MssqlDatabase

  # Secondary instance of the log shipping target.
  secondaryInstance: MssqlInstance

  # Primary database of the log shipping target.
  primaryDatabase: MssqlDatabase

  # Cluster of the log shipping target.
  cluster: Cluster

  # Primary cluster of the log shipping target.
  primaryCluster: Cluster
}
# Paginated list of MssqlLogShippingTarget objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MssqlLogShippingTargetConnection {
  # List of MssqlLogShippingTarget objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MssqlLogShippingTargetEdge!]!

  # List of MssqlLogShippingTarget objects.
  nodes: [MssqlLogShippingTarget!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MssqlLogShippingTarget objects matching the request arguments.
  count: Int!
}
# Wrapper around the MssqlLogShippingTarget object. This wrapper is used for pagination.
type MssqlLogShippingTargetEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MssqlLogShippingTarget object wrapped by this edge.
  node: MssqlLogShippingTarget!
}
# Filter for MSSQL log shipping target results.
enum MssqlLogShippingTargetFilterField {
  # Cluster UUID filter field for MSSQL log shipping target results.
  CLUSTER_UUID

  # Primary DB CDM ID filter field for MSSQL log shipping
  # target results.
  PRIMARY_DB_ID

  # Primary name filter field for MSSQL log shipping
  # target results.
  PRIMARY_NAME

  # Secondary name filter field for MSSQL log shipping
  # target results.
  SECONDARY_NAME

  # Cluster filter field for MSSQL log shipping target results.
  STATUS
}
# Filter Mssql log shipping target results.
input MssqlLogShippingTargetFilterInput {
  # Type of filter.
  field: MssqlLogShippingTargetFilterField = CLUSTER_UUID

  # Values for the filter type.
  texts: [String!] = []
}
# Parameters to sort MSSQL log shipping target results.
enum MssqlLogShippingTargetSortByField {
  # Last applied point sort by field for MSSQL log shipping target
  # results.
  LAST_APPLIED_POINT

  # Location sort by field for MSSQL log shipping target results.
  LOCATION

  # Primary  name sort by field for MSSQL log shipping target
  # results.
  PRIMARY_NAME

  # Secondary name sort by field for MSSQL log shipping target
  # results.
  SECONDARY_NAME
}
# Sort Mssql log shipping target results.
input MssqlLogShippingTargetSortByInput {
  # Field for Mssql log shipping target sort by.
  field: MssqlLogShippingTargetSortByField = SECONDARY_NAME

  # Sort order for Mssql log shipping target sort by.
  sortOrder: SortOrder = ASC
}
# Supported in v5.0+
input MssqlLogShippingTargetStateOptionsInput {
  # Supported in v5.0+
  # v5.0-v5.2: Whether to automatically disconnect users from a secondary database in Standby mode when a restore operation is performed. If this value is false and users remain connected, then any scheduled restore operations will fail. If the "state" field is `RESTORING`, this value can be omitted and will otherwise be ignored.
  # v5.3+: Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. If the "state" field is `RESTORING`, this value can be omitted and is ignored.
  shouldDisconnectStandbyUsers: Boolean

  # Required. Supported in v5.0+
  state: MssqlLogShippingOkState!
}
# Supported in v5.3+
input MssqlLogShippingUpdateV2Input {
  # Supported in v5.3+
  # Maximum number of makeup reseed attempts during a 24 hour period.
  makeupReseedLimit: Int
}
# Supported in v5.0+
type MssqlMissedRecoverableRange {
  # Required. Supported in v5.0+
  beginTime: DateTime

  # Required. Supported in v5.0+
  description: String!

  # Required. Supported in v5.0+
  endTime: DateTime

  # Required. Supported in v5.0+
  errorType: String!

  # Supported in v5.0+
  firstError: MssqlMissedRecoverableRangeError

  # Supported in v5.0+
  lastError: MssqlMissedRecoverableRangeError
}
# Supported in v5.0+
type MssqlMissedRecoverableRangeError {
  # Supported in v5.0+
  eventMessage: String

  # Supported in v5.0+
  eventSeriesId: String

  # Required. Supported in v5.0+
  time: DateTime
}
# Supported in v5.0+
type MssqlMissedRecoverableRangeListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [MssqlMissedRecoverableRange!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0
type MssqlNonSlaProperties {
  # Supported in v5.0
  # Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
  copyOnly: Boolean

  # Supported in v5.0
  # Seconds between two log backups. A value of 0 disables log backup.
  logBackupFrequencyInSeconds: Int

  # Supported in v5.0
  # Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
  logRetentionHours: Int
}
# Non-SLA-Domain properties of a SQL Server object.
input MssqlNonSlaPropertiesInput {
  # Supported in v5.0
  # Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
  copyOnly: Boolean

  # Supported in v5.0
  # Seconds between two log backups. A value of 0 disables log backup.
  logBackupFrequencyInSeconds: Int

  # Supported in v5.0
  # Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
  logRetentionHours: Int
}
# Supported in v5.0+
type MssqlRecoverableRange {
  # Required. Supported in v5.0+
  beginTime: DateTime

  # Required. Supported in v5.0+
  endTime: DateTime

  # Required. Supported in v5.0+
  isMountAllowed: Boolean!

  # Required. Supported in v5.0+
  status: String!
}
# Supported in v5.0+
type MssqlRecoverableRangeListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [MssqlRecoverableRange!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
input MssqlRecoveryPointInput {
  # Supported in v5.0+
  lsnPoint: LsnRecoveryPointInput

  # Recovery point specified in the form of a timestamp (in milliseconds). Deprecated. Use 'date' instead.
  timestampMs: Long

  # Supported in v5.2+
  # Recovery point specified in ISO8601 format, such as "2016-01-01T01:23:45.678".
  date: DateTime
}
# Supported in v5.0+
type MssqlRestoreEstimateResult {
  # Required. Supported in v5.0+
  # v5.0-v5.2: Estimate of number of bytes that need to be downloaded from the cloud.
  # v5.3+: Estimate of the number of bytes to be downloaded from the cloud.
  bytesFromCloud: Long!
}
# Input for getting a byte size estimate for a restore or export.
input MssqlRestoreEstimateV1Input {
  # LSN to recover to. This value or the LSN are required.
  lsn: String

  # Recovery fork GUID of LSN to recover to. Meaningful only when lsn is specified.
  recoveryForkGuid: String

  # Time, in ISO8601 date-time format, to recover to. For example, \"2016-01-01T01:23:45.678\". This value or the LSN are required.
  time: DateTime

  # Required. ID of the Microsoft SQL database.
  id: String!
}
# Supported in v5.0+
type MssqlRestoreFile {
  # Required. Supported in v5.0+
  # Original file ID of the database file to be restored.
  fileId: Long!

  # Required. Supported in v5.0+
  # Logical name of the database file to be restored.
  logicalName: String!

  # Required. Supported in v5.0+
  # Original filename of the database file to be restored.
  originalName: String!

  # Required. Supported in v5.0+
  # v5.0-v5.2: Original path of the database file to be restored.
  # v5.3+: Original path to the database file to be restored.
  originalPath: String!
  fileType: MssqlDatabaseFileType!
}
# Supported in v5.0+
type MssqlRootProperties {
  # Supported in v5.0+
  # ID of the root of this object.
  rootId: String

  # Required. Supported in v5.0+
  # Name of the root of this object.
  rootName: String!

  # Supported in v5.3+
  # Role of the root object for this object if the root object is a Host and part of a **_MssqlAvailabilityGroup_**.
  rootRole: String
  rootType: MssqlRootPropertiesRootType!
}
enum MssqlRootPropertiesRootType {
  MSSQL_ROOT_PROPERTIES_ROOT_TYPE_HOST
  MSSQL_ROOT_PROPERTIES_ROOT_TYPE_MSSQL_AVAILABILITY_GROUP
  MSSQL_ROOT_PROPERTIES_ROOT_TYPE_WINDOWS_CLUSTER
}
# Supported in v5.0+
type MssqlScriptDetail {
  # Required. Supported in v5.0+
  # The script to be run.
  scriptPath: String!

  # Required. Supported in v5.0+
  # Time (in ms) after which the script will be terminated if it has not completed.
  timeoutMs: Long!
  scriptErrorAction: ScriptErrorAction!
}
# Supported in v5.0+
input MssqlScriptDetailInput {
  # Required. Supported in v5.0+
  # Action to take if the script returns an error or times out.
  scriptErrorAction: ScriptErrorAction!

  # Required. Supported in v5.0+
  # The script to be run.
  scriptPath: String!

  # Required. Supported in v5.0+
  # Time (in ms) after which the script will be terminated if it has not completed.
  timeoutMs: Long!
}
# Supported in v5.1+
input MssqlSlaDomainAssignInfoInput {
  # Supported in v7.0+
  # A Boolean value indicating whether to retain existing snapshots of assigned objects with the specified SLA Domain configuration. The default value is 'true'. If objects are unprotected, existing snapshots are retained according to the value of the 'existingSnapshotRetention' parameter. For unprotected objects, this value is empty. When an SLA Domain assignment is cleared from an object, the retention strategy described by the 'existingSnapshotRetention' parameter is used only when the object can inherit a protection SLA Domain from an ancestor object.
  shouldApplyToExistingSnapshots: Boolean

  # Supported in v7.0+
  # A Boolean value. When true, specifies that the retention changes corresponding to the new SLA Domain are applied to non-policy snapshots in addition to existing policy-based snapshots.
  shouldApplyToNonPolicySnapshots: Boolean

  # SLA Domain properties of a SQL Server object.
  mssqlSlaPatchProperties: MssqlSlaPatchPropertiesInput

  # Supported in v5.1+
  existingSnapshotRetention: ExistingSnapshotRetention

  # Required. Supported in v5.1+
  # List of SQL Server object IDs which should be assigned these properties.
  ids: [String!]!
}
# Supported in v5.1+
input MssqlSlaPatchPropertiesInput {
  # Supported in v5.1+
  # v5.1: SLA Domain ID assigned to instance.
  # v5.2+: SLA Domain ID assigned to instance. Existing snapshots of the instance will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.3+
  # Determines whether to use the configured default value of log backup retention.
  useConfiguredDefaultLogRetention: Boolean

  # Non-SLA-Domain properties of a SQL Server object.
  mssqlSlaRelatedProperties: MssqlSlaRelatedPropertiesInput
}
# Supported in v5.1+
type MssqlSlaRelatedProperties {
  # Supported in v5.1+
  # Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
  copyOnly: Boolean

  # Supported in v5.1+
  # Seconds between two log backups. A value of 0 disables log backup.
  logBackupFrequencyInSeconds: Int

  # Supported in v5.1+
  # Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
  logRetentionHours: Int

  # Supported in v7.0+
  # A boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
  hasLogConfigFromSla: Boolean

  # Supported in v9.0+
  # Specifies the interval, in seconds, the Rubrik cluster waits before the next log backup job deletes MSSQL log files whose 'nextTime' field specifies a time longer than this interval. To specify a wait interval, enter a positive integer. To immediately delete log files regardless of age, specify an interval of -1. To preserve all log files, specify an interval of -2.
  hostLogRetention: Int
}
# Supported in v5.1+
input MssqlSlaRelatedPropertiesInput {
  # Supported in v5.1+
  # Boolean value that specifies whether or not to perform copy-only backups of the database. When true, database backups are copy-only backups. When false, database backups are full backups.
  copyOnly: Boolean

  # Supported in v5.1+
  # Seconds between two log backups. A value of 0 disables log backup.
  logBackupFrequencyInSeconds: Int

  # Supported in v5.1+
  # Number of hours to retain a log backup. When the value is set to -1 the Rubrik cluster retains the log backup until the database snapshots that precede the log backup have expired.
  logRetentionHours: Int

  # Supported in v7.0+
  # A boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
  hasLogConfigFromSla: Boolean

  # Supported in v9.0+
  # Specifies the interval, in seconds, the Rubrik cluster waits before the next log backup job deletes MSSQL log files whose 'nextTime' field specifies a time longer than this interval. To specify a wait interval, enter a positive integer. To immediately delete log files regardless of age, specify an interval of -1. To preserve all log files, specify an interval of -2.
  hostLogRetention: Int
}
# Mssql top level descendant.
interface MssqlTopLevelDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of MssqlTopLevelDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type MssqlTopLevelDescendantTypeConnection {
  # List of MssqlTopLevelDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [MssqlTopLevelDescendantTypeEdge!]!

  # List of MssqlTopLevelDescendantType objects.
  nodes: [MssqlTopLevelDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of MssqlTopLevelDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the MssqlTopLevelDescendantType object. This wrapper is used for pagination.
type MssqlTopLevelDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual MssqlTopLevelDescendantType object wrapped by this edge.
  node: MssqlTopLevelDescendantType!
}
# Supported in v5.0
type MssqlUnprotectableReason {
  # Required. Supported in v5.0
  # A reason that a SQL Server database or instance cannot be protected by Rubrik.
  message: String!
  unprotectableType: MssqlUnprotectableType!
}
# Supported in v5.0
# Unprotectable type
enum MssqlUnprotectableType {
  MSSQL_UNPROTECTABLE_TYPE_INSUFFICIENT_PERMISSIONS
}
# Name collision resolution rule.
enum NameCollisionRule {
  # Append suffix to the item name in case of name collision.
  APPEND

  # Overwrite existing item in case of name collision.
  OVERWRITE
}
# Filter to return objects with a given substring in their name.
input NameSubstringFilter {
  nameSubstring: String!
}
# Organization name validity.
enum NameValidity {
  # Name already exists.
  ALREADY_EXISTS

  # Illegal name.
  ILLEGAL

  # Name validity unknown.
  UNKNOWN

  # Name is valid.
  VALID
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Credentials to add or update NAS system with API integration.
input NasApiCredentialsInput {
  # Supported in v7.0+
  # TLS certification to validate NAS server.
  apiCertificate: String

  # Supported in v7.0+
  # Password associated with the NAS API user account.
  apiPassword: String

  # Supported in v7.0+
  # Username to access the vendor-specific NAS API.
  apiUsername: String

  # Supported in v7.0+
  # The ID corresponding to the imported certificate.
  certificateId: String
}
# Supported in v5.0+
type NasBaseConfig {
  # Supported in v5.0+
  # TLS certification to validate NAS server.
  apiCertificate: String

  # Supported in v5.0+
  # API endpoint to access NAS API 'FLASHBLADE'.
  apiEndpoint: String

  # Supported in v5.0+
  # Hostname or IP used in the NAS API calls.
  apiHostname: String

  # Supported in v5.0+
  # v5.0-v5.3: username to access NAS API
  # v6.0+: Username to access NAS API.
  apiUsername: String

  # Required. Supported in v5.0+
  # v5.0-v5.3: Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'
  # v6.0+: Specifies the NAS vendor, which can be ISILON, NETAPP, FLASHBLADE, or NUTANIX.
  vendorType: String!

  # Supported in v5.0+
  # Name of the Isilon zone that data IP belongs to.
  zoneName: String

  # Supported in v5.1
  # If snapdiff is enabled on NetApp NAS host
  isSnapdiffEnabled: Boolean

  # Supported in v5.2+
  # v5.2: A Boolean value that specifies whether Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
  # v5.3+: Indicates if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata fetches during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
  isIsilonChangelistEnabled: Boolean

  # Supported in v5.2+
  # v5.2: A Boolean value that specifies whether SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
  # v5.3+: Indicates if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata fetches during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
  isNetAppSnapDiffEnabled: Boolean

  # Supported in v5.3+
  # Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
  isShareAutoDiscoveryEnabled: Boolean

  # Supported in v6.0+
  # Indicates whether CFT (Change File Tracking) is enabled on the Nutanix NAS share. When this value is 'true', metadata fetches during backup operations use the Nutanix CFT feature. The CFT feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time  during a backup job.
  isNutanixCftEnabled: Boolean
}
# Supported in v5.0+
input NasConfigInput {
  # Supported in v5.0+
  # TLS certification to validate NAS server.
  apiCertificate: String

  # Supported in v5.0+
  # API endpoint to access NAS API 'FLASHBLADE'.
  apiEndpoint: String

  # Supported in v5.0+
  # Hostname or IP used in the NAS API calls.
  apiHostname: String

  # Supported in v5.0+
  # v5.0-v5.3: Password to access NAS API 'ISILON/NETAPP'
  # v6.0+: Password to access NAS vendor API.
  apiPassword: String

  # Supported in v5.0+
  # API token to access NAS API 'FLASHBLADE'.
  apiToken: String

  # Supported in v5.0+
  # v5.0-v5.3: Username to access NAS API 'ISILON/NETAPP'
  # v6.0+: Username to access NAS vendor API.
  apiUsername: String

  # Supported in v5.0+
  # Name of the Isilon zone that data IP belongs to.
  zoneName: String

  # Specifies whether SnapDiff is enabled on NetApp NAS.
  isSnapdiffEnabled: Boolean

  # Specifies if Changelist is enabled on Isilon NAS share. When this value is 'true', metadata retrievals during backup operations use the Isilon Changelist feature. The Changelist feature improves incremental backup performance by tracking the difference between two snapshots and reducing the metadata scanning time during a backup job.
  isIsilonChangelistEnabled: Boolean

  # Specifies if SnapDiff is enabled on NetApp NAS share. When this value is 'true', metadata retrievals during backup operations use the NetApp SnapDiff feature. The SnapDiff feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
  isNetAppSnapDiffEnabled: Boolean

  # Supported in v5.3+
  # Specifies whether shares on the NAS host are automatically discovered. When this value is 'true', Rubrik periodically (every 30 minutes by default) connects to the NAS host to discover NFS and SMB shares.
  isShareAutoDiscoveryEnabled: Boolean

  # Specifies whether CFT (Change File Tracking) is enabled on the Nutanix NAS share. When this value is 'true', metadata retrievals during backup operations use the Nutanix CFT feature. The CFT feature improves incremental backup performance by tracking the difference between two snapshots, reducing the metadata scanning time during a backup job.
  isNutanixCftEnabled: Boolean

  # Required. Supported in v5.0+
  # v5.0-v5.3: Type of NAS vendor 'ISILON/NETAPP/FLASHBLADE'
  # v6.0+: Specifies the NAS vendor, which can be ISILON, NETAPP, FLASHBLADE, or NUTANIX.
  vendorType: String!
}
# NAS Fileset protected object.
type NasFileset implements CdmHierarchyObject , CdmHierarchySnappableNew , HierarchyObject , HierarchySnappable , NasSystemDescendantType , NasNamespaceDescendantType , NasShareDescendantType , NasShareLogicalChildType {
  # The Rubrik CDM-assigned UUID of the NAS fileset.
  cdmId: String!

  # The paths to include in the backup of the fileset.
  pathsIncluded: [String!]!

  # The paths to be excluded from the fileset's inclusion rules.
  pathsExcluded: [String!]!

  # The exceptions to the fileset's exclusion rules.
  pathsExceptions: [String!]!

  # Whether this object is a relic.
  isRelic: Boolean!

  # Whether this is a NAS Direct Archive fileset.
  isPassThrough: Boolean!

  # Whether resolution of symlinks is supported on this fileset.
  symlinkResolutionEnabled: Boolean!

  # Whether optimized backup of hardlinks is supported on this fileset.
  hardlinkSupportEnabled: Boolean!

  # Information pertaining to migration of the NAS host from Rubrik CDM to RSC.
  nasMigrationInfo: String!

  # The object's FID.
  id: UUID!

  # The NAS share to which this fileset belongs.
  nasShare: NasShare

  # The associated fileset template's FID.
  templateFid: UUID!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# NAS namespace instance associated with registered NAS system.
type NasNamespace implements CdmHierarchyObject , HierarchyObject , NasSystemDescendantType , NasSystemLogicalChildType {
  # Rubrik CDM ID of the registered NAS system.
  cdmId: UUID!

  # Object ID.
  id: UUID!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NasNamespaceDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NasNamespaceLogicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasNamespace objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasNamespaceConnection {
  # List of NasNamespace objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasNamespaceEdge!]!

  # List of NasNamespace objects.
  nodes: [NasNamespace!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasNamespace objects matching the request arguments.
  count: Int!
}
# NAS namespace descendant type.
interface NasNamespaceDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasNamespaceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasNamespaceDescendantTypeConnection {
  # List of NasNamespaceDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasNamespaceDescendantTypeEdge!]!

  # List of NasNamespaceDescendantType objects.
  nodes: [NasNamespaceDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasNamespaceDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NasNamespaceDescendantType object. This wrapper is used for pagination.
type NasNamespaceDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasNamespaceDescendantType object wrapped by this edge.
  node: NasNamespaceDescendantType!
}
# Wrapper around the NasNamespace object. This wrapper is used for pagination.
type NasNamespaceEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasNamespace object wrapped by this edge.
  node: NasNamespace!
}
# NAS namespace logical child type.
interface NasNamespaceLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasNamespaceLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasNamespaceLogicalChildTypeConnection {
  # List of NasNamespaceLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasNamespaceLogicalChildTypeEdge!]!

  # List of NasNamespaceLogicalChildType objects.
  nodes: [NasNamespaceLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasNamespaceLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NasNamespaceLogicalChildType object. This wrapper is used for pagination.
type NasNamespaceLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasNamespaceLogicalChildType object wrapped by this edge.
  node: NasNamespaceLogicalChildType!
}
# NAS share instance of a registered NAS system.
type NasShare implements CdmHierarchyObject , HierarchyObject , NasSystemDescendantType , NasSystemLogicalChildType , NasNamespaceDescendantType , NasNamespaceLogicalChildType , NasVolumeDescendantType , NasVolumeLogicalChildType {
  # File sharing protocol (NFS or SMB).
  shareType: String!

  # NFS/SMB export path for the NAS share.
  exportPoint: String!

  # Specifies whether the Changelist option is enabled.
  isChangelistEnabled: Boolean!

  # Specifies if the share is deleted on the NAS System.
  isStale: Boolean!

  # Specifies if the share is hidden.
  isHidden: Boolean!

  # Specifies whether this object is a relic.
  isRelic: Boolean!

  # Rubrik CDM ID of the registered NAS system.
  cdmId: UUID!

  # Specifies whether the NAS shares are manually configured on the NAS system.
  isNasShareManuallyAdded: Boolean!

  # Object ID.
  id: UUID!

  # The NAS System to which this NAS Share belongs.
  nasSystem: NasSystem

  # NAS Share Protection Fileset.
  primaryFileset: NasFileset

  # The source of the NAS Share: CDM or NAS-DA.
  connectedThrough: ConnectedThroughEnumType!

  # Host address of the NAS Share.
  hostAddress: String!

  # The host ID needed to restore to this share.
  hostIdForRestore: String!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NasShareDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NasShareLogicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# NAS share descendant type.
interface NasShareDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasShareDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasShareDescendantTypeConnection {
  # List of NasShareDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasShareDescendantTypeEdge!]!

  # List of NasShareDescendantType objects.
  nodes: [NasShareDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasShareDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NasShareDescendantType object. This wrapper is used for pagination.
type NasShareDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasShareDescendantType object wrapped by this edge.
  node: NasShareDescendantType!
}
# NAS share logical child type.
interface NasShareLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasShareLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasShareLogicalChildTypeConnection {
  # List of NasShareLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasShareLogicalChildTypeEdge!]!

  # List of NasShareLogicalChildType objects.
  nodes: [NasShareLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasShareLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NasShareLogicalChildType object. This wrapper is used for pagination.
type NasShareLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasShareLogicalChildType object wrapped by this edge.
  node: NasShareLogicalChildType!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Properties of a NAS share.
input NasSharePropertiesInput {
  # Supported in v7.0+
  # Specifies whether Isilon changelist is enabled for the share.
  isIsilonChangelistEnabled: Boolean

  # Required. Supported in v7.0+
  # ID of NAS share.
  id: String!
}
# Instance of a registered NAS system.
type NasSystem implements CdmHierarchyObject , HierarchyObject {
  # OS version of the registered NAS system.
  osVersion: String

  # UTC timestamp of the most recent NAS system refresh job instance.
  lastRefreshTime: DateTime

  # Vendor type of the registered NAS system.
  vendorType: String!

  # Specifies whether the Changelist option is enabled.
  isChangelistEnabled: Boolean!

  # Specifies whether SMB is supported by the NAS System.
  isSmbSupported: Boolean!

  # Specifies whether NFS is supported by the NAS System.
  isNfsSupported: Boolean!

  # Specifies the connectivity status of the NAS System.
  lastStatus: NasSystemConnectivityStatus!

  # Specifies whether this object is a relic.
  isRelic: Boolean!

  # Rubrik CDM ID of the registered NAS system.
  cdmId: UUID!

  # Object ID.
  id: UUID!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NasSystemDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NasSystemLogicalChildTypeConnection!

  # The total number of volumes in this NAS system.
  volumeCount: Int!

  # The total number of shares in this NAS system.
  shareCount: Int!

  # The total number of namespaces in this NAS system.
  namespaceCount: Int!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasSystem objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasSystemConnection {
  # List of NasSystem objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasSystemEdge!]!

  # List of NasSystem objects.
  nodes: [NasSystem!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasSystem objects matching the request arguments.
  count: Int!
}
# NAS System connection status.
enum NasSystemConnectivityStatus {
  # NAS System is connected.
  CONNECTED

  # NAS System is connecting.
  CONNECTING

  # NAS System connector not deployed.
  CONNECTOR_NOT_DEPLOYED

  # NAS System is deleted.
  DELETED

  # NAS System is being deleted.
  DELETING

  # NAS System is disconnected.
  DISCONNECTED

  # NAS System is partially connected.
  PARTIALLY_CONNECTED

  # NAS System is refreshing.
  REFRESHING

  # NAS System is connected as a replication target.
  REPLICATION_TARGET

  # NAS System is connected as a secondary cluster.
  SECONDARY_CLUSTER

  # Unknown NAS System Connectivity.
  UNKNOWN_CONNECTIVITY_STATUS
}
# NAS system descendant type.
interface NasSystemDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasSystemDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasSystemDescendantTypeConnection {
  # List of NasSystemDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasSystemDescendantTypeEdge!]!

  # List of NasSystemDescendantType objects.
  nodes: [NasSystemDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasSystemDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NasSystemDescendantType object. This wrapper is used for pagination.
type NasSystemDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasSystemDescendantType object wrapped by this edge.
  node: NasSystemDescendantType!
}
# Wrapper around the NasSystem object. This wrapper is used for pagination.
type NasSystemEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasSystem object wrapped by this edge.
  node: NasSystem!
}
# NAS system logical child type.
interface NasSystemLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasSystemLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasSystemLogicalChildTypeConnection {
  # List of NasSystemLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasSystemLogicalChildTypeEdge!]!

  # List of NasSystemLogicalChildType objects.
  nodes: [NasSystemLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasSystemLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NasSystemLogicalChildType object. This wrapper is used for pagination.
type NasSystemLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasSystemLogicalChildType object wrapped by this edge.
  node: NasSystemLogicalChildType!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Input for registering a new NAS System.
input NasSystemRegisterInput {
  # Supported in v7.0+
  genericNasSystemParameters: GenericNasSystemParametersInput

  # Supported in v7.0+
  # Specifies the default Changelist setting for all shares in the Isilon NAS system.
  isIsilonChangelistEnabled: Boolean

  # Supported in v7.0+
  nasTmpApiCredentials: NasApiCredentialsInput

  # Supported in v9.0+
  nasFlashBladeApiCredentials: FlashBladeSystemParametersInput

  # Supported in v9.1+
  nutanixFileServerParameters: NutanixFileServerParametersInput

  # Required. Supported in v7.0+
  nasVendorType: NasVendorType!

  # Required. Supported in v7.0+
  hostname: String!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Input for updating a NAS system.
input NasSystemUpdateInput {
  # Supported in v7.0+
  # The updated Generic NAS system parameters.
  genericNasSystemParameters: GenericNasSystemParametersInput

  # Supported in v7.0+
  # The updated hostname of the NAS system.
  hostname: String

  # Supported in v7.0+
  # Specifies the default Changelist setting for all shares in the Isilon NAS system.
  isIsilonChangelistEnabled: Boolean

  # Supported in v7.0+
  # The updated API credentials of the NAS system.
  nasApiCredentials: NasApiCredentialsInput

  # Supported in v9.0+
  nasFlashBladeApiCredentials: FlashBladeSystemParametersInput

  # Supported in v9.1+
  nutanixFileServerParameters: NutanixFileServerParametersInput
}
# Supported in v5.2+
# NAS Vendor Type.
enum NasVendorType {
  NAS_VENDOR_TYPE_FLASHBLADE
  NAS_VENDOR_TYPE_GENERIC
  NAS_VENDOR_TYPE_ISILON
  NAS_VENDOR_TYPE_NETAPP
  NAS_VENDOR_TYPE_NUTANIX
  NAS_VENDOR_TYPE_NUTANIX_FILE_SERVER
}
# NAS volume instance in a registered NAS system.
type NasVolume implements CdmHierarchyObject , HierarchyObject , NasSystemDescendantType , NasSystemLogicalChildType , NasNamespaceDescendantType , NasNamespaceLogicalChildType {
  # Labels that can be applied to a newly created SnapMirror Cloud.
  snapMirrorLabels: [String!]!

  # Whether or not the NAS Volume is read-only.
  isReadonly: Boolean!

  # The size of the volume in bytes.
  sizeInBytes: Long!

  # The size that has been used of the volume in bytes.
  sizeUsedInBytes: Long!

  # Object ID.
  id: UUID!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NasVolumeDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NasVolumeLogicalChildTypeConnection!

  # The NAS System to which this NAS Volume belongs.
  nasSystem: NasSystem!

  # The NAS Namespace to which this NAS Volume belongs (if any).
  nasNamespace: NasNamespace

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# NAS volume descendant type.
interface NasVolumeDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasVolumeDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasVolumeDescendantTypeConnection {
  # List of NasVolumeDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasVolumeDescendantTypeEdge!]!

  # List of NasVolumeDescendantType objects.
  nodes: [NasVolumeDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasVolumeDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NasVolumeDescendantType object. This wrapper is used for pagination.
type NasVolumeDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasVolumeDescendantType object wrapped by this edge.
  node: NasVolumeDescendantType!
}
# NAS volume logical child type.
interface NasVolumeLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NasVolumeLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NasVolumeLogicalChildTypeConnection {
  # List of NasVolumeLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NasVolumeLogicalChildTypeEdge!]!

  # List of NasVolumeLogicalChildType objects.
  nodes: [NasVolumeLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NasVolumeLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NasVolumeLogicalChildType object. This wrapper is used for pagination.
type NasVolumeLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NasVolumeLogicalChildType object wrapped by this edge.
  node: NasVolumeLogicalChildType!
}
# Input for NAS Cloud Direct restore path pair.
input NascdRestorePathPairInput {
  # Path to be restored from. Must be non-empty.
  srcPath: String!

  # Path to restore to. Empty path to indicate overwrite.
  dstPath: String!
}
# BackEndCapacityReply is returned in response to a BackEndCapacityReq and
# holds the requested capacity.
type NcdBackEndCapacity {
  # The back-end capacity usage in bytes.
  usageInBytes: Long!
}
# FilesObjectProtectionStatusData represents a summary of the various types of
# object protection statuses and their individual counts as well as their delta
# in bytes for files.
type NcdFilesObjectProtectionStatusData {
  # The count of Protected objects or objects that have valid backups.
  protected: Long!

  # The total size in bytes of all objects.
  totalSizeInBytes: Long!
}
# FrontEndCapacityReply is returned in response to a FrontEndCapacityReq and
# holds the requested capacity.
type NcdFrontEndCapacity {
  # The front-end capacity usage in bytes.
  usageInBytes: Long!
}
# Type of NAS Cloud Direct virtual machine disk.
enum NcdHypervisorType {
  # HyperV Hypervisor Type.
  HYPERV_HYPERVISOR_TYPE

  # KVM Hypervisor Type.
  KVM_HYPERVISOR_TYPE

  # Nutanix Hypervisor Type.
  NUTANIX_AHV_HYPERVISOR_TYPE

  # VMware Hypervisor Type.
  VMWARE_HYPERVISOR_TYPE
}
# ObjectProtectionStatusReply is returned in response to a
# ObjectProtectionStatusReq and holds the requested object protection statuses.
type NcdObjectProtectionStatus {
  # The object protection status summary for files.
  files: NcdFilesObjectProtectionStatusData

  # The object protection status summary for shares.
  shares: NcdSharesObjectProtectionStatusData

  # The throughput.
  throughput: Long!

  # The average file size.
  averageFileSize: Long!
}
# ObjectsOverTimeData represents the object counts statistics broken out per
# object type as a data point from a timeseries perspective.
type NcdObjectsOverTimeData {
  # The total count of directories.
  directories: Int!

  # The total count of files.
  files: Int!

  # The total count of links.
  links: Int!

  # The timestamp of the data point.
  timestamp: DateTime
}
# SharesObjectProtectionStatusData represents a summary of the various types of
# object protection statuses and their individual counts as well as their delta
# in bytes for shares.
type NcdSharesObjectProtectionStatusData {
  # The count of Protected objects or objects that have valid backups.
  protected: Long!

  # The count of Not Protected objects or objects that have no backups.
  notProtected: Long!

  # The total size in bytes of all objects.
  totalSizeInBytes: Long!
}
# SlaComplianceData represents the job completion and status metrics as a data
# point from a timeseries perspective.
type NcdSlaComplianceData {
  # The total count of successful jobs.
  jobsPassing: Int!

  # The total count of failing jobs.
  jobsFailing: Int!

  # The timestamp of the data point.
  timestamp: DateTime
}
# TaskData represents a NAS Cloud Direct task
# and its associated fields.
type NcdTaskData {
  # The site at which the NAS Cloud Direct task took place.
  site: String!

  # The description of the NAS Cloud Direct task.
  description: String!

  # The end status of the NAS Cloud Direct task.
  status: NcdTaskStatus!

  # The timestamp of the NAS Cloud Direct task.
  timestamp: DateTime
}
# TaskStatus represents the status of a task.
enum NcdTaskStatus {
  # CANCELED represents the cancelled task status.
  CANCELED

  # FAILED represents the failed task status.
  FAILED

  # IN_PROGRESS represents the in progress task status.
  IN_PROGRESS

  # STATUS_UNSPECIFIED represents an unspecified task status.
  STATUS_UNSPECIFIED

  # SUCCESS represents the successful task status.
  SUCCESS
}
# UsageOverTimeData represents capacity statistics as a data point from a
# timeseries perspective.
type NcdUsageOverTimeData {
  # The amount of new data ingested.
  newInBytes: Long!

  # The amount of ingested data changed.
  changeInBytes: Long!

  # The timestamp of the data point.
  timestamp: DateTime
}
# NAS Cloud Direct virtual machine download URL information.
type NcdVmImageUrl {
  # URL to download NAS Cloud Direct virtual machine image.
  downloadUrl: String!

  # Sha256 checksum value of the download image.
  sha256: String!

  # Size of the NAS Cloud Direct virtual machine image.
  size: Long!
}
# Represents a GCP native network host project.
type NetworkHostProject {
  # GCP project ID.
  projectId: String!

  # GCP native ID.
  nativeId: String!

  # Name of the GCP project.
  name: String!
}
# Supported in v5.3+
type NetworkInfo {
  # Required. Supported in v5.3+
  # The ID of a user-configured vCenter network.
  id: String!

  # Required. Supported in v5.3+
  # The name of a user-configured vCenter network.
  name: String!
}
# Supported in v5.3+
type NetworkInfoListResponse {
  # Supported in v5.3+
  # List of matching objects.
  data: [NetworkInfo!]!

  # Supported in v5.3+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.3+
  # Total list responses.
  total: Int

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
type NetworkInterface {
  # Required. Supported in v5.0+
  # Interface name.
  interfaceName: String!

  # Required. Supported in v5.0+
  # Including both primary Ips and floating Ips.
  ipAddresses: [String!]!

  # Required. Supported in v5.0+
  # Netmask for addresses on this interface.
  netmask: String!

  # Supported in v5.0-v5.3
  # Node id
  node: String

  # Supported in v6.0+
  # Node id.
  nodeId: String

  # Supported in v6.0+
  # Hostname of the node.
  nodeName: String
  interfaceType: NetworkInterfaceType!
}
# Network interface for the Rubrik cluster.
input NetworkInterfaceDetails {
  # The type of network interface: Management or Data.
  type: ReplicationInterfaceType = DATA
}
# Supported in v5.0+
type NetworkInterfaceListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [NetworkInterface!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
# Type of network interfaces.
enum NetworkInterfaceType {
  NETWORK_INTERFACE_TYPE_DATA
  NETWORK_INTERFACE_TYPE_MANAGEMENT
  NETWORK_INTERFACE_TYPE_OTHER
  NETWORK_INTERFACE_TYPE_SERVICE
}
# Network rules for Azure storage account.
type NetworkRuleSet {
  # Default Action for any request coming for any IP for the Azure storage account.
  defaultAction: DefaultActionType!

  # IP rules for a specific set of IPs.
  ipRules: [IpRule!]!
}
# Network throttle information.
type NetworkThrottle {
  # Status of network throttle enablement.
  isEnabled: Boolean!

  # Default network throttle limit.
  defaultThrottleLimit: Float!

  # Active network throttle limit.
  currentThrottleLimit: Float!

  # Summary of scheduled throttles.
  scheduledThrottles: [NetworkThrottleSchedule!]!

  # Network interface name.
  networkInterface: String!
}
# Supported in v5.0+
# v5.0-v5.3: Resource types that support network throttling
# v6.0+: Resource types that support network throttling.
# 
enum NetworkThrottleResourceId {
  NETWORK_THROTTLE_RESOURCE_ID_ARCHIVAL_EGRESS
  NETWORK_THROTTLE_RESOURCE_ID_REPLICATION_EGRESS
}
# Summary of scheduled throttle.
type NetworkThrottleSchedule {
  # Network bandwidth throttle limit for a resource, in Mbps.
  throttleLimit: Float!

  # Days of the week on which to apply a scheduled network throttle.
  daysOfWeek: [DayOfWeek!]!

  # Denotes the start time. The start time should be an hour of the day.
  startHour: Int!

  # Denotes the end time. The end time should be an hour of the day.
  endHour: Int!
}
# Supported in v5.0+
type NetworkThrottleScheduleSummary {
  # Required. Supported in v5.0+
  # Array of int32 values that represent the days of the week on which to apply a scheduled network throttle. The days of the week are represented from 1-7 with Sunday as 1.
  daysOfWeek: [Int!]!

  # Required. Supported in v5.0+
  # An int64 value that represents the end time for a scheduled network throttle. The end time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
  endTime: Long!

  # Required. Supported in v5.0+
  # An int64 value that represents the start time for a scheduled network throttle. The start time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
  startTime: Long!

  # Required. Supported in v5.0+
  # Network bandwidth throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
  throttleLimit: Float!
}
# Supported in v5.0+
input NetworkThrottleScheduleSummaryInput {
  # Required. Supported in v5.0+
  # Array of int32 values that represent the days of the week on which to apply a scheduled network throttle. The days of the week are represented from 1-7 with Sunday as 1.
  daysOfWeek: [Int!]!

  # Required. Supported in v5.0+
  # An int64 value that represents the end time for a scheduled network throttle. The end time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
  endTime: Long!

  # Required. Supported in v5.0+
  # An int64 value that represents the start time for a scheduled network throttle. The start time should be an hour of the day in minutes. For example, 0, 12*60 and 24*60 are valid values.
  startTime: Long!

  # Required. Supported in v5.0+
  # Network bandwidth throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
  throttleLimit: Float!
}
# Supported in v5.0+
type NetworkThrottleSummaryListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [UpdateNetworkThrottleReply!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
input NetworkThrottleUpdateInput {
  # Supported in v5.0+
  # Default throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
  defaultThrottleLimit: Float

  # Supported in v5.0+
  # Boolean value that determines whether a throttle limit is enabled. Set to true to enable the throttle limit, or set to false to disable the throttle limit.
  isEnabled: Boolean

  # Supported in v5.0+
  # An array containing all of the scheduled throttle limits for a specified resource.
  scheduledThrottles: [NetworkThrottleScheduleSummaryInput!] = []

  # Supported in v5.2+
  # The network interface where outgoing traffic is throttled.
  networkInterface: String

  # Supported in v8.0+
  # Network port for archival throttling. This value can be specified only when enabling or updating the archive resource type for throttling.
  archivalThrottlePort: Int
}
# New compute configuration.
input NewComputeConfig {
  vnetName: String = ""
  subnetName: String = ""
  securityGroupName: String = ""
}
# Details of a new SSO Group that has not yet been authorized on Rubrik.
input NewSsoGroupInput {
  # Name of the SSO group.
  name: String!

  # Specifies whether the SSO group is an org admin or not.
  isOrgAdmin: Boolean!
}
# New storage account configuration.
input NewStorageAccountConfig {
  name: String = ""
  tier: StorageAccountTier = COOL
  sku: StorageAccountSku = STANDARD_LRS

  # The list of storage account within resource group.
  storages: [StorageAccountConfigItem!] = []
}
# Non-filesystem Anomaly analysis report from lambda service.
type NfAnomalyResult {
  # Unique ID for the anomaly.
  anomalyId: String!

  # The internal FID of the object.
  workloadFid: UUID!

  # The name of the object.
  workloadName: String!

  # The time at which the anomaly was detected.
  detectionTime: DateTime!

  # The type of the object.
  objectType: ObjectTypeEnum!

  # Specifies whether the snapshot is anomalous.
  isAnomaly: Boolean!

  # The Rubrik cluster of the object.
  cluster: Cluster!

  # The location of the object.
  location: String!
}
# Paginated list of NfAnomalyResult objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NfAnomalyResultConnection {
  # List of NfAnomalyResult objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NfAnomalyResultEdge!]!

  # List of NfAnomalyResult objects.
  nodes: [NfAnomalyResult!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NfAnomalyResult objects matching the request arguments.
  count: Int!
}
# Wrapper around the NfAnomalyResult object. This wrapper is used for pagination.
type NfAnomalyResultEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NfAnomalyResult object wrapped by this edge.
  node: NfAnomalyResult!
}
# Filter non-filesystem anomaly result data.
input NfAnomalyResultFilterInput {
  # Filter by Rubrik cluster ID.
  clusterUuid: [UUID!]

  # Start of filtering time range.
  startTime: DateTime

  # End of filtering time range.
  endTime: DateTime

  # Filter based on anomalous status of the object.
  isAnomaly: Boolean

  # Filter by internal object FID.
  workloadFid: [UUID!]
}
# Group non-filesystem anomaly results by field.
enum NfAnomalyResultGroupBy {
  # The unique ID of the cluster.
  CLUSTER_UUID

  # Group by day.
  DAY

  # Group by hour.
  HOUR

  # Specifies whether the result is an anomaly.
  IS_ANOMALY

  # Group by month.
  MONTH

  # Group by week.
  WEEK

  # Group by year.
  YEAR
}
# Group by information for non-filesystem anomaly detection results.
union NfAnomalyResultGroupByInfo = Cluster | Snappable | TimeRangeWithUnit | AnomalyStatus
# Non-filesystem anomaly result data with group by information applied to it.
type NfAnomalyResultGroupedData {
  # Group by information.
  groupByInfo: NfAnomalyResultGroupByInfo!

  # Paginated anomaly result data.
  nfAnomalyResults(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort non-filesystem anomaly results by field.
    sortBy: NfAnomalyResultSortBy,

    # Filter non-filesystem anomaly results by input.
    filter: NfAnomalyResultFilterInput): NfAnomalyResultConnection!

  # Provides further groupings for the data.
  nfAnomalyResultGroupedData(
    # Group non-filesystem anomaly results by field.
    groupBy: NfAnomalyResultGroupBy!): [NfAnomalyResultGroupedData!]!
}
# Paginated list of NfAnomalyResultGroupedData objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NfAnomalyResultGroupedDataConnection {
  # List of NfAnomalyResultGroupedData objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NfAnomalyResultGroupedDataEdge!]!

  # List of NfAnomalyResultGroupedData objects.
  nodes: [NfAnomalyResultGroupedData!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NfAnomalyResultGroupedData objects matching the request arguments.
  count: Int!
}
# Wrapper around the NfAnomalyResultGroupedData object. This wrapper is used for pagination.
type NfAnomalyResultGroupedDataEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NfAnomalyResultGroupedData object wrapped by this edge.
  node: NfAnomalyResultGroupedData!
}
# Sort non-filtesystem anomaly results by field.
enum NfAnomalyResultSortBy {
  # Unique ID of the cluster.
  CLUSTER_UUID

  # Specifies whether the result is an anomaly.
  IS_ANOMALY

  # Type of the object.
  OBJECT_TYPE

  # Name of the object.
  WORKLOAD_NAME
}
# A recurrence range without an end (e.g. repeat the pattern forever starting from 7/29/2019).
type NoEndRecurrenceRange {
  # The starting date of the recurrence.
  startDate: DateTime!
}
# IP configurations for the node.
input NodeConfigInput {
  # IP configuration for data network.
  dataIpConfig: IpConfigInput

  # IP configuration for IPMI.
  ipmiIpConfig: IpConfigInput!

  # IP configuration for management network.
  managementIpConfig: IpConfigInput!

  # VLAN Ids and associated IPs for the node.
  vlanIpConfigs: [VlanIpInput!]
}
# Supported in v5.0+
type NodeIp {
  # Required. Supported in v5.0+
  # IP of the node.
  ip: String!

  # Required. Supported in v5.0+
  # Node this interface is configured on.
  node: String!
}
# Supported in v5.0+
input NodeIpInput {
  # Required. Supported in v5.0+
  # IP of the node.
  ip: String!

  # Required. Supported in v5.0+
  # Node this interface is configured on.
  node: String!
}
# Details of a node.
input NodeMetadataInput {
  # The ID of the node to be removed.
  nodeId: String = ""

  # The ID of the chassis the node is on.
  chassisId: String

  # The platform the node is on.
  platform: ClusterNodePlatformType

  # The status of the node.
  status: ClusterNodeStatus

  # Use quick drain instead of full data drain.
  useQuickDrain: Boolean
}
# Supported in v6.0+
type NodePolicyCheckResult {
  # Required. Supported in v6.0+
  checkResults: [PolicyCheckResult!]!

  # Required. Supported in v6.0+
  nodeId: String!
}
# Input required for providing node configuration details for registration.
input NodeRegistrationConfigsInput {
  # Node id.
  id: String = ""

  # Manufacture time of node.
  manufactureTime: DateTime

  # Node serial number.
  serial: String = ""

  # System uuid of node.
  systemUuid: String = ""

  # Teleport token of node.
  teleportToken: String = ""

  # Cluster UUID.
  clusterUuid: String = ""

  # Platform type.
  platform: String = ""

  # Capacity of the cluster.
  capacity: String = ""

  # Entitlement status of the node.
  isEntitled: Boolean = false
}
# Request parameters for checking if the node removal job can be canceled.
input NodeRemovalCancelPermissionInput {
  # UUID of the Rubrik cluster.
  clusterUuid: UUID!
}
# Specifies whether the job is cancelable.
type NodeRemovalCancelPermissionReply {
  # Cancelable or not.
  isCancelable: Boolean!

  # Event series ID.
  eventSeriesId: String!
}
# Supported in v5.0+
type NodeStatus {
  # Required. Supported in v5.0+
  brikId: String!

  # Required. Supported in v5.0+
  id: String!

  # Supported in v5.0+
  ipAddress: String

  # Required. Supported in v5.0+
  status: String!

  # Supported in v5.0+
  supportTunnel: SupportTunnelInfo

  # Supported in v5.1+
  hasUnavailableDisks: Boolean

  # Supported in v6.0+
  # Hostname of the node.
  hostname: String
}
# Supported in v5.0+
type NodeStatusListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [NodeStatus!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Request parameters for getting the ID of the node to replace on a Rubrik cluster.
input NodeToReplaceInput {
  # Rubrik Cluster UUID.
  clusterUuid: UUID!
}
# The ID of the Rubrik cluster node to replace.
type NodeToReplaceReply {
  # The ID of a removed node to replace.
  nodeToReplace: String!
}
# Mapping of Node name to IP configurations for the node.
input NodesMapInput {
  # Required. The name for the new node.
  key: String = ""

  # Node map value.
  value: NodeConfigInput!
}
# Indicates that the user has clicked the Get License button.
type NotificationForGetLicenseReply {
  # Indicates whether notification is successfully sent.
  isSuccessful: Boolean!
}
# Rubrik cluster email notification setting.
type NotificationSettingSummary {
  # Email addresses for this setting.
  emailAddresses: [String!]!

  # Event types for this setting.
  eventTypes: [String!]!

  # ID for this setting.
  id: String!

  # Indicates if this setting sends messages to syslog.
  shouldSendToSyslog: Boolean!

  # Configured SNMP Addresses for this setting.
  snmpAddresses: [String!]!

  # Severity for this setting.
  severity: [String!]!

  # Object types for this setting.
  objectTypes: [String!]!
}
# All Email notification settings for the Rubrik cluster.
type NotificationSettingSummaryListResponse {
  # Notification settings.
  data: [NotificationSettingSummary!]!

  # Placeholder for additional notification settings.
  hasMore: Boolean

  # Number of notification settings.
  total: Long
  nextCursor: String
}
# Supported in v5.0+
type NtpServerConfiguration {
  # Required. Supported in v5.0+
  # Name or IP address of the NTP server.
  server: String!

  # Supported in v5.0+
  symmetricKey: NtpSymmKeyConfiguration
}
# Supported in v5.0+
input NtpServerConfigurationInput {
  # Supported in v5.0+
  symmetricKey: NtpSymmKeyConfigurationInput

  # Required. Supported in v5.0+
  # Name or IP address of the NTP server.
  server: String!
}
# Supported in v5.0+
type NtpServerConfigurationListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [NtpServerConfiguration!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
type NtpSymmKeyConfiguration {
  # Required. Supported in v5.0+
  # Symmetric key (asci or hex format).
  key: String!

  # Required. Supported in v5.0+
  # Symmetric key id.
  keyId: Int!

  # Required. Supported in v5.0+
  # Symmetric key type (e.g., MD5, SHA1).
  keyType: String!
}
# Supported in v5.0+
input NtpSymmKeyConfigurationInput {
  # Required. Supported in v5.0+
  # Symmetric key (asci or hex format).
  key: String!

  # Required. Supported in v5.0+
  # Symmetric key id.
  keyId: Int!

  # Required. Supported in v5.0+
  # Symmetric key type (e.g., MD5, SHA1).
  keyType: String!
}
# A recurrence range with a number of occurrences (e.g. repeat the pattern 10 times starting from 7/29/2019).
type NumberedRecurrenceRange {
  # The starting date of the recurrence.
  startDate: DateTime!

  # The number of occurrences.
  numberOfOccurrences: Int!
}
# Supported in v7.0+
type NutanixAsyncRequestFailureSummary {
  # Required. Supported in v7.0+
  # Information about why the request failed.
  error: String!

  # Required. Supported in v7.0+
  # ID of the Nutanix virtual machine.
  vmId: String!
}
# Supported in v7.0+
type NutanixAsyncRequestSuccessSummary {
  # Required. Supported in v7.0+
  # ID of the Nutanix virtual machine.
  vmId: String!

  # Required. Supported in v7.0+
  # Information for tracking the status of asynchronous requests.
  asyncRequestStatus: AsyncRequestStatus
}
# Backup script configuration.
type NutanixBackupScript {
  # Path of the script.
  scriptPath: String

  # Script timeout.
  timeoutMs: Long!

  # Failure handling instruction.
  failureHandling: NutanixBackupScriptFailureHandling!
}
# Describes the failure handling if the backup script fails.
enum NutanixBackupScriptFailureHandling {
  # Backup is aborted if the script fails.
  ABORT

  # Backup ignores the failure and continue even if the script fails.
  CONTINUE

  # Backup script failure handling is unknown.
  UNKNOWN_FAILURE_HANDLING
}
# Supported in v7.0+
type NutanixBatchAsyncApiResponse {
  # Required. Supported in v7.0+
  # Array of objects containing information about failed requests.
  failedRequests: [NutanixAsyncRequestFailureSummary!]!

  # Required. Supported in v7.0+
  # Array of objects containing information about successful asynchronous requests.
  successfulRequests: [NutanixAsyncRequestSuccessSummary!]!
}
# Supported in v7.0+
input NutanixBatchExportSnapshotJobConfigInput {
  # Required. Supported in v7.0+
  # Array of objects containing information about snapshots for export.
  snapshots: [NutanixExportSnapshotJobConfigForBatchInput!]!
}
# Supported in v7.0+
input NutanixBatchMountSnapshotJobConfigInput {
  # Required. Supported in v7.0+
  # Array of objects containing information about snapshots to be mounted.
  snapshots: [NutanixMountSnapshotJobConfigForBatchInput!]!
}
# Supported in v9.0+
# Job configuration object for mass on-demand snapshots of Nutanix virtual machines.
input NutanixBulkOnDemandSnapshotJobConfigInput {
  # Required. Supported in v9.0+
  # List of backupConfig objects for nutanix virtual machine.
  vms: [NutanixOnDemandSnapshotJobConfigForBulkInput!]!
}
# Nutanix Category details.
type NutanixCategory implements CdmHierarchyObject , HierarchyObject , NutanixPrismCentralDescendantType , NutanixPrismCentralLogicalChildType {
  # CDM ID of the Nutanix Category.
  cdmId: String!

  # Prism Central ID of the Category.
  prismCentralId: String!

  # A list of duplicated object IDs representing identical instances of the Nutanix Category you considered. Each instance resides on a different Rubrik CDM cluster.
  duplicateObjects: [NutanixCategory!]!

  # Connection status of the CDM cluster. If the CDM cluster is disconnected, then the status is set to 'Disconnected'.
  connectionStatus: RefreshableObjectConnectionStatus!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NutanixCategoryDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NutanixCategoryLogicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Nutanix Category descendant type.
interface NutanixCategoryDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NutanixCategoryDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixCategoryDescendantTypeConnection {
  # List of NutanixCategoryDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixCategoryDescendantTypeEdge!]!

  # List of NutanixCategoryDescendantType objects.
  nodes: [NutanixCategoryDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixCategoryDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixCategoryDescendantType object. This wrapper is used for pagination.
type NutanixCategoryDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixCategoryDescendantType object wrapped by this edge.
  node: NutanixCategoryDescendantType!
}
# Nutanix Category logical child type.
interface NutanixCategoryLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NutanixCategoryLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixCategoryLogicalChildTypeConnection {
  # List of NutanixCategoryLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixCategoryLogicalChildTypeEdge!]!

  # List of NutanixCategoryLogicalChildType objects.
  nodes: [NutanixCategoryLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixCategoryLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixCategoryLogicalChildType object. This wrapper is used for pagination.
type NutanixCategoryLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixCategoryLogicalChildType object wrapped by this edge.
  node: NutanixCategoryLogicalChildType!
}
# Nutanix Category Value details.
type NutanixCategoryValue implements CdmHierarchyObject , HierarchyObject , NutanixPrismCentralDescendantType , NutanixCategoryDescendantType , NutanixCategoryLogicalChildType {
  # CDM ID of the Nutanix Category Value.
  cdmId: String!

  # Prism Central ID of the Category Value.
  prismCentralId: String!

  # Category ID of the Category Value.
  categoryId: String!

  # A list of duplicated object IDs representing identical instances of the Nutanix CategoryValue you considered. Each instance resides on a different Rubrik CDM cluster.
  duplicateObjects: [NutanixCategoryValue!]!

  # Connection status of the CDM Cluster. If the CDM cluster is disconnected, then the status is set to 'Disconnected'.
  connectionStatus: RefreshableObjectConnectionStatus!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NutanixCategoryValueDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NutanixCategoryValueLogicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Nutanix Category Value descendant type.
interface NutanixCategoryValueDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NutanixCategoryValueDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixCategoryValueDescendantTypeConnection {
  # List of NutanixCategoryValueDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixCategoryValueDescendantTypeEdge!]!

  # List of NutanixCategoryValueDescendantType objects.
  nodes: [NutanixCategoryValueDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixCategoryValueDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixCategoryValueDescendantType object. This wrapper is used for pagination.
type NutanixCategoryValueDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixCategoryValueDescendantType object wrapped by this edge.
  node: NutanixCategoryValueDescendantType!
}
# Nutanix Category Value logical child type.
interface NutanixCategoryValueLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NutanixCategoryValueLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixCategoryValueLogicalChildTypeConnection {
  # List of NutanixCategoryValueLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixCategoryValueLogicalChildTypeEdge!]!

  # List of NutanixCategoryValueLogicalChildType objects.
  nodes: [NutanixCategoryValueLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixCategoryValueLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixCategoryValueLogicalChildType object. This wrapper is used for pagination.
type NutanixCategoryValueLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixCategoryValueLogicalChildType object wrapped by this edge.
  node: NutanixCategoryValueLogicalChildType!
}
# Nutanix cluster details.
type NutanixCluster implements CdmHierarchyObject , HierarchyObject , NutanixTopLevelDescendantType , NutanixPrismCentralDescendantType , NutanixPrismCentralLogicalChildType {
  # CDM ID of the Nutanix virtual machine.
  cdmId: String!

  # Last refresh timestamp of Nutanix cluster.
  lastRefreshTime: DateTime

  # IP address of Nutanix cluster.
  hostName: String!

  # Username.
  userName: String!

  # Natural ID of Nutanix cluster.
  naturalId: String!

  # Nutanix cluster version.
  nosVersion: String

  # Nutanix cluster metadata.
  clusterMetadata: NutanixClusterMetadata

  # Object ID.
  id: UUID!

  # Connection status of the Nutanix Cluster. If the CDM cluster is disconnected, then the status is set to 'Disconnected'.
  connectionStatus: RefreshableObjectConnectionStatus!

  # Nutanix cluster snapshot consistency level.
  nutanixSnapshotConsistencyMandate: CdmNutanixSnapshotConsistencyMandate!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NutanixClusterDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NutanixClusterLogicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Supported in v5.0+
input NutanixClusterConfigInput {
  # Required. Supported in v5.0+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String!

  # Required. Supported in v5.0+
  # Address for the Prism host. Any Prism Element or Prism central host will do. We will use the highly available IP, if set, and this address, if not, to communicate with the cluster.
  hostname: String!

  # Required. Supported in v5.0+
  # The UUID of the Nutanix cluster being added. This is required because Prism Central may manage multiple clusters, and we need to differentiate between them.
  nutanixClusterUuid: String!

  # Required. Supported in v5.0+
  password: String!

  # Required. Supported in v5.0+
  username: String!
}
# Paginated list of NutanixCluster objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixClusterConnection {
  # List of NutanixCluster objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixClusterEdge!]!

  # List of NutanixCluster objects.
  nodes: [NutanixCluster!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixCluster objects matching the request arguments.
  count: Int!
}
# Nutanix cluster descendant type.
interface NutanixClusterDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NutanixClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixClusterDescendantTypeConnection {
  # List of NutanixClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixClusterDescendantTypeEdge!]!

  # List of NutanixClusterDescendantType objects.
  nodes: [NutanixClusterDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixClusterDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixClusterDescendantType object. This wrapper is used for pagination.
type NutanixClusterDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixClusterDescendantType object wrapped by this edge.
  node: NutanixClusterDescendantType!
}
# Wrapper around the NutanixCluster object. This wrapper is used for pagination.
type NutanixClusterEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixCluster object wrapped by this edge.
  node: NutanixCluster!
}
# Nutanix cluster logical child type.
interface NutanixClusterLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NutanixClusterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixClusterLogicalChildTypeConnection {
  # List of NutanixClusterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixClusterLogicalChildTypeEdge!]!

  # List of NutanixClusterLogicalChildType objects.
  nodes: [NutanixClusterLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixClusterLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixClusterLogicalChildType object. This wrapper is used for pagination.
type NutanixClusterLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixClusterLogicalChildType object wrapped by this edge.
  node: NutanixClusterLogicalChildType!
}
# Nutanix cluster metadata.
type NutanixClusterMetadata {
  # Consistency level mandated for this Nutanix cluster..
  snapshotConsistencyMandate: NutanixSnapshotConsistencyMandate!
}
# Supported in v5.0+
input NutanixClusterPatchInput {
  # Supported in v5.0+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String

  # Supported in v5.0+
  # v5.0-v5.1: ID of the SLA Domain that is configured for this Nutanix Cluster.
  # v5.2+: ID of the SLA Domain that is configured for this Nutanix Cluster. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # Address for the Prism host. Any Prism Element or Prism central host will do. We will use the highly available IP, if set, and this address, if not, to communicate with the cluster.
  hostname: String

  # Supported in v5.0+
  password: String

  # Supported in v5.0+
  username: String

  # Supported in v9.1+
  # Consistency level mandated for this Nutanix cluster.
  snapshotConsistencyMandate: CdmNutanixSnapshotConsistencyMandate
}
# Supported in v5.0+
type NutanixClusterSummary {
  # Supported in v5.0+
  # Connection status of a Nutanix Cluster.
  connectionStatus: RefreshableObjectConnectionStatus

  # Required. Supported in v5.0+
  hostname: String!

  # Required. Supported in v5.0+
  naturalId: String!

  # Required. Supported in v5.0+
  username: String!
  slaAssignable: SlaAssignable
  snapshotConsistencyMandate: CdmNutanixSnapshotConsistencyMandate

  # Supported in v5.3+
  # Describes any pending SLA Domain assignment on this object.
  pendingSlaDomain: ManagedObjectPendingSlaInfo
}
# Supported in v9.0+
input NutanixClustersListElementInput {
  # Supported in v9.0+
  # Name of the Nutanix Cluster.
  name: String

  # Required. Supported in v9.0+
  # Natural ID of the Nutanix Cluster.
  clusterUuid: String!
}
# Supported in v5.0+
type NutanixContainer {
  # Required. Supported in v5.0+
  # Name of the Nutanix container.
  name: String!

  # Required. Supported in v5.0+
  # Natural ID of the Nutanix container.
  naturalId: String!
}
# Supported in v5.0+
type NutanixContainerListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [NutanixContainer!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
input NutanixDownloadFilesJobConfigInput {
  # Supported in v5.2+
  # v5.2-v7.0: An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
  # v8.0+: Optional Boolean argument indicating if the download is being triggered due to a Legal Hold.
  legalHoldDownloadConfig: LegalHoldDownloadConfigInput

  # Required. Supported in v5.0+
  # v5.0-v7.0: An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path. When the source is a Windows virtual machine, the paths must all be on the same disk.
  # v8.0+: Array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path. When the source is a Windows virtual machine, the paths must all be on the same disk.
  paths: [String!]!
}
# Supported in v7.0+
input NutanixExportSnapshotJobConfigForBatchInput {
  # Supported in v7.0+
  # Exports the oldest snapshot taken after the specified date. 'snapshotAfterDate' is only evaluated when no values are set for 'snapshotId' and 'snapshotBeforeDate'.
  snapshotAfterDate: DateTime

  # Supported in v7.0+
  # Exports the snapshot taken most recently prior to the specified date. 'snapshotBeforeDate' is only evaluated when no value is set for 'snapshotId'.
  snapshotBeforeDate: DateTime

  # Supported in v7.0+
  # ID of the snapshot to export. This parameter is optional if the 'snapshotBeforeDate' or 'snapshotAfterDate' parameters are configured.
  snapshotId: String

  # Supported in v7.0+
  # Prefix added to the name of the exported virtual machine.
  vmNamePrefix: String

  # Required. Supported in v7.0+
  # Configuration used for exporting the snapshot.
  exportConfig: NutanixVmExportSnapshotJobConfigInput!

  # Required. Supported in v7.0+
  # ID of the virtual machine with the snapshot that requires exporting.
  vmId: String!
}
# Supported in v9.1+
# API credentials to add or update the Nutanix File Server with API integration. Also contains credentials for SMB share access.
input NutanixFileServerParametersInput {
  # Supported in v9.1+
  # TLS certification to validate the NAS system.
  apiCertificate: String

  # Supported in v9.1+
  # ID corresponding to the imported certificate.
  certificateId: String

  # Supported in v9.1+
  # Credentials to access SMB shares.
  smbCredentials: GenericNasSystemCredentialsInput

  # Supported in v9.1+
  # Password associated with the NAS API user account.
  apiPassword: String

  # Supported in v9.1+
  # Username to access the vendor-specific NAS API.
  apiUsername: String

  # Required. Supported in v9.1+
  # Specifies whether to enable SMB for the NAS system.
  hasSmbSupport: Boolean!
}
# Nutanix virtual machine live mount.
type NutanixLiveMount {
  # CDM ID of the live mount.
  cdmId: String!

  # Describes if the live mount is ready.
  isVmReady: Boolean!

  # Organization ID of the live mount.
  organizationId: String!

  # Owner ID of the live mount.
  ownerId: String!

  # Name of the live mount.
  name: String!

  # Rubrik CDM ID of the snapshot used for the Live Mount.
  snapshotId: String!

  # Specification of the live mount in JSON string.
  mountSpec: String!

  # Mount job instance ID.
  mountJobInstanceId: String!

  # Unmount job instance ID.
  unmountJobInstanceId: String!

  # CDM ID of the mounted virtual machine. This may be set to null if the mount specification does not contain this information.
  mountedVmId: String

  # CDM ID of the source virtual machine.
  sourceVmId: String!

  # Name of the source virtual machine.
  sourceVmName: String!

  # CDM ID of the Nutanix cluster.
  nutanixClusterId: String!

  # Name of the Nutanix cluster.
  nutanixClusterName: String!

  # Specifies if the mounted virtual machine does not have migration enabled.
  isMigrationDisabled: Boolean!

  # Status of the migration job. This is applicable only if the mounted virtual machine is being migrated.
  migrationJobStatus: String

  # Migration job instance ID. This is applicable only if the mounted virtual machine is being migrated.
  migrationJobInstanceId: String

  # Nutanix storage container where the mounted virtual machine will be migrated. This is applicable only if migration is not enabled on the virtual machine.
  storageContainerName: String

  # Time when the virtual machine was mounted. This may be set to null if the mount specification does not contain this information.
  mountedDate: DateTime

  # Time when the snapshot was taken. This may be set to null if the mount specification does not contain this information.
  snapshotDate: DateTime

  # ID of the source virtual machine.
  sourceVmFid: String!

  # ID of the mounted virtual machine. This may be set to null if the mount specification does not contain this information.
  mountedVmFid: String

  # ID of the Nutanix cluster.
  nutanixClusterFid: String!

  # Fid of the live mount.
  id: UUID!

  # Cluster of the live mount.
  cluster: Cluster!

  # Source snapshot of the Live Mount.
  sourceSnapshot: CdmSnapshot!

  # Power Status of the Virtual Machine. It is set to 'ON' or 'OFF'. If the CDM cluster is disconnected, then it is set to  'Unknown'.
  powerStatus: String!

  # Mount Status of the Virtual Machine. If the CDM cluster is disconnected, then None is  returned.
  mountStatus: NutanixVmMountStatus
}
# Paginated list of NutanixLiveMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixLiveMountConnection {
  # List of NutanixLiveMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixLiveMountEdge!]!

  # List of NutanixLiveMount objects.
  nodes: [NutanixLiveMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixLiveMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixLiveMount object. This wrapper is used for pagination.
type NutanixLiveMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixLiveMount object wrapped by this edge.
  node: NutanixLiveMount!
}
# Filters for Nutanix virtual machine live mount results.
enum NutanixLiveMountFilterField {
  # Filter the results by UUID of the Rubrik cluster.
  CLUSTER_UUID

  # Filter is not specified. Any filter text will
  # not be considered.
  FIELD_UNSPECIFIED

  # Filter the results by name of the live mount.
  MOUNT_NAME

  # Filter the results by Organization ID of the original
  # virtual machine.
  ORG_ID

  # Filter the results by CDM ID of the original
  # virtual machine.
  SOURCE_VM_CDMID
}
# Input to filter Nutanix virtual machine live mount results.
input NutanixLiveMountFilterInput {
  # Type of filter.
  field: NutanixLiveMountFilterField = FIELD_UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Sort by fields for Nutanix virtual machine live mount results.
enum NutanixLiveMountSortByField {
  # Sort by Cluster Name.
  CLUSTER_NAME

  # Sort by Mount Creation Date.
  CREATION_DATE

  # Sort by field is not specified.
  # Any filter text would not be considered.
  FIELD_UNSPECIFIED

  # Sort by Mount Name.
  MOUNT_NAME
}
# Input to sort the Nutanix virtual machine live mounts results.
input NutanixLiveMountSortByInput {
  # Sort by field for Nutanix virtual machine live mounts.
  field: NutanixLiveMountSortByField = FIELD_UNSPECIFIED

  # Sort order for Nutanix virtual machine live mounts.
  sortOrder: SortOrder = ASC
}
# Input for InternalNutanixMissedSnapshots.
input NutanixMissedSnapshotsInput {
  # Required. v5.0-v5.3: ID of the vm
  # v6.0-v8.0: ID of the vm.
  # v8.1+: ID of the virtual machine.
  id: String!
}
# Supported in v7.0+
input NutanixMountSnapshotJobConfigForBatchInput {
  # Supported in v7.0+
  # Mounts the first snapshot taken after the specified date. The value of 'snapshotAfterDate' is considered only when 'snapshotId' and 'snapshotBeforeDate' are not configured.
  snapshotAfterDate: DateTime

  # Supported in v7.0+
  # Mounts the snapshot taken most recently before the specified date. The value of 'snapshotBeforeDate' is considered only when a snapshot ID is not set using 'snapshotId'.
  snapshotBeforeDate: DateTime

  # Supported in v7.0+
  # ID of the snapshot to mount. This parameter is optional if the 'snapshotBeforeDate' or 'snapshotAfterDate' parameters are configured.
  snapshotId: String

  # Supported in v7.0+
  # Prefix to be added to the name of the mounted virtual machine.
  vmNamePrefix: String

  # Required. Supported in v7.0+
  # Configuration for mounting the snapshot.
  mountConfig: NutanixVmMountSnapshotJobConfigInput!

  # Required. Supported in v7.0+
  # ID of the virtual machine whose snapshot requires mounting.
  vmId: String!
}
# Supported in v8.1+
type NutanixNetwork {
  # Required. Supported in v8.1+
  # Name of the Nutanix network.
  name: String!

  # Required. Supported in v8.1+
  # Natural ID of the Nutanix network.
  naturalId: String!
}
# Supported in v8.1+
type NutanixNetworkListResponse {
  # Supported in v8.1+
  # List of matching objects.
  data: [NutanixNetwork!]!

  # Supported in v8.1+
  # If there is more.
  hasMore: Boolean

  # Supported in v8.1+
  # Total list responses.
  total: Int

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v9.0+
# Job configuration object for mass on-demand snapshots of Nutanix virtual machines.
input NutanixOnDemandSnapshotJobConfigForBulkInput {
  # Required. Supported in v9.0+
  # Configuration for on-demand backups of Nutanix virtual machines.
  backupConfig: BaseOnDemandSnapshotConfigInput!

  # Required. Supported in v9.0+
  # ID of the Nutanix virtual machine.
  vmId: String!
}
# Supported in v6.0+
input NutanixPatchVmMountConfigInput {
  # Required. Supported in v6.0+
  # Specifies whether to power on the mounted virtual machine. When set to true, the virtual machine will be powered on. When set to false, the virtual machine will be powered off.
  shouldPowerOn: Boolean!
}
# Nutanix Prism Central details.
type NutanixPrismCentral implements CdmHierarchyObject , HierarchyObject , NutanixTopLevelDescendantType {
  # CDM ID of the Nutanix Virtual Machine.
  cdmId: String!

  # Last refresh timestamp of Nutanix Prism Central.
  lastRefreshTime: DateTime

  # IP address of Nutanix Prism Central.
  hostName: String!

  # Username.
  userName: String!

  # Natural ID of Nutanix Prism Central.
  naturalId: String!

  # Nutanix Prism Central version.
  nosVersion: String

  # List of Nutanix Clusters that are protected as part of this Nutanix Prism Central.
  nutanixClusterIds: [String!]!

  # Object ID.
  id: UUID!

  # A list of duplicated object IDs representing identical instances of the Nutanix Prism Central you considered. Each instance resides on a different Rubrik CDM cluster.
  duplicateObjects: [NutanixPrismCentral!]!

  # Connection status of the Nutanix Prism Central. If the CDM cluster is disconnected, then the status is set to 'Disconnected'.
  connectionStatus: RefreshableObjectConnectionStatus!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NutanixPrismCentralDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): NutanixPrismCentralLogicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Input for the Nutanix Prism Central configuration parameters.
input NutanixPrismCentralConfigInput {
  # Required. Supported in v9.0+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String!

  # Required. Supported in v9.0+
  # Hostname for the Nutanix Prism Central that we use for all the cluster connections.
  hostname: String!

  # Required. Supported in v9.0+
  # Password for the Nutanix Prism Central that we use for all the cluster connections.
  password: String!

  # Required. Supported in v9.0+
  # Username for the Nutanix Prism Central that we use for all the cluster connections.
  username: String!
}
# Paginated list of NutanixPrismCentral objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixPrismCentralConnection {
  # List of NutanixPrismCentral objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixPrismCentralEdge!]!

  # List of NutanixPrismCentral objects.
  nodes: [NutanixPrismCentral!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixPrismCentral objects matching the request arguments.
  count: Int!
}
# Nutanix Prism Central descendant type.
interface NutanixPrismCentralDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NutanixPrismCentralDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixPrismCentralDescendantTypeConnection {
  # List of NutanixPrismCentralDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixPrismCentralDescendantTypeEdge!]!

  # List of NutanixPrismCentralDescendantType objects.
  nodes: [NutanixPrismCentralDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixPrismCentralDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixPrismCentralDescendantType object. This wrapper is used for pagination.
type NutanixPrismCentralDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixPrismCentralDescendantType object wrapped by this edge.
  node: NutanixPrismCentralDescendantType!
}
# Wrapper around the NutanixPrismCentral object. This wrapper is used for pagination.
type NutanixPrismCentralEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixPrismCentral object wrapped by this edge.
  node: NutanixPrismCentral!
}
# Nutanix Prism Central logical child type.
interface NutanixPrismCentralLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of NutanixPrismCentralLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixPrismCentralLogicalChildTypeConnection {
  # List of NutanixPrismCentralLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixPrismCentralLogicalChildTypeEdge!]!

  # List of NutanixPrismCentralLogicalChildType objects.
  nodes: [NutanixPrismCentralLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixPrismCentralLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the NutanixPrismCentralLogicalChildType object. This wrapper is used for pagination.
type NutanixPrismCentralLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixPrismCentralLogicalChildType object wrapped by this edge.
  node: NutanixPrismCentralLogicalChildType!
}
# Input for patching the Nutanix Prism Central.
input NutanixPrismCentralPatchInput {
  # Supported in v9.0+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String

  # Supported in v9.0+
  # ID of the SLA Domain that is configured for this Nutanix Prism Central. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v9.0+
  # Hostname for the Nutanix Prism Central used for all the cluster connections.
  hostname: String

  # Supported in v9.0+
  # Password for the Nutanix Prism Central used for all the cluster connections.
  password: String

  # Supported in v9.0+
  # Username for the Nutanix Prism Central used for all the cluster connections.
  username: String

  # Supported in v9.1+
  # The list of new Nutanix Clusters to protect as part of the given Nutanix Prism Central object.
  nutanixClusters: [NutanixClustersListElementInput!] = []
}
# Supported in v5.0+
input NutanixRestoreFileConfigInput {
  # Required. Supported in v5.0+
  # Absolute file path.
  path: String!

  # Required. Supported in v5.0+
  # Target folder for the copied files.
  restorePath: String!
}
# Supported in v5.0+
input NutanixRestoreFilesConfigInput {
  # Supported in v9.1+
  # Workload ID of the target AHV virtual machine, which is the destination for the recovered data.
  targetVirtualMachineId: String

  # Required. Supported in v5.0+
  # Directory of folder to copy files into.
  restoreConfig: [NutanixRestoreFileConfigInput!]!
}
# Nutanix cluster snapshot consistency mandate.
enum NutanixSnapshotConsistencyMandate {
  # Application consistent.
  NUTANIX_APP_CONSISTENT

  # Automatic.
  NUTANIX_AUTOMATIC

  # Crash consistent.
  NUTANIX_CRASH_CONSISTENT

  # Unspecified.
  NUTANIX_UNSPECIFIED
}
# Nutanix top-level descendant type.
interface NutanixTopLevelDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
enum NutanixVirtualMachineScriptDetailFailureHandling {
  NUTANIX_VIRTUAL_MACHINE_SCRIPT_DETAIL_FAILURE_HANDLING_ABORT
  NUTANIX_VIRTUAL_MACHINE_SCRIPT_DETAIL_FAILURE_HANDLING_CONTINUE
}
# Supported in v6.0+
input NutanixVirtualMachineScriptDetailInput {
  # Required. Supported in v6.0+
  # Action to take if the script returns an error or times out.
  failureHandling: NutanixVirtualMachineScriptDetailFailureHandling!

  # The command to be run in virtual machine guest OS.
  scriptPath: String!

  # Required. Supported in v6.0+
  # Time (in ms) after which the script will be terminated if it has not completed.
  timeoutMs: Long!
}
# Nutanix virtual machine details.
type NutanixVm implements CdmHierarchyObject , CdmHierarchySnappableNew , HierarchyObject , HierarchySnappable , NutanixClusterDescendantType , NutanixClusterLogicalChildType , NutanixPrismCentralDescendantType , NutanixCategoryDescendantType , NutanixCategoryValueDescendantType , NutanixCategoryValueLogicalChildType {
  # CDM ID of the Nutanix virtual machine.
  cdmId: String!

  # Specifies whether this Nutanix virtual machine is currently present on the Nutanix cluster.
  isRelic: Boolean!

  # Pre backup script configuration.
  preBackupScript: NutanixBackupScript!

  # Post backup script configuration.
  postBackupScript: NutanixBackupScript!

  # Post snapshot script configuration.
  postSnapScript: NutanixBackupScript!

  # List of virtual disks.
  vmDisks: [NutanixVmDisk!]!

  # Deprecated, use nutanixSnapshotConsistencyMandate instead.
  snapshotConsistencyMandate: NutanixVmSnapshotConsistencyMandate!

  # Nutanix virtual machine agent status.
  agentStatus: NutanixVmAgentStatus!

  # Specifies if the agent is registered.
  isAgentRegistered: Boolean!

  # List of IDs of the excluded disks.
  excludedDisks: [String!]!

  # Hypervisor type, such as AHV. This field will be set to null if not provided by Nutanix.
  hypervisorType: String

  # Virtual machine ID.
  vmUuid: UUID!

  # ID of the AHV host where virtual machine is located. This field will be set to null if not provided by Nutanix.
  currentHostId: String

  # Object ID.
  id: UUID!

  # Statistics for Nutanix virtual machine (For example, capacity).
  reportSnappable: Snappable

  # Total number of Live Mounts on Nutanix virtual machine.
  nutanixVmMountCount: Int!

  # Nutanix snapshot consistency level.
  nutanixSnapshotConsistencyMandate: CdmNutanixSnapshotConsistencyMandate!

  # Guest operating system type of the virtual machine. This field will be set to null if not provided by Nutanix.
  osType: GuestOsType

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Nutanix virtual machine agent connection status.
enum NutanixVmAgentConnectionStatus {
  # Agent is connected.
  CONNECTED

  # Agent is disconnected.
  DISCONNECTED

  # Connection status is unknown.
  FIELD_UNSPECIFIED

  # Agent is registered as secondary.
  SECONDARY_CLUSTER

  # Agent is not registered.
  UNREGISTERED
}
# Nutanix virtual machine agent status.
type NutanixVmAgentStatus {
  # Connection status of the agent.
  connectionStatus: NutanixVmAgentConnectionStatus!

  # Disconnect reason.
  disconnectReason: String
}
# Paginated list of NutanixVm objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type NutanixVmConnection {
  # List of NutanixVm objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [NutanixVmEdge!]!

  # List of NutanixVm objects.
  nodes: [NutanixVm!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of NutanixVm objects matching the request arguments.
  count: Int!
}
# Nutanix Virtual Machine disk details.
type NutanixVmDisk {
  # Disk UUID.
  uuid: String!

  # Disk label.
  label: String!

  # Type of the virtal disk.
  deviceType: String!

  # Nutanix internal UUID of the disk.
  vmDiskUuid: String!

  # Disk size in Bytes.
  sizeInBytes: Long!

  # Indicates if the disk can be snapshotted.
  isSnapshottable: Boolean!
}
# Supported in v7.0+
input NutanixVmDownloadRequestInput {
  # Supported in v7.0+
  # ID of the SLA Domain to manage retention of the downloaded snapshot.
  slaId: String
}
# Wrapper around the NutanixVm object. This wrapper is used for pagination.
type NutanixVmEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual NutanixVm object wrapped by this edge.
  node: NutanixVm!
}
# Supported in v5.0+
input NutanixVmExportSnapshotJobConfigInput {
  # Supported in v5.0+
  # v5.0-v6.0: The ID of the Nutanix cluster to export to. If not specified, we will default to the VM's cluster.
  # v7.0+: The ID of the Nutanix cluster for export. Defaults to the virtual machine's cluster if unspecified.
  nutanixClusterId: String

  # Indicates if the virtual machine is started after an export operation.
  powerOn: Boolean

  # Supported in v5.0+
  # v5.0-v6.0: Determines whether to remove the network interfaces from the exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'. If 'false' the export job will attempt to add nics that were both present at snapshot time and connected to networks that are still present on the target cluster.
  # v7.0+: Determines whether to remove the network interfaces from the exported virtual machine. Set to 'true' to remove all network interfaces. The default value is 'false'. If set to 'false', the export job attempts to add NICs that were present at the time of the snapshot and were connected to networks that are still present on the target cluster.
  removeNetworkDevices: Boolean

  # Name of the new virtual machine for export.
  vmName: String

  # Supported in v8.1+
  # Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine if nicNetworkUuids is provided. Set to 'false' to assign new MAC addresses.The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
  keepMacAddresses: Boolean

  # Supported in v8.1+
  # The IDs of the Nutanix networks used to create NICs on the exported virtual machine.
  nicNetworkUuids: [String!] = []

  # Required. Supported in v5.0+
  # v5.0-v6.0: The natural ID of the container that will store the export VM's disks.
  # v7.0+: The ID of the storage container that stores the export virtual machine's disks.
  containerNaturalId: String!
}
# Supported in v6.0+
input NutanixVmMountSnapshotJobConfigInput {
  # Supported in v6.0+
  # v6.0: The natural ID of the container that will store the disks of the mounted virtual machine when migration is selected.
  # v7.0+: The ID of the storage container that will store the disks of the mounted virtual machine when migration is selected.
  containerNaturalId: String

  # Supported in v6.0+
  # ID of the Nutanix cluster to mount the new virtual machine to. Default value is the ID of the Nutanix cluster that hosts the source virtual machine of the snapshot.
  nutanixClusterId: String

  # Supported in v6.0+
  # Specifies whether to trigger migration immediately when the Live Mount succeeds.
  shouldMigrateImmediately: Boolean

  # Supported in v6.0+
  # v6.0-v8.0: Specifies whether the virtual machine should be powered on after the Live Mount. Default value is true.
  # v8.1+: Specifies whether the virtual machine will be powered on after the Live Mount. Default value is false.
  shouldPowerOn: Boolean

  # Supported in v6.0+
  # Specifies whether to remove network configuration on the new virtual machine. Default value is false.
  shouldRemoveNetwork: Boolean

  # Supported in v6.0+
  # The target network on the newly mounted virtual machine if network configuration is not removed.
  targetNetwork: String

  # Supported in v6.0+
  # Name of the newly mounted virtual machine.
  vmName: String

  # Supported in v8.1+
  # Determines whether the MAC addresses of the network interfaces on the source virtual machine are assigned to the new virtual machine. Set to 'true' to assign the original MAC addresses to the new virtual machine if nicNetworkUuids is provided. Set to 'false' to assign new MAC addresses.The default is 'false'. When removeNetworkDevices is set to true, this property is ignored.
  keepMacAddresses: Boolean

  # Supported in v8.1+
  # The IDs of the Nutanix networks used to create NICs on the exported virtual machine.
  nicNetworkUuids: [String!] = []

  # Specifies whether the migration option should not be enabled for the live mount. When set to true, the Rubrik cluster will serve as the external repository for the mounted virtual machine, and storage migration to the Nutanix cluster will be not be enabled. When set to false, a storage container on the Nutanix cluster must be specified, and a storage migration otion will be available for the live mount when it succeeds.
  shouldDisableMigration: Boolean!
}
# Supported in v9.1+
# Specifies the Live Mount status.
enum NutanixVmMountStatus {
  NUTANIX_VM_MOUNT_STATUS_DELETING
  NUTANIX_VM_MOUNT_STATUS_MIGRATING
  NUTANIX_VM_MOUNT_STATUS_MOUNTING
  NUTANIX_VM_MOUNT_STATUS_POWERED_OFF
  NUTANIX_VM_MOUNT_STATUS_POWERED_ON
}
# Supported in v6.0+
type NutanixVmMountSummary {
  # Required. Supported in v6.0+
  # ID of the Live Mount.
  id: String!

  # Required. Supported in v6.0+
  # Specifies whether the Live Mount is ready.
  isReady: Boolean!

  # Supported in v6.0+
  # ID of the request which initiated the Live Mount.
  mountRequestId: String

  # Supported in v6.0+
  # Timestamp at which the Live Mount was created.
  mountedDate: DateTime

  # Supported in v6.0+
  # ID of the mounted virtual machine.
  mountedVmId: String

  # Supported in v6.0+
  # IP address of the mounted virtual machine.
  mountedVmIpAddress: String

  # Supported in v6.0+
  # Name of the mounted virtual machine.
  mountedVmName: String

  # Supported in v6.0+
  # The power status of the mounted virtual machine.
  powerStatus: String

  # Required. Supported in v6.0+
  # Timestamp of the Nutanix virtual machine snapshot on which the Live Mount is based.
  snapshotDate: DateTime

  # Supported in v6.0+
  # ID of the Nutanix storage container which contains the mounted virtual disks.
  storageContainerName: String

  # Required. Supported in v6.0+
  # ID of the Nutanix cluster to which the mounted virtual machine belongs.
  targetNutanixClusterId: String!

  # Supported in v6.0+
  # Name of the Nutanix cluster to which the mounted virtual machine belongs.
  targetNutanixClusterName: String

  # Supported in v6.0+
  # ID of the request to delete the Live Mount.
  unmountRequestId: String

  # Required. Supported in v6.0+
  # ID of the source virtual machine of the Live Mount.
  vmId: String!

  # Supported in v6.0+
  # Name of the source virtual machine of the Live Mount.
  vmName: String

  # Supported in v7.0+
  # The status of the migration job for the mounted virtual machine. Valid values are 'REQUESTED', 'RUNNING', 'SUCCEEDED', and 'FAILED'. An unspecified value indicates that no migration job has been initiated for the mounted virtual machine.
  migrationStatus: String
  mountStatus: NutanixVmMountStatus
}
# Supported in v5.0+
input NutanixVmPatchInput {
  # Assigns this virtual machine to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # A list of virtual disks IDs to exclude from the backup for this virtual machine.
  excludedDiskIds: [String!] = []

  # Supported in v5.0+
  # v5.0-v5.3: Whether backup/archival/replication is paused for this VM
  # v6.0-v8.0: Whether backup/archival/replication is paused for this VM.
  # v8.1+: Specifies whether backup/archival/replication is paused for this virtual machine.
  isPaused: Boolean

  # Supported in v6.0+
  postBackupScript: NutanixVirtualMachineScriptDetailInput

  # Supported in v6.0+
  postSnapScript: NutanixVirtualMachineScriptDetailInput

  # Supported in v6.0+
  preBackupScript: NutanixVirtualMachineScriptDetailInput

  # Supported in v5.0+
  # v5.0-v8.0: Consistency level mandated for this VM.
  # v8.1+: Consistency level mandated for this virtual machine.
  snapshotConsistencyMandate: CdmNutanixSnapshotConsistencyMandate
}
# Nutanix Virtual Machine snapshot consistency mandate.
enum NutanixVmSnapshotConsistencyMandate {
  # Application consistent.
  APP_CONSISTENT

  # Automatic.
  AUTOMATIC

  # Crash consistent.
  CRASH_CONSISTENT

  # Default.
  DEFAULT
}
# Supported in v5.0+
type NutanixVmSnapshotDetail {
  # This field contains the virtual machine name and number of nics present in the snapshot along with base snapshot summary.
  nutanixVmSnapshotSummary: NutanixVmSnapshotSummary
}
# Supported in v5.0+
type NutanixVmSnapshotSummary {
  # Required. Supported in v5.0+
  vmName: String!

  # Supported in v8.1+
  # Number of NICs present in the snapshot app metadata.
  nicsInSnapshot: Int

  # Supported in v9.1+
  # List of all UUIDs for the networks connected to the virtual machine when snapshot was taken.
  snapshotNetworkUuids: [String!]!

  # This field contains the base information of a snapshot which are common across other workloads.
  baseSnapshotSummary: BaseSnapshotSummary
}
type O365App implements O365AppObject {
  # The ID of the O365 app.
  appId: String!

  # The ID of the O365 subscription.
  subscriptionId: String!

  # The subscription to which the O365 app is associated.
  subscription: String!

  # The type of the O365 app (e.g. ONEDRIVE).
  appType: String!

  # The added time of the O365 app.
  addedAt: DateTime!

  # The owner of the O365 app (RUBRIK or CUSTOMER).
  appOwner: String!

  # The authentication status of the app against the subscription [To be deprecated].
  isAuthenticated: Boolean!

  # The authentication status of the app against the subscription.
  appAuthStatus: AppAuthStatus!

  # The authentication version of the app against the subscription.
  appAuthVersion: Int!
}
# Paginated list of O365App objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365AppConnection {
  # List of O365App objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365AppEdge!]!

  # List of O365App objects.
  nodes: [O365App!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365App objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365App object. This wrapper is used for pagination.
type O365AppEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365App object wrapped by this edge.
  node: O365App!
}
interface O365AppObject {
  # The ID of the O365 app.
  appId: String!

  # The ID of the O365 subscription.
  subscriptionId: String!

  # The subscription to which the O365 app is associated.
  subscription: String!

  # The type of the O365 app (e.g. ONEDRIVE).
  appType: String!

  # The owner of the O365 app (RUBRIK or CUSTOMER).
  appOwner: String!

  # The added time of the O365 app.
  addedAt: DateTime!

  # The authentication status of the app against the subscription [To be deprecated].
  isAuthenticated: Boolean!

  # The authentication status of the app against the subscription.
  appAuthStatus: AppAuthStatus!

  # The authentication version of the app against the subscription.
  appAuthVersion: Int!
}
# Type of O365 app.
enum O365AppType {
  # Identifies the Azure Active Directory (AAD) application used by AAD to interact with the user's AAD.
  AADSAAS

  # Identifies Unknown App.
  APP_TYPE_UNSPECIFIED

  # Identifies the Azure AD App used for managing resources in customer's Azure account.
  AZURE

  # Identifies the Azure AD App used for managing resources in customer's Azure Gov account.
  AZUREGOV

  # Identifies the Azure AD app used by Exchange to interact with the customer's O365 account.
  EXCHANGE

  # Identifies the Azure AD app used by refresh operation for the customer's M365 account.
  M365MGMT

  # Identifies the Azure AD app used by Onedrive to interact with the customer's O365 account.
  ONEDRIVE

  # Identifies the Azure AD app used by Sharepoint to interact with customer's O365 account.
  SPOINT

  # Identifies the Azure AD app used by Teams to interact with customer's O365 account.
  TEAMS
}
# Cloud type for Azure storage account.
enum O365AzureCloudType {
  # Public cloud.
  PUBLIC

  # US Gov cloud.
  USGOV
}
type O365Calendar implements HierarchyObject , HierarchySnappable , PolarisHierarchyObject , PolarisHierarchySnappable , O365OrgDescendant , O365UserDescendant {
  isRelic: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Object ID.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# An O365 calendar event object.
type O365CalendarEvent implements O365ExchangeObject {
  id: String!
  name: String
  eventType: CalendarEventType!
  parentFolderId: String
  organizer: String
  attendees: [String!]!
  startDateTime: DateTime
  endDateTime: DateTime
  snapshotId: UUID

  # The snapshot time of this version of the event.
  snapshotTime: DateTime
  versionStartSnapshotId: UUID

  # The recurrence of the event (if part of a series).
  recurrence: O365CalendarEventRecurrence
}
# The recurrence pattern of an O365 calendar event.
type O365CalendarEventRecurrence {
  # The relative yearly recurrence pattern (e.g. First Tuesday of November).
  relativeYearlyRecurrence: RelativeYearlyRecurrencePattern

  # The absolute yearly recurrence pattern (e.g. 25th of December).
  absoluteYearlyRecurrence: AbsoluteYearlyRecurrencePattern

  # The relative monthly recurrence pattern (e.g. Second Thursday or Friday of every other month).
  relativeMonthlyRecurrence: RelativeMonthlyRecurrencePattern

  # The absolute monthly recurrence pattern (e.g. 21st of every 3 months).
  absoluteMonthlyRecurrence: AbsoluteMonthlyRecurrencePattern

  # The weekly recurrence pattern (e.g. Every other Monday).
  weeklyRecurrence: WeeklyRecurrencePattern

  # The daily recurrence pattern (e.g. Every 3 days).
  dailyRecurrence: DailyRecurrencePattern

  # A recurrence range with no end date.
  noEndRecurrenceRange: NoEndRecurrenceRange

  # A recurrence range with an end date.
  endDateRecurrenceRange: EndDateRecurrenceRange

  # A recurrence range with a specified number of occurrences.
  numberedRecurrenceRange: NumberedRecurrenceRange
}
type O365CalendarFolder implements O365ExchangeObject {
  id: String!
  name: String
  parentFolderId: String
  snapshotId: UUID

  # The snapshot time of this version of the event.
  snapshotTime: DateTime

  # Indicates if this folder represents a Calendar Group.
  isCalendarGroup: Boolean!
}
# Object type to constrain search against.
enum O365CalendarSearchObjectType {
  # Search all.
  ALL

  # Search for calendars only.
  CALENDAR

  # Search for calendar events only.
  EVENT
}
# An object that meets the specification of a configured group.
type O365ConfiguredGroupMember {
  # The ID of the configured group member.
  id: UUID!

  # The display name of the configured group member.
  displayName: String!

  # The type of the configured group member.
  objectType: O365ConfiguredGroupMemberType!

  # The URL of the configured group member, if any.
  url: String!

  # The preferred data location of the configured group member.
  pdl: String!
}
# Paginated list of O365ConfiguredGroupMember objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365ConfiguredGroupMemberConnection {
  # List of O365ConfiguredGroupMember objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365ConfiguredGroupMemberEdge!]!

  # List of O365ConfiguredGroupMember objects.
  nodes: [O365ConfiguredGroupMember!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365ConfiguredGroupMember objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365ConfiguredGroupMember object. This wrapper is used for pagination.
type O365ConfiguredGroupMemberEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365ConfiguredGroupMember object wrapped by this edge.
  node: O365ConfiguredGroupMember!
}
# Object type of the configured group member.
enum O365ConfiguredGroupMemberType {
  # SharePoint site.
  SITE

  # SharePoint team.
  TEAM

  # Unknown member type.
  UNKNOWN
}
# Metadata for a Microsoft 365 configured group.
type O365ConfiguredGroupMetadata {
  # Number of SharePoint site collections.
  sharepointObjects: Int

  # Number of Teams.
  teamsObjects: Int
}
# Specifications for a Microsoft 365 configured group.
type O365ConfiguredGroupSpec {
  # The preferred data locations for the group.
  pdls: [String!]!

  # The wildcard pattern for the group.
  wildcard: String!
}
# An O365 contact object.
type O365Contact implements O365ExchangeObject {
  # The ID of the contact.
  id: String!

  # The name for this contact.
  name: String

  # Email addresses associated with this contact.
  emailAddresses: [String!]!

  # Phone numbers associated with this contact.
  phoneNumbers: [String!]!

  # Addresses associated with this contact.
  addresses: [String!]!

  # The company at which this contact works.
  company: String

  # The parent folder ID of the contact.
  parentFolderId: String

  # The snapshot ID of this version of the contact.
  snapshotId: UUID

  # The snapshot time of this version of the contact.
  snapshotTime: DateTime

  # The snapshot number of this version of the contact.
  snapshotNum: Int
}
# An O365 contact folder.
type O365ContactFolder implements O365ExchangeObject {
  # The ID of the contact folder.
  id: String!

  # The display name for this contact folder.
  name: String

  # The parent folder ID of the contact folder.
  parentFolderId: String

  # The snapshot ID of this version of the contact folder.
  snapshotId: UUID

  # The snapshot time of this version of the contact folder.
  snapshotTime: DateTime

  # The snapshot number of this version of the contact folder.
  snapshotNum: Int
}
# Object type to constrain the search against.
enum O365ContactsSearchObjectType {
  # Search all.
  ALL

  # Search contacts only.
  CONTACT

  # Search contact folders only.
  CONTACT_FOLDER
}
type O365Email implements O365ExchangeObject {
  id: String!
  subject: String
  from: String
  toRecipients: [String!]!
  sentDateTime: DateTime
  receivedDateTime: DateTime
  parentFolderId: String
  snapshotNum: Int
  snapshotId: UUID
}
interface O365ExchangeObject {
  # The ID of the O365 exchange object.
  id: String!

  # The parent folder ID of the object (ROOT indicates root folder).
  parentFolderId: String
}
# Paginated list of O365ExchangeObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365ExchangeObjectConnection {
  # List of O365ExchangeObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365ExchangeObjectEdge!]!

  # List of O365ExchangeObject objects.
  nodes: [O365ExchangeObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365ExchangeObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365ExchangeObject object. This wrapper is used for pagination.
type O365ExchangeObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365ExchangeObject object wrapped by this edge.
  node: O365ExchangeObject!
}
type O365Folder implements O365ExchangeObject {
  id: String!
  name: String
  parentFolderId: String
  snapshotNum: Int
  snapshotId: UUID
}
# An O365 SharePoint descendant object.
type O365FullSpDescendant implements O365FullSpObject {
  # The ID of the sharepoint descendant object.
  sharepointId: String!

  # The fid of the SharePoint descendant object.
  fid: String!

  # The parent id of the SharePoint descendant object.
  parentId: String

  # The SharePoint descendant object type.
  objectType: SharePointDescendantType!

  # The name of the SharePoint descendant object.
  name: String

  # The snapshot ID of this SharePoint descendant object.
  snapshotId: UUID

  # The snapshot number of this SharePoint descendant object.
  snapshotNum: Int

  # The create time of this SharePoint descendant object.
  createTime: DateTime

  # The modified time of this SharePoint descendant object.
  modifiedTime: DateTime
}
# Configuration for the exclusion of a SharePoint object from protection.
input O365FullSpExclusion {
  # The fid of the SharePoint object.
  fid: String!

  # The name of the SharePoint object.
  name: String!

  # The URL of the SharePoint object.
  url: URL!

  # The object type.
  objectType: SharePointDescendantType!
}
# SharePoint descendant objects.
interface O365FullSpObject {
  # The SharePoint natural ID of the SharePoint descendant object.
  sharepointId: String!

  # The fid of the SharePoint descendant object.
  fid: String!

  # The parent ID of the SharePoint descendant object.
  parentId: String

  # The object type.
  objectType: SharePointDescendantType!

  # The name of the SharePoint descendant object.
  name: String

  # The time when this SharePoint descendant object was created.
  createTime: DateTime

  # The time when this SharePoint descendant object was modified.
  modifiedTime: DateTime

  # The ID of the snapshot.
  snapshotId: UUID

  # The sequence number of the snapshot.
  snapshotNum: Int
}
# Paginated list of O365FullSpObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365FullSpObjectConnection {
  # List of O365FullSpObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365FullSpObjectEdge!]!

  # List of O365FullSpObject objects.
  nodes: [O365FullSpObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365FullSpObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365FullSpObject object. This wrapper is used for pagination.
type O365FullSpObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365FullSpObject object wrapped by this edge.
  node: O365FullSpObject!
}
# Configuration for the exclusion of SharePoint objects under a site collection from protection.
input O365FullSpSiteExclusions {
  # The fid of the SharePoint site collection.
  siteFid: String!

  # The objects to be excluded under the site collection.
  excludedObjects: [O365FullSpExclusion!]!
}
# O365 Groups from O365 hierarchy.
type O365Group implements HierarchyObject , PolarisHierarchyObject , O365OrgDescendant {
  # Rubrik internal UUID for group.
  groupID: String!

  # Natural ID of the group.
  naturalID: String!

  # Display name of the group.
  displayName: String!

  # Number of user that are member of group.
  userCount: Long!

  # True, if the group is deleted in AD.
  deletedInAzure: Boolean!

  # The type of group.
  groupType: O365GroupType!

  # The specification for a configured group.
  configuredGroupSpec: String! @deprecated(reason: "Use configuredGroupSpecification instead.")

  # The specification for a configured group.
  configuredGroupSpecification: O365ConfiguredGroupSpec!

  # The metadata for an Office 365 group.
  metadata: O365GroupMetadata

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Group ID of o365 group object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of O365Group objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365GroupConnection {
  # List of O365Group objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365GroupEdge!]!

  # List of O365Group objects.
  nodes: [O365Group!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365Group objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365Group object. This wrapper is used for pagination.
type O365GroupEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365Group object wrapped by this edge.
  node: O365Group!
}
# Metadata for a Microsoft 365 group.
type O365GroupMetadata {
  # Metadata for configured group.
  configuredGroupMetadata: O365ConfiguredGroupMetadata
}
# Type of an O365 Group.
enum O365GroupType {
  # AD Group.
  AD_GROUP

  # Configured Group.
  CONFIGURED_GROUP

  # Unknown group type.
  UNTYPED_GROUP
}
# The O365 license.
type O365License {
  # The license detail of O365 account.
  licenseDetails: O365LicenseDetails
}
# The O365 license detail.
type O365LicenseDetails {
  # The allowed m365 user license count.
  allowedO365UserCount: Int!

  # The license status.
  disableLicense: Boolean!

  # The M365 cloud type.
  m365Cloud: M365Cloud!

  # The Rubrik cloud type.
  rubrikSaasCloud: O365AzureCloudType!

  # Host type.
  allowedHost: AzureHostType!
}
type O365Mailbox implements HierarchyObject , HierarchySnappable , PolarisHierarchyObject , PolarisHierarchySnappable , O365OrgDescendant , O365UserDescendant , O365UserDescendantMetadata {
  isRelic: Boolean!
  userPrincipalName: String!

  # The preferred data location of the mailbox.
  preferredDataLocation: String!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Object ID.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of O365Mailbox objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365MailboxConnection {
  # List of O365Mailbox objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365MailboxEdge!]!

  # List of O365Mailbox objects.
  nodes: [O365Mailbox!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365Mailbox objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365Mailbox object. This wrapper is used for pagination.
type O365MailboxEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365Mailbox object wrapped by this edge.
  node: O365Mailbox!
}
# Configuration for the completion of an O365 OAuth consent flow.
input O365OauthConsentCompleteInput {
  # ID of the Microsoft 365 tenant.
  tenantId: String!

  # Authorization code for the consent flow.
  code: String!

  # CSRF token for the setup flow.
  stateToken: String!

  # Redirect URL for the consent flow.
  redirectUrl: String!

  # Natural ID of the resource.
  resourceNaturalId: String!
}
type O365OauthConsentCompleteReply {
  encryptedRefreshToken: String!
  appId: String!
}
# Configuration for the kickoff of an OAuth consent flow.
input O365OauthConsentKickoffInput {
  # UUID of the org.
  orgId: UUID!

  # Type of the Azure app.
  appType: String!
}
type O365OauthConsentKickoffReply {
  appClientId: String!
  tenantId: String!
  csrfToken: String!
}
type O365Onedrive implements HierarchyObject , HierarchySnappable , PolarisHierarchyObject , PolarisHierarchySnappable , O365OrgDescendant , O365UserDescendant , O365UserDescendantMetadata {
  userID: String!
  isRelic: Boolean!
  totalStorageInBytes: Long!
  usedStorageInBytes: Long!
  userName: String!
  userPrincipalName: String!

  # The preferred data location of the OneDrive.
  preferredDataLocation: String!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Object ID.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of O365Onedrive objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365OnedriveConnection {
  # List of O365Onedrive objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365OnedriveEdge!]!

  # List of O365Onedrive objects.
  nodes: [O365Onedrive!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365Onedrive objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365Onedrive object. This wrapper is used for pagination.
type O365OnedriveEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365Onedrive object wrapped by this edge.
  node: O365Onedrive!
}
type O365OnedriveFile implements O365OnedriveObject {
  # The ID of the file.
  id: String!

  # The name of the file.
  name: String

  # The ID of the parent folder.
  parentFolderId: String

  # The ID of the snapshot containing this file.
  snapshotId: UUID

  # The sequence number of the snapshot containing this file.
  snapshotNum: Int

  # The time at which the snapshot containing this file was taken.
  snapshotTime: DateTime

  # The time the file was created.
  createTime: DateTime

  # The time the file was modified.
  modifiedTime: DateTime
  fileType: String

  # The size of the file.
  size: Long

  # The name of the Teams channel containing this folder.
  channelName: String

  # The ID of the Teams channel containing this folder.
  channelId: String

  # The folder name of the Teams channel containing this folder.
  channelFolderName: String

  # The membership type of the channel containing this file for Teams files.
  channelMembershipType: ChannelMembershipType

  # The object type of this file, for example, Onedrive or SharePoint drive.
  objectType: SharePointDescendantType
}
type O365OnedriveFolder implements O365OnedriveObject {
  # The ID of the folder.
  id: String!

  # The name of the folder.
  name: String

  # The ID of the parent folder.
  parentFolderId: String

  # The ID of the snapshot containing this folder.
  snapshotId: UUID

  # The sequence number of the snapshot containing this folder.
  snapshotNum: Int

  # The time at which the snapshot containing this folder was taken.
  snapshotTime: DateTime

  # The time the folder was created.
  createTime: DateTime

  # The time the folder was modified.
  modifiedTime: DateTime
  size: Long

  # The count of items in the folder.
  itemCount: Int

  # The name of the Teams channel containing this folder.
  channelName: String

  # The ID of the Teams channel containing this folder.
  channelId: String

  # The folder name of the Teams channel containing this folder.
  channelFolderName: String

  # The membership type of the Teams channel.
  channelMembershipType: ChannelMembershipType

  # The object type of this folder, for example, Onedrive or SharePoint drive.
  objectType: SharePointDescendantType
}
interface O365OnedriveObject {
  # The ID of the O365 OneDrive object.
  id: String!

  # The parent folder ID of the object (ROOT indicates root folder).
  parentFolderId: String

  # The name of the OneDrive object.
  name: String

  # The size of the OneDrive object or its contents in bytes.
  size: Long

  # The creation time of the OneDrive object.
  createTime: DateTime

  # The modified time of the OneDrive object.
  modifiedTime: DateTime

  # The display name of the Teams channel.
  channelName: String

  # The name of the folder corresponding to the Teams channel.
  channelFolderName: String

  # The membership type of the Teams channel.
  channelMembershipType: ChannelMembershipType
}
# Paginated list of O365OnedriveObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365OnedriveObjectConnection {
  # List of O365OnedriveObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365OnedriveObjectEdge!]!

  # List of O365OnedriveObject objects.
  nodes: [O365OnedriveObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365OnedriveObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365OnedriveObject object. This wrapper is used for pagination.
type O365OnedriveObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365OnedriveObject object wrapped by this edge.
  node: O365OnedriveObject!
}
type O365Org implements HierarchyObject , PolarisHierarchyObject {
  status: OrgStatus!
  exocomputeId: String!

  # Compliance count for Exchange.
  past1DayMailboxComplianceCount: Int!

  # Out of compliance count for SharePoint site collections.
  past1DayMailboxOutOfComplianceCount: Int!

  # Compliance count for Onedrives.
  past1DayOnedriveComplianceCount: Int!

  # Out of compliance count for Onedrives.
  past1DayOnedriveOutOfComplianceCount: Int!

  # Compliance count for SharePoint document libraries.
  past1DaySharepointComplianceCount: Int!

  # Out of compliance count for SharePoint document libraries.
  past1DaySharepointOutOfComplianceCount: Int!

  # Compliance count for Teams.
  past1DayTeamsComplianceCount: Int!

  # Out of compliance count for Teams.
  past1DayTeamsOutOfComplianceCount: Int!

  # Compliance count for SharePoint Lists.
  past1DaySpListComplianceCount: Int!

  # Out of compliance count for SharePoint Lists.
  past1DaySpListOutOfComplianceCount: Int!

  # Compliance count for SharePoint site collections.
  past1DaySpSiteCollectionComplianceCount: Int!

  # Out of compliance count for SharePoint site collections.
  past1DaySpSiteCollectionOutOfComplianceCount: Int!

  # Specifies whether the org has legacy SharePoint Snapshots.
  hasSharePointLegacySnapshots: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # List of direct children of O365Org.
  childConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): O365UserConnection!

  # List of all descendants of O365Org.
  searchDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): O365OrgDescendantConnection!

  # Number of O365 Users with no SLA assigned.
  unprotectedUsersCount: Int!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of O365Org objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365OrgConnection {
  # List of O365Org objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365OrgEdge!]!

  # List of O365Org objects.
  nodes: [O365Org!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365Org objects matching the request arguments.
  count: Int!
}
interface O365OrgDescendant {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of O365OrgDescendant objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365OrgDescendantConnection {
  # List of O365OrgDescendant objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365OrgDescendantEdge!]!

  # List of O365OrgDescendant objects.
  nodes: [O365OrgDescendant!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365OrgDescendant objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365OrgDescendant object. This wrapper is used for pagination.
type O365OrgDescendantEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365OrgDescendant object wrapped by this edge.
  node: O365OrgDescendant!
}
# Wrapper around the O365Org object. This wrapper is used for pagination.
type O365OrgEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365Org object wrapped by this edge.
  node: O365Org!
}
# The O365 subscription status and ID info.
type O365OrgInfo {
  # Polaris ID of O365 subscription.
  orgId: String!

  # Provision status of O365 subscription.
  status: ProvisionStatus!

  # Exchange colossus status.
  exchangeOnColossus: Boolean!

  # Mailboxes compliant.
  past1DayMailboxComplianceCount: Int!

  # Mailboxes not compliant.
  past1DayMailboxOutOfComplianceCount: Int!

  # Onedrives compliant.
  past1DayOnedriveComplianceCount: Int!

  # Onedrives not compliant.
  past1DayOnedriveOutOfComplianceCount: Int!

  # Sharepoints compliant.
  past1DaySharepointComplianceCount: Int!

  # Sharepoints not compliant.
  past1DaySharepointOutOfComplianceCount: Int!

  # Teams compliant.
  past1DayTeamsComplianceCount: Int!

  # Teams not compliant.
  past1DayTeamsOutOfComplianceCount: Int!

  # Sharepoint Lists compliant.
  past1DaySpListComplianceCount: Int!

  # Sharepoint Lists not compliant.
  past1DaySpListOutOfComplianceCount: Int!

  # Compliance count for SharePoint site collections.
  past1DaySpSiteCollectionComplianceCount: Int!

  # Out of compliance count for SharePoint site collections.
  past1DaySpSiteCollectionOutOfComplianceCount: Int!
}
# Pairing of a preferred data location (PDL) and the workload corresponding to the PDL group.
type O365PdlAndWorkloadPair {
  # The preferred data location for the group.
  pdl: String!

  # The workload for the group.
  workload: WorkloadLevelHierarchy!
}
# Input to create the pairing of a preferred data location (PDL) and the workload corresponding to the PDL group.
input O365PdlAndWorkloadPairInput {
  # The preferred data location for the group.
  pdl: String!

  # The workload for the group.
  workload: WorkloadLevelHierarchy!
}
# The details of a PDL group to be used for role creation.
type O365PdlGroup {
  # The ID for the group.
  groupId: UUID!

  # The preferred data location and workload pair for role creation.
  pdlAndWorkload: O365PdlAndWorkloadPair!
}
# Configuration for the retrieval or creation of PDL groups.
input O365PdlGroupsInput {
  # UUID of the org.
  orgId: UUID!

  # The preferred data location and workload pairings for the groups.
  pdlAndWorkloadPairs: [O365PdlAndWorkloadPairInput!]!
}
# The details for PDL groups to be used for role creation.
type O365PdlGroupsReply {
  # The groups for the preferred data location and workload pairings.
  groups: [O365PdlGroup!]!
}
type O365PhysicalDataSizeTimeStamp {
  physicalDataSizeInBytes: Long!
  timestamp: DateTime
}
# Returns fields related to different Microsoft Office 365 SharePointDrive/OneDrive types.
type O365ReplyFields {
  # Microsoft Office 365 SharePointDrive data returned by browse or search delta response.
  spDriveItem: O365SharePointDrive
}
# Recover operation type, Restore/Export/Inplace.
enum O365RestoreActionType {
  # Used for export operation.
  EXPORT_SNAPPABLE

  # Used for in-place restore operation.
  INPLACE_RESTORE_SNAPPABLE

  # Used for restore operation.
  RESTORE_SNAPPABLE
}
# Configuration for the setup of a Rubrik-hosted subscription.
input O365SaasSetupCompleteInput {
  # ID of the Azure tenant.
  tenantId: String!

  # The value of this field depends on the value of the storeBackupInSameRegionAsData field. When its value is false, regionName represents the Azure region name. When true, regionName represents the name of the central data location of the M365 organization.
  regionName: String!

  # CSRF token for the setup flow.
  stateToken: String!

  # Types of the apps created in the flow.
  appTypes: [String!]!

  # Azure KMS configuration, excluding the app secret.
  kmsSpec: KmsSpecInput

  # Specifies whether the backups will be stored in the same region as the source data. When true, the regionName field represents the name of the central data location of the M365 organization.
  storeBackupInSameRegionAsData: Boolean!
}
# O365 SaaS setup kickoff response.
type O365SaasSetupKickoffReply {
  csrfToken: String!
  appClientIdsPerType: [AppIdForType!]!
}
# Status of o365 service account.
enum O365ServiceAccountStatus {
  # Service account is invalid.
  INVALID

  # Service account not configured.
  NOT_CONFIGURED

  # Service account is valid.
  VALID
}
type O365ServiceAccountStatusResp {
  username: String!
  status: O365ServiceAccountStatus!
}
# Service status of o365.
enum O365ServiceStatusIndication {
  # Service is down.
  DOWN

  # Service is online.
  ONLINE
}
# O365 setup kickoff response.
type O365SetupKickoffResp {
  appClientId: String!
  csrfToken: String!
  appClientIdsPerType: [AppIdForType!]!
}
# Microsoft Sharepoint Drive identifiers.
type O365SharePointDrive {
  # The object type of the Microsoft Office Sharepoint.
  objectType: SharePointDescendantType!
}
# Workload specific Input for specifying Microsoft Office 365 SharePointSite.
input O365SharePointSite {
  # The site child ID for SharePoint descendant objects.
  siteChildId: String

  # The site child type for SharePoint descendant objects.
  siteChildType: SharePointDescendantType
}
type O365SharepointDrive implements HierarchyObject , HierarchySnappable , PolarisHierarchyObject , PolarisHierarchySnappable , O365OrgDescendant , O365SharepointObject {
  objectId: String!
  naturalId: String!
  listNaturalId: String!
  parentId: String!

  # The child ID of the object used for full SharePoint.
  siteChildId: String!
  title: String!
  isRelic: Boolean!
  totalStorageInBytes: Long!
  usedStorageInBytes: Long!
  url: String!

  # The preferred data location of the SharePoint drive.
  preferredDataLocation: String!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Object ID.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of O365SharepointDrive objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365SharepointDriveConnection {
  # List of O365SharepointDrive objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365SharepointDriveEdge!]!

  # List of O365SharepointDrive objects.
  nodes: [O365SharepointDrive!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365SharepointDrive objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365SharepointDrive object. This wrapper is used for pagination.
type O365SharepointDriveEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365SharepointDrive object wrapped by this edge.
  node: O365SharepointDrive!
}
type O365SharepointList implements HierarchyObject , HierarchySnappable , PolarisHierarchyObject , PolarisHierarchySnappable , O365OrgDescendant , O365SharepointObject {
  objectId: String!
  naturalId: String!
  parentId: String!

  # The child ID of the object used for full SharePoint.
  siteChildId: String!
  title: String!
  url: String!
  isRelic: Boolean!

  # The preferred data location of the SharePoint list.
  preferredDataLocation: String!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The ID of the O365 SharePoint list object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of O365SharepointList objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365SharepointListConnection {
  # List of O365SharepointList objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365SharepointListEdge!]!

  # List of O365SharepointList objects.
  nodes: [O365SharepointList!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365SharepointList objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365SharepointList object. This wrapper is used for pagination.
type O365SharepointListEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365SharepointList object wrapped by this edge.
  node: O365SharepointList!
}
interface O365SharepointObject {
  # The sharepoint object ID.
  objectId: String!

  # The parent ID of the object.
  parentId: String!

  # The child ID of the object used for full SharePoint.
  siteChildId: String!

  # The title or name of the sharepoint object.
  title: String!

  # The preferred data location of the SharePoint workload.
  preferredDataLocation: String!
}
# Paginated list of O365SharepointObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365SharepointObjectConnection {
  # List of O365SharepointObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365SharepointObjectEdge!]!

  # List of O365SharepointObject objects.
  nodes: [O365SharepointObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365SharepointObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365SharepointObject object. This wrapper is used for pagination.
type O365SharepointObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365SharepointObject object wrapped by this edge.
  node: O365SharepointObject!
}
# Input for specifying Microsoft Office 365 SharePoint fields in WorkloadFieldsInput.
input O365SharepointSnapshotFileDeltaInput {
  # Browse Microsoft Office 365 SharePoint folder ID.
  folderId: String = ""

  # Microsoft Office 365 organization ID.
  orgId: String = ""

  # The workload specific input needed for (SharePointDrive/OneDrive/SharePointSite) objects.
  sharepointSiteReq: O365SharePointSite
}
type O365Site implements HierarchyObject , HierarchySnappable , PolarisHierarchyObject , PolarisHierarchySnappable , O365OrgDescendant , O365SharepointObject {
  objectId: String!
  title: String!
  parentId: String!

  # The child ID of the object used for full SharePoint.
  siteChildId: String!
  url: String!
  hierarchyLevel: Int!
  isRelic: Boolean!

  # The objects excluded from protection for full SharePoint.
  excludedObjects: FullSpSiteExclusions

  # The preferred data location of the SharePoint site.
  preferredDataLocation: String!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Object ID.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
# Paginated list of O365Site objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365SiteConnection {
  # List of O365Site objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365SiteEdge!]!

  # List of O365Site objects.
  nodes: [O365Site!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365Site objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365Site object. This wrapper is used for pagination.
type O365SiteEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365Site object wrapped by this edge.
  node: O365Site!
}
# Specific information for M365 Site snapshot created on Rubrik.
type O365SiteSpecificSnapshot implements PolarisSpecificSnapshot {
  # BackupStatus for M365 Site snapshot.
  backupStatus: SnapshotServiceBackupStatus!

  # Percentage of children objects missing in the snapshot.
  percentOfObjectsSkipped: Int!

  # ID of the snapshot.
  snapshotId: UUID!
}
# Input for specifying Microsoft Office 365 Onedrive fields in WorkloadFieldsInput.
input O365SnapshotFileDeltaInput {
  # Browse Microsoft Office 365 OneDrive folder ID.
  folderId: String = ""

  # Microsoft Office 365 organization ID.
  orgId: String = ""
}
# Browse or search delta response returns Microsoft Office 365 file or folder data.
type O365SnapshotItemInfo {
  # The ID of the Microsoft Office 365 OneDrive object.
  id: String!

  # The parent folder ID of the object (ROOT indicates root folder).
  parentFolderId: String

  # The ID of the snapshot.
  snapshotId: String

  # The sequence number of the snapshot.
  snapshotNum: Int

  # Returns a list of folder IDs that contains the absolute path of the given item, starting with root and ending with the item. The first element in the list is the root, and the last is the item itself.
  folderIdsTillRoot: [String!]!

  # Returns fields related to different Microsoft Office 365 SharePointDrive/OneDrive types.
  o365ReplyFields: O365ReplyFields!
}
# Represents the number of service types for a subscription.
type O365SubscriptionAppTypeCounts {
  # The ID of the O365 subscription.
  subscriptionId: UUID!

  # The number of Exchange apps in this subscription based on their authentication status.
  exchangeAppCounts: AuthCounts!

  # The number of OneDrive apps in this subscription based on their authentication status.
  onedriveAppCounts: AuthCounts!

  # The number of SharePoint apps in this subscription based on their authentication status.
  sharepointAppCounts: AuthCounts!

  # The number of Teams apps in this subscription based on their authentication status.
  teamsAppCounts: AuthCounts!
}
type O365TeamConvChannel {
  naturalId: String!
  name: String!
  folderId: String!

  # The membership type of the channel.
  membershipType: ChannelMembershipType!
}
# Paginated list of O365TeamConvChannel objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365TeamConvChannelConnection {
  # List of O365TeamConvChannel objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365TeamConvChannelEdge!]!

  # List of O365TeamConvChannel objects.
  nodes: [O365TeamConvChannel!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365TeamConvChannel objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365TeamConvChannel object. This wrapper is used for pagination.
type O365TeamConvChannelEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365TeamConvChannel object wrapped by this edge.
  node: O365TeamConvChannel!
}
# Channel object consisting naturalId and name.
input O365TeamConvChannelInput {
  naturalId: String!
  name: String!
  folderId: String!

  # The membership type of the channel.
  membershipType: ChannelMembershipType!
}
type O365TeamConversationsSender {
  displayName: String!
  naturalId: String!
}
# Paginated list of O365TeamConversationsSender objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365TeamConversationsSenderConnection {
  # List of O365TeamConversationsSender objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365TeamConversationsSenderEdge!]!

  # List of O365TeamConversationsSender objects.
  nodes: [O365TeamConversationsSender!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365TeamConversationsSender objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365TeamConversationsSender object. This wrapper is used for pagination.
type O365TeamConversationsSenderEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365TeamConversationsSender object wrapped by this edge.
  node: O365TeamConversationsSender!
}
type O365Teams implements HierarchyObject , HierarchySnappable , PolarisHierarchyObject , PolarisHierarchySnappable , O365OrgDescendant {
  orgID: String!
  naturalId: String!
  teamName: String!
  isRelic: Boolean!
  membersCount: Int!

  # The preferred data location of the team.
  preferredDataLocation: String!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # Object ID.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot
}
type O365TeamsChannel implements O365TeamsChannelObject {
  id: String
  naturalId: String
  name: String
  folderId: String
  folderName: String

  # The membership type of the channel.
  membershipType: ChannelMembershipType
}
# Paginated list of O365TeamsChannel objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365TeamsChannelConnection {
  # List of O365TeamsChannel objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365TeamsChannelEdge!]!

  # List of O365TeamsChannel objects.
  nodes: [O365TeamsChannel!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365TeamsChannel objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365TeamsChannel object. This wrapper is used for pagination.
type O365TeamsChannelEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365TeamsChannel object wrapped by this edge.
  node: O365TeamsChannel!
}
interface O365TeamsChannelObject {
  # The ID of the Teams channel.
  id: String

  # The display name of the Teams channel.
  name: String

  # The name of the Sharepoint folder for the Teams channel.
  folderName: String

  # The ID of the Sharepoint folder for the Teams channel.
  folderId: String
}
# Paginated list of O365Teams objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365TeamsConnection {
  # List of O365Teams objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365TeamsEdge!]!

  # List of O365Teams objects.
  nodes: [O365Teams!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365Teams objects matching the request arguments.
  count: Int!
}
type O365TeamsConversations {
  channelId: String!
  channelName: String
  channelPostCount: Int!
}
# Paginated list of O365TeamsConversations objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365TeamsConversationsConnection {
  # List of O365TeamsConversations objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365TeamsConversationsEdge!]!

  # List of O365TeamsConversations objects.
  nodes: [O365TeamsConversations!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365TeamsConversations objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365TeamsConversations object. This wrapper is used for pagination.
type O365TeamsConversationsEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365TeamsConversations object wrapped by this edge.
  node: O365TeamsConversations!
}
# Wrapper around the O365Teams object. This wrapper is used for pagination.
type O365TeamsEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365Teams object wrapped by this edge.
  node: O365Teams!
}
type O365User implements HierarchyObject , PolarisHierarchyObject , O365OrgDescendant {
  emailAddress: String
  isRelic: Boolean!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # List of direct children of O365User.
  childConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # The hierarchy object filter.
    filter: [Filter!]): O365UserDescendantConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of O365User objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365UserConnection {
  # List of O365User objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365UserEdge!]!

  # List of O365User objects.
  nodes: [O365User!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365User objects matching the request arguments.
  count: Int!
}
interface O365UserDescendant {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Paginated list of O365UserDescendant objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365UserDescendantConnection {
  # List of O365UserDescendant objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365UserDescendantEdge!]!

  # List of O365UserDescendant objects.
  nodes: [O365UserDescendant!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365UserDescendant objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365UserDescendant object. This wrapper is used for pagination.
type O365UserDescendantEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365UserDescendant object wrapped by this edge.
  node: O365UserDescendant!
}
interface O365UserDescendantMetadata {
  # The object ID.
  id: UUID!

  # The name of the object.
  name: String!

  # The user principal name of the object.
  userPrincipalName: String!

  # The preferred data location of the workload.
  preferredDataLocation: String!
}
# Paginated list of O365UserDescendantMetadata objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type O365UserDescendantMetadataConnection {
  # List of O365UserDescendantMetadata objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [O365UserDescendantMetadataEdge!]!

  # List of O365UserDescendantMetadata objects.
  nodes: [O365UserDescendantMetadata!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of O365UserDescendantMetadata objects matching the request arguments.
  count: Int!
}
# Wrapper around the O365UserDescendantMetadata object. This wrapper is used for pagination.
type O365UserDescendantMetadataEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365UserDescendantMetadata object wrapped by this edge.
  node: O365UserDescendantMetadata!
}
# Wrapper around the O365User object. This wrapper is used for pagination.
type O365UserEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual O365User object wrapped by this edge.
  node: O365User!
}
# Request parameters for an OauthAccessTokenRequest.
type OauthAccessToken {
  # ClientID required to authenticate OAuth request for access token.
  clientId: String!

  # Unique code required to authenticate OAuth request for access token.
  code: String!

  # Code verifier required to authenticate code challenge in the database.
  codeVerifier: String!

  # The time after which the Rubrik CDM OVA expires.
  expiryTime: String!

  # If the RSC registration fails, refer to this URL.
  redirectUri: String!
}
# Reply for request to download Rubrik Edge from Rubrik Security Cloud.
type OauthCodesForEdgeRegReply {
  # Link to download Rubrik CDM OVA for virtual cluster.
  cdmOvaLink: String!

  # Request parameters for an OAuth access token to register with Rubrik Security Cloud.
  registrationCodes: [OauthAccessToken!]!

  # Link to the Windows tool used to package, bootstrap, and register Rubrik Edge.
  windowsToolLink: String!
}
# Payload for OAuth registration.
type OauthRequestPayload {
  # Client ID of OAuth request.
  clientId: String!

  # State of OAuth request.
  state: String!

  # Redirect URI of OAuth request.
  redirectUri: String!

  # Response type of OAuth request.
  responseType: String!

  # Code challenge of OAuth request.
  codeChallenge: String!

  # Code challenge method of OAuth request.
  codeChallengeMethod: String!

  # Scope of OAuth request.
  scope: String!
}
# Supported in v6.0+
type ObjectIdToSnapshotIds {
  # Required. Supported in v6.0+
  # Object ID.
  id: String!

  # Required. Supported in v6.0+
  # Snapshot IDs.
  snapshots: [String!]!
}
# Supported in v6.0+
input ObjectIdToSnapshotIdsInput {
  # Required. Supported in v6.0+
  # Object ID.
  id: String!

  # Required. Supported in v6.0+
  # Snapshot IDs.
  snapshots: [String!]!
}
type ObjectIdsForHierarchyType {
  objectIds: [String!]!
  snappableType: WorkloadLevelHierarchy!
}
input ObjectIdsForHierarchyTypeInput {
  objectIds: [String!]!
  snappableType: WorkloadLevelHierarchy!
}
# Map of AzureAdObjectType to IDs.
input ObjectInfoType {
  # ID of the AzureAD object.
  objectId: UUID!

  # Azure AD object type.
  azureAdObjectType: AzureAdObjectType!
}
enum ObjectPolicyStatus {
  STALE
  UNKNOWN
  UP_TO_DATE
}
# Object-specific configurations.
type ObjectSpecificConfigs {
  # SLA Domain configuration for SAP HANA object.
  sapHanaConfig: SapHanaConfig

  # SLA Domain configuration for AWS RDS object.
  awsRdsConfig: AwsRdsConfig

  # SLA Domain configuration for VMware virtual machine object.
  vmwareVmConfig: VmwareVmConfig

  # SLA Domain configuration for Azure SQL Database DB object.
  azureSqlDatabaseDbConfig: AzureSqlDatabaseDbConfig

  # SLA Domain configuration for Azure SQL Managed Instance DB object.
  azureSqlManagedInstanceDbConfig: AzureSqlManagedInstanceDbConfig

  # SLA Domain configuration for Db2 database object.
  db2Config: Db2Config

  # SLA Domain configuration for SQL Server database object.
  mssqlConfig: MssqlConfig

  # SLA Domain configuration for Oracle database object.
  oracleConfig: OracleConfig

  # SLA Domain configuration for MongoDB database object.
  mongoConfig: MongoConfig

  # SLA Domain configuration for Azure Blob object.
  azureBlobConfig: AzureBlobConfig

  # SLA Domain configuration for AWS S3 bucket.
  awsNativeS3SlaConfig: AwsNativeS3SlaConfig

  # SLA Domain configuration for Managed Volume object.
  managedVolumeSlaConfig: ManagedVolumeSlaConfig
}
# Object-specific configurations.
input ObjectSpecificConfigsInput {
  # SLA Domain configuration for SAP HANA object.
  sapHanaConfigInput: SapHanaConfigInput

  # SLA Domain configuration for AWS RDS object.
  awsRdsConfigInput: AwsRdsConfigInput

  # SLA Domain configuration for VMware virtual machine object.
  vmwareVmConfigInput: VmwareVmConfigInput

  # Input to configure the SLA Domain for Azure SQL Database DB.
  azureSqlDatabaseDbConfigInput: AzureSqlDatabaseDbConfigInput

  # Input to configure the SLA Domain for Azure SQL Managed Instance DB.
  azureSqlManagedInstanceDbConfigInput: AzureSqlManagedInstanceDbConfigInput

  # Input to configure the SLA Domain for Db2 database.
  db2ConfigInput: Db2ConfigInput

  # Input to configure the SLA Domain for SQL Server database.
  mssqlConfigInput: MssqlConfigInput

  # Input to configure the SLA Domain for Oracle database.
  oracleConfigInput: OracleConfigInput

  # Input to configure the SLA Domain for MongoDB database.
  mongoConfigInput: MongoConfigInput

  # SLA Domain configuration for Azure Blob object.
  azureBlobConfigInput: AzureBlobConfigInput

  # Input to configure the SLA Domain configuration for AWS S3 bucket.
  awsNativeS3SlaConfigInput: AwsNativeS3SlaConfigInput

  # Input to configure the SLA Domain for Managed Volume.
  managedVolumeSlaConfigInput: ManagedVolumeSlaConfigInput
}
type ObjectStatus {
  id: String!
  latestSnapshotResult: SnapshotResult
  policyStatuses: [PolicyStatus!]!
}
type ObjectSummary {
  id: String!
  name: String!
  mailAddress: String!
  objectType: ManagedObjectType!
  isArchived: Boolean!
}
type ObjectType {
  enumValue: ObjectTypeEnum!
}
# Object type access summary.
type ObjectTypeAccessSummary {
  # Object type.
  objectType: DataGovObjectType!

  # Total number of sensitive hits.
  totalHits: Long!

  # Change in sensitive hits for the time period.
  deltaHits: Long!

  # Policy summaries.
  policySummaryDetails: [PolicySummaryDetails!]!
}
# Paginated list of ObjectTypeAccessSummary objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ObjectTypeAccessSummaryConnection {
  # List of ObjectTypeAccessSummary objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ObjectTypeAccessSummaryEdge!]!

  # List of ObjectTypeAccessSummary objects.
  nodes: [ObjectTypeAccessSummary!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ObjectTypeAccessSummary objects matching the request arguments.
  count: Int!
}
# Wrapper around the ObjectTypeAccessSummary object. This wrapper is used for pagination.
type ObjectTypeAccessSummaryEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ObjectTypeAccessSummary object wrapped by this edge.
  node: ObjectTypeAccessSummary!
}
# GetObjectTypeAccessSummariesSortBy specifies the sort criteria for
# object type access summaries.
enum ObjectTypeAccessSummarySortBy {
  # Unspecified sort criteria.
  SORT_BY_UNSPECIFIED

  # Sort based on total number of high-risk hits.
  TOTAL_HIGH_RISK_HITS

  # Sort based on total number of  hits.
  TOTAL_HITS

  # Sort based on total number of low-risk hits.
  TOTAL_LOW_RISK_HITS

  # Sort based on total number of medium-risk hits.
  TOTAL_MEDIUM_RISK_HITS
}
enum ObjectTypeEnum {
  # Active Directory domain controller.
  ACTIVE_DIRECTORY_DOMAIN_CONTROLLER

  # AWS native S3 Bucket.
  AWS_NATIVE_S3_BUCKET

  # Azure AD Directory.
  AZURE_AD_DIRECTORY
  AZURE_SQL_DATABASE_DB
  AZURE_SQL_MANAGED_INSTANCE_DB

  # Azure Storage Account.
  AZURE_STORAGE_ACCOUNT
  AppBlueprint
  AwsNativeEbsVolume
  AwsNativeEc2Instance
  AwsNativeRdsInstance
  AzureNativeManagedDisk
  AzureNativeVm

  # Cassandra Column Family.
  CASSANDRA_COLUMN_FAMILY

  # Cassandra Keyspace.
  CASSANDRA_KEYSPACE

  # Cassandra Source.
  CASSANDRA_SOURCE

  # Cloud Direct NAS Export.
  CLOUD_DIRECT_NAS_EXPORT
  Db2Database
  Ec2Instance

  # Exchange Database.
  ExchangeDatabase
  Fileset
  GcpNativeDisk
  GcpNativeGCEInstance
  Hdfs
  HypervVirtualMachine

  # Jira settings.
  JIRA_FIXED_OBJECT

  # Jira project.
  JIRA_PROJECT

  # Kubernetes Protection Set.
  K8S_PROTECTION_SET
  KuprNamespace
  LinuxFileset

  # MongoDB Collection.
  MONGODB_COLLECTION

  # MongoDB Database.
  MONGODB_DATABASE

  # MongoDB Source Cluster.
  MONGODB_SOURCE

  # MongoDB Collection.
  MONGO_COLLECTION

  # MongoDB Database.
  MONGO_COLLECTION_SET

  # MongoDB Database.
  MONGO_DATABASE

  # MongoDB Source.
  MONGO_SOURCE

  # Managed Volume.
  ManagedVolume
  Mssql
  MssqlDatabaseBatchMaintenance
  NAS_FILESET
  NutanixVirtualMachine
  O365Calendar
  O365File
  O365Mailbox
  O365Onedrive
  O365SharePointDrive
  O365SharePointList
  O365Site
  O365Teams
  ORACLE_DATA_GUARD_GROUP
  OracleDatabase
  RubrikEbsVolume
  RubrikEc2Instance
  SapHanaDatabase
  ShareFileset
  SnapMirrorCloud
  StorageArrayVolumeGroup
  VcdVapp
  VmwareVirtualMachine
  VolumeGroup
  WindowsFileset
  WindowsVolumeGroup
}
# Filters for GetObjectTypeAccessSummariesRequest.
input ObjectTypeSummariesFilter {
  # Policy ID to filter.
  policyId: String = ""

  # Object type to filter.
  objectType: DataGovObjectType = OBJECT_TYPE_UNSPECIFIED
}
# Input for restore path pair.
input OldRestorePathPairInput {
  # Path to be restored from source.
  path: String = ""

  # The restore path.
  restorePath: String = ""
}
# Parameters for OneDrive file or folder search.
input OnedriveSearchFilter {
  searchKeywordFilter: OnedriveSearchKeywordFilter
  modifiedTime: TimeRangeFilter
  createTime: TimeRangeFilter
  searchObjectFilter: OnedriveSearchObjectFilter
  channelId: String
  channelFolderName: String
  channelMembershipType: ChannelMembershipType = ALL
  excludeItemsUnderRoot: Boolean
  channelNameKeyword: String

  # Determines whether to use exact version match query.
  useExactVersionMatch: Boolean = false

  # Parameters to use lambda filters in query.
  lambdaFilters: LambdaPathFilters
}
# OneDrive search keyword and keyword type.
input OnedriveSearchKeywordFilter {
  searchKeyword: String = ""
  keywordType: OnedriveSearchKeywordType = NAME
}
# Search keyword type.
enum OnedriveSearchKeywordType {
  # Search by file type.
  FILE_TYPE

  # Search by file or folder name.
  NAME
}
# OneDrive search object type.
input OnedriveSearchObjectFilter {
  searchObjectType: OnedriveSearchObjectType = O365_FOLDER
}
# Object type to constrain the search against.
enum OnedriveSearchObjectType {
  # Search all.
  ALL

  # Search folders only.
  O365_FOLDER

  # Search files only.
  ONEDRIVE_FILE
}
enum OpenAccessType {
  EXPLICIT
  INHERITED
  NOT_OPEN
  UNKNOWN_ACCESS
}
# Operations defined in the RBAC system.
enum Operation {
  ADD_AWS_CLOUD_ACCOUNT
  ADD_AZURE_CLOUD_ACCOUNT

  # Add certificates and certificate signing requests in tenant organization.
  ADD_CERTIFICATE
  ADD_CLUSTER

  # Add nodes to the cluster.
  ADD_CLUSTER_NODES
  ADD_GCP_CLOUD_ACCOUNT
  ADD_INVENTORY
  ADD_STORAGE_SETTINGS
  ALLOW_SUPPORT_USER_SESSIONS

  # Approve TPR request.
  APPROVE_TPR_REQUEST
  CANCEL_RUNNING_ACTIVITY

  # Cancel TPR request.
  CANCEL_TPR_REQUEST
  CATEGORY_MANAGE_DATA_SOURCE
  CATEGORY_PROTECTION
  CATEGORY_RECOVERY
  CATEGORY_VIEW_DATA_SOURCE
  CONFIGURE_DATA_CLASS_GLOBAL

  # Configure the database log reporting properties for a cluster.
  CONFIGURE_DB_LOG_REPORT_PROPERTIES

  # Create cross-account pair.
  CREATE_CROSS_ACCOUNT_PAIR
  CREATE_REPORT
  CREATE_SLA
  CREATE_THREAT_HUNT

  # Internal permission to support cross-account replication.
  CROSS_ACCOUNT_REPLICATION
  DELETE_AWS_CLOUD_ACCOUNT
  DELETE_AZURE_CLOUD_ACCOUNT
  DELETE_GCP_CLOUD_ACCOUNT
  DELETE_INVENTORY
  DELETE_REPORT
  DELETE_SLA
  DELETE_SNAPSHOT
  DELETE_STORAGE_SETTINGS
  DOWNLOAD
  DOWNLOAD_FROM_ARCHIVAL_LOCATION
  DOWNLOAD_SNAPSHOT_FROM_REPLICATION_TARGET

  # Download VM-level files.
  DOWNLOAD_VIRTUAL_MACHINE_FILE
  EDIT_AWS_CLOUD_ACCOUNT
  EDIT_AZURE_CLOUD_ACCOUNT
  EDIT_CDM_NETWORK_SETTING
  EDIT_CDM_SUPPORT_SETTING
  EDIT_CDM_SYS_CONFIG
  EDIT_GCP_CLOUD_ACCOUNT
  EDIT_NETWORK_THROTTLE_SETTINGS
  EDIT_ORGANIZATION
  EDIT_QUARANTINE
  EDIT_REPLICATION_SETTINGS
  EDIT_SECURITY_SETTINGS
  EDIT_STORAGE_SETTINGS
  EDIT_SYSTEM_PREFERENCE
  EDIT_USER_MANAGEMENT
  EXPORT
  EXPORT_DATA_CLASS_GLOBAL
  EXPORT_FILES
  EXPORT_SNAPSHOTS

  # Recover specific objects from backup.
  GRANULAR_RECOVERY
  INSTANT_RECOVER
  MANAGE_ACCESS

  # Manage archival network throttle settings.
  MANAGE_ARCHIVAL_NETWORK_THROTTLE_SETTINGS

  # The operation to manage CDP IO Filter.
  MANAGE_CDP_IO_FILTER

  # Manage certificates and certificate signing requests.
  MANAGE_CERTIFICATE

  # Set up or remove disks on a cluster.
  MANAGE_CLUSTER_DISKS

  # Edit cluster settings.
  MANAGE_CLUSTER_SETTINGS

  # Manage CORS settings.
  MANAGE_CORS_SETTINGS

  # Manage cross-account pair.
  MANAGE_CROSS_ACCOUNT_PAIR
  MANAGE_DATA_SOURCE

  # Manage distribution list email settings.
  MANAGE_DL_EMAIL_SETTINGS

  # Manage GPS to RSC upgrade.
  MANAGE_GPS_TO_RSC_UPGRADE

  # Manage Guest OS credentials.
  MANAGE_GUEST_OS_CREDENTIAL
  MANAGE_LEGAL_HOLD

  # Manage migration dashboard.
  MANAGE_MIGRATION_DASHBOARD

  # Manage recoveries within Orchestrated Recovery.
  MANAGE_ORCHESTRATED_RECOVERY
  MANAGE_PROTECTION

  # Manage Recovery Plans within Orchestrated Recovery.
  MANAGE_RECOVERY_PLAN
  MANAGE_SLA

  # The operation to manage the SMB domain.
  MANAGE_SMB_DOMAIN

  # Manage SNMP configuration.
  MANAGE_SNMP

  # Manage support bundle.
  MANAGE_SUPPORT_BUNDLE

  # Manage syslog rules.
  MANAGE_SYSLOG

  # Manage TPR configuration.
  MANAGE_TPR_CONFIGURATION

  # Manage TPR enablement.
  MANAGE_TPR_ENABLEMENT

  # Manage TPR policy.
  MANAGE_TPR_POLICY
  MANAGE_WEBHOOKS

  # Manage Zscaler integration.
  MANAGE_ZSCALER_DLP_INTEGRATION
  MODIFY_CLUSTER

  # Modify event cluster settings.
  MODIFY_EVENT_CLUSTER_SETTING
  MODIFY_INVENTORY
  MODIFY_REPORT
  MODIFY_SLA
  MOUNT
  PROVISION_ON_INFRASTRUCTURE
  RECOVER_FROM_QUARANTINE
  REFRESH_DATA_SOURCE
  REMOVE_CLUSTER

  # Remove nodes from the cluster.
  REMOVE_CLUSTER_NODES

  # Operation to Resize Managed Volume.
  RESIZE_MANAGED_VOLUME
  RESTORE
  RESTORE_TO_ORIGIN
  TAKE_ON_DEMAND_SNAPSHOT

  # The operation to tier existing snapshots in bulk through snapshot management.
  TIER_EXISTING_SNAPSHOTS
  TOGGLE_BLACKOUT_WINDOW
  TRANSFER_ACCOUNT_OWNERSHIP
  UPDATE_ACCOUNT_OWNERSHIP
  UPGRADE_CLUSTER

  # Use the Rubrik cluster as a replication target.
  USE_AS_REPLICATION_TARGET
  VIEW_ACCESS

  # View archival location.
  VIEW_ARCHIVAL_LOCATION
  VIEW_AUDIT_LOG
  VIEW_AWS_CLOUD_ACCOUNT
  VIEW_AZURE_CLOUD_ACCOUNT
  VIEW_CDM_NETWORK_SETTING
  VIEW_CDM_SUPPORT_SETTING
  VIEW_CDM_SYS_CONFIG

  # View certificates and certificate signing requests.
  VIEW_CERTIFICATE
  VIEW_CLUSTER

  # View cluster licenses.
  VIEW_CLUSTER_LICENSES

  # View CORS settings.
  VIEW_CORS_SETTINGS
  VIEW_DASHBOARD
  VIEW_DATA_CLASS_GLOBAL

  # View account-wide data security risk metrics, scores, and recommendations.
  VIEW_DATA_SECURITY_DETAILS

  # View the database log reporting properties for a cluster.
  VIEW_DB_LOG_REPORT_PROPERTIES

  # View distribution list email settings.
  VIEW_DL_EMAIL_SETTINGS

  # View event cluster settings.
  VIEW_EVENT_CLUSTER_SETTING
  VIEW_GCP_CLOUD_ACCOUNT

  # View Guest OS credentials.
  VIEW_GUEST_OS_CREDENTIAL
  VIEW_INVENTORY

  # View Network Throttle Settings.
  VIEW_NETWORK_THROTTLE_SETTINGS
  VIEW_NON_SYSTEM_EVENT

  # View Orchestrated Recovery application.
  VIEW_ORCHESTRATED_RECOVERY_APP
  VIEW_ORGANIZATION
  VIEW_REPLICATION_SETTINGS
  VIEW_REPORT
  VIEW_SECURITY_SETTINGS
  VIEW_SLA

  # The operation to view the SMB domain.
  VIEW_SMB_DOMAIN

  # View SNMP configuration.
  VIEW_SNMP
  VIEW_STORAGE_SETTINGS

  # Download support bundle.
  VIEW_SUPPORT_BUNDLE

  # View syslog rules.
  VIEW_SYSLOG
  VIEW_SYSTEM_EVENT
  VIEW_SYSTEM_PREFERENCE
  VIEW_THREAT_HUNT_RESULTS

  # View TPR configuration.
  VIEW_TPR_CONFIGURATION

  # View TPR policy.
  VIEW_TPR_POLICY

  # View TPR request.
  VIEW_TPR_REQUEST
  VIEW_USER_MANAGEMENT
  VIEW_WEBHOOKS

  # View Zscaler integration.
  VIEW_ZSCALER_DLP_INTEGRATION
}
# Represents option group in AWS.
type OptionGroup {
  # Name of the option group.
  name: String!

  # Option group engine.
  engine: String!

  # Major version of the option group engine.
  majorEngineVersion: String!

  # Amazon Resource Name (ARN) of the option group.
  arn: String!

  # Virtual Private Cloud (VPC) corresponding to the option group.
  vpcId: String!
}
# Supported in v6.0+
type OracleAcoParameterDetail {
  # Required. Supported in v6.0+
  # Name of the Advanced Cloning Options (ACO) parameter.
  parameter: String!

  # Required. Supported in v6.0+
  # Value for the Advanced Cloning Options (ACO) parameter.
  value: String!
}
# Supported in v6.0+
type OracleAcoParameterList {
  # Required. Supported in v6.0+
  # An array that contains the supported Advanced Cloning Options (ACO) parameters.
  parameters: [String!]!
}
# Supported in v6.0+
type OracleAcoValueErrorDetail {
  # Required. Supported in v6.0+
  # Validation error message for the provided value.
  error: String!

  # Required. Supported in v6.0+
  # Name of the Advanced Cloning Options (ACO) parameter.
  parameter: String!
}
# Supported in v5.0+
input OracleBackupJobConfigInput {
  # Supported in v5.0+
  # Boolean value that indicates whether to force a full snapshot for the specified Oracle database object. Set to true to force a full snapshot. Set to false to allow the Rubrik cluster to determine the type of snapshot required.
  forceFullSnapshot: Boolean
  baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
}
# Supported in v5.2+
input OracleBulkUpdateInput {
  oracleUpdate: OracleUpdateInput

  # Required. Supported in v5.2+
  # An array containing the IDs assigned to Oracle host, Oracle RAC, and Oracle Database objects.
  ids: [String!]!
}
# The SLA Domain configuration for Oracle database.
type OracleConfig {
  # Frequency value for log backups of Oracle databases.
  frequency: Duration

  # Specifies the duration for which the logs will be retained.
  logRetention: Duration

  # Specifies the duration for which the archived redo logs will be retained.
  hostLogRetention: Duration
}
# Input to configure the log settings for Oracle database in an SLA Domain.
input OracleConfigInput {
  # Frequency for log backups of Oracle databases.
  frequency: SlaDurationInput

  # The duration for which the logs will be retained.
  logRetention: SlaDurationInput

  # The duration for which the archived redo logs will be retained.
  hostLogRetention: SlaDurationInput
}
type OracleDataGuardGroup implements HierarchyObject , CdmHierarchyObject , CdmHierarchySnappableNew , OracleTopLevelDescendantType {
  # CDM ID of the Oracle Data Guard Group.
  cdmId: String!

  # Whether the Oracle Data Guard Group is a relic in CDM.
  isRelic: Boolean!

  # The DB unique name of the Oracle Data Guard Group.
  dbUniqueName: String!

  # The number of tablespaces contained in the Oracle Data Guard Group.
  numTablespaces: Int!

  # The list of tablespaces in the Oracle Data Guard Group.
  tablespaces: [String!]!

  # The number of log snapshots taken of the Oracle Data Guard Group.
  numLogSnapshots: Int!

  # The Pluggable Databases of an Oracle Data Guard Group.
  pdbs: [OraclePdb!]!

  # The role of the Oracle Data Guard Group.
  dbRole: String!

  # The Data Guard type of the Oracle Data Guard Group.
  dataGuardType: DataGuardType!

  # The Data Guard group ID of the Oracle Data Guard Group.
  dataGuardGroupId: String

  # The log backup frequency, in minutes, of the Oracle Data Guard Group.
  logBackupFrequency: Int!

  # The last validation result of the Oracle Data Guard Group.
  lastValidationResult: OracleDatabaseLastValidationStatus

  # The number of instances of the Oracle Data Guard Group.
  numInstances: Int!

  # The number of RMAN channels used for backup and  restore of the Oracle Data Guard Group.
  numChannels: Long!

  # Specifies whether backup jobs should run on the primary member of the Oracle Data Guard Group only.
  shouldBackupFromPrimaryOnly: Boolean!

  # An ordered sequence of Oracle Data Guard members' unique names to be chosen for backups. The list may be empty or contain a maximum of one name.
  preferredDataGuardMemberUniqueNames: [String!]!

  # Specifies the section size, in gigabytes, to be used during backups.
  sectionSizeInGigabytes: Int!

  # The log retention, in hours, of the Oracle Data Guard Group.
  logRetentionHours: Int!

  # The host log retention, in hours, of the Oracle Data Guard Group.
  hostLogRetentionHours: Int!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): OracleDataGuardGroupDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): OracleDataGuardGroupLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
interface OracleDataGuardGroupDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of OracleDataGuardGroupDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleDataGuardGroupDescendantTypeConnection {
  # List of OracleDataGuardGroupDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleDataGuardGroupDescendantTypeEdge!]!

  # List of OracleDataGuardGroupDescendantType objects.
  nodes: [OracleDataGuardGroupDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleDataGuardGroupDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleDataGuardGroupDescendantType object. This wrapper is used for pagination.
type OracleDataGuardGroupDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleDataGuardGroupDescendantType object wrapped by this edge.
  node: OracleDataGuardGroupDescendantType!
}
interface OracleDataGuardGroupLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of OracleDataGuardGroupLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleDataGuardGroupLogicalChildTypeConnection {
  # List of OracleDataGuardGroupLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleDataGuardGroupLogicalChildTypeEdge!]!

  # List of OracleDataGuardGroupLogicalChildType objects.
  nodes: [OracleDataGuardGroupLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleDataGuardGroupLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleDataGuardGroupLogicalChildType object. This wrapper is used for pagination.
type OracleDataGuardGroupLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleDataGuardGroupLogicalChildType object wrapped by this edge.
  node: OracleDataGuardGroupLogicalChildType!
}
# Supported in v6.0+
input OracleDataGuardGroupUpdateInput {
  # Supported in v6.0+
  # Ordered list of database unique names to use for backup.
  preferredDgMemberUniqueNames: [String!] = []

  # Supported in v6.0+
  # Value that indicates whether to backup from the PRIMARY member only, or from any available member.
  shouldBackupFromPrimaryOnly: Boolean
  oracleUpdateCommon: OracleUpdateCommonInput

  # Supported in v9.0+
  # Boolean value specifying whether to use SEPS wallet to connect to the primary database to perform some operations during backup from the standby database.
  shouldUseSepsWallet: Boolean
}
type OracleDatabase implements HierarchyObject , CdmHierarchyObject , CdmHierarchySnappableNew , OracleTopLevelDescendantType , OracleHostDescendantType , OracleHostLogicalChildType , OracleRacDescendantType , OracleRacLogicalChildType , OracleDataGuardGroupDescendantType , OracleDataGuardGroupLogicalChildType {
  # CDM ID of the Oracle database.
  cdmId: String!

  # Whether the Oracle database is a relic in CDM.
  isRelic: Boolean!

  # The DB unique name of the Oracle database.
  dbUniqueName: String!

  # The number of tablespaces contained in the Oracle database.
  numTablespaces: Int!

  # The list of tablespaces in the Oracle database.
  tablespaces: [String!]!

  # The number of log snapshots taken of the Oracle database.
  numLogSnapshots: Int!

  # The Pluggable Databases of an Oracle database.
  pdbs: [OraclePdb!]!

  # The role of the Oracle database.
  dbRole: String!

  # The Data Guard type of the Oracle database.
  dataGuardType: DataGuardType!

  # The log backup frequency, in minutes, of the Oracle database.
  logBackupFrequency: Int!

  # The last validation result of the Oracle database.
  lastValidationResult: OracleDatabaseLastValidationStatus

  # Specifies details of the Oracle database instances.
  instances: [OracleDatabaseInstance!]!

  # The number of instances of the Oracle database.
  numInstances: Int!

  # The number of RMAN channels used for backup and restore of the Oracle database.
  numChannels: Long!

  # The directory paths of the Oracle database.
  directoryPaths: OracleDirectoryPaths

  # ARCHIVELOGMODE of the Oracle database.
  archiveLogMode: String!

  # Specifies whether the Oracle database is live mounted.
  isLiveMount: Boolean!

  # Specifies the section size, in gigabytes, to be used during backups.
  sectionSizeInGigabytes: Int!

  # The log retention, in hours, of the Oracle database.
  logRetentionHours: Int!

  # The host log retention, in hours, of the Oracle database.
  hostLogRetentionHours: Int!

  # The Oracle Data Guard Group corresponding to the Oracle Data Guard member database.
  dataGuardGroup: OracleDataGuardGroup

  # List of live mounts for an Oracle database.
  liveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for Oracle live mounts.
    filters: [OracleLiveMountFilterInput!],

    # Sort by argument for Oracle live mounts.
    sortBy: OracleLiveMountSortBy): OracleLiveMountConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Paginated list of OracleDatabase objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleDatabaseConnection {
  # List of OracleDatabase objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleDatabaseEdge!]!

  # List of OracleDatabase objects.
  nodes: [OracleDatabase!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleDatabase objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleDatabase object. This wrapper is used for pagination.
type OracleDatabaseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleDatabase object wrapped by this edge.
  node: OracleDatabase!
}
# An Oracle database instance.
type OracleDatabaseInstance {
  # System identifier (SID) of the Oracle database instance.
  instanceName: String!

  # Rubrik CDM UUID of the physical host.
  hostId: UUID!
}
# Oracle database last validation status.
type OracleDatabaseLastValidationStatus {
  # Success boolean of the last database validation.
  isSuccess: Boolean!

  # Event Id of the last database validation event.
  eventId: String!

  # Snapshot ID of the last database validation recovery point.
  snapshotId: String

  # Timestamp of the last database validation recovery point.
  timestampMs: DateTime
}
# Supported in v5.0+
type OracleDbDetail {
  # Supported in v5.0-v5.3
  # Oracle database unique name. (DB_UNIQUE_NAME)
  dbUniqueName: String

  # Supported in v5.0+
  # v5.0-v5.3: Boolean value that indicates whether a Oracle database object is a Live Mount. Value is true when the object is a Live Mount.
  # v6.0+: Value that indicates whether an Oracle database object is a Live Mount or not. A true value indicates that the object is a Live Mount.
  isLiveMount: Boolean

  # Supported in v5.0+
  # Oracle Home of the Oracle database.
  oracleHome: String

  # Required. Supported in v5.0+
  snapshotCount: Int!

  # Required. Supported in v5.0+
  # An array that contains tablespace names of the specified Oracle database.
  tablespaces: [String!]!

  # Supported in v5.3+
  # General information about last validation job.
  lastValidationResult: OracleLastValidationResult

  # Supported in v6.0+
  # Ordered list of database unique names to use for backup in a Data Guard group.
  preferredDgMemberUniqueNames: [String!]!

  # Supported in v6.0+
  # Indicates whether to backup only from the PRIMARY Data Guard member or from any available member.
  shouldBackupFromPrimaryDgGroupMemberOnly: Boolean

  # Supported in v8.0+
  # Details about the PDBs that are part of the CDB.
  pdbDetails: OraclePdbDetails

  # Supported in Rubrik CDM version 9.0 and later. Specifies the section size, in gigabytes, to be used during database backup.
  sectionSizeInGb: Int

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV50: String

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV51: String

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV52: String

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV53: String

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV60: DateTime

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV70: DateTime

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV80: DateTime

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV81: DateTime

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV90: DateTime

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV50: String

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV51: String

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV52: String

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV53: String

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV60: DateTime

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV70: DateTime

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV80: DateTime

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV81: DateTime

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV90: DateTime
  oracleDbSummary: OracleDbSummary
  oracleNonSlaProperties: OracleNonSlaProperties

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV91: DateTime

  # The time stamp of the earliest recovery point for this database.
  oldestRecoveryPointV92: DateTime

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV91: DateTime

  # The time stamp of the most recent recovery point for this database.
  latestRecoveryPointV92: DateTime

  # Supported in v5.3+
  # An array that contains the host info for each instance.
  hostsInfo: [HostInfo!]!

  # Supported in v5.3+
  # Describes any pending SLA Domain assignment on this object.
  pendingSlaDomain: ManagedObjectPendingSlaInfo
  blackoutWindowResponseInfo: BlackoutWindowResponseInfo
}
# Input for retrieving Oracle database.
input OracleDbInput {
  # Required. ID of an Oracle database object.
  id: String!
}
# Supported in v5.0+
type OracleDbSnapshotSummary {
  # Required. Supported in v5.0+
  databaseName: String!

  # Required. Supported in v5.0+
  # Array containing descriptions of the tablespaces that were captured in the specified snapshot.
  tablespaces: [String!]!

  # Supported in v5.3+
  # A Boolean that specifies whether the snapshot is valid.
  isValid: Boolean

  # Supported in v8.1+
  # Managed ID of the host or RAC from where the database snapshot is taken.
  hostOrRacManagedId: String

  # Supported in v8.1+
  # Hostname or RAC name from where the database snapshot is taken.
  hostOrRacName: String

  # The base information of a snapshot that is common across other workloads.
  baseSnapshotSummary: BaseSnapshotSummary
}
# Supported in v5.0+
type OracleDbSummary {
  # Required. Supported in v5.0+
  # ID assigned to the Oracle database.
  id: String!

  # Supported in v5.0+
  # Details of the instances of the Oracle database.
  instances: [OracleInstanceProperties!]!

  # Supported in v5.0+
  # v5.0-v5.3: Boolean value that indicates whether the ARCHIVELOGMODE is enabled on the Oracle database.
  # v6.0+: Boolean value that indicates whether the ARCHIVELOG mode is enabled on the Oracle database or not.
  isArchiveLogModeEnabled: Boolean

  # Required. Supported in v5.0+
  # Boolean value that indicates whether a Oracle database object is in an archived state and has retained snapshots. Value is true when the object is archived with retained snapshots.
  isRelic: Boolean!

  # Required. Supported in v5.0+
  # Service name of the Oracle database.
  name: String!

  # Supported in v5.0+
  # Count of the number of instances of the Oracle database.
  numInstances: Int

  # Required. Supported in v5.0+
  # Count of the number of table spaces in Oracle database.
  numTablespaces: Int!

  # Required. Supported in v5.0+
  primaryClusterId: String!

  # Supported in v5.0+
  # Rubrik ID of the RAC on which this database is hosted. This field will be empty if the database is not hosted on a RAC environment.
  racId: String

  # Supported in v5.0+
  # v5.0-v5.3: RAC name of cluster database.
  # v6.0+: RAC name of the cluster database.
  racName: String

  # Supported in v5.0+
  # System identifier (SID) of the Oracle database.
  sid: String

  # Supported in v5.0+
  # Rubrik ID of the standalone Oracle host on which this database is hosted. This field will be empty if the database is not hosted on a standalone system.
  standaloneHostId: String

  # Supported in v5.0+
  # Hostname of the standalone Oracle database host.
  standaloneHostName: String

  # Supported in v5.1+
  # True/false value indicating if backup task information is included in the response.
  includeBackupTaskInfo: Boolean

  # Supported in v5.1+
  # A Boolean value that specifies whether the Oracle database is local to the cluster. When this value is 'true', the Oracle database is local to the cluster.
  isDbLocalToTheCluster: Boolean

  # Supported in v5.1+
  # The timestamp of the previous snapshot.
  lastSnapshotTime: DateTime

  # Supported in v5.1+
  # Specifies an interval in minutes. This interval is the period between successive log backups.
  logBackupFrequencyInMinutes: Int

  # Supported in v5.1+
  # An integer that specifies the number of missed snapshots.
  numMissedSnapshot: Int

  # Supported in v5.2+
  # v5.2-v5.3: An array that contains the archive log destinations of the specified Oracle database.
  # v6.0+: An array that contains the archive log destinations for the specified Oracle database.
  archiveLogDestinations: [String!]!

  # Supported in v5.2+
  # Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
  hostLogRetentionHours: Int

  # Supported in v5.2+
  # Indicates whether the current DATABASE_ROLE is PRIMARY which specifies the database is accepting read/write transactions as the primary database in a Data Guard configuration.
  isPrimary: Boolean

  # Supported in v6.0+
  # Rubrik ID of the Data Guard group to which this database belongs.
  dataGuardGroupId: String

  # Supported in v6.0+
  # Name of the Data Guard group to which this database belongs.
  dataGuardGroupName: String

  # Supported in v6.0+
  # Current role of the database.
  databaseRole: String

  # Supported in v6.0+
  # Unique name for the Oracle database (DB_UNIQUE_NAME).
  dbUniqueName: String

  # Supported in v7.0+
  # Boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
  hasLogConfigFromSla: Boolean
  snappable: CdmWorkload
  dataGuardType: CdmDataGuardType

  # Required. Supported in v5.0+
  # An array that contains information about the objects in the infrastructure path of a specified Oracle database.
  infraPath: [ManagedHierarchyObjectAncestor!]!

  # Supported in v5.1+
  # Information about the current backup task.
  currentBackupTaskInfo: BackupTaskDiagnosticInfo

  # Supported in v6.0+
  # List of Data Guard group members.
  dataGuardGroupMembers: [DataGuardGroupMember!]!
}
# The directory paths of the Oracle database.
type OracleDirectoryPaths {
  # Directory paths of the archived redo logs of the Oracle database.
  archiveDests: String!
}
# Supported in v5.3+
type OracleFileDownloadLink {
  # Required. Supported in v5.3+
  # Link for file download.
  downloadLink: String!
}
type OracleHost implements HierarchyObject , CdmHierarchyObject , OracleTopLevelDescendantType {
  # The connection status of the Oracle Host.
  connectionStatus: HostConnectionStatus

  # The number of RMAN channels used for backup and restore of the Oracle Host.
  numChannels: Long!

  # The log backup frequency, in minutes, of the Oracle Host.
  logBackupFrequency: Int!

  # The log retention, in hours, of the Oracle Host.
  logRetentionHours: Int!

  # The host log retention, in hours, of the Oracle Host.
  hostLogRetentionHours: Int!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): OracleHostDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): OracleHostLogicalChildTypeConnection!

  # Source host of the Oracle database.
  host: PhysicalHost

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
interface OracleHostDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of OracleHostDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleHostDescendantTypeConnection {
  # List of OracleHostDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleHostDescendantTypeEdge!]!

  # List of OracleHostDescendantType objects.
  nodes: [OracleHostDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleHostDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleHostDescendantType object. This wrapper is used for pagination.
type OracleHostDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleHostDescendantType object wrapped by this edge.
  node: OracleHostDescendantType!
}
# Supported in v5.0+
type OracleHostDetail {
  oracleHostSummary: OracleHostSummary
  oracleNonSlaProperties: OracleNonSlaProperties
}
# Input for retrieving Oracle host.
input OracleHostInput {
  # Required. ID assigned to an Oracle Host object.
  id: String!
}
interface OracleHostLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of OracleHostLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleHostLogicalChildTypeConnection {
  # List of OracleHostLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleHostLogicalChildTypeEdge!]!

  # List of OracleHostLogicalChildType objects.
  nodes: [OracleHostLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleHostLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleHostLogicalChildType object. This wrapper is used for pagination.
type OracleHostLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleHostLogicalChildType object wrapped by this edge.
  node: OracleHostLogicalChildType!
}
# Supported in v5.0+
type OracleHostSummary {
  # Required. Supported in v5.0+
  # ID assigned to the standalone Oracle host.
  id: String!

  # Required. Supported in v5.0+
  # Hostname of the standalone Oracle host.
  name: String!

  # Required. Supported in v5.0+
  # Count of the number of databases on the Oracle RAC.
  numDbs: Int!

  # Required. Supported in v5.0+
  primaryClusterId: String!

  # Required. Supported in v5.0+
  # Connectivity status of the Oracle RAC.
  status: String!

  # Supported in v7.0+
  # Boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
  hasLogConfigFromSla: Boolean

  # Supported in v8.1+
  # ID assigned to the host.
  hostId: String
  slaAssignable: SlaAssignable

  # Required. Supported in v5.0+
  # An array that contains information about the objects in the infrastructure path of a specified Oracle database.
  infraPath: [ManagedHierarchyObjectAncestor!]!
}
# Supported in v5.0+
type OracleInstanceProperties {
  # Required. Supported in v5.0+
  # Name of the Oracle host.
  hostName: String!

  # Required. Supported in v5.0+
  # System identifier (SID) of the Oracle database instance.
  instanceSid: String!
}
# Supported in v5.3+
type OracleLastValidationResult {
  # Required. Supported in v5.3+
  # The eventseries ID for the last validation job.
  eventSeriesId: String!

  # Required. Supported in v5.3+
  # A Boolean that specifies whether the last validation successfully completed.
  isSuccess: Boolean!

  # Required. Supported in v5.3+
  # The timestamp of the recovery point to validate.
  validationTime: DateTime
}
# Oracle live mount.
type OracleLiveMount {
  # ID of the Oracle live mount.
  cdmId: String!

  # Date when live mount was created.
  creationDate: DateTime

  # Describes if the live mount is ready.
  isReady: Boolean!

  # Name of the mounted database.
  mountedDatabaseName: String!

  # The full path for the directory on the target host where the NFS share is mounted.
  targetHostMount: String!

  # Indicates if mount is files only.
  isFilesOnlyMount: Boolean!

  # Indicates whether this mount was created during an instant recovery or live mount.
  isInstantRecovered: Boolean!

  # Target Oracle RAC of the live mount. If the live mount target is an Oracle Host, this value will be null and the field targetOracleHost will be populated instead.
  targetOracleRac: OracleRac

  # Target Oracle host of the live mount. If the live mount target is an Oracle RAC, this value will be null and the field targetOracleRac will be populated instead.
  targetOracleHost: OracleHost

  # Fid of the Oracle live mount.
  id: UUID!

  # Cluster of the live mount.
  cluster: Cluster!

  # The creator of the live mount.
  owner: User!

  # Source snapshot of the Oracle live mount.
  sourceSnapshot: CdmSnapshot!

  # Source Oracle database of the live mount.
  sourceDatabase: OracleDatabase

  # Mounted database of the live mount.
  mountedDatabase: OracleDatabase

  # Status of the live mount.
  status: OracleLiveMountStatus!
}
# Paginated list of OracleLiveMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleLiveMountConnection {
  # List of OracleLiveMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleLiveMountEdge!]!

  # List of OracleLiveMount objects.
  nodes: [OracleLiveMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleLiveMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleLiveMount object. This wrapper is used for pagination.
type OracleLiveMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleLiveMount object wrapped by this edge.
  node: OracleLiveMount!
}
# Filter for Oracle Live Mount results.
enum OracleLiveMountFilterField {
  # Cluster UUID filter for Oracle Live Mount results.
  CLUSTER_UUID

  # Name filter for the Oracle Live Mount results.
  NAME

  # Organization ID filter for the Oracle Live Mount results.
  ORG_ID

  # Source Database ID filter for Oracle Live Mount results.
  SOURCE_DATABASE_ID

  # Filter is not specified. Any filter text would not be considered.
  UNSPECIFIED
}
# Filter Oracle live mount results.
input OracleLiveMountFilterInput {
  # Type of filter.
  field: OracleLiveMountFilterField = UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Sort Oracle live mount results.
input OracleLiveMountSortBy {
  # Field for Oracle live mounts sort by.
  field: OracleLiveMountSortByField = UNSPECIFIED

  # Sort order for Oracle live mounts sort by.
  sortOrder: SortOrder = ASC
}
# Sort by parameters for Oracle Live Mounts.
enum OracleLiveMountSortByField {
  # Sort by the creation date of the Oracle Live Mount.
  CREATION_DATE

  # Sort by the name of the Oracle Live Mount.
  NAME

  # Sort by the source database name of the Oracle Live Mount.
  SOURCE_DATABASE_NAME

  # Sort by field is not specified. Any sort by text would
  # not be considered.
  UNSPECIFIED
}
# Status of the Oracle Live Mount.
enum OracleLiveMountStatus {
  # Oracle Live Mount is available.
  AVAILABLE

  # Oracle Live Mount is mounting.
  MOUNTING

  # Oracle Live Mount is unavailable.
  UNAVAILABLE

  # Oracle Live Mount is unmounting.
  UNMOUNTING
}
# Oracle log backup configuration for an Oracle object.
type OracleLogBackupConfig {
  # Log backup frequency, in minutes, of the Oracle object.
  logBackupFrequencyMin: Int!

  # Log retention, in hours, of the Oracle object.
  logRetentionHours: Int!

  # Host log retention, in hours, of the Oracle object.
  hostLogRetentionHours: Int!
}
# Supported in v6.0+
input OracleLogRecoveryRangeInput {
  # Supported in v6.0+
  # Filter for archive logs within the specified time range.
  oracleTimeRange: OracleTimeRangeInput
}
# Supported in v5.0+
type OracleMissedRecoverableRange {
  # Required. Supported in v5.0+
  beginTime: DateTime

  # Required. Supported in v5.0+
  description: String!

  # Required. Supported in v5.0+
  endTime: DateTime

  # Required. Supported in v5.0+
  errorType: String!
}
# Supported in v5.0+
type OracleMissedRecoverableRangeListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [OracleMissedRecoverableRange!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
type OracleNodeOrder {
  # Required. Supported in v5.0+
  # Nodename of the Oracle RAC node.
  nodeName: String!

  # Required. Supported in v5.0+
  # Order in which Rubrik uses this node for automated Oracle backup.
  order: Int!
}
# Supported in v5.0+
input OracleNodeOrderInput {
  # Required. Supported in v5.0+
  # Nodename of the Oracle RAC node.
  nodeName: String!

  # Required. Supported in v5.0+
  # Order in which Rubrik uses this node for automated Oracle backup.
  order: Int!
}
# Supported in v5.0+
type OracleNodeProperties {
  # Required. Supported in v5.0+
  # Node name of the Oracle RAC node.
  nodeName: String!

  # Required. Supported in v5.0+
  # Connectivity status of the Oracle RAC node.
  status: String!

  # Supported in v8.1+
  # ID assigned to the host.
  hostId: String
}
# Supported in v5.0+
type OracleNonSlaProperties {
  # Required. Supported in v5.0+
  # Path where the NFS share is mounted on the host.
  hostMount: String!

  # Required. Supported in v5.0+
  # Specifies an interval in minutes. This interval is the period between successive log backups.
  logBackupFrequencyInMinutes: Int!

  # Required. Supported in v5.0+
  # Specifies an interval in hours. Log backups are retained for the duration of the interval.
  logRetentionHours: Int!

  # Required. Supported in v5.0+
  # Number of channels used to backup the Oracle database.
  numChannels: Int!

  # Supported in v5.2+
  # Specifies an interval in hours. The next log snapshot job deletes archived Oracle redo log files whose 'nextTime' field specifies a time more than the specified number of hours ago. To immediately delete archived redo log files regardless of age, specify an interval of -1. To preserve all archived redo log files, specify an interval of -2.
  hostLogRetentionHours: Int
}
# An Oracle Pluggable Database.
type OraclePdb {
  # The Container ID for the Oracle Pluggable Database.
  id: Long!

  # Name of the Pluggable Database.
  name: String!

  # The DBID of the Oracle database.
  dbId: Long!

  # The open mode of the Pluggable Database.
  openMode: OraclePdbOpenMode!

  # Indicates whether the Pluggable Database is the application root.
  isApplicationRoot: Boolean!

  # Indicates whether the Pluggable Database belongs to an application container.
  isApplicationPdb: Boolean!

  # The ID of the application container to which the Pluggable Database belongs.
  applicationRootContainerId: Long!
}
# Supported in v8.0+
type OraclePdbApplicationContainer {
  # Required. Supported in v8.0+
  # Names of the application PDBs that belong to this application container.
  applicationPdbs: [String!]!

  # Required. Supported in v8.0+
  # Name of the application root PDB.
  applicationRoot: String!
}
# Supported in v8.0+
type OraclePdbDetails {
  # Required. Supported in v8.0+
  # List of application containers attached to the CDB.
  applicationContainers: [OraclePdbApplicationContainer!]!

  # Required. Supported in v8.0+
  # Names of the PDBs attached directly to the CDB.
  regularPdbs: [String!]!
}
input OraclePdbDetailsInput {
  # Required. ID of the Oracle database.
  id: String!

  # Required. Request object to fetch the PDB details.
  pdbDetailsRequest: GetOraclePdbDetailsRequestInput!
}
# Open mode of an Oracle Pluggable Database (PDB).
enum OraclePdbOpenMode {
  # Oracle PDB is in open migrate mode.
  MIGRATE

  # Oracle PDB is in mounted mode.
  MOUNTED

  # Oracle PDB is in open read-only mode.
  READ_ONLY

  # Oracle PDB is in open read/write mode.
  READ_WRITE

  # Open mode is unknown.
  UNKNOWN_OPEN_MODE
}
# Supported in v8.0+
input OraclePdbRestoreConfigInput {
  # Required. Supported in v8.0+
  # List of PDB names to be restored on the source database.
  pdbsToRestore: [String!]!

  # Required. Supported in v8.0+
  # Snapshot ID or timestamp for which the PDB restore is done.
  recoveryPoint: OracleRecoveryPointInput!
}
type OracleRac implements HierarchyObject , CdmHierarchyObject , OracleTopLevelDescendantType {
  # The list of nodes which make up the Oracle RAC.
  nodes: [CdmOracleRacNode!]!

  # The connection status of the Oracle RAC.
  connectionStatus: HostConnectionStatus

  # The number of RMAN channels used for backup and restore of the Oracle RAC.
  numChannels: Long!

  # Specifies if backups are distributed automatically.
  distributeBackupsAutomatically: Boolean!

  # The log backup frequency, in minutes, of the Oracle RAC.
  logBackupFrequency: Int!

  # The log retention, in hours, of the Oracle RAC.
  logRetentionHours: Int!

  # The host log retention, in hours, of the Oracle RAC.
  hostLogRetentionHours: Int!

  # The list of node order priority objects of the Oracle RAC.
  nodeOrder: [CdmOracleRacNodeOrder!]!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): OracleRacDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): OracleRacLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
interface OracleRacDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of OracleRacDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleRacDescendantTypeConnection {
  # List of OracleRacDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleRacDescendantTypeEdge!]!

  # List of OracleRacDescendantType objects.
  nodes: [OracleRacDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleRacDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleRacDescendantType object. This wrapper is used for pagination.
type OracleRacDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleRacDescendantType object wrapped by this edge.
  node: OracleRacDescendantType!
}
# Supported in v5.0+
type OracleRacDetail {
  # Required. Supported in v5.0+
  # Single Client Access Name (SCAN) of the Oracle RAC cluster.
  scan: String!
  oracleNonSlaProperties: OracleNonSlaProperties
  oracleRacSummary: OracleRacSummary
}
# Input for retrieving Oracle RAC.
input OracleRacInput {
  # Required. ID assigned to an Oracle RAC object.
  id: String!
}
interface OracleRacLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of OracleRacLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleRacLogicalChildTypeConnection {
  # List of OracleRacLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleRacLogicalChildTypeEdge!]!

  # List of OracleRacLogicalChildType objects.
  nodes: [OracleRacLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleRacLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleRacLogicalChildType object. This wrapper is used for pagination.
type OracleRacLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleRacLogicalChildType object wrapped by this edge.
  node: OracleRacLogicalChildType!
}
# Supported in v5.0+
type OracleRacSummary {
  # Required. Supported in v5.0+
  # ID assigned to the Oracle RAC.
  id: String!

  # Required. Supported in v5.0+
  # Cluster name assigned to the Oracle RAC.
  name: String!

  # Required. Supported in v5.0+
  # Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.
  nodeOrder: [OracleNodeOrder!]!

  # Required. Supported in v5.0+
  # Details of the nodes of this Oracle RAC.
  nodes: [OracleNodeProperties!]!

  # Required. Supported in v5.0+
  # Count of the number of databases on the Oracle RAC.
  numDbs: Int!

  # Required. Supported in v5.0+
  # Count of the number of nodes on the Oracle RAC.
  numNodes: Int!

  # Required. Supported in v5.0+
  primaryClusterId: String!

  # Required. Supported in v5.0+
  # Connectivity status of the Oracle RAC.
  status: String!

  # Supported in v6.0+
  # Boolean value that specifies whether the Rubrik cluster should automatically distribute backups across Oracle database instances running on the RAC nodes. By default, backups are run from the first connected node in the RAC priority order.
  shouldDistributeBackupsAutomatically: Boolean

  # Supported in v7.0+
  # Boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
  hasLogConfigFromSla: Boolean
  slaAssignable: SlaAssignable
}
# Supported in v5.0+
type OracleRecoverableRange {
  # Required. Supported in v5.0+
  beginTime: DateTime

  # Required. Supported in v5.0+
  # Database snapshots that fall within the recoverable range.
  dbSnapshotSummaries: [OracleDbSnapshotSummary!]!

  # Required. Supported in v5.0+
  endTime: DateTime

  # Required. Supported in v5.0+
  status: String!
}
# Supported in v5.0+
type OracleRecoverableRangeListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [OracleRecoverableRange!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
input OracleRecoveryPointInput {
  # Supported in v5.0+
  # Snapshot ID of the Oracle database.
  snapshotId: String

  # Supported in v5.0+
  # v5.0-v5.2: Recovery point specified in the form of a timestamp (in milliseconds).
  # v5.3+: A timestamp in milliseconds that specifies a recovery point.
  timestampMs: Long
}
# Supported in v6.0+
input OracleTimeRangeInput {
  # Required. Supported in v6.0+
  # v6.0: Timestamp that ends the time range. Specify the timestamp in ISO8601 format, as in the example "2016-01-01T01:23:45Z".
  # v7.0+: Timestamp at the end of the time range. Specify the timestamp in ISO8601 format, as in the example "2016-01-01T01:23:45Z".
  endTime: DateTime

  # Required. Supported in v6.0+
  # v6.0: Timestamp that starts the time range. Specify the timestamp in ISO8601 format, as in the example "2016-01-01T01:23:45Z".
  # v7.0+: Timestamp at the beginning of the time range. Specify the timestamp in ISO8601 format, as in the example "2016-01-01T01:23:45Z".
  startTime: DateTime
}
interface OracleTopLevelDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of OracleTopLevelDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OracleTopLevelDescendantTypeConnection {
  # List of OracleTopLevelDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OracleTopLevelDescendantTypeEdge!]!

  # List of OracleTopLevelDescendantType objects.
  nodes: [OracleTopLevelDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of OracleTopLevelDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the OracleTopLevelDescendantType object. This wrapper is used for pagination.
type OracleTopLevelDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual OracleTopLevelDescendantType object wrapped by this edge.
  node: OracleTopLevelDescendantType!
}
# Supported in v6.0+
input OracleUpdateCommonInput {
  # Supported in v6.0+
  # Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.
  hostLogRetentionHours: Int

  # Supported in v6.0+
  # Path where the NFS share is mounted on the host.
  hostMount: String

  # Supported in v6.0+
  # Specifies an interval in minutes. This interval is the period between successive log backups.
  logBackupFrequencyInMinutes: Int

  # Supported in v6.0+
  # Specifies an interval in hours. Log backups are retained for the duration of the interval.
  logRetentionHours: Int

  # Supported in v6.0+
  # Number of channels used to backup the Oracle database.
  numChannels: Int

  # Supported in v7.0+
  # Boolean value specifying whether the database obtains the log backup configurations from the SLA Domain.
  hasLogConfigFromSla: Boolean

  # Supported in v8.0+
  # Boolean value specifying whether to use the high file count format for database backups.
  shouldEnableHighFileCountSupport: Boolean

  # Supported in v8.0+
  # Boolean value specifying whether to use secure thrift as the data transfer mechanism between the Rubrik cluster and the Oracle database instead of NFS. The default data transfer mechanism is NFS.
  shouldUseSecureThriftForDataTransfer: Boolean

  # Supported in Rubrik CDM version 9.0 and later. Specifies the section size, in gigabytes, to be used during database backup.
  sectionSizeInGb: Int

  # Supported in v9.1+
  # Whether to pause or resume backups and archival for this database. This setting is supported for Oracle databases and Data Guard groups but is not supported for Oracle hosts and RACs.
  isPaused: Boolean
}
# Supported in v5.0+
input OracleUpdateInput {
  # Supported in v5.0-v5.1
  # ID of the SLA Domain protecting the specified Oracle object.
  configuredSlaDomainId: String

  # Supported in v5.0-v5.3
  # Path where the NFS share is mounted on the host.
  hostMount: String

  # Supported in v5.0-v5.3
  # Specifies an interval in minutes. This interval is the period between successive log backups.
  logBackupFrequencyInMinutes: Int

  # Supported in v5.0-v5.3
  # Specifies an interval in hours. Log backups are retained for the duration of the interval.
  logRetentionHours: Int

  # Supported in v5.0-v5.3
  # Number of channels used to backup the Oracle database.
  numChannels: Int

  # Supported in v5.2-v5.3
  # Specifies an interval in hours. For Oracle archived redo log files whose nextTime is before (now - interval), the next log snapshot job will delete them from the host. Set to 0 for inheriting the value from its parent; -1 for immediate deletion; and -2 to skip log deletion.
  hostLogRetentionHours: Int

  # Supported in v6.0+
  # ID of the SLA domain protecting the specified Oracle object. Log backup jobs are no longer scheduled if the SLA domain indicates the Oracle object is unprotected. The specified SLA domain is not used to configure the protection or retention for this Oracle object. This is a DEPRECATED field, and will be removed in later releases.
  configuredSlaDomainIdDeprecated: String

  # Supported in v6.0+
  # Specifies an order for the RAC nodes. Automated Oracle backups use the RAC nodes in the specified order.
  nodeOrder: [OracleNodeOrderInput!] = []

  # Supported in v6.0+
  # Boolean value that specifies whether the Rubrik cluster should automatically distribute backups across Oracle database instances running on the RAC nodes. By default, backups are run from the first connected node in the RAC priority order.
  shouldDistributeBackupsAutomatically: Boolean
  oracleUpdateCommon: OracleUpdateCommonInput
}
# The Oracle user details of this Physical Host.
type OracleUserDetails {
  # The system database administrator of this Physical Host.
  sysDbaUser: String!

  # The query user of this Physical Host.
  queryUser: String!
}
# Supported in v5.3+
input OracleValidateConfigInput {
  # Supported in v5.3+
  # Number of channels used during backup validation.
  numChannels: Int

  # Supported in v5.3+
  # System Global Area(SGA) size used to create the instance on the target host with unit in MB. SGA is a group of shared memory structures for one Oracle Database instance.
  sgaMaxSizeInMb: Long

  # Supported in v5.3+
  # The full path on the target host where the NFS share with the snapshot files will be mounted.
  targetMountPath: String

  # Supported in v5.3+
  # The full path on the target host for the Oracle Home which is the directory location where all Oracle software is installed.
  targetOracleHome: String

  # Required. Supported in v5.3+
  # Snapshot ID or timestamp for which the validation is done.
  recoveryPoint: OracleRecoveryPointInput!

  # Required. Supported in v5.3+
  # ID of the Oracle host or Oracle RAC object that is the target for the validation job. The referenced Oracle host or Oracle RAC must have the Rubrik Backup Service (RBS) installed and connected.
  targetOracleHostOrRacId: String!
}
# Details of an org.
type Org {
  # ID of the organization.
  id: String!

  # Name of the organization.
  name: String!

  # Description of the organization.
  description: String!

  # Full name of the organization.
  fullName: String!

  # Specifies whether to use the SSO/LDAP configuration of the global organization or to use configuration specific to this organization.
  authDomainConfig: TenantAuthDomainConfig!

  # Specifies whether MFA is enforced for all users in the organization.
  shouldEnforceMfaForAll: Boolean!

  # Specifies whether organization is forced to use Rubrik Envoy to connect their hosts.
  isEnvoyRequired: Boolean!

  # Allowed clusters for the organization.
  allowedClusters: [String!]!

  # Health of the tenant networks associated with the organization.
  tenantNetworkHealth: TenantNetworkHealth!

  # Specifies whether this tenant organization has configured its own identity providers.
  hasOwnIdpConfigured: Boolean!

  # Organization admin role.
  orgAdminRole: Role!

  # Existing users in the organization.
  users: [ExistingUser!]!

  # Permissions given to the organization.
  permissions: [Permission!]!

  # Self-service permissions assigned to the organization.
  selfServicePermissions: [SelfServicePermission!]!

  # SSO groups authorized for the organization.
  ssoGroups: [SsoGroup!]!

  # Physical storage used by the organization.
  physicalStorageUsed: Long!

  # All URLs associated with the organization.
  allUrls: [String!]!

  # All cluster capacity quotas enforced on the organization.
  allClusterCapacityQuotas: [ClusterCapacityQuota!]!

  # Specifies cross-account capabilities enabled for this organization.
  crossAccountCapabilities: [CrossAccountCapability!]!
}
# Paginated list of Org objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type OrgConnection {
  # List of Org objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [OrgEdge!]!

  # List of Org objects.
  nodes: [Org!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Org objects matching the request arguments.
  count: Int!
}
# Wrapper around the Org object. This wrapper is used for pagination.
type OrgEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Org object wrapped by this edge.
  node: Org!
}
# Fields in an organization.
enum OrgField {
  # Full name of the organization.
  FULL_NAME

  # Name of the organization.
  NAME
}
# Input to filter objects assigned to one of the specified organizations.
input OrgFilter {
  # List of organization IDs to filter by.
  orgIds: [String!]!
}
# Security policy for organizations.
type OrgSecurityPolicy {
  # Specifies whether to disallow weaker policy for tenants.
  disallowWeakerPolicy: Boolean!
}
# Status of the M365 org.
enum OrgStatus {
  # Org is in active state.
  ACTIVE

  # Org is in deleted state.
  DELETED

  # Org is being deleted.
  DELETING

  # Org is in failed state.
  FAILED

  # Org is in refresh stage.
  REFRESHING

  # Org is in unhealthy state.
  UNHEALTHY
}
# Response for retrieving organizations for a principal.
type OrgsForPrincipalReply {
  # The organizations to which the principal has access.
  allOrgs: [Org!]!
}
# Type of the Operating System.
enum OsType {
  # Linux Operating System.
  LINUX

  # An Operating System other than Linux or Windows.
  OTHER

  # The Operating System is not defined.
  UNDEFINED

  # Windows Operating System.
  WINDOWS
}
# Overall ransomware investigation statistics.
type OverallRansomwareInvestigationSummary {
  # Count of successful ransomware investigations.
  analysisSuccessCount: Long!

  # Count of failed ransomware investigations.
  analysisFailureCount: Long!

  # Count of total critical anomalies found.
  anomaliesCount: Long!
}
# General information about a page of results.
type PageInfo {
  # String used to identify the first edge in the response.
  startCursor: String!

  # String used to identify the last edge in the response.
  endCursor: String!

  # Specifies whether edges exist prior to the current page.
  hasPreviousPage: Boolean!

  # Specifies whether edges exist following the current page.
  hasNextPage: Boolean!
}
# Supported in v5.0+
type ParentAppInfo {
  # Supported in v5.0+
  # ID assigned to the vApp object that manages a specified virtual machine.
  id: String

  # Required. Supported in v5.0+
  # Boolean value that indicates whether a virtual machine is protected through the SLA Domain assigned to the parent vApp. Set to 'true' when the virtual machine is protected through the parent vApp, otherwise set to 'false'. Direct assignment of a virtual machine to an SLA Domain is not possible when this value is 'true'. Also, setting this value to true is not possible when the virtual machine has an existing direct assignment to an SLA Domain.
  isProtectedThruHierarchy: Boolean!
}
# Metadata of the passkey credential registered to a user.
type PasskeyCredentialMetadata {
  # ID of the passkey credential registered to the user.
  credentialId: String!
}
# Passkey metadata for a user.
type PasskeyMetadata {
  # Specifies whether passkeys are enabled.
  isPasskeyEnabled: Boolean!

  # Metadata of the passkey credentials registered to a user.
  credentialsMetadata: [PasskeyCredentialMetadata!]!
}
# Map of user IDs to password.
input PasswordByUserId {
  # User ID of the user being restored.
  userId: UUID!

  # Password required to restore the user.
  password: String!
}
# Represents the password complexity policy that applies when users in the organization set or update passwords.
type PasswordComplexityPolicy {
  # Policy for the length of each password string.
  lengthPolicy: PasswordComplexityPolicyTemplate

  # Policy for the number of lowercase characters in each password string.
  lowercasePolicy: PasswordComplexityPolicyTemplate

  # Policy for the number of uppercase characters in each password string.
  uppercasePolicy: PasswordComplexityPolicyTemplate

  # Policy for the number of special characters in each password string.
  specialCharsPolicy: PasswordComplexityPolicyTemplate

  # Policy for the number of numeric characters in each password string.
  numericPolicy: PasswordComplexityPolicyTemplate

  # Policy for controlling password reuse.
  passwordReusePolicy: PasswordComplexityPolicyTemplate

  # Policy for controlling password expiration.
  passwordExpirationPolicy: PasswordComplexityPolicyTemplate
}
# Specifies the password policy to be used by the organization.
input PasswordComplexityPolicyInput {
  # Policy for the length of each password string.
  lengthPolicy: PasswordComplexityPolicyTemplateInput!

  # Policy for the number of lowercase characters in each password string.
  lowercasePolicy: PasswordComplexityPolicyTemplateInput!

  # Policy for the number of uppercase characters in each password string.
  uppercasePolicy: PasswordComplexityPolicyTemplateInput!

  # Policy for the number of special characters in each password string.
  specialCharsPolicy: PasswordComplexityPolicyTemplateInput!

  # Policy for the number of numeric characters in each password string.
  numericPolicy: PasswordComplexityPolicyTemplateInput!

  # Policy for controlling password reuse.
  passwordReusePolicy: PasswordComplexityPolicyTemplateInput!

  # Policy for controlling password expiration.
  passwordExpirationPolicy: PasswordComplexityPolicyTemplateInput!
}
# Specifies range of values for each password complexity policy field.
type PasswordComplexityPolicyTemplate {
  # Minimum value for the password complexity policy field.
  minValue: Int!

  # Maximum value for the password complexity policy field.
  maxValue: Int!

  # Specifies if the password complexity policy field is being used.
  isActive: Boolean!

  # Default value for the password complexity policy field.
  defaultValue: Int!

  # Specifies if the current value is inherited by a stronger policy.
  isInherited: Boolean!
}
# Specifies the format of each password policy field.
input PasswordComplexityPolicyTemplateInput {
  # Minimum value for the password policy field.
  minValue: Int = 0

  # Maximum value for the password policy field.
  maxValue: Int = 0

  # Default value for the password policy field.
  defaultValue: Int = 0

  # Specifies if the password complexity policy field is being used.
  isActive: Boolean!
}
# All valid time ranges in the reporting table.
enum PastDurationEnum {
  NONE

  # Enum used to filter data in the past 12 months.
  PAST_12_MONTHS

  # Enum used to filter data in the past 24 hours.
  PAST_24_HOURS

  # Enum used to filter data in the past 30 days.
  PAST_30_DAYS

  # Enum used to filter data in the past 3 days.
  PAST_3_DAYS

  # Enum used to filter data in the past 7 days.
  PAST_7_DAYS
}
# Input to update authentication server-based AWS cloud account.
input PatchAwsAuthenticationServerBasedCloudAccountInput {
  # Rubrik ID for the AWS cloud account.
  awsCloudAccountId: String!

  # Native protection feature to be updated.
  feature: CloudAccountFeature!

  # Regions to be updated for the authentication server-based AWS cloud account.
  awsRegions: AwsAuthServerRegionsInput

  # Name of the role created on the authentication server for the user account to be used by Rubrik.
  roleName: AwsAuthServerRoleNameInput

  # Authentication server's user client certificate to be updated for the authentication server-based AWS cloud account.
  authServerUserClientCertId: AwsAuthServerCertificateIdInput

  # Authentication server's CA certificate to be updated for authentication server-based AWS cloud account.
  authServerCaCertId: AwsAuthServerCertificateIdInput
}
# Input to update IAM user-based AWS cloud account.
input PatchAwsIamUserBasedCloudAccountInput {
  # Rubrik ID for the AWS cloud account.
  awsCloudAccountId: String!

  # Native protection feature to be updated.
  feature: CloudAccountFeature!

  # List of AWS Regions.
  awsRegions: AwsRegionsInput

  # AWS IAM user access/secret keys.
  awsUserKeys: AwsUserKeysInput

  # AWS role ARN for native protection.
  awsRoleArn: AwsRoleArnInput

  # Key value pair for external artifacts associated with an AWS account.
  externalArtifactMap: [ExternalArtifacts!]
}
# Input for patching Db2 database.
input PatchDb2DatabaseInput {
  # Required. The request object includes parameters such as backupSessions and backupParallelism to update the Db2 database properties on the Rubrik cluster.
  db2DatabaseConfig: Db2DatabaseConfigInput!

  # Required. ID of the Db2 database.
  id: String!
}
# The request object includes parameters such as backupSessions and backupParallelism to update the Db2 database properties on the Rubrik cluster.
type PatchDb2DatabaseReply {
  # Supported in v9.0+
  # Specifies the value of the configuration parameter for parallelism in backup operations.
  backupParallelism: Int

  # Supported in v9.0+
  # Specifies the value of the configuration parameter for sessions in backup operations.
  backupSessions: Int
}
# Input for editing a DB2 instance.
input PatchDb2InstanceInput {
  # Required. The request object containing parameters like username, password, and list of hosts required to update a Db2 instance on the Rubrik cluster.
  db2InstanceRequestConfig: Db2InstancePatchRequestConfigInput!

  # Required. ID of the Db2 instance.
  id: String!
}
# Supported in v7.0+
type PatchDb2InstanceReply {
  # Required. Supported in v7.0+
  # Status of the refresh job triggered on the edited instance.
  asyncRequestStatus: AsyncRequestStatus

  # Required. Supported in v7.0+
  # Summary of the edited Db2 instance.
  db2InstanceSummary: Db2InstanceSummary
}
# Input for patching a MongoDB source.
input PatchMongoSourceInput {
  # Required. ID of the MongoDB source.
  id: String!

  # Required. The request object containing parameters like username, password, which are to be edited for a MongoDB source on the Rubrik cluster.
  mongoSourcePatchRequestConfig: MongoSourcePatchRequestConfigInput!
}
# Input for patching a Nutanix live Mount.
input PatchNutanixMountV1Input {
  # Required. Configuration for updating the power status of the Live Mount.
  config: NutanixPatchVmMountConfigInput!

  # Required. ID of the Live Mount.
  id: String!
}
# Supported in v6.0+
type PatchNutanixMountV1Reply {
  nutanixVmMountSummary: NutanixVmMountSummary
}
# Input for editing a SAP HANA system.
input PatchSapHanaSystemInput {
  # Required. The ID of the SAP HANA system.
  id: String!

  # Required. v5.3-v8.1: An object that contains the updated SLA Domain ID for the SAP HANA system.
  # v9.0+: An object that contains the system properties to be updated for the SAP HANA system.
  updateProperties: SapHanaSystemPatchInput!
}
# Supported in v5.3+
type PatchSapHanaSystemReply {
  # Required. Supported in v5.3+
  # Summary of the updated SAP HANA system object.
  systemSummary: SapHanaSystemSummary

  # Required. Supported in v5.3+
  # Status of the job scheduled to refresh the SAP HANA system.
  asyncRequestStatus: AsyncRequestStatus
}
# Supported in v6.0+
type PathInfo {
  # Supported in v6.0+
  # JSON encoded file access control list (ACL) information.
  aclDetails: String

  # Supported in v6.0+
  # File creation time.
  creationTime: DateTime

  # Supported in v6.0+
  # File modification time.
  modificationTime: DateTime

  # Required. Supported in v6.0+
  # File path that matched the malware Indicator of Compromise.
  path: String!

  # Required. Supported in v6.0+
  # Details about the matching YARA rule(s).
  yaraMatchDetails: [YARAMatchDetail!]!

  # Supported in v6.0+
  # Hash algorithm and hash values.
  requestedHashDetails: [HashDetail!]!
}
type PathNode {
  fid: UUID!
  name: String!
  objectType: HierarchyObjectTypeEnum!
}
type PathSecInfo {
  path: String!
  owner: String!
  permissions: [SDDLPermission!]!
}
# Input to pause or resume SLA Domain.
input PauseSlaInput {
  # SLA Domain ID.
  slaId: String!

  # List of Rubrik cluster UUIDs.
  clusterUuids: [String!]!

  # Whether or not to pause SLA Domain.
  pauseSla: Boolean!
}
# Response for pause or resume SLA Domain.
type PauseSlaReply {
  # Returns true if the pause or resume is successful; otherwise, returns false.
  success: Boolean!
}
# Pause Status of the SLA.
enum PauseStatus {
  # SLA not paused.
  NOT_PAUSED

  # SLA paused.
  PAUSED

  # Unknown Status.
  UNKNOWN
}
# Input for pausing archival location.
input PauseTargetInput {
  # ID of the archival location.
  id: String = ""
}
# Archival location pause result.
type PauseTargetReply {
  # Rubrik Security Cloud managed location ID.
  locationId: String!

  # Ownership status of the archival location.
  status: ArchivalLocationStatus!
}
# SLA Domain paused clusters information.
type PausedClustersInfo {
  # Number of Rubrik clusters where the SLA Domain is paused.
  pausedClustersCount: Int!

  # Rubrik clusters where the SLA Domain is paused.
  pausedClusters: [Cluster!]
}
# The group type for the pending action.
enum PendingActionGroupTypeEnum {
  APP_FLOW
  ARCHIVAL_LOCATION
  CLOUD_ACCOUNTS
  GLOBAL_SLA
  REPLICATION

  # The group type of the pending action is a security setting.
  SECURITY_SETTING
  SERVICE_ACCOUNT
  UNMANAGED_OBJECTS
}
enum PendingActionStatus {
  FAILED
  IN_PROGRESS
  QUEUED
  SUCCEEDED
  SYNCED_TO_CDM
}
# The subgroup type for the pending action.
enum PendingActionSubGroupTypeEnum {
  ADD_CLUSTER_AS_REPLICATION_TARGET
  ARCHIVAL_LOCATION_DELETE
  ARCHIVAL_LOCATION_DISABLE
  ARCHIVAL_LOCATION_ENABLE
  ARCHIVAL_LOCATION_PAUSE
  ARCHIVAL_LOCATION_RESUME
  AWS_COMPUTE_SETTING_UPSERT
  AWS_IAM_CUSTOMER_ACCOUNT_UPSERT
  AWS_ROLE_BASED_ARCHIVAL_LOCATION
  BLUEPRINT_CREATE
  BLUEPRINT_DELETE
  BLUEPRINT_DEPRECATE
  BLUEPRINT_UPDATE
  CLUSTER_PEER_TOKEN_GET
  CLUSTER_PEER_TOKEN_GET_AND_SET
  CLUSTER_PEER_TOKEN_SET
  DISABLE_REPLICATION_LOCATION_PUT
  ENABLE_LOCATION_AS_REPLICATION_TARGET
  ENABLE_POLARIS_AS_REPLICATION_SOURCE

  # The subgroup type of the pending action is for configuring or deleting federated login configuration.
  FEDERATED_LOGIN
  GLOBAL_SLA_ASSIGN
  GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPPABLE
  GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPSHOT
  GLOBAL_SLA_ASSIGN_RETENTION_SLA_TO_SNAPSHOT_V2
  GLOBAL_SLA_DELETE
  GLOBAL_SLA_PUT
  NFS_LOCATION_PUT
  NFS_LOCATION_READER_POST
  OBJECT_STORE_LOCATION_PUT
  OBJECT_STORE_LOCATION_READER_POST

  # The subgroup type of the pending action is forput of Q-star location.
  QSTAR_LOCATION_PUT

  # The subgroup type of the pending action is forcreate of reader of Q=star location.
  QSTAR_LOCATION_READER_POST
  S3COMPATIBLE_LOCATION_PUT
  S3COMPATIBLE_LOCATION_READER_POST

  # The subgroup type of the pending action is for adding a KMIP server.
  SECURITY_SETTING_ADD_KMIP_SERVER

  # The subgroup type of the pending action is for deleting a KMIP server.
  SECURITY_SETTING_DELETE_KMIP_SERVER

  # The subgroup type of the pending action is for editing a KMIP server.
  SECURITY_SETTING_EDIT_KMIP_SERVER
  SERVICE_ACCOUNT_DELETE
  SERVICE_ACCOUNT_SYNC
  UNMANAGED_OBJECT_DELETE_SNAPSHOTS
  UNMANAGED_OBJECT_DELETE_SNAPSHOTS_OF_OBJECT
}
# Sync Location for Pending Actions.
enum PendingActionSyncType {
  # The target of the pending action is CDM.
  CDM

  # The target of the pending action is Cloud Direct.
  CLOUD_DIRECT

  # The target of the pending action can be derived from the pending action.
  DERIVED

  # The target of the pending action is Mosaic.
  MOSAIC

  # The target of the pending action is RSC.
  POLARIS
}
type PendingActionType {
  pendingActionGroupType: PendingActionGroupTypeEnum!
  pendingActionSubGroupType: PendingActionSubGroupTypeEnum!
  pendingActionSyncType: PendingActionSyncType!
}
# Supported in v5.2+
input PendingSlaOperationsRequestInput {
  # Required. Supported in v5.2+
  # List of object IDs to use when retrieving pending SLA Domain assignments.
  objectIds: [String!]!
}
type PendingSnapshotDeletion {
  snapshotFid: UUID!
  status: PendingActionStatus!
}
type PendingSnapshotsOfObjectDeletion {
  objectFid: UUID!
  status: PendingActionStatus!
}
# Supported in v8.0+
# CloudStorageTier information for a snapshot in a particular archival location.
type PerLocationCloudStorageTier {
  # Required. Supported in v8.0+
  # ID of the archival location.
  locationId: String!
  cloudStorageTier: SnapshotCloudStorageTier!
}
# Specifies permissions.
type Permission {
  # The operations granted to the org on newly added.
  operation: Operation!

  # List of objects in hierarchy.
  objectsForHierarchyTypes: [ObjectIdsForHierarchyType!]!
}
input PermissionInput {
  operation: Operation!
  objectsForHierarchyTypes: [ObjectIdsForHierarchyTypeInput!]!
}
# AWS permission policy details.
type PermissionPolicy {
  # External artifact key to uniquely identify the AWS artifact such as cross account role.
  externalArtifactKey: AwsCloudExternalArtifact!

  # List of AWS-managed policy ARNs to be attached to the role.
  awsManagedPolicies: [String!]!

  # List of custom policy documents to be attached to the role.
  customerManagedPolicies: [CustomerManagedPolicy!]!
}
# PermissionsGroup represents the collection of various permission groups that
# exist across all features. However, not all permission groups are applicable
# to every feature. PermissionsGroup serves as a superset encompassing all
# available permission groups. The specific context of permissions within a
# group depends on the feature to which it is onboarded.
enum PermissionsGroup {
  # Represents the set of permissions required for immutable backup V2
  # operations. These permissions are applicable to the cloud native SQL DB
  # and SQL MI features.
  BACKUP_V2

  # Represents the basic set of permissions required to onboard a feature.
  # These permissions are applicable to all the features.
  BASIC

  # Represents the set of permissions required for Cloud Cluster ES
  # operation. These permissions are applicable to the cloud native
  # protection feature.
  CLOUD_CLUSTER_ES

  # Represents the set of permissions required for encryption
  # operation. These permissions are applicable to the cloud native archival
  # encryption feature.
  ENCRYPTION

  # Represents the set of permissions required for export and restore
  # operations. These permissions are applicable to the cloud native
  # protection feature.
  EXPORT_AND_RESTORE

  # Represents the set of permissions required for file-level recovery
  # operation. These permissions are applicable to the cloud native
  # protection feature.
  FILE_LEVEL_RECOVERY

  # Unspecified permission group.
  GROUP_UNSPECIFIED

  # Represents the set of permissions required for usage of private
  # endpoints. These permissions are applicable to exocompute feature.
  PRIVATE_ENDPOINTS

  # Represents the set of permissions required for all recovery
  # operations. These permissions are applicable to the cloud native
  # SQL DB and SQL MI features.
  RECOVERY

  # Represents the set of permissions required for private access to disk
  # snapshots. These permissions are applicable to the cloud native
  # protection feature.
  SNAPSHOT_PRIVATE_ACCESS
}
# Azure permissions group with accompanying version number.
type PermissionsGroupWithVersion {
  # Azure cloud account permissions group.
  permissionsGroup: PermissionsGroup!

  # Version of the permissions group.
  version: Int!
}
# Azure permissions group with its associated version number.
input PermissionsGroupWithVersionInput {
  # Azure cloud account permissions group.
  permissionsGroup: PermissionsGroup!

  # Policy version of the permissions group. If a policy version is not specified, the latest version will be used.
  version: Int
}
# Persistent storage configured for storing backups.
type PersistentStorage {
  # ID of the configured storage setting.
  id: String!

  # Name of the configured storage setting.
  name: String!
}
# The Phoenix rollout progress.
type PhoenixRolloutProgress {
  # The number of Exchange users that require migration and do not have Phoenix enabled.
  numNotEnabled: Int!

  # The number of Exchange users that require migration and are in the process of enabling Phoenix.
  numInProcess: Int!

  # The number of Exchange users that have Phoenix enabled.
  numEnabled: Int!

  # The number of Exchange users that have not yet completed their first full snapshot.
  numIncompleteFirstFull: Int!
}
type PhysicalHost implements CdmHierarchyObject , HierarchyObject , MssqlTopLevelDescendantType , Db2InstanceDescendantType , Db2InstancePhysicalChildType , MongoSourceDescendantType , MongoSourcePhysicalChildType {
  cdmId: String!
  ipAddresses: [String!]!
  osName: String
  connectionStatus: HostConnectionStatus
  hostVolumes: [CdmHostVolume!]!
  isArchived: Boolean!
  vfdState: String!

  # Specifies if Physical Host is an Oracle Host.
  isOracleHost: Boolean!

  # The Oracle User details of this Physical Host.
  oracleUserDetails: OracleUserDetails

  # Information pertaining to migration of the NAS host from Rubrik CDM to RSC.
  nasMigrationInfo: String

  # Specifies the NAS vendor, which can be ISILON, NETAPP, FLASHBLADE, or NUTANIX.
  nasVendorType: String

  # Specifies whether the Changelist option is enabled.
  isChangelistEnabled: Boolean!

  # ID of the Rubrik Backup Service (RBS) installed on the host.
  agentId: String

  # The operating system type of the physical host.
  osType: GuestOsType

  # The default CBT status of this Physical Host.
  defaultCbt: Boolean

  # The CBT status of this Physical Host.
  cbtStatus: String

  # A link to view the workload on the Rubrik cluster. Currently for Volume Group use only.
  cdmLink: String!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): PhysicalHostDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): PhysicalHostPhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of PhysicalHost objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PhysicalHostConnection {
  # List of PhysicalHost objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PhysicalHostEdge!]!

  # List of PhysicalHost objects.
  nodes: [PhysicalHost!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PhysicalHost objects matching the request arguments.
  count: Int!
}
# Physical host descendant.
interface PhysicalHostDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of PhysicalHostDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PhysicalHostDescendantTypeConnection {
  # List of PhysicalHostDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PhysicalHostDescendantTypeEdge!]!

  # List of PhysicalHostDescendantType objects.
  nodes: [PhysicalHostDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PhysicalHostDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the PhysicalHostDescendantType object. This wrapper is used for pagination.
type PhysicalHostDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PhysicalHostDescendantType object wrapped by this edge.
  node: PhysicalHostDescendantType!
}
# Wrapper around the PhysicalHost object. This wrapper is used for pagination.
type PhysicalHostEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PhysicalHost object wrapped by this edge.
  node: PhysicalHost!
}
interface PhysicalHostPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of PhysicalHostPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PhysicalHostPhysicalChildTypeConnection {
  # List of PhysicalHostPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PhysicalHostPhysicalChildTypeEdge!]!

  # List of PhysicalHostPhysicalChildType objects.
  nodes: [PhysicalHostPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PhysicalHostPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the PhysicalHostPhysicalChildType object. This wrapper is used for pagination.
type PhysicalHostPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PhysicalHostPhysicalChildType object wrapped by this edge.
  node: PhysicalHostPhysicalChildType!
}
# A Polaris Managed Hierarchy Object.
interface PolarisHierarchyObject {
  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of PolarisHierarchyObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PolarisHierarchyObjectConnection {
  # List of PolarisHierarchyObject objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PolarisHierarchyObjectEdge!]!

  # List of PolarisHierarchyObject objects.
  nodes: [PolarisHierarchyObject!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PolarisHierarchyObject objects matching the request arguments.
  count: Int!
}
# Wrapper around the PolarisHierarchyObject object. This wrapper is used for pagination.
type PolarisHierarchyObjectEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PolarisHierarchyObject object wrapped by this edge.
  node: PolarisHierarchyObject!
}
# Polaris protectable object.
interface PolarisHierarchySnappable {
  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): PolarisSnapshotConnection

  # The list of snapshots taken for this workload.
  workloadSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # The FID of the workload.
    workloadId: String!,

    # Filter for snapshot connection.
    snapshotFilter: [SnapshotQueryFilterInput!],

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort snapshots by field.
    sortBy: SnapshotQuerySortByField,

    # Time range input.
    timeRange: TimeRangeInput,

    # Specifies whether to ignore the active workload check.
    ignoreActiveWorkloadCheck: Boolean): GenericSnapshotConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    filter: PolarisSnapshotFilterInput,

    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): PolarisSnapshotGroupByConnection

  # GroupBy connection for this workload's snapshots.
  snapshotGroupByNewConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter Rubrik Security Cloud snapshot connection.
    snapshotFilter: [PolarisSnapshotFilterNewInput!]!,

    # Group Rubrik Security Cloud snapshots by field.
    snapshotGroupBy: SnapshotGroupByTime!): PolarisSnapshotGroupByNewConnection

  # The most recent snapshot of this workload.
  newestSnapshot: PolarisSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: PolarisSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot that is indexed and unexpired, and therefore restorable.
  newestIndexedSnapshot: PolarisSnapshot

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
type PolarisInventorySubHierarchyRoot {
  rootEnum: InventorySubHierarchyRootEnum!

  # List of children.
  childConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): PolarisHierarchyObjectConnection!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): PolarisHierarchyObjectConnection!

  # List of top-level descendants (with respect to RBAC).
  topLevelDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!]): PolarisHierarchyObjectConnection!
}
# Rubrik SaaS authorized operations.
enum PolarisObjectAuthorizedOperationsEnum {
  MANAGE_DATA_SOURCE
  MANAGE_PROTECTION
  REFRESH_DATA_SOURCE
  VIEW_INVENTORY
}
enum PolarisSnappableAuthorizedOperationsEnum {
  DELETE_SNAPSHOT
  DOWNLOAD
  EXPORT_SNAPSHOTS
  MANAGE_PROTECTION
  MOUNT
  RESTORE_TO_ORIGIN
  TAKE_ON_DEMAND_SNAPSHOT
  VIEW_INVENTORY
}
type PolarisSnapshot implements GenericSnapshot {
  id: UUID!
  date: DateTime!
  expirationDate: DateTime
  expiryHint: Boolean!
  snappableId: String!
  parentSnapshotId: String
  isCorrupted: Boolean!
  indexingAttempts: Long!
  indexTime: DateTime
  isUnindexable: Boolean!
  isOnDemandSnapshot: Boolean!
  isDeletedFromSource: Boolean!
  isReplicated: Boolean!
  unexpiredReplicaCount: Int!
  isArchived: Boolean!
  unexpiredArchivedSnapshotCount: Int!
  sequenceNumber: Int!
  consistencyLevel: SnapshotConsistencyLevel!
  isDownloadedSnapshot: Boolean
  isReplica: Boolean
  isArchivalCopy: Boolean

  # Specifies whether the snapshot is quarantined.
  isQuarantined: Boolean!
  replicationLocations: [DataLocation!]

  # Indicates whether the snapshot has a valid replica.
  hasUnexpiredReplica: Boolean!

  # Indicates whether the snapshot has a valid archived copy.
  hasUnexpiredArchivedCopy: Boolean!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # Rubrik-specific information about snapshots of specific workloads. Currently, this is only valid for Azure Virtual Machine, AWS EC2, and M365 snapshots.
  polarisSpecificSnapshot: PolarisSpecificSnapshot
  slaDomain: SlaDomain

  # Specifies whether or not the snapshot is indexed.
  isIndexed: Boolean!

  # Specifies whether or not the snapshot is expired.
  isExpired: Boolean!
}
# Paginated list of PolarisSnapshot objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PolarisSnapshotConnection {
  # List of PolarisSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PolarisSnapshotEdge!]!

  # List of PolarisSnapshot objects.
  nodes: [PolarisSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PolarisSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the PolarisSnapshot object. This wrapper is used for pagination.
type PolarisSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PolarisSnapshot object wrapped by this edge.
  node: PolarisSnapshot!
}
input PolarisSnapshotFilterInput {
  snappableId: [String!]
  timeRange: TimeRangeInput
  isOnDemandSnapshot: Boolean
}
input PolarisSnapshotFilterNewInput {
  field: FieldEnum = ALL
  texts: [String!] = []
}
# Polaris Snapshot data with groupby info applied to it.
type PolarisSnapshotGroupBy {
  # The data groupby info.
  groupByInfo: PolarisSnapshotGroupByInfo!

  # Paginated snapshot data.
  polarisSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort Rubrik Security Cloud snapshots by field.
    sortBy: PolarisSnapshotSortByEnum = Date): PolarisSnapshotConnection!

  # Provides further groupings for the data.
  polarisSnapshotGroupBy(
    # Group Rubrik Security Cloud snapshots by field.
    groupBy: PolarisSnapshotGroupByEnum!): [PolarisSnapshotGroupBy!]!
}
# Paginated list of PolarisSnapshotGroupBy objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PolarisSnapshotGroupByConnection {
  # List of PolarisSnapshotGroupBy objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PolarisSnapshotGroupByEdge!]!

  # List of PolarisSnapshotGroupBy objects.
  nodes: [PolarisSnapshotGroupBy!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PolarisSnapshotGroupBy objects matching the request arguments.
  count: Int!
}
# Wrapper around the PolarisSnapshotGroupBy object. This wrapper is used for pagination.
type PolarisSnapshotGroupByEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PolarisSnapshotGroupBy object wrapped by this edge.
  node: PolarisSnapshotGroupBy!
}
enum PolarisSnapshotGroupByEnum {
  Day
  Hour
  Month
  Quarter
  Week
  Year
}
union PolarisSnapshotGroupByInfo = TimeRangeWithUnit
# Polaris Snapshot data with groupby info applied to it.
type PolarisSnapshotGroupByNew {
  # The data groupby info.
  groupByInfo: PolarisSnapshotGroupByInfo!

  # Paginated snapshot data.
  polarisSnapshotConnection: PolarisSnapshotConnection!
}
# Paginated list of PolarisSnapshotGroupByNew objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PolarisSnapshotGroupByNewConnection {
  # List of PolarisSnapshotGroupByNew objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PolarisSnapshotGroupByNewEdge!]!

  # List of PolarisSnapshotGroupByNew objects.
  nodes: [PolarisSnapshotGroupByNew!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PolarisSnapshotGroupByNew objects matching the request arguments.
  count: Int!
}
# Wrapper around the PolarisSnapshotGroupByNew object. This wrapper is used for pagination.
type PolarisSnapshotGroupByNewEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PolarisSnapshotGroupByNew object wrapped by this edge.
  node: PolarisSnapshotGroupByNew!
}
enum PolarisSnapshotSortByEnum {
  Date
  SnappableId
  SnapshotId
}
# Rubrik-specific information about snapshots of specific object types. Currently, this is only valid for Azure Virtual Machine, AWS EC2, and M365 snapshots.
interface PolarisSpecificSnapshot {
  # ID of the snapshot.
  snapshotId: UUID!
}
# Specifies whether policy assignment is directly applied to the object or it is inherited from an ancestor.
enum PolicyAssignmentType {
  # Not specified.
  ASSIGNMENT_UNSPECIFIED

  # Policy directly applied to the object.
  DIRECT

  # Policy assignment is inherited from ancestor.
  INHERITED
}
# Supported in v6.0+
type PolicyCheckResult {
  # Supported in v6.0+
  # Output from the policy.
  checkOutput: String

  # Required. Supported in v6.0+
  # Individual check results.
  isCheckPassed: Boolean!

  # Required. Supported in v6.0+
  # Node ID on which policy is enforced.
  nodeId: String!

  # Required. Supported in v6.0+
  # Policy ID for which result is collected.
  policyId: String!
}
# Represents the policy detail.
type PolicyDetail {
  # Policy ID.
  id: String!

  # Policy name.
  name: String!

  # Policy description.
  description: String!

  # Total objects in a policy.
  totalObjects: Int!

  # Objects with pending initial analysis.
  pendingAnalysisObjects: Int!

  # Total analyzers in a policy.
  analyzers: Int!

  # Time when the policy was last updated.
  lastUpdatedTime: Long!

  # Policy creator.
  creator: User
}
# Paginated list of PolicyDetail objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PolicyDetailConnection {
  # List of PolicyDetail objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PolicyDetailEdge!]!

  # List of PolicyDetail objects.
  nodes: [PolicyDetail!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PolicyDetail objects matching the request arguments.
  count: Int!
}
# Wrapper around the PolicyDetail object. This wrapper is used for pagination.
type PolicyDetailEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PolicyDetail object wrapped by this edge.
  node: PolicyDetail!
}
# Fields to sort the policy detail entries.
enum PolicyDetailsSortBy {
  # Sort field not specified.
  SORT_UNSPECIFIED

  # Sort by workload name.
  WORKLOAD_NAME
}
type PolicyObj {
  snapshotFid: String!

  # Timestamp in ms.
  snapshotTimestamp: Long!

  # Root file result.
  rootFileResult: FileResult!

  # The same snapshot may be returned for different policy object queries at
  # different time points since snapshot results are pulled forward if no new
  # snapshots have come up from CDM. The daily change values will be
  # different for these different time points.
  # 
  # This time_context field is used by the graphql layer to make sure that
  # Apollo cache on the UI can differentiate between the policy object at
  # different time points.
  timeContext: String!
  osType: DataGovOsType!
  shareType: DataGovShareType!

  # Risk level of the policy object.
  riskLevel: RiskLevelType!

  # Analysis status of the policy object.
  analysisStatus: AnalysisStatus!

  # Sensitive File count for various risk levels.
  sensitiveFiles: SensitiveFiles

  # Sensitive hits accumulated across different workloads for the user.
  totalSensitiveHits: SummaryHits

  # Analyzer Hits count for various risk levels.
  analyzerHits: AnalyzerHits

  # User access risk reasons.
  accessRiskReasons: [RiskReason!]!

  # User count for various risk levels.
  userCounts: PrincipalCounts

  # Sensitive hits for various risk levels.
  riskHits: SensitiveHits

  # Specifies whether the object has user access enabled or not.
  isUserAccessEnabledObject: Boolean!

  # Change in the user count for various risk levels.
  deltaUserCounts: PrincipalCounts

  # Specifies whether the object has insights or not.
  hasInsights: Boolean!
  id: String!
  folderChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String, filter: BrowseDirectoryFiltersInput, sort: FileResultSortInput, stdPath: String!, timezone: String!): FileResultConnection!
  fileResultConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String, filter: ListFileResultFiltersInput, sort: FileResultSortInput, timezone: String!): FileResultConnection!
  whitelistedAnalyzerList(stdPath: String!): [WhitelistedAnalyzer!]!
  policySummaries: [ClassificationPolicySummary!]!
  objectStatus: ObjectStatus!
  allAnalyzerMappings(stdPath: String!): [AnalyzerMapping!]!
  snappable: HierarchyObject
}
# Paginated list of PolicyObj objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PolicyObjConnection {
  # List of PolicyObj objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PolicyObjEdge!]!

  # List of PolicyObj objects.
  nodes: [PolicyObj!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PolicyObj objects matching the request arguments.
  count: Int!
}
# Wrapper around the PolicyObj object. This wrapper is used for pagination.
type PolicyObjEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PolicyObj object wrapped by this edge.
  node: PolicyObj!
}
enum PolicyObjectFilter {
  ALL
  HAS_OBJECTS
  NO_OBJECTS
}
type PolicyObjectUsage {
  policies: [ClassificationPolicySummary!]!
  hierarchyObject: HierarchyObject!
}
# Paginated list of PolicyObjectUsage objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PolicyObjectUsageConnection {
  # List of PolicyObjectUsage objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PolicyObjectUsageEdge!]!

  # List of PolicyObjectUsage objects.
  nodes: [PolicyObjectUsage!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of PolicyObjectUsage objects matching the request arguments.
  count: Int!
}
# Wrapper around the PolicyObjectUsage object. This wrapper is used for pagination.
type PolicyObjectUsageEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual PolicyObjectUsage object wrapped by this edge.
  node: PolicyObjectUsage!
}
type PolicyStatus {
  policyId: String!
  status: ObjectPolicyStatus!
}
# Represents the most risky policies.
type PolicySummary {
  # Files with sensitive data and open access.
  highRiskFiles: TimelineEntry

  # Files with sensitive data, but no open access.
  lowRiskFiles: TimelineEntry

  # Policy summaries.
  summary: ClassificationPolicySummary
}
# Policy summary details.
type PolicySummaryDetails {
  # Policy ID.
  policyId: String!

  # Policy name.
  policyName: String!

  # Risk summary for the policy.
  hitsSummary: HitsSummary
}
# Range of ports that are allowed to be accessed.
input PortRange {
  # The minimum port in the port range.
  portMin: Int = 0

  # The maximum port in the port range.
  portMax: Int = 0
}
input PreAddVcenterInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Specify one of id or connectionConfig. If the vCenter is being added to Rubrik, specify the IP address and account credentials of the vCenter Server that is being added. If the vCenter is being updated specify the id of vCenter.
  vcenterConfig: VcenterPreAddConfigInput!
}
# A script that is ran before or after a snapshot or backup.
type PrePostScript {
  scriptPath: String!
  timeoutMs: Int!
  failureHandling: PrePostScriptFailureHandlingEnum!
}
enum PrePostScriptFailureHandlingEnum {
  abort
  continue
}
# Precheck details.
type PrecheckFailure {
  # Name of the precheck.
  precheckName: String!

  # Cause of precheck failure.
  cause: String!

  # Remedy to fix the precheck failure.
  remedy: String!

  # Is upgrade blocker flag.
  upgradeBlocker: Boolean!

  # Identifier for the precheck.
  precheckIdentifier: PrecheckIdentifier!
}
# Identifier for the precheck.
enum PrecheckIdentifier {
  # RSC migration precheck.
  PRECHECK_MIGRATION

  # CDM precheck.
  PRECHECK_OTHER

  # This is not used. Added due to backward compatibility guidelines.
  PRECHECK_UNSPECIFIED
}
# Precheck status running information.
type PrecheckStatusNextRunInfo {
  # Upgrade prechecks job instance Id.
  jobInstanceId: String!

  # Upgrade prechecks job start time.
  startTime: Long!

  # Status of Upgrade prechecks job.
  status: String!
}
# Precheck job details.
type PrechecksJobReply {
  # Upgrade Prechecks Job ID.
  jobId: String!
}
# Prechecks status response object.
type PrechecksStatusReply {
  # Prechecks job end time.
  endTime: Long!

  # List of prechecks failed.
  failureResults: [PrecheckFailure!]!

  # Total number of prechecks run.
  numPrechecks: Int!

  # Next prechecks job Information.
  nextRunInfo: PrecheckStatusNextRunInfo

  # Prechecks job duration in minutes.
  runPeriodInMinutes: Int!
}
# Represents upgrade precheck status.
enum PrechecksStatusTypeEnum {
  # Precheck failed.
  PrechecksFailureError

  # Precheck succeeded but has warnings.
  PrechecksFailureWarning

  # Precheck is in progress.
  PrechecksRunning

  # Precheck success.
  PrechecksSuccess

  # Unknown precheck status.
  Unknown
}
# Input to initiate deletion of AWS cloud account.
input PrepareAwsCloudAccountDeletionInput {
  # Rubrik ID of account to be deleted.
  cloudAccountId: UUID!

  # Protection feature to be deleted for the cloud account.
  feature: CloudAccountFeature!
}
# Prepares AWS cloud account for deletion and initiates deletion of the account.
type PrepareAwsCloudAccountDeletionReply {
  # CloudFormation URL to delete the stack.
  cloudFormationUrl: String!

  # List of feature versions.
  featureRegionMap: [AwsCloudAccountFeatureVersion!]!

  # Template URL of the Cloudformation stack. The template URL is empty when the cloud account has no connected features and is to be deleted.
  templateUrl: String!
}
# Input to prepare feature update for AWS cloud account.
input PrepareFeatureUpdateForAwsCloudAccountInput {
  # AWS account ID.
  cloudAccountId: UUID!

  # List of features to be updated for the AWS account.
  features: [CloudAccountFeature!]!
}
# Response to prepare updation of AWS cloud account.
type PrepareFeatureUpdateForAwsCloudAccountReply {
  # CloudFormation URL to update cloud account.
  cloudFormationUrl: String!

  # AWS CloudFormation template URL.
  templateUrl: String!
}
input PreviewFilterInput {
  # Limit the number of virtual machine matches returned.
  limit: Int

  # Specifies the number of virtual machine matches to ignore starting at the beginning of the results.
  offset: Int

  # Required. Conditional logic of vSphere tags.
  filterCondition: String!

  # Required. ID of the vCenter Server.
  id: String!
}
type PreviewerClusterConfig {
  clusterId: String!
  enabled: Boolean!
}
input PreviewerClusterConfigInput {
  clusterId: String = ""
  enabled: Boolean = false
}
# LDAP principal.
type Principal {
  principalType: PrincipalTypeEnum!
  id: String!
  authDomainId: String!
  name: String!
  email: String
  description: String
}
# PrincipalAccessInfo represents the principal access info.
type PrincipalAccessInfo {
  # Represents the user count.
  userCount: Long!

  # Represents the group count.
  groupCount: Long!
}
# Paginated list of Principal objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type PrincipalConnection {
  # List of Principal objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [PrincipalEdge!]!

  # List of Principal objects.
  nodes: [Principal!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Principal objects matching the request arguments.
  count: Int!
}
# User count for different risk categories.
type PrincipalCounts {
  # Number of High-risk principals.
  highRiskCount: SummaryCount

  # Number of Medium-risk principals.
  mediumRiskCount: SummaryCount

  # Number of Low-risk principals.
  lowRiskCount: SummaryCount

  # Number of principals.
  totalCount: SummaryCount
}
# Wrapper around the Principal object. This wrapper is used for pagination.
type PrincipalEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Principal object wrapped by this edge.
  node: Principal!
}
enum PrincipalTypeEnum {
  CLIENT
  GROUP
  UNKNOWN
  USER
}
# A tuple of the Prism Element ID and the corresponding CDM cluster ID while adding a Nutanix Prism Central.
input PrismElementCdmTuple {
  # The ID of the Nutanix cluster.
  nutanixClusterId: UUID!

  # The ID of the CDM cluster.
  cdmClusterId: UUID!
}
# RCV private endpoint connection details.
type PrivateEndpointConnection {
  # RCV private endpoint Azure Resource ID.
  privateEndpointId: String!

  # RCV private endpoint connection status.
  privateEndpointConnectionStatus: PrivateEndpointConnectionStatus!
}
# Private endpoint connection status for an RCV archival location.
enum PrivateEndpointConnectionStatus {
  # RCV private endpoint connection is in approved state.
  APPROVED

  # RCV private endpoint connection is in pending state.
  PENDING

  # RCV private endpoint connection is in rejected state.
  REJECTED

  # RCV private endpoint connection is in removed state.
  REMOVED

  # Not specified RCV private endpoint connection.
  UNSPECIFIED_PE_CONNECTION_STATUS
}
# The number of processed Ransomware Investigation workloads.
type ProcessedRansomwareInvestigationWorkloadCountReply {
  # The number of Ransomware Investigation workloads processed in the past 24 hours.
  count: Long!
}
# Represents a licensed product.
enum Product {
  # Represents a Cloud Cluster product.
  CLOUD

  # Represents an E1000 product.
  E1000

  # Represents a Rubrik Edge product.
  EDGE

  # Represents an RSC product.
  FREE_RSC

  # Represents an unknown product.
  PRODUCT_UNKNOWN

  # Represents a Rubrik Appliance product.
  RUBRIK_APPLIANCE

  # Represents a Rubrik Virtual Cluster product.
  RVC

  # Represents a Scale product.
  SCALE

  # Represents a third party hardware product.
  THIRDPARTY_HARDWARE
}
# A help topic in the product documentation.
type ProductDocumentation {
  # ID of the help topic.
  id: String!

  # Title of the help topic.
  title: String!

  # Summary of the help topic.
  description: String!

  # Language code in ISO 639-1.
  language: String!

  # Type of the help topic.
  type: ProductDocumentationType!

  # A flattened list of nodes representing the contents of the help topic.
  contents: [ContentNode!]!

  # List of related help topics.
  related: [RelatedContent!]!
}
# Type of the product documentation.
enum ProductDocumentationType {
  # Concept.
  CONCEPT

  # Reference.
  REFERENCE

  # Task.
  TASK

  # Unspecified.
  TYPE_UNSPECIFIED
}
# Name of product.
enum ProductName {
  # Azure Active Directory protection.
  AAD

  # AppFlows.
  APPFLOWS

  # Atlassian Jira protection.
  ATLASSIAN_JIRA

  # Cloud Cluster ES.
  CC_ES

  # CloudNative.
  CLOUDNATIVE

  # GPS.
  GPS

  # Kubernetes protection.
  KUBERNETES

  # NoSQL protection.
  NOSQL

  # O365.
  O365

  # On-premise Active Directory Protection.
  ONPREM_AD

  # Radar.
  RADAR

  # Ransomware Investigation on NAS.
  RADAR_NAS

  # Ransomware Investigation on CNP.
  RADAR_UCL

  # Rubrik Cloud Vault (RCV).
  RCV

  # Backup on the Rubrik account.
  RCV_UCL

  # Rubrik Data Protection (RDP).
  RDP

  # Saphana.
  SAPHANA

  # Sonar.
  SONAR

  # Sensitive Data Discovery on NAS.
  SONAR_NAS

  # Sensitive Data Discovery on Microsoft Office 365.
  SONAR_O365

  # Sensitive Data Discovery on CNP.
  SONAR_UCL

  # Unknown name.
  UNSPECIFIED_NAME

  # User Access.
  USER_ACCESS
}
# State of product.
enum ProductState {
  # Product failed to activate.
  ACTIVATION_FAILED

  # Product is in activation.
  ACTIVATION_PENDING

  # Active product.
  ACTIVE

  # Disabled Product.
  DISABLED

  # Product couldn't be disabled.
  DISABLE_FAILED

  # Product is being disabled.
  DISABLE_PENDING

  # Product has been selected for expiration, but somehow
  # expiration failed.
  EXPIRATION_PENDING

  # Expired product.
  EXPIRED

  # Inactive product state waiting to
  # be activated.
  INACTIVE

  # Unknown state.
  UNSPECIFIED_STATE
}
# Type of product.
enum ProductType {
  PAG_TRIAL

  # POC product.
  POC

  # Revenue product.
  REVENUE

  # Trial product.
  TRIAL

  # Unknown type.
  UNSPECIFIED_TYPE
}
# Information about the product type.
type ProductTypeInfo {
  # The product type.
  productType: String!

  # The bundle features in this product type.
  bundleFeatures: [String!]!

  # The licenses under this product type.
  licenses: [License!]!
}
# Input for promoting reader archival location.
input PromoteReaderTargetInput {
  # Id of the reader archival location to be promoted.
  locationId: String = ""
}
# Protected Object Summary.
interface ProtectedObjectSummary {
  # The ID of the protected object.
  id: String!

  # The name of the protected object.
  name: String!

  # Whether the protected object is archived.
  isArchived: Boolean!

  # The effective SLA Domain of the workload, if defined.
  effectiveSlaOpt: String

  # The type of the workload. This field may be empty if not included in the response.
  objectType: ManagedObjectType
}
# Represents a protected object and its corresponding SLA Domain.
type ProtectedObjectTypeToSla {
  # The type of the protected object.
  protectedObjectType: WorkloadLevelHierarchy!

  # SLA Domain assigned to the object.
  slaAssignment: AzureNativeResourceGroupSlaAssignment!
}
# Metadata for rendering protected objects.
type ProtectedObjects implements ProtectedObjectSummary {
  # ID of the object.
  id: String!

  # Name of the object.
  name: String!

  # Specifies whether the object is archived or not.
  isArchived: Boolean!

  # Effective SLA Domain of the object.
  effectiveSlaOpt: String

  # Specifies whether the object is unprotected.
  isUnprotected: Boolean!

  # Object type.
  objectType: ManagedObjectType

  # The pause status of the protected object.
  slaPauseStatus: Boolean
}
# Paginated list of ProtectedObjects objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ProtectedObjectsConnection {
  # List of ProtectedObjects objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ProtectedObjectsEdge!]!

  # List of ProtectedObjects objects.
  nodes: [ProtectedObjects!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ProtectedObjects objects matching the request arguments.
  count: Int!
}
# Wrapper around the ProtectedObjects object. This wrapper is used for pagination.
type ProtectedObjectsEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ProtectedObjects object wrapped by this edge.
  node: ProtectedObjects!
}
type ProtectionStatus {
  enumValue: ProtectionStatusEnum!
}
# Protection status of an object.
enum ProtectionStatusEnum {
  # Do not protect.
  DoNotProtect

  # No SLA Domain.
  NoSla

  # Protected.
  Protected
}
type ProtectionTaskDetailsTableFilter {
  cluster_type: [FilterOption!]!
  cluster_location: [FilterOption!]!
  task_category: [FilterOption!]!
  task_type: [FilterOption!]!
  status: [FilterOption!]!
  object_type: [FilterOption!]!
  replication_source: [FilterOption!]!
}
# The provider of the endpoint to which the webhook will be sent.
enum ProviderType {
  # A generic endpoint receives the webhook.
  CUSTOM

  # A Microsoft Sentinel endpoint receives the webhook.
  MICROSOFT_SENTINEL

  # A PagerDuty endpoint receives the webhook.
  PAGERDUTY

  # Unused default value.
  PROVIDER_TYPE_UNSPECIFIED

  # A Splunk endpoint receives the webhook.
  SPLUNK
}
# Provision status of o365 subscription.
enum ProvisionStatus {
  # Organization is active to use.
  ACTIVE

  # Organization is deleted.
  DELETED

  # Organization is being deleted.
  DELETING

  # Organization provisioning failed.
  FAILED

  # Organization is being refreshed.
  REFRESHING

  # Organization is unhealthy.
  UNHEALTHY
}
# Supported in v5.0+
input ProxyConfigInput {
  # Supported in v5.0+
  password: String

  # Supported in v5.0+
  port: Int

  # Supported in v5.0+
  username: String

  # Required. Supported in v5.0+
  host: String!

  # Required. Supported in v5.0+
  protocol: String!
}
# Proxy protocol type.
enum ProxyProtocol {
  # HTTP.
  HTTP

  # HTTPS.
  HTTPS

  # UNSPECIFIED.
  PROTOCOL_UNSPECIFIED

  # SOCKS5.
  SOCKS5
}
# Proxy settings for target.
type ProxySettings {
  proxyServer: String!
  portNumber: Int!
  username: String!
  protocol: String!
}
# Input for creating target proxy setting.
input ProxySettingsInput {
  # Filed for specifying the IP address or FQDN of the proxy server.
  proxyServer: String = ""

  # Field for specifying port number of the proxy.
  portNumber: Int = 0

  # Field for specifying username of the proxy.
  username: String = ""

  # Field for specifying password of the proxy.
  password: String = ""

  # Field for specifying protocol of the proxy.
  protocol: String = ""
}
input PutSmbConfigurationInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. SMB configuration.
  config: SmbConfigInput!
}
# Reply Object for PutSmbConfiguration.
type PutSmbConfigurationReply {
  output: SmbConfig
}
type PvcInformation {
  # ID to uniquely identify PVC.
  id: String!

  # Name of PVC in snapshot.
  name: String!

  # PVC storage capacity.
  capacity: String!

  # Access mode mounted on a host.
  accessMode: String!

  # Storage class of PVC.
  storageClass: String!

  # PV name on which PVC bound.
  volume: String!

  # Phase in which PVC bound to the PV.
  phase: String!

  # Json string of PVC Labels.
  labels: String!
}
# Filters based on the quarantine state.
enum QuarantineFilter {
  # Include only quarantined entries.
  INCLUDE_ONLY_QUARANTINE
}
# Quarantine information corresponding to a path.
type QuarantineInfo {
  # Specifies whether the path is quarantined.
  isQuarantined: Boolean!

  # Specifies whether there are more quarantined files at this path.
  containsQuarantinedFiles: Boolean!
}
# Spec for quarantine.
type QuarantineSpec {
  # Id of the snapshot.
  snapshotId: String!

  # Files which need to be quarantined.
  filesDetails: [FileDetails!]!
}
# Configuration which indicates which files and snapshots to quarantine.
input QuarantineSpecInput {
  # Id of the snapshot.
  snapshotId: String!

  # Files which need to be quarantined.
  filesDetails: [FileDetailsInput!]!
}
# Quarterly snapshot schedule.
type QuarterlySnapshotSchedule {
  # Basic quarterly snapshot schedule.
  basicSchedule: BasicSnapshotSchedule

  # Day of the Quarter.
  dayOfQuarter: DayOfQuarter!

  # Starting month of quarter.
  quarterStartMonth: Month!
}
# Quarterly snapshot schedule.
input QuarterlySnapshotScheduleInput {
  # Basic quarterly snapshot schedule.
  basicSchedule: BasicSnapshotScheduleInput

  # Day of the Quarter.
  dayOfQuarter: DayOfQuarter = FIRST_DAY

  # Starting month of quarter.
  quarterStartMonth: Month = JANUARY
}
input QueryCertificatesInput {
  # Search certificates by description.
  description: String

  # Search certificates by expiration.
  expiration: String

  # Search certificates by whether or not they contain a private key.
  hasKey: Boolean

  # Specifies whether to include expired certificates. The default is false.
  includeExpired: Boolean

  # Search certificates according to whether or not they are added to truststore. The default is false.
  isTrusted: Boolean

  # Search by certificate name.
  name: String

  # Attribute by which the list of certificates is sorted.
  sortBy: V1QueryCertificatesRequestSortBy

  # Sort order, either ascending or descending.
  sortOrder: V1QueryCertificatesRequestSortOrder

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Query datastore freespace threshold.
input QueryDatastoreFreespaceThresholdInput {
  # Required. UUID of the Rubrik cluster the request goes to.
  clusterUuid: UUID!

  # Optional Virtual Machine ID.
  vmId: String
}
# Datastore freespace threshold configurations on Rubrik clusters.
type QueryDatastoreFreespaceThresholdsReply {
  # Datastore freespace threshold configuration.
  thresholds: [DatastoreFreespaceThresholdType!]!
}
input QueryGuestCredentialInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for getting the summary of all Hyper-V hosts.
input QueryHypervHostInput {
  # Filter by ID of effective SLA domain.
  effectiveSlaDomainId: String

  # Limit the number of matches returned.
  limit: Int

  # Search for a virtual machine by name.
  name: String

  # Ignore these many matches in the beginning.
  offset: Int

  # Filter by primary cluster ID, or **local**.
  primaryClusterId: String

  # Filter by SLA assignment type.
  slaAssignment: InternalQueryHypervHostRequestSlaAssignment

  # Sort the result by the given attribute.
  sortBy: InternalQueryHypervHostRequestSortBy

  # Sort order, either ascending or descending.
  sortOrder: InternalQueryHypervHostRequestSortOrder

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for getting the database log report.
input QueryLogReportInput {
  # Filter by the database name substring.
  name: String

  # Filter database log reports where the database log backup delay value, in seconds, is greater than the logBackupDelay value.
  logBackupDelay: Int

  # Limit the number of matches returned.
  limit: Int

  # Integer specifying the number of initial matches to ignore.
  offset: Int

  # Filter by effective SLA Domain.
  effectiveSlaDomainId: String

  # Filter by the database type.
  databaseType: String

  # Filter by the database location.
  location: String

  # Specifies the attribute to use while sorting the summary information. Performs an ASCII sort using the specified attribute, in the order specified by sort_order.
  sortBy: V1QueryLogReportRequestSortBy

  # Sort order, either ascending or descending.
  sortOrder: V1QueryLogReportRequestSortOrder

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for getting SQL Server log shipping configurations.
input QueryLogShippingConfigurationsV2Input {
  # Limit the summary information to a specified maximum number of results.
  limit: Int

  # Filter log shipping configuration objects by performing an infix search using the location string value for a secondary database in the format \"host/instance\".
  location: String

  # Starting position in the list of results contained in the response. The summary information includes the specified numbered result and all higher-numbered results.
  offset: Int

  # ID of a primary database object.
  primaryDatabaseId: String

  # Filter log shipping configuration objects by performing an infix search using the name of a primary database.
  primaryDatabaseName: String

  # Filter log shipping configuration objects by performing an infix search using the name of a secondary database.
  secondaryDatabaseName: String

  # Attribute used to sort the results using an ASCII sort order. Sorts using the last_applied attribute represent the timestamp as an ISO 8601-encoded string.
  sortBy: V2QueryLogShippingConfigurationsV2RequestSortBy

  # Sort order, either ascending or descending.
  sortOrder: V2QueryLogShippingConfigurationsV2RequestSortOrder

  # Filter log shipping configuration objects based on the status value of the secondary database.
  status: V2QueryLogShippingConfigurationsV2RequestStatus

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for Network Throttle Query.
input QueryNetworkThrottleInput {
  # Filter network throttle information to only include the specified resource.
  resourceId: InternalQueryNetworkThrottleRequestResourceId

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for getting the database log reporting properties for a cluster.
input QueryReportPropertiesInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
type QuerySDDLReply {
  secInfo: [PathSecInfo!]!
}
# Input for Support Bundle Query.
input QuerySupportBundleInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. The support bundle generation request.
  id: String!
}
input QueryUnmanagedObjectSnapshotsV1Input {
  # Filter all the snapshots after a date.
  afterDate: DateTime

  # Filter all the snapshots before a date.
  beforeDate: DateTime

  # Limit the number of matches returned.
  limit: Int

  # Ignore these many matches in the beginning.
  offset: Int

  # Search snapshot by date and time.
  searchValue: String

  # Filter by snapshot type. Valid types are OnDemand, PolicyBased, Retrieved.
  snapshotType: V1QueryUnmanagedObjectSnapshotsV1RequestSnapshotType

  # Sort by given attribute.
  sortBy: V1QueryUnmanagedObjectSnapshotsV1RequestSortBy

  # The sort order. The default sort order is ascending.
  sortOrder: V1QueryUnmanagedObjectSnapshotsV1RequestSortOrder

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of a object.
  id: String!
}
# Summary of the Ransomware Investigation results.
type RansomwareInvestigationAnalysisSummaryReply {
  # A list of daily summaries of Ransomware Investigation results for all
  # the workloads.
  analysisDetails: [DailyAnalysisDetails!]!
}
# Lists of entities and their Ransomware Monitoring enablement status.
type RansomwareInvestigationEnablementReply {
  # Microsoft 365 subscriptions on which Ransomware Monitoring can be enabled.
  microsoft365Subscriptions: [Microsoft365RansomwareInvestigationEnablement!]

  # Rubrik Cloud Vault archival locations on which Ransomware Monitoring can be enabled.
  rubrikCloudVaultLocations: [RubrikCloudVaultRansomwareInvestigationEnablement!]

  # Cloud Direct clusters on which Ransomware Monitoring can be enabled.
  cloudDirectClusters: [CloudDirectClusterRansomwareInvestigationEnablement!]
}
# Ransomware Investigation report from lambda service.
type RansomwareResult {
  # The database ID of the ransomware result.
  id: String!

  # The cluster ID of the object.
  clusterUuid: UUID!

  # The internal ID of the object.
  workloadId: String!

  # The internal ID of the snapshot.
  snapshotId: String!

  # The internal fid of the snapshot.
  snapshotFid: String!

  # The date of the snapshot.
  snapshotData: DateTime!

  # The probability of the snapshot being encrypted.
  encryptionProbability: Float!

  # Indicates whether the snapshot is encrypted.
  isEncrypted: Boolean!

  # The internal managed ID of the object.
  managedId: String!
}
# Paginated list of RansomwareResult objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type RansomwareResultConnection {
  # List of RansomwareResult objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [RansomwareResultEdge!]!

  # List of RansomwareResult objects.
  nodes: [RansomwareResult!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of RansomwareResult objects matching the request arguments.
  count: Int!
}
# Wrapper around the RansomwareResult object. This wrapper is used for pagination.
type RansomwareResultEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual RansomwareResult object wrapped by this edge.
  node: RansomwareResult!
}
# Filter ransomware result data.
input RansomwareResultFilterInput {
  # Filter by Rubrik cluster ID.
  clusterUuid: [UUID!]

  # Filter by internal managed ID.
  managedId: [String!]

  # Start of filtering time range.
  startTime: DateTime

  # End of filtering time range.
  endTime: DateTime

  # Filter based on encrypted status of the snapshot.
  isEncrypted: Boolean
}
# Group ransomware results by field.
enum RansomwareResultGroupBy {
  # The unique ID of the cluster.
  CLUSTER_UUID

  # The managed ID of the object.
  MANAGED_ID

  # The day the snapshot was taken.
  SNAPSHOT_DAY

  # The hour the snapshot was taken.
  SNAPSHOT_HOUR

  # The month the snapshot was taken.
  SNAPSHOT_MONTH

  # The week the snapshot was taken.
  SNAPSHOT_WEEK

  # The year the snapshot was taken.
  SNAPSHOT_YEAR
}
# Group by information for encryption detection results.
union RansomwareResultGroupByInfo = Cluster | Snappable | TimeRangeWithUnit
# Ransomware Investigation data with group by information applied to it.
type RansomwareResultGroupedData {
  # Group by information.
  groupByInfo: RansomwareResultGroupByInfo!

  # Paginated ransomware result data.
  ransomwareResults(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort ransomware results by field.
    sortBy: RansomwareResultSortBy): RansomwareResultConnection!

  # Provides further groupings for the data.
  ransomwareResultGroupedData(
    # Group ransomware results by field.
    groupBy: RansomwareResultGroupBy!): [RansomwareResultGroupedData!]!
}
# Paginated list of RansomwareResultGroupedData objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type RansomwareResultGroupedDataConnection {
  # List of RansomwareResultGroupedData objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [RansomwareResultGroupedDataEdge!]!

  # List of RansomwareResultGroupedData objects.
  nodes: [RansomwareResultGroupedData!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of RansomwareResultGroupedData objects matching the request arguments.
  count: Int!
}
# Wrapper around the RansomwareResultGroupedData object. This wrapper is used for pagination.
type RansomwareResultGroupedDataEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual RansomwareResultGroupedData object wrapped by this edge.
  node: RansomwareResultGroupedData!
}
# Sort ransomware results by field.
enum RansomwareResultSortBy {
  # The unique ID of the cluster.
  CLUSTER_UUID

  # The probability of encryption.
  ENCRYPTION_PROBABILITY

  # Is the snapshot encrypted.
  IS_ENCRYPTED

  # The managed ID of the object.
  MANAGED_ID

  # The date of the snapshot.
  SNAPSHOT_DATE

  # The ID of the snapshot.
  SNAPSHOT_ID

  # The ID of the object.
  WORKLOAD_ID
}
# URLs and hashes for RBA installers.
type RbaInstallerUrls {
  # Signed URL of installer for Windows.
  windowsUrl: String!

  # Signed URL of installer for Linux in Debian format.
  debianUrl: String!

  # Signed url of installer for Linux in RPM format.
  rpmUrl: String!

  # SHA-256 hash of the installer for Windows.
  windowsHashSha256: String!

  # SHA-256 hash of the installer for Linux in Debian format.
  debianHashSha256: String!

  # SHA-256 hash of the installer for Linux in RPM format.
  rpmHashSha256: String!
}
# The object which permissions assigned to.
type RbacObject {
  # The ID of the object.
  objectId: String!

  # The workload hierarchy of the object.
  workloadHierarchy: WorkloadLevelHierarchy!

  #  The Rubrik cluster ID of the object.
  clusterId: String!
}
# Specifies permissions assigned to the organization.
type RbacPermission {
  # Operations assigned to the organization on newly added object.
  operations: [Operation!]!

  # The object which permissions assigned to.
  rbacObject: RbacObject!
}
# RCS Azure archival locations consumption stats.
type RcsArchivalLocationConsumptionStats {
  # Rubrik Security Cloud archival location ID.
  locationId: String!

  # List of RCS azure archival location ingress stats.
  ingressStats: [RcsArchivalLocationStatsRecord!]!

  # List of RCS azure archival location egress stats.
  egressStats: [RcsArchivalLocationStatsRecord!]!

  # List of RCS azure archival location blob capacity stats.
  blobCapacityStats: [RcsArchivalLocationStatsRecord!]!

  # List of RCS azure archival location forecasted blob capacity stats.
  forecastedBlobCapacityStats: [RcsArchivalLocationStatsRecord!]!
}
# RCS Azure archival locations consumption stats record.
type RcsArchivalLocationStatsRecord {
  # Rubrik Security Cloud archival location ID.
  timestamp: String!

  # Consumption stats metric name.
  metricName: RcsConsumptionMetricOutputNameType!

  # Consumption stats metric value.
  metricValue: Float!

  # RCS archival location tier.
  tier: RcsTierEnumType!
}
# RCS Azure archival locations consumption stats.
type RcsAzureArchivalLocationsConsumptionStatsOutput {
  # List of RCS azure archival location consumption stats.
  rcsAzureConsumptionStats: [RcsArchivalLocationConsumptionStats!]!
}
# Specific info for Rcs Azure Target Template.
type RcsAzureTargetTemplate implements TargetTemplate {
  # Region of RCV location template.
  region: RcsRegionEnumType!

  # Access tier for the RCV location.
  tier: RcsTierEnumType!

  # Immutability setting of the template, that defines thenumber of days for which stored data will be immutable.
  immutabilitySettings: RcsImmutabilitySettings!

  # The type of this Target.
  targetType: TargetType!
}
# Consumption stats metric name for Rubrik Cloud Storage Archival Location.
enum RcsConsumptionMetricNameType {
  # Blob capacity and Forecasted Blob capacity consumption stats for Rubrik Cloud Storage Archival Location.
  BLOB_CAPACITY

  # Egress and ingress capacity consumption stats for Rubrik Cloud Storage Archival Location.
  EGRESS_INGRESS
}
# Consumption stats metric name for Rubrik Cloud Storage Archival Location.
enum RcsConsumptionMetricOutputNameType {
  # Blob capacity consumption stats for Rubrik Cloud Storage Archival Location.
  BLOB_CAPACITY

  # Egress capacity consumption stats for Rubrik Cloud Storage Archival Location.
  EGRESS

  # Forecasted blob capacity consumption stats for Rubrik Cloud Storage Archival Location.
  FORECASTED_BLOB_CAPACITY

  # Ingress capacity consumption stats for Rubrik Cloud Storage Archival Location.
  INGRESS
}
# Input for getting RCS azure archival locations consumption stats.
input RcsConsumptionStatsInput {
  # Input of Rubrik Security Cloud archival location identifiers for getting consumption statistics.
  locationIds: [UUID!]!

  # Input of metric of which consumption stats are required.
  metricName: RcsConsumptionMetricNameType!

  # Input for enable forecasting of consumption stats.
  doForecasting: Boolean
}
# Immutability settings information for RCS Azure Target.
type RcsImmutabilitySettings {
  # Lock duration days defines the number of days for which stored data will be immutable.
  lockDurationDays: Long!
}
# Regions for Rubrik Cloud Storage Archival Location.
enum RcsRegionEnumType {
  # Asia East or Hong Kong.
  ASIA_EAST

  # Asia Southeast or Singapore.
  ASIA_SOUTHEAST

  # Australia East or New South Wales.
  AUSTRALIA_EAST

  # Australia Southeast or Victoria.
  AUSTRALIA_SOUTHEAST

  # Canada East or Quebec City.
  CANADA_EAST

  # Europe north or Netherlands.
  EUROPE_NORTH

  # Europe west or Ireland.
  EUROPE_WEST

  # France Central or Paris.
  FRANCE_CENTRAL

  # Germany West Central or Frankfurt.
  GERMANY_WEST_CENTRAL

  # Gov US Arizona or US Gov Arizona.
  GOV_US_ARIZONA

  # Gov US Virginia or US Gov Virginia.
  GOV_US_VIRGINIA

  # India South or Chennai.
  INDIA_SOUTH

  # Japan East or Tokyo.
  JAPAN_EAST

  # Norway East or Oslo.
  NORWAY_EAST

  # South Africa North or Johannesburg.
  SOUTH_AFRICA_NORTH

  # Sweden Central or Gavle.
  SWEDEN_CENTRAL

  # Switzerland North or Zurich.
  SWITZERLAND_NORTH

  # UAE North or Dubai.
  UAE_NORTH

  # UK South or London.
  UK_SOUTH

  # Rubrik Cloud Vault Azure region is unknown.
  UNKNOWN_AZURE_REGION

  # US central or Iowa.
  US_CENTRAL

  # US east or Virginia.
  US_EAST

  # US east 2 or Virginia.
  US_EAST_2

  # US north central or Illinois.
  US_NORTH_CENTRAL

  # US south central or Texas.
  US_SOUTH_CENTRAL

  # US west or California.
  US_WEST

  # US west 2 or Washington.
  US_WEST_2
}
# Tiers for Rubrik Cloud Vault Archival Location.
enum RcsTierEnumType {
  # Archive tier for Rubrik Cloud Vault Archival Location.
  ARCHIVE

  # Backup tier for Rubrik Cloud Vault Archival Location.
  BACKUP
}
# Rubrik Cloud Vault (RCV) account capacity entitlement.
type RcvAccountEntitlement {
  # Rubrik Cloud Vault (RCV) Backup Tier Entitlement details.
  backupEntitlement: RcvEntitlement

  # Rubrik Cloud Vault (RCV) Archive Tier Entitlement details.
  archiveEntitlement: RcvEntitlement

  # Rubrik Cloud Vault (RCV) Entitlements.
  entitlements: [RcvEntitlementsUsageDetails!]!
}
# Rubrik Cloud Vault (RCV) entitlement tier wise details.
type RcvEntitlement {
  # Rubrik Cloud Vault (RCV) Entitlement capacity in TBs.
  capacity: Float!

  # Rubrik Cloud Vault (RCV) region bundle.
  bundle: RcvRegionBundle!

  # Rubrik Cloud Vault (RCV) Entitlement tier.
  tier: RcvTier!
}
# Rubrik Cloud Vault (RCV) entitlement with expiration date.
type RcvEntitlementWithExpirationDate {
  # Rubrik Cloud Vault (RCV) entitlement capacity in TB.
  capacity: Float!

  # Rubrik Cloud Vault (RCV) entitlement expiration date.
  expirationDate: DateTime

  # Rubrik Cloud Vault (RCV) region bundle.
  bundle: RcvRegionBundle!

  # Rubrik Cloud Vault (RCV) entitlement tier.
  tier: RcvTier!
}
# Rubrik Cloud Vault (RCV) entitlement with order number.
type RcvEntitlementWithOrderNumber {
  # Rubrik Cloud Vault (RCV) entitlement capacity in TB.
  entitlement: RcvEntitlementWithExpirationDate

  # Rubrik Cloud Vault (RCV) entitlement order number.
  orderNumber: String!
}
# Rubrik Cloud Vault (RCV) Entitlement and usage details.
type RcvEntitlementsUsageDetails {
  # Rubrik Cloud Vault (RCV) entitlement.
  entitlement: RcvEntitlement

  # Rubrik Cloud Vault (RCV) entitlement usage.
  usedCapacity: Float!
}
# Rubrik Cloud Vault (RCV) region bundle.
enum RcvRegionBundle {
  # Rubrik Cloud Vault (RCV) Region bundle 1.
  BUNDLE_1

  # Rubrik Cloud Vault (RCV) Region bundle 2.
  BUNDLE_2

  # Rubrik Cloud Vault (RCV) Region bundle for DSAAS.
  DSAAS_BUNDLE
}
# Rubrik Cloud Vault (RCV) Entitlement Tier.
enum RcvTier {
  # Rubrik Cloud Vault (RCV) Archive tier.
  ARCHIVE

  # Rubrik Cloud Vault (RCV) Backup tier.
  BACKUP
}
# RDS DB Instance details from AWS.
type RdsInstanceDetailsFromAws {
  # Amazon Resource Name (ARN) of RDS Instance.
  rdsInstanceArn: String!

  # DB Engine of RDS Instance.
  dbEngine: String!

  # DB class for RDS Instance.
  dbInstanceClass: String!

  # Status of an RDS Instance. Refers to the health of the RDS Instance.
  dbInstanceStatus: String!

  # Allocated size of an RDS Instance.
  allocatedStorageInGb: Long!

  # ID of VPC in AWS.
  vpcId: String!

  # Name of option group of RDS Instance.
  optionGroupName: String!

  # Name of parameter group of RDS Instance.
  dbParameterGroupName: String!

  # Subnet group name of RDS Instance.
  dbSubnetGroupName: String!

  # Maintenance window for the RDS Instance.
  dbMaintenanceWindow: String!

  # Specifies whether RDS is available in multi Availability Zones (AZs). If true, it means it is a multi-AZ RDS Instance.
  isMultiAz: Boolean!

  # Primary Availability Zone (AZ) of RDS Instance.
  primaryAz: String!

  # Retention time for RDS backups.
  backupRetentionPeriod: Long!

  # Input/Output (IO) operation limit per second for RDS Instance.
  iops: Long!

  # RDS DB Instance engine version.
  engineVersion: String!

  # Key Management System (KMS) key ID associated with RDS Instance.
  kmsKeyId: String!

  # Storage type of RDS Instance. Amazon RDS provides four storage types: General Purpose SSD (gp2), General Purpose SSD (gp3), Provisioned IOPS SSD (io1), and magnetic (standard).
  storageType: String!

  # Port used to connect to the RDS Instance.
  port: Long!

  # Version of the database engine.
  dbEngineVersion: String!
}
# RDS Export defaults from AWS.
type RdsInstanceExportDefaults {
  # DB Engine of RDS Instance.
  dbEngine: AwsNativeRdsDbEngine!

  # Version of DB engine.
  dbEngineVersion: String!

  # DB class for RDS Instance.
  dbInstanceClass: AwsNativeRdsDbInstanceClass!

  # DB class for RDS Instance. AWS supported instance classes can be found here https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#Concepts.DBInstanceClass.Types.
  databaseInstanceClass: String!

  # Virtual Private Cloud (VPC) associated with RDS Instance.
  vpcId: String!

  # Allocated size of an RDS Instance.
  allocatedStorageInGb: Long!

  # Key Management System (KMS) key ID associated with RDS Instance.
  kmsKeyId: String!

  # Name of option group of RDS Instance.
  optionGroupName: String!

  # NParameter group name of the RDS Instance.
  dbParameterGroupName: String!

  # Subnet group name of the RDS Instance.
  dbSubnetGroupName: String!

  # Primary Availability Zone (AZ) of RDS Instance.
  primaryAz: String!

  # Storage type of RDS Instance. Amazon RDS provides four storage types: General Purpose SSD (gp2), General Purpose SSD (gp3), Provisioned IOPS SSD (io1), and magnetic (standard).
  storageType: AwsNativeRdsStorageType!

  # Input/Output (IO) operation limit per second for RDS Instance.
  iops: Int!

  # Port used to connect to the RDS Instance.
  port: Long!

  # Specifies whether RDS is available in multi Availability Zones (AZs). If true, it means it is a multi-AZ RDS Instance.
  isMultiAz: Boolean!
}
# Returned in response to a read integration request
# and holds the requested integration.
type ReadIntegrationReply {
  # The requested integration.
  integration: Integration!
}
# Retrieval method for reader archival locations.
enum ReaderRetrievalMethod {
  # Retrieval method that lists workloads as well as snapshots of each workload.
  OBJECT_LIST_AND_DETAILS

  # Retrieval method that lists only workloads.
  OBJECT_LIST_ONLY

  # Unknown retrieval method.
  UNKNOWN_RETRIEVAL_METHOD
}
# Recover a Rubrik Cloud Cluster.
input RecoverCloudClusterInput {
  # Cloud account password.
  adminPassword: String = ""

  # Cloud account email.
  userEmail: String = ""

  # Customer cloud account ID.
  cloudAccountId: UUID!

  # Cluster UUID.
  clusterUuid: UUID!

  # Elastic Storage resource group for Azure account.
  azureEsResourceGroup: String

  # Azure virtual machine configuration.
  azureVmConfig: AzureVmConfig

  # AWS virtual machine configuration.
  awsVmConfig: AwsVmConfig

  # AWS region.
  awsRegion: String

  # Should disable AWS API termination.
  shouldDisableAwsApiTermination: Boolean!

  # Should keep Cloud Cluster on failure.
  shouldKeepClusterOnFailure: Boolean!

  # Array of NTP servers.
  ntpServers: [String!]
}
# Input for recovering Cloud Direct multi-paths.
input RecoverCloudDirectMultiPathsInput {
  # FID of snapshot being restored.
  snapshotFid: UUID!

  # List of restore path pairs. srcPath in NascdRestorePathPairInput should not overlap with each other. All dstPath in restorePathPairList should be the same.
  restorePathPairList: [NascdRestorePathPairInput!]!

  # Export ID of Cloud Direct destination share.
  dstExportId: Int
}
# Input for recovering Cloud Direct path.
input RecoverCloudDirectPathInput {
  # FID of snapshot being restored.
  snapshotFid: UUID!

  # Source path within the snapshot to recover from.
  srcPath: String!

  # Destination path to restore to.
  dstPath: String

  # Export ID of Cloud Direct destination share.
  dstExportId: Int
}
# Input for recovering MongoDB databases and collections.
input RecoverMongoSourceInput {
  # Required. The MongoDB recovery request object containing the collection objects to be recovered from source to the target MongoDB cluster.
  input: MongoRecoveryRequestConfigInput!
}
# Supported in v5.0+
input RecoverOracleDbConfigInput {
  # Supported in v5.3+
  # v5.3: Number of channels used during instant recovery. The default value is decided based on the number of channels used during backups.
  # v6.0+: Number of channels used during instant recovery.
  numChannels: Int

  # Required. Supported in v5.0+
  # Snapshot ID or timestamp for which the export is done.
  recoveryPoint: OracleRecoveryPointInput!
}
# Range to recover a snapshot from for a given VM
type RecoverableRange {
  beginTime: String
  endTime: String
}
# Represents the recoverable range input.
input RecoverableRangeInput {
  # UUID of the MongoDB source.
  source: UUID!

  # UUID of the databases.
  databases: [UUID!]

  # UUID of the collections.
  collections: [UUID!]
}
# Recoverable ranges for a given VM
type RecoverableRangeResponse {
  hasMore: Boolean
  data: [RecoverableRange!]!
  total: Long
}
type RecoveryTaskDetailsTableFilter {
  cluster_type: [FilterOption!]!
  cluster_location: [FilterOption!]!
  task_category: [FilterOption!]!
  task_type: [FilterOption!]!
  status: [FilterOption!]!
  object_type: [FilterOption!]!
  replication_source: [FilterOption!]!
}
# Input for refreshing a Db2 database.
input RefreshDb2DatabaseInput {
  # Required. ID of the Db2 database.
  id: String!
}
# Input for refreshing an Active Directory domain.
input RefreshDomainInput {
  # Required. ID of the domain.
  id: String!
}
# Refresh the connection to the host.
input RefreshHostInput {
  # Required. ID assigned to a host object.
  id: String!
}
# Reply Object for RefreshHost.
type RefreshHostReply {
  output: HostDetail
}
# Input parameters for refreshing Hyper-V SCVMM.
input RefreshHypervScvmmInput {
  # ID of the Hyper-V SCVMM.
  id: String!
}
# Input for refreshing the metadata for the specified Hyper-V host.
input RefreshHypervServerInput {
  # Required. ID of the Hyper-V host.
  id: String!
}
# Configuration of the Kubernetes cluster to refresh.
input RefreshK8sClusterInput {
  # The ID of the Kubernetes cluster to refresh.
  k8sClusterId: UUID!
}
# Input to start auto-discovery jobs on multiple NAS systems.
input RefreshNasSystemsInput {
  # Required. IDs of the NAS systems to rediscover.
  discoverNasSystemRequest: DiscoverNasSystemRequestInput!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Status of auto discover jobs for NAS systems.
type RefreshNasSystemsReply {
  # Required. Supported in v7.0+
  # v7.0-v8.0: An array of discover NAS system summaries.
  # v8.1+: An array of summaries of discovered NAS systems.
  discoverNasSystemSummaries: [DiscoverNasSystemSummary!]!
}
# Input for refreshing a Nutanix cluster.
input RefreshNutanixClusterInput {
  # Required. ID of the Nutanix cluster.
  id: String!
}
# Input for refreshing a Nutanix Prism Central.
input RefreshNutanixPrismCentralInput {
  # Required. ID of the Nutanix Prism Central.
  id: String!
}
input RefreshOracleDatabaseInput {
  # Required. ID of the Oracle database.
  id: String!
}
# Input for refreshing reader archival location.
input RefreshReaderTargetInput {
  # List of workload IDs on the reader Rubrik cluster. This list should be empty for full refresh.
  localDataSourceIds: [String!] = []

  # List of workload IDs on the original Rubrik cluster. This list should be empty for full refresh.
  archivalDataSourceIds: [String!] = []

  # ID of the reader archival location to be refreshed. We cannot use this field with externalLocationId.
  locationId: String

  # Rubrik CDM ID of the reader archival location to be refreshed. We need to pass clusterId with externalLocationId. We cannot use this field with locationId.
  externalLocationId: String

  # ID of the Rubrik cluster on which the reader archival location to be refreshed is created.
  clusterId: String
}
# Refresh Storage arrays.
input RefreshStorageArraysInput {
  # Required. List of Storage arrays to refresh.
  inputs: [StorageArrayInput!]!
}
# Responses of operations to refresh storage arrays in Rubrik clusters.
type RefreshStorageArraysReply {
  # Refresh storage arrays responses.
  responses: [StorageArrayOperationOutputType!]!
}
# Refresh Vcenter.
input RefreshVsphereVcenterInput {
  # Fid of vcenter.
  fid: UUID!

  # Specifies whether to run diagnostics. Default value is False.
  shouldDiagnose: Boolean = false
}
# Supported in v5.0+
type RefreshableObjectConnectionStatus {
  # Supported in v5.0+
  # Details about the object status. Will be populated if the status is "BadlyConfigured".
  message: String

  # Supported in v5.0+
  # Status of the refreshable object.
  status: RefreshableObjectConnectionStatusType!
}
# Supported in v5.0+
# Status of the refreshable object. Possible values are "Disconnected" (no communication possible with object), "Refreshing" (able to communicate with object but has not refreshed yet), "Connected" (refreshed the metadata for the object), "BadlyConfigured" (object not configured correctly), "Deleting" (in process of removing the object), and "Remote" (replicated object that we should not connect to).
enum RefreshableObjectConnectionStatusType {
  REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_BADLY_CONFIGURED
  REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_CONNECTED
  REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_DELETING
  REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_DISCONNECTED
  REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_REFRESHING
  REFRESHABLE_OBJECT_CONNECTION_STATUS_TYPE_REMOTE
}
type Region {
  id: String!
  name: String!
  displayName: String!
}
# Paginated list of Region objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type RegionConnection {
  # List of Region objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [RegionEdge!]!

  # List of Region objects.
  nodes: [Region!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Region objects matching the request arguments.
  count: Int!
}
# Wrapper around the Region object. This wrapper is used for pagination.
type RegionEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Region object wrapped by this edge.
  node: Region!
}
# Required. Input for registering Rubrik Backup Service in a Hyper-V virtual machine.
input RegisterAgentHypervVirtualMachineInput {
  # Required. ID of the Virtual Machine.
  id: String!
}
# Input for registering the agent installed on the Nutanix virtual machine.
input RegisterAgentNutanixVmInput {
  # Required. ID of the Virtual Machine.
  id: String!
}
# Input to register external artifacts for AWS account.
input RegisterAwsFeatureArtifactsInput {
  # List of external Artifacts and features to be registered for AWS native account.
  awsArtifacts: [AwsAccountFeatureArtifact!]!

  # Cloud type (Standard/China) for the cloud account.
  cloudType: AwsCloudType = STANDARD
}
# Reply for registering AWS account external artifacts.
type RegisterAwsFeatureArtifactsReply {
  # List of AWS native ID to RSC account ID mapping.
  allAwsNativeIdtoRscIdMappings: [AwsRscAccountDetails!]!
}
# Input for cloud cluster registration.
input RegisterCloudClusterInput {
  # Cluster UUID.
  clusterUuid: String = ""
}
# Response from cloud cluster registration.
type RegisterCloudClusterReply {
  # True or false.
  isSuccessful: Boolean!

  # Error message if any error occurred else empty.
  error: String!
}
# Required. Input for register Hyper-V SCVMM.
input RegisterHypervScvmmInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Registration definition for a Hyper-V SCVMM.
  scvmm: HypervScvmmRegisterInput!
}
# Input for registering a new NAS System.
input RegisterNasSystemInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Registration definition for a NAS system. This contains parameters needed to protect the NAS system such as a hostname or the cluster management IP address, and login credentials to access the system.
  nasSystem: NasSystemRegisterInput!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Response for register NAS system operation.
type RegisterNasSystemReply {
  # Required. Supported in v7.0+
  # A summary of the NAS system being registered.
  nasSystemSummary: UpdateNasSystemReply

  # Required. Supported in v7.0+
  # The asynchronous request status of the job that registers the NAS system.
  nasDiscoverJobStatus: AsyncRequestStatus
}
# Registered mode.
enum RegisteredMode {
  # Hybrid.
  REGISTERED_MODE_ENUM_HYBRID

  # Legacy.
  REGISTERED_MODE_ENUM_LEGACY

  # Life of device.
  REGISTERED_MODE_ENUM_LIFE_OF_DEVICE

  # Not registered.
  REGISTERED_MODE_ENUM_NOT_REGISTERED

  # Registered mode unknown.
  REGISTERED_MODE_ENUM_UNSPECIFIED
}
# A snippet of the related help topic.
type RelatedContent {
  # ID of the related help topic.
  id: String!

  # Type of the related help topic.
  type: ProductDocumentationType!

  # Title of the related help topic.
  title: String!

  # Summary of the related help topic.
  description: String!

  # URL pointing to the related help topic.
  link: URL
}
# IDs of the object related to the Azure AD object.
type RelatedObjectIdsType {
  # IDs of the object related to the Azure AD object.
  ids: [String!]!
}
# An relative monthly recurrence pattern (e.g. Second Thursday or Friday of every other month).
type RelativeMonthlyRecurrencePattern {
  # The interval at which the recurrence applies.
  interval: Int!

  # Which days of the week the event occurs.
  daysOfWeek: [String!]!

  # E.g. first, second, third.
  dayOfWeekIndex: String!
}
# A relative range of time.
type RelativeTimeRange {
  # Unit of the time range
  unit: TimeUnitEnum!

  # Number of units in the time range.
  magnitude: Int!
}
input RelativeTimeRangeInput {
  magnitude: Int!
  unit: TimeUnitEnum!
}
# A relative yearly recurrence pattern (e.g. First Tuesday of November).
type RelativeYearlyRecurrencePattern {
  # Which days of the week the event occurs.
  daysOfWeek: [String!]!

  # E.g. first, second, third.
  dayOfWeekIndex: String!

  # The month to which the recurrence applies.
  month: String!
}
# Filter to return objects which are relic or not.
input RelicFilter {
  relic: Boolean!
}
# Supported in v5.0+
input RelocateMountConfigInput {
  # Required. Supported in v5.0+
  # The ID of the datastore that is the target of relocation.
  datastoreId: String!
}
# Supported in Rubrik CDM version 9.0 and later.
input RelocateMountConfigV2Input {
  # Supported in v8.1+
  # List of mappings between disk device keys and storage IDs. If the list is not defined or emtpy, the storageLocationId is the location where all virtual disks are migrated. When this mapping is provided, each Live-mounted virtual disk must be mapped to a valid storage location, either a datastore or a datastore cluster. An incomplete or invalid mapping will result in the failure of the relocation operation.
  diskDeviceKeyToStorageId: [VmwareStorageIdWithDeviceKeyV2Input!] = []

  # Supported in v8.1+
  # The ID of the datastore or datastore cluster that is the target of relocation.
  storageLocationId: String

  # Supported in v9.0+
  # ID of the compute cluster to relocate the new virtual machine to.
  computeClusterId: String

  # Supported in v9.0+
  # ID of the ESXi host to relocate the new virtual machine to. Include if the target host is different from the mounted host.
  hostId: String

  # Supported in v9.0+
  # List of mappings between network device keys and network names.
  networkDeviceKeyToNetworkName: [VmwareDeviceKeywithNetworkNameV2Input!] = []

  # Supported in v9.0+
  # ID of the resource pool where the new virtual machine will be mounted.
  resourcePoolId: String
}
# Request parameters for removing nodes from a cluster.
input RemoveClusterNodesInput {
  # List of node IDs to be removed.
  nodeIds: [String!] = []

  # Use quick drain instead of full data drain (not recommended).
  useQuickDrain: Boolean = false

  # Cluster UUID.
  clusterUuid: UUID!

  # Metadata for the nodes.
  nodeMetadata: [NodeMetadataInput!]
}
input RemoveDiskInput {
  # Required. ID of a missing disk to mark removed.
  diskId: String!

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Inventory workloads to remove from an account.
input RemoveInventoryWorkloadsInput {
  # List of Inventory Cards.
  inventoryCards: [InventoryCard!]!
}
# Input for removing private endpoint connection to RCV location.
input RemovePrivateEndpointConnectionInput {
  # Field for specifying location identifier of the target.
  locationId: UUID!

  # Field for specifying the Azure resource identifier for an RCV private endpoint.
  privateEndpointId: String!
}
input RemoveProxyConfigInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Input for deleting VLAN(s) of a cluster.
input RemoveVlansInput {
  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!

  # Required. VLAN.
  vlanIds: [Int!]!
}
# Response from cluster delete vlans.
type RemoveVlansReply {
  # VLAN ID(s) that deleted successfully.
  successVlanIds: [Int!]!

  # VLAN ID(s) that failed to be deleted.
  failureVlanIds: [Int!]!
}
# Information about Kubernetes Replicated Snapshots.
type ReplicatedSnapshotInfo {
  # ID to uniquely identify the snapshot.
  snapshotId: String!

  # ID of the workload to which the snapshot belongs.
  snappableId: String!

  # Time the snapshot was created.
  date: DateTime!

  # Time the snapshot expires.
  expirationDate: DateTime

  # CDM cluster associated with the snapshot.
  associatedCdm: Cluster
}
# Request to get Incoming Replication Bandwidth for a Rubrik cluster.
input ReplicationBandwidthIncomingInput {
  # Range for time series. For example: -1h, -1min, etc. Default value is -1h.
  range: String

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Request to get Outgoing Replication Bandwidth for a Rubrik cluster.
input ReplicationBandwidthOutgoingInput {
  # Range for time series. For example: -1h, -1min, etc. Default value is -1h.
  range: String

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Rubrik cluster details.
type ReplicationCluster {
  # Rubrik cluster name.
  name: String!

  # Rubrik cluster uuid.
  id: String!

  # Rubrik cluster version.
  version: String!

  # Specifies whether the Rubrik cluster is cross-account.
  isCrossAccount: Boolean!

  # The account name that the Rubrik cluster is associated with.
  accountName: String!
}
# Gateway information for a Rubrik cluster.
input ReplicationGatewayInfo {
  # Gateway IPv4 address.
  address: String!

  # Gateway ports.
  ports: [Int!]!
}
# The type of network interface: Management or Data.
enum ReplicationInterfaceType {
  # Data interface type.
  DATA

  # Unspecified value.
  INTERFACE_TYPE_UNSPECIFIED

  # Management interface type.
  MANAGEMENT
}
# Replication pair specific information.
type ReplicationPair {
  # Storage (in bytes) consumed on target cluster by replicated snapshots.
  storage: Long!

  # Connection status of the replication pair (active, disconnected, or paused).
  status: ReplicationPairConnectionStatus!

  # Represents replication pair pause enablement status.
  isPaused: Boolean!

  # Network throttle details for source Rubrik cluster.
  networkThrottle: NetworkThrottle

  # Configuration details about the replication pair of Rubrik clusters.
  configDetails: ReplicationPairConfigDetails

  # Running replication task count.
  runningTasks: Long

  # Failed replication task count in last 24 hours.
  failedTasks: Long

  # Source Rubrik cluster details.
  sourceCluster: ReplicationCluster!

  # Target Rubrik cluster details.
  targetCluster: ReplicationCluster!

  # Additional information about the connection status of the replication pair Rubrik clusters.
  connectionDetails: ConnectionStatusDetails!
}
# Configuration details about the replication pair of Rubrik clusters.
type ReplicationPairConfigDetails {
  # Denotes private IP or NAT configuration.
  setupType: String!

  # Source Rubrik cluster gateway information.
  sourceGateway: GatewayInfo

  # Target Rubrik cluster gateway information.
  targetGateway: GatewayInfo
}
# Paginated list of ReplicationPair objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ReplicationPairConnection {
  # List of ReplicationPair objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ReplicationPairEdge!]!

  # List of ReplicationPair objects.
  nodes: [ReplicationPair!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ReplicationPair objects matching the request arguments.
  count: Int!
}
# Connection status of the replication pair.
enum ReplicationPairConnectionStatus {
  # Rubrik clusters are connected and replication is unpaused.
  REPLICATION_ACTIVE

  # Rubrik clusters are disconnected from each other.
  REPLICATION_DISCONNECTED

  # Replication is paused between the Rubrik clusters.
  REPLICATION_PAUSED
}
# Wrapper around the ReplicationPair object. This wrapper is used for pagination.
type ReplicationPairEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ReplicationPair object wrapped by this edge.
  node: ReplicationPair!
}
# Filter for replication pairs request.
input ReplicationPairsQueryFilter {
  # Rubrik cluster name.
  clusterName: String = ""

  # Source Rubrik cluster uuids.
  sourceClusterUuids: [String!] = []

  # Target Rubrik cluster uuids.
  targetClusterUuids: [String!] = []

  # Connection status of the replication pair.
  status: [ReplicationPairConnectionStatus!] = []
}
# Field to sort by for replication pairs.
enum ReplicationPairsQuerySortByField {
  # Active network throttle limit for source Rubrik Cluster.
  CURRENT_THROTTLE_LIMIT

  # Failed replication task count.
  FAILED_TASKS

  # Running replication task count.
  RUNNING_TASKS

  # Source Rubrik cluster name.
  SOURCE_CLUSTER_NAME

  # Connection status of the replication pair.
  STATUS

  # Storage consumed by replicated snapshots.
  STORAGE

  # Target Rubrik cluster name.
  TARGET_CLUSTER_NAME
}
# Replication setup type.
enum ReplicationSetupType {
  # Rubrik clusters connected using gateway configurations.
  NAT

  # Rubrik clusters connected using private IP addresses.
  PRIVATE

  # Unspecified default value.
  REPLICATION_SETUP_TYPE_UNSPECIFIED
}
# Replication source for a given replication target.
type ReplicationSource {
  # UUID of the cluster.
  id: String!

  # UUID of the source cluster.
  sourceClusterUuid: UUID!

  # Name of the source cluster.
  sourceClusterName: String!

  # IP address of the source cluster.
  sourceClusterAddress: String

  # Total replicated storage on the target cluster from the source cluster.
  totalStorage: Long
}
# Replication specification.
type ReplicationSpec {
  # Type of replication.
  replicationType: ReplicationType!

  # Specific replication specification for the type.
  specificReplicationSpec: SpecificReplicationSpec
}
# Replication specification.
input ReplicationSpecInput {
  # Type of replication.
  replicationType: ReplicationType = UNKNOWN_REPLICATION_TYPE

  # Specific replication specification for the type.
  specificReplicationSpecInput: SpecificReplicationSpecInput
}
# Replication specification.
type ReplicationSpecV2 {
  # Retention duration.
  retentionDuration: Duration

  # Time snapshot is kept on local target cluster.
  replicationLocalRetentionDuration: Duration

  # Cascading Archival Specifications.
  cascadingArchivalSpecs: [CascadingArchivalSpec!]!

  # Replication target mapping.
  targetMapping: TargetMapping

  # Rubrik cluster used as the replication target.
  cluster: SlaReplicationCluster

  # AWS region.
  awsRegion: String!

  # Azure Region.
  azureRegion: String!

  # AWS location used as the replication target.
  awsTarget: AwsReplicationTarget!

  # Azure location used as the replication target.
  azureTarget: AzureReplicationTarget!
}
# Replication specification.
input ReplicationSpecV2Input {
  # Cluster UUID.
  clusterUuid: String = ""

  # Storage setting ID.
  storageSettingId: String = ""

  # Retention duration.
  retentionDuration: SlaDurationInput

  # AWS account.
  awsAccount: String = ""

  # Azure subscription.
  azureSubscription: String = ""

  # Time snapshot is kept on local target cluster.
  replicationLocalRetentionDuration: SlaDurationInput

  # Cascading Archival Specifications.
  cascadingArchivalSpecs: [CascadingArchivalSpecInput!] = []

  # AWS region.
  awsRegion: AwsNativeRegionForReplication

  # Azure region.
  azureRegion: AzureNativeRegionForReplication
}
# Replication target for a given replication source.
type ReplicationTarget {
  # UUID of the cluster.
  id: String!

  # UUID of the target cluster.
  targetClusterUuid: UUID!

  # Name of the target cluster.
  targetClusterName: String!

  # IP address of the target cluster.
  targetClusterAddress: String

  # Total replicated storage on the target cluster from the source cluster.
  totalStorage: Long
}
# Replication to cloud location specification.
type ReplicationToCloudLocationSpec {
  # Retention duration.
  retentionDuration: Duration

  # Replication target mapping.
  targetMapping: TargetMapping
}
# Replication to cloud location specification.
input ReplicationToCloudLocationSpecInput {
  # Replication target ID.
  replicationTargetId: String = ""

  # Cloud provider.
  cloudProvider: CloudProvider = AWS

  # Retention duration.
  retentionDuration: SlaDurationInput
}
# Replication to cloud region specification.
type ReplicationToCloudRegionSpec {
  # Replication target region.
  replicationTargetRegion: String!

  # Replication cloud provider.
  cloudProvider: CloudProvider!

  # Retention period on replication region.
  retention: Int!

  # Unit of retention period.
  retentionUnit: RetentionUnit!
}
# Replication to cloud region specification.
input ReplicationToCloudRegionSpecInput {
  # Replication target region.
  replicationTargetRegion: String = ""

  # Replication cloud provider.
  cloudProvider: CloudProvider = AWS

  # Retention period on replication region.
  retention: Int = 0

  # Unit of retention period.
  retentionUnit: RetentionUnit = MINUTES
}
# Type of replication.
enum ReplicationType {
  # Replication to cloud location.
  REPLICATION_TO_CLOUD_LOCATION

  # Replication to the cloud region.
  REPLICATION_TO_CLOUD_REGION

  # Unidirectional replication to the Rubrik CDM cluster.
  UNIDIRECTIONAL_REPLICATION_TO_CLUSTER

  # Replication type unknown.
  UNKNOWN_REPLICATION_TYPE
}
# ReportAttachmentType defines the attachment type for report emails.
enum ReportAttachmentType {
  # CSV attachment type for report emails.
  REPORT_ATTACHMENT_TYPE_CSV

  # PDF attachment type for report emails.
  REPORT_ATTACHMENT_TYPE_PDF

  # Unspecified attachment type.
  REPORT_ATTACHMENT_TYPE_UNSPECIFIED
}
# Create configs for a snappable data chart.
input ReportChartCreate {
  # The name of the chart.
  name: String!

  # The metrics focus of the chart.
  focus: ReportFocusEnum!
  groupBy: [GroupByFieldEnum!]
}
# All the possible chart types.
union ReportChartType = SnappableChart | ActivityChart | InfrastructureChart | AnomalyChart | FailoverChart | UserAuditChart | TaskDetailChart | TaskSummaryChart | SonarReportChart | SonarContentReportChart
input ReportFilterInput {
  name: String!

  # Values are JSON serialized string of the original value.
  values: [String]!
}
enum ReportFocusEnum {
  Activity
  Anomaly
  Audit
  Capacity
  Compliance
  Failover
  Infrastructure
  Protection
  ProtectionTaskDetail
  RecoveryTaskDetail
  Sonar
  SonarContent
  TaskSummary
}
# Migration details of the Rubrik cluster report.
type ReportMigrationStatus {
  # Report ID on the Rubrik cluster.
  reportId: String!

  # Report name.
  reportName: String!

  # Report template.
  reportTemplate: ReportTemplate!

  # Migration status of the report.
  status: CdmReportMigrationStatus!

  # JSON string that captures the migration details, if any.
  details: String!

  # Rubrik cluster of the report.
  cluster: Cluster

  # The corresponding report ID on RSC after migration.
  rscReportId: Long!
}
# Paginated list of ReportMigrationStatus objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ReportMigrationStatusConnection {
  # List of ReportMigrationStatus objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ReportMigrationStatusEdge!]!

  # List of ReportMigrationStatus objects.
  nodes: [ReportMigrationStatus!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ReportMigrationStatus objects matching the request arguments.
  count: Int!
}
# The count of each report migration status.
type ReportMigrationStatusCountItem {
  # Migration status of the report.
  status: CdmReportMigrationStatus!

  # Count of Rubrik cluster reports for the corresponding migration status.
  count: Int!
}
# Wrapper around the ReportMigrationStatus object. This wrapper is used for pagination.
type ReportMigrationStatusEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ReportMigrationStatus object wrapped by this edge.
  node: ReportMigrationStatus!
}
enum ReportTableColumnEnum {
  ActivityStatus
  ActivityType
  AnalyzersBreakdown
  AppBlueprintName
  ArchivalTarget
  ArchiveSnapshots
  ArchiveStorage
  BytesCreated
  BytesDeleted
  BytesModified
  BytesNetChanged
  Cluster
  ClusterLocation
  ClusterName
  ClusterType
  ComplianceStatus
  DataReduction
  DataTransferred
  DirectArchive
  Duration
  EncryptionEnabled
  EndDate
  EndTime
  FailoverStatus
  FailoverType
  FailureReason
  FileName
  FilesCreated
  FilesDeleted
  FilesModified
  IsAnomaly
  LastSnapshot
  LastTestStatus
  LastTestTime
  LastUpdated
  LocalSnapshots
  Location
  LogicalByte
  LogicalBytes
  MissedSnapshots
  NumCoveredObjects
  NumHighRiskLocations
  NumOfCanceled
  NumOfExpected
  NumOfFailed
  NumOfSucceeded
  NumViolatedFiles
  NumViolations
  ObjectName
  ObjectType
  Path
  PhysicalBytes
  PoliciesBreakdown
  PolicyName
  PolicyStatus
  PreviousSnapshotDate
  PreviousSnapshotId
  ProtectedVolume
  RecoveryPoint
  RecoveryPointType
  ReplicaSnapshots
  ReplicaStorage
  ReplicationSource
  ReplicationTarget
  Size
  SlaDomain
  SlaDomainName
  SnappableName
  SnapshotConsistency
  SnapshotDate
  SnapshotId
  SnapshotTime
  Source
  StartDate
  StartTime
  Status
  SuspiciousFilesAdded
  TargetSite
  TaskType
  TotalCapacity
  TotalFileTransferred
  TotalHits
  TotalSnapshots
  TransferredBytes
  UsedCapacity
  UserAuditStatus
  UserAuditType
  UserName
  WorkloadName
  WorkloadType
}
# Create configs for an activity data table.
input ReportTableCreate {
  # The name of the table.
  name: String!
  focus: ReportFocusEnum!
  groupBy: [GroupByFieldEnum!]
  selectedColumns: [ReportTableColumnEnum!]!
  sortBy: SortByFieldEnum

  # The data sorting order for the table, ASC or DESC.
  sortOrder: SortOrder
}
# All the possible table types.
union ReportTableType = SnappableTable | ActivityTable | InfrastructureTable | AnomalyTable | FailoverTable | UserAuditTable | TaskDetailTable | TaskSummaryTable | SonarReportTable | SonarContentReportTable
# The enum describes the template of CDM report.
enum ReportTemplate {
  # Capacity over time report template.
  CAPACITY_OVER_TIME

  # Object indexing summary report template.
  OBJECT_INDEXING_SUMMARY

  # Object protection summary report template.
  OBJECT_PROTECTION_SUMMARY

  # Object task summary report template.
  OBJECT_TASK_SUMMARY

  # Protection tasks details report template.
  PROTECTION_TASKS_DETAILS

  # Protection tasks summary report template.
  PROTECTION_TASKS_SUMMARY

  # Recovery tasks details report template.
  RECOVERY_TASKS_DETAILS

  # SLA compliance summary report template.
  SLA_COMPLIANCE_SUMMARY

  # System capacity report template.
  SYSTEM_CAPACITY

  # Unknown template.
  TEMPLATE_UNSPECIFIED
}
# The result containing the report count according to migration status.
type ReportsMigrationCount {
  # Report count according to migration status.
  counts: [ReportMigrationStatusCountItem!]!
}
# Supported in v5.0+
type RequestErrorInfo {
  # Required. Supported in v5.0+
  # v5.0: The error message for failed ids.
  # v5.1+: The error message for failed IDs.
  message: String!
}
type RequestStatus {
  success: Boolean!
}
# Empty request type.
type RequestSuccess {
  # Specifies whether the request is successful.
  success: Boolean!
}
# Supported in v6.0+
type RequestedMatchDetails {
  requestedHashTypes: [HashType!]
}
# Supported in v6.0+
input RequestedMatchDetailsInput {
  # Supported in v6.0+
  # Hash algorithm to be calculated for files with malware matches.
  requestedHashTypes: [HashType!]
}
# Supported in v5.1+
input RequiredRecoveryParametersInput {
  # Supported in v5.1+
  # Point in time to recover to.
  recoveryPoint: DateTime

  # Supported in v5.1+
  # ID of the snapshot to recover.
  snapshotId: String
}
# Input for reseeding a SQL Server log shipping secondary.
input ReseedLogShippingSecondaryInput {
  # Required. Configuration parameters for the reseed operation.
  config: MssqlLogShippingReseedConfigInput!

  # Required. ID of the log shipping configuration object for the specified secondary database.
  id: String!
}
# Specifies the input used to reset passwords for selected users in the organization.
input ResetUsersPasswordsWithUserIdsInput {
  # Required. Specifies the IDs of the users whose password is being reset.
  userIds: [String!]!
}
# Input for resizing a disk.
input ResizeDiskInput {
  # Required. ID of an existing disk to resize.
  diskId: String!

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Input for resizing a Managed Volume.
input ResizeManagedVolumeInput {
  # Required. ID of managed volume.
  id: String!

  # Required. New size of the managed volume in bytes.
  size: ManagedVolumeResizeInput!
}
enum ResolutionType {
  RESOLVED_AD
  RESOLVED_ON_HOST
  UNRESOLVED
  WELL_KNOWN
}
input ResolveVolumeGroupsConflictInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the Microsoft Exchange server.
  id: String!
}
type ResourceGroup {
  id: String!
  name: String!
}
# Paginated list of ResourceGroup objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ResourceGroupConnection {
  # List of ResourceGroup objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ResourceGroupEdge!]!

  # List of ResourceGroup objects.
  nodes: [ResourceGroup!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ResourceGroup objects matching the request arguments.
  count: Int!
}
# Wrapper around the ResourceGroup object. This wrapper is used for pagination.
type ResourceGroupEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ResourceGroup object wrapped by this edge.
  node: ResourceGroup!
}
input ResourceInput {
  snappableFid: String = ""
  snapshotFid: String = ""
}
# Empty response type.
type ResponseSuccess {
  # Indicates whether the request returned successfully.
  success: Boolean!
}
# Input for restoring the active directory objects.
input RestoreActiveDirectoryObjectsInput {
  # Required. Configuration for the object recovery.
  config: ActiveDirectoryObjectRecoveryConfigInput!

  # Required. Snapshot ID to be used for recovering objects.
  id: String!
}
# Configuration to initiate recovery of AzureAdDirectory with multiple passwords.
input RestoreAzureAdObjectsWithPasswordsInput {
  # Workload Fid of the Azure AD Directory to recover.
  workloadFid: UUID!

  # Snapshot FID of the Azure AD directory snapshot from which to recover.
  snapshotFid: UUID!

  # Map of user IDs to password.
  passwordByUserIdMap: [PasswordByUserId!]!

  # Map of azureAdObjectType to object IDs.
  objectTypeToIdMap: [ObjectInfoType!]!

  # Specifies whether to enable MFA during the recovery of one or more users.
  forceChangePasswordWithMfa: Boolean!
}
# Response of the Scheduled OnDemand Restore job.
type RestoreAzureAdObjectsWithPasswordsReply {
  # Job ID of the restore job.
  jobId: Long!

  # Taskchain ID of the restore job taskchain.
  taskchainId: UUID!
}
input RestoreConfig {
  restoreFilesConfig: [RestoreFileConfig!] = []
  domainName: String = ""
  username: String = ""
  password: String = ""
  shouldIgnoreErrors: Boolean = false
  shouldSaveCredentials: Boolean = false
  shouldUseAgent: Boolean
  shouldRestoreXAttrs: Boolean
  deltaTypeFilter: [DeltaType!] = []
  nextSnapshotFid: String = ""
}
# Input for RestoreDomainControllerSnapshotInput.
input RestoreDomainControllerSnapshotInput {
  # Required. Configuration for the restore job.
  config: ActiveDirectoryRestoreConfigInput!
}
input RestoreFileConfig {
  path: String = ""
  restorePath: String = ""
}
# Supported in v5.0+
input RestoreFilesJobConfigInput {
  # Supported in v5.0+
  # Domain name (Use . for local admin).
  domainName: String

  # Supported in v5.0+
  # v5.0: Optional field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. Default value is false, errors are not ignored.
  # v5.1-v7.0: Optional Boolean field to determine whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. Default value is 'false', errors are not ignored.
  # v8.0+: Optional Boolean field specifying whether to ignore errors during restore jobs that use the Rubrik Backup Service. When 'true', errors are ignored. When 'false', errors are not ignored. The default value is 'false'.
  ignoreErrors: Boolean

  # Supported in v5.0+
  # Password.
  password: String

  # Supported in v5.0+
  # v5.0: Whether we should save the user-entered credentials
  # v5.1-v7.0: A Boolean value that specifies whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.
  # v8.0+: Boolean value specifying whether to save the user-entered credentials. When 'true', the user-entered credentials are saved.
  shouldSaveCredentials: Boolean

  # Supported in v5.0+
  # Username.
  username: String

  # Supported in v5.1+
  # Managed ID of the destination object that the files should be recovered to.
  destObjectId: String

  # Supported in v5.1+
  # v5.1-v7.0: Boolean value that determines restore file settings for Linux systems and for Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Windows, use 'true' to include alternate data streams for restored files. For both, use 'false' to exclude this additional metadata.
  # v8.0+: Boolean value specifying the restore file settings for Linux and Windows systems. For Linux, use 'true' to include the extended attributes of restored files. For Windows, use 'true' to include alternate data streams for restored files. For both systems, use 'false' to exclude this additional metadata.
  shouldRestoreXAttrs: Boolean

  # Supported in v5.1+
  # v5.1-v7.0: A Boolean that specifies whether to use the Rubrik Backup Service or VMware tools to restore files. When 'true', the RBS restores files. When 'false',the VMware tools restores files.
  # v8.0+: Boolean field specifying whether to use the Rubrik Backup Service or VMware tools to restore files. When 'true', the RBS restores files. When 'false',the VMware tools restores files.
  shouldUseAgent: Boolean

  # Supported in v7.0+
  # v7.0: ID of the guest OS credential that should be used for authentication when restoring files through the VMware tools. When this ID is specified, the 'domainName', 'username', 'password', and 'shouldSaveCredentials' fields will be ignored.
  # v8.0+: ID of the guest OS credential used for authentication when restoring files through the VMware tools. When this ID is specified, the 'domainName', 'username', 'password', and 'shouldSaveCredentials' fields are ignored.
  guestCredentialId: String

  # Supported in v9.1+
  # Boolean field specifying whether to mount disks during restore jobs. When the value is 'true', the VMDK disks of the snapshot are mounted on the target VM for recovering the files and the parameter 'shouldUseAgent' is ignored. When the value is 'false', RSC may or may not use agent.
  shouldUseMountDisks: Boolean

  # Required. Supported in v5.0+
  # v5.0-v5.3: Absolute file path and restore path if not restored back to itself
  # v6.0-v7.0: Absolute file path and restore path if not restored back to itself.
  # v8.0+: Absolute file path and restore path if the object is not restored back to itself.
  restoreConfig: [VmRestorePathPairInput!]!
}
# Input for restoring files from Nutanix snapshot.
input RestoreFilesNutanixSnapshotInput {
  # Required. Configuration for a job to restore files to a source Nutanix virtual machine.
  config: NutanixRestoreFilesConfigInput!

  # Required. ID of snapshot.
  id: String!
}
# Supported in v7.0+
type RestoreFormArchivalProxyConfig {
  # Supported in v7.0+
  # Hostname or IP address of the proxy server.
  proxyServer: String
}
# Supported in v7.0+
type RestoreFormComputeProxyConfig {
  # Supported in v7.0+
  # Hostname or IP address of the proxy server.
  proxyServer: String
}
# Supported in v7.0+
type RestoreFormConfigurationGuestOs {
  # Supported in v7.0+
  # Guest OS Domain.
  domain: String

  # Required. Supported in v7.0+
  # Username of guest OS.
  username: String!
}
# Supported in v7.0+
type RestoreFormConfigurationKmipServer {
  # Required. Supported in v7.0+
  # Address of KMIP server.
  serverAddress: String!
}
# Supported in v7.0+
type RestoreFormConfigurationLdapServer {
  # Required. Supported in v7.0+
  # Name of LDAP server.
  name: String!
}
# Supported in v7.0+
type RestoreFormConfigurationNasHost {
  # Required. Supported in v7.0+
  # Hostname of NAS host.
  hostname: String!
}
# Supported in v7.0+
type RestoreFormConfigurationObjectStoreArchivalLocation {
  # Required. Supported in v7.0+
  # Name of archival location.
  name: String!

  # Supported in v8.0+
  # Name of the bucket.
  bucket: String

  # Supported in v8.0+
  # Method used to encrypt archival location.
  encryptionType: String

  # Supported in v8.0+
  # Endpoint for the archival location.
  endpoint: String

  # Supported in v8.0+
  # Number of buckets.
  numBuckets: Long
}
# Supported in v7.0+
type RestoreFormConfigurationOrganization {
  # Required. Supported in v7.0+
  # Name of organization.
  name: String!
}
# Supported in v7.0+
type RestoreFormConfigurationReplicationTarget {
  # Required. Supported in v7.0+
  # Address of replication target cluster.
  targetClusterAddress: String!

  # Supported in v8.1+
  # Name of the replication target cluster.
  targetClusterName: String
}
# Supported in v7.0+
type RestoreFormConfigurationReport {
  # Required. Supported in v7.0+
  # Name of report.
  name: String!
}
# Supported in v7.0+
type RestoreFormConfigurationRole {
  # Required. Supported in v7.0+
  # Name of role.
  name: String!

  # Required. Supported in v7.0+
  # Name of organization.
  organizationName: String!
}
# Supported in v7.0+
type RestoreFormConfigurationS3ArchivalLocation {
  # Supported in v7.0+
  # Archival proxy config.
  archivalProxyConfig: RestoreFormArchivalProxyConfig

  # Supported in v7.0+
  # Compute proxy details.
  computeProxyConfig: RestoreFormComputeProxyConfig

  # Required. Supported in v7.0+
  # Name of the S3 archival location.
  name: String!

  # Supported in v8.0+
  # Name of the bucket.
  bucket: String

  # Supported in v8.0+
  # Default region for archival location.
  defaultRegion: String

  # Supported in v8.0+
  # Method used to encrypt archival location.
  encryptionType: String

  # Supported in v8.1+
  # Specifies the retrieval speed option when retrieving data from the cold storage tier to the hot storage tier for restore purposes.
  cloudRehydrationSpeed: String

  # Supported in v8.1+
  # Specifies the storage class configured for the archival location.
  storageClass: String
}
# Supported in v7.0+
type RestoreFormConfigurationSlaDomain {
  # Required. Supported in v7.0+
  # Name of SLA domain.
  name: String!
}
# Supported in v7.0+
type RestoreFormConfigurationSmtp {
  # Required. Supported in v7.0+
  # Email ID to be used to send email.
  fromEmailId: String!

  # Required. Supported in v7.0+
  # Hostname of SMTP server.
  smtpHostname: String!

  # Required. Supported in v7.0+
  # Port of SMTP server.
  smtpPort: Long!
}
# Supported in v7.0+
type RestoreFormConfigurationSnmp {
  # Required. Supported in v7.0+
  # SNMP username.
  username: String!
}
# Supported in v7.0+
type RestoreFormConfigurationUser {
  # Required. Supported in v7.0+
  # Name of user.
  username: String!
}
# Supported in v7.0+
type RestoreFormConfigurationVcenterServer {
  # Required. Supported in v7.0+
  # Hostname of vcenter server.
  hostname: String!
}
# Supported in v7.0+
type RestoreFormConfigurationWinAndUnixHost {
  # Required. Supported in v7.0+
  # Name of windows or unix host.
  hostname: String!
}
# Supported in v7.0+
type RestoreFormConfigurations {
  # Required. Supported in v7.0+
  # Guest OS configurations.
  guestOsCredentials: [RestoreFormConfigurationGuestOs!]!

  # Supported in v7.0+
  # KMIP server configurations.
  kmipServers: [RestoreFormConfigurationKmipServer!]!

  # Required. Supported in v7.0+
  # LDAP server configurations.
  ldapServers: [RestoreFormConfigurationLdapServer!]!

  # Required. Supported in v7.0+
  # NAS host configurations.
  nasHosts: [RestoreFormConfigurationNasHost!]!

  # Required. Supported in v7.0+
  # Object store (S3 compatible and Scality) archival location configurations.
  objectStoreArchivalLocations: [RestoreFormConfigurationObjectStoreArchivalLocation!]!

  # Required. Supported in v7.0+
  # Organization configurations.
  organizations: [RestoreFormConfigurationOrganization!]!

  # Required. Supported in v7.0+
  # Replication target configurations.
  replicationTargets: [RestoreFormConfigurationReplicationTarget!]!

  # Required. Supported in v7.0+
  # Report configurations.
  reports: [RestoreFormConfigurationReport!]!

  # Required. Supported in v7.0+
  # Role configurations.
  roles: [RestoreFormConfigurationRole!]!

  # Required. Supported in v7.0+
  # Amazon S3 archival location configurations.
  s3ArchivalLocations: [RestoreFormConfigurationS3ArchivalLocation!]!

  # Required. Supported in v7.0+
  # SLA domain configurations.
  slaDomains: [RestoreFormConfigurationSlaDomain!]!

  # Required. Supported in v7.0+
  # SMTP configurations.
  smtpSettings: [RestoreFormConfigurationSmtp!]!

  # Required. Supported in v7.0+
  # SNMP configurations.
  snmpSettings: [RestoreFormConfigurationSnmp!]!

  # Required. Supported in v7.0+
  # User configurations.
  users: [RestoreFormConfigurationUser!]!

  # Required. Supported in v7.0+
  # Vcenter server configurations.
  vcenterServers: [RestoreFormConfigurationVcenterServer!]!

  # Required. Supported in v7.0+
  # Windows and unix host configurations.
  winAndUnixHosts: [RestoreFormConfigurationWinAndUnixHost!]!
}
# Supported in v7.0+
input RestoreFormRequestInput {
  # Required. Supported in v7.0+
  # Name of the backup file for which restore form needs to be generated.
  backupFileName: String!

  # Required. Supported in v7.0+
  # Passphrase that was used to encrypt the backup configuration.
  encryptionPassword: String!
}
# Required. Input for restoring files from a snapshot of a Hyper-V virtual machine.
input RestoreHypervVirtualMachineSnapshotFilesInput {
  # Required. Configuration for a job to restore files from a snapshot.
  config: HypervRestoreFilesConfigInput!

  # Required. ID assigned to a snapshot.
  id: String!
}
# Configuration of the Kubernetes namespace snapshot to be restored and the target details.
input RestoreK8sNamespaceInput {
  # The UUID of the Kubernetes namespace snapshot to be restored.
  snapshotUuid: UUID!

  # The UUID of the target cluster to restore the namespace snapshot to.
  targetClusterUuid: UUID!

  # The name of the target namespace to restore the namespace snapshot to.
  targetNamespaceName: String!

  # Filters resources based on labels.
  labelSelector: LabelSelector
}
# Input for restoring a SQL Server database.
input RestoreMssqlDatabaseInput {
  # Required. v5.0-v5.1: Configuration for the restore.
  # v5.2+: Restore configuration.
  config: RestoreMssqlDbJobConfigInput!

  # Required. ID of the Microsoft SQL database.
  id: String!
}
# Supported in v5.0+
input RestoreMssqlDbJobConfigInput {
  # Supported in v5.0+
  # A Boolean value that determines the recovery option to use during database restore. When this value is 'true', the database is restored using the RECOVERY option and is fully functional at the end of the restore operation. When this value is 'false', the database is restored using the NORECOVERY option and remains in recovering mode at the end of the restore operation.
  finishRecovery: Boolean

  # Supported in v5.0+
  # Maximum number of parallel data streams that can be used to copy data to the target system.
  maxDataStreams: Int

  # Required. Supported in v5.0+
  recoveryPoint: MssqlRecoveryPointInput!
}
# Configuration for O365 mailbox restore.
input RestoreO365MailboxInput {
  # Polaris ID of O365 subscription.
  orgUuid: UUID

  # Polaris ID of the mailbox.
  mailboxUuid: UUID!

  # Polaris ID of restoring snapshot.
  snapshotUuid: UUID

  # Configuration for restore job.
  restoreConfigs: [RestoreObjectConfig!]!

  # Specifies the recovery type for the job.
  actionType: O365RestoreActionType!

  # In-place restore configuration for restore job.
  inplaceRestoreConfig: InplaceRestoreConfig
}
# Config for O365 Snappable Restore.
input RestoreO365SnappableInput {
  # O365 Snappable Type.
  snappableType: SnappableType!

  # UUID of the source workload.
  sourceSnappableUuid: UUID!

  # UUID of the target workload.
  destinationSnappableUuid: UUID!

  # Configuration for restore job.
  restoreConfig: SnappableRestoreConfig!

  # Recovery action type for the job.
  actionType: O365RestoreActionType!
}
# Input for restoring O365 Teams channel conversations.
input RestoreO365TeamsConversationsInput {
  #  Teams unique identifier of the channel.
  teamUuid: UUID!

  #  Information about the destination Teams channel.
  destTeamsChannelInfo: TeamsChannelInfo

  #  Specifies whether a new destination channel needs to be created in Teams.
  shouldCreateDestChannel: Boolean!

  #  Information about the destination channel conversation.
  channelInfoForFullRestore: O365TeamConvChannelInput

  #  Specifies whether file attachments in the conversation need to be restored.
  shouldRestoreFileAttachments: Boolean!

  # O365 Teams conversation channels to restore.
  teamChannels: [O365TeamConvChannelInput!]!

  #  Filters Teams conversations based on the time of posts in the conversations.
  teamsConversationsSearchFilter: TeamsConversationsSearchFilter

  # Encrypted refresh token.
  refreshTokenEncrypted: String!

  # UUID of the O365 App used for authorization.
  o365AppId: String!

  # Specifies whether the channel being restored is STANDARD or PRIVATE.
  channelRecoveryType: ChannelMembershipType!

  # Specifies whether the newly created Teams channel should have the latest permissions, which maybe different from the permissions at backup time.
  recoverWithLatestPermissions: Boolean!

  # Specifies the sequence number of the snapshot being currently restored.
  snapshotSequenceNum: Int!
}
# Input for restoring O365 Teams files.
input RestoreO365TeamsFilesInput {
  # O365 Teams files to restore.
  filesToRestore: [FileInfo!]!

  # O365 Teams folders to restore.
  foldersToRestore: [FolderInfo!]!

  # Destination channel for the restore.
  destTeamsChannelInfo: TeamsChannelInfo

  # Specifies whether destination channel should be created.
  shouldCreateDestChannel: Boolean!

  # Recovery action type for the job.
  actionType: O365RestoreActionType!

  # Indicates whether the channel being restored is STANDARD or PRIVATE.
  channelRecoveryType: ChannelMembershipType!

  # Indicates whether a new channel with latest permissions will be created if a private channel is restored.
  recoverWithLatestPermissions: Boolean!

  # Specifies the sequence number of the snapshot being currently restored.
  snapshotSequenceNum: Int!
}
# Configuration for the mailbox object (email/folder) to be restored.
input RestoreObjectConfig {
  SnapshotUUID: UUID!
  EmailID: String
  FolderID: String
}
# Supported in v6.0+
input RestoreOracleLogsConfigInput {
  # Supported in v6.0+
  # The full path on the target host that serves as the mount point for the NFS share that contains the archive log files.
  targetMountPath: String

  # Required. Supported in v6.0+
  # Filters for the archive logs to be restored. Exactly one of the filters should be set.
  oracleLogRecoveryRange: OracleLogRecoveryRangeInput!

  # Required. Supported in v6.0+
  # A Boolean value that determines whether to mount the archive log files to the target host without restoring the archive log files. The default value is true.
  shouldMountFilesOnly: Boolean!

  # Required. Supported in v6.0+
  # The ID of the Oracle host or RAC object targeted by a job that restores Oracle database archive logs. The Oracle host or RAC object must have the Rubrik Backup Service (RBS) installed and connected.
  targetOracleHostOrRacId: String!
}
input RestoreOracleLogsInput {
  # Required. Configuration parameters for a job to restore archive logs of the Oracle database.
  config: RestoreOracleLogsConfigInput!

  # Required. ID of the Oracle database.
  id: String!
}
# Supported in v5.0+
input RestorePathPairInput {
  # Supported in v5.0+
  # v5.0-v7.0: Directory of the folder to copy files into. If this is empty, file will be restored back into original directory.
  # v8.0+: Path of the destination folder where the files will be restored. When not configured, the files are restored to the original source folder.
  restorePath: String

  # Required. Supported in v5.0+
  # v5.0-v5.3: Original file path to be restored
  # v6.0-v7.0: Original file path to be restored.
  # v8.0+: Path of the original file to be restored.
  path: String!
}
# Input for restoring volume group snapshot files.
input RestoreVolumeGroupSnapshotFilesInput {
  # Required. ID of Snapshot.
  id: String!

  # The FID of the next fileset snapshot.
  nextSnapshotFid: UUID

  # Configuration information for a job to download files and folders from a volume group backup.
  config: VolumeGroupRestoreFilesConfigInput!

  # Filter for delta type.
  deltaTypeFilter: [DeltaType!]
}
# Input for resuming archival location.
input ResumeTargetInput {
  # ID of the archival location.
  id: String = ""
}
# Archival location resume result.
type ResumeTargetReply {
  # Rubrik Security Cloud managed location ID.
  locationId: String!

  # Ownership status of the archival location.
  status: ArchivalLocationStatus!
}
# The retention lock mode of the SLA Domain.
enum RetentionLockMode {
  # Compliance mode retention lock SLA.
  COMPLIANCE

  # Governance mode retention lock SLA.
  GOVERNANCE

  # No mode, the mode for non retention-locked SLAs.
  NO_MODE
}
# Unit of retention.
enum RetentionUnit {
  # Days.
  DAYS

  # Hours.
  HOURS

  # Minutes.
  MINUTES

  # Months.
  MONTHS

  # Quarter.
  QUARTERS

  # Weeks.
  WEEKS

  # Years.
  YEARS
}
# Input for putting a MongoDB source.
input RetryAddMongoSourceInput {
  # Required. ID of the MongoDB source.
  id: String!

  # Required. The request object containing parameters like username, password, and a list of hosts required to add a MongoDB source to the Rubrik cluster.
  mongoSourceRequestConfig: MongoSourceAddRequestConfigInput!
}
# Response for the request to retry backup.
type RetryBackupClusterResp {
  # Rubrik cluster UUID.
  clusterUuid: String!

  # ID of the event series.
  eventSeriesId: String!
}
# Response for the request to retry backup.
type RetryBackupResp {
  # The response for the backup jobs from the Rubrik cluster.
  clusterResp: [RetryBackupClusterResp!]!
}
# Input required for revoking all roles of current organization from the given users and groups.
input RevokeAllOrgRolesInput {
  # List of user IDs.
  userIds: [String!]

  # List of group IDs.
  groupIds: [String!]
}
# Represents risk assigned to each analyzer.
input RiskInput {
  # Represents analyzer ID.
  analyzerId: String = ""

  # Represents risk associated with the specified analyzer ID.
  risk: RiskLevelType = UNKNOWN_RISK
}
enum RiskLevelType {
  HIGH_RISK
  LOW_RISK
  MEDIUM_RISK
  NO_RISK
  UNKNOWN_RISK
}
# User access risk reasons.
enum RiskReason {
  # Risk due to high-risk analyzer hits.
  HIGH_RISK_ANALYZER_HITS

  # Risk due to vulnerable users.
  INSECURE_USERS

  # Risk due to low-risk analyzer hits.
  LOW_RISK_ANALYZER_HITS

  # Risk due to medium-risk analyzer hits.
  MEDIUM_RISK_ANALYZER_HITS

  # Risk due to open access.
  OPEN_ACCESS

  # Risk due to unknown factors.
  RISK_REASON_UNSPECIFIED
}
# RBAC role.
type Role {
  # Role ID.
  id: String!

  # Role name.
  name: String!

  # Role description.
  description: String!

  # Boolean value indicating if the role is read-only.
  isReadOnly: Boolean!

  # List of protectable Rubrik clusters.
  protectableClusters: [String!]!

  # Role organization ID.
  orgId: String!

  # If this role is a tenant organization administrator.
  isOrgAdmin: Boolean!

  # Role permissions.
  permissions: [Permission!]!

  # Role permissions that are in effect.
  effectivePermissions: [Permission!]!

  # Permissions assigned to the role that are in effect.
  effectiveRbacPermissions: [RbacPermission!]!

  # Role permissions that are explicitly assigned by user.
  explicitlyAssignedPermissions: [Permission!]!
}
# Paginated list of Role objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type RoleConnection {
  # List of Role objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [RoleEdge!]!

  # List of Role objects.
  nodes: [Role!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Role objects matching the request arguments.
  count: Int!
}
# Wrapper around the Role object. This wrapper is used for pagination.
type RoleEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Role object wrapped by this edge.
  node: Role!
}
enum RoleFieldEnum {
  Name
}
type RoleStatus {
  hasRole: Boolean!
}
type RoleTemplate {
  id: String!
  name: String!
  description: String!
  permissions: [Permission!]!

  # Role permissions that are explicitly assigned to the template.
  explicitlyAssignedPermissions: [Permission!]!
}
# Paginated list of RoleTemplate objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type RoleTemplateConnection {
  # List of RoleTemplate objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [RoleTemplateEdge!]!

  # List of RoleTemplate objects.
  nodes: [RoleTemplate!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of RoleTemplate objects matching the request arguments.
  count: Int!
}
# Wrapper around the RoleTemplate object. This wrapper is used for pagination.
type RoleTemplateEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual RoleTemplate object wrapped by this edge.
  node: RoleTemplate!
}
# Overall RU status.
type RollingUpgradeInfo {
  # List of nodes (names), currently being upgraded.
  ruCurrentNodes: [String!]!

  # List of RuNodeInfoEntry objects, one per node.
  ruNodeInfoList: [RollingUpgradeNodeInfoEntry!]!
}
# Detailed RU status of a node.
type RollingUpgradeNodeInfo {
  # Current state details.
  currentStateInfo: CurrentStateInfo

  # RU start time in seconds since epoch.
  ruStartTs: String!

  # RU end time in seconds since epoch.
  ruEndTs: String!
}
# RU node information entry.
type RollingUpgradeNodeInfoEntry {
  # Node name.
  nodeName: String!

  # Detailed RU status of a node.
  ruNodeInfo: RollingUpgradeNodeInfo
}
# Input parameters for rotating service account secret.
input RotateServiceAccountSecretInput {
  # ID of the service account.
  id: String!
}
# Updated service account details.
type RotateServiceAccountSecretReply {
  # Client ID of the service account.
  clientId: String!

  # Client secret used to authenticate to the authorization server.
  clientSecret: String!

  # Name of the service account.
  name: String!

  # URI to retrieve the access token..
  accessTokenUri: String!
}
# Supported in v5.0+
type RouteConfig {
  # Required. Supported in v5.0+
  device: String!

  # Required. Supported in v5.0+
  gateway: String!

  # Required. Supported in v5.0+
  netmask: String!

  # Required. Supported in v5.0+
  network: String!
}
type Row {
  values: [CellData!]!
  metadata: [Metadata!]!
}
# Paginated list of Row objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type RowConnection {
  # List of Row objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [RowEdge!]!

  # List of Row objects.
  nodes: [Row!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Row objects matching the request arguments.
  count: Int!
  columns: [Column!]!
}
# Wrapper around the Row object. This wrapper is used for pagination.
type RowEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Row object wrapped by this edge.
  node: Row!
}
# Rubrik Cloud Vault archival location details.
type RubrikCloudVaultLocation {
  # The Rubrik Cloud Vault ID.
  id: UUID!

  # The Rubrik Cloud Vault name.
  name: String!

  # The Rubrik Cloud Vault type.
  type: RubrikCloudVaultType!

  # The name of the Rubrik cluster connected to the Rubrik Cloud Vault.
  clusterName: String!

  # SLA Domains connecting the Rubrik cluster to the Rubrik Cloud Vault.
  slaDomains: [String!]!
}
# Rubrik Cloud Vault archival locations on which Ransomware Monitoring can be enabled.
type RubrikCloudVaultRansomwareInvestigationEnablement {
  # Rubrik Cloud Vault location information.
  location: RubrikCloudVaultLocation!

  # Whether Ransomware Monitoring is enabled.
  enabled: Boolean!
}
# Use case of archival entity.
enum RubrikCloudVaultType {
  # Archival entity for cloud native use case.
  CLOUD_NATIVE

  # Archival entity for data center use case.
  DATA_CENTER

  # Archival entity for NAS Cloud Direct use case.
  NAS_CD

  # Unused default value.
  USE_CASE_TYPE_UNSPECIFIED
}
# Specific information for Amazon Web Services (AWS) target created on Rubrik.
type RubrikManagedAwsTarget implements Target {
  # Template type of the storage settings.
  cloudNativeLocTemplateType: CloudNativeLocTemplateType!

  # Immutability settings of AWS target.
  immutabilitySettings: AwsImmutabilitySettingsType

  # Optional field of an Amazon S3 endpoint for example, a VPC endpoint. When not provided, the default, region-based Amazon S3 endpoint is used.
  s3Endpoint: String

  # Optional field of the KMS server endpoint when using KMS-based encryption for example, a VPC endpoint. When not provided, the default, region-based KMS server endpoint is used.
  kmsEndpoint: String

  # Cloud account details of the AWS target.
  cloudAccount: CloudAccount!

  # Bucket name of the AWS target.
  bucket: String!

  # Region of the AWS target.
  region: AwsRegion!

  # Sync status of AWS target.
  syncStatus: TargetSyncStatus!

  # Retrieval tier of the AWS target.
  awsRetrievalTier: AwsRetrievalTier!

  # Storage class of the AWS target.
  storageClass: AwsStorageClass!

  # Compute settings of the AWS target.
  computeSettings: AwsComputeSettings

  # Proxy settings of the AWS target.
  proxySettings: ProxySettings

  # Encryption type to be used for the AWS target.
  encryptionType: TargetEncryptionTypeEnum!

  # KMS master key ID required for encryption for the AWS target.
  kmsMasterKeyId: String!

  # Flag to check if consolidation is enabled or not in this target.
  isConsolidationEnabled: Boolean!

  # Reason why sync of this target with CDM failed.
  syncFailureReason: String!

  # Connected/Disconnected status of the AWS target.
  connectionStatus: ConnectionStatusType!

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific information for Azure target created on Rubrik.
type RubrikManagedAzureTarget implements Target {
  # Compute settings of the Azure target.
  computeSettings: AzureComputeSettings

  # Connection status of the Azure target.
  connectionStatus: ConnectionStatusType!

  # Cloud native information of the Azure target.
  cloudNativeCompanion: AzureCloudNativeTargetCompanion

  # Cloud account details of the Azure target.
  cloudAccount: CloudAccount!

  # Instance type of the Azure location.
  instanceType: InstanceTypeEnum!

  # Immutability settings of the Azure target.
  immutabilitySettings: AzureImmutabilitySettingsType

  # Storage account name of the Azure target.
  storageAccountName: String!

  # Container name of the Azure target.
  containerName: String!

  # Proxy settings of the AWS target.
  proxySettings: ProxySettings

  # Access key of the Azure target.
  accessKey: String @deprecated(reason: "Access key response no longer supported.")

  # Sync status of Azure location.
  syncStatus: TargetSyncStatus!

  # Flag to check if consolidation is enabled or not in this target.
  isConsolidationEnabled: Boolean!

  # Reason why sync of this target with CDM failed.
  syncFailureReason: String!

  # Flag to determine if tiering is supported in the Azure target.
  isAzureTieringSupported: Boolean

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean!

  # Retrieval tier of the Azure target.
  retrievalTier: AzureRetrievalTier!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific information for Google Cloud Platform (GCP) target created on Rubrik.
type RubrikManagedGcpTarget implements Target {
  # Proxy setting of this GCP target.
  archivalProxySettings: ProxySettings

  # Connection status of the GCP target.
  connectionStatus: ConnectionStatusType!

  # Region of GCP target.
  region: GcpRegion!

  # Sync status of GCP target.
  syncStatus: TargetSyncStatus!

  # Storage class of the GCP target.
  storageClass: GcpStorageClass!

  # Bucket of the GCP target.
  bucket: String!

  # Reason why sync of this target with CDM failed.
  syncFailureReason: String!

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Information about the Amazon Glacier target created on Rubrik.
type RubrikManagedGlacierTarget implements Target {
  # Cloud account details of the Amazon Glacier target.
  cloudAccount: CloudAccount!

  # Vault name of the Amazon Glacier target.
  vaultName: String!

  # Region of the Amazon Glacier target.
  region: AwsRegion!

  # Sync status of Amazon Glacier target.
  syncStatus: TargetSyncStatus!

  # Retrieval tier of the Amazon Glacier target.
  retrievalTier: AwsRetrievalTier!

  # Reason of sync failure of this target with Rubrik CDM. This is empty if syncStatus is not failed.
  syncFailureReason: String!

  # Connection status of the AWS target.
  connectionStatus: ConnectionStatusType!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific information for Network File System (NFS) target created on Rubrik.
type RubrikManagedNfsTarget implements Target {
  # Field for specifying the authentication type of NFS.
  nfsAuthType: AuthTypeEnum!

  # Connection status of the Azure target.
  connectionStatus: ConnectionStatusType!

  # Host of the Nfs location.
  host: String!

  # Sync status of NFS location.
  syncStatus: TargetSyncStatus!

  # Directory in the NFS location where snapshots will be exported.
  exportDir: String!

  # Version of NFS target.
  nfsVersion: Int!

  # Other NFS options.
  otherNfsOptions: String!

  # Lock period of the files in NFS in seconds.
  fileLockPeriodInSeconds: Int!

  # Destination folder in the NFS location.
  destinationFolder: String!

  # Flag to check if consolidation is enabled or not in this target.
  isConsolidationEnabled: Boolean!

  # Reason why sync of this target with CDM failed.
  syncFailureReason: String!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific information for Rubrik Cloud Vault (RCV) target created on Rubrik.
type RubrikManagedRcsTarget implements Target {
  # Specifies whether the proxy settings is bypassed for  the RCV archival target.
  shouldBypassProxy: Boolean!

  # Specifies whether blob immutability is enabled for the RCV archival target.
  isVersionLevelImmutabilityEnabled: Boolean!

  # Sync status of RCV target.
  syncStatus: TargetSyncStatus!

  # Region of RCV target.
  region: RcsRegionEnumType!

  # Tiers for RCV target.
  tier: RcsTierEnumType!

  # Space usage threshold of RCV target above which alert will be raised.
  spaceUsageAlertThreshold: Int!

  # Reason why sync of this target with CDM failed.
  syncFailureReason: String!

  # Storage consumption value of RCV target.
  storageConsumptionValue: Float!

  # Immutability lock duration of RCV target in days.
  immutabilityPeriodDays: Long!

  # RCV Private endpoint connection details.
  privateEndpointConnection: PrivateEndpointConnection

  # IP allow list for location.
  clusterIpMapping: ClusterIpMapping

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific information for Amazon S3 compatible target created on Rubrik.
type RubrikManagedS3CompatibleTarget implements Target {
  # Access key for authentication to the S3Compatible target.
  accessKey: String!

  # Connection status of the S3Compatible target.
  connectionStatus: ConnectionStatusType!

  # Host of the S3Compatible location.
  endpoint: String!

  # Sync status of S3Compatible target.
  syncStatus: TargetSyncStatus!

  # Prefix of the S3Compatible target bucket.
  bucketPrefix: String!

  # Number of buckets in the S3Compatible target.
  numberOfBuckets: Int!

  # S3-compatible target subtype.
  subType: S3CompatibleSubType!

  # IBM subtype specific details.
  ibmDetail: IbmCosDetailsType

  # IBM subtype specific details.
  ibmDetails: String! @deprecated(reason: "Deprecated: please use ibmDetail instead.")

  # Immutability information of S3-compatible location.
  immutabilitySettings: LocationImmutabilityType! @deprecated(reason: "Deprecated: please use immutabilitySetting instead.")

  # Immutability information of S3-compatible location.
  immutabilitySetting: LocationImmutabilityType

  # Flag to check if consolidation is enabled or not in this target.
  isConsolidationEnabled: Boolean!

  # Encryption type to be used for the S3-compatible target.
  encryptionType: TargetEncryptionTypeEnum!

  # Flag to check if system proxy is being used in this target.
  useSystemProxy: Boolean!

  # Reason why sync of this target with CDM failed.
  syncFailureReason: String!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Specific information for Q-star target created on Rubrik.
type RubrikManagedTapeTargetType implements Target {
  # Connection status of the tape target.
  connectionStatus: ConnectionStatusType!

  # Sync status of tape target.
  syncStatus: TargetSyncStatus!

  # Name of the target host.
  hostName: String!

  # Port number of the target host.
  hostPort: Int!

  # Integral volume name of target.
  integralVolumeName: String!

  # Destination folder name of target.
  destinationFolderName: String!

  # Username of the target.
  username: String!

  # Reason why sync of this target with CDM failed.
  syncFailureReason: String!

  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Status of the data syncing jobs from CDM to RSC.
type RubrikSyncStatus {
  # Last success time of the object metadata syncing job.
  objectMetadataSyncLastSuccessTime: DateTime

  # Last success time of the cluster syncing job.
  clusterSyncLastSuccessTime: DateTime

  # Last success time of the reports syncing job.
  reportsSyncLastSuccessTime: DateTime

  # Last success time of the job-monitoring dashboard syncing job.
  jobMonitoringSyncLastSuccessTime: DateTime

  # The time when the events syncing job was last successful.
  eventsSyncLastSuccessTime: DateTime

  # Specifies whether cluster sync is operating correctly.
  isClusterSyncHealthy: Boolean!

  # Specifies whether job monitoring sync is operating correctly.
  isJobMonitoringSyncHealthy: Boolean!

  # Specifies whether metadata sync is operating correctly.
  isMetadataSyncHealthy: Boolean!

  # Specifies whether events sync is operating correctly.
  isEventsSyncHealthy: Boolean!

  # Specifies whether reports sync is operating correctly.
  isReportsSyncHealthy: Boolean!
}
input RunCustomAnalyzerInput {
  dictionaryCsv: String = ""
  regex: String = ""
  content: String = ""
}
type RunCustomAnalyzerReply {
  matches: [CustomAnalyzerMatch!]!
}
# Supported in v6.0+
input RunPolicyArgInput {
  # Supported in v6.0+
  # List of node IDs where policies will be enforced.
  nodeIds: [String!] = []

  # Required. Supported in v6.0+
  # List of policy IDs.
  policyIds: [String!]!
}
# Details of S3 Bucket containing name, region and ARN.
type S3BucketDetails {
  # Name of the S3 bucket.
  name: String!

  # Region the bucket resides in.
  region: String!

  # ARN of the S3 bucket.
  arn: String!
}
# S3CompatibleSubType enum specifies the sub location type
# of a S3Compatible location.
enum S3CompatibleSubType {
  # Default subtype.
  DEFAULT

  # DellEcs subtype.
  DELLECS

  # IbmCos subtype.
  IBMCOS

  # NetAppSG subtype.
  NETAPPSG

  # Scality subtype.
  SCALITY

  # Unknown subtype.
  TYPE_UNSPECIFIED
}
type SDDLPermission {
  cn: String!
  dn: String!
  access: String!
  accessType: AceQualifier!
  flags: [AceFlags!]!
  resolutionType: ResolutionType!
}
# Enum to filter SLA Domain audit details.
enum SLAAuditDetailFilterFieldEnum {
  # Filter based on user name.
  USER_NAME
}
# Filter SLA Domain audit details.
input SLAAuditDetailFilterInput {
  # Field to filter SLA Domain audit details.
  field: SLAAuditDetailFilterFieldEnum = USER_NAME

  # Value for the field.
  text: String = ""
}
# Summary of the number of objects protected by SLA Domains.
type SLAIdToObjectCount {
  # ID of the SLA Domain.
  slaId: String!

  # Number of objects protected by the SLA Domain.
  objectCount: Int!
}
# Types of Rubrik SaaS features using the Exocompute cluster.
enum SaasFeature {
  # Rubrik-hosted Exocompute cluster for Azure AD.
  TYPE_AAD

  # Rubrik-hosted Exocompute cluster for Cloud Direct.
  TYPE_CLOUD_DIRECT_HOSTED

  # Rubrik-hosted or customer-hosted Exocompute cluster for M365.
  TYPE_M365

  # Rubrik-hosted Exocompute cluster for SaaS Protection.
  TYPE_SAAS_PROTECTION
}
# SAP HANA workload related app metadata for a snapshot.
type SapHanaAppMetadata {
  # The SAP HANA backup ID for data backup.
  backupId: Long

  # Snapshot type: Full/Incremental/Differential.
  snapshotType: String

  # Start time for the backup in DB.
  sapHanaStartTime: DateTime

  # End time for the backup in DB.
  sapHanaEndTime: DateTime

  # Start time for the backup in Rubrik.
  rubrikSnapshotStartTime: DateTime

  # End time for the backup in Rubrik.
  rubrikSnapshotEndTime: DateTime

  # Backup prefix of data backup.
  backupPrefix: String

  # SnapshotId of the base full backup.
  baseFullSnapshotId: String

  # Base backup ID for the data backup. For incremental backup, this ID is the previous incremental backup ID or the full backup ID.
  baseBackupId: Long

  # Specifies whether the backup was triggered by Rubrik or by an external agent.
  isExternalBackup: Boolean

  # Specifies whether the backups is initiated by Rubrik and is on-demand.
  isRubrikTriggeredOnDemandBackup: Boolean

  # Files for the data backup.
  files: [SapHanaDataBackupFile!]
}
# The SLA Domain configuration for SAP HANA database.
type SapHanaConfig {
  # Frequency value for incremental backup of SAP HANA databases.
  incrementalFrequency: Duration

  # Number of days for which the SAP HANA database logs will be retained.
  logRetention: Duration

  # Frequency value for differential backup of SAP HANA databases.
  differentialFrequency: Duration

  # SLA Domain configuration for SAP HANA Storage Snapshot.
  storageSnapshotConfig: SapHanaStorageSnapshotConfig
}
# Input to configure the SLA Domain for SAP HANA database.
input SapHanaConfigInput {
  # Frequency value for incremental backup of SAP HANA databases.
  incrementalFrequency: SlaDurationInput

  # Specifies the duration for which the SAP HANA database logs will be retained.
  logRetention: SlaDurationInput

  # Frequency value for differential backup of SAP HANA databases.
  differentialFrequency: SlaDurationInput

  # SLA Domain config for SAP HANA Storage Snapshot.
  storageSnapshotConfig: SapHanaStorageSnapshotConfigInput
}
# Data backup files for SAP HANA full, incremental, or differential backup.
type SapHanaDataBackupFile {
  # The persistence volume ID.
  sourceId: Long!

  # Type of persistence to be backed-up: volume or topology.
  sourceType: String!

  # Type of database service: indexserver, nameserver, or statisticsserver.
  serviceType: String!

  # Identifier of the data backup.
  externalBackupId: String!

  # Redo log position for the backup.
  redoLogPositionOpt: Long

  # Size of the backed-up file in bytes.
  backupFileSizeInBytes: Long!

  # Path of the target location where the data or log backup was written.
  destinationPath: String!
}
# Additional information about backup data path.
type SapHanaDataPathSpecObject {
  # Specifications for data path. This would be used when data path is not LOCAL.
  name: String!
}
# Supported in v6.0+
# Data path of the SAP HANA BACKINT interface specifying the location where the BACKINT interface stores backups. Supported data path types are MANAGED_VOLUME, GCP, and LOCAL. MANAGED_VOLUME specifies a data path used by the BACKINT interface to store backups on an on-premises Rubrik CDM cluster. GCP specifies that backups are stored on Google Cloud Platform. LOCAL indicates the backup is stored locally.
enum SapHanaDataPathType {
  # The type of SAP HANA datapath is GCP.
  SAP_HANA_DATA_PATH_TYPE_GCP

  # The type of SAP HANA datapath is local.
  SAP_HANA_DATA_PATH_TYPE_LOCAL

  # The type of SAP HANA datapath is Managed Volume.
  SAP_HANA_DATA_PATH_TYPE_MANAGED_VOLUME
}
# SAP HANA Database details object.
type SapHanaDatabase implements CdmHierarchyObject , CdmHierarchySnappableNew , HierarchyObject , SapHanaSystemPhysicalChildType , SapHanaSystemDescendantType {
  # UUID of cluster associated with SAP HANA database.
  clusterUuid: UUID!

  # UUID of the primary cluster.
  primaryClusterUuid: UUID!

  # ID associated with SAP HANA database in CDM.
  cdmId: String!

  # Information related to SAP HANA database like database size, log backup interval etc.
  info: SapHanaDatabaseInfoObject

  # Data path used for the workload. For SAP HANA workload this value is LOCAL.
  dataPathType: String!

  # Specifications for data path. This is used when data path is not LOCAL.
  dataPathSpec: SapHanaDataPathSpecObject

  # The CDM ID for the SAP HANA system associated with SAP HANA database.
  systemId: String!

  # Specifies whether the SAP HANA database is a relic.
  isRelic: Boolean!

  # Take a full backup instead of the scheduled incremental or differential backup. This is used when the previous backup is file-based.
  forceFull: Boolean!

  # Date of protection of SAP HANA Database.
  protectionDate: DateTime

  # SAP HANA System for the given database.
  sapHanaSystem: SapHanaSystem!

  # Details of the source SAP HANA database configured for the system copy.
  sourceDatabaseDetails: SapHanaDatabase

  # Recoverable ranges for given SAP HANA database.
  recoverableRangeConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field to sort SAP HANA recoverable ranges.
    sortBy: SapHanaRecoverableRangeSortBy,

    # Field to filter SAP HANA recoverable ranges.
    filter: SapHanaRecoverableRangeFilterInput): SapHanaRecoverableRangeConnection!

  # Log snapshots for given SAP HANA database.
  logSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Field to sort SAP HANA log snapshots.
    sortBy: SapHanaLogSnapshotSortBy,

    # Field to filter SAP HANA log snapshots.
    filter: SapHanaLogSnapshotFilterInput): SapHanaLogSnapshotConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Paginated list of SapHanaDatabase objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SapHanaDatabaseConnection {
  # List of SapHanaDatabase objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SapHanaDatabaseEdge!]!

  # List of SapHanaDatabase objects.
  nodes: [SapHanaDatabase!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SapHanaDatabase objects matching the request arguments.
  count: Int!
}
# Wrapper around the SapHanaDatabase object. This wrapper is used for pagination.
type SapHanaDatabaseEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SapHanaDatabase object wrapped by this edge.
  node: SapHanaDatabase!
}
# Additional information about backint and database configuration.
type SapHanaDatabaseInfoObject {
  # Database type (SYSTEM / TENANT).
  databaseType: String!

  # Database status.
  status: String!

  # Path to the backint agent.
  backintPath: String!

  # Path to the parameter File for the database.
  paramFilePath: String!

  # Number of channels that the backint agent is using.
  numChannels: Int!

  # Approximate size of the database in Megabytes.
  approxDbSizeInMb: Long!

  # Time interval in seconds in which the log backup will be triggered.
  logBackupIntervalSecs: Int!

  # CDM ID of the database from which system-copy has been configured.
  restoreConfiguredSrcDatabaseId: String!

  # SAP HANA log mode (overwrite / normal).
  logMode: String!
}
# Supported in v8.0+
input SapHanaDownloadRecoverableRangeRequestInput {
  # Required. Supported in v8.0+
  # Point in time for which the snapshots should be downloaded for recovery. The date-time string must be in the ISO8601 format. For example, "2016-01-01T01:23:45.678". The timezone is same as the timezone of the Rubrik cluster.
  pointInTime: DateTime

  # Required. Supported in v8.0+
  # ID of the location preferred for downloading the base full and log snapshots required for point in time recovery. The snapshots not available at the preferred location will be downloaded from the location where they are available.
  preferredLocationId: String!
}
# Additional parameters for download request.
input SapHanaDownloadRequestInput {
  # Supported in v8.1+
  # ID of the SLA Domain to manage retention of the downloaded snapshot.
  slaId: String
}
# The encryption provider for the SAPA HANA system.
enum SapHanaEncryptionProvider {
  # Common Crypto.
  COMMON_CRYPTO

  # Encryption provider not set.
  EMPTY_VALUE

  # OpenSSL.
  OPENSSL

  # SAP Crypto.
  SAP_CRYPTO
}
# Supported in v5.3+
type SapHanaHost {
  # Required. Supported in v5.3+
  # The IP address or fully qualified domain name of the SAP HANA host.
  hostName: String!

  # Required. Supported in v5.3+
  # The ID of the SAP HANA system host.
  hostUuid: String!

  # Supported in v5.3+
  # The local name of the SAP HANA host.
  sapHanaHostName: String

  # Required. Supported in v5.3+
  # The status of the SAP HANA system host.
  status: String!

  # Specifies the type of SAP HANA host.
  hostType: SapHanaHostHostType
}
# Represents the types of SAP HANA hosts.
enum SapHanaHostHostType {
  # SAP HANA host type is primary master.
  SAP_HANA_HOST_HOST_TYPE_MASTER

  # SAP HANA host type is secondary master.
  SAP_HANA_HOST_HOST_TYPE_SECONDARY_MASTER

  # SAP HANA host type is secondary slave.
  SAP_HANA_HOST_HOST_TYPE_SECONDARY_SLAVE

  # SAP HANA host type is primary slave.
  SAP_HANA_HOST_HOST_TYPE_SLAVE
}
# Information about SAP HANA hosts of the system.
type SapHanaHostObject {
  # UUID for host associated with SAP HANA system.
  hostUuid: String!

  # Connectivity status of the host.
  status: String!

  # Name of the host associated with SAP HANA system.
  hostName: String!

  # Type of SAP HANA host: PRIMARY_MASTER, SECONDARY_MASTER, UNKNOWN.
  hostType: String!

  # UUID of cluster associated with SAP HANA host.
  clusterUuid: UUID!

  # Details of the host for SAP HANA system.
  host: PhysicalHost! @deprecated(reason: "Use systemHost instead.")

  # Details of the host for SAP HANA system.
  systemHost: PhysicalHost
}
# Backup associated with the SAP HANA log backup.
type SapHanaLogBackup {
  # End time for log backup.
  endTime: DateTime

  # Total bytes transferred for log backup.
  bytesTransferred: Long

  # The SAP HANA backup ID for log backup.
  backupId: Long

  # Start time for log backup.
  startTime: DateTime

  # True if the log backup has catalog backup.
  doesContainCatalogFile: Boolean

  # Files in the log backup.
  files: [SapHanaLogBackupFiles!]
}
# Log backup file for SAP HANA log backup.
type SapHanaLogBackupFiles {
  # The SAP HANA backup ID for log backup.
  backupId: Long

  # Name of the host.
  hostName: String

  # The persistence volume ID.
  sourceId: Long

  # Type of persistence to be backed-up: volume or topology.
  sourceTypeName: String

  # Displays that the data or log backup was written to this location.
  destinationPath: String

  # Type of location: file or backint.
  destinationType: String

  # Type of database service: indexserver, nameserver, or statisticsserver.
  serviceTypeName: String

  # Identifier of the log backup.
  externalBackupId: String

  # Size of the backup in bytes.
  backupSizeInBytes: Long

  # New and old redo log positions.
  logPositionInterval: SapHanaLogPositionInterval
}
# For a log backup, represents redo log position interval.
type SapHanaLogPositionInterval {
  # Newest log position in the interval.
  newestLogPosition: Long

  # Oldest log position in the interval.
  oldestLogPosition: Long
}
# SAP HANA log snapshot object.
type SapHanaLogSnapshot {
  # The fid of the SAP HANA snapshot object.
  fid: String!

  # The CDM fid of the SAP HANA snapshot object.
  cdmId: String!

  # UUID of the CDM cluster associated with SAP HANA database.
  clusterUuid: UUID!

  # The internal timestamp of the SAP HANA snapshot object.
  internalTimestamp: Long!

  # Specifies the archival status of the SAP HANA snapshot object.
  isArchived: Boolean!

  # The object type on which snapshot was taken.
  workloadType: String!

  # The CDM ID of the SAP HANA database on which snapshot was taken.
  workloadId: String!

  # The creation date of the snapshot.
  date: DateTime

  # Mapping of locations where snapshot is available.
  locationMap: String

  # App metadata of log snapshots in SAP HANA.
  appMetadata: SapHanaLogSnapshotAppMetadata
}
# Metadata related to the SAP HANA log snapshot.
type SapHanaLogSnapshotAppMetadata {
  # Files in the log snapshot.
  backups: [SapHanaLogBackup!]
}
# Paginated list of SapHanaLogSnapshot objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SapHanaLogSnapshotConnection {
  # List of SapHanaLogSnapshot objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SapHanaLogSnapshotEdge!]!

  # List of SapHanaLogSnapshot objects.
  nodes: [SapHanaLogSnapshot!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SapHanaLogSnapshot objects matching the request arguments.
  count: Int!
}
# Wrapper around the SapHanaLogSnapshot object. This wrapper is used for pagination.
type SapHanaLogSnapshotEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SapHanaLogSnapshot object wrapped by this edge.
  node: SapHanaLogSnapshot!
}
# Input for filtering SAP HANA log snapshots.
input SapHanaLogSnapshotFilterInput {
  # Filter by SAP HANA database ID.
  workloadId: [String!]

  # Filter by cluster UUID.
  clusterUuid: [UUID!]

  # Filter by start time of the log snapshots.
  fromTime: DateTime

  # Filter by end time of the log snapshots.
  toTime: DateTime

  # Filter by the archival status of log snapshots. By default, archived snapshots are excluded.
  isArchived: Boolean
}
# Fields for sorting SAP HANA log snapshots.
enum SapHanaLogSnapshotSortBy {
  # Sort SAP HANA log snapshots by date.
  DATE
}
# SAP HANA recoverable range object.
type SapHanaRecoverableRange {
  # The Rubrik fid of the SAP HANA recoverable range object.
  fid: String!

  # The CDM fid of the SAP HANA recoverable range object.
  cdmId: String!

  # UUID of the CDM cluster associated with SAP HANA workload.
  clusterUuid: UUID!

  # Specifies the archival status of SAP HANA recoverable range object.
  isArchived: Boolean!

  # The CDM ID for the SAP HANA database associated with the SAP HANA recoverable range object.
  dbId: String!

  # ID of the associated base full snapshot.
  baseFullSnapshotId: String

  # Start time of the SAP HANA recoverable range object.
  startTime: DateTime

  # End time of the SAP HANA recoverable range object.
  endTime: DateTime
}
# Paginated list of SapHanaRecoverableRange objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SapHanaRecoverableRangeConnection {
  # List of SapHanaRecoverableRange objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SapHanaRecoverableRangeEdge!]!

  # List of SapHanaRecoverableRange objects.
  nodes: [SapHanaRecoverableRange!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SapHanaRecoverableRange objects matching the request arguments.
  count: Int!
}
# Wrapper around the SapHanaRecoverableRange object. This wrapper is used for pagination.
type SapHanaRecoverableRangeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SapHanaRecoverableRange object wrapped by this edge.
  node: SapHanaRecoverableRange!
}
# Input for filtering SAP HANA recoverable ranges.
input SapHanaRecoverableRangeFilterInput {
  # Filter by cluster UUID.
  clusterUuid: [UUID!]

  # Filter by SAP HANA database ID.
  databaseId: [String!]

  # Filter by start time for SAP HANA recoverable range.
  fromTime: DateTime

  # Filter by end time for the SAP HANA recoverable range.
  toTime: DateTime

  # Filter by archival status of the SAP HANA recoverable range. By default archived recoverable ranges are excluded.
  isArchived: Boolean
}
# Fields for sorting SAP HANA recoverable ranges.
enum SapHanaRecoverableRangeSortBy {
  # Sort SAP HANA recoverable range by end time.
  END_TIME

  # Sort SAP HANA recoverable range by start time.
  START_TIME
}
# Supported in v6.0+
input SapHanaRestoreSourceConfigInput {
  # Supported in v6.0+
  # ID of the source database.
  snappableId: String
}
# Supported in v5.3+
type SapHanaSslInfo {
  # Required. Supported in v5.3+
  # The path where the encryption key for the SAP HANA system is stored.
  keyStorePath: String!

  # Supported in v7.0+
  # Library path for SAP HANA crypto library (libsapcrypto.so).
  cryptoLibPath: String

  # Supported in v7.0+
  # Override the hostname used to verify the server's identity.
  hostNameInCertificate: String

  # Supported in v7.0+
  # Specifies whether to encrypt the database connection using SSL/TLS.
  shouldEncrypt: Boolean

  # Supported in v7.0+
  # Specifies whether to validate the SSL certificate of the SAP HANA DB server.
  shouldValidateCertificate: Boolean

  # Supported in v7.0+
  # Path to a trust store file that contains the public certificates of the SAP HANA DB server.
  trustStorePath: String

  # SAP HANA SSL information encryption provider.
  encryptionProvider: SapHanaSslInfoEncryptionProvider!
}
# Represents the different SAP HANA SSL information encryption providers.
enum SapHanaSslInfoEncryptionProvider {
  # The SAP HANA SSL info encryption provider is common crypto.
  SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_COMMON_CRYPTO

  # The SAP HANA SSL info encryption provider is openssl.
  SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_OPENSSL

  # The SAP HANA SSL info encryption provider is SAP crypto.
  SAP_HANA_SSL_INFO_ENCRYPTION_PROVIDER_SAP_CRYPTO
}
# Supported in v5.3+
input SapHanaSslInfoInput {
  # Supported in v7.0+
  # Library path for SAP HANA crypto library (libsapcrypto.so).
  cryptoLibPath: String

  # Supported in v7.0+
  # Override the hostname used to verify the server's identity.
  hostNameInCertificate: String

  # Supported in v7.0+
  # Specifies whether to encrypt the database connection using SSL/TLS.
  shouldEncrypt: Boolean

  # Supported in v7.0+
  # Specifies whether to validate the SSL certificate of the SAP HANA DB server.
  shouldValidateCertificate: Boolean

  # Supported in v7.0+
  # Path to a trust store file that contains the public certificates of the SAP HANA DB server.
  trustStorePath: String

  # Required. Supported in v5.3+
  # The encryption provider for the SAPA HANA system. Possible values are OPENSSL, COMMON_CRYPTO, SAP_CRYPTO.
  encryptionProvider: SapHanaSslInfoEncryptionProvider!

  # Required. Supported in v5.3+
  # The path where the encryption key for the SAP HANA system is stored.
  keyStorePath: String!
}
# Information required to connect to SAP HANA database over SSL.
type SapHanaSslInformation {
  # The path where the encryption key for the SAP HANA system is stored.
  keyStorePath: String!

  # Library path for SAP HANA crypto library (libsapcrypto.so).
  cryptoLibPath: String!

  # Override the hostname used to verify the server's identity.
  hostNameInCertificate: String!

  # Specifies whether to encrypt the database connection using SSL/TLS.
  shouldEncrypt: Boolean!

  # Specifies whether to validate the SSL certificate of the SAP HANA DB server.
  shouldValidateCertificate: Boolean!

  # Path to a trust store file that contains the public certificates of the SAP HANA DB server.
  trustStorePath: String!

  # The encryption provider for the SAPA HANA system.
  encryptionProvider: SapHanaEncryptionProvider!
}
# SLA Domain configuration for SAP HANA Storage Snapshot.
type SapHanaStorageSnapshotConfig {
  # Frequency value for storage snapshot of SAP HANA systems.
  frequency: Duration

  # Number of days for which storage snapshot of SAP HANA systems will be retained.
  retention: Duration
}
# Input to configure the SLA Domain for SAP HANA Storage Snapshot.
input SapHanaStorageSnapshotConfigInput {
  # Frequency value for storage snapshot of SAP HANA systems.
  frequency: SlaDurationInput

  # Number of days for which storage snapshot of SAP HANA systems will be retained.
  retention: SlaDurationInput
}
# SAP HANA system details object.
type SapHanaSystem implements CdmHierarchyObject , HierarchyObject {
  # UUID of cluster associated with SAP HANA system.
  clusterUuid: UUID!

  # UUID of the primary cluster.
  primaryClusterUuid: UUID!

  # ID associated with SAP HANA system in CDM.
  cdmId: String!

  # SID for the SAP HANA system, for example, SP3, SC1.
  sid: String!

  # Instance number for SAP HANA system.
  instanceNumber: String!

  # Current status for the SAP HANA system: OK, WARNING, ERROR, or UNKNOWN.
  status: SapHanaSystemStatus!

  # Additional information about the current status of the SAP HANA system.
  statusMessage: [String!]!

  # Timestamp of the status update for the SAP HANA system.
  lastStatusUpdateTime: DateTime

  # Timestamp of the SAP HANA system refresh. Refresh process is responsible for configuring backint and discovering new databases.
  lastRefreshTime: DateTime

  # List of hosts associated with SAP HANA system.
  hosts: [SapHanaHostObject!]!

  # Information required to connect to SAP HANA database over SSL.
  sslInfo: SapHanaSslInformation

  # Additional information about the SAP HANA system.
  systemInfo: SapHanaSystemInformation

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): SapHanaSystemDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): SapHanaSystemPhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# The authentication type for the SAP HANA system.
enum SapHanaSystemAuthType {
  # Auth type unknown.
  AUTH_TYPE_UNSPECIFIED

  # SAP HANA user store.
  SAP_HANA_SYSTEM_AUTH_TYPE_SPEC_AUTH_TYPE_HDB_USERSTORE

  # User credentials.
  SAP_HANA_SYSTEM_AUTH_TYPE_SPEC_AUTH_TYPE_USER_CREDENTIALS
}
# Supported in v9.0+
type SapHanaSystemAuthTypeSpec {
  authType: SapHanaSystemAuthTypeSpecAuthType!
}
enum SapHanaSystemAuthTypeSpecAuthType {
  SAP_HANA_SYSTEM_AUTH_TYPE_SPEC_AUTH_TYPE_HDB_USERSTORE
  SAP_HANA_SYSTEM_AUTH_TYPE_SPEC_AUTH_TYPE_USER_CREDENTIALS
}
# Supported in v9.0+
input SapHanaSystemAuthTypeSpecInput {
  # Required. Supported in v9.0+
  # The authentication type for SAP HANA system. Currently, username and password credentials or userstore_key are the supported mechanisms for authenticating to the SAP HANA system.
  authType: SapHanaSystemAuthTypeSpecAuthType!
}
# Supported in v5.3+
input SapHanaSystemConfigInput {
  # Supported in v6.0+
  # Data path details of the SAP HANA system.
  dataPathSpec: SapHanaSystemDataPathSpecInput

  # Supported in v7.0+
  # Information required to connect to SAP HANA database over SSL.
  sslInfo: SapHanaSslInfoInput

  # Supported in v9.0+
  # The authentication type for the SAP HANA system.
  authTypeSpec: SapHanaSystemAuthTypeSpecInput

  # Supported in v9.1+
  # The Rubrik ID of the SAP HANA Azure Feature.
  azureFeatureId: String

  # Required. Supported in v5.3+
  # The SAP HANA system hosts.
  hostIds: [String!]!

  # Required. Supported in v5.3+
  # The instance number of the SAP HANA system.
  instanceNumber: String!

  # Required. Supported in v5.3+
  # The password of the SAP HANA system.
  password: String!

  # Required. Supported in v5.3+
  # The SAP System Identification (SID) code for the SAP HANA system.
  sid: String!

  # Required. Supported in v5.3+
  # The username of the SAP HANA system.
  username: String!
}
# Paginated list of SapHanaSystem objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SapHanaSystemConnection {
  # List of SapHanaSystem objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SapHanaSystemEdge!]!

  # List of SapHanaSystem objects.
  nodes: [SapHanaSystem!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SapHanaSystem objects matching the request arguments.
  count: Int!
}
# Supported in v6.0+
input SapHanaSystemDataPathSpecInput {
  # Supported in v6.0+
  # Data path of the SAP HANA BACKINT interface.
  dataPathType: SapHanaDataPathType
}
# SAP HANA system descendant type, for example, SAP HANA Database.
interface SapHanaSystemDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of SapHanaSystemDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SapHanaSystemDescendantTypeConnection {
  # List of SapHanaSystemDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SapHanaSystemDescendantTypeEdge!]!

  # List of SapHanaSystemDescendantType objects.
  nodes: [SapHanaSystemDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SapHanaSystemDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the SapHanaSystemDescendantType object. This wrapper is used for pagination.
type SapHanaSystemDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SapHanaSystemDescendantType object wrapped by this edge.
  node: SapHanaSystemDescendantType!
}
# Wrapper around the SapHanaSystem object. This wrapper is used for pagination.
type SapHanaSystemEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SapHanaSystem object wrapped by this edge.
  node: SapHanaSystem!
}
# Supported in v5.3+
type SapHanaSystemInfo {
  # Required. Supported in v5.3+
  # The version of the SAP HANA system.
  hanaVersion: String!

  # Required. Supported in v5.3+
  # Indicates whether the SAP HANA system has replication enabled.
  isSystemReplicationEnabled: Boolean!

  # Supported in v9.0+
  # Specifies the authentication type for the SAP HANA system.
  authTypeSpec: SapHanaSystemAuthTypeSpec

  # Supported in v9.1+
  # The Rubrik ID of the SAP HANA Azure Feature.
  azureFeatureId: String
}
# Additional info about the SAP HANA system.
type SapHanaSystemInformation {
  # SAP HANA version installed on the system.
  hanaVersion: String!

  # Specifies whether Dynamic Tiering service is enabled for the SAP HANA system.
  isDtEnabled: Boolean!

  # The authentication type for the SAP HANA system.
  authType: SapHanaSystemAuthType!
}
# Supported in v5.3+
input SapHanaSystemPatchInput {
  # Supported in v5.3+
  # v5.3-v8.1: The ID of the SLA Domain that is configured for the SAP HANA system.
  # v9.0+: Deprecated. Make sure to use the SLA APIs for updating the SLA Domain of the SAP HANA database.
  configuredSlaDomainId: String

  # Supported in v5.3+
  # The SAP HANA system hosts.
  hostIds: [String!] = []

  # Supported in v5.3+
  # The instance number of the SAP HANA system.
  instanceNumber: String

  # Supported in v5.3+
  # The password of the SAP HANA system.
  password: String

  # Supported in v5.3+
  # The SAP System Identification (SID) code for the SAP HANA system.
  sid: String

  # Supported in v5.3+
  # The username of the SAP HANA system.
  username: String

  # Supported in v7.0+
  # Information required to connect to SAP HANA database over SSL.
  sslInfo: SapHanaSslInfoInput

  # Supported in v9.0+
  # Specifies the authentication type for the SAP HANA system.
  authTypeSpec: SapHanaSystemAuthTypeSpecInput

  # Supported in v9.1+
  # The Rubrik ID of the SAP HANA Azure Feature.
  azureFeatureId: String
}
# SAP HANA system Physical Child Type.
interface SapHanaSystemPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of SapHanaSystemPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SapHanaSystemPhysicalChildTypeConnection {
  # List of SapHanaSystemPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SapHanaSystemPhysicalChildTypeEdge!]!

  # List of SapHanaSystemPhysicalChildType objects.
  nodes: [SapHanaSystemPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SapHanaSystemPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the SapHanaSystemPhysicalChildType object. This wrapper is used for pagination.
type SapHanaSystemPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SapHanaSystemPhysicalChildType object wrapped by this edge.
  node: SapHanaSystemPhysicalChildType!
}
# SAP HANA system status.
enum SapHanaSystemStatus {
  # Error while connecting to SAP HANA system.
  ERROR

  # SAP HANA system is successfully connected.
  OK

  # SAP HANA system is in the connecting stage.
  UNKNOWN_SYSTEM_STATUS

  # SAP HANA system is connected with warnings.
  WARNING
}
# Supported in v5.3+
type SapHanaSystemSummary {
  # Required. Supported in v5.3+
  hosts: [SapHanaHost!]!

  # Required. Supported in v5.3+
  # The ID of the SAP HANA system.
  id: String!

  # Required. Supported in v5.3+
  # The instance number of the SAP HANA system.
  instanceNumber: String!

  # Supported in v5.3+
  # The UTC timestamp for when the SAP HANA system was last refreshed.
  lastRefreshTime: DateTime

  # Required. Supported in v5.3+
  # The number of databases in the SAP HANA system.
  numDbs: Int!

  # Required. Supported in v5.3+
  # The SAP System Identification (SID) code for the SAP HANA system.
  sid: String!

  # Supported in v5.3+
  sslInfo: SapHanaSslInfo

  # Supported in v5.3+
  # The message associated with the current SAP HANA system status.
  statusMessage: String

  # Supported in v5.3+
  systemInfo: SapHanaSystemInfo

  # Required. Supported in v5.3+
  # The username of the SAP HANA system.
  username: String!

  # Supported in v7.0+
  # Specifies whether a SAP HANA system is archived.
  isArchived: Boolean

  # Details of the SLA Domain assigned to the SAP HANA system.
  slaAssignable: SlaAssignable

  # The container type of SAP HANA system.
  containerType: SapHanaSystemSummaryContainerType

  # Supported in v5.3+
  # The status of the SAP HANA system.
  status: SapHanaSystemSummaryStatus!
}
# Represents the SAP HANA system container types.
enum SapHanaSystemSummaryContainerType {
  # The type of SAP HANA system is multi-container.
  SAP_HANA_SYSTEM_SUMMARY_CONTAINER_TYPE_MULTI_CONTAINER

  # The type of SAP HANA system is single container.
  SAP_HANA_SYSTEM_SUMMARY_CONTAINER_TYPE_SINGLE_CONTAINER
}
# Represents the SAP HANA system status.
enum SapHanaSystemSummaryStatus {
  # The SAP HANA system is in ERROR state.
  SAP_HANA_SYSTEM_SUMMARY_STATUS_ERROR

  # The SAP HANA system is in OK state.
  SAP_HANA_SYSTEM_SUMMARY_STATUS_OK

  # The SAP HANA system is in UNKNOWN state.
  SAP_HANA_SYSTEM_SUMMARY_STATUS_UNKNOWN

  # The SAP HANA system is in WARNING state.
  SAP_HANA_SYSTEM_SUMMARY_STATUS_WARNING
}
type ScaleRuntime {
  oldCount: Int!
  newCount: Int!
  taskchainUuid: String!
  deadline: DateTime
}
# Metadata for rendering a scheduled report.
type ScheduledReport {
  # ID of the schedule of the custom report.
  id: Long!

  # Title of the report.
  title: String!

  # Rubrik user that created the report. If the user does not exist anymore, this stores a dummy inactive user.
  creator: User!

  # Rubrik user that last edited this schedule. If the user does not exist anymore, this stores a dummy inactive user.
  lastEditor: User!

  # The custom report ID corresponding to this scheduled report.
  reportId: Int!

  # Creation time of the schedule.
  createdAt: DateTime!

  # Last update time of the schedule.
  lastUpdatedAt: DateTime!

  # Time of the day for daily report delivery if the schedule has daily configuration.
  dailyTime: LocalTime

  # Time of the day for weekly report delivery if the schedule has weekly configuration.
  weeklyTime: LocalTime

  # Date of the month for report delivery if the schedule has monthly configuration.
  monthlyDate: Int

  # Time of the day for monthly report delivery if the schedule has monthly configuration.
  monthlyTime: LocalTime

  # List of attachment types for report delivery.
  attachmentTypes: [ReportAttachmentType!]!

  # List of Rubrik users that are the intended recipients of the scheduled report. Inactive users are not part of this list.
  rubrikRecipientUsers: [User!]!

  # List of email addresses of (non-Rubrik user) recipients of the scheduled report.
  recipientEmails: [String!]!

  # Weekdays for report delivery if weekly schedule is enabled.
  weeklyDays: [WeekDay!]
}
# Paginated list of ScheduledReport objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ScheduledReportConnection {
  # List of ScheduledReport objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ScheduledReportEdge!]!

  # List of ScheduledReport objects.
  nodes: [ScheduledReport!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ScheduledReport objects matching the request arguments.
  count: Int!
}
input ScheduledReportCreate {
  # ID of the report for which a schedule needs to be created.
  reportId: Int!

  # Title of the report.
  title: String!

  # Time of the day for daily report delivery.
  dailyTime: LocalTime

  # Time of the day for weekly report delivery on the configured weekdays.
  weeklyTime: LocalTime

  # Date of the month for monthly report delivery.
  monthlyDate: Int

  # Time of the day for monthly report delivery on the configured monthly date.
  monthlyTime: LocalTime

  # List of Rubrik user IDs that are the intended recipients of the scheduled report.
  rubrikRecipientUserIds: [String!]!

  # List of email addresses of non-Rubrik user recipients of the scheduled report.
  nonRubrikRecipientEmails: [String!]!

  # Specifies whether to update the creator with the current user. This is typically used when the user account that was the schedule creator has been deleted from Rubrik. It will be null in createScheduledReport.
  updateCreator: Boolean

  # List of weekdays for weekly schedule of reports.
  weeklyDays: [WeekDay!]

  # List of attachment types for report emails.
  attachmentTypes: [ReportAttachmentType!]
}
# Wrapper around the ScheduledReport object. This wrapper is used for pagination.
type ScheduledReportEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ScheduledReport object wrapped by this edge.
  node: ScheduledReport!
}
# Filters for the scheduled report list
input ScheduledReportFilterInput {
  reportId: Int
}
# Supported in v5.0+
# Action to take if the script returns an error or times out.
enum ScriptErrorAction {
  SCRIPT_ERROR_ACTION_ABORT
  SCRIPT_ERROR_ACTION_CONTINUE
}
# Additional information about the SCVMM.
type ScvmmInfo {
  # Version of the SCVMM.
  version: String!
}
# Filters for Security Descriptor resolution.
input SddlRequestFiltersInput {
  # Filter permissions for the security identifier.
  resultsForSid: String = ""
}
# Configuration for the searchAzureAdSnapshot API.
input SearchAzureAdSnapshotInput {
  # Snapshot ID to retrieve Azure AD objects.
  snapshotId: UUID!

  # Keyword used to search.
  azureAdSearchKeyword: String!

  # Azure AD object type.
  azureAdObjectType: AzureAdObjectType!

  # Type of the keyword.
  azureAdSearchKeywordType: AzureAdObjectSearchType!
}
# Parameters for mail or folder search.
input SearchFilter {
  searchKeywordFilter: SearchKeywordFilter
  emailAddresses: [EmailAddressFilter!] = []
  fromTime: DateTime
  untilTime: DateTime
  searchObjectFilter: SearchObjectFilter

  # Parameters for using Lambda filters in the query.
  lambdaFilters: LambdaPathFilters
}
# Search keyword and keyword type.
input SearchKeywordFilter {
  searchKeyword: String = ""
  keywordType: SearchKeywordType = SUBJECT
}
# Search keyword type for Mailbox search.
enum SearchKeywordType {
  # Search subject or folder name by keyword.
  ALL

  # Search folder name by keyword.
  FOLDER_NAME

  # Search subject field by keyword.
  SUBJECT
}
# Input for InternalSearchNutanixVm.
input SearchNutanixVmInput {
  # Pagination cursor returned by the previous request.
  cursor: String

  # Maximum number of entries in the response.
  limit: Int

  # Required. v5.0-v5.3: ID of the vm
  # v6.0-v8.0: ID of the vm.
  # v8.1+: ID of the virtual machine.
  id: String!

  # Required. The path query. Either path prefix or filename prefix.
  path: String!
}
# Search object type.
input SearchObjectFilter {
  searchObjectType: SearchObjectType = FOLDER
}
# Object type for Mailbox search.
enum SearchObjectType {
  # Search emails only.
  EMAIL

  # Search folders only.
  FOLDER
}
# Supported in v5.0+
type SearchResponse {
  # Supported in v5.0+
  # Just the filename without the whole path.
  filename: String

  # Supported in v5.0+
  path: String

  # Supported in v5.0+
  fileVersions: [FileVersion!]!
}
# Supported in v5.0+
type SearchResponseListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [SearchResponse!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
type SecurityGroup {
  id: String!
  name: String!
}
type SeedEnabledPoliciesReply {
  policies: [ClassificationPolicyDetail!]!
}
type SeedInitialPoliciesReply {
  policies: [ClassificationPolicyDetail!]!
}
# When an org member adds an object to Rubrik that matches the provided (`inventoryRoot`, `inventoryWorkloadType`) category, the org is granted all permission operations specified within the `operations` field on that new object.
type SelfServicePermission {
  # The inventory hierarchy root to which this set of permissions will apply.
  inventoryRoot: InventorySubHierarchyRootEnum!

  # The inventory workload type to which this set of permissions will apply.
  inventoryWorkloadType: WorkloadLevelHierarchy!

  # The operations granted to the org on newly added objects matching the provided `inventoryRoot` and `inventoryWorkloadType`.
  operations: [Operation!]!

  # The hierarchy root to which this set of permissions applies.
  hierarchyRoot: String!
}
# When an org member adds an object to Rubrik that matches the provided (`inventoryRoot`, `inventoryWorkloadType`) category, the org is granted all permission operations specified within the `operations` field on that new object.
input SelfServicePermissionInput {
  # The inventory hierarchy root to which this set of permissions will apply.
  inventoryRoot: InventorySubHierarchyRootEnum

  # The inventory workload type to which this set of permissions will apply.
  inventoryWorkloadType: WorkloadLevelHierarchy!

  # The operations granted to the org on newly added objects matching the provided `inventoryRoot` and `inventoryWorkloadType`.
  operations: [Operation!]!

  # The hierarchy root to which this set of permissions applies.
  hierarchyRoot: String
}
# Input for sending report email to one or more recipients.
input SendPdfReportInput {
  # User IDs of Rubrik user accounts receiving the report.
  rubrikRecipientUserIds: [String!]!

  # Email addresses of non-Rubrik user accounts receiving the report.
  nonRubrikRecipientEmailIds: [String!]!

  # The encryption password of the report.
  password: String!
}
# Response for the send now PDF request.
type SendPdfReportReply {
  # Korg job ID of the PDF generation job.
  taskchainUuid: String!
}
# Input for sending report email to one or more recipients.
input SendScheduledReportAsyncInput {
  # ID of the report that needs to be emailed.
  reportId: Int!

  # Auth0 IDs of Rubrik user recipients of the report.
  rubrikUserIds: [String!]

  # Email addresses of non-Rubrik user recipients of the report.
  nonRubrikUserEmails: [String!]

  # Report attachment types, which can be CSV, PDF, both, or none.
  attachmentTypes: [ReportAttachmentType!]
}
# Sensitive files for different risk categories.
type SensitiveFiles {
  # High-risk sensitive files.
  highRiskFileCount: SummaryCount

  # Medium-risk sensitive files.
  mediumRiskFileCount: SummaryCount

  # Low-risk sensitive files.
  lowRiskFileCount: SummaryCount

  # Total sensitive files.
  totalFileCount: SummaryCount
}
# Sensitive hits for different risk categories.
type SensitiveHits {
  # High-risk sensitive hits.
  highRiskHits: SummaryHits

  # Medium-risk sensitive hits.
  mediumRiskHits: SummaryHits

  # Low risk-sensitive hits.
  lowRiskHits: SummaryHits

  # Total sensitive hits.
  totalHits: SummaryHits
}
# A server can perform a wide range of roles.
enum ServerRoles {
  # DHCP.
  DHCP

  # DNS.
  DNS

  # Unknown server role.
  UNKNOWN_SERVER_ROLE
}
# Service Account.
type ServiceAccount {
  # Client ID of the service account.
  clientId: String!

  # Name of the service account.
  name: String!

  # Description of the service account.
  description: String!

  # Timestamp of the last login by the service account.
  lastLogin: DateTime

  # Roles assigned to the service account.
  roles: [Role!]!
}
# Paginated list of ServiceAccount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ServiceAccountConnection {
  # List of ServiceAccount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ServiceAccountEdge!]!

  # List of ServiceAccount objects.
  nodes: [ServiceAccount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ServiceAccount objects matching the request arguments.
  count: Int!
}
# Wrapper around the ServiceAccount object. This wrapper is used for pagination.
type ServiceAccountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ServiceAccount object wrapped by this edge.
  node: ServiceAccount!
}
# Fields by which service accounts may be sorted.
enum ServiceAccountSortBy {
  # Name of the service account.
  NAME
}
# Status of the Active Directory service.
enum ServiceStatus {
  # Active Directory service is pending to continue.
  CONTINUE_PENDING

  # Active Directory service is paused.
  PAUSED

  # Active Directory service is pending to pause.
  PAUSE_PENDING

  # Active Directory service status is refreshing.
  REFRESHING

  # Active Directory service is running.
  RUNNING

  # Active Directory service is pending to start.
  START_PENDING

  # Active Directory service is stopped.
  STOPPED

  # Active Directory service is pending to be stopped.
  STOP_PENDING

  # Active Directory service status is unknown.
  UNKNOWN
}
# Azure native service tiers.
enum ServiceTier {
  # Basic service tier.
  BASIC

  # Business critical service tier.
  BUSINESS_CRITICAL

  # General purpose service tier.
  GENERAL_PURPOSE

  # Hyperscale service tier.
  HYPERSCALE

  # Premium service tier.
  PREMIUM

  # Standard service tier.
  STANDARD
}
# Input for setting risk for analyzers.
input SetAnalyzerRisksInput {
  # List of risks to be set on analyzers.
  risks: [RiskInput!]!
}
# Reply for SetAnalyzerRisk.
type SetAnalyzerRisksReply {
  # Analyzers updated by the API.
  analyzers: [Analyzer!]!
}
# Input for setting the app credentials in the Azure Cloud Accounts.
input SetAzureCloudAccountCustomerAppCredentialsInput {
  # Client ID of the Application.
  appId: String!

  # Client secret key of the Application.
  appSecretKey: String!

  # ID of the home tenant of the application.
  appTenantId: String

  # Name of the application.
  appName: String

  # Domain Name of the Azure tenant.
  tenantDomainName: String

  # Specifies whether the input app should replace the existing app.
  shouldReplace: Boolean!

  # Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud.
  azureCloudType: AzureCloudType! = AZUREPUBLICCLOUD
}
# Input to set customer-specified tags for a particular cloud type.
input SetCustomerTagsInput {
  # Cloud provider type for which customer-specified tags are to be set.
  cloudVendor: CloudVendor!

  # List all customer-specified tags that need to be applied to all resources associated with a specified cloud type.
  # For example, {"Application":"Rubrik", "Environment":"Dev", "CreatedDate":"10/07/2023"}.
  customerTags: TagsInput!

  # Specifies whether customer-specified tags should override resource tags. By default, this is true.
  shouldOverrideResourceTags: Boolean!
}
# Set datastore freespace threshold.
input SetDatastoreFreespaceThresholdInput {
  # Required. UUID of the Rubrik cluster the request goes to.
  clusterUuid: UUID!

  # Required. JSON object for setting datastore freespace threshold.
  datastoreFreespaceThreshold: VmwareDatastoreFreespaceThresholdInput!
}
# Set datastore freespace thresholds.
input SetDatastoreFreespaceThresholdsInput {
  # List of datastore freespace threshold configurations to set.
  thresholds: [SetDatastoreFreespaceThresholdInput!]!
}
# Response of the mutation that sets datastore freespace thresholds.
type SetDatastoreFreespaceThresholdsReply {
  # Datastore freespace threshold configuration.
  thresholds: [DatastoreFreespaceThresholdType!]!
}
# MFA settings to update for a LDAP integration.
input SetLdapMfaSettingInput {
  # ID of the LDAP integration.
  ldapId: String = ""

  # Optional boolean value indicating whether TOTP is enforced for the given LDAP integration. If omitted, existing value of the setting is kept.
  isTotpEnforced: Boolean
}
# MFA settings to update for an account.
input SetMfaSettingInput {
  # Optional boolean value indicating whether TOTP is globally enforced. If omitted, existing value of the setting is kept.
  isTotpEnforcedGlobal: Boolean

  # Optional integer value indicating the period of showing TOTP configuration reminder in hours. If omitted, existing value of the setting is kept.
  totpReminderHours: Int

  # Optional integer value indicating the time of remembering the MFA login in hours. If omitted, existing value of the setting is kept.
  mfaRememberHours: Int
}
# Specifies the input to set password complexity policy for the organization.
input SetPasswordComplexityPolicyInput {
  # Password complexity policy for the organization.
  policy: PasswordComplexityPolicyInput!
}
# Custom certs to be added for org's Service Provider.
input SetSsoCertificateInput {
  # ID of the certificate to be added.
  certificateId: Int!

  # SSO Certificate type enum.
  certificateType: SsoCertificateType!
}
input SetTotpConfigInput {
  userId: String = ""

  # TOTP secret for setting up TOTP as 2FA.
  secret: String = ""

  # TOTP one-time password.
  otp: String = ""
}
# Set upgrade type in cluster.
input SetUpgradeTypeInput {
  # Cluster UUID.
  clusterUuid: UUID!

  # Upgrade type.
  upgradeType: UpgradeType!
}
# Response for the operation of setting the upgrade type for a cluster.
type SetUpgradeTypeReply {
  # Status of the request.
  code: String!

  # Response message for the request.
  message: String!

  # Exceptions encountered by the request.
  excepshuns: String!
}
input SetUserLevelTotpEnforcementInput {
  # Users for whom TOTP is enforced.
  userIds: [String!] = []

  # Indicate if TOTP is enforced at user level.
  isEnforced: Boolean = false
}
input SetWebSignedCertificateInput {
  # Required. Request to update certificate for web server.
  certificatePayload: WebServerCertificatePayloadInput!

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Input required for setting workload alert.
input SetWorkloadAlertSettingInput {
  # Cluster ID of the workload.
  clusterId: String = ""

  # Fid of the workload.
  workloadFid: String = ""

  # Specifies whether alerts should be enabled or not enabled.
  enabled: Boolean = false
}
# Enable or disable Ransomware Investigation alerts for a workload.
type SetWorkloadAlertSettingReply {
  # Specifies whether anomaly alerts are enabled or not.
  enabled: Boolean!
}
type SetupAzureO365ExocomputeResp {
  clusterId: String!
  taskchainId: String!
}
# Input required to setup backups.
input SetupCloudNativeSqlServerBackupInput {
  # Rubrik IDs of the SQL Server databases.
  databaseIds: [UUID!]!

  # Credentials for the admin in the databases.
  adminCredentials: LoginCredentials

  # Mechanism for SQL Server authentication.
  authMechanism: SqlAuthenticationMechanism

  # Session ID for the OAuth session.
  sessionId: String
}
input SetupDiskInput {
  # Required. ID of an unformatted disk to set up.
  diskId: String!

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Cloud Direct shares.
type ShareExportIdPair {
  # Name of Cloud Direct share.
  share: String!

  # Export ID of selected share.
  exportId: Int!
}
# Share fileset.
type ShareFileset implements CdmHierarchyObject , CdmHierarchySnappableNew , HierarchyObject , HierarchySnappable , HostShareDescendantType , HostSharePhysicalChildType , PhysicalHostDescendantType , PhysicalHostPhysicalChildType , FilesetTemplateDescendantType , FilesetTemplatePhysicalChildType {
  # ID of the CDM cluster.
  cdmId: String!

  # List of paths included in the fileset.
  pathIncluded: [String!]!

  # List of paths excluded in the fileset.
  pathExcluded: [String!]!

  # Variable denoting path exceptions.
  pathExceptions: [String!]!

  # Boolean variable denoting if the host share is relic.
  isRelic: Boolean!

  # Boolean variable denoting if this is a NAS Direct Archive fileset.
  isPassThrough: Boolean!

  # Boolean variable denoting if symlink resolution is enabled.
  symlinkResolutionEnabled: Boolean!

  # Boolean variable denoting if hard link support is enabled.
  hardlinkSupportEnabled: Boolean!

  # Information pertaining to migration of the NAS host from Rubrik CDM to RSC.
  nasMigrationInfo: String!

  # Share type of the fileset.
  shareType: ShareTypeEnum!

  # Host of this share fileset.
  host: PhysicalHost

  # Includes statistics for the protected objects, for example, archive storage.
  reportWorkload: Snappable

  # HostShare of this ShareFileset.
  share: HostShare

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# SharePoint descendant object type.
enum SharePointDescendantType {
  # Unspecified type.
  DESCENDANT_UNSPECIFIED

  # Library SharePoint descendant type.
  LIBRARY

  # List SharePoint descendant type.
  LIST

  # Site SharePoint descendant type.
  SITE

  # Webpart SharePoint descendant type.
  WEBPART
}
# Represents the sharepoint doc lib contents to be restored.
input SharePointDriveRestoreConfig {
  driveRestoreConfig: DriveRestoreConfig!
  docLibName: String
  parentSiteUuid: UUID
}
# Represents the objects or items to be restored from a site collection. Either the SharePoint object or SharePoint items should be populated, but not both.
input SharePointFullRestoreConfig {
  # The object (list, document library, web part, or site) to restore.
  spObjectToRestore: SharePointObject

  # The items to restore, if browsing within a document library, list, or web part.
  spItemsToRestore: SharePointItems

  # The Polaris ID of the target when restoring to a new location.
  targetObjectUuid: UUID

  # Type of the target.
  targetObjectType: SnappableType

  # Create a new object under the target if true.
  shouldCreateNewObject: Boolean!

  # Type of object to create under the target.
  newObjectType: SnappableType

  # The name for the new object.
  newObjectName: String
}
# Represents the SharePoint items in a site collection to be restored.
input SharePointItems {
  # ID of the object in SharePoint Online.
  sharepointId: String!

  # Type of the parent object.
  snappableType: SnappableType

  # The list items to restore when the parent object is a list.
  listItems: [SharePointListItem!]!

  # The folder items to restore.
  folderItems: [FolderInfo!]!

  # The files to restore when the parent object is a document library.
  fileItems: [FileInfo!]!

  # Specifies whether these SharePoint items are Page Library items or not.
  arePageLibraryItems: Boolean!
}
# Represents the SharePoint list item to be restored.
input SharePointListItem {
  # ID of the item to restore.
  itemId: String!

  # Name of the item to restore.
  itemName: String!

  # List of snapshots of this item to restore.
  itemSnapshotsToRestore: [SharePointListItemSnapshot!]!
}
# Represents the SharePoint list item snapshot to be restored.
input SharePointListItemSnapshot {
  # Id to snapshot to restore.
  snapshotId: UUID!

  # Number of snapshot to restore.
  snapshotNum: Int!
}
# Represents the sharepoint list contents to be restored.
input SharePointListRestoreConfig {
  # List of list items to restore.
  itemsToRestore: [SharePointListItem!]!

  # List of list folders to restore.
  foldersToRestore: [FolderInfo!]!

  # Path within destination list to restore to.
  restoreFolderPath: String!

  # Destination list name.
  listName: String

  # Destination site ID.
  parentSiteUuid: UUID
}
# Represents the SharePoint object (document library, list, site, or web part) to be restored.
input SharePointObject {
  # ID of the object in SharePoint Online.
  objectSharepointId: String!

  # Name or title of the object.
  objectName: String!

  # Type of the object.
  objectType: SnappableType

  # UUID of the snapshot for recovery.
  snapshotId: UUID!

  # Sequence number of the snapshot.
  snapshotNum: Int!

  # Site owner for restored site.
  siteOwnerEmail: String
}
# Parameters for SharePoint site descendant search.
input SharePointSearchFilter {
  # Filters by keywords appearing in the descendant object name.
  searchKeywordFilter: SharePointSearchKeywordFilter

  # Filters by modified time.
  modifiedTime: TimeRangeFilter

  # Filters by on create time.
  createTime: TimeRangeFilter

  # Filters by object type (site, library, list or all).
  searchObjectFilter: SharePointSearchObjectFilter

  # Parameters for using Lambda filters in the query.
  lambdaFilters: LambdaPathFilters
}
# SharePoint search keyword and keyword type.
input SharePointSearchKeywordFilter {
  # The keyword used to search.
  searchKeyword: String = ""

  # Type of the keyword.
  keywordType: SharePointSearchKeywordType = KEYWORD_UNSPECIFIED
}
# The keyword filter for SharePoint search.
enum SharePointSearchKeywordType {
  # Unspecified keyword type.
  KEYWORD_UNSPECIFIED

  # Search by object name.
  NAME
}
# SharePoint search object type.
input SharePointSearchObjectFilter {
  # Object type to filter search results.
  searchObjectType: SharePointSearchObjectType = OBJECT_UNSPECIFIED
}
# Object type to constrain the search against.
enum SharePointSearchObjectType {
  # Search all.
  ALL

  # Search library only.
  LIBRARY

  # Search list only.
  LIST

  # Unspecified object type.
  OBJECT_UNSPECIFIED

  # Search site only.
  SITE

  # Search webpart only.
  WEBPART
}
# Share type for fileset.
enum ShareTypeEnum {
  # NFS share.
  NFS

  # Not shared.
  NoShareType

  # SMB share.
  SMB
}
# Specifies whether the change should be applied to existing snapshots.
input ShouldApplyToExistingSnapshots {
  # True or false.
  value: Boolean = false
}
# Specifies whether the change should be applied to non-policy snapshots.
input ShouldApplyToNonPolicySnapshots {
  # True or false.
  value: Boolean = false
}
# Information about the Rubrik cluster where the archival location is created.
type SlaArchivalCluster {
  # ID of the Rubrik cluster.
  id: UUID!

  # Name of the cluster.
  name: String!
}
# Response for Assign SLA Domain Result.
type SlaAssignResult {
  # Returns true for successful assignment otherwise false.
  success: Boolean!
}
# SLA Domain assignment type.
enum SlaAssignTypeEnum {
  # Do not protect SLA Domain assignment type.
  doNotProtect

  # No SLA Domain assignment.
  noAssignment

  # Protected with an SLA Domain.
  protectWithSlaId
}
# Supported in v5.0+
type SlaAssignable {
  # Required. Supported in v5.0+
  # v5.0-v5.1: ID of the configured SLA domain
  # v5.2+: The ID of the SLA Domain configured directly on the Rubrik object.
  configuredSlaDomainId: String!

  # Required. Supported in v5.0+
  # v5.0-v5.1: name of the configured SLA domain
  # v5.2+: The name of the SLA Domain configured directly on the Rubrik object.
  configuredSlaDomainName: String!

  # Required. Supported in v5.0+
  # v5.0-v5.1:
  # v5.2+: The ID of the Rubrik object.
  id: String!

  # Required. Supported in v5.0+
  # v5.0-v5.1:
  # v5.2+: The name of the Rubrik object.
  name: String!

  # Required. Supported in v5.0+
  # v5.0-v5.1:
  # v5.2+: The ID of the cluster that manages the Rubrik object.
  primaryClusterId: String!

  # Supported in v5.1+
  # v5.1: A Boolean that indicates whether the configured SLA domain is Retention Locked. When this value is 'true', the configured SLA domain is a Retention Lock SLA Domain.
  # v5.2+: Indicates whether the configured SLA Domain is Retention Locked. When this value is 'true', the configured SLA Domain is a Retention Lock SLA Domain.
  isConfiguredSlaDomainRetentionLocked: Boolean

  # Supported in v5.2+
  # The UTC time when the SLA Domain was last updated.
  slaLastUpdateTime: DateTime
  configuredSlaDomainType: ConfiguredSlaType
}
# Supported in v5.0+
# Specifies the method used to apply an SLA Domain to an object. Possible values are Derived, Direct, and Unassigned.
enum SlaAssignment {
  SLA_ASSIGNMENT_DERIVED
  SLA_ASSIGNMENT_DIRECT
  SLA_ASSIGNMENT_UNASSIGNED
}
enum SlaAssignmentTypeEnum {
  Derived
  Direct
  Unassigned
}
# Details of an organization associated with an SLA Domain.
type SlaAssociatedOrganization {
  # Name of the organization.
  name: String!

  # ID of the organization.
  id: UUID!
}
# Audit log of SLA Domain changes based on user action.
type SlaAuditDetail {
  # Name of the user who performed the create or edit action on the SLA Domain.
  userName: String!

  # The action (create/update/delete) performed on the SLA Domain.
  userAction: String!

  # Specifies whether to apply changes to existing snapshots.
  applyToExistingSnapshots: Boolean!

  # The time at which the user performed this action on the SLA Domain.
  timestamp: DateTime

  # Specifies whether to apply changes to on-demand and downloaded snapshots.
  applyToOndemandAndDownloadedSnapshots: Boolean

  # Current SLA Domain summary.
  currentSlaSummary: SlaDomain

  # SLA Domain summary before edit or update.
  previousSlaSummary: SlaDomain

  # Rubrik cluster UUID.
  cluster: Cluster
}
# SLA Domain time range.
enum SlaComplianceTimeRange {
  # Past 24 hours.
  LAST_24_HOURS

  # Last 2 snapshots.
  LAST_2_SNAPSHOTS

  # Last 3 snapshots.
  LAST_3_SNAPSHOTS

  # Last snapshot.
  LAST_SNAPSHOT

  # Past 30 days.
  PAST_30_DAYS

  # Past 365 days.
  PAST_365_DAYS

  # Past 7 days.
  PAST_7_DAYS

  # Past 90 days.
  PAST_90_DAYS

  # Start of protection.
  SINCE_PROTECTION
}
# Configuration of the SLA of a snapshot.
type SlaConfig {
  # ID of the SLA.
  id: String!

  # Name of the SLA.
  name: String!
}
interface SlaDomain {
  # The ID of the SLA Domain.
  id: String!

  # The name of the SLA Domain.
  name: String!

  # The version of the SLA Domain.
  version: String

  # The object-specific configurations of the SLA Domain.
  objectSpecificConfigs: ObjectSpecificConfigs
}
# Paginated list of SlaDomain objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SlaDomainConnection {
  # List of SlaDomain objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SlaDomainEdge!]!

  # List of SlaDomain objects.
  nodes: [SlaDomain!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SlaDomain objects matching the request arguments.
  count: Int!
}
# Wrapper around the SlaDomain object. This wrapper is used for pagination.
type SlaDomainEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SlaDomain object wrapped by this edge.
  node: SlaDomain!
}
# Input to SLA Domain duration.
input SlaDurationInput {
  # Duration of SLA Domain.
  duration: Int = 0

  # Unit of duration.
  unit: RetentionUnit = MINUTES
}
# Summary of SLA Domain name and ID.
type SlaInfo {
  # SLA Domain ID.
  id: String!

  # SLA Domain name.
  name: String!
}
# SLA Domain log frequency configuration.
input SlaLogFrequencyConfig {
  # Retention of the log frequency configuration.
  retention: SlaDurationInput
}
# SLA Domain log frequency configuration.
type SlaLogFrequencyConfigResult {
  # Retention of the log frequency configuration.
  retention: Duration
}
# Supported in v5.3+
input SlaManagedVolumeClientConfigInput {
  # Supported in v5.3+
  # v5.3-v6.0: Specifies configuration information for the optional post-backup script that runs after data backup failed.
  # v7.0+: Specifies configuration information for the optional post-backup script that runs if data backup fails.
  postBackupScriptOnBackupFailure: SlaManagedVolumeScriptConfigInput

  # Supported in v5.3+
  # v5.3-v6.0: Specifies configuration information for the optional post-backup script that runs after data backup is complete.
  # v7.0+: Specifies configuration information for the optional post-backup script that runs after data backup completes.
  postBackupScriptOnBackupSuccess: SlaManagedVolumeScriptConfigInput

  # Supported in v5.3+
  # Specifies configuration information for the optional pre-backup script that runs before data backup begins.
  preBackupScript: SlaManagedVolumeScriptConfigInput

  # Supported in v5.3+
  # Specifies whether a failure of the pre-backup script halts the backup process.
  shouldCancelBackupOnPreBackupScriptFailure: Boolean

  # Supported in v9.0+
  # Specifies whether log streaming should be enabled for the specified Managed Volume.
  shouldEnableLogExport: Boolean

  # Required. Supported in v5.3+
  # Specifies configuration information for the main backup script that backs up data from the host.
  backupScript: SlaManagedVolumeScriptConfigInput!

  # Required. Supported in v5.3+
  # v5.3-v6.0: A list of mount paths where the host mounts individual channels for managed volumes.
  # v7.0+: A list of mount paths where the host mounts individual channels for Managed Volumes.
  channelHostMountPaths: [String!]!

  # Required. Supported in v5.3+
  # v5.3-v6.0: The ID of the host that mounts the managed volume channels and where the backup scripts run.
  # v7.0+: The ID of the host that mounts the Managed Volume channels and location where the backup scripts are run.
  clientHostId: String!

  # Required. Supported in v5.3+
  # v5.3-v6.0: The name of the user that runs the scripts on the host.
  # v7.0+: Name of the user running the scripts on the host.
  username: String!
}
# Supported in v5.3+
type SlaManagedVolumeDetail {
  # Required. Supported in v5.3+
  # Backup script specifications.
  backupScriptDetails: SlaManagedVolumeScriptSummary

  # Required. Supported in v5.3+
  # v5.3-v6.0: List of paths the host uses to mount individual channels for managed volumes.
  # v7.0: List of paths the host uses to mount individual channels for SLA Managed Volumes.
  # v8.0+: List of paths the host uses to mount individual channels for Managed Volumes.
  channelHostMountPaths: [String!]!

  # Required. Supported in v5.3+
  # Configuration of the host on which the SLA Managed Volume channels are mounted.
  hostDetails: SlaManagedVolumeHostSummary

  # Supported in v5.3+
  # v5.3-v6.0: Specifications of the script run after unsuccessful backup.
  # v7.0+: Specifications of the script run after an unsuccessful backup.
  postBackupScriptOnBackupFailureDetails: SlaManagedVolumeScriptSummary

  # Supported in v5.3+
  # v5.3-v6.0: Specifications of the script run after successful backup.
  # v7.0+: Specifications of the script run after a successful backup.
  postBackupScriptOnBackupSuccessDetails: SlaManagedVolumeScriptSummary

  # Supported in v5.3+
  # Specifications of the script run prior to backup.
  preBackupScriptDetails: SlaManagedVolumeScriptSummary

  # Supported in v5.3+
  # Indicates if a failure of the script run prior to backup halts the backup process.
  shouldCancelBackupOnPreBackupScriptFailure: Boolean

  # Supported in v9.0+
  # Log export specifications.
  logExportSummary: SlaManagedVolumeLogExportSummary

  # Supported in v9.0+
  # Indicates if log export is enabled for the specified Managed Volume.
  isLogExportEnabled: Boolean
}
# Supported in v5.3+
type SlaManagedVolumeHostSummary {
  # Required. Supported in v5.3+
  # v5.3: ID of the host mounting the managed volume channels and running the scripts
  # v6.0: ID of the host mounting the managed volume channels and running the scripts.
  # v7.0: ID of the host mounting the SLA Managed Volume channels and running the scripts.
  # v8.0+: ID of the host mounting the Managed Volume channels and running the scripts.
  hostId: String!

  # Required. Supported in v5.3+
  # The name of the host on which the SLA Managed Volume channels are mounted.
  hostName: String!

  # Required. Supported in v5.3+
  # The type of the operating system running on the host. Possible responses are `Linux`, `Windows` and `UnixLike`.
  operatingSystemType: String!

  # Required. Supported in v5.3+
  # v5.3-v6.0: The status of the Rubrik Backup Service (RBS) installed on the managed volume host. Possible responses are `Connected`, `Disconnected` and `REPLICATION_TARGET` when the host is being replicated from a separate Rubrik cluster.
  # v7.0: Status of the Rubrik Backup Service (RBS) installed on the SLA Managed Volume host. Possible responses are `Connected`, `Disconnected`, and `REPLICATION_TARGET` when the host is being replicated from a separate Rubrik cluster.
  # v8.0+: Status of the Rubrik Backup Service (RBS) installed on the Managed Volume host. Possible responses are `Connected`, `Disconnected`, and `REPLICATION_TARGET` when the host is being replicated from a separate Rubrik cluster.
  rubrikBackupServiceStatus: String!
}
# Supported in v9.0+
# Log export summary of the SLA Managed Volume.
type SlaManagedVolumeLogExportSummary {
  # Required. Supported in v9.0+
  # Path on the client host machine where log export for the SLA Managed Volume is mounted. Note that this path is created and managed by Rubrik. Changing permissions on this path can result in unexpected behavior.
  clientLogMountPath: String!
}
# Supported in v5.3+
input SlaManagedVolumeScriptConfigInput {
  # Supported in v5.3+
  # v5.3-v6.0: An optional timeout for the script in seconds. When this value is 0 or unspecified no timeout is used.
  # v7.0+: Optional timeout, in seconds, for the script. When this value is 0 or unspecified, the script does not use a timeout.
  timeout: Long

  # The full command, with arguments, to run the script.
  scriptCommand: String!
}
# Supported in v5.3+
type SlaManagedVolumeScriptSummary {
  # Required. Supported in v5.3+
  # Name of the user running the script on the host.
  runAsUser: String!

  # Required. The full command, with arguments, to run the script.
  scriptCommand: String!

  # Supported in v5.3+
  # (Optional) Timeout period, in seconds, for the script. Specifying 0, or not including a value, indicates there is no timeout period.
  timeout: Long
}
# Reasons for the SLA being ineligible for migration.
enum SlaMigrationIneligibilityReason {
  # The remote SLA Domain has an archival policy configured, which is not supported in Rubrik currently.
  CASCADED_ARCHIVAL_CONFIGURED

  # Rubrik cluster associated with the SLA Domain is disconnected.
  CLUSTER_DISCONNECTED

  # To upgrade to retention-locked SLA Domain in compliance mode, contact Rubrik Support to enable compliance mode. Also, make sure quorum authorization is enabled in RSC and your Rubrik cluster is running CDM version 7.0.2 or later.
  COMPLIANCE_RETENTION_LOCK_CONFIGURED

  # To upgrade to a retention-locked SLA Domain in governance mode, make sure quorum authorization is enabled in RSC and your Rubrik cluster is running CDM version 9.0.1 or later.
  GOVERNANCE_RETENTION_LOCK_CONFIGURED

  # The commercial instance of RSC doesn't support archival to GovCloud regions. Contact the Rubrik Support team for more information.
  GOV_CLOUD_ARCHIVAL_LOCATION_REGISTERED_ON_CLUSTER

  # This SLA Domain has cascading archival configured. However, the Rubrik CDM version on the replication target cluster does not support migration of SLA Domains with cascading archival configured.
  INVALID_CASCADING_ARCHIVAL_VERSION

  # The version of the Rubrik cluster associated with the SLA Domain is not valid for SLA migration.
  INVALID_CLUSTER_VERSION

  # SLA Domain is not associated with a Rubrik cluster.
  INVALID_LOCAL_SLA

  # The type of replication targets is invalid for migration.
  INVALID_REPLICATION_TARGET

  # Replication targets associated with the SLA Domain have invalid cluster version for migration.
  INVALID_REPLICATION_TARGET_VERSION

  # The SLA Domain has frequency configured in minutes, which is currently not supported in Rubrik.
  MINUTE_FREQUENCY_CONFIGURED

  # SLA Domain is eligible for migration.
  NOT_APPLICABLE

  # Replication targets associated with the SLA Domain are disconnected.
  REPLICATION_TARGET_DISCONNECTED

  # The SLA Domain has retention lock configured, which is not supported in Rubrik currently.
  RETENTION_LOCK_CONFIGURED

  # The Two-person rule is enabled on the Rubrik cluster, which is not supported for SLA Domain migration.
  TPR_ENABLED_ON_CLUSTER

  # The SLA Domain is protecting some objects which are currently not supported for upgrade.
  UNSUPPORTED_PROTECTED_OBJECTS

  # The SLA Domain has frequency configured in minutes, which is currently not supported for objects other than Managed Volumes.
  UNSUPPORTED_PROTECTED_OBJECTS_MINUTE_FREQUENCY_CONFIGURED
}
# SLA Domain migration status.
enum SlaMigrationStatus {
  # Failed.
  FAILED

  # In progress.
  IN_PROGRESS

  # Stuck.
  STUCK

  # Succeeded.
  SUCCEEDED
}
# Type of objects managed by SLA Domains.
enum SlaObjectType {
  # Active Directory object.
  ACTIVE_DIRECTORY_OBJECT_TYPE

  # Atlassian Jira object.
  ATLASSIAN_JIRA_OBJECT_TYPE

  # AWS EC2 EBS object.
  AWS_EC2_EBS_OBJECT_TYPE

  # AWS RDS object.
  AWS_RDS_OBJECT_TYPE

  # AWS S3 object.
  AWS_S3_OBJECT_TYPE

  # Azure Active Directory object.
  AZURE_AD_OBJECT_TYPE

  # Azure Blob object.
  AZURE_BLOB_OBJECT_TYPE

  # Azure object.
  AZURE_OBJECT_TYPE

  # Azure SQL Database object.
  AZURE_SQL_DATABASE_OBJECT_TYPE

  # Azure SQL Managed Instance object.
  AZURE_SQL_MANAGED_INSTANCE_OBJECT_TYPE

  # Cassandra object.
  CASSANDRA_OBJECT_TYPE

  # Db2.
  DB2_OBJECT_TYPE

  # Microsoft Exchange.
  EXCHANGE_OBJECT_TYPE

  # Fileset object.
  FILESET_OBJECT_TYPE

  # GCP object.
  GCP_OBJECT_TYPE

  # HyperV SLA Domain object.
  HYPERV_OBJECT_TYPE

  # CDM Native K8s object.
  K8S_OBJECT_TYPE

  # Kubernetes object.
  KUPR_OBJECT_TYPE

  # Managed Volume object.
  MANAGED_VOLUME_OBJECT_TYPE

  # MongoDB object.
  MONGODB_OBJECT_TYPE

  # CDM Mongo object.
  MONGO_OBJECT_TYPE

  # MSSQL object.
  MSSQL_OBJECT_TYPE

  # NAS object.
  NAS_OBJECT_TYPE

  # Nutanix object.
  NUTANIX_OBJECT_TYPE

  # Office 365 object.
  O365_OBJECT_TYPE

  # Oracle object.
  ORACLE_OBJECT_TYPE

  # PostgreSQL DB Cluster object.
  POSTGRES_DB_CLUSTER_OBJECT_TYPE

  # SAP HANA object.
  SAP_HANA_OBJECT_TYPE

  # SnapMirror Cloud object.
  SNAPMIRROR_CLOUD_OBJECT_TYPE

  # Unknown object.
  UNKNOWN_OBJECT_TYPE

  # VCD vApp object.
  VCD_OBJECT_TYPE

  # Volume group object.
  VOLUME_GROUP_OBJECT_TYPE

  # VSphere object.
  VSPHERE_OBJECT_TYPE
}
# Sort Global SLA Domains by field name.
enum SlaQuerySortByField {
  # Sort by SLA Domain name.
  NAME

  # Sort by SLA Domain paused cluster count.
  PAUSED_CLUSTER_COUNT

  # Sort by SLA Domain protected object count.
  PROTECTED_OBJECT_COUNT

  # Sort by SLA Domain retention time.
  RETENTION
}
# Replication cluster specific information.
type SlaReplicationCluster {
  # ID of the replication cluster.
  id: UUID!

  # Name of the replication cluster.
  name: String!

  # Version of the replication cluster.
  version: String
}
# Fields to return the status of SLA Domains based on the specified value.
enum SlaStatusFilterField {
  # Returns the status of all SLA Domains on the Rubrik cluster identified by the cluster name.
  CLUSTER_NAME

  # Returns the status of all SLA Domains on the Rubrik cluster identified by the cluster ID.
  CLUSTER_UUID

  # This filter takes boolean values: true or false. When true, it returns the Rubrik clusters where the SLA Domain is paused. When false, it returns the Rubrik clusters where the SLA Domain is not paused.
  PAUSE_STATUS
}
# Filter for SlaStatus.
input SlaStatusFilterInput {
  # Field for SLA Status Filter.
  field: SlaStatusFilterField = CLUSTER_NAME

  # Text for SLA Status Filter.
  text: String = ""
}
# Status of the latest attempt to sync the SLA Domain to the clusters.
enum SlaSyncStatus {
  # Sync failed.
  FAILED

  # Sync not attempted.
  NOT_ATTEMPTED

  # Sync pending.
  PENDING

  # Sync successful.
  SUCCEEDED
}
# Supported in v5.0+
# Units for frequency and retention. Accepted values are Minute, Hourly, Daily, Weekly, Monthly, Quarterly, and Yearly.
enum SlaTimeUnit {
  SLA_TIME_UNIT_DAILY
  SLA_TIME_UNIT_HOURLY
  SLA_TIME_UNIT_MINUTE
  SLA_TIME_UNIT_MONTHLY
  SLA_TIME_UNIT_QUARTERLY
  SLA_TIME_UNIT_WEEKLY
  SLA_TIME_UNIT_YEARLY
}
# Information about the most recently attempted SLA Domain upgrade.
type SlaUpgrade {
  # Status of the upgrade.
  status: SlaMigrationStatus!

  # Failure message.
  msg: String!

  # Taskchain ID for upgrade.
  taskchainId: String!
}
# Information about eligibility of the SLA Domain for upgrade.
type SlaUpgradeEligibility {
  # Specifies whether the SLA Domain is eligible for upgrade.
  isEligible: Boolean!

  # Reason for the SLA Domain being ineligible for upgrade.
  ineligibilityReason: SlaMigrationIneligibilityReason!
}
# SLA Domain upgrade information.
type SlaUpgradeInfo {
  # Information about eligibility of the SLA Domain for upgrade.
  eligibility: SlaUpgradeEligibility

  # Information about the most recently attempted SLA Domain upgrade.
  latestUpgrade: SlaUpgrade
}
# Authentication status of SMB domains.
enum SmbAuthenticationStatus {
  # SMB domain authorization is configured.
  CONFIGURED

  # SMB domain authorization failed.
  FAILED

  # SMB domain authorization is not configured.
  NOT_CONFIGURED

  # SMB Domain authorization is unspecified.
  UNSPECIFIED
}
# Supported in v5.0+
type SmbConfig {
  # Required. Supported in v5.0+
  # A Boolean that specifies whether or not the cluster enforces SMB security. When this value is 'true,' SMB security is enforced. When this value is 'false,' SMB security is not enforced. The default value is 'false.'
  enforceSmbSecurity: Boolean!
}
# Supported in v5.0+
input SmbConfigInput {
  # Required. Supported in v5.0+
  # A Boolean that specifies whether or not the cluster enforces SMB security. When this value is 'true,' SMB security is enforced. When this value is 'false,' SMB security is not enforced. The default value is 'false.'
  enforceSmbSecurity: Boolean!
}
# SMB domain.
type SmbDomain {
  # Name of the SMB domain.
  name: String!

  # Domain ID of SMB domain.
  domainId: String!

  # Account name of SMB domain.
  accountName: String!

  # Specifies if the SMB domain is archived.
  isArchived: Boolean!

  # Authentication status of the SMB domain.
  status: SmbAuthenticationStatus!

  # ID of the SMB domain.
  id: UUID!

  # Cluster of the SMB domain.
  cluster: Cluster!
}
# Supported in v5.0+
input SmbDomainAddRequestInput {
  smbDomainJoinRequest: SmbDomainJoinRequestInput

  # Required. Supported in v5.0+
  # Specifies name to identify Active Directory domain for SMB authentication.
  name: String!
}
# Paginated list of SmbDomain objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SmbDomainConnection {
  # List of SmbDomain objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SmbDomainEdge!]!

  # List of SmbDomain objects.
  nodes: [SmbDomain!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SmbDomain objects matching the request arguments.
  count: Int!
}
# Supported in v5.0+
type SmbDomainDetail {
  # Required. Supported in v5.0+
  # A Boolean value that determines whether to run the SMB service when no shares are exposed. When this value is 'true,' the SMB service runs even when no shares are exposed. When this value is 'false,' the SMB service does not run when no shares are exposed.
  isStickySmbService: Boolean!

  # Required. Supported in v5.0+
  # Specifies name to identify Active Directory domain for SMB authentication.
  name: String!

  # Supported in v5.0+
  # Specifies the service principal name (SPN) used for joining the Active Directory domain.
  serviceAccount: String

  # Supported in v5.0+
  # State of the domain.
  status: SmbDomainStatus!
}
# Wrapper around the SmbDomain object. This wrapper is used for pagination.
type SmbDomainEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SmbDomain object wrapped by this edge.
  node: SmbDomain!
}
# Filter for SMB domain results.
enum SmbDomainFilterField {
  # Filters SMB domain results by Rubrik cluster UUID.
  CLUSTER_UUID

  # Filters SMB domain result by SMB domain name.
  DOMAIN_NAME

  # Filter is not specified. Any filter text would not be considered.
  FIELD_UNSPECIFIED

  # Filters SMB domain result by configuration status.
  STATUS
}
# Filter SMB domain results.
input SmbDomainFilterInput {
  # Type of filter.
  field: SmbDomainFilterField = FIELD_UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Supported in v5.0+
input SmbDomainJoinRequestInput {
  # Supported in v5.0+
  # Specifies the computer user and service principal name to create while joining Active Directory. Microsoft requires that this name should be a valid NETBIOS name and must be unique across the forest of this Active directory.
  computerAccountName: String

  # Supported in v5.0+
  # Specifies organization unit to create the computer user after joining Active Directory.
  creationOrganizationUnit: String

  # Supported in v5.0+
  # v5.0: Specifies an ordered list of domain controllers that are used to communicate with Active Directory domains.
  # 
  # v5.1+:
  domainControllers: [String!] = []

  # Supported in v5.0+
  # A Boolean value that determines whether to run the SMB service when no shares are exposed. When this value is 'true,' the SMB service runs even when no shares are exposed. When this value is 'false,' the SMB service does not run when no shares are exposed.
  isStickySmbService: Boolean

  # Required. Supported in v5.0+
  # Password for joining Active Directory.
  password: String!

  # Required. Supported in v5.0+
  # Username for joining Active Directory.
  username: String!
}
# Sort by parameters for SMB domain results.
enum SmbDomainSortByField {
  # Sort by Cluster name.
  CLUSTER_NAME

  # Sort by Domain name.
  DOMAIN_NAME

  # Sort by field is not specified.
  # Any filter text would not be considered.
  FIELD_UNSPECIFIED
}
# Sort SMB domain results.
input SmbDomainSortByInput {
  # Field for SMB domain sort by.
  field: SmbDomainSortByField = FIELD_UNSPECIFIED

  # Sort order for SMB domain sort by.
  sortOrder: SortOrder = ASC
}
# Supported in v5.0+
# Status of the current authentication attempt.
# 
enum SmbDomainStatus {
  SMB_DOMAIN_STATUS_CONFIGURED
  SMB_DOMAIN_STATUS_FAILED
  SMB_DOMAIN_STATUS_NOT_CONFIGURED
}
# An object that can be backed-up by taking snapshots.
type Snappable {
  # The ID of the workload.
  id: String!

  # The name of the workload.
  name: String!

  # The current compliance status of the workload.
  complianceStatus: ComplianceStatusEnum

  # The protection status of the workload.
  protectionStatus: ProtectionStatusEnum!

  # The type of the workload.
  objectType: ObjectTypeEnum!

  # The date and time when the workload was last protected.
  protectedOn: DateTime

  # The total number of snapshots present for the workload.
  totalSnapshots: Int

  # The number of snapshots that were missed.
  missedSnapshots: Int

  # The timestamp of the last taken snapshot.
  lastSnapshot: DateTime
  latestArchivalSnapshot: DateTime
  latestReplicationSnapshot: DateTime
  localOnDemandSnapshots: Int
  localSlaSnapshots: Int
  archivalSnapshotLag: Int
  replicationSnapshotLag: Int
  archivalComplianceStatus: ComplianceStatusEnum
  replicationComplianceStatus: ComplianceStatusEnum
  awaitingFirstFull: Boolean

  # The time at which the workload data was retrieved from CDM.
  pullTime: DateTime!
  location: String!

  # The local storage size in bytes.
  localStorage: Long

  # The local metered data size in bytes.
  localMeteredData: Long

  # Total bytes used.
  usedBytes: Long

  # The provisioned bytes size.
  provisionedBytes: Long

  # The local protected data size in bytes.
  localProtectedData: Long

  # The local effective storage size in bytes.
  localEffectiveStorage: Long

  # The logical size of the workload's last snapshot.
  lastSnapshotLogicalBytes: Long

  # The organization ID of this workload.
  orgId: UUID

  # The source NAS protocol.
  sourceProtocol: String

  # The NASCD policy name.
  ncdPolicyName: String

  # The timestamp of the last taken NASCD archive snapshot.
  ncdLatestArchiveSnapshot: DateTime

  # The SLA Domain of the protected objects.
  slaDomain: SlaDomain

  # The Rubrik cluster to which the protected objects belong.
  cluster: Cluster
  fid: UUID

  # The number of snapshots locally present.
  localSnapshots: Int

  # The number of snapshots that have been replicated.
  replicaSnapshots: Int

  # The number of snapshots that have been archived.
  archiveSnapshots: Int

  # Physical bytes used by snapshots of this workload.
  physicalBytes: Long

  # Bytes ingested over the network for this workload.
  transferredBytes: Long

  # Logical bytes used by snapshots of this workload.
  logicalBytes: Long

  # The amount of storage used by replicated snapshots.
  replicaStorage: Long

  # The amount of storage used by archived snapshots.
  archiveStorage: Long

  # The change from transferred bytes to physical bytes.
  dataReduction: Float
  logicalDataReduction: Float

  # Specifies the owner organization of the workload.
  workloadOrg: WorkloadOrganization

  # The organization name related to the workload. This is deprecated.
  orgName: String @deprecated(reason: "`snappableOrg` field captures the basic org details.")
}
# The aggregation data of some workload statistics.
type SnappableAggregation {
  # The total number of snapshots present for the workload.
  totalSnapshots: Int!

  # The number of snapshots that were missed.
  missedSnapshots: Int!

  # The amount of storage used by archived snapshots.
  archiveStorage: Long!

  # The amount of storage used by replicated snapshots.
  replicaStorage: Long!

  # Physical bytes used by snapshots of this workload.
  physicalBytes: Long!

  # Logical bytes used by snapshots of this workload.
  logicalBytes: Long!

  # The logical size of the workload's last snapshot.
  lastSnapshotLogicalBytes: Long!

  # Bytes ingested over the network for this workload.
  transferredBytes: Long!
}
# Columns of a workload that can be aggregated.
enum SnappableAggregationsEnum {
  # The amount of storage used by archived snapshots.
  ArchiveStorage

  # Total count of all workloads matching the aggregation.
  Count

  # The logical size of the workload's last snapshot.
  LAST_SNAPSHOT_LOGICAL_BYTES

  # Logical bytes used by snapshots of this workload.
  LogicalBytes

  # The number of snapshots that were missed.
  MissedSnapshots

  # Physical bytes used by snapshots of this workload.
  PhysicalBytes

  # The amount of storage used by replicated snapshots.
  ReplicaStorage

  # Bytes ingested over the network for this workload.
  TRANSFERRED_BYTES

  # The total number of snapshots present for this workload.
  TotalSnapshots
}
type SnappableChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [SnappableGroupByEnum!]
}
# Paginated list of Snappable objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SnappableConnection {
  # List of Snappable objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SnappableEdge!]!

  # List of Snappable objects.
  nodes: [Snappable!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Snappable objects matching the request arguments.
  count: Int!

  # Aggregated information about the workloads.
  aggregation: SnappableAggregation!
}
enum SnappableCrawlStatus {
  COMPLETE
  FAIL
  IN_PROGRESS
}
# Wrapper around the Snappable object. This wrapper is used for pagination.
type SnappableEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Snappable object wrapped by this edge.
  node: Snappable!
}
# Filter workload data.
input SnappableFilterInput {
  # The protection status of the workload.
  protectionStatus: [ProtectionStatusEnum!]

  # The SLA Domain of the workload.
  slaDomain: SnappableSlaDomainFilterInput

  # The compliance status of the workload.
  complianceStatus: [ComplianceStatusEnum!]

  # The object type of the workload.
  objectType: [ObjectTypeEnum!]

  # List of workload types to exclude. This should NOT be specified along with objectType.
  excludedObjectTypes: [ObjectTypeEnum!]

  # The cluster UUID of the workload.
  cluster: CommonClusterFilterInput

  # The search term applied to the workload.
  searchTerm: String

  # The SLA Domain time range applied to the workload.
  slaTimeRange: SlaComplianceTimeRange

  # The organization ID of the workload.
  orgId: [UUID!]
}
# Filter workload data, including search capability.
input SnappableFilterInputWithSearch {
  # The protection status of the workload.
  protectionStatus: [ProtectionStatusEnum!]

  # The SLA Domain of the workload.
  slaDomain: SnappableSlaDomainFilterInput

  # The compliance status of the workload.
  complianceStatus: [ComplianceStatusEnum!]

  # The object type of the workload.
  objectType: [ObjectTypeEnum!]

  # List of workload types to exclude. This should NOT be specified along with objectType.
  excludedObjectTypes: [ObjectTypeEnum!]

  # The cluster UUID of the workload.
  cluster: CommonClusterFilterInput
  timeRange: TimeRangeInput

  # The search term applied to the workload.
  searchTerm: String

  # The SLA Domain time range applied to the workload.
  slaTimeRange: SlaComplianceTimeRange

  # The organization ID of the workload.
  orgId: [UUID!]
}
# Snappable data with groupby info applied to it.
type SnappableGroupBy {
  # The data groupby info.
  groupByInfo: SnappableGroupByInfo!

  # Paginated snappable data.
  snappableConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Sort workloads by field.
    sortBy: SnappableSortByEnum = Name): SnappableConnection!

  # Provides further groupings for the data.
  snappableGroupBy(
    # Group workloads by field.
    groupBy: SnappableGroupByEnum!): [SnappableGroupBy!]!
}
# Paginated list of SnappableGroupBy objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SnappableGroupByConnection {
  # List of SnappableGroupBy objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SnappableGroupByEdge!]!

  # List of SnappableGroupBy objects.
  nodes: [SnappableGroupBy!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SnappableGroupBy objects matching the request arguments.
  count: Int!
}
# Wrapper around the SnappableGroupBy object. This wrapper is used for pagination.
type SnappableGroupByEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SnappableGroupBy object wrapped by this edge.
  node: SnappableGroupBy!
}
enum SnappableGroupByEnum {
  Cluster
  ClusterType
  ComplianceStatus
  Day
  Hour
  Month
  ObjectType
  ProtectionStatus
  PullTimeWithOffset
  Quarter
  SlaDomain

  # Bytes transferred group by object type.
  TRANSFERRED_BYTES_OBJECT_TYPE
  Week
  Year
}
# Filter snappable data in group by.
input SnappableGroupByFilterInput {
  # The protection status of the workload.
  protectionStatus: [ProtectionStatusEnum!]

  # The SLA Domain of the workload.
  slaDomain: SnappableSlaDomainFilterInput

  # The compliance status of the workload.
  complianceStatus: [ComplianceStatusEnum!]

  # The object type of the workload.
  objectType: [ObjectTypeEnum!]

  # List of workload types to exclude. This should NOT be specified along with objectType.
  excludedObjectTypes: [ObjectTypeEnum!]

  # The cluster UUID of the workload.
  cluster: CommonClusterFilterInput
  timeRange: TimeRangeInput

  # The SLA Domain time range applied to the workload.
  slaTimeRange: SlaComplianceTimeRange

  # The organization ID of the workload.
  orgId: [UUID!]
}
union SnappableGroupByInfo = ComplianceStatus | ProtectionStatus | ObjectType | Cluster | ClusterType | ClusterSlaDomain | TimeRangeWithUnit
# Location of the workload.
union SnappableLocationType = AzureSnappableLocation | CdmSnappableLocation | WorkloadLocation
input SnappablePathInput {
  snappableFid: String = ""
  stdPath: String = ""
}
# Represents the snappable contents to be restored.
input SnappableRestoreConfig {
  # UUID of the destination Office 365 organization.
  destinationOrgUuid: UUID

  # Restore configuration for SharePoint drive jobs.
  SharePointDriveRestoreConfig: SharePointDriveRestoreConfig

  # Restore configuration for SharePoint list jobs.
  sharePointListRestoreConfig: SharePointListRestoreConfig

  # Restore configuration for full SharePoint jobs.
  sharePointFullRestoreConfig: SharePointFullRestoreConfig

  # Restore configuration for Onedrive jobs.
  OneDriveRestoreConfig: DriveRestoreConfig

  # Restore configuration for Teams jobs.
  TeamsRestoreConfig: TeamsRestoreConfig

  # Restore configuration for Mailbox jobs.
  MailboxRestoreConfig: MailboxRestoreConfig

  # Restore configuration for Calendar jobs.
  calendarRestoreConfig: CalendarRestoreConfig

  # Restore configuration for Contacts jobs.
  contactsRestoreConfig: ContactsRestoreConfig

  # In-place restore configuration for restore jobs.
  inplaceRestoreConfig: InplaceRestoreConfig
}
enum SnappableSlaAssignment {
  SNAPPABLE_SLA_ASSIGNMENT_DERIVED
  SNAPPABLE_SLA_ASSIGNMENT_DIRECT
  SNAPPABLE_SLA_ASSIGNMENT_UNASSIGNED
}
# Filter workload data based on the properties of its SLA Domain.
input SnappableSlaDomainFilterInput {
  id: [String!]
}
enum SnappableSortByEnum {
  ArchivalComplianceStatus
  ArchivalSnapshotLag
  ArchiveSnapshots
  ArchiveStorage
  AwaitingFirstFull
  Cluster
  ClusterName
  ClusterType
  ComplianceStatus
  DataReduction
  LastSnapshot
  LatestArchivalSnapshot
  LatestReplicationSnapshot
  LocalOnDemandSnapshots
  LocalSLASnapshots
  LocalSnapshots
  Location
  LogicalBytes
  LogicalDataReduction
  MissedSnapshots
  Name
  ObjectType
  PULL_TIME
  PhysicalBytes
  ProtectionStatus
  ReplicaSnapshots
  ReplicaStorage
  ReplicationComplianceStatus
  ReplicationSnapshotLag
  SlaDomainName
  TotalSnapshots
  TransferredBytes
}
type SnappableTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [SnappableGroupByEnum!]
  selectedColumns: [SnappableTableColumnEnum!]!
  sortBy: SnappableSortByEnum

  # Sorts by order.
  sortOrder: SortOrder
}
enum SnappableTableColumnEnum {
  ArchiveSnapshots
  ArchiveStorage
  ClusterName
  ClusterType
  ComplianceStatus
  DataReduction
  LastSnapshot
  LocalSnapshots
  Location
  LogicalByte
  MissedSnapshots
  ObjectType
  PhysicalBytes
  ReplicaSnapshots
  ReplicaStorage
  SlaDomain
  SnappableName
  TotalSnapshots
  TransferredBytes
}
# Snappable type.
enum SnappableType {
  # Used for search of the Calendar subsnappable of Exchange.
  CALENDAR

  # Used for search of the Contacts subsnappable of Exchange.
  CONTACTS

  # Exchange snappable. Used for recovery of any subsnappable (Mailbox, Calendar, Contacts) objects.
  EXCHANGE

  # Used for search of the Mailbox subsnappable of Exchange.
  MAILBOX

  # OneDrive snappable.
  ONEDRIVE

  # Sharepoint drive snappable.
  SHAREPOINT_DRIVE

  # Sharepoint list snappable.
  SHAREPOINT_LIST

  # Sharepoint site snappable.
  SHAREPOINT_SITE

  # Teams snappable.
  TEAMS
}
type SnappableTypeSummary {
  snappableType: HierarchyObjectTypeEnum!
  count: Int!
}
# Input to query workloads with legal hold snapshots.
input SnappablesWithLegalHoldSnapshotsInput {
  # Rubrik cluster UUID of the workload.
  clusterUuid: String!

  # Filter parameters list.
  filterParams: [LegalHoldQueryFilter!]!

  # Sorting parameters.
  sortParam: LegalHoldSortParam
}
# Archival state of the snapshot.
enum SnapshotCloudState {
  # Snapshot was downloaded from archival location.
  DOWNLOADED_FROM_CLOUD

  # Snapshot is latest and archived.
  LATEST_ON_CLOUD

  # Snapshot is stored locally and is not archived.
  LOCAL

  # Snapshot is stored locally and at the archival location.
  LOCAL_AND_ON_CLOUD

  # Snapshot is stored only at the archival location.
  ON_CLOUD
}
# Supported in v5.1+
# v5.1-v5.2: The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot, Cool, and Cold.
# 
# v5.3-v8.1: The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot, Cool, AzureArchive (with Azure locations), Glacier, and GlacierDeepArchive (for AWS S3 locations). The value Cold has been deprecated in favor of AzureArchive, which is the recommended replacement value.
# 
# v9.0+: The current cloud storage tier of a snapshot. A snapshot's cloud storage tier determines how the cloud provider will determine storage and retrieval costs, as well as retrieval latency. Accepted values are Hot (for AWS S3 and Azure), StandardIA, OneZoneIA, GlacierIR, Glacier, and GlacierDeepArchive (for AWS S3), and AzureCool, AzureCold, and AzureArchive (for Azure). The value Cold has been deprecated in favor of AzureArchive, Glacier, and GlacierDeepArchive. The value Cool has been deprecated in favor of StandardIA, OneZoneIA, GlacierIR, AzureCool, and AzureCold.
# 
enum SnapshotCloudStorageTier {
  SNAPSHOT_CLOUD_STORAGE_TIER_AZURE_ARCHIVE
  SNAPSHOT_CLOUD_STORAGE_TIER_AZURE_COLD
  SNAPSHOT_CLOUD_STORAGE_TIER_AZURE_COOL
  SNAPSHOT_CLOUD_STORAGE_TIER_COLD
  SNAPSHOT_CLOUD_STORAGE_TIER_COOL
  SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER
  SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER_DEEP_ARCHIVE
  SNAPSHOT_CLOUD_STORAGE_TIER_GLACIER_IR
  SNAPSHOT_CLOUD_STORAGE_TIER_HOT
  SNAPSHOT_CLOUD_STORAGE_TIER_ONE_ZONE_IA
  SNAPSHOT_CLOUD_STORAGE_TIER_STANDARD_IA
}
enum SnapshotConsistencyLevel {
  SNAPSHOT_APP_CONSISTENT
  SNAPSHOT_CRASH_CONSISTENT
  UNKNOWN_CONSISTENCY_LEVEL
}
# Enum for customizations applied on the snapshot.
enum SnapshotCustomization {
  # Custom retention has been applied on the snapshot.
  CUSTOM_RETENTION

  # Snapshot has been downloaded.
  DOWNLOAD
}
# Delta information for a file or directory between two snapshots.
type SnapshotDelta {
  # Delta type of the file or directory between two snapshots.
  deltaType: DeltaType!

  # Number of files of this delta type.
  deltaAmount: Long!
}
# Filtering results with this delta type.
input SnapshotDeltaFilterInput {
  # Delta type to filter for.
  deltaType: [DeltaType!]
}
# A generic snapshot type.
type SnapshotDistribution {
  # Total number of snapshots.
  totalCount: Long!

  # Number of scheduled snapshots.
  scheduledCount: Long!

  # Number of on demand snapshots.
  onDemandCount: Long!

  # Number of retrieved snapshots.
  retrievedCount: Long!

  # The ID of the snappable.
  id: UUID!
}
# File or folder data returned by browse or search delta response.
type SnapshotFile {
  filename: String!
  path: String!
  absolutePath: String!
  displayPath: String!
  lastModified: DateTime!
  size: Long!
  fileMode: FileModeEnum!
  statusMessage: String!

  # Quarantine information corresponding to the path.
  quarantineInfo: QuarantineInfo

  # Browse or search delta response returns workload fields.
  workloadFields: WorkloadFields
}
# Paginated list of SnapshotFile objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SnapshotFileConnection {
  # List of SnapshotFile objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SnapshotFileEdge!]!

  # List of SnapshotFile objects.
  nodes: [SnapshotFile!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SnapshotFile objects matching the request arguments.
  count: Int!
}
# Snapshot file or directory and its delta information.
type SnapshotFileDelta {
  # Information about the file or directory such as the path and last modified date.
  file: SnapshotFile!

  # This field is empty for directories. It contains the delta information of the file.
  selfDeltas: [SnapshotDelta!]!

  # This field is non-empty for directories only. It contains the consolidated delta information of the subdirectories.
  childrenDeltas: [SnapshotDelta!]!

  # Quarantine information for a path in the previous snapshot.
  previousSnapshotQuarantineInfo: QuarantineInfo
}
# Paginated list of SnapshotFileDelta objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SnapshotFileDeltaConnection {
  # List of SnapshotFileDelta objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SnapshotFileDeltaEdge!]!

  # List of SnapshotFileDelta objects.
  nodes: [SnapshotFileDelta!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SnapshotFileDelta objects matching the request arguments.
  count: Int!

  # The current snapshot.
  currentSnapshot: CdmSnapshot!

  # The snapshot using which deltas are computed.
  previousSnapshot: CdmSnapshot
}
# Wrapper around the SnapshotFileDelta object. This wrapper is used for pagination.
type SnapshotFileDeltaEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SnapshotFileDelta object wrapped by this edge.
  node: SnapshotFileDelta!
}
# Snapshot file or directory and its delta information.
type SnapshotFileDeltaV2 {
  # Information about the file or directory such as the path and last modified date.
  file: SnapshotFile!

  # This field is empty for directories. It contains the delta information of the file.
  selfDeltas: [SnapshotDelta!]!

  # This field is non-empty for directories only. It contains the consolidated delta information of the subdirectories.
  childrenDeltas: [SnapshotDelta!]!

  # Quarantine information for a path in the previous snapshot.
  previousSnapshotQuarantineInfo: QuarantineInfo
}
# Paginated list of SnapshotFileDeltaV2 objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SnapshotFileDeltaV2Connection {
  # List of SnapshotFileDeltaV2 objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SnapshotFileDeltaV2Edge!]!

  # List of SnapshotFileDeltaV2 objects.
  nodes: [SnapshotFileDeltaV2!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SnapshotFileDeltaV2 objects matching the request arguments.
  count: Int!

  # The current snapshot.
  currentSnapshot: GenericSnapshot!

  # The snapshot using which deltas are computed.
  previousSnapshot: GenericSnapshot
}
# Wrapper around the SnapshotFileDeltaV2 object. This wrapper is used for pagination.
type SnapshotFileDeltaV2Edge {
  # String used to identify this edge.
  cursor: String!

  # The actual SnapshotFileDeltaV2 object wrapped by this edge.
  node: SnapshotFileDeltaV2!
}
# Wrapper around the SnapshotFile object. This wrapper is used for pagination.
type SnapshotFileEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SnapshotFile object wrapped by this edge.
  node: SnapshotFile!
}
# Specifies the snapshot frequency.
enum SnapshotFrequency {
  # Daily snapshot.
  DAILY

  # Hourly snapshot.
  HOURLY

  # Monthly snapshot.
  MONTHLY

  # Snapshot frequency not applicable.
  NA

  # Quarterly snapshot.
  QUARTERLY

  # Weekly snapshot.
  WEEKLY

  # Yearly snapshot.
  YEARLY
}
enum SnapshotGroupByTime {
  Day
  Hour
  Month
  Quarter
  Week
  Year
}
# Supported in v5.2+
type SnapshotLocationRetentionInfo {
  # Supported in v5.2+
  # Time when the snapshot expired or is expected to expire at this location. This field will only be set if the snapshot has ever existed at the location. If the snapshot is present at the location, but the expiration time calculation is pending, this field will be absent. If the expiration time calculation is complete and the field is still absent, the snapshot will be retained forever at this location.
  expirationTime: DateTime

  # Required. Supported in v5.2+
  # ID of the location.
  id: String!

  # Supported in v5.2+
  # A Boolean that indicates whether expiration date for snapshot has been calculated. This field will be absent if the snapshot has never existed at this location.
  isExpirationDateCalculated: Boolean

  # Supported in v5.2+
  # Indicates whether expiration information of the snapshot is unavailable at this location. This field is always and only present for replication locations. Its value is true if and only if the replicated snapshots are from pre-5.2 cluster.
  isExpirationInformationUnavailable: Boolean

  # Required. Supported in v5.2+
  # Boolean that specifies whether the snapshot is present at this location. When this value is 'false,' the snapshot is expired at this location. Because retention information is unreliable for locations where the snapshots are not present, confirming that this value is 'true' is the best practice.
  isSnapshotPresent: Boolean!

  # Required. Supported in v5.2+
  # Name of the location.
  name: String!

  # Supported in v5.2+
  # The tag to determine what frequency the snapshot corresponds to at this location. The snapshot tag can be hourly, daily, weekly, monthly, quarterly, or yearly depending on the SLA frequency which is used to determine the retention of the snapshot. A value of "Ready for Deletion" means that the snapshot will be deleted soon. A value of "Forever" means that the snapshot will never be deleted. This field is absent when the tag computation is incomplete.
  snapshotFrequency: String

  # Supported in v7.0+
  # Indicates whether the snapshots is retained beyond its expiration date for security reasons.
  isRetainedForSecurity: Boolean

  # Supported in v9.0+
  # Indicates whether snapshot is on legal hold for this location. By default, this is false.
  isSnapshotOnLegalHold: Boolean
}
# Filters to query snapshots.
enum SnapshotQueryFilterField {
  # A comma-separated list of archival location IDs. Returns snapshots from
  # all archival locations corresponding to the specified IDs.
  ARCHIVAL_LOCATION_IDS

  # Returns all AWS EBS snapshots from the specified AWS account.
  EBS_AWS_NATIVE_ACCOUNT_ID

  # Returns all AWS EC2 snapshots from the specified AWS account.
  EC2_AWS_NATIVE_ACCOUNT_ID

  # When true, returns snapshots that are not anomalous.
  EXCLUDE_ANOMALOUS

  # When true, returns snapshots that are not quarantined.
  EXCLUDE_QUARANTINED

  # When true, returns snapshots for which index files are present,
  # i.e. either the index storage path is present or there have been indexing
  # attempts on the snapshot.
  # Note: In case of cloud native indexing failures(indexing attempts > 0),
  # some indexing status log files are stored at the location where index
  # files are usually stored.
  HAS_CLOUD_NATIVE_INDEX_FILES

  # When true, returns unGCed snapshots (may/may not have expiry hint time
  # set) or snapshots that have unexpired archived snapshots.
  # When false, returns GCed snapshots that do not have any unexpired
  # archived snapshots.
  # Note that, in either case, it only returns source snapshots.
  HAS_UNEXPIRED_ARCHIVED_OR_UNGCED_SOURCE_SNAPSHOTS

  # When the value is true, returns snapshots with one or more unexpired
  # archived snapshots.
  HAS_UNEXPIRED_ARCHIVED_SNAPSHOTS

  # When the value is true, this filter returns snapshots with one or more
  # unexpired replicas.
  HAS_UNEXPIRED_REPLICAS

  # Returns the entries where value of lock_end_time column is null or
  # is less than the the provided time in the field time.
  IMMUTABLE_LOCK_END_TIME_BEFORE

  # Does not return AppFlows-related details for the snapshots.
  IS_APPFLOWS_QUERY_SNAPSHOT_DETAILS_NOT_NEEDED

  # When true, this filter returns the snapshots created as a result of
  # archiving source snapshots. When false, the filter returns snapshots
  # that were not created due to archiving.
  IS_ARCHIVAL_COPY

  # When the value is true, this filter returns snapshots that are archived.
  IS_ARCHIVED

  # When true, returns snapshots that are deleted from source.
  IS_DELETED_FROM_SOURCE
  IS_DOWNLOADED

  # When true, returns snapshots that have been deleted, else
  # returns all non-deleted snapshots (may/may not be expired).
  IS_GCED

  # When true, this returns snapshots that have been indexed, else
  # returns snapshots that have not been indexed.
  IS_INDEXED

  # When true, returns snapshots that have been placed on legal
  # hold, else return all snapshots which are not legally held.
  IS_LEGALLY_HELD

  # When true, returns source snapshots that are not globally expired
  # i.e. snapshot is unexpired on source or has an unexpired replica/archival
  # copy, else returns globally expired source snapshots.
  IS_NOT_GLOBALLY_EXPIRED
  IS_ON_DEMAND
  IS_REPLICA

  # When true, returns snapshots that have been replicated.
  # When false, returns snapshots which have not been replicated.
  IS_REPLICATED

  # When true, returns incremental snapshots of SAP HANA
  # workload. When false, returns full snapshots.
  IS_SAP_HANA_INCREMENTAL_SNAPSHOT

  # When true, returns snapshots that were skipped for
  # replication. When false, returns snapshots which were not skipped.
  IS_SKIPPED_FOR_REPLICATION

  # When the filter text list is provided, returns all on-demand snapshots
  # that are assigned any of the given SLA Domain IDs.
  # Note: text field will not be used for this filter.
  ON_DEMAND_SLA_ID

  # Returns all AWS RDS snapshots from the specified AWS account.
  RDS_AWS_NATIVE_ACCOUNT_ID
  SLA_ID

  # List of protectable object types. When this list is configured with
  # object types, it returns snapshots of that type.
  SNAPPABLE_TYPES

  # Field to filter based on snapshot customization.
  SNAPSHOT_CUSTOMIZATION

  # Returns snapshots for which the snapshot_status field is in
  # the specified state. This is a text field.
  SNAPSHOT_STATUS

  # Field to filter based on snapshot types. Snapshot types can only
  # be on-demand or scheduled.
  SNAPSHOT_TYPE
}
# Filter snapshots.
input SnapshotQueryFilterInput {
  # Type of filter.
  field: SnapshotQueryFilterField = SLA_ID

  # Additional Information for the filter type.
  text: String = ""

  # Snapshot types to be filtered.
  typeFilters: [SnapshotTypeEnum!] = []

  # Snapshots from linked workloads.
  shouldFetchLinked: Boolean = false

  # List of search texts for the filter type.
  textList: [String!] = []
  time: DateTime

  # Filter snapshot customizations.
  customizationFilters: [SnapshotCustomization!] = []
}
enum SnapshotQuerySortByField {
  CREATION_TIME
  UNKNOWN
}
type SnapshotResult {
  snapshotTime: Long!
  snapshotFid: String!
}
# Paginated list of SnapshotResult objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SnapshotResultConnection {
  # List of SnapshotResult objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SnapshotResultEdge!]!

  # List of SnapshotResult objects.
  nodes: [SnapshotResult!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SnapshotResult objects matching the request arguments.
  count: Int!
}
# Wrapper around the SnapshotResult object. This wrapper is used for pagination.
type SnapshotResultEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SnapshotResult object wrapped by this edge.
  node: SnapshotResult!
}
# Supported in v5.2+
type SnapshotRetentionInfo {
  # Required. Supported in v5.2+
  # List of snapshot retention information on the archival locations.
  archivalInfos: [SnapshotLocationRetentionInfo!]!

  # Required. Supported in v5.2+
  # Snapshot retention information such as frequency tag and expected expiration time on the cloud native locations.
  cloudNativeLocationInfo: [SnapshotLocationRetentionInfo!]!

  # Supported in v5.2+
  # Snapshot retention information on the local cluster.
  localInfo: SnapshotLocationRetentionInfo

  # Required. Supported in v5.2+
  # List of snapshot retention information on the replicated locations.
  replicationInfos: [SnapshotLocationRetentionInfo!]!
}
# Snapshot schedule for different frequencies.
type SnapshotSchedule {
  # Minute schedule of the SLA Domain.
  minute: MinuteSnapshotSchedule

  # Hourly schedule of the SLA Domain.
  hourly: HourlySnapshotSchedule

  # Daily schedule of the SLA Domain.
  daily: DailySnapshotSchedule

  # Weekly schedule of the SLA Domain.
  weekly: WeeklySnapshotSchedule

  # Monthly schedule of the SLA Domain.
  monthly: MonthlySnapshotSchedule

  # Quarterly schedule of the SLA Domain.
  quarterly: QuarterlySnapshotSchedule

  # Yearly schedule of the SLA Domain.
  yearly: YearlySnapshotSchedule
}
# Errors that may occur when searching for a snapshot.
enum SnapshotSearchError {
  # Access to the resource is denied.
  AccessDenied

  # No matching snapshot found.
  NoSnapshotFound
}
# Enum representing the backup status of M365 Site snapshots.
enum SnapshotServiceBackupStatus {
  # Backup not successful.
  FAIL

  # Backup successful and all child objects are backed up.
  FULL_SUCCESS

  # Backup partially successful with few child objects being skipped during backup.
  PARTIAL_SUCCESS
}
# Enum to describe whether snapshot has AMI-based or crash-consistent consistency.
enum SnapshotServiceConsistencyLevel {
  # AMI-based consistency level.
  AMI_BASED

  # Crash-consistent snapshot.
  CRASH_CONSISTENT
}
# DataType representing the sub objects captured in a snapshot.
type SnapshotSubObj {
  # A volume captured in a volume group snapshot.
  volumeGroupSubObj: VolumeGroupSubObject

  # A virtual disk captured in a VMware virtual machine snapshot.
  vmwareVmSubObj: VmwareVmSubObject
}
# The sub objects captured in a snapshot.
type SnapshotSubObject {
  # The sub object captured in a snapshot.
  subObj: SnapshotSubObj!
}
# Supported in v5.2+
type SnapshotSummary {
  # Required. Supported in v5.2+
  # Time at which the snapshot was taken.
  date: DateTime

  # Required. Supported in v5.2+
  # ID of the snapshot.
  id: String!

  # Required. Supported in v5.2+
  # A Boolean value that indicates whether custom retention is applied to the specified snapshot. Value is true when custom retention is applied to the snapshot.
  isCustomRetentionApplied: Boolean!

  # Required. Supported in v5.2+
  # Indicates whether the snapshot is protected by a Retention Locked SLA Domain.
  isRetentionLockApplied: Boolean!

  # Required. Supported in v5.2+
  # Retention information for snapshots at the local, archival, and replication locations.
  snapshotRetentionInfo: SnapshotRetentionInfo
  snapshotType: UnmanagedSnapshotType!
}
# Paginated list of SnapshotSummary objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SnapshotSummaryConnection {
  # List of SnapshotSummary objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SnapshotSummaryEdge!]!

  # List of SnapshotSummary objects.
  nodes: [SnapshotSummary!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SnapshotSummary objects matching the request arguments.
  count: Int!
}
# Wrapper around the SnapshotSummary object. This wrapper is used for pagination.
type SnapshotSummaryEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SnapshotSummary object wrapped by this edge.
  node: SnapshotSummary!
}
# Type of snapshot to be used for recovery.
enum SnapshotType {
  # Archived snapshot.
  ARCHIVED

  # Replicated snapshot.
  REPLICATED

  # Source snapshot.
  SOURCE
}
enum SnapshotTypeEnum {
  DOWNLOADED
  ON_DEMAND
  SCHEDULED
}
# The type of snapshot to be used for recovery operations if source snapshot is expired.
enum SnapshotTypeForRestoreIfSourceExpired {
  # Use the archived snapshot.
  ARCHIVED

  # Use the replicated snapshot.
  REPLICATED
}
# The snapshot type to use if source snapshot is expired.
enum SnapshotTypeToUseIfSourceExpired {
  # Archived snapshot.
  ARCHIVED

  # Replicated snapshot.
  REPLICATED
}
# Supported in v5.0+
# v5.0-v5.1: SNMP service configuration object.
# v5.2+: SNMP service configuration object summary.
type SnmpConfiguration {
  # Supported in v5.0+
  # v5.0-v5.1: communicatyString is a user specified string for authentication to access SNMP statistics.
  # 
  # v5.2+: communityString is a user specified string for authentication to access SNMP statistics. Provides access to MIBs using SNMP v2c.
  communityString: String

  # Required. Supported in v5.0+
  # Boolean value that specifies whether the SNMP service is enabled. Set the value to true to enable the SNMP service and false to disable the SNMP service.
  isEnabled: Boolean!

  # Required. Supported in v5.0+
  # The SNMP agent port on the Rubrik cluster node.
  snmpAgentPort: Int!

  # Supported in v5.0+
  # Array of SNMP trap receivers for the SNMP service.
  trapReceiverConfigs: [SnmpTrapReceiverConfig!]!

  # Supported in v5.2+
  # Array of usernames for the SNMP service. Provides access to MIBs using SNMP v3.
  users: [String!]!
}
# Supported in v5.0+
# v5.0-v5.1: SNMP service configuration object.
# v5.2+: SNMP service configuration object summary.
input SnmpConfigurationInput {
  # Supported in v5.0+
  # v5.0-v5.1: communicatyString is a user specified string for authentication to access SNMP statistics.
  # 
  # v5.2+: communityString is a user specified string for authentication to access SNMP statistics. Provides access to MIBs using SNMP v2c.
  communityString: String

  # Supported in v5.0+
  # Array of SNMP trap receivers for the SNMP service.
  trapReceiverConfigs: [SnmpTrapReceiverConfigInput!] = []

  # Supported in v5.2+
  # Array of usernames for the SNMP service. Provides access to MIBs using SNMP v3.
  users: [String!] = []

  # Required. Supported in v5.0+
  # Boolean value that specifies whether the SNMP service is enabled. Set the value to true to enable the SNMP service and false to disable the SNMP service.
  isEnabled: Boolean!

  # Required. Supported in v5.0+
  # The SNMP agent port on the Rubrik cluster node.
  snmpAgentPort: Int!
}
# Supported in v5.2+
# SNMP service configuration object.
input SnmpConfigurationPatchInput {
  # Supported in v5.2+
  # communityString is a user specified string for authentication to access SNMP statistics. Provides access to MIBs using SNMP v2c.
  communityString: String

  # Supported in v5.2+
  # Array of SNMP trap receivers for the SNMP service.
  trapReceiverConfigs: [SnmpTrapReceiverConfigInput!] = []

  # Supported in v5.2+
  # Array of users for the SNMP service. Provides access to MIBs using SNMP v3.
  users: [SnmpUserConfigInput!] = []

  # Required. Supported in v5.2+
  # Boolean value that specifies whether the SNMP service is enabled. Set the value to true to enable the SNMP service and false to disable the SNMP service.
  isEnabled: Boolean!

  # Required. Supported in v5.2+
  # The SNMP agent port on the Rubrik cluster node.
  snmpAgentPort: Int!
}
# Supported in v5.2+
# Describes the security level for an SNMP trap receiver host.
enum SnmpSecurityLevel {
  SNMP_SECURITY_LEVEL_ENUM_AUTH_NO_PRIV
  SNMP_SECURITY_LEVEL_ENUM_AUTH_PRIV
  SNMP_SECURITY_LEVEL_ENUM_NO_AUTH_NO_PRIV
}
# Supported in v5.0+
# SNMP trap receiver configuration object.
type SnmpTrapReceiverConfig {
  # Required. Supported in v5.0+
  # IPv4 address or FQDN of the SNMP trap receiver host.
  address: String!

  # Required. Supported in v5.0+
  # v5.0-v5.1: The snmp trap port on the SNMP trap receiver host.
  # v5.2+: The SNMP trap port on the SNMP trap receiver host.
  port: Int!

  # Supported in v5.2+
  # Specifies the user for the SNMP trap receiver host. A valid user is required in order to use SNMP v3. The specified user must be a valid user in the users field of the SNMP configuration. When no user is specified, SNMP v2c traps are sent to the SNMP trap receiver host. If a trap receiver user is specified, the trap receiver security level must also be specified.
  user: String
  securityLevel: SnmpSecurityLevel
}
# Supported in v5.0+
# SNMP trap receiver configuration object.
input SnmpTrapReceiverConfigInput {
  # Supported in v5.2+
  # Specifies the user for the SNMP trap receiver host. A valid user is required in order to use SNMP v3. The specified user must be a valid user in the users field of the SNMP configuration. When no user is specified, SNMP v2c traps are sent to the SNMP trap receiver host. If a trap receiver user is specified, the trap receiver security level must also be specified.
  user: String

  # Supported in v5.2+
  # Specifies the security level for the SNMP trap receiver host. If a trap receiver user is specified, a securityLevel must be specified.
  securityLevel: SnmpSecurityLevel

  # Required. Supported in v5.0+
  # IPv4 address or FQDN of the SNMP trap receiver host.
  address: String!

  # Required. Supported in v5.0+
  # v5.0-v5.1: The snmp trap port on the SNMP trap receiver host.
  # v5.2+: The SNMP trap port on the SNMP trap receiver host.
  port: Int!
}
# Supported in v5.2+
# SNMP user configuration object.
input SnmpUserConfigInput {
  # Required. Supported in v5.2+
  # Authentication password for the SHA hash.
  authPassword: String!

  # Required. Supported in v5.2+
  # Password for AES encryption.
  privPassword: String!

  # Required. Supported in v5.2+
  # Username for SNMP v3 MIB access.
  username: String!
}
type SonarContentReport {
  id: String!
  fileName: String!
  path: String!
  hits: Hits
  analyzerGroupResults: [AnalyzerGroupResult!]!
  analyzerResults: [AnalyzerResult!]!
  snappableFid: String!
  snapshotTimestamp: Long!
  cluster: String!
  size: Long!
  filesWithHits: Int!
  slaDomainId: String!
  policyId: String!
  analyzerId: String!
  objectName: String!
  location: String!
  objectType: HierarchyObjectTypeEnum!

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!
}
type SonarContentReportChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [DiscoveryContentReportGroupBy!]
}
# Paginated list of SonarContentReport objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SonarContentReportConnection {
  # List of SonarContentReport objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SonarContentReportEdge!]!

  # List of SonarContentReport objects.
  nodes: [SonarContentReport!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SonarContentReport objects matching the request arguments.
  count: Int!
}
# Wrapper around the SonarContentReport object. This wrapper is used for pagination.
type SonarContentReportEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SonarContentReport object wrapped by this edge.
  node: SonarContentReport!
}
# Parameters to filter reports.
input SonarContentReportFilter {
  # Search keyword to filter reports.
  search: String = ""

  # List of policies to filter reports.
  policyIds: [String!] = []

  # List of CDM clusters to filter report.
  clusterIds: [String!] = []

  # Flag to hide or show allowed hits in report.
  applyWhitelists: Boolean = false

  # List of M365 subscriptions to filter reports.
  subscriptionIds: [String!] = []
  objectTypes: [HierarchyObjectTypeEnum!]!
}
type SonarContentReportTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [DiscoveryContentReportGroupBy!]
  selectedColumns: [SonarContentReportTableColumnEnum!]!
  sortBy: DiscoveryContentReportSortBy

  # Sorts by order.
  sortOrder: SortOrder
}
enum SonarContentReportTableColumnEnum {
  AnalyzersBreakdown
  Cluster
  FileName
  ObjectName
  ObjectType
  Path
  PoliciesBreakdown
  Size
  SnapshotTime
  TotalHits
}
type SonarReport {
  groupByValue: String!
  count: Long!
  timeSeriesResults: [TimeSeriesResult!]!
}
type SonarReportChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [DiscoveryReportGroupBy!]
}
# Paginated list of SonarReport objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SonarReportConnection {
  # List of SonarReport objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SonarReportEdge!]!

  # List of SonarReport objects.
  nodes: [SonarReport!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SonarReport objects matching the request arguments.
  count: Int!
}
# Wrapper around the SonarReport object. This wrapper is used for pagination.
type SonarReportEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SonarReport object wrapped by this edge.
  node: SonarReport!
}
type SonarReportRow {
  policyId: String!
  policyName: String!
  policyStatus: DiscoveryReportTablePolicyStatus!
  violations: Int!
  numHighRiskLocations: Int!
  numViolatedFiles: Int!
  numObjects: Int!
}
# Paginated list of SonarReportRow objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SonarReportRowConnection {
  # List of SonarReportRow objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SonarReportRowEdge!]!

  # List of SonarReportRow objects.
  nodes: [SonarReportRow!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SonarReportRow objects matching the request arguments.
  count: Int!
}
# Wrapper around the SonarReportRow object. This wrapper is used for pagination.
type SonarReportRowEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SonarReportRow object wrapped by this edge.
  node: SonarReportRow!
}
type SonarReportTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [DiscoveryReportGroupBy!]
  selectedColumns: [SonarReportTableColumnEnum!]!
  sortBy: DiscoveryReportSortBy

  # Sorts by order.
  sortOrder: SortOrder
}
enum SonarReportTableColumnEnum {
  NumCoveredObjects
  NumHighRiskLocations
  NumViolatedFiles
  NumViolations
  PolicyName
  PolicyStatus
}
enum SortByFieldEnum {
  ANALYZER_NAME

  # Probability of anomaly.
  ANOMALY_PROBABILITY
  ActivityStatus
  ActivityType
  AppBlueprintName
  ArchivalComplianceStatus
  ArchivalSnapshotLag
  ArchiveSnapshots
  ArchiveStorage
  AwaitingFirstFull

  # Count of created bytes.
  BYTES_CREATED_COUNT

  # Count of deleted bytes.
  BYTES_DELETED_COUNT

  # Count of modified bytes.
  BYTES_MODIFIED_COUNT

  # Count of changed bytes.
  BYTES_NET_CHANGED_COUNT
  CLUSTER

  # Location of the Rubrik cluster.
  CLUSTER_LOCATION

  # Unique ID of the cluster.
  CLUSTER_UUID
  Cluster

  # Rubrik cluster name.
  ClusterName

  # Rubrik cluster type.
  ClusterType
  ComplianceStatus
  DataReduction
  Date

  # Estimated time before cluster runs out of storage.
  ESTIMATED_RUNWAY
  EndTime

  # Count of created files.
  FILES_CREATED_COUNT

  # Count of deleted files.
  FILES_DELETED_COUNT

  # Count of modified files.
  FILES_MODIFIED_COUNT
  FILES_WITH_HITS
  FILE_NAME

  # Version of the installed Rubrik cluster.
  INSTALLED_VERSION

  # Specifies whether the result is an anomaly.
  IS_ANOMALY

  # Specifies whether the result is encrypted.
  IS_ENCRYPTED
  LOCATION
  LastSnapshot
  LastUpdated
  LatestArchivalSnapshot
  LatestReplicationSnapshot
  LocalOnDemandSnapshots
  LocalSLASnapshots
  LocalSnapshots
  Location
  LogicalBytes
  LogicalDataReduction

  # Managed ID of the object.
  MANAGED_ID
  MissedSnapshots
  NUM_HIGH_RISK_LOCATIONS
  NUM_OBJECTS
  NUM_VIOLATED_FILES
  NUM_VIOLATION
  Name
  NumCanceled
  NumExpected
  NumFailed
  NumSucceeded
  OBJECT_NAME

  # Type of the object.
  OBJECT_TYPE
  ObjectName
  ObjectType
  PATH
  POLICY_NAME
  POLICY_STATUS

  # Date of the previous snapshot.
  PREVIOUS_SNAPSHOT_DATE

  # Id of the previous snapshot.
  PREVIOUS_SNAPSHOT_ID
  PULL_TIME
  PhysicalBytes
  ProtectionStatus

  # Rubrik cluster registration date.
  RegisteredAt
  ReplicaSnapshots
  ReplicaStorage
  ReplicationComplianceStatus
  ReplicationSnapshotLag

  # Severity of the anomaly.
  SEVERITY
  SIZE
  SLA_DOMAIN

  # Date of the snapshot.
  SNAPSHOT_DATE

  # Id of the snapshot.
  SNAPSHOT_ID
  SNAPSHOT_TIME

  # Count of suspicious files.
  SUSPICIOUS_FILES_COUNT
  Severity
  SlaDomainName
  SourceSiteName
  StartTime
  TOTAL_HITS
  TargetSiteName
  Time
  TotalSnapshots
  TransferredBytes

  # Name of the object.
  WORKLOAD_NAME

  # Type of the object.
  WORKLOAD_TYPE
}
# Specifies how the results are sorted.
enum SortOrder {
  # The items are sorted in ascending order.
  ASC

  # The items are sorted in descending order.
  DESC
}
# Configuration Params for the mosaic source object.
type SourceConfigParams {
  # List of cassandra yaml file paths.
  cassandraYaml: [String!]!

  # List of DSE YAML file paths.
  dseYaml: [String!]!

  # Path to https certificate.
  httpsCertificate: String!

  # Port number used for https connection.
  sourceHttpsPort: Int!

  # JMX Username.
  jmxUser: String!

  # Configured RPC port on source.
  sourceRpcPort: Int!

  # Database username.
  sourceDbUser: String!

  # Configured port on source.
  sourcePort: Int!

  # Source SSL Configuration.
  sslOptions: CassandraSslOptions
}
# Supported in m3.2.0-m4.2.0
# Source Object.
input SourceInput {
  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: If the call should be async.
  # m4.1.0-m4.2.0: If call should be async.
  async: Boolean

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: List of cassandra yaml.
  # m4.1.0-m4.2.0: List of cassandra yaml files.
  cassandraYaml: [String!] = []

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: List of dse yaml.
  # m4.1.0-m4.2.0: List of dse yaml files.
  dseYaml: [String!] = []

  # Supported in m3.2.0-m4.2.0
  # Whether ssl enabled.
  enableSsl: Boolean

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Https certificate to connect.
  # m4.1.0-m4.2.0: HTTPS certificate.
  httpsCertificate: String

  # Supported in m3.2.0-m4.2.0
  # Ignore secondaries.
  ignoreSecondaries: [String!] = []

  # Supported in m3.2.0-m4.2.0
  # JMX password.
  jmxPassword: String

  # Supported in m3.2.0-m4.2.0
  # JMX user.
  jmxUser: String

  # Supported in m3.2.0-m4.2.0
  # If parameter is encoded.
  parameterEncoded: Boolean

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Auth key for source.
  # m4.1.0-m4.2.0: Source auth key.
  sourceAuthKey: String

  # Supported in m3.2.0-m4.2.0
  # Auth key file for source.
  sourceAuthKeyfile: String

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Source auth passphrase.
  # m4.1.0-m4.2.0: Auth passphrase for source.
  sourceAuthPassphrase: String

  # Supported in m3.2.0-m4.2.0
  # Source driver password.
  sourceDriverPassword: String

  # Supported in m3.2.0-m4.2.0
  # Source driver user.
  sourceDriverUser: String

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Source https port.
  # m4.1.0-m4.2.0: Source HTTPS port.
  sourceHttpsPort: String

  # Supported in m3.2.0-m4.2.0
  # Source password.
  sourcePassword: String

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Source port number.
  # m4.1.0-m4.2.0: Source port.
  sourcePort: String

  # Supported in m3.2.0-m4.2.0
  # Source rpc port.
  sourceRpcPort: String

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Source SSH Port number.
  # m4.1.0-m4.2.0: Source SSH port.
  sourceSshPort: String

  # Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Source username.
  # m4.1.0-m4.2.0: Source user.
  sourceUser: String

  # Supported in m3.2.0-m4.2.0
  # SSD CA certificate.
  sslCaCerts: String

  # Supported in m3.2.0-m4.2.0
  # SSL certificate file.
  sslCertfile: String

  # Supported in m3.2.0-m4.2.0
  # SSL keyfile.
  sslKeyfile: String

  # Required. Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: Source type.
  # m4.1.0-m4.2.0: Type of the source.
  sourceType: SourceSourceType!

  # Supported in m3.2.0-m4.2.0
  # SSL Cert Reqs.
  sslCertReqs: SourceSslCertReqs

  # Required. Supported in m3.2.0-m4.2.0
  # m3.2.0-m4.0.1: List of source IPs.
  # m4.1.0-m4.2.0: Https certificate to connect.
  sourceIp: [String!]!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the source.
  sourceName: String!
}
enum SourceSourceType {
  # Specifies that the source type is Cassandra.
  SOURCE_SOURCE_TYPE_CASSANDRA

  # Specifies that the source type is MongoDB.
  SOURCE_SOURCE_TYPE_MONGO
}
enum SourceSslCertReqs {
  SOURCE_SSL_CERT_REQS_NONE
  SOURCE_SSL_CERT_REQS_OPTIONAL
  SOURCE_SSL_CERT_REQS_REQUIRED
}
# Specific replication specification.
type SpecificReplicationSpec {
  # Unidirectional replication specifications.
  unidirectionalSpec: UnidirectionalReplicationSpec

  # Bidirectional replication specifications.
  bidirectionalSpec: BidirectionalReplicationSpec

  # Cloud region specification.
  cloudRegionSpec: ReplicationToCloudRegionSpec

  # Cloud location specification.
  cloudLocationSpec: ReplicationToCloudLocationSpec
}
# Specific replication specification.
input SpecificReplicationSpecInput {
  # Unidirectional replication specifications.
  unidirectionalSpecInput: UnidirectionalReplicationSpecInput

  # Bidirectional replication specifications.
  bidirectionalSpecInput: BidirectionalReplicationSpecInput

  # Cloud region specification.
  cloudRegionSpecInput: ReplicationToCloudRegionSpecInput

  # Cloud location specification.
  cloudLocationSpecInput: ReplicationToCloudLocationSpecInput
}
# Authentication mechanism for SQL Server or any SQL compliant database.
enum SqlAuthenticationMechanism {
  # Authentication mechanism is not specified.
  AUTHENTICATION_MECHANISM_UNSPECIFIED

  # Authenticate using Azure Active Directory authorization code.
  AZURE_ACTIVE_DIRECTORY_AUTH_CODE

  # Authenticate using traditional SQL Server credentials.
  SQL_AUTHENTICATION
}
# Type of the SSO Service Provider certificate.
enum SsoCertificateType {
  # The type of the certificate is unknown.
  CERTIFICATE_TYPE_UNSPECIFIED

  # The certificate used to decrypt SAML response.
  ENCRYPTION

  # The certificate used to sign SAML requests.
  SIGNING
}
# Details of an SSO Group.
type SsoGroup {
  # Specifies whether the users in the group are org admins.
  isOrgAdmin: Boolean!

  # ID of the SSO Group.
  id: String!

  # Name of the SSO Group.
  name: String!
}
enum StalenessType {
  IS_STALE
  NOT_STALE
}
# Input required to start the job to disable AWS Exocompute.
input StartAwsExocomputeDisableJobInput {
  # Rubrik ID of the account for which Exocompute should not be enabled.
  cloudAccountId: UUID!
}
# Input to trigger AWS native account disable job.
input StartAwsNativeAccountDisableJobInput {
  # Rubrik ID of AWS account.
  awsAccountRubrikId: UUID!

  # Specifies whether to delete snapshots in the account.
  shouldDeleteNativeSnapshots: Boolean!

  # Type of native protection to not be enabled.
  awsNativeProtectionFeature: AwsNativeProtectionFeature!
}
# Input to initiate a job to create AWS EC2 instance snapshots.
input StartAwsNativeEc2InstanceSnapshotsJobInput {
  # List of Rubrik EC2 instance IDs.
  ec2InstanceIds: [UUID!]!

  # Retention SLA Rubrik ID.
  retentionSlaId: String = ""
}
# Input to initiate job to create AWS RDS Instance snapshots.
input StartAwsNativeRdsInstanceSnapshotsJobInput {
  # List of Rubrik UUIDs of the RDS Instances.
  rdsInstanceIds: [UUID!]!

  # ID of the SLA Domain to be used for retention of the snapshots that are created by the RDS instance snapshot job.
  retentionSlaId: String = ""
}
# Configuration to initiate Azure AD Application creation.
input StartAzureAdAppSetupInput {
  # Domain name of the MSFT tenant for which the application is being created.
  domainName: String!

  # Azure region name.
  region: AzureAdRegion!

  # Azure AD application details.
  azureAdApp: AzureAdApp
}
# Response of the operation that initiates onboarding of Azure AD.
type StartAzureAdAppSetupReply {
  # State token to be used in CompleteAzureAdAppSetupReply.
  csrfToken: String!

  # ID of the created Azure AD app.
  appId: String!
}
# Configuration to initiate an update to the Azure AD directory app.
input StartAzureAdAppUpdateInput {
  # Workload FID of the Azure AD directory to update.
  workloadFid: UUID!

  # Azure AD application details.
  azureAdApp: AzureAdApp
}
# Response of the operation that updates an Azure AD directory app.
type StartAzureAdAppUpdateReply {
  # State token to be used in CompleteAzureAdAppUpdate.
  csrfToken: String!

  # ID of the updated Azure AD app.
  appId: String!
}
# Input for initiating authentication of the Azure Cloud Accounts.
input StartAzureCloudAccountOauthInput {
  # Domain name of the Azure Tenant.
  tenantDomainName: String

  # Type of Azure Tenant. Possible values: Azure Public Cloud, Azure China Cloud.
  azureCloudType: AzureCloudType = AZUREPUBLICCLOUD
}
# Response of the operation to initiate Azure Cloud Account OAuth.
type StartAzureCloudAccountOauthReply {
  # Client ID of the application configured for authentication of the Azure tenant.
  clientId: String!

  # Session ID of the current OAuth session.
  sessionId: String!
}
# Input required to trigger a job to create an index of snapshots.
input StartCloudNativeSnapshotsIndexJobInput {
  # The IDs of snapshots whose index needs to be generated.
  snapshotIds: [UUID!]!
}
# The input configuration to start the report migration job.
input StartClusterReportMigrationJobInput {
  # The ID of the Rubrik cluster. If the cluster ID is not provided, the job will perform migration of reports for all the eligible clusters connected. 
  clusterUuid: UUID

  # Specifies whether to delete schedules of the cluster reports that get migrated to RSC.
  shouldDeleteCdmSchedules: Boolean
}
# The response of the request to start report migration.
type StartClusterReportMigrationJobReply {
  # The ID of the job instance.
  jobInstanceId: String!
}
type StartCrawlReply {
  crawlId: String!
}
# Input to initiate the snapshot creation job for AWS native EBS volume.
input StartCreateAwsNativeEbsVolumeSnapshotsJobInput {
  # Rubrik UUIDs of EBS volumes for snapshot creation.
  ebsVolumeIds: [UUID!]!

  # Retention SLA ID to be used for the snapshots to be created.
  retentionSlaId: String = ""
}
# Input to initiate a job to create Azure Native Managed Disk snapshots.
input StartCreateAzureNativeManagedDiskSnapshotsJobInput {
  # Rubrik UUIDs of the managed disks whose snapshots are to be taken..
  managedDiskRubrikIds: [UUID!]!

  # The ID of the SLA Domain assigned to protect the on-demand snapshot.
  retentionSlaId: String
}
# Input to initiate a job to create Azure Native Virtual Machine snapshots.
input StartCreateAzureNativeVirtualMachineSnapshotsJobInput {
  # Rubrik UUIDs of the Virtual Machines (VMs) whose snapshots are to be taken.
  virtualMachineRubrikIds: [UUID!]!

  # Retention SLA ID of the on-demand snapshot.
  retentionSlaId: String
}
# Input for starting jobs to disable a cloud account feature for a list of Azure Cloud Accounts.
input StartDisableAzureCloudAccountJobInput {
  # Feature to not be enabled.
  feature: CloudAccountFeature!

  # Rubrik IDs of the Cloud Accounts to not be enabled.
  cloudAccountIds: [UUID!]!
}
# Input for the job to start disabling protection from the Azure Native Subscription.
input StartDisableAzureNativeSubscriptionProtectionJobInput {
  # The Rubrik ID of the Azure subscription for which to disable protection.
  azureSubscriptionRubrikId: UUID!

  # Specifies whether to delete the snapshots associated with the subscription being deleted. When true, deletes the snapshots associated with the subscription being deleted.
  shouldDeleteNativeSnapshots: Boolean!

  # Type of native protection to not be enabled.
  azureNativeProtectionFeature: AzureNativeProtectionFeature!
}
# Input to initiate an export job for an AWS native EC2 instance.
input StartEc2InstanceSnapshotExportJobInput {
  # ID of the snapshot to be exported.
  snapshotId: UUID!

  # Rubrik UUID of the AWS account where the instance will be exported.
  destinationAwsAccountRubrikId: UUID!

  # AWS Native EC2 instance type to be used after export. Some examples are: t2.nano, m5.xlarge. For more information, see https://aws.amazon.com/ec2/instance-types.
  instanceType: AwsNativeEc2InstanceType!

  # Name of the exported instance.
  instanceName: String!

  # List of security group IDs to be used for the exported instance.
  securityGroupIds: [String!]!

  # ID of the subnet to use for the exported instance.
  subnetId: String!

  # Region of the exported instance.
  destinationRegionId: AwsNativeRegion!

  # Specifies whether to copy tags to the exported instance.
  shouldCopyTags: Boolean!

  # ID of the KMS key to be used for export.
  kmsKeyId: String = ""

  # Name of the SSH key pair to be used for export.
  sshKeyPairName: String = ""

  # Power state of the exported instance.
  exportInstanceInPoweredOffState: Boolean = false

  # Type of snapshot used for export.
  snapshotType: SnapshotType = SOURCE

  # ID of the Amazon Machine Image (AMI) to be used for launching the EC2 instance. This field should be specified only when snapshotType is specified as Archived and amiTypeForAwsNativeArchivedSnapshot returns AMI type as USER_SPECIFIED. In other cases, either a pre-existing AMI is picked, or a new AMI is created at runtime, and an AMI ID is not required. The AMI specified here should be present in the target account and region of export. The specified AMI will be used for launching the instance for export, and all its volumes will be replaced.
  amiId: String

  # ARN of the IAM instance profile to be attached to the exported EC2 instance.
  iamInstanceProfileArn: String
}
# Input to initiate an export job for the AWS native EBS volume.
input StartExportAwsNativeEbsVolumeSnapshotJobInput {
  # ID of the snapshot to be exported.
  snapshotId: UUID!

  # Rubrik UUID of the AWS account where exported volume will reside.
  destinationAwsAccountRubrikId: UUID!

  # Region of the exported volume.
  destinationRegionNativeId: AwsNativeRegion!

  # Name of the exported volume.
  volumeName: String!

  # Size of the exported volume in Giga Bytes.
  volumeSize: Int!

  # AWS Native EBS volume type. Some examples are: g3, io2. For more information, see https://aws.amazon.com/ebs/volume-types.
  volumeType: AwsNativeEbsVolumeType!

  # Availability Zone (AZ) of the exported volume.
  availabilityZone: String!

  # Input/Output (IO) operation limit per second for the exported volume.
  iops: Int!

  # Specifies whether to copy tags to the exported volume.
  shouldCopyTags: Boolean!

  # Specifies whether to replace attached volumes.
  shouldReplaceAttached: Boolean!

  # ID of the KMS key to be used for export.
  kmsKeyId: String = ""

  # Type of snapshot used for export.
  snapshotType: SnapshotType = SOURCE
}
# Input for the job to export the specified Azure Native Managed Disk to the specified destination.
input StartExportAzureNativeManagedDiskJobInput {
  # Snapshot ID of the snapshot with which the disk is to be exported.
  snapshotId: UUID!

  # Name of the disk created after export.
  diskName: String!

  # Native ID of the disk encryption set for encrypting the newly created disks.
  diskEncryptionSetNativeId: String

  # Type of the disk created after export.
  diskStorageTier: AzureNativeManagedDiskType!

  # Size of the disk created after export, in GiB.
  diskSize: Int!

  # Resource group to be associated with the disk created after export.
  resourceGroup: String!

  # Region in which the disk created after export will exist.
  destinationRegion: AzureNativeRegion!

  # Availability Zone in which to export the disk. It is empty for regions types which do not support availability zones.
  destinationAvailabilityZone: String

  # Rubrik ID of the subscription in which to export the disk. When empty, the disk is exported to same subscription.
  destinationSubscriptionRubrikId: UUID

  # Specifies whether to export tags from the snapshot or not. When true, the tags from the snapshot are exported as well.
  shouldExportTags: Boolean!

  # Specifies whether to run only the export job or to run both the export and replace jobs. When true, the attached managed disk is exported and replaced.
  shouldReplaceAttachedManagedDisk: Boolean!

  # Specifies whether to recover from the replica of the source snapshot or not. Default value is false.
  shouldUseReplica: Boolean

  # The type of the snapshot to recover from.
  snapshotType: AzureSnapshotType
}
# Input for the job to export the specified Azure Native Virtual Machine to the specified destination.
input StartExportAzureNativeVirtualMachineJobInput {
  # The snapshot ID of the snapshot used to export a virtual machine.
  snapshotId: UUID!

  # The name of the virtual machine created as a result of the export job.
  virtualMachineName: String!

  # Native ID of the disk encryption set for encrypting the newly created disks.
  diskEncryptionSetNativeId: String

  # The resource group associated with the virtual machine created by the export job.
  resourceGroupName: String!

  # The region where the virtual machine created by the export job exists.
  destinationRegion: AzureNativeRegion!

  # The Availability Zone where the virtual machine created by the export job exists. When the region type does not support Availability Zones, this value is null.
  destinationAvailabilityZone: String

  # The Rubrik ID of the Azure subscription to which the virtual machine is exported. When this value is not specified, the virtual machine is exported to the same Azure subscription.
  destinationSubscriptionRubrikId: UUID

  # The size, in GiB, of the virtual machine created by the export job.
  virtualMachineSize: String!

  # The native ID of the subnet used by the virtual machine created by the export job.
  subnetNativeId: String!

  # The native ID of the network security group used by the virtual machine created by the export job.
  networkSecurityGroupNativeId: String

  # Specifies whether to export the tags from the snapshot.
  shouldExportTags: Boolean!

  # Specifies whether to export the virtual machine in a powered-down state.
  shouldPowerOff: Boolean!

  # Specifies whether to recover from a replica of the source snapshot.
  shouldUseReplica: Boolean

  # The native ID of the availability set used by the virtual machine created by the export job.
  availabilitySetNativeId: String

  # Specifies whether to enable accelerated networking for the virtual machine created by the export job. This value is false by default.
  shouldEnableAcceleratedNetworking: Boolean

  # The type of the snapshot to recover from.
  snapshotType: AzureSnapshotType

  # Specifies a list of Azure disk unique native IDs that will be exported. When empty, all disks from the snapshot will be exported.
  recoveryDiskIds: [UUID!]
}
# Input for the job to export the specified Azure SQL Database.
input StartExportAzureSqlDatabaseDbJobInput {
  # Rubrik ID of the Azure SQL Database instance to be exported.
  sourceDatabaseRubrikId: UUID!

  # Name of the exported Azure SQL Database.
  destinationDatabaseName: String!

  # Rubrik ID of the server to which export will be done.
  destinationServerRubrikId: UUID

  # Name of the elastic pool for the exported database.
  elasticPoolName: String

  # Specifies whether the tags will be exported to the new Azure SQL Database.
  shouldExportTags: Boolean!

  # Input for exporting from Point-in-Time (PiT) backup.
  azureSqlDatabaseDbPitExportInput: AzureSqlDatabaseDbPitExport

  # Input for exporting from Long Term Retention (LTR) backup.
  azureSqlDatabaseDbLtrExportInput: AzureSqlDatabaseDbLtrExport

  # Input for exporting from Rubrik managed persistent backup.
  persistentBackupExportInput: AzureSqlPersistentBackupExportInput

  # Input for service tier selected for the export of the database.
  serviceTier: String

  # Input for service object name selected for the export of the database.
  serviceObjectiveName: String
}
# Input for the job to export the specified Azure SQL Managed Instance database.
input StartExportAzureSqlManagedInstanceDbJobInput {
  # Rubrik ID of the Azure SQL Managed Instance Database to be exported.
  sourceManagedInstanceDatabaseRubrikId: UUID!

  # Destination Rubrik ID of the Asure SQL Managed Instance to which export will be done.
  destinationManagedInstanceRubrikId: UUID

  # Name of the exported Azure SQL Managed Instance database.
  destinationDatabaseName: String!

  # Name of the Azure SQL Managed Instance in which database is being exported.
  destinationManagedInstanceName: String!

  # Resource Group in which database is being exported.
  destinationResourceGroupName: String!

  # Input for exporting from Point-in-Time (PiT) backup.
  azureSqlManagedInstanceDbPitExportInput: AzureSqlManagedInstanceDbPitExport

  # Input for exporting from Long Term Retention (LTR) backup.
  azureSqlManagedInstanceDbLtrExportInput: AzureSqlManagedInstanceDbLtrExport

  # Input for exporting from Rubrik managed persistent backup.
  persistentBackupExportInput: AzureSqlPersistentBackupExportInput

  # Input for service tier selected for the export of the database.
  serviceTier: String

  # Input for service object name selected for the export of the database.
  serviceObjectiveName: String
}
# Input to trigger AWS native RDS Instance export job.
input StartExportRdsInstanceJobInput {
  # Rubrik ID of the RDS Instance to be exported.
  rdsInstanceId: UUID!

  # Specifies whether the export of the instance is from snapshot or point-in-time.
  isPointInTime: Boolean!

  # ID of the snapshot if the export is from snapshot.
  snapshotId: String

  # Export timestamp for Point in Time recovery of the instance.
  exportTime: DateTime

  # Name of the exported RDS DB instance.
  dbInstanceName: String!

  # AWS account in which the exported RDS instance will be launched.
  destinationAwsNativeAccountId: String!

  # Region in which the exported RDS DB instance will be launched.
  destinationRegionNativeId: AwsNativeRegion!

  # Deprecated, use databaseClass instead. Instance class of RDS instance.
  dbInstanceClass: AwsNativeRdsDbInstanceClass!

  # Instance class of RDS instance. AWS supported instance classes can be found here https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#Concepts.DBInstanceClass.Types.
  databaseInstanceClass: String = ""

  # Availability Zone (AZ) in which the exported RDS DB instance must be launched.
  primaryAz: String = ""

  # Port on which the exported RDS DB instance accepts connections.
  port: Long!

  # Name of the option group selected by the user for the new RDS instance.
  optionGroupName: String = ""

  # Name of the DB parameter group selected by the user for the new RDS instance.
  parameterGroupName: String = ""

  # Name of the subnet group for the new RDS instance.
  subnetGroupName: String = ""

  # Storage type of the exported RDS DB instance.
  storageType: AwsNativeRdsStorageType = NOT_SPECIFIED

  # List of security group IDs for the new RDS instance. Default security group is used if empty list is provided here.
  securityGroupIds: [String!] = []

  # Input Output (I/O) per second of the exported RDS DB instance.
  iops: Int = 0

  # Specifies whether the new RDS instance is publicly accessible or not.
  isPubliclyAccessible: Boolean!

  # Specifies whether tags will be exported to the new RDS instance.
  shouldExportTags: Boolean!

  # Specifies whether the exported RDS DB instance is multi-AZ or not.
  isMultiAz: Boolean!

  # KMS Key ID of the exported RDS DB instance.
  kmsKeyId: String = ""

  # List of subnet IDs for the newly created subnet group, which will be associated with the exported RDS DB instance. Default subnet ids are used if empty list is provided here.
  subnetIds: [String!] = []

  # Type of snapshot used for export. Required only if export is from a snapshot.
  snapshotType: SnapshotType = SOURCE

  # Name of the DB cluster.
  dbClusterName: String = ""

  # Name of the DB cluster parameter group.
  dbClusterParameterGroupName: String = ""
}
# Input for an on-demand AWS S3 snapshot recovery job.
input StartRecoverS3SnapshotJobInput {
  # ID of the S3 bucket workload.
  workloadId: UUID!

  # ID of the S3 bucket snapshot to recover.
  snapshotId: UUID

  # Restore date for PiTR recovery of the S3 bucket.
  restoreDate: DateTime

  # ARN of the destination S3 bucket.
  destinationBucketArn: String!

  # Flag to specify full or granular bucket recovery.
  shouldRecoverFullBucket: Boolean!

  # List of object keys for granular recovery.
  objectKeys: [String!]!
}
# Input to initiate a job to refresh an AWS native account.
input StartRefreshAwsNativeAccountsJobInput {
  # Rubrik UUIDs of the AWS account to be refreshed.
  awsAccountRubrikIds: [UUID!]!

  # Native protection feature to be refreshed.
  awsNativeProtectionFeatures: [AwsNativeProtectionFeature!]!
}
# Input to trigger the Refresh Azure Native Subscriptions job.
input StartRefreshAzureNativeSubscriptionsJobInput {
  # Rubrik IDs of the Azure Native Subscriptions to be refreshed.
  azureSubscriptionRubrikIds: [UUID!]!
}
# Trigger AWS EC2 instance snapshot restore job.
input StartRestoreAwsNativeEc2InstanceSnapshotJobInput {
  # ID of snapshot to restore.
  snapshotId: String!

  # Specifies the power status of the restored EC2 Instance. When true, the EC2 Instance is powered-on after completion of the restore.
  shouldPowerOn: Boolean!

  # Specifies whether to restore associated tags. If true, the restored EC2 Instance will have same tags associated.
  shouldRestoreTags: Boolean!

  # Snapshot type to use if source snapshot is expired.
  snapshotTypeToUseIfSourceExpired: SnapshotTypeToUseIfSourceExpired
}
# Inputs to trigger the job to restore Azure Native Virtual Machine.
input StartRestoreAzureNativeVirtualMachineJobInput {
  # Snapshot ID of the snapshot which is to be restored.
  snapshotId: UUID!

  # Specifies whether the restored virtual machine is to be launched in powered on state. When false, the restored virtual machine will not be connected to the internet.
  shouldPowerOn: Boolean!

  # Specifies whether the tags at the time of snapshot should also be restored. When true, the tags on the virtual machine will be reverted to the time of the backup.
  shouldRestoreTags: Boolean!

  # Snapshot type to use if source snapshot is expired.
  snapshotTypeToUseIfSourceExpired: SnapshotTypeForRestoreIfSourceExpired

  # Specifies a list of Azure disk unique native IDs that will be restored. When empty, all disks from the snapshot will be restored.
  recoveryDiskIds: [UUID!]
}
# The configuration to start a hunt, including which objects, indicators of compromise, and advanced parameters.
input StartThreatHuntInput {
  # Notes to describe this threat hunt.
  notes: String = ""

  # Criteria to restrict files to scan.
  fileScanCriteria: MalwareScanFileCriteriaInput

  # List of IOCs to scan for.
  indicatorsOfCompromise: [IndicatorOfCompromiseInput!]!

  # Maximum number of matches per shapshot, per IOC.  Scanning for an Indicator Of Compromise within a snapshot will terminate once this many matches have been detected. Defaults to one.
  maxMatchesPerSnapshot: Int

  # Name of this threat hunt.
  name: String!

  # Object FIDs to scan for malware.
  objectFids: [UUID!]!

  # Additional information required for files with malware matches.
  requestedMatchDetails: RequestedMatchDetailsInput

  # Specifies whether features that rely on the accuracy of filesystem metadata, like creation time and modification time of files, are enabled or not. These features include backend optimizations to skip re-scanning files that have not changed across snapshots, as indicated by the unchanged timestamps of files. This flag also gates access to some filters that can be specified in this API. Note that this flag should be used with caution, as relying on file timestamps may make the system vulnerable to adversarial techniques such as timestamp manipulation.
  shouldTrustFilesystemTimeInfo: Boolean

  # Limit which snapshots to include in the threat hunt.
  snapshotScanLimit: MalwareScanSnapshotLimitInput

  # UUID used to identify the cluster the request goes to.
  clusterUuid: UUID!
}
# Response of the threat hunt request.
type StartThreatHuntReply {
  # Status of the threat hunt.
  huntStatus: AsyncRequestStatus

  # Status of the metadata load request.
  isSyncSuccessful: Boolean!

  # Forever id of the hunt that can be used
  # to query threat hunt APIs.
  huntId: String!
}
# Start time attributes.
type StartTimeAttributes {
  # Day of the week.
  dayOfWeek: DayOfWeekOpt

  # Hour of the day.
  hour: Int!

  # Minute of the day.
  minute: Int!
}
# Start time attributes.
input StartTimeAttributesInput {
  # Day of the week.
  dayOfWeek: DayOfWeekOptInput

  # Hour of the day.
  hour: Int = 0

  # Minute of the day.
  minute: Int = 0
}
# Input to mount volume group snapshot.
input StartVolumeGroupMountInput {
  # Required. Configuration for the mount request. The mount will expose an SMB address per recovered volume. In addition, if a target host is specified, each volume must specify a mount path. If a target host is specified but no mount paths are, they will be generated for every volume. In all cases, a single SMB share will be created for this mount. If a target host is specified, the share will only be accessible by that host.
  config: VolumeGroupMountSnapshotJobConfigInput!

  # Required. ID of snapshot.
  id: String!
}
# Supported in v5.3+
# Information about static IP configuration.
type StaticIpInfo {
  # Supported in v5.3+
  # DNS Servers for the specified IP addresses.
  dnsServers: [String!]!

  # Supported in v5.3+
  # Gateway for the specified IP addresses.
  gateway: String

  # Required. Supported in v5.3+
  # IP addresses and ranges, separated by commas.
  ipAddresses: [String!]!

  # Required. Supported in v5.3+
  # Subnet mask for the specified IP addresses.
  subnetMask: String!
}
# Supported in v5.3+
# Information about static IP configuration.
input StaticIpInfoInput {
  # Supported in v5.3+
  # DNS Servers for the specified IP addresses.
  dnsServers: [String!] = []

  # Supported in v5.3+
  # Gateway for the specified IP addresses.
  gateway: String

  # Required. Supported in v5.3+
  # IP addresses and ranges, separated by commas.
  ipAddresses: [String!]!

  # Required. Supported in v5.3+
  # Subnet mask for the specified IP addresses.
  subnetMask: String!
}
type Status {
  stringValue: String!
}
# Generic status response.
type StatusResponse {
  # Status message.
  message: String!

  # Return code.
  code: String!

  # Exception trace.
  excepshuns: String!
}
# Input to stop a job instance.
input StopJobInstanceFromEventSeriesInput {
  # ID of the event series.
  eventSeriesId: UUID!
}
# Input to stop a job instance.
input StopJobInstanceInput {
  # ID of the job instance.
  jobInstanceId: String

  # ID of the event series.
  eventSeriesId: String
}
# Stop job instance output.
type StopJobInstanceReply {
  # True if stop process is initiated for job instance.
  success: Boolean!
}
type StorageAccount {
  id: String!
  name: String!
  regionName: String!
  resourceGroup: ResourceGroup
  kind: String!
  accessTier: StorageAccountTier!
  sku: StorageAccountSku!

  # Network rules for Azure storage account.
  networkRuleSet: NetworkRuleSet

  # Specifies if versioning is enabled for the storage account.
  isVersioningEnabled: Boolean!
}
# Storage Account Config Item.
input StorageAccountConfigItem {
  # The name of storage account.
  name: String = ""

  # The tier of storage account.
  tier: StorageAccountTier = COOL

  # The sku of storage account.
  sku: StorageAccountSku = STANDARD_LRS

  # The immutability status for colossus container in storage account.
  containerImmutabilityStatus: ColossusStorageContainerImmutabilityStatus = STATUS_UNSPECIFIED

  # Implies if storage versioning is enabled.
  versioningEnabled: Boolean = false
}
# Paginated list of StorageAccount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type StorageAccountConnection {
  # List of StorageAccount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [StorageAccountEdge!]!

  # List of StorageAccount objects.
  nodes: [StorageAccount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of StorageAccount objects matching the request arguments.
  count: Int!
}
# Wrapper around the StorageAccount object. This wrapper is used for pagination.
type StorageAccountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual StorageAccount object wrapped by this edge.
  node: StorageAccount!
}
# Azure Storage account SKU type.
enum StorageAccountSku {
  # Standard Geo Redundant Storage.
  STANDARD_GRS

  # Standard Locally Redundant Storage.
  STANDARD_LRS

  # Standard Zone Redundant Storage.
  STANDARD_ZRS
}
# Azure Storage Account Tier.
enum StorageAccountTier {
  # Storage account configured with cool access tier.
  COOL

  # Storage account configured with hot access tier.
  HOT
}
# Supported in v5.0+
input StorageArrayDefinitionInput {
  # Supported in v5.0+
  # A digital certificate, or concatenated chain of digital certificates, that permits verification of the public key certificate of the storage array. Each certificate must be an X.509 certificate in Base64 encoded DER format and must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String

  # Supported in v6.0+
  # The ID corresponding to the imported certificate.
  certificateId: String

  # Required. Supported in v5.0+
  arrayType: StorageArrayType!

  # Required. Supported in v5.0+
  # Resolvable hostname or IPv4 address of the storage array.
  hostname: String!

  # Required. Supported in v5.0+
  password: String!

  # Required. Supported in v5.0+
  username: String!
}
# Supported in v5.0+
type StorageArrayDetail {
  # Supported in v5.0+
  # A digital certificate, or concatenated chain of digital certificates, that permits verification of the public key certificate of the storage array. Each certificate must be an X.509 certificate in Base64 encoded DER format and must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String

  # Required. Supported in v5.0+
  # Connection status of a Storage Array.
  connectionStatus: RefreshableObjectConnectionStatus

  # Required. Supported in v5.0+
  # Resolvable hostname or IPv4 address of the storage array.
  hostname: String!

  # Required. Supported in v5.0+
  id: String!

  # Required. Supported in v5.0+
  username: String!
  arrayType: StorageArrayType!
}
# Storage array input in a cluster.
input StorageArrayInput {
  # Required. UUID of the Rubrik cluster the request goes to.
  clusterUuid: String!

  # ID assigned to a storage array object.
  id: String!
}
# Result of an operation on an existing storage array in a Rubrik cluster.
type StorageArrayOperationOutputType {
  # ID of the storage array.
  id: String!

  # Details of the Rubrik cluster.
  cluster: Cluster!

  # Optional error message in case of failure.
  errorMessage: String
}
# Supported in v5.0+
# Storage array type/brand.
enum StorageArrayType {
  STORAGE_ARRAY_TYPE_DELL_EMC_POWER_STORE
  STORAGE_ARRAY_TYPE_HITACHI_STORAGE
  STORAGE_ARRAY_TYPE_NET_APP_ONTAP
  STORAGE_ARRAY_TYPE_PURE_STORAGE
}
# Supported in m3.2.0-m4.2.0
# Metadata for mosaic store.
type StoreMetadata {
  # Supported in m3.2.0-m4.2.0
  # S3 bucket name.
  s3Bucket: String

  # Supported in m3.2.0-m4.2.0
  # S3 account region.
  s3Region: String
}
# Information about list of strains identified.
type StrainInfo {
  # Name of the strain detected.
  strainId: String!

  # Total number of files affected by the above strain.
  totalAffectedFiles: Long!

  # Total number of ransomware notes corresponding to the
  # above strain.
  totalRansomwareNotes: Long!

  # A sample of filepaths that are affected by the strain.
  sampleAffectedFiles: [String!]!

  # A sample of filepaths that are ransomware notes.
  sampleRansomwareNotes: [String!]!

  # Additional information on the affected files.
  sampleAffectedFilesInfo: [SuspiciousFileInfo!]!

  # Additional information on the ransomware note files.
  sampleRansomwareNoteFilesInfo: [SuspiciousFileInfo!]!
}
# The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
scalar String
type Subnet {
  id: String!
  name: String!
  securityGroup: SecurityGroup
}
# Paginated list of Subnet objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SubnetConnection {
  # List of Subnet objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SubnetEdge!]!

  # List of Subnet objects.
  nodes: [Subnet!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Subnet objects matching the request arguments.
  count: Int!
}
# Wrapper around the Subnet object. This wrapper is used for pagination.
type SubnetEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Subnet object wrapped by this edge.
  node: Subnet!
}
# Represents a subnet group on AWS.
type SubnetGroup {
  # Name of the subnet group.
  name: String!

  # Amazon Resource Name (ARN) of the subnet group.
  arn: String!

  # Virtual Private Cloud (VPC) corresponding to the subnet group.
  vpcId: String!

  # Subnets associated with the subnet group.
  subnets: [AwsNativeSubnet!]!
}
# The event and audit severities that the webhook is subscribed to.
type SubscriptionSeverity {
  # The event severities that the webhook is subscribed to.
  eventSeverities: [ActivitySeverityEnum!]!

  # The audit types that the webhook is subscribed to.
  auditSeverities: [UserAuditSeverityEnum!]!
}
# Input for the event and audit severities that the webhook is subscribed to.
input SubscriptionSeverityInput {
  # Input for the event severities that the webhook is subscribed to.
  eventSeverities: [ActivitySeverityEnum!]

  # Input for the audit severities that the webhook is subscribed to.
  auditSeverities: [UserAuditSeverityEnum!]
}
# The event and audit types that the webhook is subscribed to.
type SubscriptionType {
  # The event types that the webhook is subscribed to.
  eventTypes: [ActivityTypeEnum!]!

  # The audit types that the webhook is subscribed to.
  auditTypes: [UserAuditTypeEnum!]!

  # Specifies whether the webhook is subscribed to all events.
  isSubscribedToAllEvents: Boolean!

  # Specifies whether the webhook is subscribed to all audits.
  isSubscribedToAllAudits: Boolean!
}
# Input for the event and audit types that the webhook is subscribed to.
input SubscriptionTypeInput {
  # Input for the event types that the webhook is subscribed to. If specified, IsSubscribedToAllEvents should be false.
  eventTypes: [ActivityTypeEnum!]

  # Input for the audit types that the webhook is subscribed to. If specified, IsSubscribedToAllAudits should be false.
  auditTypes: [UserAuditTypeEnum!]

  # Specifies whether the webhook is subscribed to all events. If true, eventTypes should be empty.
  isSubscribedToAllEvents: Boolean = false

  # Specifies whether the webhook is subscribed to all audits. If true, auditTypes should be empty.
  isSubscribedToAllAudits: Boolean = false
}
# Contains the success details about Rubrik Backup Service connectivity jobs.
type Success {
  # Taskchain ID of the taskchain.
  taskchainId: String!

  # Workload ID of the taskchain.
  workloadId: UUID!
}
# Total summarized counts.
type SummaryCount {
  # Total count.
  totalCount: Long!

  # Count after filtering hits from allowlist.
  violatedCount: Long!
}
# Summary hits.
type SummaryHits {
  # Total hits.
  totalHits: Long!

  # Hits after applying allowed list.
  violatedHits: Long!
}
# Input for Rubrik Support portal login.
input SupportPortalLoginInput {
  # Account ID.
  account: String = ""

  # Hostname to access the Rubrik Support portal.
  hostname: String = "rubrik.force.com"

  # Rubrik Support portal organization ID.
  organizationId: String = "00D40000000N3x2"

  # Rubrik Support portal password to login.
  username: String!

  # Support portal password to login.
  password: String!
}
# Support portal login response.
type SupportPortalLoginReply {
  # Support portal login status object.
  status: StatusResponse
}
# Support portal logout response.
type SupportPortalLogoutReply {
  # Support portal logout status object.
  status: StatusResponse
}
# Support portal user session status.
type SupportPortalStatusReply {
  # Support portal user session status.
  status: StatusResponse

  # Is user logged in flag.
  isLoggedIn: Boolean!

  # Support portal username.
  username: String!
}
# Supported in v5.0+
type SupportTunnelInfo {
  # Supported in v5.0+
  # Time when the tunnel was enabled or omitted when the tunnel is not enabled.
  enabledTime: DateTime

  # Supported in v5.0+
  # Inactivity timeout in seconds or omitted if the tunnel is not enabled.
  inactivityTimeoutInSeconds: Long

  # Required. Supported in v5.0+
  # True if the support tunnel is enabled on this node. False otherwise.
  isTunnelEnabled: Boolean!

  # Supported in v5.0+
  # Time when the tunnel was last used or omitted if the tunnel is not enabled.
  lastActivityTime: DateTime

  # Supported in v5.0+
  # The port used to tunnel traffic. Port number will be deprecated in the future when we transition to new cloud infrastructure that does not rely on unique port numbers.
  port: Long

  # Supported in v5.3+
  # Error message when unable to open support tunnel.
  errorMessage: String
}
# Support user access object details.
type SupportUserAccess {
  # Support user access ID.
  id: Int!

  # Support user access start time.
  startTime: DateTime!

  # Support user access duration, in hours.
  durationInHours: Int!

  # Support user access end time.
  endTime: DateTime!

  # Ticket number associated to the support user access request.
  ticketNumber: String!

  # User providing support user access.
  accessProviderUser: User

  # Impersonated user.
  impersonatedUser: User

  # Support user access status.
  accessStatus: SupportUserAccessStatus!
}
# Paginated list of SupportUserAccess objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type SupportUserAccessConnection {
  # List of SupportUserAccess objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [SupportUserAccessEdge!]!

  # List of SupportUserAccess objects.
  nodes: [SupportUserAccess!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of SupportUserAccess objects matching the request arguments.
  count: Int!
}
# Wrapper around the SupportUserAccess object. This wrapper is used for pagination.
type SupportUserAccessEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual SupportUserAccess object wrapped by this edge.
  node: SupportUserAccess!
}
# Fields to filter support access objects.
enum SupportUserAccessFilterField {
  # Filter by access provider or impersonated user email address.
  ACCESS_PROVIDER_OR_IMPERSONATED_USER

  # Filter by access status.
  ACCESS_STATUS

  # Filter by support access enable time.
  ENABLE_AT

  # Filter by impersonated user ID.
  IMPERSONATED_USER_ID

  # Filter expired requests.
  IS_EXPIRED

  # Filter by support access ID.
  SUPPORT_ACCESS_ID

  # Filter by support user ID.
  SUPPORT_USER_ID
}
# Input for SupportUserAccess query filter.
input SupportUserAccessFilterInput {
  # Value of field.
  text: String = ""

  # Field from which query should be filtered.
  field: SupportUserAccessFilterField!
}
# Fields to sort support user access.
enum SupportUserAccessSortByField {
  # Sort by support access enable time.
  ENABLE_AT
}
# Support access status values.
enum SupportUserAccessStatus {
  # Support access status is closed.
  SUPPORT_ACCESS_STATUS_CLOSED

  # Support access status is open.
  SUPPORT_ACCESS_STATUS_OPEN

  # Support access status is unknown.
  SUPPORT_ACCESS_STATUS_UNSPECIFIED
}
# Information about the suspicious file.
type SuspiciousFileInfo {
  # Path to the suspicious file.
  filePath: String!

  # The time, in UTC format, when the file was last changed.
  lastModified: DateTime

  # File size in bytes.
  fileSizeBytes: Long!
}
type SyslogCertificateInfo {
  # Syslog server's X.509 certificate in Base64 encoded DER format. The certificate should start with -----BEGIN CERTIFICATE-----
  serverCertificate: String

  # User friendly name to identify the server certificate.
  serverCertificateName: String
}
# Input for retrieving syslog information.
input SyslogCertificateInfoInput {
  # Syslog server's X.509 certificate in Base64 encoded DER format.
  serverCertificate: String

  # User friendly name to identify the server certificate.
  serverCertificateName: String
}
# Supported in v5.1+
type SyslogExportRuleFull {
  # Required. Supported in v5.1+
  # Specifies whether TLS should be used to communicate with the syslog server.
  enableTls: Boolean!

  # Required. Supported in v5.1+
  hostname: String!

  # Required. Supported in v5.1+
  port: Int!

  # Supported in v5.2+
  # The ID corresponding to the imported certificate used by the syslog server.
  certificateId: String

  # Supported in v5.1+
  facility: SyslogFacility!

  # Supported in v5.1+
  protocol: TransportLayerProtocol!

  # Supported in v5.1+
  severity: SyslogSeverity!
}
# Supported in v5.1+
input SyslogExportRuleFullInput {
  # Supported in v5.2+
  # The ID corresponding to the imported certificate used by the syslog server.
  certificateId: String

  # Required. Supported in v5.1+
  facility: SyslogFacility!

  # Required. Supported in v5.1+
  protocol: TransportLayerProtocol!

  # Required. Supported in v5.1+
  severity: SyslogSeverity!

  # Required. Supported in v5.1+
  # Specifies whether TLS should be used to communicate with the syslog server.
  enableTls: Boolean!

  # Required. Supported in v5.1+
  hostname: String!

  # Required. Supported in v5.1+
  port: Int!
}
# Input for retrieving a syslog export rule.
input SyslogExportRuleInput {
  # The syslog certificate information.
  syslogCertificateInfo: SyslogCertificateInfoInput

  # The syslog rule.
  syslogExportRuleFull: SyslogExportRuleFullInput
}
# Supported in v5.1+
input SyslogExportRulePartialInput {
  # Supported in v5.1+
  # Specifies whether TLS should be used to communicate with the syslog server.
  enableTls: Boolean

  # Supported in v5.1+
  hostname: String

  # Supported in v5.1+
  port: Int

  # Supported in v5.2+
  # The ID corresponding to the imported certificate used by the syslog server.
  certificateId: String

  # Supported in v5.1+
  facility: SyslogFacility

  # Supported in v5.1+
  protocol: TransportLayerProtocol

  # Supported in v5.1+
  severity: SyslogSeverity
}
# Supported in v5.1+
type SyslogExportRuleSummary {
  # Required. Supported in v5.1+
  # ID corresponding to the syslog export rule.
  id: String!
  syslogCertificateInfo: SyslogCertificateInfo
  syslogExportRuleFull: SyslogExportRuleFull
}
# Supported in v5.1+
type SyslogExportRuleSummaryListResponse {
  # Supported in v5.1+
  # List of matching objects.
  data: [SyslogExportRuleSummary!]!

  # Supported in v5.1+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.1+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Input for updating a syslog export rule.
input SyslogExportRuleUpdateInput {
  # The syslog certificate information.
  syslogCertificateInfo: SyslogCertificateInfoInput

  # The syslog rule.
  syslogExportRulePartial: SyslogExportRulePartialInput
}
# Supported in v5.1+
# The syslog message classification based on RFC 5424.
enum SyslogFacility {
  SYSLOG_FACILITY_ALL
  SYSLOG_FACILITY_AUTH
  SYSLOG_FACILITY_CLOCK
  SYSLOG_FACILITY_CRON
  SYSLOG_FACILITY_DAEMON
  SYSLOG_FACILITY_FTP
  SYSLOG_FACILITY_KERNEL
  SYSLOG_FACILITY_LOG_ALERT
  SYSLOG_FACILITY_LOG_AUDIT
  SYSLOG_FACILITY_LPR
  SYSLOG_FACILITY_MAIL
  SYSLOG_FACILITY_NEWS
  SYSLOG_FACILITY_NTP
  SYSLOG_FACILITY_RUBRIK_APP
  SYSLOG_FACILITY_RUBRIK_CLI
  SYSLOG_FACILITY_RUBRIK_EVENT
  SYSLOG_FACILITY_RUBRIK_SSH
  SYSLOG_FACILITY_SECURITY
  SYSLOG_FACILITY_SYSLOG
  SYSLOG_FACILITY_USER
  SYSLOG_FACILITY_UUCP
}
# Supported in v5.0+
type SyslogServerTestResult {
  # Required. Supported in v5.0+
  # The test message that was sent.
  message: String!
}
# Supported in v5.1+
# The syslog message severity based on RFC 5424.
enum SyslogSeverity {
  SYSLOG_SEVERITY_ALERT
  SYSLOG_SEVERITY_ALL
  SYSLOG_SEVERITY_CRITICAL
  SYSLOG_SEVERITY_DEBUG
  SYSLOG_SEVERITY_EMERGENCY
  SYSLOG_SEVERITY_ERROR
  SYSLOG_SEVERITY_INFORMATIONAL
  SYSLOG_SEVERITY_NOTICE
  SYSLOG_SEVERITY_WARNING
}
type TableFilters {
  ProtectionTaskDetailsTable: ProtectionTaskDetailsTableFilter!
  RecoveryTaskDetailsTable: RecoveryTaskDetailsTableFilter!
}
# Represents a tag key-value pair of an AWS resource.
type Tag {
  # Tag key.
  key: String!

  # Tag value.
  value: String!
}
# Tag filter parameters.
input TagFilterParams {
  filterType: TagFilterType = TAG_KEY
  tagKey: String = ""
  tagValue: String = ""
}
# Tag filter type.
enum TagFilterType {
  # Filter by exact value of key, and all the tag values.
  TAG_KEY

  # Filter by exact values of tag key and value.
  TAG_KEY_VALUE
}
# Input for tag.
input TagInput {
  # Key for the tag.
  key: String!

  # Value for the tag.
  value: String!
}
# Key-value pair of string.
type TagObject {
  # Key of the tag or label.
  key: String!

  # Value of the tag or label.
  value: String!
}
# Represents the SLA Domain ID and name.
type TagRuleEffectiveSla {
  # The effective SLA Domain ID.
  id: String!

  # The effective SLA Domain name.
  name: String!
}
# SLA assignment type of a tag rule.
enum TagRuleSlaAssignType {
  # The tag rule is not protected.
  DO_NOT_PROTECT

  # The tag rule is protected with an SLA domain.
  PROTECT_WITH_SLA_ID
}
# Tag represents a tag key-value pair.
type TagRuleTag {
  # Tag key of the tag rule.
  tagKey: String!

  # Tag value of the tag rule.
  tagValue: String!

  # Indicates if all tag values should be matched.
  matchAllValues: Boolean!
}
# Represents tag key-value pair.
input TagType {
  # Tag key of the tag rule.
  tagKey: String!

  # Tag value of the tag rule.
  tagValue: String!

  # Specifies if all tag values should be matched.
  matchAllValues: Boolean!
}
# Input for tags.
input TagsInput {
  # List of tags.
  tagList: [TagInput!]!
}
# Input for api call to take on demand snapshot of a Managed Volume.
input TakeManagedVolumeOnDemandSnapshotInput {
  # Configuration for the on-demand snapshot.
  config: ManagedVolumeSnapshotConfigInput

  # Required. ID of the SLA Managed Volume.
  id: String!
}
# Input for taking a SQL Server log backup.
input TakeMssqlLogBackupInput {
  # Required. ID of the Microsoft SQL database.
  id: String!
}
input TakeOnDemandOracleDatabaseSnapshotInput {
  # Required. Configuration for the on-demand snapshot of an Oracle database.
  config: OracleBackupJobConfigInput!

  # Required. ID assigned to an Oracle database object.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
input TakeOnDemandOracleLogSnapshotInput {
  # Required. ID assigned to an Oracle database object.
  id: String!
}
# Represents the error in response to triggering the on-demand snapshot of the workload.
type TakeOnDemandSnapshotError {
  # The ID of the workload.
  workloadId: UUID!

  # The error string.
  error: String!
}
# Input for taking on demand snapshot.
input TakeOnDemandSnapshotInput {
  # List of workload IDs.
  workloadIds: [UUID!]!

  # Retention SLA ID for the on demand snapshot. This can be passed as an empty string.
  slaId: String!
}
# Represents the response to the take on-demand snapshot operation. For each workload ID that the on-demand snapshot was triggered, it either ends up being in the taskchainUuids or the errors map depending on if the operation succeeded or failed respectively.
type TakeOnDemandSnapshotReply {
  # The UUIDs of the on-demand snapshot taskchains.
  taskchainUuids: [TakeOnDemandSnapshotTaskchainUuid!]!

  # The errors in response to taking the on-demand snapshots.
  errors: [TakeOnDemandSnapshotError!]!
}
# Represents the taskchain UUID in response to triggering the on-demand snapshot of workload.
type TakeOnDemandSnapshotTaskchainUuid {
  # The ID of the workload.
  workloadId: UUID!

  # The uuid of the job instance.
  taskchainUuid: UUID!
}
# Target information used for archival or replication.
interface Target {
  # The cluster to which this target belongs.
  cluster: Cluster!

  # The type of the target.
  targetType: TargetType!

  # The ID of the target.
  id: String!

  # The name of the target.
  name: String!

  # The scope of the location of the target. Possible values are Global or Local.
  locationScope: LocationScope!

  # Specifies whether the status of the target is active. When set to false, the target is either paused or not enabled.
  isActive: Boolean!

  # Specifies whether the target is archived.
  isArchived: Boolean!

  # Archival location to which the mapping target belongs.
  targetMapping: TargetMappingBasic

  # Name of the Rubrik cluster that archives to this archival location.
  clusterName: String

  # Status of the target.
  status: ArchivalLocationStatus!

  # Upgrade status of the target.
  upgradeStatus: UpgradeStatus!

  # Number of bytes stored on the target.
  consumedBytes: Long

  # Number of archiving tasks running on this target.
  runningTasks: Int

  # Number of archiving tasks failed on this target.
  failedTasks: Int

  # The retrieval method of the reader target.
  readerRetrievalMethod: ReaderRetrievalMethod

  # List of archival groups the archival target belongs to. In case the target has no valid mappings, a null array is returned.
  targetMappingBasic: [TargetMappingBasic!]

  # Status of the target.
  locationConnectionStatus: ConnectionStatusType!
}
# Paginated list of Target objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type TargetConnection {
  # List of Target objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [TargetEdge!]!

  # List of Target objects.
  nodes: [Target!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Target objects matching the request arguments.
  count: Int!
}
# Wrapper around the Target object. This wrapper is used for pagination.
type TargetEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Target object wrapped by this edge.
  node: Target!
}
# Encryption type for data in target location.
enum TargetEncryptionTypeEnum {
  # Password based encryption.
  ENCRYPTION_PASSWORD_BASED

  # KMS Master Key ID based encryption.
  KMS_MASTER_KEY_BASED

  # RSA Key based encryption.
  RSA_KEY_BASED

  # Unknown encryption type.
  UNKNOWN_ENCRYPTION_TYPE
}
# Filter for target query request.
input TargetFilterInput {
  # Field from which query should be filtered.
  field: TargetQueryFilterField = NAME

  # Value of the field.
  text: String = ""

  # List of value for the field.
  textList: [String!] = []
}
# Target mapping information.
type TargetMapping {
  id: UUID!
  name: String!
  groupType: ArchivalGroupType!
  targetType: TargetType!

  # Connection status for archival group.
  connectionStatus: ArchivalGroupConnectionStatus

  # Tiering status for archival group.
  tieringStatus: [ArchivalGroupTieringStatus!]
  targets: [Target!]
  targetTemplate: TargetTemplate
}
# Information about the target mapping identifier.
type TargetMappingBasic {
  # Id of the target mapping.
  id: UUID!

  # Name of the target mapping.
  name: String!
}
# Filter for target mapping query request.
input TargetMappingFilterInput {
  # Field from which query should be filtered.
  field: TargetMappingQueryFilterField = NAME

  # Value of the field.
  text: String = ""

  # List of value for the field.
  textList: [String!] = []
}
# Target mapping filter field.
enum TargetMappingQueryFilterField {
  # Filter by target mapping ID.
  ARCHIVAL_GROUP_ID

  # Filter by target mapping type.
  ARCHIVAL_GROUP_TYPE

  # Filter by target mapping type.
  ARCHIVAL_LOCATION_TYPE

  # Filter by cloud account ID.
  CLOUD_ACCOUNT_ID

  # Filter by cloud native use case.
  CLOUD_NATIVE_USE_CASE

  # Filter by excluding target type.
  EXCLUDE_ARCHIVAL_LOCATION_TYPE

  # Filter to exclude group types.
  EXCLUDE_GROUP_TYPE

  # Filter by target mapping name.
  NAME
}
# Enumerates the types of filters that can be applied when querying for
# Archival Locations.
enum TargetQueryFilterField {
  # Names of the additional filters required for archival location
  # details. These fields are enumerated in
  # ArchivalLocationAdditionalFields.
  ADDITIONAL_FIELDS_REQUIRED

  # Filter archival locations by use case type as defined by
  # ArchivalEntityUseCaseType.
  ARCHIVAL_ENTITY_USE_CASE_TYPE

  # Filter archival locations by the ID of the Rubrik cluster.
  CLUSTER_ID

  # Filter to exclude Cloud Native type archival locations.
  EXCLUDE_CLOUD_NATIVE

  # Filter archival location by the Rubrik CDM ID of the location.
  EXTERNAL_CDM_LOCATION_ID

  # Filter archival locations by archival group name. (Note: We do not
  # use archival groups currently).
  GROUP_NAME @deprecated(reason: "We do not use archival groups currently.")

  # Filter archived locations.
  IS_ARCHIVED @deprecated(reason: "Archived locations should not be queried for.")

  # Filter archival locations that are part of an automatically
  # created Archival Group. (Note: We do not use archival groups
  # currently).
  IS_MANAGED_BY_AUTO_AG @deprecated(reason: "We do not use archival groups currently.")

  # Filter archival locations by the RSC-managed ID or the CDM FID.
  LOCATION_ID

  # Filter RSC archival locations by region.
  LOCATION_REGION

  # Filter archival locations by management scope: globally or locally
  # managed locations.
  LOCATION_SCOPE

  # Filter by tier for RCS archival location.
  LOCATION_TIER

  # Filter archival locations by storage provider type.
  LOCATION_TYPE

  # Filter archival locations by archival group name. (Note: We do not
  # use archival groups currently).
  LOC_NAME_OR_GROUP_NAME

  # Filter archival locations by name.
  NAME

  # Filter archival locations by status.
  STATUS
}
# Input required to upload a database snapshot to an Azure storage account.
input TargetStorageAccountConfigInput {
  # Cloud account ID of the target storage account's subscription.
  subscriptionCloudAccountId: UUID!

  # Resource group name of the storage account.
  resourceGroupName: String!

  # Storage account name where database snapshot will be uploaded.
  storageAccountName: String!

  # Tags for the storage account. If storage account already exists, these tags are ignored and existing tags will be retained.
  tags: TagsInput
}
# Sync status of the archival location.
enum TargetSyncStatus {
  # Location sync failed.
  ACTION_FAILED

  # Location sync failure being retried.
  ACTION_FAILED_RETRY

  # Location is not created on cluster.
  NOT_CREATED_ON_CDM

  # Reader location is being promoted to owner.
  PENDING_PROMOTE

  # Reader location is being refreshed.
  PENDING_REFRESH

  # Location is syncing with cluster.
  PENDING_SYNC

  # Location is synced with cluster.
  SYNCED
}
# Target Template to be used for automatic archival group.
interface TargetTemplate {
  # The type of this Target.
  targetType: TargetType!
}
# Input for target and cluster mapping.
input TargetToClusterMapping {
  # Field for specifying target ID.
  locationId: String = ""

  # Field for specifying Rubrik cluster UUID.
  clusterUuid: String = ""
}
# Type of storage location.
enum TargetType {
  # Amazon S3 type of archival location.
  AWS

  # Azure container type of archival location.
  AZURE

  # Legacy glacier type of archival location.
  GLACIER

  # Google Cloud Platform type of archival location.
  GOOGLE

  # Network File System type of archival location.
  NFS

  # Rubrik Cloud Vault type of archival location.
  RCS_AZURE

  # Amazon S3 compatible type of archival location.
  S3_COMPATIBLE

  # Tape type of archival location.
  TAPE
}
# Task details.
type TaskDetail {
  # The task monitoring ID.
  id: Long!

  # The job instance ID.
  reportJobInstanceId: String!

  # The cluster UUID of the task.
  clusterUuid: UUID!

  # The cluster name of the task.
  clusterName: String!

  # The cluster type of the task.
  clusterType: String!

  # The category type of the task.
  taskCategory: String!

  # The type of the task.
  taskType: String!

  # The status of the task.
  status: String!

  # The time when the task started.
  startTime: DateTime!

  # The time when the task ended.
  endTime: DateTime!

  # The time taken to run the task.
  duration: Long!

  # The fid of the object related to the task.
  objectFid: String!

  # The name of the object related to the task.
  objectName: String!

  # The type of the object related to the task.
  objectType: String!

  # The location of the task.
  location: String!

  # The SLA Domain ID of the task.
  slaDomainId: String!

  # The SLA Domain name of the task.
  slaDomainName: String!

  # The cluster location of the task.
  clusterLocation: String!

  # The replication source of a replication task.
  replicationSource: String

  # The replication target of a replication task.
  replicationTarget: String

  # The archival target of an archival task.
  archivalTarget: String

  # Specifies whether an archival task has direct archive enabled.
  directArchive: String

  # The recovery point of a recovery task.
  recoveryPoint: String

  # The recovery point type of a recovery task.
  recoveryPointType: String

  # The user who started the task.
  userName: String

  # The reason for failure if the task failed to complete.
  failureReason: String

  # Snapshot consistency of the task.
  snapshotConsistency: String

  # Protected volume of the task.
  protectedVolume: String

  # Physical bytes of the task.
  physicalBytes: Long

  # Logical bytes of the task.
  logicalBytes: Long

  # Total number of bytes transferred for the task.
  dataTransferred: Long

  # Total number of files transferred for the task.
  totalFilesTransferred: Long

  # Deduplication ratio of the task.
  dedupRatio: Float

  # Logical deduplication ratio of the task.
  logicalDedupRatio: Float

  # Data reduction of the task.
  dataReduction: Float

  # Logical data reduction of the task.
  logicalDataReduction: Float

  # The organization ID related to the task.
  orgId: String

  # Specifies the owner organization of the workload task detail.
  taskOrg: WorkloadOrganization

  # The organization name related to the task. This is deprecated.
  orgName: String @deprecated(reason: "`taskOrg` field captures the basic org details.")
}
type TaskDetailChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [TaskDetailGroupByEnum!]
}
type TaskDetailClusterType {
  stringValue: String!
}
# Paginated list of TaskDetail objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type TaskDetailConnection {
  # List of TaskDetail objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [TaskDetailEdge!]!

  # List of TaskDetail objects.
  nodes: [TaskDetail!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of TaskDetail objects matching the request arguments.
  count: Int!
}
# Wrapper around the TaskDetail object. This wrapper is used for pagination.
type TaskDetailEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual TaskDetail object wrapped by this edge.
  node: TaskDetail!
}
# Filter task detail
input TaskDetailFilterInput {
  # The cluster UUID of the task.
  clusterUuid: [UUID!]

  # The cluster type of the task.
  clusterType: [String!]

  # The cluster location of the task.
  clusterLocation: [String!]

  # The object type of the task.
  objectType: [String!]

  # The SLA Domain of the object of the task.
  slaDomain: SnappableSlaDomainFilterInput

  # The replication source of the task.
  replicationSource: [String!]

  # The task category.
  taskCategory: [String!]

  # The task status.
  taskStatus: [String!]

  # The task type.
  taskType: [String!]

  # The time used to filter tasks that ended after this time.
  time_gt: DateTime

  # The time used to filter tasks that ended before this time.
  time_lt: DateTime

  # The search term applied on the task.
  searchTerm: String

  # The organization ID of the task.
  orgId: [String!]
}
# Task detail with groupby info applied to it.
type TaskDetailGroupBy {
  # The data groupby info.
  groupByInfo: TaskDetailGroupByInfo!

  # Paginated task detail data.
  taskDetailConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Sort task detail by field.
    sortBy: TaskDetailSortByEnum = EndTime,

    # Task detail sort order.
    sortOrder: SortOrder = DESC): TaskDetailConnection!
  taskDetailGroupBy(
    # Group task detail by a field.
    groupBy: TaskDetailGroupByEnum!): [TaskDetailGroupBy!]!
}
# Paginated list of TaskDetailGroupBy objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type TaskDetailGroupByConnection {
  # List of TaskDetailGroupBy objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [TaskDetailGroupByEdge!]!

  # List of TaskDetailGroupBy objects.
  nodes: [TaskDetailGroupBy!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of TaskDetailGroupBy objects matching the request arguments.
  count: Int!
}
# Wrapper around the TaskDetailGroupBy object. This wrapper is used for pagination.
type TaskDetailGroupByEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual TaskDetailGroupBy object wrapped by this edge.
  node: TaskDetailGroupBy!
}
enum TaskDetailGroupByEnum {
  Cluster
  Day
  Hour
  Month
  Quarter
  Status
  TaskDetailClusterType
  TaskDetailObjectType
  Week
  Year
}
union TaskDetailGroupByInfo = Status | Cluster | TaskDetailClusterType | TaskDetailObjectType | TimeRangeWithUnit
type TaskDetailObjectType {
  stringValue: String!
}
enum TaskDetailSortByEnum {
  EndTime
}
type TaskDetailTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [TaskDetailGroupByEnum!]
  selectedColumns: [TaskDetailTableColumnEnum!]!
  sortBy: TaskDetailSortByEnum

  # Sorts by order.
  sortOrder: SortOrder
}
enum TaskDetailTableColumnEnum {
  ArchivalTarget
  ClusterLocation
  DataTransferred
  DirectArchive
  EndTime
  FailureReason
  Location
  LogicalBytes
  ObjectName
  ObjectType
  PhysicalBytes
  ProtectedVolume
  RecoveryPoint
  RecoveryPointType
  ReplicationSource
  ReplicationTarget
  SlaDomainName
  SnapshotConsistency
  StartTime
  Status
  TaskType
  TotalFileTransferred
  UserName
}
enum TaskReportTableColumnEnum {
  EndDate
  Location
  NumOfCanceled
  NumOfExpected
  NumOfFailed
  NumOfSucceeded
  ObjectName
  ObjectType
  SlaDomainName
  StartDate
}
type TaskSummaryChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [TaskSummaryGroupByEnum!]
}
enum TaskSummaryGroupByEnum {
  Cluster
  ClusterType
  Day
  Month
  Object
  ObjectType
  Quarter
  SlaDomain
  Week
  Year
}
enum TaskSummarySortByEnum {
  Date
  NumCanceled
  NumExpected
  NumFailed
  NumSucceeded
  ObjectName
  ObjectType
  SlaDomainName
}
type TaskSummaryTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [TaskSummaryGroupByEnum!]
  selectedColumns: [TaskReportTableColumnEnum!]!
  sortBy: TaskSummarySortByEnum

  # Sorts by order.
  sortOrder: SortOrder
}
# Taskchain.
type Taskchain {
  id: Long!
  taskchainUuid: String!
  name: String!
  state: TaskchainState!
  startTime: DateTime
  endTime: DateTime
  progress: Long!
  progressedAt: DateTime
  config: String!
  jobId: Long!
  workflowName: String!
  jobType: String!
  component: String!
  error: String!
  currentTaskIndex: Int!
  account: String!
  parentTaskchainId: String!
  podName: String!
  priority: Int!
  currentTaskExecutionAttempts: Int!
}
# Job instance state.
enum TaskchainState {
  # Job instance canceled.
  CANCELED

  # Job instance is canceling.
  CANCELING

  # Job instance failed.
  FAILED

  # Job instance is waiting to be executed.
  READY

  # Job instance is running.
  RUNNING

  # Job instance succeeded.
  SUCCEEDED

  # Job instance has hit an error and is undoing.
  UNDOING

  # Job instance is in an unknown state.
  UNKNOWN
}
# Represents the Teams Channels to/from be restored.
input TeamsChannelInfo {
  TeamID: UUID!
  ChannelID: UUID
  ChannelName: String
  ChannelFolderName: String
  ChannelNaturalId: String

  # Represents membership type of the channel (STANDARD or PRIVATE).
  channelMembershipType: ChannelMembershipType!
}
# Represents the Teams Channels to/from be restored.
input TeamsConvChannelInfo {
  TeamID: UUID!
  ChannelID: UUID
  ChannelName: String
  ChannelFolderName: String
  ChannelFolderId: String
  ChannelNaturalId: String
}
# Parameters for teams conversations search.
input TeamsConversationsSearchFilter {
  postedTime: TimeRangeFilter
  channelNaturalId: String
  postedBy: String
  snapshotId: String
  parentId: String
  convId: String
  snapshotNum: Int
  includeArchived: Boolean = false

  # Describes whether to send post senders(shouldn't be called by UI).
  fetchAllPostSenders: String

  # Describes whether to skip attachments(shouldn't be called by UI).
  skipPostsAttachments: Boolean = false
}
# Represents the teams conversations search filter.
input TeamsConversationsSearchFilterJson {
  PostedTime: TimeRangeFilterJson
  PostedBy: String
  SnapshotId: String
}
# Represents the teams contents to be restored.
input TeamsRestoreConfig {
  # Restore configuration for files.
  filesRestoreConfig: DriveRestoreConfig

  # Restore configuration for conversations.
  conversationsRestoreConfig: ConversationsRestoreConfig

  # Channel information in case of restoration to a new channel.
  destChannelInfo: TeamsChannelInfo

  # Indicates whether a new channel must be created.
  shouldCreateDestChannel: Boolean!

  # Indicates whether the channel being restored is STANDARD or PRIVATE.
  channelType: ChannelMembershipType!

  # Indicates whether the new channel will be created with the most recent permissions if a private channel is restored.
  restoreLatestPermissions: Boolean!

  # Specifies the sequence number of the snapshot being currently restored.
  snapshotSequenceNum: Int!
}
# Specifies whether to use the SSO/LDAP configuration of the global organization or to use configuration specific to this organization.
enum TenantAuthDomainConfig {
  # Allows the tenant to set its own SSO/LDAP configuration.
  ALLOW_AUTH_DOMAIN_CONTROL

  # Auth domain configuration unspecified.
  AUTH_DOMAIN_UNSPECIFIED

  # Uses the global org's SSO/LDAP configuration.
  INHERIT_AUTH_DOMAIN

  # Only local users allowed.
  LOCAL_AUTH_DOMAIN_ONLY
}
# Tenant network health.
enum TenantNetworkHealth {
  # One or more tenant networks unreachable.
  CRITICAL_TENANT_NETWORK_HEALTH

  # All tenant networks are connected, but at least one or more Rubrik Envoys are disconnected.
  DEGRADED_TENANT_NETWORK_HEALTH

  # All tenant networks and all Rubrik Envoys are connected.
  HEALTHY_TENANT_NETWORK_HEALTH

  # Tenant network health unspecified.
  TENANT_NETWORK_HEALTH_UNSPECIFIED
}
# The existing webhook to test.
input TestExistingWebhookInput {
  # The ID of the webhook to be tested.
  id: Int!
}
# The results of the webhook test.
type TestExistingWebhookReply {
  # Describes whether the test was successful or not.
  isSuccessful: Boolean!

  # Describes the webhook status after the test.
  webhookStatus: WebhookStatus!

  # The information describing the error from the webhook test.
  errorInfo: ErrorInfo
}
# Input for testing a syslog export rule.
input TestSyslogExportRuleInput {
  # Syslog export rule.
  syslogExportRuleV51: SyslogExportRuleInput

  # Syslog export rule.
  syslogExportRuleV52: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV53: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV60: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV70: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV80: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV81: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV90: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV91: SyslogExportRuleFullInput

  # Syslog export rule.
  syslogExportRuleV92: SyslogExportRuleFullInput

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!
}
# Reply Object for TestSyslogExportRule.
type TestSyslogExportRuleReply {
  output: SyslogServerTestResult
}
# Webhook configuration to test.
input TestWebhookInput {
  # The Webhook server certificate that Rubrik uses to establish a TLS connection with the endpoint.
  serverCertificate: String

  # The application that will receive the webhook.
  providerType: ProviderType!

  # The authentication type and token to authenticate the endpoint.
  authInfo: AuthInfoInput

  # The URL endpoint to the receiving application.
  url: URL!
}
# The results of the webhook test.
type TestWebhookReply {
  # Describes whether the test was successful or not.
  isSuccessful: Boolean!

  # The information describing the error from the webhook test.
  errorInfo: ErrorInfo
}
# Represents the configuration and statistics for a
# threat hunt.
type ThreatHunt {
  # ID of the threat hunt.
  huntId: String!

  # Status of the threat hunt.
  status: ThreatHuntStatus!

  # The stats based on results of the threat hunt.
  stats: ThreatHuntStats

  # The details/configuration of the threat hunt.
  huntDetails: ThreatHuntDetails!
}
# Config as the input to start a threat hunt.
type ThreatHuntConfig {
  # Criteria to restrict files to scan.
  fileScanCriteria: MalwareScanFileCriteria

  # List of IOCs to scan for.
  indicatorsOfCompromise: [IndicatorOfCompromise!]!

  # Maximum number of matches per shapshot, per IOC.  Scanning for an Indicator Of Compromise within a snapshot will terminate once this many matches have been detected. Defaults to one.
  maxMatchesPerSnapshot: Int

  # Name of this threat hunt.
  name: String!

  # Notes to describe this threat hunt.
  notes: String!

  # Additional information required for files with malware matches.
  requestedMatchDetails: RequestedMatchDetails

  # Specifies whether features that rely on the accuracy of filesystem metadata, like creation time and modification time of files, are enabled or not. These features include backend optimizations to skip re-scanning files that have not changed across snapshots, as indicated by the unchanged timestamps of files. This flag also gates access to some filters that can be specified in this API. Note that this flag should be used with caution, as relying on file timestamps may make the system vulnerable to adversarial techniques such as timestamp manipulation.
  shouldTrustFilesystemTimeInfo: Boolean!

  # Limit which snapshots to include in the threat hunt.
  snapshotScanLimit: MalwareScanSnapshotLimit

  # UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # The objects to be scanned for malware.
  objects: [CdmHierarchySnappableNew!]!
}
# Paginated list of ThreatHunt objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ThreatHuntConnection {
  # List of ThreatHunt objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ThreatHuntEdge!]!

  # List of ThreatHunt objects.
  nodes: [ThreatHunt!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ThreatHunt objects matching the request arguments.
  count: Int!
}
# Details for the threat hunt.
type ThreatHuntDetails {
  # Start time of the hunt.
  startTime: DateTime

  # End time of the hunt.
  endTime: DateTime

  # The object ids and corresponding snapshot ids targeted for scanning.
  snapshots: [WorkloadIdToSnapshotIds!]!

  # The Rubrik CDM ID of the threat hunt.
  cdmId: String!

  # The configuration of the malware scan.
  config: ThreatHuntConfig!

  # The cluster of the scan.
  cluster: Cluster!
}
# Wrapper around the ThreatHunt object. This wrapper is used for pagination.
type ThreatHuntEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ThreatHunt object wrapped by this edge.
  node: ThreatHunt!
}
# Any matches found during the threat hunt.
enum ThreatHuntMatchesFound {
  # One of more matches found.
  MATCHES_FOUND

  # Unused default.
  MATCHES_FOUND_UNSPECIFIED

  # No matches found.
  NO_MATCHES
}
# Matches found during the threat hunt that are also quarantined.
enum ThreatHuntQuarantinedMatchType {
  # No quarantined matched paths.
  NO_QUARANTINED_MATCHES

  # One of more matches are quarantined.
  QUARANTINED_MATCHES

  # Unused default.
  QUARANTINED_MATCHES_UNSPECIFIED
}
# Represents the configuration and results for a threat hunt.
type ThreatHuntResult {
  # ID of the threat hunt.
  huntId: String!

  # Status of the threat hunt.
  status: ThreatHuntStatus!

  # Results of the scan on each object.
  results: [MalwareScanResult!]!

  # The statistics based on results of the threat hunt.
  stats: ThreatHuntStats

  # The configuration of the Threat Hunt.
  config: ThreatHuntConfig!
}
# Summary of a threat hunt for an object.
type ThreatHuntResultObjectsSummary {
  # Total unique paths for which malware was found.
  totalUniqueMatchedPaths: Long!

  # Total paths for which malware was found.
  totalMatchedPaths: Long!

  # List of indicators of compromise (IOCs) found in all the matches.
  matchTypes: [IndicatorOfCompromise!]!

  # Earliest snapshot date containing a match.
  earliestMatchedSnapshotDate: DateTime

  # Latest snapshot date containing a match.
  latestMatchedSnapshotDate: DateTime

  # Latest snapshot date not containing a match.
  latestSnapshotWithoutMatchDate: DateTime

  # Total snapshots where a match was found.
  totalMatchedSnapshots: Int!

  # Threat hunt summaries for each snapshot.
  snapshotsStats: [ThreatHuntResultSnapshotStats!]!

  # The scanned object.
  object: CdmHierarchySnappableNew

  # The object location.
  location: String!
}
# Summary of a threat hunt for a snapshot.
type ThreatHuntResultSnapshotStats {
  # ID of the snapshot.
  snapshotFid: String!

  # Date of the snapshot.
  snapshotDate: DateTime

  # Total unique paths for which malware was found.
  totalMatchedPaths: Long!

  # Status of scanning this snapshot.
  status: MalwareScanInSnapshotStatus!

  # List of IOCs found in this snapshot.
  matchTypes: [IndicatorOfCompromise!]!

  # Specifies whether the snapshot has expired.
  isExpired: Boolean!

  # Indicates whether the snapshot is quarantined or not.
  isQuarantined: Boolean!
}
# Represents the statistics related to the threat hunt.
type ThreatHuntStats {
  # Total unique paths for which malware was found.
  totalUniqueMatchedPaths: Long!

  # Total snapshots in which malware was found.
  totalAffectedSnapshots: Long!

  # Total objects in which malware was found.
  totalAffectedObjects: Long!

  # Total snapshots scanned.
  totalSnapshotsScanned: Long!

  # Total scans where the malware scan succeeded.
  totalSucceededScans: Long!

  # Total unique paths for which malware was found which are also quarantined.
  totalUniqueQuarantinedPaths: Long!

  # Total objects scanned.
  totalObjectsScanned: Long!
}
# Status of the running threat hunt.
enum ThreatHuntStatus {
  # Threat hunt canceled.
  CANCELED

  # Threat hunt is being canceled.
  CANCELING

  # Threat hunt failed.
  FAILED

  # Threat hunt is in progress.
  IN_PROGRESS

  # Threat hunt partially succeeded.
  PARTIALLY_SUCCEEDED

  # Unused default.
  STATUS_UNSPECIFIED

  # Threat hunt succeeded.
  SUCCEEDED
}
# Response to the threat hunt summary request.
type ThreatHuntSummaryReply {
  # The ID of the threat hunt.
  huntId: String!

  # The threat hunt configuration.
  config: ThreatHuntConfig

  # Status of the threat hunt.
  status: ThreatHuntStatus!

  # The stats based on results of the threat hunt.
  stats: ThreatHuntStats

  # Threat hunt summaries for each object.
  objectsSummary: [ThreatHuntResultObjectsSummary!]!
}
# Entity type for Threat Monitoring.
enum ThreatMonitoringEnablementEntity {
  # Rubrik cluster.
  CDM_CLUSTER

  # Unknown entity type.
  UNKNOWN
}
# Threat Monitoring enablement status.
input ThreatMonitoringEnablementStatusInput {
  # The ID of entity being enabled.
  entityId: String!

  # The type of entity for which Threat Monitoring is being enabled.
  entityType: ThreatMonitoringEnablementEntity!

  # Specifies whether to enable Threat Monitoring or not.
  enabled: Boolean!
}
enum TimeDuration {
  DAY
  HOUR
  MONTH
}
input TimeFilterInput {
  endTime: String = ""
  startTime: String = ""
  timeDuration: TimeDuration = HOUR
  timezone: String = ""
}
enum TimeGranularity {
  DAY
  MONTH
}
# A range of time
type TimeRange {
  # Start of the time range
  start: DateTime!

  # End of the time range
  end: DateTime!
}
# Timerange filter.
input TimeRangeFilter {
  fromTime: DateTime
  untilTime: DateTime
}
# Represents the time range filter.
input TimeRangeFilterJson {
  FromTime: Long
  UntilTime: Long
}
input TimeRangeInput {
  # Start time of the range.
  start: DateTime!

  # End time of the range.
  end: DateTime!
}
# A time range and the unit of that range.
type TimeRangeWithUnit {
  # Time range unit.
  unit: TimeUnitEnum!

  # Time range start.
  start: DateTime!

  # Time range end.
  end: DateTime!
}
type TimeSeriesResult {
  timestamp: String!
  count: Long!
}
# Supported in v5.0+
type TimeStat {
  # Required. Supported in v5.0+
  stat: Long!

  # Required. Supported in v5.0+
  time: DateTime
}
enum TimeUnitEnum {
  Day
  Hour
  Month
  Quarter
  Week
  Year
}
# Capture workload counts for each day.
type TimelineCountEntry {
  # The day, in ISO format: YYYY-MM-DD.
  day: String!

  # Count of workloads.
  count: Int!
}
type TimelineEntry {
  day: String!
  policyId: String!
  hits: Hits
}
# Total Risk Summary Details.
type TotalRiskSummary {
  # Total number of hits.
  totalHits: Long!

  # Total number of high-risk hits.
  totalHighRiskHits: Long!

  # Total number of medium-risk hits.
  totalMediumRiskHits: Long!

  # Total number of low-risk hits.
  totalLowRiskHits: Long!
}
# TOTP status for a user.
type TotpStatus {
  # Specifies whether TOTP is enforced.
  isEnforced: Boolean!

  # Specifies whether TOTP is enforced at the user level.
  isEnforcedUserLevel: Boolean!

  # Specifies whether TOTP is enabled for the user.
  isEnabled: Boolean!

  # Specifies whether TOTP is supported for the user.
  isSupported: Boolean!

  # The timestamp of the last TOTP configuration update.
  totpConfigUpdateAt: DateTime
}
# Supported in v5.1+
# The network protocol to use, either UDP or TCP.
enum TransportLayerProtocol {
  TRANSPORT_LAYER_PROTOCOL_TCP
  TRANSPORT_LAYER_PROTOCOL_UDP
}
# Input to trigger cloud compute connectivity check.
input TriggerCloudComputeConnectivityCheckInput {
  # Indicates if the cloud compute connectivity check should be performed for the CloudOut feature.
  shouldCheckCloudConnectivityForCloudOut: Boolean

  # Required. ID of the archival location.
  id: String!

  # Required. v6.0-v7.0: Indicates if the cloud compute connectivity check should be performed for the CloudOn feature.
  # 
  # v8.0+: When should_check_cloud_connectivity_for_cloud_on is set to false, the Rubrik cluster verifies the cloud compute connectivity for Archive operations. When should_check_cloud_connectivity_for_cloud_on is set to true, The Rubrik cluster verifies the cloud compute connectivity for both Archive and CloudOn operations.
  shouldCheckCloudConnectivityForCloudOn: Boolean!
}
# Input to initiate Exocompute health check.
input TriggerExocomputeHealthCheckInput {
  # Cloud provider type.
  cloudVendor: CloudVendor!

  # ID for Exocompute configuration.
  exocomputeConfigId: UUID!

  # Compute instance type of the worker nodes (applicable only for Azure).
  nodeType: String
}
# Response for Exocompute health check job submission.
type TriggerExocomputeHealthCheckReply {
  # ID for the Exocompute health check job.
  healthCheckJobId: String!
}
# Request to initiate a ransomware detection job on a snapshot.
input TriggerRansomwareDetectionInput {
  # The ID of the Rubrik cluster where the snapshot is available.
  clusterUuid: String = ""

  # The ID of the snapshot.
  snapshotId: String = ""

  # The managed ID of the object.
  managedId: String = ""

  # The ID of the snapshot that was taken prior to the snapshot selected for ransomware detection.
  previousSnapshotId: String = ""
}
# Lambda job information on certain cluster.
type TriggerRansomwareDetectionReply {
  # Id of the Rubrik cluster running the ransomware detection job.
  clusterUuid: String!

  # Id of the ransomware detection job.
  jobId: String!
}
scalar URL
scalar UUID
# Input for removing SAP HANA database configuration after restore.
input UnconfigureSapHanaRestoreInput {
  # Required. ID assigned to target SAP HANA database object.
  id: String!
}
# Unidirectional replication specification.
type UnidirectionalReplicationSpec {
  # Replication target ID.
  replicationTargetId: String!

  # Replication target name.
  replicationTargetName: String!

  # Retention on replication target.
  retention: Int!

  # Unit of retention.
  retentionUnit: RetentionUnit!

  # The cluster to which this SLA will replicate the snapshots.
  targetCluster: Cluster
}
# Unidirectional replication specification.
input UnidirectionalReplicationSpecInput {
  # Replication target ID.
  replicationTargetId: String = ""

  # Retention on replication target.
  retention: Int = 0

  # Unit of retention.
  retentionUnit: RetentionUnit = MINUTES
}
input UninstallIoFilterInput {
  # Required. ID of the VMware compute cluster.
  id: String!
}
# Methods for unlocking a locked account.
enum UnlockMethod {
  # Account unlocked by the administrator.
  ADMINISTRATIVE_UNLOCK

  # Account unlocked automatically.
  AUTO_UNLOCK

  # Account unlocked using a self-service link.
  SELF_SERVICE

  # Account unlocked with help from Rubrik Support.
  SUPPORT_UNLOCK

  # Unspecified.
  UNLOCK_METHOD_UNSPECIFIED
}
# Specifies the information about the users being unlocked.
input UnlockUsersByAdminInput {
  # Required. Specifies the list of user IDs.
  userIds: [String!]!
}
# The types of status for unmanaged object.
enum UnmanagedObjectAvailabilityFilter {
  # Unmanaged object status is Protected.
  PROTECTED

  # Unmanaged object status is Relic.
  RELIC

  # Unmanaged object status is Remote unrotected.
  REMOTE_UNPROTECTED

  # Unmanaged object status is Repliocated relic.
  REPLICATED_RELIC

  # Unmanaged object status is unknown.
  UNMANAGED_OBJECT_UNKNOWN

  # Unmanaged object status is Unprotected.
  UNPROTECTED
}
# UnmanagedObjectDetails.
type UnmanagedObjectDetail {
  # Storage on the archival location.
  archiveStorage: Long!

  # Any of the snapshots are retained by a SLA.
  hasSnapshotsWithPolicy: Boolean!

  # Object ID.
  id: String!

  # Workload ID.
  workloadId: String!

  # Whether the object is remote or local.
  isRemote: Boolean

  # Storage on the local location.
  localStorage: Long!

  # Unmanaged object name.
  name: String!

  # Type of the unmanaged object.
  objectType: ManagedObjectType!

  # Physical path to this object.
  physicalLocation: [LocationPathPoint!]!

  # Recovery information for the reader archival locations.
  recoveryInfo: WorkloadRecoveryInfo

  # SLA Domain retention policy ID.
  retentionSlaDomainId: String!

  # SLA Domain retention policy name.
  retentionSlaDomainName: String!

  # RSC SLA Domain ID.
  retentionSlaDomainRscManagedId: String

  # Snapshot count.
  snapshotCount: Long!

  # Unmanaged Status of this object.
  unmanagedStatus: UnmanagedObjectAvailabilityFilter!

  # The effective SLA Domain of the unmanaged object.
  effectiveSlaDomain: SlaDomain!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Cluster UUID of the object.
  clusterUuid: UUID!
}
# Paginated list of UnmanagedObjectDetail objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type UnmanagedObjectDetailConnection {
  # List of UnmanagedObjectDetail objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [UnmanagedObjectDetailEdge!]!

  # List of UnmanagedObjectDetail objects.
  nodes: [UnmanagedObjectDetail!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of UnmanagedObjectDetail objects matching the request arguments.
  count: Int!
}
# Wrapper around the UnmanagedObjectDetail object. This wrapper is used for pagination.
type UnmanagedObjectDetailEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual UnmanagedObjectDetail object wrapped by this edge.
  node: UnmanagedObjectDetail!
}
# Input to query unmanaged objects.
input UnmanagedObjectsInput {
  # Workload cluster UUID.
  clusterUuid: String!

  # Object name.
  name: String

  # Unmanaged statuses to filter.
  unmanagedStatuses: [UnmanagedObjectAvailabilityFilter!]!

  # Object types to filter.
  objectTypes: [ManagedObjectType!]!

  # Retention SLAs to filter.
  retentionSlaDomainIds: [String!]!

  # Sorting Parameters.
  sortParam: UnmanagedObjectsSortParam

  # Object Id.
  objectId: String
}
# Unmanaged objects sorting parameters.
input UnmanagedObjectsSortParam {
  # Sort type.
  type: UnmanagedObjectsSortType = NAME

  # Sorts by order.
  sortOrder: SortOrder = ASC
}
# Unmanaged objects sort type Enum.
enum UnmanagedObjectsSortType {
  # Archival storage.
  ARCHIVAL_STORAGE

  # Local storage.
  LOCAL_STORAGE

  # Location.
  LOCATION

  # Object name.
  NAME

  # Retention SLA domain name.
  RETENTION_SLA_DOMAIN_NAME

  # Snapshot count.
  SNAPSHOTS_COUNT

  # Unmanaged status.
  UNMANAGED_STATUS
}
# Supported in v5.2+
# Attributes that are available to use when filtering query results based on snapshot type.
# 
enum UnmanagedSnapshotType {
  UNMANAGED_SNAPSHOT_TYPE_ON_DEMAND
  UNMANAGED_SNAPSHOT_TYPE_POLICY_BASED
  UNMANAGED_SNAPSHOT_TYPE_RETRIEVED
}
# Input for unmapping Azure cloud accounts from the mapped Exocompute subscription.
input UnmapAzureCloudAccountExocomputeSubscriptionInput {
  # Rubrik IDs of the cloud accounts to be unmapped.
  cloudAccountIds: [UUID!]!
}
# Response of the operation to unmap Azure cloud accounts from the mapped Exocompute subscription.
type UnmapAzureCloudAccountExocomputeSubscriptionReply {
  # Specifies whether the unmapping was completed successfully.
  isSuccess: Boolean!
}
# Input to check if we can unmap archival location from subscription.
input UnmapAzurePersistentStorageSubscriptionInput {
  # Subscription IDs from which to unmap archival location.
  applicationCloudAccountIds: [String!]!

  # Feature for which to unmap archival locations.
  feature: CloudAccountFeature!

  # Validation type to check if we can unmap the archival locations.
  unmappingValidationType: UnmappingValidationType!
}
# Input for unmapping cloud accounts from the mapped Exocompute account.
input UnmapCloudAccountExocomputeAccountInput {
  # Rubrik IDs of the cloud accounts to be unmapped.
  cloudAccountIds: [UUID!]!

  # Cloud provider type.
  cloudVendor: CloudVendor!
}
# Response of the operation to unmap cloud accounts from the mapped Exocompute account.
type UnmapCloudAccountExocomputeAccountReply {
  # Specifies whether the unmapping was completed successfully.
  isSuccess: Boolean!
}
# The validation type to use to check if archival location unmapping is allowed.
enum UnmappingValidationType {
  # Check if relevant Account Setting Table has been set.
  AST

  # Check if storage account is empty.
  EMPTY_STORAGE_ACCOUNT
}
# Input required to unmount disks.
input UnmountDiskInput {
  # Live Mount ID for which disk must be unmounted.
  liveMountId: Long!

  # List of Mount IDs to be unmounted.
  mountIds: [Long!]!

  # Target Workload ID for which disk must be unmounted.
  targetWorkloadId: UUID!
}
# Specifies the information about the auth domain users to be hidden or unhidden.
input UpdateAuthDomainUsersHiddenStatusInput {
  # Required. Specifies the user IDs of the auth domain users to update hidden status for.
  userIds: [String!]!

  # Required. Specifies the new hidden status for the selected users.
  isHidden: Boolean!
}
# Input to update Rubrik cluster configuration.
input UpdateAutoEnablePolicyClusterConfigInput {
  # Rubrik cluster ID.
  clusterId: String = ""

  # Specifies whether Auto-enabled Data Discovery Policies are enabled on the Rubrik cluster or not.
  enabled: Boolean = false
}
# Represents updated Rubrik cluster configuration.
type UpdateAutoEnablePolicyClusterConfigReply {
  # Auto Enable Sensitive Data Discovery policy configuration.
  datagovAutoEnablePolicyConfig: AutoEnablePolicyClusterConfigReply!

  # The cluster UUID.
  id: UUID!

  # The cluster name.
  name: String!

  # The cluster type.
  type: ClusterTypeEnum!

  # The software version.
  version: String
}
# Input to edit AWS automatic target mapping.
input UpdateAutomaticAwsTargetMappingInput {
  # ID of the AWS target mapping.
  id: String!

  # Name of the AWS target mapping.
  name: String

  # Cloud account ID of the AWS target.
  cloudAccountId: UUID

  # Storage class of the AWS target.
  storageClass: AwsStorageClass

  # Specifies whether consolidation is enabled on the AWS target.
  isConsolidationEnabled: Boolean

  # Proxy settings of the AWS target.
  proxySettings: ProxySettingsInput

  # List of Rubrik cluster UUIDs.
  clusterUuidList: [String!]

  # Compute settings ID of the AWS target.
  awsComputeSettingsId: String
}
# Input to edit Azure automatic target mapping.
input UpdateAutomaticAzureTargetMappingInput {
  # ID of the Azure target mapping.
  id: String!

  # Name of the Azure target mapping.
  name: String

  # Storage account name of the Azure archival target.
  storageAccountName: String

  # Access key of the Azure target.
  accessKey: String

  # Cloud account ID of the Azure target.
  cloudAccountId: UUID

  # Compute settings of the Azure target.
  computeSettings: AzureCloudComputeSettingsInput

  # Proxy settings of the Azure target.
  proxySettings: ProxySettingsInput

  # List of Rubrik cluster UUIDs.
  clusterUuidList: [String!]

  # Specifies whether consolidation is enabled on the Azure target.
  isConsolidationEnabled: Boolean
}
# Input for editing an AWS account.
input UpdateAwsAccountInput {
  # Name of the AWS account.
  id: String!

  # Name of the AWS account.
  name: String!

  # Description of the AWS account.
  description: String

  # Access key of the AWS account.
  accessKey: String!

  # Secret key of the AWS account.
  secretKey: String!
}
# Input to update an AWS account.
input UpdateAwsCloudAccountFeatureInput {
  # Rubrik ID of the AWS account.
  cloudAccountId: UUID!

  # Action to be taken for cloud account update.
  action: CloudAccountAction!

  # Native protection feature to be updated.
  feature: CloudAccountFeature!

  # List of regions to be added.
  awsRegions: [AwsCloudAccountRegion!]

  # Role ARN for the cloud account.
  roleArn: String = ""

  # Stack ARN for the cloud account.
  stackArn: String = ""

  # AWS account name.
  awsAccountName: String = ""
}
# Response of the operation to update an AWS cloud account.
type UpdateAwsCloudAccountFeatureReply {
  # Contains success response message.
  message: String
}
# Input to update the AWS account.
input UpdateAwsCloudAccountInput {
  # Rubrik ID of the AWS account.
  cloudAccountId: UUID!

  # AWS account name.
  awsAccountName: String = ""
}
# Input to edit AWS cloud compute setting.
input UpdateAwsComputeSettingInput {
  # ID of the AWS cloud compute setting.
  id: String = ""

  # Name of the AWS cloud compute setting.
  name: String = ""

  # Subnet ID of the AWS target.
  subnetId: String = ""

  # VPC ID of the AWS target.
  vpcId: String = ""

  # Security group ID of the AWS target.
  securityGroupId: String = ""
}
# Input to update AWS Exocompute configurations.
input UpdateAwsExocomputeConfigsInput {
  # Rubrik ID for cloud account.
  cloudAccountId: UUID!

  # List of Exocompute configurations for the cloud account.
  configs: [AwsExocomputeConfigInput!]!

  # Specifies whether to start Exocompute health check.
  triggerHealthCheck: Boolean = false
}
# AWS Exocompute Configs Update Response.
type UpdateAwsExocomputeConfigsReply {
  # List of Exocompute configurations added.
  configs: [AwsExocomputeGetConfigResponse!]! @deprecated(reason: "Deprecated in favor of BYOK8s, use exocomputeConfigs instead.")

  # Deletion status for Exocompute configurations being removed.
  deleteStatus: [AwsExocomputeConfigsDeletionStatusType!]!

  # List of Exocompute configurations.
  exocomputeConfigs: [AwsExocomputeGetConfigurationResponse!]!
}
# Input to edit AWS target.
input UpdateAwsTargetInput {
  # Rubrik Security Cloud managed ID of the location to be edited.
  id: String!

  # Name of the AWS location.
  name: String

  # Cloud account ID of the AWS target.
  cloudAccountId: UUID

  # Storage class of the AWS target.
  storageClass: AwsStorageClass

  # Flag to determine if consolidation is enabled.
  isConsolidationEnabled: Boolean

  # Proxy settings of the target.
  proxySettings: ProxySettingsInput

  # Compute settings ID of the AWS target.
  awsComputeSettingsId: String

  # Cloud compute settings of the AWS target.
  cloudComputeSettings: AwsCloudComputeSettingsInput

  # Compute proxy settings of the AWS target.
  computeProxySettings: ProxySettingsInput

  # Retrieval tier of the AWS target.
  awsRetrievalTier: AwsRetrievalTier

  # AWS immutability settings.
  immutabilitySettings: AwsImmutabilitySettings

  # Optional field for specifying an AWS S3 endpoint, for example a VPC endpoint. When not specified, the default, region-based S3 endpoint is used.
  s3Endpoint: String

  # Optional field for specifying the KMS server endpoint when using KMS-based encryption, for example a VPC endpoint. When not specified, the default, region-based KMS server endpoint is used.
  kmsEndpoint: String

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean
}
# Input for editing an Azure account.
input UpdateAzureAccountInput {
  # ID of the Azure account.
  id: String!

  # Name of the Azure account.
  name: String

  # Description of the Azure account.
  description: String

  # Subscription ID of the Azure account.
  subscriptionId: String
}
# Input for updating an Azure Cloud Account.
input UpdateAzureCloudAccountInput {
  # Subscriptions to be updated.
  subscriptions: [AzureCloudAccountSubscriptionInput!]!

  # Features enabled on the Azure Cloud Account.
  features: [CloudAccountFeature!]!

  # Regions to be added.
  regionsToAdd: [AzureCloudAccountRegion!]

  # Regions to be removed.
  regionsToRemove: [AzureCloudAccountRegion!]
}
# Response of the operation to Update Azure Cloud Account.
type UpdateAzureCloudAccountReply {
  # Status of the operation to update Azure Cloud Account.
  status: [UpdateAzureCloudAccountStatus!]!
}
# Status of the operation to Update Azure Cloud Account.
type UpdateAzureCloudAccountStatus {
  # Native ID of the Azure Subscription.
  azureSubscriptionNativeId: String!

  # Specifies whether the update of Azure Cloud Account was successful. When true, the update was successful.
  isSuccess: Boolean!
}
# Input to edit Azure target.
input UpdateAzureTargetInput {
  # Id of the Azure target to be edited.
  id: UUID!

  # Name of the Azure target.
  name: String

  # Storage account name of the Azure target.
  storageAccountName: String

  # Access key of the Azure target.
  accessKey: String

  # Cloud account ID of the Azure target.
  cloudAccountId: UUID

  # Compute settings of the Azure target.
  computeSettings: AzureCloudComputeSettingsInput

  # Proxy settings of the Azure target.
  proxySettings: ProxySettingsInput

  # Flag to determine if consolidation is enabled in the Azure target.
  isConsolidationEnabled: Boolean

  # Immutability settings of the Azure target.
  immutabilitySettings: AzureImmutabilitySettings

  # Retrieval tier to use for retrieving data from archive storage.
  retrievalTier: AzureRetrievalTier

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean! = false
}
input UpdateBadDiskLedStatusInput {
  # Specifies the disk serial id.
  diskSerial: String

  # Specifies whether the off script flag should be used.
  turnOff: Boolean

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!

  # Required. Node on which the script should be run.
  nodeId: String!
}
# Supported in v5.1+
# Result of running the find_bad_disk script.
type UpdateBadDiskLedStatusReply {
  # Supported in v7.0+
  # find_bad_disk script output.
  output: String

  # Supported in v5.1+
  # Response of the find_bad_disk script.
  result: CdmFindBadDiskResultType!
}
# Update certificate of a host.
input UpdateCertificateHostInput {
  # Required. ID of the host.
  id: String!
}
# Reply Object for UpdateCertificateHost.
type UpdateCertificateHostReply {
  output: HostDetail
}
# Input to update a storage setting for AWS.
input UpdateCloudNativeAwsStorageSettingInput {
  id: UUID!
  name: String
  storageClass: AwsStorageClass
  kmsMasterKeyId: String
}
# Response of the mutation to update a storage setting for AWS.
type UpdateCloudNativeAwsStorageSettingReply {
  targetMapping: TargetMapping!
}
# Input for updating azure storage settings. Specify old value of the property if no change is intended on the property.
input UpdateCloudNativeAzureStorageSettingInput {
  # ID for the storage setting.
  id: UUID!

  # Name of the storage setting.
  name: String!

  # Tags for the storage account. Old tags are removed and new tags are applied.
  storageAccountTags: TagsInput!

  # Storage tier for the storage account.
  storageTier: AzureStorageTier!

  # Information about the customer-managed key and key vault.
  cmkInfo: [AzureCmkInput!]
}
# Updated storage settings information for Azure.
type UpdateCloudNativeAzureStorageSettingReply {
  targetMapping: TargetMapping!
}
# Input required to update file indexing status of cloud native workloads.
input UpdateCloudNativeIndexingStatusInput {
  # List of workload IDs.
  workloadIds: [UUID!]!

  # Specifies whether file indexing is enabled or not for workloads.
  isIndexingEnabled: Boolean!
}
# The status of the call to update indexing status.
type UpdateCloudNativeIndexingStatusReply {
  # The list of errors from indexing status request for each workload ID.
  errors: [UpdateIndexingStatusError!]!
}
# Input required to update a cloud-native label rule.
input UpdateCloudNativeLabelRuleInput {
  # Label rule ID.
  labelRuleId: UUID!

  # Name of the label rule.
  labelRuleName: String!

  # Corresponds to the assignment type for the SLA.
  slaAssignType: TagRuleSlaAssignType!

  # Corresponds to optional global SLA Rubrik ID.
  slaId: UUID

  # Cloud native accounts on which label rule will be applied.
  cloudNativeAccountIds: CloudNativeIds

  # Specifies whether this label rule apply to all cloud accounts.
  applyToAllCloudAccounts: Boolean
}
# Input for updating an existing Rubrik Cloud Vault Azure storage settings.
input UpdateCloudNativeRcvAzureStorageSettingInput {
  # ID for the storage setting.
  id: UUID!

  # Name of the storage setting.
  name: String!
}
# Updated RCV storage settings info for Azure.
type UpdateCloudNativeRcvAzureStorageSettingReply {
  # RCV azure storage setting.
  targetMapping: TargetMapping!
}
# Input required to update a cloud-native tag rule.
input UpdateCloudNativeTagRuleInput {
  # Tag rule ID.
  tagRuleId: UUID!

  # Name of the tag rule.
  tagRuleName: String!

  # Corresponds to the assignment type for the SLA.
  slaAssignType: TagRuleSlaAssignType!

  # Corresponds to optional global SLA Rubrik ID.
  slaId: UUID

  # Cloud native accounts on which tag rule will be applied.
  cloudNativeAccountIds: CloudNativeIds

  # Specifies whether this tag rule apply to all cloud accounts.
  applyToAllCloudAccounts: Boolean
}
# Object containing the new address of the Rubrik cluster.
input UpdateClusterDefaultAddressInput {
  # UUID of the cluster.
  clusterUuid: UUID!

  # The new default IP address of the Rubrik cluster.
  address: String

  # The new default port of the Rubrik cluster.
  port: Int
}
# Response object of the mutation that updates the default address of a Rubrik cluster.
type UpdateClusterDefaultAddressReply {
  # The Rubrik cluster whose default address is updated.
  cluster: Cluster!
}
input UpdateClusterNtpServersInput {
  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!

  # Required. List of NTP servers.
  ntpServerConfigs: [NtpServerConfigurationInput!]!
}
# Input for updating cluster settings.
input UpdateClusterSettingsInput {
  # Contains the changed information for the Rubrik cluster object.
  clusterUpdate: ClusterUpdateInput!

  # ID of a Rubrik cluster object, or use *me* for the Rubrik cluster that is hosting the current API session.
  id: String!

  # Cluster UUID.
  clusterUuid: UUID!
}
# Response from updating CDM cluster settings.
type UpdateClusterSettingsReply {
  # Version of the EULA accepted by admin.
  acceptedEulaVersion: String!

  # REST API version.
  apiVersion: String!

  # Cluster geolocation.
  geolocation: ClusterGeolocation

  # Latest version of the EULA that must be accepted by admin.
  latestEulaVersion: String!

  # Name of the cluster.
  name: String!

  # Cluster time zone.
  timezone: ClusterTimezone

  # Rubrik cluster software version.
  version: String!

  # ID of the Rubrik cluster.
  clusterUuid: UUID!

  # Mode of registration.
  registeredMode: RegisteredMode!

  # Global manager URL.
  rubrikUrl: URL!
}
# Configuration for the update of a configured group in O365.
input UpdateConfiguredGroupInput {
  # UUID of the org.
  orgId: UUID!

  # ID of the configured group to be updated.
  groupId: UUID!

  # The updated display name for the configured group.
  updatedDisplayName: String

  # The updated wildcard pattern configured for this group. When empty, group members will not be constrained on name or URL identifiers.
  updatedWildcard: String

  # The updated preferred data locations configured for this group. When empty, group members will not be constrained on data location.
  updatedPdls: [String!]!

  # When true, the group will be archived.
  performArchival: Boolean!
}
# Input for updating a custom report.
input UpdateCustomReportInput {
  # ID of the custom report to update.
  id: Int!

  # New configuration to update custom report to.
  config: CustomReportCreate!
}
# Metadata for rendering a custom report.
type UpdateCustomReportReply {
  # ID of the custom report.
  id: Int!

  # Name of the custom report.
  name: String!

  # The metrics focus of the custom report.
  focus: ReportFocusEnum!

  # Specifies whether the report should be hidden from the gallery view.
  isHidden: Boolean!

  # Specifies whether the report is auto-generated and not editable.
  isReadOnly: Boolean!

  # The filters applied to the data in the report.
  filters: CustomReportFilters!

  # Time the report was created.
  createdAt: DateTime!

  # Time the report was last updated and saved.
  updatedAt: DateTime!

  # Time the report was last viewed or opened.
  viewedAt: DateTime!

  # Room of the report.
  room: String

  # The list of charts in the custom report.
  charts: [ReportChartType!]!

  # The list of tables in the custom report.
  tables: [ReportTableType!]!

  # The creator of the custom report.
  owner: User!

  # Date of the oldest sync for the report.
  oldestSyncDate: DateTime

  # Date of the most recent sync for the report.
  newestSyncDate: DateTime
  scheduledReportConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String): ScheduledReportConnection!
}
# Input for updating the database log reporting notifications settings for a cluster.
input UpdateDatabaseLogReportingPropertiesForClusterInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Updated report properties.
  properties: DbLogReportPropertiesUpdateInput!
}
# Information required to save a distribution list digest.
input UpdateDistributionListDigestInput {
  # Name of the distribution list digest.
  digestName: String

  # Frequency, in hours, with which the distribution list digests are sent.
  frequencyHours: Int

  # Specifies whether to send distribution list  digest immediately or not.
  isImmediate: Boolean

  # Specifies whether to include audits in the distribution list digest or not.
  includeAudits: Boolean

  # Specifies whether to include events in the distribution list digest or not.
  includeEvents: Boolean

  # Distribution list digest configuration.
  eventDigestConfig: EventDigestConfig!

  # User IDs of the recipients of the distribution list digest.
  recipientUserIds: [String!]!

  # List of Rubrik cluster UUIDs.
  clusterUuids: [UUID!] = []
}
# Container for a list of updated distribution list digests.
type UpdateDistributionListDigestReply {
  # A list of saved event digests.
  eventDigests: [EventDigest!]!
}
# Input for updateDnsServersAndSearchDomains.
input UpdateDnsServersAndSearchDomainsInput {
  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!

  # Required. List of fully qualifed domain names or IPv4 addresses of DNS servers.
  servers: [String!]!

  # Required. List of the DNS search domains.
  domains: [String!]!
}
# Information required to save an event digest.
input UpdateEventDigestInput {
  # Name of the event digest.
  digestName: String

  # Frequency, in hours, with which the event digests are sent.
  frequencyHours: Int

  # Specifies whether to send event digest immediately or not.
  isImmediate: Boolean

  # Specifies whether to include audits in the event digest or not.
  includeAudits: Boolean

  # Specifies whether to include events in the event digest or not.
  includeEvents: Boolean

  # Event digest configuration.
  eventDigestConfig: EventDigestConfig!

  # User IDs of the recipients of the event digest.
  recipientUserIds: [String!]!

  # List of Rubrik cluster UUIDs.
  clusterUuids: [UUID!] = []
}
# Container for a list of updated event digests.
type UpdateEventDigestReply {
  # A list of saved event digests.
  eventDigests: [EventDigest!]!
}
# Input for V1UpdateFailoverClusterApp.
input UpdateFailoverClusterAppInput {
  # Required. ID of failover cluster app.
  id: String!

  # Required. Properties to update.
  updateProperties: FailoverClusterAppConfigInput!
}
# Reply Object for UpdateFailoverClusterApp.
type UpdateFailoverClusterAppReply {
  output: FailoverClusterAppSummary
}
# Input for V1UpdateFailoverCluster.
input UpdateFailoverClusterInput {
  # Required. ID of failover cluster.
  id: String!

  # Required. Properties to update.
  updateProperties: FailoverClusterConfigInput!
}
# Reply Object for UpdateFailoverCluster.
type UpdateFailoverClusterReply {
  output: FailoverClusterDetail
}
input UpdateFloatingIpsInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. New list of cluster IPs.
  newClusterIps: [String!]!
}
# Supported in v5.0+
type UpdateFloatingIpsReply {
  # Required. Supported in v5.0+
  id: Long!

  # Required. Supported in v5.0+
  status: String!
}
# Input for editing the GCP Target.
input UpdateGcpTargetInput {
  # Id of the GCP target to be edited.
  id: UUID!

  # Name of the GCP target.
  name: String

  # Region of the GCP target.
  region: GcpRegion

  # Storage class of the GCP target.
  storageClass: GcpStorageClass

  # Bucket of the GCP target.
  bucket: String

  # Encryption password for the GCP target.
  encryptionPassword: String

  # Service account JSON key of the GCP target.
  serviceAccountJsonKey: String

  # Proxy settings of the GCP target.
  archivalProxySettings: ProxySettingsInput

  # Specifies whether the proxy settings should be bypassed for creating this target location.
  bypassProxy: Boolean
}
# Input for editing a legacy Glacier Reader Target.
input UpdateGlacierTargetInput {
  # ID of the Glacier target to be edited.
  id: UUID!

  # Field for specifying name of the target.
  name: String

  # Field for specifying retrieval tier for this target.
  retrievalTier: AwsRetrievalTier

  # Field for specifying cloud account ID.
  cloudAccountId: UUID
}
# Input to add a global certificate.
input UpdateGlobalCertificateInput {
  # The ID of the global certificate (either the Rubrik Security Cloud ID or the Rubrik CDM certificate ID).
  certificateId: String!

  # The updated display name of the certificate.
  name: String

  # The updated description of the certificate.
  description: String

  # The Rubrik clusters on which to add the certificate.
  clusters: [CertificateClusterInput!]! = []
}
# The Rubrik clusters on which the certificate was successfully updated.
type UpdateGlobalCertificateReply {
  # The Rubrik clusters on which the certificate was successfully updated.
  clusterUuids: [UUID!]!

  # The errors originating from updating certificates on the Rubrik clusters.
  clusterErrors: [CertificateClusterOperationError!]!
}
# Input to update SLA Domain.
input UpdateGlobalSlaInput {
  # ID of the SLA Domain.
  id: String = ""

  # Name of the SLA Domain.
  name: String = ""

  # Description of the SLA Domain.
  description: String = ""

  # Snapshot schedule of the SLA Domain.
  snapshotSchedule: GlobalSnapshotScheduleInput

  # State version of the SLA Domain.
  stateVersion: Long = 0

  # Replication specification of the SLA Domain.
  replicationSpecInput: ReplicationSpecInput

  # Retention limit for snapshots on the local Rubrik system. If none, they will remain as long as SLA requires.
  localRetentionLimit: SlaDurationInput

  # Backup Window specifications of first full backup for SLA Domain.
  firstFullBackupWindows: [BackupWindowInput!] = []

  # Backup Window specifications for SLA Domain.
  backupWindows: [BackupWindowInput!] = []

  # Log configuration of the SLA Domain.
  logConfig: LogConfig

  # Object-specific configuration of the SLA Domain.
  objectSpecificConfigsInput: ObjectSpecificConfigsInput

  # Should apply to existing snapshots.
  shouldApplyToExistingSnapshots: ShouldApplyToExistingSnapshots

  # Should apply to non-policy snapshots.
  shouldApplyToNonPolicySnapshots: ShouldApplyToNonPolicySnapshots

  # Optional user note.
  userNote: String = ""

  # List of archival specifications for SLA Domain.
  archivalSpecs: [ArchivalSpecInput!] = []

  # Replication specificationsof the SLA Domain.
  replicationSpecsV2: [ReplicationSpecV2Input!] = []

  # Object types of the SLA Domain.
  objectTypes: [SlaObjectType!] = []

  # Specifies if the SLA Domain to be updated must be Retention Locked or not.
  isRetentionLockedSla: Boolean = false

  # Specifies the retention lock mode for the intended SLA Domain update.
  retentionLockMode: RetentionLockMode = NO_MODE
}
input UpdateGuestCredentialInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Object for guest OS credential definition.
  definition: GuestCredentialDefinitionInput!

  # Required. ID of the guest OS credential to update.
  id: String!
}
# Reply Object for UpdateGuestCredential.
type UpdateGuestCredentialReply {
  output: CreateGuestCredentialReply
}
input UpdateHealthMonitorPolicyStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. The request object.
  runRequest: RunPolicyArgInput!
}
type UpdateHealthMonitorPolicyStatusReply {
  items: [NodePolicyCheckResult!]!
}
# Supported in v5.0+
input UpdateHypervScvmmUpdatePropertiesInput {
  # Supported in v5.0+
  # v5.0-v5.1: Assign this SCVMM to the given SLA domain.
  # v5.2+: Assign this SCVMM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # Name of the SCVMM host.
  hostname: String

  # Supported in v5.0+
  # The RunAs account which will be used to install connector on hosts.
  runAsAccount: String

  # Supported in v5.0+
  # Flag to specify if Rubrik can deploy connector to hosts. If true, Rubrik tries to deploy connector to the hyperv hosts. If false, Rubrik deployment of connector will be handled by the client.
  shouldDeployAgent: Boolean
}
# Input for updating the Hyper-V virtual machine with the specified properties.
input UpdateHypervVirtualMachineInput {
  # Required. ID of Virtual Machine.
  id: String!

  # Required. Properties to update.
  vmUpdateProperties: HypervVirtualMachineUpdateInput!
}
# Supported in v5.0+
type UpdateHypervVirtualMachineReply {
  # Supported in v5.0+
  # Returns whether the Rubrik connector is installed and service is registered.
  isAgentRegistered: Boolean
  naturalId: String
  guestOsType: HypervVirtualMachineDetailGuestOsType!
  operatingSystemType: HypervVirtualMachineDetailOperatingSystemType
  hypervVirtualMachineSummary: HypervVirtualMachineSummary!
  hypervVirtualMachineUpdate: HypervVirtualMachineUpdate!

  # Supported in v5.2+
  # Brief information about all virtual disks of the selected virtual machine.
  virtualDiskInfo: [HypervVirtualDiskInfo!]!
}
# Input for updating the Hyper-V virtual machine Live Mount with the specified properties.
input UpdateHypervVirtualMachineSnapshotMountInput {
  # Required. Power state configuration.
  config: HypervUpdateMountConfigInput!

  # Required. ID of a Live Mount.
  id: String!
}
# Supported in v5.0+
type UpdateHypervVirtualMachineSnapshotMountReply {
  hypervVirtualMachineMountSummary: HypervVirtualMachineMountSummary
}
# Represents the error type resulting from the request to update indexing status.
type UpdateIndexingStatusError {
  # The workload ID for which the error occurred.
  workloadId: String!

  # The error string.
  error: String!
}
# Input required to toggle the dismissal state of an insight.
input UpdateInsightStateInput {
  # ID of the insight.
  insightId: String = ""

  # Specifies if the insight should be dismissed.
  isDismissed: Boolean = false
}
# Specifies whether the insight is dismissed.
type UpdateInsightStateReply {
  # Whether the insight is dismissed.
  isInsightDismissed: Boolean!
}
# Holds the input to an update integration request.
input UpdateIntegrationInput {
  # The integration ID.
  id: Long!

  # The integration name.
  name: String!

  # The integration type.
  integrationType: IntegrationType!

  # The integration configuration.
  config: IntegrationConfigInput!
}
# Holds the input to a batch update integrations request.
input UpdateIntegrationsInput {
  # The integrations.
  integrations: [UpdateIntegrationInput!]!
}
# Specifies the input required to update the lockout config by the admin.
input UpdateLockoutConfigInput {
  # Specifies the number of failed login attempts allowed after which the account is locked.
  loginAttemptsLimit: Int = 0

  # Specifies the validity of the current self service token.
  selfServiceTokenValidityInMins: Int = 0

  # Specifies the number of times self-service is allowed to unlock the account.
  selfServiceAttemptsLimit: Int = 0

  # Specifies whether self service is enabled for all users in this organization.
  isSelfServiceEnabled: Boolean = false

  # Specifies the time after which the account is unlocked automatically.
  accountAutoUnlockDurationInMins: Int = 0

  # Specifies whether the account lockout feature is enabled on the UI.
  isBruteForceLockoutEnabled: Boolean = false

  # Specifies whether the auto unlock feature is enabled on the UI.
  isAutoUnlockFeatureEnabled: Boolean = false
}
# Specifies information about lockout configuration.
type UpdateLockoutConfigReply {
  # Specifies the number of failed login attempts allowed after which the account is locked.
  loginAttemptsLimit: Int!

  # Specifies the validity of the current self service token.
  selfServiceTokenValidityInMins: Int!

  # Specifies the number of times self service is allowed to unlock the account.
  selfServiceAttemptsLimit: Int!

  # Specifies whether self service is enabled for all users in this organization.
  isSelfServiceEnabled: Boolean!

  # Specifies the time after which the account is unlocked automatically.
  accountAutoUnlockDurationInMins: Int!

  # Specifies whether the account lockout feature is enabled on the UI.
  isBruteForceLockoutEnabled: Boolean!

  # Specifies whether the auto unlock feature is enabled on the UI.
  isAutoUnlockFeatureEnabled: Boolean!
}
# Input for api call to update a Managed Volume.
input UpdateManagedVolumeInput {
  # Required. ID of managed volume.
  id: String!

  # Required. Properties to update.
  update: ManagedVolumeUpdateInput!
}
# Supported in v5.0+
type UpdateManagedVolumeReply {
  # Required. Supported in v5.0+
  # v5.0-v5.3: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?
  # v6.0: List of host patterns. A host pattern describes a set of hosts who can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
  # v7.0: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards *, or ?.
  # v8.0+: List of host patterns. A host pattern describes a set of hosts that can mount the host. It can either be a host name, a network in CIDR notation or hostnames matching wildcards * or ?.
  hostPatterns: [String!]!

  # Required. Supported in v5.0+
  # v5.0-v5.3: Indicates whether the managed volume is deleted
  # v6.0: Indicates whether the managed volume is deleted.
  # v7.0+: Indicates if the Managed Volume is deleted.
  isDeleted: Boolean!

  # Required. Supported in v5.0+
  # v5.0-v6.0: Is managed volume a relic.
  # v7.0+: Indicates if the Managed Volume is a relic.
  isRelic: Boolean!

  # Required. Supported in v5.0+
  # v5.0-v5.3: Indicates whether managed volume is open for writes
  # v6.0: Indicates whether managed volume is open for writes.
  # v7.0+: Indicates if the Managed Volume is open for writes.
  isWritable: Boolean!

  # Supported in v5.0+
  # v5.0-v6.0: List of links for the managed volume.
  # v7.0+: List of links for the Managed Volume.
  links: [Link!]!

  # Supported in v5.0+
  # v5.0-v8.0:
  # v8.1+: The Main export of the Managed Volume.
  mainExport: ManagedVolumeExport

  # Required. Supported in v5.0+
  # v5.0-v6.0: Number of channels to divide the volume into. Each channel provides a unique share to write to.
  # v7.0+: Number of channels to divide the Managed Volume into. Each channel provides a unique share for writing.
  numChannels: Int!

  # Required. Supported in v5.0+
  # v5.0-v6.0: Combined total of in-progress snapshots and pending snapshots.
  # v7.0+: Combined total of in-progress and pending snapshots.
  pendingSnapshotCount: Int!

  # Supported in v5.0+
  # v5.0-v5.3: Valid Active Directory domain name for users accessing this managed volume over SMB
  # v6.0: Valid Active Directory domain name for users accessing this managed volume over SMB.
  # v7.0+: Valid Active Directory domain name for users accessing this Managed Volume over SMB.
  smbDomainName: String

  # Supported in v5.0+
  # v5.0-v5.3: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
  # v6.0: List of valid SMB host IP addresses that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
  # v7.0+: List of valid SMB host IP addresses that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
  smbValidIps: [String!]!

  # Supported in v5.0+
  # v5.0-v5.3: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB
  # v6.0: List of valid usersnames in the domain that can access the SMB share for this managed volume. This parameter is required when the value of shareType is SMB.
  # v7.0+: List of valid usersnames in the domain that can access the SMB share for this Managed Volume. This parameter is required when the value of shareType is SMB.
  smbValidUsers: [String!]!

  # Required. Supported in v5.0+
  # Number of snapshots.
  snapshotCount: Int!

  # Supported in v5.0+
  # v5.0-v6.0: Specify the subnet associated with the managed volume.
  # v7.0+: Specifies the subnet associated with the Managed Volume.
  subnet: String

  # Required. Supported in v5.0+
  # v5.0-v6.0: Used capacity for the volume across all the channels in bytes.
  # v7.0+: Used capacity, in bytes, for the Managed Volume across all channels.
  usedSize: Long!

  # Required. Supported in v5.0+
  # v5.0-v6.0: Maximum capacity for the volume across all the channels in bytes.
  # v7.0+: Maximum capacity, in bytes, for the Managed Volume across all channels.
  volumeSize: Long!

  # Supported in v5.3+
  # Describes any pending SLA Domain assignment on this object.
  pendingSlaDomain: ManagedObjectPendingSlaInfo

  # Application whose data this Managed Volume will store. For example, Oracle, SAP HANA, MSSQL, etc.
  applicationTag: ManagedVolumeApplicationTag

  # Type of the Managed Volume (SlaBased / AlwaysMounted).
  mvType: CdmManagedVolumeType

  # Specifies if the Managed Volume is exported over NFS or SMB.
  shareType: ManagedVolumeShareType!

  # Supported in v5.0+
  # v5.0-v5.3: Managed volume state like exported, resetting etc.,
  # v6.0: Managed volume state like exported, resetting etc.,.
  # v7.0: State of the Managed Volume. For example, exported, resetting etc.
  # v8.0+: State of the Managed Volume. For example, exported, resetting etc.,.
  state: ManagedVolumeState!

  # Supported in v5.3+
  # The additional details specific to SLA Managed Volumes.
  slaManagedVolumeDetails: SlaManagedVolumeDetail

  # The base workload object.
  snappable: CdmWorkload
}
# Input to edit manual target mapping.
input UpdateManualTargetMappingInput {
  # ID of the target mapping.
  id: String = ""

  # Name of the target mapping.
  name: String = ""

  # Field for specifying target and Rubrik cluster mapping.
  archivalLocationClusterMappings: [TargetToClusterMapping!] = []
}
# Supported in v5.0+
input UpdateMountConfigInput {
  # Supported in v5.2+
  # A Boolean that specifies whether to forcibly power down a virtual machine that is already mounted with Storage vMotion. When this value is 'true', the virtual machine is forcibly powered down. The default value for this Boolean is 'false'.
  shouldForce: Boolean

  # True to power on, false to power off.
  powerStatus: Boolean!
}
# Input for UpdateMssqlDefaultProperties.
input UpdateMssqlDefaultPropertiesInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Updated default properties.
  defaultProperties: MssqlDbDefaultsUpdateInput!
}
# Supported in v5.0+
type UpdateMssqlDefaultPropertiesReply {
  # Required. Supported in v5.0+
  # v5.0-v5.2: True to enable CBT based backup, false to disable.
  # v5.3+: True to enable a CBT-based backup, false to disable a CBT-based backup.
  cbtStatus: Boolean!

  # Required. Supported in v5.0+
  logBackupFrequencyInSeconds: Long!

  # Supported in v5.3+
  logRetentionTimeInHours: Int

  # Supported in v7.0+
  # Use the default backup location configured in SQL Server for file-based log backups.
  shouldUseDefaultBackupLocation: Boolean
}
# Input for UpdateMssqlLogShippingConfiguration.
input UpdateMssqlLogShippingConfigurationInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Configuration parameters for the update operation.
  config: MssqlLogShippingUpdateV2Input!

  # Required. ID of a log shipping configuration object.
  id: String!
}
# Supported in v5.3+
type UpdateMssqlLogShippingConfigurationReply {
  # Required. Supported in v5.3+
  links: MssqlLogShippingLinks

  # Supported in v5.3+
  # Specifies whether to automatically disconnect users from a secondary database in standby mode when a restore operation is performed. If this value is set to false and users remain connected, any scheduled restore operations fail. This value is returned only when the secondary database is in standby mode.
  shouldDisconnectStandbyUsers: Boolean

  # Updated detail of the log shipping configuration object.
  mssqlLogShippingSummaryV2: MssqlLogShippingSummaryV2
}
# Input to update a NAS system share.
input UpdateNasSharesInput {
  # Required. NAS share update request object.
  updateNasSharesRequest: UpdateNasSharesRequestInput!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Input to configure properties of one or more NAS shares.
input UpdateNasSharesRequestInput {
  # Required. Supported in v7.0+
  # Parameters for NAS shares.
  nasShareProperties: [NasSharePropertiesInput!]!
}
# Input to update a NAS system.
input UpdateNasSystemInput {
  # Required. ID of the registered NAS system.
  id: String!

  # Required. Properties of the NAS system to update.
  nasSystemUpdateProperties: NasSystemUpdateInput!
}
# Supported in v7.0+
# v7.0-v8.0:
# v8.1+: Basic information regarding a NAS system.
type UpdateNasSystemReply {
  # Required. Supported in v7.0+
  # The hostname of the NAS System.
  hostname: String!

  # Required. Supported in v7.0+
  # ID assigned to the NAS System.
  id: String!

  # Vendor type of the updated NAS system.
  vendorType: NasVendorType!
}
# Input to update network throttle.
input UpdateNetworkThrottleInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID assigned to a network throttle object.
  id: String!

  # Required. Configuration changes to apply to a specified network throttle object. Unspecified values are left unchanged.
  throttleUpdate: NetworkThrottleUpdateInput!
}
# Response to update network throttle.
type UpdateNetworkThrottleReply {
  # Supported in v5.0+
  # Default throttle limit for a resource, in Mbps. The throttle limit is precise to two decimal places.
  defaultThrottleLimit: Float

  # Required. Supported in v5.0+
  # Boolean value that determines whether a throttle limit is enabled.
  isEnabled: Boolean!

  # Required. Supported in v5.0+
  # An array containing all of the scheduled throttle limits for the specified resource.
  scheduledThrottles: [NetworkThrottleScheduleSummary!]!

  # Supported in v5.2+
  # The network interface where outgoing traffic is throttled.
  networkInterface: String

  # Supported in v8.0+
  # Network port for archival throttling. This is applicable only when the `resourceId` is `ArchivalEgress`.
  archivalThrottlePort: Int

  # Throttle resource: ReplicationEgress or ArchivalEgress.
  resourceId: NetworkThrottleResourceId!
}
# Input to edit NFS archival location.
input UpdateNfsTargetInput {
  # Id of the NFS archival location to be edited.
  id: UUID!

  # Name of the NFS archival location.
  name: String

  # Host IP address of the NFS archival location.
  host: String

  # Export directory of the NFS archival location.
  exportDir: String

  # Authentication type of the NFS archival location.
  nfsAuthType: AuthTypeEnum

  # File lock period in seconds of the NFS archival location.
  fileLockPeriodInSeconds: Int

  # Flag to determine if consolidation is enabled in the NFS archival location.
  isConsolidationEnabled: Boolean
}
# Input for patching a Nutanix cluster.
input UpdateNutanixClusterInput {
  # Required. ID of the Nutanix cluster.
  id: String!

  # Required. Object containing updated Nutanix cluster information.
  patchProperties: NutanixClusterPatchInput!
}
# Supported in v5.0+
type UpdateNutanixClusterReply {
  # Required. Supported in v5.0+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String!

  # Required. Supported in v5.0+
  # Connection status of a Nutanix Cluster.
  connectionStatus: RefreshableObjectConnectionStatus
  nutanixClusterSummary: NutanixClusterSummary
}
# Input for patching a Nutanix Prism Central.
input UpdateNutanixPrismCentralInput {
  # Required. ID of the Nutanix Prism Central.
  id: String!

  # Required. Object containing updated Nutanix Prism Central information.
  patchProperties: NutanixPrismCentralPatchInput!
}
# Response for the update Nutanix Prism Central operation.
type UpdateNutanixPrismCentralReply {
  # Supported in v9.0+
  # Connection status of the Nutanix Prism Central.
  connectionStatus: RefreshableObjectConnectionStatus

  # Required. Supported in v9.0+
  # Hostname for the Nutanix Prism Central that we use for all the cluster connections.
  hostname: String!

  # Details of the SLA Domain assigned to Nutanix Prism Central.
  slaAssignable: SlaAssignable

  # Required. Supported in v9.0+
  # Username for the Nutanix Prism Central that we use for all the cluster connections.
  username: String!

  # Supported in v9.0+
  # Describes any pending SLA Domain assignment on this object.
  pendingSlaDomain: ManagedObjectPendingSlaInfo

  # Supported in v9.1+
  # Displays the status of the initiated refresh job.
  refreshJobAsyncReqStatus: AsyncRequestStatus
}
# Input for patching a Nutanix virtual machine.
input UpdateNutanixVmInput {
  # Required. ID of Nutanix Virtual Machine.
  id: String!

  # Required. Properties to patch.
  vmPatchProperties: NutanixVmPatchInput!
}
# Input for updating O365 App authentication status.
input UpdateO365AppAuthStatusInput {
  # Office 365 subscription ID.
  o365OrgId: String!

  # App ID of the O365 app.
  o365AppId: String!
}
# Response of the O365 authentication status update operation.
type UpdateO365AppAuthStatusReply {
  # Response of UpdateO365AppAuthStatus operation, indicating if the operation was successful or not.
  success: Boolean!
}
# Input for updating O365 app permissions.
input UpdateO365AppPermissionsInput {
  # Type of O365 app.
  o365AppType: O365AppType!

  # App ID of the O365 app.
  o365AppId: String!
}
# Configuration for updating an O365 organization custom name.
input UpdateO365OrgCustomNameInput {
  # Polaris ID for an O365 organization.
  orgUuid: UUID!

  # Custom name to use for the O365 organization.
  customName: String!
}
# Update O365 Org custom name response.
type UpdateO365OrgCustomNameReply {
  # Polaris ID for an O365 organization.
  orgUuid: UUID!

  # Custom name to use for the O365 organization.
  customName: String!
}
input UpdateOracleDataGuardGroupInput {
  # Required. ID assigned to an Oracle Data Guard group object.
  id: String!

  # Required. Properties to use for the update of an Oracle Data Guard group object.
  updateProperties: OracleDataGuardGroupUpdateInput!
}
# Update organization details.
input UpdateOrgInput {
  # ID of the organization to be updated.
  organizationId: String!

  # New unique name ID of the organization.
  name: String!

  # New full name of the tenant organization.
  fullName: String!

  # New description of the organization.
  description: String!

  # Use the SSO/LDAP configuration of the global organization or set the configuration specific to this organization.
  authDomainConfig: TenantAuthDomainConfig!

  # Enforce MFA for all users in the organization.
  shouldEnforceMfaForAll: Boolean!

  # Force organization to use envoy to connect their hosts.
  isEnvoyRequired: Boolean!

  # Allowed clusters for the organization.
  allowedClusters: [String!]!

  # Existing users to add to the tenant organization.
  existingUsers: [ExistingUserInput!]

  # Invitations to invite new users to the tenant organization.
  userInvites: [UserInviteInput!]

  # Permissions to be given to the org admin role.
  permissions: [PermissionInput!]!

  # Self-service permissions to be assigned to the organization.
  selfServicePermissions: [SelfServicePermissionInput!]!

  # Existing SSO groups to be authorized for this tenant organization.
  existingSsoGroups: [ExistingSsoGroupInput!]

  # New SSO groups to be authorized for this tenant organization.
  newSsoGroups: [NewSsoGroupInput!]

  # Specifies if service accounts are enabled for this organization.
  isServiceAccountEnabled: Boolean

  # Specifies cross-account capabilities enabled for this organization.
  crossAccountCapabilities: [CrossAccountCapability!]
}
# UUID of updated organization.
type UpdateOrgReply {
  # UUID of updated organization.
  organizationId: String!
}
# Update organization security policy details.
input UpdateOrgSecurityPolicyInput {
  # Specifies whether to disallow weaker policy for tenants.
  disallowWeakerPolicy: Boolean
}
input UpdatePolicyInput {
  id: String = ""
  name: String = ""
  description: String = ""
  colorEnum: ClassificationPolicyColor = UNKNOWN
  mode: ClassificationPolicyMode = DISCOVERY
  analyzerIds: [String!] = []
  updateName: Boolean = false
  updateDescription: Boolean = false
  updateMode: Boolean = false
  updateAnalyzerIds: Boolean = false
}
input UpdateProxyConfigInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Proxy url and port.
  proxy: ProxyConfigInput!
}
# Supported in v5.0+
type UpdateProxyConfigReply {
  # Required. Supported in v5.0+
  host: String!

  # Supported in v5.0+
  port: Int

  # Required. Supported in v5.0+
  protocol: String!

  # Supported in v5.0+
  username: String
}
# Input to update RCS automatic target mapping.
input UpdateRcsAutomaticTargetMappingInput {
  # ID of the target mapping.
  id: String!

  # Name of the target mapping.
  name: String

  # Immutability lock duration in days.
  lockDurationDays: Long!

  # List of cluster UUIDs.
  clusterUuidList: [String!]

  # Specifies whether the proxy settings must be bypassed  the RCV archival target.
  shouldBypassProxy: Boolean
}
# Input for the Rubrik Cloud Vault update request.
input UpdateRcvTargetInput {
  # ID of the RCV location.
  id: UUID!

  # New name for the RCV location.
  name: String

  # Lock duration for the immutable location, in days.
  lockDurationDays: Long!

  # List of allowed IP addresses for the RCV location.
  ipMapping: IpMappingInput

  # Specifies whether the proxy settings must be bypassed for the RCV archival target.
  shouldBypassProxy: Boolean
}
# Request to update replication target information.
input UpdateReplicationTargetInput {
  # Gateway information of the source cluster when using the NAT setup type.
  sourceGateway: ReplicationGatewayInfo

  # Gateway information of the target cluster when using the NAT setup type.
  targetGateway: ReplicationGatewayInfo

  # Network interface for communication between the source and target clusters.
  targetNetworkInterface: NetworkInterfaceDetails

  # Specifies whether the replication pair is cross-account.
  isCrossAccount: Boolean = false

  # Source Rubrik cluster UUID.
  sourceClusterUuid: UUID!

  # Target Rubrik cluster UUID.
  targetClusterUuid: UUID!

  # NAT or private replication setup type.
  setupType: ReplicationSetupType!
}
# Input to edit S3 compatible target.
input UpdateS3CompatibleTargetInput {
  # Rubrik Security Cloud managed ID of the S3 compatible target to be edited.
  id: UUID!

  # Name of the S3 compatible target.
  name: String

  # Access key of the S3 compatible target.
  accessKey: String

  # Secret key of the S3 compatible target.
  secretKey: String

  # Endpoint of the S3 compatible target.
  endpoint: String

  # Number of buckets of the S3 compatible target.
  numberOfBuckets: Int

  # Flag to determine if consolidation is enabled in the NFS target.
  isConsolidationEnabled: Boolean

  # Flag to determine if system proxy will be used or not.
  useSystemProxy: Boolean

  # Immutability information of S3-compatible location.
  immutabilitySettings: LocationImmutabilitySettings
}
# Input for updating a scheduled report.
input UpdateScheduledReportInput {
  # ID of the scheduled report to edit.
  id: Int!

  # New configuration to update scheduled report to.
  config: ScheduledReportCreate!
}
# Represents the response for editing a scheduled report.
type UpdateScheduledReportReply {
  # Description of the edited schedule.
  scheduledReport: ScheduledReport!
}
# Input parameters for updating service accounts.
input UpdateServiceAccountInput {
  # ID of the service account to update.
  id: String!

  # Optional description of the service account.
  description: String
}
# Updated service account details.
type UpdateServiceAccountReply {
  # Client ID of the service account.
  clientId: String!

  # Name of the service account.
  name: String!

  # Description of the service account.
  description: String!

  # Timestamp of the last login done using the service account.
  lastLogin: DateTime
}
# Input for updating an SNMP configuration.
input UpdateSnmpConfigInput {
  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV50: SnmpConfigurationInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV51: SnmpConfigurationInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV52: SnmpConfigurationPatchInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV53: SnmpConfigurationPatchInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV60: SnmpConfigurationPatchInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV70: SnmpConfigurationPatchInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV80: SnmpConfigurationPatchInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV81: SnmpConfigurationPatchInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV90: SnmpConfigurationPatchInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV91: SnmpConfigurationPatchInput

  # SNMP configuration updates for the specified Rubrik cluster.
  snmpConfigV92: SnmpConfigurationPatchInput

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the Rubrik cluster or *me* for self.
  id: String!
}
# Reply Object for UpdateSnmpConfig.
type UpdateSnmpConfigReply {
  output: SnmpConfiguration
}
# Details of the storage array to be updated.
input UpdateStorageArrayInput {
  # Required. UUID of the Rubrik cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the storage array to be updated.
  id: String!

  # Required. JSON object for storage array definition.
  definition: StorageArrayDefinitionInput!
}
# Result of a storage array update operation in a Rubrik Cluster.
type UpdateStorageArrayReplyType {
  # Hostname of the storage array.
  hostname: String!

  # ID of the storage array.
  id: String!

  # Details of the Rubrik cluster.
  cluster: Cluster!

  # Storage array details. Available only when the storage array updates successfully.
  detail: StorageArrayDetail

  # Error message. Available only when the storage array update fails.
  errorMessage: String
}
# Update Storage array configurations.
input UpdateStorageArraysInput {
  # List of Storage array configurations to update.
  configs: [UpdateStorageArrayInput!]!
}
# Responses of operations to update storage arrays in Rubrik clusters.
type UpdateStorageArraysReply {
  # Update storage arrays responses.
  responses: [UpdateStorageArrayReplyType!]!
}
# Supported in v5.0+
input UpdateSupportTunnelConfigInput {
  # Supported in v5.0+
  # Tunnel inactivity timeout in seconds.
  inactivityTimeoutInSeconds: Long

  # Required. Supported in v5.0+
  # Pass **_true_** top open the support tunnel, and **_false_** to close.
  isTunnelEnabled: Boolean!
}
# Input for updating a Rubrik Support representative's access to the customer account.
input UpdateSupportUserAccessInput {
  # Support user access ID.
  id: Int = 0

  # User ID of the customer on whose behalf the Rubrik Support representative is accessing the customer account.
  impersonatedUserId: String = ""

  # Duration of access, in hours.
  newDurationInHours: Int = 0
}
# Input for updating a syslog export rule.
input UpdateSyslogExportRuleInput {
  # Syslog export rule for Rubrik CDM version 5.1.
  syslogSettingsV51: SyslogExportRuleUpdateInput

  # Syslog export rule for Rubrik CDM version 5.2.
  syslogSettingsV52: SyslogExportRulePartialInput

  # Syslog export rule for Rubrik CDM version 5.3.
  syslogSettingsV53: SyslogExportRulePartialInput

  # Syslog export rule for Rubrik CDM version 6.0.
  syslogSettingsV60: SyslogExportRulePartialInput

  # Syslog export rule for Rubrik CDM version 7.0.
  syslogSettingsV70: SyslogExportRulePartialInput

  # Syslog export rule for Rubrik CDM version 8.0.
  syslogSettingsV80: SyslogExportRulePartialInput

  # Syslog export rule for Rubrik CDM version 8.1.
  syslogSettingsV81: SyslogExportRulePartialInput

  # Syslog export rule for Rubrik CDM version 9.0.
  syslogSettingsV90: SyslogExportRulePartialInput

  # Syslog export rule.
  syslogSettingsV91: SyslogExportRulePartialInput

  # Syslog export rule.
  syslogSettingsV92: SyslogExportRulePartialInput

  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. The ID of syslog export rule.
  id: String!
}
# Reply Object for UpdateSyslogExportRule.
type UpdateSyslogExportRuleReply {
  output: SyslogExportRuleSummary
}
# Input for updating a Tape archival location.
input UpdateTapeTargetInput {
  # ID of the Tape archival location to be edited.
  id: UUID!

  # Name of the Tape archival location.
  name: String

  # IP address of the QStar server of the Tape archival location.
  hostName: String

  # Port of the QStar server for the Tape archival location.
  hostPort: Int

  # Username for the Tape archival location.
  username: String

  # User password for the Tape archival location.
  password: String
}
# Input for enabling or disabling the SSH Tunnel for Support Access.
input UpdateTunnelStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. The support tunnel parameters.
  config: UpdateSupportTunnelConfigInput!

  # Required. ID of the node add the tunnel to (this must be the current node id or *me*).
  id: String!
}
# Reply Object for UpdateTunnelStatus.
type UpdateTunnelStatusReply {
  output: SupportTunnelInfo
}
input UpdateVcenterHotAddBandwidthInput {
  # Required. The ingest and export bandwidth limits for the vCenter.
  hotAddBandwidthInfo: HotAddBandwidthInfoInput!

  # Required. ID of the vCenter server upon which the Rubrik cluster is setting the HotAdd bandwidth limits.
  id: String!
}
input UpdateVcenterHotAddNetworkInput {
  # Required. The information about a static IP address and user-configured vCenter network selected for HotAdd backup and recovery.
  hotAddNetworkInfo: HotAddNetworkConfigWithIdInput!

  # Required. ID of the vCenter server for which the Rubrik cluster is setting the HotAdd network information.
  id: String!
}
input UpdateVcenterInput {
  # Required. ID of the vCenter Server.
  id: String!

  # Required. Object containing updated vCenter Server information.
  updateProperties: VcenterConfigInput!
}
# Reply Object for UpdateVcenter.
type UpdateVcenterReply {
  output: VcenterSummary
}
# Input to update protection settings for volume group.
input UpdateVolumeGroupInput {
  # Required. The ID of Volume Group.
  id: String!

  # Required. Properties to update for this Volume Group.
  patchProperties: VolumeGroupPatchInput!
}
# Supported in v5.0+
type UpdateVolumeGroupReply {
  # Required. Supported in v5.0+
  # v5.0-v5.2: Assign this Volume Group to the given SLA domain.
  # v5.3+: The ID of the SLA Domain policy to assign to the Volume Group.
  configuredSlaDomainId: String!

  # Required. Supported in v5.0+
  # v5.0-v5.2: Whether backup/archival/replication is paused for this Volume Group
  # v5.3+: Indicates whether backup, archival, and replication are paused for this Volume Group.
  isPaused: Boolean!

  # Summary information about a volume group.
  volumeGroupSummary: VolumeGroupSummary

  # Required. Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: Configuration details for the volumes in the Volume Group.
  volumes: [HostVolumeSummary!]!

  # Supported in v5.3+
  # Describes any pending SLA Domain assignment on this object.
  pendingSlaDomain: ManagedObjectPendingSlaInfo

  # Blackout window information.
  blackoutWindowResponseInfo: BlackoutWindowResponseInfo
}
input UpdateVsphereAdvancedTagInput {
  # Required. ID of the multi-tag filter.
  filterId: String!

  # Required. Filter name, description, and the conditional logic of vSphere tags.
  filterInfo: FilterInfoInput!

  # Required. ID of the vCenter Server.
  id: String!
}
# Reply Object for UpdateFilter.
type UpdateVsphereAdvancedTagReply {
  output: FilterCreateResponse
}
input UpdateVsphereVmInput {
  # Required. ID of virtual machine.
  id: String!

  # Required. Properties to update.
  vmUpdateProperties: VirtualMachineUpdateWithSecretInput!
}
# Webhook configuration to update.
input UpdateWebhookInput {
  # The new name of the webhook to be updated.
  name: String

  # A description of the webhook to be created.
  description: String

  # The Webhook server certificate that Rubrik uses to establish a TLS connection with the endpoint.
  serverCertificate: String

  # The ID of the service account attached to the webhook.
  serviceAccountId: String

  # The ID of the webhook to be updated.
  id: Int!

  # A list of event and audit types to which the webhook is subscribed.
  subscriptionType: SubscriptionTypeInput

  # A list of event and audit severities to which the webhook is subscribed.
  subscriptionSeverity: SubscriptionSeverityInput

  # The application that will receive the webhook.
  providerType: ProviderType

  # The authentication type and token to authenticate the endpoint.
  authInfo: AuthInfoInput

  # Specifies whether the webhook is enabled or not.
  status: WebhookStatus

  # The URL endpoint to the receiving application.
  url: URL

  # Specifies whether a test event will be sent upon update.
  shouldSendTestEvent: Boolean = false
}
# The webhook that was updated.
type UpdateWebhookReply {
  # The webhook that was updated.
  webhook: Webhook!

  # This field is empty if the webhook test was not requested (shouldSendTestEvent request field), or was carried out successfully. In case of a webhook test failure, this field contains the failure details.
  testError: ErrorInfo
}
# Input to update status of features of AWS cloud account to connected from update permissions state.
input UpgradeAwsCloudAccountFeaturesWithoutCftInput {
  # Rubrik ID of cloud account to be upgraded.
  awsCloudAccountId: String!

  # Cloud account features to be upgraded.
  features: [CloudAccountFeature!]!
}
# Input to set status of IAM user-based AWS cloud account to connected from update permissions state.
input UpgradeAwsIamUserBasedCloudAccountPermissionsInput {
  # Rubrik ID of cloud account to be upgraded.
  awsCloudAccountId: String!

  # Cloud native features to be upgraded.
  features: [CloudAccountFeature!]!
}
# Input to upgrade a feature for an Azure cloud account.
input UpgradeAzureCloudAccountFeatureInput {
  # Feature to be upgraded.
  featureType: CloudAccountFeature!

  # Specifies a list of permission groups for upgrading the feature. If the list is empty, existing permission groups are upgraded if they are available.
  permissionsGroups: [PermissionsGroup!]!
}
# Input for upgrading an Azure Cloud Account.
input UpgradeAzureCloudAccountInput {
  # Session ID of the current OAuth session.
  sessionId: String!

  # Deprecated, use featuresToUpgrade instead. Features enabled on the Azure Cloud Account.
  features: [CloudAccountFeature!]

  # Features enabled on the Azure Cloud Account.
  featuresToUpgrade: [UpgradeAzureCloudAccountFeatureInput!]

  # Rubrik IDs of the subscriptions to be upgraded.
  azureSubscriptionRubrikIds: [UUID!]!
}
# Input for upgrading Azure Cloud Account feature to connected state from update permissions without OAuth.
input UpgradeAzureCloudAccountPermissionsWithoutOauthInput {
  # Rubrik ID of the cloud accounts to upgrade permissions.
  cloudAccountId: UUID!

  # Deprecated, use featureToUpgrade instead. Feature enabled on the Azure Cloud Account, which is currently in Update Permissions state.
  feature: CloudAccountFeature

  # Features enabled on the Azure Cloud Account, which are currently in the Update Permissions state.
  featureToUpgrade: [UpgradeAzureCloudAccountFeatureInput!]
}
# Response of the operation to set Azure cloud account feature status to connected, when in update permissions state.
type UpgradeAzureCloudAccountPermissionsWithoutOauthReply {
  # Status of the request.
  status: Boolean!
}
# Response of the operation to upgrade Azure Cloud Account.
type UpgradeAzureCloudAccountReply {
  # Status of the operation to upgrade Azure Cloud Account permission.
  status: [UpgradeAzureCloudAccountStatus!]!
}
# Status of the operation to Azure Cloud Account Upgrade permission.
type UpgradeAzureCloudAccountStatus {
  # Native ID of the Azure Subscription.
  azureSubscriptionNativeId: String!

  # Specifies whether the upgrade of Azure Cloud Account was successful. When true, the upgrade was successful.
  isSuccess: Boolean!

  # Error received during upgrade of Azure Cloud Account.
  error: String!
}
# Input for upgrading archival locations managed through a Rubrik cluster.
input UpgradeCdmManagedTargetInput {
  # List of FIDs of the archival locations to be upgraded.
  fids: [String!]!
}
# Represents upgrade duration in seconds.
type UpgradeDurationReply {
  # Time taken by the last successful rolling upgrade, in seconds.
  rollingUpgradeDuration: Long!

  # Time taken by the last successful fast upgrade, in seconds.
  fastUpgradeDuration: Long!
}
# Input for upgrading GCP Cloud Account feature to connected state from update permissions without OAuth.
input UpgradeGcpCloudAccountPermissionsWithoutOauthInput {
  # Rubrik ID of the cloud account to upgrade permissions.
  cloudAccountId: UUID!

  # Feature enabled on the GCP Cloud Account, which is currently in Update Permissions state.
  feature: CloudAccountFeature!
}
# Response of the operation to set GCP cloud account feature status to connected, when in update permissions state.
type UpgradeGcpCloudAccountPermissionsWithoutOauthReply {
  # Status of the operation to upgrade GCP project.
  status: GcpCloudAccountProjectUpgradeStatus
}
enum UpgradeInfoSortByEnum {
  ClusterJobStatus
  ClusterLocation
  ClusterName
  ClusterType
  DownloadedVersion
  InstalledVersion
  RegisteredAt
  VersionStatus
}
input UpgradeIoFilterInput {
  # Required. 
  fqdnInfo: FullyQualifiedDomainNameInfoInput!

  # Required. ID of the VMware compute cluster.
  id: String!
}
# Start upgrade job response.
type UpgradeJobReply {
  # Upgrade start message.
  message: String!

  # Upgrade success/failure boolean flag.
  success: Boolean!
}
# Start upgrade batch job response.
type UpgradeJobReplyWithUuid {
  # Cluster uuid.
  uuid: String!

  # Upgrade job reply object.
  upgradeJobReply: UpgradeJobReply!
}
# Upgrade recommendation information.
type UpgradeRecommendationInfo {
  # Recommended version for upgrade in the same release.
  recommendation: String!

  # List of upgradable versions for the cluster.
  upgradability: [String!]!

  # Latest upgradable version from the next release.
  nextReleaseRecommendation: String!
}
# UpgradeStatus is upgrade status of archival location to RSC-managed location.
enum UpgradeStatus {
  # IN_PROGRESS if upgrade process is in progress.
  IN_PROGRESS

  # READY_TO_UPGRADE if upgrade process not started yet.
  READY_TO_UPGRADE

  # UPGRADE_FAILED if upgrade process fails in between.
  UPGRADE_FAILED

  # UPGRADE_SUCCESS if upgrade process completes successfully.
  UPGRADE_SUCCESS

  # UPGRADE_UNSUPPORTED if archival location can't be upgraded.
  UPGRADE_UNSUPPORTED
}
# Upgrade status response.
type UpgradeStatusReply {
  # Current state name.
  currentStateName: String!

  # Current state.
  currentState: String!

  # Upgrade start Timestamp.
  upgradeTimestamp: String!

  # Upgrade driver node name.
  nodeName: String!

  # Upgrade tarball package name.
  tarballName: String!

  # Progress percentage of current state.
  currentStateProgress: String!

  # Upgrade mode.
  mode: String!

  # Time remaining for upgrade to complete.
  upgradeTimeLeftSecs: String!

  # Upgrade states successfully completed running.
  finishedStates: String!

  # Progress percentage of current state.
  progress: String!

  # Current upgrade task name.
  userSurfacedTaskName: String!

  # Overall upgrade progress percentage.
  upgradeProgressPercentage: String!

  # Upgrade status object.
  upgradeStatus: StatusResponse

  # Upgrade states to be attempted to run.
  pendingStates: String!

  # Rolling upgrade information.
  ruInfo: RollingUpgradeInfo
}
# Upgrade Type.
enum UpgradeType {
  # Fast Upgrade.
  FAST

  # Rolling Upgrade.
  ROLLING
}
# Input required to upload a database snapshot to a target blobstore.
input UploadDatabaseSnapshotToBlobstoreInput {
  # Snapshot ID of the database.
  snapshotId: UUID!

  # Storage account configuration to upload the snapshot.
  targetStorageAccountConfigInput: TargetStorageAccountConfigInput
}
# Represents configuration protection upload location types.
enum UploadLocationType {
  # A replication target of the existing cluster.
  REPLICATION_TARGET
}
# User account details.
type User {
  # The user ID.
  id: String!

  # The user's email address.
  email: String!

  # The domain the user belongs to.
  domain: UserDomainEnum!

  # The last time the user logged in.
  lastLogin: DateTime

  # The status of the user account.
  status: UserStatus!

  # The groups that the user belongs to.
  groups: [String!]!

  # The TOTP status of user.
  totpStatus: TotpStatus!

  # The passkey metadata of the user.
  passkeyMetadata: PasskeyMetadata!

  # The user account lockout information.
  lockoutState: LockoutState!

  # Specifies whether auth domain user is hidden.
  isHidden: Boolean!

  # Specifies whether user is an account owner.
  isAccountOwner: Boolean!

  # The user's username.
  username: String!

  # The number of unread notifications for the current user.
  unreadCount: Long!

  # The user's EULA acceptance state.
  eulaState: EulaState!

  # Permission of an user.
  roles: [Role!]!

  # The suborganizations in which the user has roles.
  allOrgs: [Org!]!

  # Email notification configurations.
  emailConfig: [EventDigest!]!
}
# UserAccessType is used to inform if any insecure user can
# access this file or not.
enum UserAccessType {
  # Insecure user access.
  INSECURE

  # Secure user access.
  SECURE

  # Unknown user access.
  USER_ACCESS_TYPE_UNKNOWN
}
# Represents the activity for a specific user.
type UserActivityResult {
  # The user that this result corresponds to.
  user: AccessUser

  # The total number of activities this user had.
  numActivities: Long!

  # The total number of activities, grouped by activity type.
  numActivitiesBreakdown: [ActivityResult!]!

  # ID used for pagination.
  paginationId: String!
}
# Paginated list of UserActivityResult objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type UserActivityResultConnection {
  # List of UserActivityResult objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [UserActivityResultEdge!]!

  # List of UserActivityResult objects.
  nodes: [UserActivityResult!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of UserActivityResult objects matching the request arguments.
  count: Int!
}
# Wrapper around the UserActivityResult object. This wrapper is used for pagination.
type UserActivityResultEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual UserActivityResult object wrapped by this edge.
  node: UserActivityResult!
}
# An audit triggered by a user.
type UserAudit {
  # The time the user audit occurred.
  time: DateTime!

  # The status of the user audit.
  status: UserAuditStatusEnum!

  # The type of the user audit.
  auditType: UserAuditTypeEnum

  # The username of the user who triggered the user audit.
  userName: String

  # The ID of the object associated with the user audit.
  objectId: String!

  # The name of the object associated with the user audit.
  objectName: String

  # The type of the object associated with the user audit.
  objectType: UserAuditObjectTypeEnum!

  # The associated message with the user audit.
  message: String!

  # The severity of the user audit.
  severity: UserAuditSeverityEnum

  # Optional user note.
  userNote: String

  # The organization ID of this user audit.
  orgId: String!

  # The organization name of this user audit.
  orgName: String

  # The ID of the user audit.
  id: ID!

  # The ID of the Rubrik cluster to which this user audit belongs.
  cluster: Cluster
}
type UserAuditChart {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [UserAuditGroupByEnum!]
}
# Paginated list of UserAudit objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type UserAuditConnection {
  # List of UserAudit objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [UserAuditEdge!]!

  # List of UserAudit objects.
  nodes: [UserAudit!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of UserAudit objects matching the request arguments.
  count: Int!
}
# Wrapper around the UserAudit object. This wrapper is used for pagination.
type UserAuditEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual UserAudit object wrapped by this edge.
  node: UserAudit!
}
# Filter user audit data.
input UserAuditFilter {
  # Filter by audit severity.
  auditSeverity: [AuditSeverity!]

  # Filter by audit status.
  auditStatus: [AuditStatus!]

  # Filter by audit type.
  auditType: [AuditType!]

  # Filter by audit object type.
  auditObjectType: [AuditObjectType!]

  # Filter by cluster UUIDs.
  clusterId: [UUID!]

  # Filter by object IDs.
  objectIds: [String!]

  # Filter by object forever IDs.
  objectFids: [String!]

  # Filter audits that have time after the specified value.
  timeGt: DateTime

  # Filter audits that have time before the specified value.
  timeLt: DateTime

  # Filter audits that have a user note attached.
  hasUserNote: Boolean

  # Filter by search term in audit message.
  searchTerm: String

  # Filter by organization ID.
  orgIds: [String!]
}
enum UserAuditGroupByEnum {
  Cluster
  ClusterType
  Day
  Hour
  Month
  ObjectType
  Quarter
  UserAuditStatus
  UserAuditType
  Week
  Year
}
# User audit object type.
enum UserAuditObjectTypeEnum {
  # Active Directory domain type.
  ACTIVE_DIRECTORY_DOMAIN

  # Active Directory domain controller type.
  ACTIVE_DIRECTORY_DOMAIN_CONTROLLER

  # Atlassian site.
  ATLASSIAN_SITE

  # AWS native S3 bucket.
  AWS_NATIVE_S3_BUCKET

  # Azure AD Directory type.
  AZURE_AD_DIRECTORY

  # Azure storage account.
  AZURE_STORAGE_ACCOUNT

  # App blueprint type.
  AppBlueprint

  # Archival location type.
  ArchivalLocation

  # Auth domain type.
  AuthDomain

  # AWS account type.
  AwsAccount

  # AWS event type.
  AwsEventType

  # AWS native account type.
  AwsNativeAccount

  # AWS native EBS volume type.
  AwsNativeEbsVolume

  # AWS native EC2 instance type.
  AwsNativeEc2Instance

  # AWS native RDS instance type.
  AwsNativeRdsInstance

  # Azure native disk type.
  AzureNativeDisk

  # Azure native subscription type.
  AzureNativeSubscription

  # Azure native virtual machine type.
  AzureNativeVm

  # Azure SQL database type.
  AzureSqlDatabase

  # Azure SQL managed instance type.
  AzureSqlManagedInstance

  # Blueprint type.
  Blueprint

  # Cassandra column family type.
  CASSANDRA_COLUMN_FAMILY

  # Cassandra keyspace type.
  CASSANDRA_KEYSPACE

  # Cassandra source type.
  CASSANDRA_SOURCE

  # Certificate management type.
  CERTIFICATE_MANAGEMENT

  # Cloud native tag rule type.
  CloudNativeTagRule

  # Rubrik cluster type.
  Cluster

  # Db2 database type.
  DB2_DATABASE

  # Db2 instance type.
  DB2_INSTANCE

  # Data location type.
  DataLocation

  # Encryption Management type.
  ENCRYPTION_MANAGEMENT

  # Exchange DAG type.
  EXCHANGE_DAG

  # Exchange Database type.
  EXCHANGE_DATABASE

  # Exchange Server type.
  EXCHANGE_SERVER

  # EC2 instance type.
  Ec2Instance

  # Failover cluster app type.
  FailoverClusterApp

  # Federated access type.
  FederatedAccess

  # GCP native disk type.
  GcpNativeDisk

  # GCP native GCE instance type.
  GcpNativeGceInstance

  # GCP native project type.
  GcpNativeProject

  # Host type.
  Host

  # Host failover cluster type.
  HostFailoverCluster

  # Hyper-V SCVMM type.
  HypervScvmm

  # Hyper-V server type.
  HypervServer

  # Hyper-V virtual machine type.
  HypervVm

  # IP whitelist type.
  IpWhitelist

  # Atlassian Jira project.
  JIRA_PROJECT

  # Atlassian Jira settings.
  JIRA_SETTINGS

  # Job instance type.
  JobInstance

  # Kubernetes Cluster type.
  K8S_CLUSTER

  # Kubernetes Protection Set type.
  K8S_PROTECTION_SET

  # LDAP type.
  Ldap

  # Linux fileset type.
  LinuxFileset

  # Linux host type.
  LinuxHost

  # MongoDB source type.
  MONGODB_SOURCE

  # MongoDB Collection type.
  MONGO_COLLECTION

  # MongoDB Source type.
  MONGO_SOURCE

  # NoSQL storage location type.
  MOSAIC_STORAGE_LOCATION

  # MSSQL Mount type.
  MSSQL_MOUNT

  # MSSQL object type.
  MSSQL_OBJECT

  # Managed Volume type.
  ManagedVolume

  # MSSQL type.
  Mssql

  # MSSQL database type.
  MssqlDatabase

  # Nutanix Prism Central type.
  NUTANIX_PRISM_CENTRAL

  # NAS host type.
  NasHost

  # Nutanix cluster type.
  NutanixCluster

  # Nutanix virtual machine type.
  NutanixVm

  # Office 365 calendar type.
  O365Calendar

  # Office 365 Group type.
  O365Group

  # Office 365 mailbox type.
  O365Mailbox

  # Office 365 OneDrive type.
  O365Onedrive

  # Office 365 organization type.
  O365Organization

  # Office 365 SharePoint drive type.
  O365SharepointDrive

  # Office 365 SharePoint list type.
  O365SharepointList

  # Office 365 team type.
  O365Team

  # Office 365 SharePoint Site type.
  O365_SHAREPOINT_SITE

  # OAuth token.
  OAUTH_TOKEN

  # Oracle Mount type.
  ORACLE_MOUNT

  # Organization type.
  ORGANIZATION

  # Oracle database type.
  OracleDb

  # Oracle host type.
  OracleHost

  # Oracle RAC type.
  OracleRac

  # Public cloud machine instance type.
  PublicCloudMachineInstance

  # Rubrik cluster replication pair.
  REPLICATION_PAIR

  # SAP HANA Database type.
  SapHanaDb

  # SAP HANA system type.
  SapHanaSystem

  # Share fileset type.
  ShareFileset

  # SLA Domain type.
  Sla

  # SLA Domain type.
  SlaDomain

  # SMB domain type.
  SmbDomain

  # Snapshot type.
  Snapshot

  # Storage array type.
  StorageArray

  # Storage array volume group type.
  StorageArrayVolumeGroup

  # Storage settings type.
  StorageSettings

  # Storm type.
  Storm

  # Support tunnel type.
  SupportTunnel

  # System preference type.
  SystemPreference

  # TPR configuration type.
  TPR_CONFIG

  # TPR policy type.
  TPR_POLICY

  # TPR request type.
  TPR_REQUEST

  # Unknown type.
  Unknown

  # Upgrade type.
  Upgrade

  # User type.
  User

  # User action audit type.
  UserActionAudit

  # User group type.
  UserGroup

  # User role type.
  UserRole

  # VMware Compute Cluster type.
  VMWARE_COMPUTE_CLUSTER

  # VCD type.
  Vcd

  # VCD vApp type.
  VcdVapp

  # A vCenter type.
  Vcenter

  # VMware mount type.
  VmwareMount

  # VMware virtual machine type.
  VmwareVm

  # Volume group type.
  VolumeGroup

  # Windows fileset type.
  WindowsFileset

  # Windows host type.
  WindowsHost
}
# User audit severity.
enum UserAuditSeverityEnum {
  Critical
  Info
  NA
  Warning
}
enum UserAuditSortByEnum {
  Time
}
# Represents the supported fields on which we can sort user audit response.
enum UserAuditSortField {
  # Sort user audits by time.
  TIME
}
# User audit status.
enum UserAuditStatusEnum {
  Canceled
  Failure
  Success
}
type UserAuditTable {
  name: String!
  focus: ReportFocusEnum!
  groupBy: [UserAuditGroupByEnum!]
  selectedColumns: [UserAuditTableColumnEnum!]!
  sortBy: UserAuditSortByEnum

  # Sorts by order.
  sortOrder: SortOrder
}
enum UserAuditTableColumnEnum {
  ClusterName
  ClusterType
  UserAuditStatus
  UserAuditType
}
# User audit type.
enum UserAuditTypeEnum {
  AccessManagement
  Audit

  # Audit type for bulk recovery use cases.
  BULK_RECOVERY
  Backup
  Classification
  Configuration
  Diagnostic
  Download

  # Audit type for encryption management use cases.
  ENCRYPTION_MANAGEMENT_OPERATION

  # Audit type for user file downloads.
  FILE_DOWNLOAD
  Failover
  ISOLATED_RECOVERY
  Index
  LOCAL_RECOVERY
  LegalHold
  Login

  # Audit type for quarantine usecases.
  QUARANTINE

  # Audit type for recovery schedule use cases.
  RECOVERY_SCHEDULE

  # Audit type for Ruby AI use cases.
  RUBY_AI
  Recovery
  Search
  SlaAssignment
  SlaModification
  Sync

  # Audit type for threat hunt use cases.
  THREAT_HUNT
  UnknownUserAuditType
}
# Paginated list of User objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type UserConnection {
  # List of User objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [UserEdge!]!

  # List of User objects.
  nodes: [User!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of User objects matching the request arguments.
  count: Int!
}
# The username and password of the user to authenticate the endpoint.
input UserCredentials {
  # The username of the user to authenticate the endpoint.
  username: String!

  # The password of the user to authenticate the endpoint.
  password: String!
}
enum UserDomainEnum {
  CLIENT
  LDAP
  LOCAL
  SSO
  SUPPORT
}
type UserDownload {
  id: Long!
  name: String!
  status: DownloadStatusEnum!
  progress: Int!
  identifier: DownloadIdentifierEnum!
  createTime: String!
  completeTime: String!
}
type UserDownloadUrl {
  url: String!
}
# Wrapper around the User object. This wrapper is used for pagination.
type UserEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual User object wrapped by this edge.
  node: User!
}
enum UserFieldEnum {
  Domain
  Email
  LastLogin
  Status
}
# Input for filtering a list of users.
input UserFilterInput {
  # Filter users by email.
  emailFilter: String

  # Filter users by domain type.
  domainFilter: [UserDomainEnum!] = []

  # Filter users by organization ID.
  orgIdsFilter: [String!] = []

  # Filter users that have the specified roles assigned in the current
  # organization.
  roleIdsFilter: [String!] = []

  # Filter users by lockout state.
  lockoutStateFilter: LockoutStateFilter = ALL

  # Filter users by hidden status.
  hiddenStateFilter: HiddenStateFilter = ALL_USERS
}
input UserGroupToRolesInput {
  userGroupId: String = ""
  roleIds: [String!] = []
}
# Details of the user invitation.
input UserInviteInput {
  # Email of the user.
  email: String!

  # Note to the user.
  note: String!

  # Specifies whether the user should be an org admin or not.
  isOrgAdmin: Boolean!
}
# Current user login context.
type UserLoginContext {
  # Currently logged-in user.
  user: User!

  # Current organization ID.
  orgId: String!

  # Current organization name.
  orgName: String!

  # Current organization full name.
  orgFullName: String!

  # Current account name.
  accountName: String!
}
# An object representing product notifications.
type UserNotifications {
  # The ID for the current user.
  id: String!

  # The amount of unread notifications for the current user.
  unreadCount: Long!
}
# Specifies information about the session management configuration for the user account.
type UserSessionManagementConfig {
  # Specifies whether the user has enforced a limit on the maximum number of sessions. The value is true if the user has enforced a limit on the maximum number of sessions and false otherwise.
  isConcurrentSessionLimitationEnabled: Boolean!

  # Integer value indicating the maximum number of sessions set by the user.
  maxConcurrentSessions: Int!

  # Specifies whether the user has enforced a session timeout when the maximum time limit on inactivity is reached.
  isInactivityTimeoutEnabled: Boolean!

  # Integer value specifying the number of seconds before the session logs out if the user is inactive.
  inactivityTimeoutInSeconds: Long!

  # Integer value, in seconds, specifying maximum value for inactivity timeout configuration.
  inactivityTimeoutInSecondsMaxLimit: Long!

  # Integer value , in seconds, specifying minimum value for inactivity timeout configuration.
  inactivityTimeoutInSecondsMinLimit: Long!

  # Integer value specifying maximum value for concurrent session limit configuration.
  maxConcurrentSessionsMaxLimit: Int!

  # Indicates the number of seconds before the session logs out.
  sessionTimeoutInSeconds: Long!

  # Minimum value, in seconds, for session timeout configuration.
  sessionTimeoutInSecondsMinLimit: Long!

  # Maximum value, in seconds, for session timeout configuration.
  sessionTimeoutInSecondsMaxLimit: Long!

  # Specifies whether the Global Organization has enforced it's policy.
  isGlobalPolicyEnforced: Boolean!
}
# User settings represented by key-value pairs for the predefined keys in Rubrik.
type UserSetting {
  # Key of the user setting.
  setting: String!

  # Value of the user setting associated with key.
  value: String!
}
# Represents per user setting as a key value pair.
type UserSettings {
  # User setting values of user setting.
  settings: [UserSetting!]!
}
# Fields by which we can sort users.
enum UserSortByField {
  # Domain Type.
  DOMAIN

  # Email.
  EMAIL

  # Last Login.
  LAST_LOGIN

  # Status.
  STATUS
}
# Input for sort parameters.
input UserSortByParam {
  # Field to sort by.
  field: UserSortByField = EMAIL

  # Sort order.
  sortOrder: SortOrder = ASC
}
# Current account status of user.
enum UserStatus {
  # Status of the user account is active.
  ACTIVE

  # Status of the user account is deactivated.
  DEACTIVATED

  # Login is controlled by SSO, current user account status is unknown to system.
  UNKNOWN
}
input UserTimeRangeInput {
  startTime: String = ""
  endTime: String = ""
  timezone: String = ""
}
# Response for the operation that registers hosts in bulk.
type V1BulkRegisterHostAsyncResponse {
  # Summary information of the registered hosts.
  items: [HostDetail!]!
}
type V1BulkUpdateExchangeDagResponse {
  items: [ExchangeDagSummary!]!
}
enum V1GetCompatibleMssqlInstancesV1RequestRecoveryType {
  V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_EXPORT
  V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_MOUNT
  V1_GET_COMPATIBLE_MSSQL_INSTANCES_V1_REQUEST_RECOVERY_TYPE_RESTORE
}
type V1MssqlGetRestoreFilesV1Response {
  items: [MssqlRestoreFile!]!
}
enum V1QueryCertificatesRequestSortBy {
  V1_QUERY_CERTIFICATES_REQUEST_SORT_BY_DESCRIPTION
  V1_QUERY_CERTIFICATES_REQUEST_SORT_BY_EXPIRATION
  V1_QUERY_CERTIFICATES_REQUEST_SORT_BY_HAS_KEY
  V1_QUERY_CERTIFICATES_REQUEST_SORT_BY_NAME
}
enum V1QueryCertificatesRequestSortOrder {
  V1_QUERY_CERTIFICATES_REQUEST_SORT_ORDER_ASC
  V1_QUERY_CERTIFICATES_REQUEST_SORT_ORDER_DESC
}
# Parameters that specify the sort order of the query results.
enum V1QueryLogReportRequestSortBy {
  # Sorts results by database type.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_BY_DATABASE_TYPE

  # Sorts results by effective SLA Domain name.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_BY_EFFECTIVE_SLA_DOMAIN_NAME

  # Sorts results by last database snapshot time.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_BY_LAST_SNAPSHOT_TIME

  # Sorts results by latest recovery time for the database.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_BY_LATEST_RECOVERY_TIME

  # Sorts results by location.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_BY_LOCATION

  # Sorts results by log backup delay.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_BY_LOG_BACKUP_DELAY

  # Sorts results by log backup frequency.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_BY_LOG_BACKUP_FREQUENCY

  # Sorts results by name of the database.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_BY_NAME
}
# Parameters to sort the query results.
enum V1QueryLogReportRequestSortOrder {
  # Sort by ascending order.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_ORDER_ASC

  # Sort by descending order.
  V1_QUERY_LOG_REPORT_REQUEST_SORT_ORDER_DESC
}
enum V1QueryUnmanagedObjectSnapshotsV1RequestSnapshotType {
  V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SNAPSHOT_TYPE_ON_DEMAND
  V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SNAPSHOT_TYPE_POLICY_BASED
  V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SNAPSHOT_TYPE_RETRIEVED
}
enum V1QueryUnmanagedObjectSnapshotsV1RequestSortBy {
  V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_BY_ARCHIVAL_LOCATION
  V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_BY_LOCAL_EXPIRATION_DATE
  V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_BY_SNAPSHOT_DATE_AND_TIME
}
enum V1QueryUnmanagedObjectSnapshotsV1RequestSortOrder {
  V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_ORDER_ASC
  V1_QUERY_UNMANAGED_OBJECT_SNAPSHOTS_V1_REQUEST_SORT_ORDER_DESC
}
# Type of the objects to be searched.
enum V1SearchDomainControllerRequestObjectType {
  # Active Directory built-in domain.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_BUILTIN_DOMAIN

  # Active Directory child domain.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_CHILD_DOMAIN

  # Active Directory computer object type.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_COMPUTER

  # Active Directory contact object type.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_CONTACT

  # Active Directory container object type.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_CONTAINER

  # Active Directory domain root.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_DOMAIN_ROOT

  # Active Directory group.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_GROUP

  # Active Directory group policy.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_GROUP_POLICY_OBJECT

  # Active Directory organization unit.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_ORGANIZATION_UNIT

  # Unknown object type.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_UNKNOWN

  # Active Directory user object type.
  V1_SEARCH_DOMAIN_CONTROLLER_REQUEST_OBJECT_TYPE_USER
}
# Request source types for the request to delete NoSQL protection sources in bulk.
enum V2BulkDeleteMosaicSourcesRequestSourceType {
  # Specifies that the request source type for the request to delete NoSQL protection sources in bulk is Cassandra.
  V2_BULK_DELETE_MOSAIC_SOURCES_REQUEST_SOURCE_TYPE_CASSANDRA

  # Specifies that the request source type for the request to delete NoSQL protection sources in bulk is MongoDB.
  V2_BULK_DELETE_MOSAIC_SOURCES_REQUEST_SOURCE_TYPE_MONGO
}
# Request source types for the request to delete a NoSQL protection source.
enum V2DeleteMosaicSourceRequestSourceType {
  # Specifies that NoSQL protection source Request source type is Cassandra source.
  V2_DELETE_MOSAIC_SOURCE_REQUEST_SOURCE_TYPE_CASSANDRA

  # Specifies that NoSQL protection source Request source type is MongoDB source.
  V2_DELETE_MOSAIC_SOURCE_REQUEST_SOURCE_TYPE_MONGO
}
enum V2QueryLogShippingConfigurationsV2RequestSortBy {
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_BY_LAST_APPLIED_POINT
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_BY_LOCATION
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_BY_PRIMARY_DATABASE_NAME
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_BY_SECONDARY_DATABASE_NAME
}
enum V2QueryLogShippingConfigurationsV2RequestSortOrder {
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_ORDER_ASC
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_SORT_ORDER_DESC
}
enum V2QueryLogShippingConfigurationsV2RequestStatus {
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_STATUS_BROKEN
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_STATUS_INITIALIZING
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_STATUS_OK
  V2_QUERY_LOG_SHIPPING_CONFIGURATIONS_V2_REQUEST_STATUS_STALE
}
input VSphereMountFilter {
  name: String
  clusterUuid: [UUID!]
  powerStatus: [Boolean!]
  sourceVmId: UUID
}
# The valid replication target Rubrik cluster-specific information.
type ValidReplicationTarget {
  # Name of the Rubrik cluster.
  name: String!

  # Version of the Rubrik cluster.
  version: String!

  # The account name that the cluster is associated with.
  accountName: String!

  # API version of the Rubrik cluster.
  apiVersion: String!

  # UUID of the Rubrik cluster.
  uuid: UUID!
}
# Paginated list of ValidReplicationTarget objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type ValidReplicationTargetConnection {
  # List of ValidReplicationTarget objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [ValidReplicationTargetEdge!]!

  # List of ValidReplicationTarget objects.
  nodes: [ValidReplicationTarget!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of ValidReplicationTarget objects matching the request arguments.
  count: Int!
}
# Wrapper around the ValidReplicationTarget object. This wrapper is used for pagination.
type ValidReplicationTargetEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual ValidReplicationTarget object wrapped by this edge.
  node: ValidReplicationTarget!
}
# Input to validate and set up an AWS account.
input ValidateAndCreateAwsCloudAccountInput {
  # Action to be performed with the cloud account.
  action: CloudAccountAction!

  # List of features to be enabled for cloud native protection.
  features: [CloudAccountFeature!]!

  # Admin account, required for bulk upload.
  awsAdminAccount: AwsCloudAccountInput

  # Details for cloud accounts to be initiated.
  awsChildAccounts: [AwsCloudAccountInput!]!

  # Role customization options.
  awsRoleCustomization: AwsRoleCustomization
}
# Aws cloud accounts validate response.
type ValidateAndCreateAwsCloudAccountReply {
  # Error messages related to the failure of the request to create an AWS cloud account.
  validateResponse: AwsCloudAccountValidateResponse

  # AWS cloud account initiate response if the request is successful.
  initiateResponse: AwsCloudAccountCreateResponse
}
# Configuration to validate and save the customer's Azure KMS.
input ValidateAndSaveCustomerKmsInfoInput {
  # Azure KMS configuration, excluding the app secret.
  kmsSpec: KmsSpecInput

  # The secret of the client app.
  appSecret: String!
}
# Response indicating if the KMS details are valid.
type ValidateAndSaveCustomerKmsInfoReply {
  # Message describing the error in the KMS details.
  errorMessage: String!

  # The input field used to display the error message.
  inputFieldName: String!
}
# Describes whether the RDS cluster name is valid for export.
type ValidateAwsNativeRdsClusterNameForExportReply {
  # Specifies whether the RDS cluster name is valid or not.
  isValid: Boolean!

  # An error, in case validation failed.
  error: String!
}
# Validate AWS RDS Instance name for export.
type ValidateAwsNativeRdsInstanceNameForExportReply {
  # Specifies whether the RDS name is valid or not.
  isValid: Boolean!

  # Refers to the reason for the RDS name being invalid.
  error: String!
}
# Input for validating Exocompute configurations for an Azure Cloud Account.
input ValidateAzureCloudAccountExocomputeConfigurationsInput {
  # Rubrik ID of the Azure Cloud Account.
  cloudAccountId: UUID!

  # List of Exocompute configurations to be validated.
  azureExocomputeRegionConfigs: [AzureExocomputeAddConfigInputType!]!
}
# Validate Azure SQL Database name for export.
type ValidateAzureNativeSqlDatabaseDbNameForExportReply {
  # Specifies whether the database name is valid or not.
  isValid: Boolean!

  # Refers to the reason for the database name being invalid.
  error: String!
}
# Validate Azure SQL Mananged Instance Database name for export.
type ValidateAzureNativeSqlManagedInstanceDbNameForExportReply {
  # Specifies whether the database name is valid or not.
  isValid: Boolean!

  # Refers to the reason for the database name being invalid.
  error: String!
}
# Response of the operation to validate Azure Cloud Account Exocompute Configurations.
type ValidateAzureSubnetsForCloudAccountExocomputeReply {
  # List of validation information on Azure Exocompute Configurations provided.
  validationInfo: [AzureExocomputeConfigValidationInfo!]!
}
# Represents a map that depicts the feasibility of file recovery on the snapshots.
type ValidateCloudNativeFileRecoveryFeasibilityReply {
  # Represents the possibility of file recovery from a snapshot.
  snapshotFileRecoveryFeasibility: [CloudNativeFileRecoveryFeasibility!]!
}
# Input required to validate the cluster license capacity.
input ValidateClusterLicenseCapacityInput {
  # The nodes that will be added.
  nodes: [NodeRegistrationConfigsInput!]!

  # Specifies whether the cluster is managed by Rubrik Security Cloud or not. When true, the cluster is managed by Rubrik Security Cloud.
  managedByRubrik: ManagedByRubrik!
}
input ValidateOracleAcoFileInput {
  # Required. Contents of the Advanced Cloning Options file in base64 encoded format.
  acoContentsBase64: String!

  # Required. Specifies UUID used to identify the cluster the request goes to.
  clusterUuid: UUID!

  # Required. Boolean that determines whether the ACO file is being used for a Live Mount.
  isLiveMount: Boolean!

  # ID of the Oracle database.
  dbId: String!

  # Optional. Specifies whether the Clone or Live Mount is being performed with a target database name that is different from the source database name.
  isDifferentTargetDbName: Boolean
}
# Supported in v6.0+
type ValidateOracleAcoFileReply {
  # Supported in v6.0+
  # List of Advanced Cloning Options (ACO) parameter values that were parsed.
  acoMap: [OracleAcoParameterDetail!]!

  # Supported in v6.0+
  # Other generic errors with the Advanced Cloning Options (ACO) parameters.
  acoParameterErrors: [String!]!

  # Supported in v6.0+
  # List of Advanced Cloning Options (ACO) errors pertaining to the specified values.
  acoValueValidationErrors: [OracleAcoValueErrorDetail!]!
}
input ValidateOracleDatabaseBackupsInput {
  # Required. Configuration parameters for a job to validate an Oracle backups.
  config: OracleValidateConfigInput!

  # Required. ID of the database to be validated.
  id: String!
}
# Input required for tenant organization name validation.
input ValidateOrgNameInput {
  # Full name of the organization.
  fullName: String!

  # Name of the organization.
  name: String
}
# Reply for organization name validation.
type ValidateOrgNameReply {
  # Name of the organization.
  name: String!

  # Url of the organization.
  url: String!

  # Validity of the organization name.
  nameValidity: NameValidity!
}
interface Value {
  serializedValue: String!
}
type ValueBoolean implements Value {
  value: Boolean
  serializedValue: String!
}
type ValueDateTime implements Value {
  value: DateTime
  serializedValue: String!
}
type ValueFloat implements Value {
  value: Float
  serializedValue: String!
}
type ValueInteger implements Value {
  value: Int
  serializedValue: String!
}
type ValueLong implements Value {
  value: Long
  serializedValue: String!
}
type ValueNull implements Value {
  serializedValue: String!
}
type ValueString implements Value {
  value: String
  serializedValue: String!
}
# Vcd vApp related app metadata for a snapshot.
type VappAppMetadata {
  # Snapshot ID of this virtual machine.
  snapshotId: UUID!

  # Moid of this virtual machine assigned by vCD.
  vcdVmMoid: String!

  # Name of this virtual machine.
  vmName: String!

  # Network connections of this virtual machine.
  networkConnections: [VmNetworkConnection!]!
}
# Supported in v5.0+
input VappInstantRecoveryJobConfigInput {
  # Supported in v5.0+
  # Boolean value that indicates whether to power on the recovered virtual machines in a vApp after Instant Recovery. Use 'true' to turn the power on for the recovered virtual machines or use 'false' to leave the power off for the virtual machines.
  shouldPowerOnVmsAfterRecovery: Boolean

  # Required. Supported in v5.0+
  # An array containing the restore specification for an Instant Recovery of virtual machines in a vApp snapshot.
  vmsToRestore: [VappVmRestoreSpecInput!]!
}
# Supported in v5.0+
type VappInstantRecoveryOptions {
  # Required. Supported in v5.0+
  # An array of network connections available through the specified vApp object.
  availableVappNetworks: [VappNetworkSummary!]!

  # Required. Supported in v5.0+
  # An array of virtual machines that can be restored and their associated default network connections.
  restorableVms: [VappVmRestoreSpec!]!
}
# Supported in v5.0+
type VappNetworkSummary {
  # Required. Supported in v5.0+
  # Boolean value that indicates whether the specified vApp network object has been deployed. Value is 'true' when the vApp network object has been deployed and 'false' when it has not been deployed.
  isDeployed: Boolean!

  # Required. Supported in v5.0+
  # v5.0-v5.3: Name for the specified vApp network object.
  # v6.0+: Name of the specified vApp network object.
  name: String!

  # Supported in v5.0+
  # vCloud Director ID of the associated organization VDC network object. For an Isolated network, the value is empty.
  parentNetworkId: String
}
# Input for vApp snapshot instant recovery options.
input VappSnapshotInstantRecoveryOptionsInput {
  # Required. ID assigned to a vApp snapshot object.
  snapshotId: String!
}
# Supported in v5.1+
type VappTemplateExportOptions {
  # Required. Supported in v5.1+
  # An array of the available storage profile policies where the vApp snapshot can be exported.
  availableStoragePolicies: [VcdOrgVdcStorageProfile!]!

  # Required. Supported in v5.1+
  # The ID of the organization vDC where the vApp template can be exported.
  orgVdcId: String!
}
# Supported in v5.1+
# Provides different options available for a vApp template snapshot export. Fields that correspond to unavailable choices are skipped.
type VappTemplateExportOptionsUnion {
  # Supported in v5.1+
  # Organization VDC and storage profile choices available in case the advanced option of providing an organization vDC ID is used for export.
  advancedExportOptions: VappTemplateExportOptions

  # Supported in v5.1+
  # Organization vDC and storage profile choices available in case the target catalog is used for export.
  defaultCatalogExportOptions: VappTemplateExportOptions

  # Supported in v5.1+
  # Organization vDC and storage profile choices available in case original Organization vDC is used for export.
  originalVdcExportOptions: VappTemplateExportOptions
}
# Input for getting vApp template snapshot export options.
input VappTemplateSnapshotExportOptionsInput {
  # ID assigned to a target organization vDC object. Use the ID when exporting a vApp template snapshot to a specified organization vDC.
  orgVdcId: String

  # Required. ID of the target catalog object.
  catalogId: String!

  # Required. Name of template object to create. This is used to verify the existence of a template with the given name. Templates must have unique names.
  name: String!

  # Required. ID assigned to a vApp snapshot object.
  snapshotId: String!
}
# Supported in v5.0+
# Method used to allocate IP addresses for the specified vApp network.
enum VappVmIpAddressingMode {
  # DHCP IP addressing mode.
  VAPP_VM_IP_ADDRESSING_MODE_DHCP

  # Manual IP addressing mode.
  VAPP_VM_IP_ADDRESSING_MODE_MANUAL

  # Not specified IP addressing mode.
  VAPP_VM_IP_ADDRESSING_MODE_NONE

  # Pool IP addressing mode.
  VAPP_VM_IP_ADDRESSING_MODE_POOL
}
# Supported in v5.0+
type VappVmNetworkConnection {
  # Supported in v5.0+
  # v5.0-v5.3: IPv4 address to assign to the specified vApp network connection. Only set this value when the network address allocation method is 'Static'. Otherwise, the value should be empty.
  # v6.0+: IPv4 address to assign to the specified vApp network connection. Set this value only when the network address allocation method is 'Static'. Otherwise, the value should be empty.
  ipAddress: String

  # Required. Supported in v5.0+
  # Boolean value that indicates whether the specified vApp network connection is enabled. Set the value to 'true' to enable the connection or 'false' to disable the connection.
  isConnected: Boolean!

  # Supported in v5.0+
  # MAC address of the NIC that is used by the specified vApp network connection.
  macAddress: String

  # Required. Supported in v5.0+
  # Index assigned to the NIC that is used by the specified vApp network connection.
  nicIndex: Int!

  # Supported in v5.0+
  # v5.0-v5.3: Name of the vApp network the NIC corresponding to this connection will connect to.
  # v6.0+: Name of the vApp network to which the NIC corresponding to this connection will connect to.
  vappNetworkName: String

  # Supported in v5.3+
  # v5.3: The network adapter type of this NIC.
  # v6.0+: The network adapter type of the NIC.
  networkAdapterType: String

  # Addressing mode of the virtual machine network connection.
  addressingMode: VappVmIpAddressingMode!
}
# Supported in v5.0+
input VappVmNetworkConnectionInput {
  # Supported in v5.0+
  # v5.0-v5.3: IPv4 address to assign to the specified vApp network connection. Only set this value when the network address allocation method is 'Static'. Otherwise, the value should be empty.
  # v6.0+: IPv4 address to assign to the specified vApp network connection. Set this value only when the network address allocation method is 'Static'. Otherwise, the value should be empty.
  ipAddress: String

  # Supported in v5.0+
  # MAC address of the NIC that is used by the specified vApp network connection.
  macAddress: String

  # Supported in v5.0+
  # v5.0-v5.3: Name of the vApp network the NIC corresponding to this connection will connect to.
  # v6.0+: Name of the vApp network to which the NIC corresponding to this connection will connect to.
  vappNetworkName: String

  # Supported in v5.3+
  # v5.3: The network adapter type of this NIC.
  # v6.0+: The network adapter type of the NIC.
  networkAdapterType: String

  # Addressing mode of the virtual machine network connection.
  addressingMode: VappVmIpAddressingMode!

  # Required. Supported in v5.0+
  # Boolean value that indicates whether the specified vApp network connection is enabled. Set the value to 'true' to enable the connection or 'false' to disable the connection.
  isConnected: Boolean!

  # Required. Supported in v5.0+
  # Index assigned to the NIC that is used by the specified vApp network connection.
  nicIndex: Int!
}
# Supported in v5.0+
type VappVmRestoreSpec {
  # Required. Supported in v5.0+
  # Name of the specified vApp virtual machine within vCloud.
  name: String!

  # Required. Supported in v5.0+
  networkConnections: [VappVmNetworkConnection!]!

  # Supported in v5.0+
  # v5.0-v5.3: Storage policy where this vApp virtual machine should be restored to. If omitted, the VMs will be exported to the default storage policy of the target Organization VDC.
  # v6.0+: Storage policy where this vApp virtual machine should be restored to. If omitted, the virtual machines will be exported to the default storage policy of the target Organization VDC.
  storagePolicyId: String

  # Required. Supported in v5.0+
  # vCloud managed object ID (moid) of the specified vApp virtual machine.
  vcdMoid: String!
}
# Supported in v5.0+
input VappVmRestoreSpecInput {
  # Supported in v5.0+
  # v5.0-v5.3: Storage policy where this vApp virtual machine should be restored to. If omitted, the VMs will be exported to the default storage policy of the target Organization VDC.
  # v6.0+: Storage policy where this vApp virtual machine should be restored to. If omitted, the virtual machines will be exported to the default storage policy of the target Organization VDC.
  storagePolicyId: String

  # Required. Supported in v5.0+
  # Name of the specified vApp virtual machine within vCloud.
  name: String!

  # Required. Supported in v5.0+
  networkConnections: [VappVmNetworkConnectionInput!]!

  # Required. Supported in v5.0+
  # vCloud managed object ID (moid) of the specified vApp virtual machine.
  vcdMoid: String!
}
type Vcd implements HierarchyObject , CdmHierarchyObject , VcdTopLevelDescendantType {
  # The CDM ID of vCD instance.
  cdmId: String!

  # The CA certificates used to connect to the VCD instance.
  caCerts: String!

  # The hostname of VCD instance.
  hostname: String!

  # The username used to connect to the VCD instance.
  username: String!

  # The version of VCD instance.
  version: String!

  # The connection statuses of the vCenters that belong to the VCD.
  allVcenterConnectionsInfo: [VcdVcenterConnectionInfo!]!

  # The connection status of the vCD instance.
  vcdConnectionStatus: HostConnectionStatus

  # The connection status of the vCenter.
  allVcenterConnectionStatuses: [VcdVcenterConnectionState!]! @deprecated(reason: "Use allVcenterConnectionsInfo instead.")

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VcdDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VcdLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
interface VcdCatalogDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VcdCatalogLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VcdDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VcdDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VcdDescendantTypeConnection {
  # List of VcdDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VcdDescendantTypeEdge!]!

  # List of VcdDescendantType objects.
  nodes: [VcdDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VcdDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VcdDescendantType object. This wrapper is used for pagination.
type VcdDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VcdDescendantType object wrapped by this edge.
  node: VcdDescendantType!
}
interface VcdLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VcdLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VcdLogicalChildTypeConnection {
  # List of VcdLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VcdLogicalChildTypeEdge!]!

  # List of VcdLogicalChildType objects.
  nodes: [VcdLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VcdLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VcdLogicalChildType object. This wrapper is used for pagination.
type VcdLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VcdLogicalChildType object wrapped by this edge.
  node: VcdLogicalChildType!
}
type VcdOrg implements HierarchyObject , CdmHierarchyObject , VcdDescendantType , VcdLogicalChildType , VcdTopLevelDescendantType {
  # The CDM ID of vCD org.
  cdmId: String!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VcdOrgDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VcdOrgLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
interface VcdOrgDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VcdOrgDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VcdOrgDescendantTypeConnection {
  # List of VcdOrgDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VcdOrgDescendantTypeEdge!]!

  # List of VcdOrgDescendantType objects.
  nodes: [VcdOrgDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VcdOrgDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VcdOrgDescendantType object. This wrapper is used for pagination.
type VcdOrgDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VcdOrgDescendantType object wrapped by this edge.
  node: VcdOrgDescendantType!
}
interface VcdOrgLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VcdOrgLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VcdOrgLogicalChildTypeConnection {
  # List of VcdOrgLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VcdOrgLogicalChildTypeEdge!]!

  # List of VcdOrgLogicalChildType objects.
  nodes: [VcdOrgLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VcdOrgLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VcdOrgLogicalChildType object. This wrapper is used for pagination.
type VcdOrgLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VcdOrgLogicalChildType object wrapped by this edge.
  node: VcdOrgLogicalChildType!
}
type VcdOrgVdc implements HierarchyObject , CdmHierarchyObject , VcdDescendantType , VcdLogicalChildType , VcdOrgDescendantType , VcdOrgLogicalChildType , VcdTopLevelDescendantType {
  # The CDM ID of vCD org VDC.
  cdmId: String!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VcdOrgVdcDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VcdOrgVdcLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
interface VcdOrgVdcDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VcdOrgVdcDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VcdOrgVdcDescendantTypeConnection {
  # List of VcdOrgVdcDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VcdOrgVdcDescendantTypeEdge!]!

  # List of VcdOrgVdcDescendantType objects.
  nodes: [VcdOrgVdcDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VcdOrgVdcDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VcdOrgVdcDescendantType object. This wrapper is used for pagination.
type VcdOrgVdcDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VcdOrgVdcDescendantType object wrapped by this edge.
  node: VcdOrgVdcDescendantType!
}
interface VcdOrgVdcLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VcdOrgVdcLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VcdOrgVdcLogicalChildTypeConnection {
  # List of VcdOrgVdcLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VcdOrgVdcLogicalChildTypeEdge!]!

  # List of VcdOrgVdcLogicalChildType objects.
  nodes: [VcdOrgVdcLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VcdOrgVdcLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VcdOrgVdcLogicalChildType object. This wrapper is used for pagination.
type VcdOrgVdcLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VcdOrgVdcLogicalChildType object wrapped by this edge.
  node: VcdOrgVdcLogicalChildType!
}
# Supported in v5.0+
type VcdOrgVdcStorageProfile {
  # Required. ID assigned to the Organization vDC storage profile.
  id: String!

  # Required. Name of the Organization vDC storage profile.
  name: String!
}
interface VcdTopLevelDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
type VcdVapp implements HierarchyObject , CdmHierarchyObject , HierarchySnappable , CdmHierarchySnappableNew , VcdDescendantType , VcdOrgDescendantType , VcdOrgVdcLogicalChildType , VcdOrgVdcDescendantType , VcdCatalogLogicalChildType , VcdCatalogDescendantType , VcdTopLevelDescendantType {
  # The CDM ID of vCD vApp.
  cdmId: String!
  isRelic: Boolean!

  # Specifies whether this is a vApp template.
  isTemplate: Boolean!

  # Specifies whether the vApp is best effort synchronization Enabled.
  isBestEffortSynchronizationEnabled: Boolean!

  # Information about vCD-managed vApp child virtual machines.
  vcdVms: [VcdVmInfo!]!

  # The date when the SLA Domain was assigned or inherited.
  protectionDate: DateTime

  # Contains statistics for the protected objects, for example, capacity.
  reportWorkload: Snappable

  # List of duplicated vApps.
  duplicatedVapps: [DuplicatedVapp!]!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VcdVappLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# VCD vApp descendant.
interface VcdVappDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VcdVappLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VcdVappLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VcdVappLogicalChildTypeConnection {
  # List of VcdVappLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VcdVappLogicalChildTypeEdge!]!

  # List of VcdVappLogicalChildType objects.
  nodes: [VcdVappLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VcdVappLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VcdVappLogicalChildType object. This wrapper is used for pagination.
type VcdVappLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VcdVappLogicalChildType object wrapped by this edge.
  node: VcdVappLogicalChildType!
}
# Information about the child virtual machines that belong to the vCD vApp.
type VcdVcenterConnectionInfo {
  # Name of the vCenter.
  name: String!

  # The connection status of the vCenter.
  connectionStatus: HostConnectivityStatusEnum!

  # FID of the vCenter.
  vcenterId: UUID!
}
# The connection state of vCenters that belong to the vCD.
type VcdVcenterConnectionState {
  # FID of the vCenter.
  vcenterId: UUID!

  # The connection status of the vCenter.
  status: RefreshableObjectConnectionStatus!
}
type VcdVimServer implements HierarchyObject , CdmHierarchyObject , VcdDescendantType , VcdLogicalChildType , VcdTopLevelDescendantType {
  cdmId: String!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Information about the child virtual machines that belong to the vCD vApp.
type VcdVmInfo {
  # The vCD managed object ID of a child virtual machine of the vApp.
  vcdVmMoid: String!

  # Name of the virtual machine.
  vcdVmName: String!

  # Specifies whether the virtual machine is excluded from the snapshot.
  isExcludedFromSnapshot: Boolean!
}
# Reply Object for PreviewFilter.
type VcenterAdvancedTagPreviewReply {
  output: FilterPreviewResultListResponse
}
# Input for getting the async status of Vcenter request.
input VcenterAsyncRequestStatusInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. ID of the request.
  id: String!
}
enum VcenterConfigConflictResolutionAuthz {
  VCENTER_CONFIG_CONFLICT_RESOLUTION_AUTHZ_ALLOW_AUTO_CONFLICT_RESOLUTION
  VCENTER_CONFIG_CONFLICT_RESOLUTION_AUTHZ_NO_CONFLICT_RESOLUTION
}
# Supported in v5.0+
input VcenterConfigInput {
  # Supported in v5.0+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String

  # Supported in v6.0+
  # Select compute clusters that must be visible to this Rubrik cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If 'hostGroupFilter' is specified for a compute cluster, only virtual machinesthat currently reside on these hosts are visible. For the stretched cluster configuration (vMSC), specify the appropriate host groups.
  computeVisibilityFilter: [ClusterVisibilityConfigInput!] = []

  # Supported in v7.0+
  # A Boolean value that determines whether to enable HotAdd transport mode for On-Premise vCenter. When this value is `true`, VMware virtual machines can use HotAdd proxy to transport virtual disk data in addition to NBD(SSL). When this value is `false`, VMware virtual machines can ONLY use NBD(SSL) to transport virtual disk data. Default value is `false`.
  shouldEnableHotAddProxyForOnPrem: Boolean

  # Supported in v5.0+
  # Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
  conflictResolutionAuthz: VcenterConfigConflictResolutionAuthz

  # Required. Supported in v5.0+
  hostname: String!

  # Required. Supported in v5.0+
  password: String!

  # Required. Supported in v5.0+
  username: String!
}
enum VcenterConfigV2ConflictResolutionAuthz {
  VCENTER_CONFIG_V2_CONFLICT_RESOLUTION_AUTHZ_ALLOW_AUTO_CONFLICT_RESOLUTION
  VCENTER_CONFIG_V2_CONFLICT_RESOLUTION_AUTHZ_NO_CONFLICT_RESOLUTION
}
# Supported in v5.3+
input VcenterConfigV2Input {
  # Supported in v5.3+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String

  # Supported in v6.0+
  # Select compute clusters that must be visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If 'hostGroupFilter' is specified for a compute cluster, only virtual machines that currently reside on these hosts are visible. For the stretched cluster configuration (vMSC), specify the appropriate host groups.
  computeVisibilityFilter: [ClusterVisibilityConfigInput!] = []

  # Supported in v7.0+
  # A Boolean value that determines whether to enable HotAdd transport mode for On-Premise vCenter. When this value is `true`, VMware virtual machines can use HotAdd proxy to transport virtual disk data in addition to NBD(SSL). When this value is `false`, VMware virtual machines can ONLY usee NBD(SSL) to transport virtual disk data. Default value is `false`.
  shouldEnableHotAddProxyForOnPrem: Boolean

  # Supported in v8.1+
  # The managed ID of the organization network to which the vCenter Server is assigned.
  orgNetworkId: String

  # Supported in v5.3+
  # Set to 'AllowAutoConflictResolution' to link the relic virtual machine objects of a virtual machine to the current object for the virtual machine or to 'NoConflictResolution' to prevent linking. The Rubrik cluster generates a unique ID for each virtual machine when a vCenter Server is added. When a virtual machine changes to another vCenter Server or unregisters and registers with the same vCenter Server, a new unique ID is generated for that virtual machine. When this happens, the virtual machine object associated with the original ID becomes a relic. This option links relic virtual machine objects with the current virtual machine object of a specific virtual machine, and makes the collective snapshot history available through the current object. Default value is 'NoConflictResolution'.
  conflictResolutionAuthz: VcenterConfigV2ConflictResolutionAuthz

  # Required. Supported in v5.3+
  # The hostname of the new vCenter.
  hostname: String!

  # Required. Supported in v5.3+
  # The password of the new vCenter.
  password: String!

  # Required. Supported in v5.3+
  # The username of the new vCenter.
  username: String!
}
# Supported in v6.0+
input VcenterConnectionConfigInput {
  # Supported in v6.0+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----.
  caCerts: String

  # Required. Supported in v6.0+
  # Hostname of the new vCenter.
  hostname: String!

  # Required. Supported in v6.0+
  # Password for the new vCenter.
  password: String!

  # Required. Supported in v6.0+
  # Username of the new vCenter.
  username: String!
}
# Vcenter HotAdd Proxy VMs.
type VcenterHotAddProxyVmInfo {
  # Details of all proxy VMs in cluster.
  proxyVmInfo: HotAddProxyVmInfoListResponse!

  # Details of a cluster.
  cluster: Cluster!
}
# Supported in v5.0+
type VcenterPatch {
  # Supported in v5.0+
  # Concatenated X.509 certificates in Base64 encoded DER format. Each certificate must start with -----BEGIN CERTIFICATE----- and end with -----END CERTIFICATE-----. Use an empty string to remove the existing certificates for the vCenter.
  caCerts: String

  # Supported in v5.0+
  # ID of the SLA Domain that is configured for this vCenter Server.
  configuredSlaDomainId: String
}
# Supported in v6.0+
input VcenterPreAddConfigInput {
  # Supported in v6.0+
  # IP address and account credentials of the vCenter server that is being added. Specify this if the vCenter is not added to Rubrik cluster.
  connectionConfig: VcenterConnectionConfigInput

  # Supported in v6.0+
  # Id of the vCenter. Specify this if the vCenter is already added to the Rubrik cluster.
  id: String
}
# Supported in v6.0+
type VcenterPreAddInfo {
  # Required. Supported in v6.0+
  # List of compute clusters present in the vCenter, including the host groups each cluster contains.
  clusterHostGroupInfo: [ClusterHostGroupInfo!]!
}
# Supported in v5.0+
type VcenterSummary {
  # Supported in v5.0+
  # Optional field containing Polaris managed id of the configured SLA domain if it is Polaris managed.
  configuredSlaDomainPolarisManagedId: String

  # Required. Supported in v5.0+
  hostname: String!

  # Required. Supported in v5.0+
  username: String!

  # Supported in v5.1+
  # Connection status of a vCenter.
  connectionStatus: RefreshableObjectConnectionStatus

  # Supported in v5.1+
  # A Boolean value that specifies whether Rubrik IO filters are installed on any compute clusters in the vCenter. When this value is 'true,' Rubrik IO filters are present on at least one compute cluster in the vCenter. When this value is 'false,' no Rubrik IO filters are present on any compute clusters in the vCenter.
  isIoFilterInstalled: Boolean

  # Supported in v5.1+
  # Optional field containing the last time that a vcenter was refreshed (either lite or full).
  lastRefreshTime: DateTime

  # Supported in v5.1+
  # Version of vCenter.
  version: String

  # Supported in v5.3+
  # Indicates if the vCenter is a VMC instance.
  isVmc: Boolean

  # Supported in v7.0+
  # An optional field that specifies whether HotAdd transport mode is enabled for On-Premise vCenter. When this value is `true`, HotAdd transport mode is enabled for this vCenter. When this value is `false`, HotAdd transport mode is disabled for this vCenter. When this value is not specified, it indicates that this is an VMC vCenter.
  isHotAddProxyEnabledForOnPremVcenter: Boolean

  # Supported in v8.0, v9.0+
  # v8.0: An optional field that identifies the vCenter Server with a unique identifier.
  # v9.0+: An optional field that identifies the vCenter Server with a unique identifier.
  vcenterUuid: String
  slaAssignable: SlaAssignable
  vcenterPatch: VcenterPatch
  conflictResolutionAuthz: VcenterSummaryConflictResolutionAuthz

  # Supported in v6.0+
  # Compute clusters that are visible to this Rubrik Cluster. All other compute resources are hidden. If 'computeVisibilityFilter' is not specified, all resources are visible. If 'hostGroupFilter' is not specified for a compute cluster, all compute resources in the compute cluster are visible. If a 'hostGroupFilter' is specified for a compute cluster, only vms that currently reside on these hosts are visible.
  computeVisibilityFilter: [ClusterVisibilityInfo!]!
}
enum VcenterSummaryConflictResolutionAuthz {
  VCENTER_SUMMARY_CONFLICT_RESOLUTION_AUTHZ_ALLOW_AUTO_CONFLICT_RESOLUTION
  VCENTER_SUMMARY_CONFLICT_RESOLUTION_AUTHZ_NO_CONFLICT_RESOLUTION
}
# Response verifying if the cluster is replication target in a SLA Domain.
type VerifySlaWithReplicationToClusterResponse {
  # Specifies whether SLA domain is active or not.
  isActiveSla: Boolean!
}
# Supported in m3.2.0-m4.2.0
# Mosaic management object version.
input VersionInput {
  # Supported in m3.2.0-m4.2.0
  # Limit number of entries.
  maxEntries: Int

  # Supported in m3.2.0-m4.2.0
  # Since the given timestamp.
  since: Int

  # Supported in m3.2.0-m4.2.0
  # Upto the given timestamp.
  upto: Int

  # Supported in m4.1.0-m4.2.0
  # Source type.
  sourceType: VersionSourceType

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the database.
  databaseName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the source.
  sourceName: String!

  # Required. Supported in m3.2.0-m4.2.0
  # Name of the table.
  tableName: String!
}
enum VersionSourceType {
  # Specifies that the version source type is Cassandra.
  VERSION_SOURCE_TYPE_CASSANDRA

  # Specifies that the version source type is MongoDB.
  VERSION_SOURCE_TYPE_MONGO
}
# Cluster version status.
enum VersionStatus {
  # Cluster version is stable.
  STABLE

  # Cluster version is unknown.
  UNKNOWN

  # Cluster upgrade is recommended.
  UPGRADE_RECOMMENDED
}
type VersionedFile {
  filename: String!
  path: String!
  absolutePath: String!
  displayPath: String!
  fileVersions: [HierarchySnappableFileVersion!]!
}
# Paginated list of VersionedFile objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VersionedFileConnection {
  # List of VersionedFile objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VersionedFileEdge!]!

  # List of VersionedFile objects.
  nodes: [VersionedFile!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VersionedFile objects matching the request arguments.
  count: Int!
}
# Wrapper around the VersionedFile object. This wrapper is used for pagination.
type VersionedFileEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VersionedFile object wrapped by this edge.
  node: VersionedFile!
}
# Virtual Machine file info.
type VirtualMachineFileInfo {
  # Required. Supported in v9.0+
  # The file name.
  fileName: String!

  # Required. Supported in v9.0+
  # The file size, in bytes.
  sizeInBytes: Long!

  # Virtual Machine file type.
  fileType: VirtualMachineFileType!
}
# Supported in v9.0+
# VMware virtual machine file type.
enum VirtualMachineFileType {
  # Virtual Machine file type.
  VIRTUAL_MACHINE_FILE_TYPE_FILE

  # Virtual Machine non-volatile memory file type.
  VIRTUAL_MACHINE_FILE_TYPE_NON_VOLATILE_MEMORY_FILE

  # Virtual Machine virtual disk file type.
  VIRTUAL_MACHINE_FILE_TYPE_VIRTUAL_DISK
}
# Input for getting all Virtual Machine files.
input VirtualMachineFilesInput {
  # Required. ID of the snapshot.
  id: String!
}
# List of Virtual Machine file info.
type VirtualMachineFilesReply {
  # Supported in v9.0+
  # List of matching objects.
  data: [VirtualMachineFileInfo!]!

  # Supported in v9.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v9.0+
  # Total list responses.
  total: Int

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Supported in v5.0+
type VirtualMachineScriptDetail {
  # Required. Supported in v5.0+
  # The command to be run in VM guest OS.
  scriptPath: String!

  # Required. Supported in v5.0+
  # Time (in ms) after which the script will be terminated if it has not completed.
  timeoutMs: Long!
  failureHandling: VirtualMachineScriptDetailFailureHandling!
}
enum VirtualMachineScriptDetailFailureHandling {
  VIRTUAL_MACHINE_SCRIPT_DETAIL_FAILURE_HANDLING_ABORT
  VIRTUAL_MACHINE_SCRIPT_DETAIL_FAILURE_HANDLING_CONTINUE
}
# Supported in v5.0+
input VirtualMachineScriptDetailInput {
  # Required. Supported in v5.0+
  # Action to take if the script returns an error or times out.
  failureHandling: VirtualMachineScriptDetailFailureHandling!

  # Required. Supported in v5.0+
  # The command to be run in VM guest OS.
  scriptPath: String!

  # Required. Supported in v5.0+
  # Time (in ms) after which the script will be terminated if it has not completed.
  timeoutMs: Long!
}
# Supported in v5.0+
type VirtualMachineSummary {
  # Supported in v5.0+
  clusterName: String

  # Required. Supported in v5.0+
  # Brief info of all the objects in the folder path to this VM.
  folderPath: [VmPathPoint!]!

  # Required. Supported in v5.0+
  # Status of authentication with a specific virtual machine using guest credentials. Possible values are: SUCCESSFUL, PENDING, or FAILED.
  guestCredentialAuthorizationStatus: String!

  # Supported in v5.0+
  guestOsName: String

  # Supported in v5.0+
  hostId: String

  # Supported in v5.0+
  hostName: String

  # Required. Supported in v5.0+
  # Brief info of all the objects in the infrastructure path to this VM.
  infraPath: [VmPathPoint!]!

  # Required. Supported in v5.0+
  ipAddress: String!

  # Required. Supported in v5.0+
  isRelic: Boolean!

  # Required. Supported in v5.0+
  isReplicationEnabled: Boolean!

  # Required. Supported in v5.0+
  moid: String!

  # Supported in v5.0+
  # Configuration information for the vApp that manages a specified virtual machine.
  parentAppInfo: ParentAppInfo

  # Supported in v5.0+
  # The power status of VM(ON,OFF,SLEEP etc.).
  powerStatus: String

  # Supported in v5.0+
  protectionDate: DateTime

  # Supported in v5.0+
  toolsInstalled: Boolean

  # Supported in v5.0+
  vcenterId: String

  # Required. Supported in v5.0+
  vmwareToolsInstalled: Boolean!

  # Supported in v8.0+
  instanceUuid: String
  snappable: CdmWorkload
  snapshotConsistencyMandate: VirtualMachineSummarySnapshotConsistencyMandate!
  templateType: VirtualMachineTemplateType

  # Supported in v5.0+
  # The status of the Rubrik Backup Service agent for virtual machines.
  agentStatus: CdmAgentStatus

  # Supported in v5.0+
  # Cloud instantiation specification for the selected virtual machine.
  cloudInstantiationSpec: CloudInstantiationSpec

  # Supported in v7.0+
  advancedSummary: AdvancedVirtualMachineSummary
}
enum VirtualMachineSummarySnapshotConsistencyMandate {
  VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_APP_CONSISTENT
  VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_CRASH_CONSISTENT
  VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_FILE_SYSTEM_CONSISTENT
  VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_INCONSISTENT
  VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_UNKNOWN
  VIRTUAL_MACHINE_SUMMARY_SNAPSHOT_CONSISTENCY_MANDATE_VSS_CONSISTENT
}
# Supported in v9.1+
# Virtual machine template type.
enum VirtualMachineTemplateType {
  VIRTUAL_MACHINE_TEMPLATE_TYPE_LIBRARY_ITEM
  VIRTUAL_MACHINE_TEMPLATE_TYPE_TEMPLATE
  VIRTUAL_MACHINE_TEMPLATE_TYPE_UNDEFINED
  VIRTUAL_MACHINE_TEMPLATE_TYPE_VM
}
# Supported in v5.0+
input VirtualMachineUpdateInput {
  # Supported in v5.0+
  # Cloud instantiation specification for the selected virtual machine.
  cloudInstantiationSpec: CloudInstantiationSpecInput

  # Supported in v5.0+
  # v5.0-v5.1: Assign this VM to the given SLA domain.
  # v5.2+: Assign this VM to the given SLA domain. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # User setting to dictate whether to use storage array snaphots for ingest. This setting only makes sense for VMs where array based ingest is possible.
  isArrayIntegrationEnabled: Boolean

  # Supported in v5.0+
  # Whether to pause or resume backups/archival for this VM.
  isVmPaused: Boolean

  # Supported in v5.0+
  maxNestedVsphereSnapshots: Int

  # Supported in v5.0+
  postBackupScript: VirtualMachineScriptDetailInput

  # Supported in v5.0+
  postSnapScript: VirtualMachineScriptDetailInput

  # Supported in v5.0+
  preBackupScript: VirtualMachineScriptDetailInput

  # Supported in v5.0+
  throttlingSettings: VmwareAdaptiveThrottlingSettingsInput

  # Supported in v5.0+
  # Consistency level mandated for this VM or empty string for none.
  snapshotConsistencyMandate: VirtualMachineUpdateSnapshotConsistencyMandate
}
enum VirtualMachineUpdateSnapshotConsistencyMandate {
  VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_APP_CONSISTENT
  VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_CRASH_CONSISTENT
  VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_FILE_SYSTEM_CONSISTENT
  VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_INCONSISTENT
  VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_UNKNOWN
  VIRTUAL_MACHINE_UPDATE_SNAPSHOT_CONSISTENCY_MANDATE_VSS_CONSISTENT
}
# Supported in v5.0+
input VirtualMachineUpdateWithSecretInput {
  # Supported in v5.0+
  guestCredential: BaseGuestCredentialInput

  # Supported in v5.0+
  # A boolean value that specifies whether an update also refreshes the in-memory cache. When 'false' updates do not refresh the in-memory cache. When 'true' updates refresh the in-memory cache. By default, this value is 'true'. Setting this value to 'false' reduces the time required for updates to complete.
  shouldRefreshCacheAfterUpdate: Boolean

  # Supported in v7.0+
  # ID of the guest OS credential to be used for authentication to the virtual machine guest OS. When this ID is specified, the 'guestCredential' field will be ignored.
  guestCredentialId: String
  virtualMachineUpdate: VirtualMachineUpdateInput
}
# Supported in v5.0+
type VlanConfig {
  # Required. Supported in v5.0+
  # Network interfaces for each node.
  interfaces: [NodeIp!]!

  # Required. Supported in v5.0+
  # Netmask for addresses on this VLAN.
  netmask: String!

  # Required. Supported in v5.0+
  vlan: Int!
}
# Supported in v5.0+
input VlanConfigInput {
  # Required. Supported in v5.0+
  # Network interfaces for each node.
  interfaces: [NodeIpInput!]!

  # Required. Supported in v5.0+
  # Netmask for addresses on this VLAN.
  netmask: String!

  # Required. Supported in v5.0+
  vlan: Int!
}
# Supported in v5.0+
type VlanConfigListResponse {
  # Supported in v5.0+
  # List of matching objects.
  data: [VlanConfig!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Details of VLAN IP.
input VlanIpInput {
  # IP for the VLAN interface.
  ip: String!

  # VLAN ID for the node.
  vlan: Int!
}
# Vm Application Consistency Specs Info
type VmAppConsistentSpecsInternal {
  # Path for the script to be run before taking snapshot.
  preSnapshotScriptPath: String!

  # Timeout value in seconds for the pre snapshot script.
  preScriptTimeoutInSeconds: Int!

  # Path for the script to be run after taking snapshot.
  postSnapshotScriptPath: String!

  # Pre-snapshot script timeout in seconds.
  postScriptTimeoutInSeconds: Int!

  # Specifies whether to cancel backup if the pre-snapshot script fails.
  cancelBackupIfPreScriptFails: Boolean!

  # Rubrik Backup Service status.
  rbaStatus: CloudNativeRbaStatusType!
}
# Details of the virtual machine to be used as the download location.
input VmDownloadLocationDetailsInput {
  # The Rubrik ID of the virtual machine.
  id: String!

  # The path where the files will be downloaded on the target virtual machine. When downloading to the source virtual machine, this field must be empty to recover to the original path.
  pathToRecover: String
}
# Input for getting NAS Cloud Direct virtual machine image download URL.
input VmImageUrlInput {
  # NAS Cloud Direct site UUID to get virtual machine image from.
  clusterUuid: UUID!

  # Type of hypervisor.
  hypervisorType: NcdHypervisorType!
}
# Vapp virtual machine IP addressing mode.
enum VmNetworkAddressingMode {
  # DHCP mode.
  VAPP_VM_IP_ADDRESSING_MODE_DHCP

  # Manual mode.
  VAPP_VM_IP_ADDRESSING_MODE_MANUAL

  # None configured.
  VAPP_VM_IP_ADDRESSING_MODE_NONE

  # Pool mode.
  VAPP_VM_IP_ADDRESSING_MODE_POOL
}
# Network connection info for virtual machine.
type VmNetworkConnection {
  # Network index.
  nicIndex: Int!

  # MAC address.
  macAddress: String

  # Specifies whether the network is connected or not.
  isConnected: Boolean!

  # Network name.
  networkName: String

  # Ip addressing mode.
  ipAddressingMode: VmNetworkAddressingMode!

  # Adapter type.
  adapterType: String
}
# Supported in v5.0+
type VmPathPoint {
  # Required. Supported in v5.0+
  # ID of the object.
  id: String!

  # Required. Supported in v5.0+
  # (Deprecated) - See **id**.
  managedId: String!

  # Required. Supported in v5.0+
  # Name of the object.
  name: String!
}
# Virtual machine power status.
enum VmPowerStatus {
  # Virtual machine is powered off.
  POWERED_OFF

  # Virtual machine is powered on.
  POWERED_ON

  # Virtual machine is suspended.
  SUSPENDED
}
# Child VM recovery jobs info for a recovery.
type VmRecoveryJobInfo {
  # ID of virtual machine.
  vmId: String!

  # Name of virtual machine.
  vmName: String!

  # Size of virtual machine in Kbs.
  vmSizeInKbs: Long!

  # The status of recovery job.
  jobStatus: String!

  # The ID of recovery job.
  cdmRecoveryJobId: String!
}
# Supported in v5.0+
input VmRestorePathPairInput {
  restorePathPair: RestorePathPairInput
}
# Type of VM, standard or dense.
enum VmType {
  # Dense Node.
  DENSE

  # Standard Node.
  STANDARD
}
# Supported in v5.0+
input VmwareAdaptiveThrottlingSettingsInput {
  # Supported in v5.0+
  # Threshold virtual machine CPU utilization value that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value as a percentage.
  cpuUtilizationThreshold: Int

  # Supported in v5.0+
  # Threshold datastore latency value, measured across all datastores, that determines whether to postpone a scheduled snapshot of a vSphere virtual machine. Specify the threshold value in milliseconds (ms).
  datastoreIoLatencyThreshold: Int

  # Supported in v5.0+
  # Threshold virtual machine latency value that determines whether to postpone a scheduled snapshot of the vSphere virtual machine. Specify the threshold value in milliseconds (ms).
  ioLatencyThreshold: Int
}
# Vmware app metadata for a snapshot.
type VmwareAppMetadata {
  # The VM configuration.
  vmConfig: VmwareSnapshotVmConfig
}
# Supported in v5.1+
type VmwareCdpLiveInfo {
  # Supported in v5.1+
  # The time on this node. Computed after computing the live CDP info for the virtual machine.
  currentTime: DateTime

  # Supported in v5.1+
  # The latest time to which this virtual machine can be recovered locally.
  localRecoveryPoint: DateTime

  # Supported in v5.1+
  # The latest time to which this virtual machine can be recovered on a remote cluster.
  remoteRecoveryPoint: DateTime

  # Required. Supported in v5.1+
  # The ID of the virtual machine that we are getting CDP live fields for.
  vmId: String!
}
# Supported in v5.3+
type VmwareCdpStateInfo {
  # Supported in v5.3+
  # The percentage of healthy time over all CDP-enabled time over the last 24 hours. Range from 0.0 to 100.0 .
  healthPercentage: Float

  # Required. Supported in v5.3+
  # The ID of the virtual machine for which the cluster is retrieving CDP state information.
  vmId: String!
  localStatus: CdpLocalStatus
  replicationStatus: CdpReplicationStatus
}
# Supported in v5.3+
type VmwareDatastoreFreespaceThreshold {
  # Required. Supported in v5.3+
  threshold: Float!

  # Supported in v5.3+
  vmId: String
}
# Supported in v5.3+
input VmwareDatastoreFreespaceThresholdInput {
  # Supported in v5.3+
  vmId: String

  # Required. Supported in v5.3+
  threshold: Float!
}
# Supported in v9.0+
# VMware network device key and the network name.
input VmwareDeviceKeywithNetworkNameV2Input {
  # Required. Supported in v9.0+
  # VMware network device key.
  deviceKey: Int!

  # Required. Supported in v9.0+
  # Name of the network.
  networkName: String!
}
input VmwareDownloadSnapshotFromLocationInput {
  # Additional configuration for the snapshot download operation.
  downloadConfig: VmwareSnapshotDownloadRequestInput

  # Required. ID of the replication or archival location.
  locationId: String!

  # Required. ID of a snapshot.
  snapshotId: String!
}
# VMware folder type.
enum VmwareFolderType {
  # Datacenter folder.
  DATACENTER

  # Host folder.
  HOST

  # Undefined folder.
  UNDEFINED

  # VM folder.
  VM
}
# Supported in v5.0+
type VmwareHostDetail {
  # Supported in v5.0+
  computeClusterId: String

  # Supported in v5.0+
  moid: String

  # Supported in v5.0+
  virtualMachines: [VirtualMachineSummary!]!
  vmwareHostSummary: VmwareHostSummary
  vmwareHostUpdate: VmwareHostUpdate

  # Supported in v5.0+
  datacenter: DataCenterSummary

  # Supported in v5.0+
  datastores: [DataStoreSummary!]!
}
# Supported in v5.0+
type VmwareHostSummary {
  # Supported in v5.0+
  computeClusterId: String

  # Supported in v5.0+
  datacenterId: String

  # Supported in v5.0
  effectiveSlaDomainId: String

  # Supported in v5.0
  effectiveSlaDomainName: String

  # Supported in v5.0
  # Optional field containing Polaris managed id of the effective SLA domain if it is Polaris managed.
  effectiveSlaDomainPolarisManagedId: String

  # Supported in v5.0
  # ID of the object from which the effective SLA domain is inherited
  effectiveSlaSourceObjectId: String

  # Supported in v5.0
  # Name of the object from which the effective SLA domain is inherited
  effectiveSlaSourceObjectName: String

  # Supported in v5.1+
  # API Version of the ESXi Host.
  esxiVersion: String

  # Supported in v5.3+
  isInVmc: Boolean
  slaAssignable: SlaAssignable
  ioFilterStatus: HostFilterStatus
  ioFilterUiStatus: HostUiFilterStatus

  # Supported in v5.0+
  datastores: [DataStoreSummary!]!
  effectiveSlaHolder: EffectiveSlaHolder
}
# Supported in v5.0+
type VmwareHostUpdate {
  # Supported in v5.0+
  # v5.0-v5.1: ID of the SLA Domain that is configured for this ESXi hypervisor.
  # v5.2-v5.3: ID of the SLA Domain that is configured for this ESXi hypervisor. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  # v6.0+: ID of the SLA Domain that is configured for this ESXi hypervisor. Existing snapshots of the object will be retained with the configuration of specified SLA Domain.
  configuredSlaDomainId: String
}
# VM Network configuration.
type VmwareNetworkConfig {
  # The list of network adaptors.
  nics: [VmwareNetworkDeviceInfo!]!
}
# Vmware Network Device Info.
type VmwareNetworkDeviceInfo {
  # The key of the device.
  key: Int!

  # The name of the device.
  name: String!
}
# Supported in v6.0+
input VmwareNetworkDeviceInfoV2Input {
  # Required. Supported in v6.0+
  # Device key of the network adapter.
  key: Int!

  # Required. Supported in v6.0+
  # Name of the network adapter.
  name: String!
}
# Supported in v6.0+
input VmwareNetworkInfoV2Input {
  # Required. Supported in v6.0+
  # MOID of the VMware network.
  moid: String!

  # Required. Supported in v6.0+
  # Name of the VMware network.
  name: String!
}
# Supported in v5.1+
type VmwareRecoverableRange {
  # Supported in v5.1+
  beginTime: DateTime

  # Supported in v5.1+
  endTime: DateTime
}
# Supported in v7.0+
input VmwareSnapshotDownloadRequestInput {
  # Supported in v7.0+
  # ID of the SLA Domain to manage retention of the downloaded snapshot.
  slaId: String
}
# VM configuration for a snapshot.
type VmwareSnapshotVmConfig {
  # The network configuration.
  networkConfig: VmwareNetworkConfig!
}
# Supported in Rubrik CDM version 9.0 and later. The VMware disk device key and the storage location ID it belongs to.
input VmwareStorageIdWithDeviceKeyV2Input {
  # Supported in Rubrik CDM version 9.0 and later. ID of the datastore or datastore cluster.
  storageLocationId: String

  # Required. Supported in Rubrik CDM version 9.0 and later. The VMware disk device key.
  deviceKey: Int!
}
# VMware virtual machine template type.
enum VmwareTemplateType {
  # Temporarily deployed virtual machine from a content library item.
  DEPLOYED_VM

  # Content library virtual machine template item.
  LIBRARY_ITEM

  # Virtual machine template.
  TEMPLATE

  # Temporary virtual machine converted from a template.
  TEMPORARY_VM

  # Undefined virtual machine template type.
  UNDEFINED

  # Virtual machine.
  VM
}
type VmwareVmConfig {
  logRetentionSeconds: Long!
}
input VmwareVmConfigInput {
  logRetentionSeconds: Long = 0
}
# Supported in v5.0+
type VmwareVmMountSummaryV1 {
  # Supported in v5.0+
  # An integer value that identifies how many disks are attached.
  attachingDiskCount: Int

  # Supported in v5.0+
  # This boolean value determines whether or not the mount is created as a datastore only. When 'true,' the mount is created with datastore and not the associated virtual machine. When 'false,' the mount is created with both the datastore and the associated virtual machine.
  createDatastoreOnlyMount: Boolean

  # Supported in v5.0+
  # The name of the datastore that contains the mounted VMDK.
  datastoreName: String

  # Supported in v5.0+
  # A boolean value that specifies whether the datastore is ready. When 'true,' the datastore is ready. When 'false,' the datastore is not ready.
  datastoreReady: Boolean

  # Supported in v5.0+
  # A Boolean value that determines whether this job is an attaching disk mount job. When 'true,' this is an attaching disk mount job. When 'false,' this is not an attaching disk mount job.
  hasAttachingDisk: Boolean

  # Supported in v5.0+
  hostId: String

  # Required. Supported in v5.0+
  id: String!

  # Required. Supported in v5.0+
  isReady: Boolean!

  # Supported in v5.0+
  mountRequestId: String

  # Supported in v5.0+
  # Gives the timestamp at which the mount was created.
  mountTimestamp: DateTime

  # Supported in v5.0+
  mountedVmId: String

  # Required. Supported in v5.0+
  snapshotDate: DateTime

  # Supported in v5.0+
  unmountRequestId: String

  # Required. Supported in v5.0+
  vmId: String!
}
# Network interface for a virtual machine.
type VmwareVmNetworkInterface {
  # MAC address for the network interface.
  macAddress: String

  # List of IPv4 addresses for the network interface.
  v4Addresses: [String!]!

  # List of IPv6 addresses for the network interface.
  v6Addresses: [String!]!
}
# Supported in v5.3+
type VmwareVmRecoverableRanges {
  # Required. Supported in v5.3+
  # The recoverable ranges for the virtual machine.
  recoverableRanges: [VmwareRecoverableRange!]!

  # Required. Supported in v5.3+
  # The ID of the virtual machine for which to retrieve recoverable ranges.
  vmId: String!
}
# Vsphere virtual machine resource specification.
type VmwareVmResourceSpec {
  # List of network interfaces for the virtual machine.
  networkInterfaces: [VmwareVmNetworkInterface!]!
}
# A virtual disk captured in a VMware virtual machine snapshot.
type VmwareVmSubObject {
  # VMware virtual disk device key.
  deviceKey: Int!

  # Mount point for the volume.
  filename: String!

  # File size of the virtual disk in bytes.
  fileSizeInBytes: Long!

  # ID of the virtual disk.
  virtualDiskId: UUID

  # The datastore that holds the virtual disk.
  currentDatastoreId: UUID
}
# Supported in v6.0+
input VmwareVnicBindingInfoV2Input {
  # Required. Supported in v6.0+
  # Information about the backing network.
  backingNetworkInfo: VmwareNetworkInfoV2Input!

  # Required. Supported in v6.0+
  # Information about the network device.
  networkDeviceInfo: VmwareNetworkDeviceInfoV2Input!
}
type Vnet {
  id: String!
  name: String!
  regionName: String!
  resourceGroup: ResourceGroup
}
# Paginated list of Vnet objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VnetConnection {
  # List of Vnet objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VnetEdge!]!

  # List of Vnet objects.
  nodes: [Vnet!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Vnet objects matching the request arguments.
  count: Int!
}
# Wrapper around the Vnet object. This wrapper is used for pagination.
type VnetEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Vnet object wrapped by this edge.
  node: Vnet!
}
# No value is returned.
scalar Void
# Supported in v5.0+
input VolumeGroupDownloadFilesJobConfigInput {
  # Supported in v5.2+
  # v5.2-v7.0: An optional argument containing a Boolean parameter to depict if the download is being triggered for Legal Hold use case.
  # v8.0+: Optional Boolean argument indicating if the download is being triggered due to a Legal Hold.
  legalHoldDownloadConfig: LegalHoldDownloadConfigInput

  # Required. Supported in v5.0+
  # v5.0-v7.0: An array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
  # v8.0+: Array containing the full source path of each file and folder that is part of the download job. The array must contain at least one path.
  paths: [String!]!
}
# Volume group live mount.
type VolumeGroupLiveMount {
  # Name of the live mount.
  name: String!

  # Id of the source volume group in the live mount.
  sourceVolumeGroupId: String!

  # Id of the target host.
  targetHostId: String

  # Name of the target host.
  targetHostName: String

  # Timestamp when the mount was created.
  mountTimestamp: DateTime

  # Id of the mount request.
  mountRequestId: String

  # Id of the unmount request.
  unmountRequestId: String

  # Name of SMB share.
  smbShareName: String

  # Path of the bare-metal restore script.
  restoreScriptPath: String

  # Describes if the live mount is ready.
  isReady: Boolean!

  # Mounted volumes in the live mount.
  mountedVolumes: [MountedVolume!]!

  # Path where the live mount is mounted.
  mountPath: String

  # IP of the node in the live mount.
  nodeIp: String

  # Composite Id of the node in the live mount.
  nodeCompositeId: String

  # Source host of the live mount.
  sourceHost: PhysicalHost!

  # Fid of the live mount.
  id: String!

  # Source snapshot of the live mount.
  sourceSnapshot: CdmSnapshot!

  # Cluster of the live mount.
  cluster: Cluster!

  # Operations that the user is authorized to perform.
  authorizedOperations: AuthorizedOperations!
}
# Paginated list of VolumeGroupLiveMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VolumeGroupLiveMountConnection {
  # List of VolumeGroupLiveMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VolumeGroupLiveMountEdge!]!

  # List of VolumeGroupLiveMount objects.
  nodes: [VolumeGroupLiveMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VolumeGroupLiveMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the VolumeGroupLiveMount object. This wrapper is used for pagination.
type VolumeGroupLiveMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VolumeGroupLiveMount object wrapped by this edge.
  node: VolumeGroupLiveMount!
}
# Filter for volume group Live Mount results.
enum VolumeGroupLiveMountFilterField {
  # Cluster UUID filter field for volume group Live Mount results.
  CLUSTER_UUID

  # Live Mount name filter field for
  # Live Mount results.
  MOUNT_NAME

  # Organization ID filter field for live
  # mount results.
  ORG_ID

  # Source host ID filter field for
  # Live Mount results.
  SOURCE_HOST_ID
}
# Filter volume group live mount results.
input VolumeGroupLiveMountFilterInput {
  # Type of filter.
  field: VolumeGroupLiveMountFilterField = MOUNT_NAME

  # Values for the filter type.
  texts: [String!] = []
}
# Parameters to sort volume group Live Mount results.
enum VolumeGroupLiveMountSortByField {
  # Sort by cluster name.
  CLUSTER_NAME

  # Sort by creation date.
  CREATION_DATE

  # Sort by mount name.
  MOUNT_NAME
}
# Sort volume group live mounts results.
input VolumeGroupLiveMountSortByInput {
  # Field for volume group live mounts sort by.
  field: VolumeGroupLiveMountSortByField = MOUNT_NAME

  # Sort order for volume group live mounts sort by.
  sortOrder: SortOrder = ASC
}
# Supported in v5.0+
input VolumeGroupMountSnapshotJobConfigInput {
  # Supported in v5.0+
  # Domain name of the users that are authenticated to access the SMB share.
  smbDomainName: String

  # Supported in v5.0+
  # IP address of the hosts that are authenticated to access the SMB share.
  smbValidIps: [String!] = []

  # Supported in v5.0+
  # Usernames of the users that are authenticated to access the SMB share.
  smbValidUsers: [String!] = []

  # Supported in v5.0+
  # Only specified if mounting on a specific Host is desired. If not specified, Rubrik will simply expose addresses of SMB mounts per recovered Volume. If a mount point is specified in any of the volumeConfigs, this must be defined. If this is specified, but no mount points are, Rubrik will generate mount paths to mount on the target Host for each volume.
  targetHostId: String

  # Required. Supported in v5.0+
  # The configuration of the Volumes to be mounted on the Host.
  volumeConfigs: [VolumeGroupVolumeMountConfigInput!]!
}
# Supported in v5.0+
input VolumeGroupOnDemandSnapshotConfigInput {
  # Supported in v5.0+
  # v5.0-v5.2: IDs of the Volumes which we will include in the snapshot. If not passed, the Volumes currently assigned to the Volume Group will be used.
  # v5.3+: The unique ID of each volume included in the Volume Group snapshot.
  volumeIdsIncludedInSnapshot: [String!] = []
  baseOnDemandSnapshotConfig: BaseOnDemandSnapshotConfigInput
}
# Supported in v5.0+
input VolumeGroupPatchInput {
  # Supported in v5.0+
  # v5.0-v5.2: Assign this Volume Group to the given SLA domain.
  # v5.3+: The ID of the SLA Domain policy to assign to the Volume Group.
  configuredSlaDomainId: String

  # Supported in v5.0+
  # v5.0-v5.2: Whether backup/archival/replication is paused for this Volume Group
  # v5.3+: Indicates whether backup, archival, and replicated is paused for this Volume Group.
  isPaused: Boolean

  # Supported in v5.0+
  # v5.0-v5.2: IDs of the Volumes which we will include in snapshots. The volume must either currently exist on the host, or already be included in snapshots.
  # v5.3: The unique ID of each volume included in the Volume. Group.
  # v6.0+: The unique ID of each volume included in the Volume Group.
  volumeIdsIncludedInSnapshots: [String!] = []

  # Supported in v5.1+
  # v5.1-v5.2: Boolean value that determines whether to force a full for the next snapshot of a volume group. Use true to force a full and false to use the default. The backup job resets the parameter to false after a successful full snapshot.
  # v5.3+: Determines whether the next snapshot of the Volume Group is a full. After the snapshot has completed, this parameter will be reset to the default false value.
  forceFull: Boolean
}
# Supported in v5.0+
input VolumeGroupRestoreFileConfigInput {
  # Required. Supported in v5.0+
  # Absolute file path.
  path: String!

  # Required. Supported in v5.0+
  # Target folder for the copied files.
  restorePath: String!
}
# Supported in v5.0+
input VolumeGroupRestoreFilesConfigInput {
  # Supported in v5.0+
  # Windows Host ID to restore files to. If left empty, the host ID of the Volume Group will be used.
  targetHostId: String

  # Required. Supported in v5.0+
  # Directory of folder to copy files into.
  restoreConfigs: [VolumeGroupRestoreFileConfigInput!]!
}
# Supported in v7.0+
input VolumeGroupSnapshotDownloadConfigInput {
  # Supported in v7.0+
  # ID of the SLA Domain to manage retention of the downloaded snapshot.
  slaId: String
}
# Supported in v5.0+
type VolumeGroupSnapshotVolumeSummary {
  # Required. Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: The unique ID of the snapshot volume summary.
  id: String!

  # Required. Supported in v5.0+
  # v5.0-v5.2: Mount point locations of this Volume on the Host
  # v5.3+: The mount points of the volume on the host.
  mountPoints: [String!]!

  # Required. Supported in v5.0+
  # v5.0-v5.2: Size of the Volume in bytes
  # v5.3+: The size of the volume in bytes.
  size: Long!
  fileSystemType: FileSystemType!
}
# A volume captured in a volume group snapshot.
type VolumeGroupSubObject {
  # Mount point for the volume.
  mountPointsOpt: [String!]!

  # Capacity of the volume in bytes.
  capacityInBytes: Long!

  # File system type of the volume.
  fileSystemType: String!

  # File size of the volume in bytes.
  fileSizeInBytes: Long!

  # ID of the volume.
  volumeId: String!
}
# Supported in v5.0+
type VolumeGroupSummary {
  # Supported in v5.0+
  # v5.0-v5.2: Id of the host of the volume group
  # v5.3+: The unique ID of the host that contains the Volume Group.
  hostId: String

  # Supported in v5.0+
  # v5.0-v5.2: IP Address or fully qualified domain name with which the host was added
  # v5.3+: The name of the host that contains the Volume Group.
  hostname: String

  # Required. Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: The unique ID of the Volume Group.
  id: String!

  # Required. Supported in v5.0+
  # v5.0-v5.2: Whether this Volume Group is currently accessible on the host
  # v5.3+: Specifies whether the Volume Group is accessible on the Rubrik cluster.
  isRelic: Boolean!

  # Required. Supported in v5.0+
  # v5.0-v5.2:
  # v5.3+: The name of the Volume Group.
  name: String!

  # Supported in v5.3+
  # Specifies whether the Volume Group is set to take a full snapshot for the next backup.
  forceFull: Boolean

  # Supported in v5.3+
  # Specifies whether the Volume Group needs to be migrated in order to use the fast VHDX builder. This flag is set only when the Volume Group's last backup job failed due to an error during data fetch, and the backup job did not use the fast VHDX builder.
  needsMigration: Boolean
  snappable: CdmWorkload
}
# Supported in v5.0+
input VolumeGroupVolumeMountConfigInput {
  # Supported in v5.0+
  # The path on the Host on which the Volume will be mounted. It must be either an untaken drive letter name, a directory that does not exist but on a valid drive letter, or an empty directory that already exists.
  mountPointOnHost: String

  # Required. Supported in v5.0+
  # ID of the Volume to mount.
  volumeId: String!
}
# Exclusion status of AWS EBS volumes.
input VolumeIdExclusion {
  # ID of the AWS EBS volume.
  volumeId: String!

  # Specfies whether the EBS volume is excluded from snapshot.
  isExcluded: Boolean!
}
# The status of the async CDM request.
type VsphereAsyncRequestStatus {
  id: String!
  status: String!
  progress: Float!
  nodeId: String!
  error: VsphereRequestErrorInfo
  links: [VsphereLink!]!
  endTime: DateTime!
  startTime: DateTime!
}
# Input to trigger on demand snapshot for multiple virtual machines.
input VsphereBulkOnDemandSnapshotInput {
  # Required. The IDs of the virtual machines for which to take an on-demand snapshot and the ID of the SLA Domain to assign to the resulting snapshot.
  config: BulkOnDemandSnapshotJobConfigInput!

  # Required. User note to associate with audits.
  userNote: String
}
type VsphereComputeCluster implements CdmHierarchyObject , HierarchyObject , VsphereDatacenterPhysicalChildType , VsphereDatacenterDescendantType , VsphereVcenterDescendantType , VsphereVcenterPhysicalChildType {
  # This vsphere computer cluster's IOFilter status can be Uninstalled or Installed.
  ioFilterStatus: String!

  # Current Drs status of the cluster.
  drsStatus: Boolean!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereComputeClusterDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereComputeClusterPhysicalChildTypeConnection!

  # List of recoveryTarget children.
  recoveryTargetChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereComputeClusterPhysicalChildTypeConnection!

  # Paginated list of recovery target descendants.
  recoveryTargetDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereComputeClusterDescendantTypeConnection!

  # This field is true if this object has one or more vSphere datastore descendants available for use as a recovery target and false otherwise.
  hasDatastoresForRecovery: Boolean! @deprecated(reason: "Use recoveryTargetDescendantConnection field directly instead")

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereComputeCluster objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereComputeClusterConnection {
  # List of VsphereComputeCluster objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereComputeClusterEdge!]!

  # List of VsphereComputeCluster objects.
  nodes: [VsphereComputeCluster!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereComputeCluster objects matching the request arguments.
  count: Int!
}
interface VsphereComputeClusterDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereComputeClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereComputeClusterDescendantTypeConnection {
  # List of VsphereComputeClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereComputeClusterDescendantTypeEdge!]!

  # List of VsphereComputeClusterDescendantType objects.
  nodes: [VsphereComputeClusterDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereComputeClusterDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereComputeClusterDescendantType object. This wrapper is used for pagination.
type VsphereComputeClusterDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereComputeClusterDescendantType object wrapped by this edge.
  node: VsphereComputeClusterDescendantType!
}
# Wrapper around the VsphereComputeCluster object. This wrapper is used for pagination.
type VsphereComputeClusterEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereComputeCluster object wrapped by this edge.
  node: VsphereComputeCluster!
}
interface VsphereComputeClusterPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereComputeClusterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereComputeClusterPhysicalChildTypeConnection {
  # List of VsphereComputeClusterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereComputeClusterPhysicalChildTypeEdge!]!

  # List of VsphereComputeClusterPhysicalChildType objects.
  nodes: [VsphereComputeClusterPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereComputeClusterPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereComputeClusterPhysicalChildType object. This wrapper is used for pagination.
type VsphereComputeClusterPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereComputeClusterPhysicalChildType object wrapped by this edge.
  node: VsphereComputeClusterPhysicalChildType!
}
# Vsphere content library descendant type information.
interface VsphereContentLibraryDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Vsphere content library logical child type information.
interface VsphereContentLibraryLibraryChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
type VsphereDatacenter implements CdmHierarchyObject , HierarchyObject , VsphereVcenterLogicalChildType , VsphereVcenterPhysicalChildType , VsphereVcenterDescendantType , VsphereDatacenterFolderLogicalChildType , VsphereDatacenterFolderDescendantType {
  # Vsphere Datacenter CDM ID.
  cdmId: String!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereDatacenterDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereDatacenterLogicalChildTypeConnection!

  # List of recoveryTarget children.
  recoveryTargetChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereDatacenterPhysicalChildTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereDatacenterPhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VsphereDatacenterDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereDatacenterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereDatacenterDescendantTypeConnection {
  # List of VsphereDatacenterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereDatacenterDescendantTypeEdge!]!

  # List of VsphereDatacenterDescendantType objects.
  nodes: [VsphereDatacenterDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereDatacenterDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereDatacenterDescendantType object. This wrapper is used for pagination.
type VsphereDatacenterDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereDatacenterDescendantType object wrapped by this edge.
  node: VsphereDatacenterDescendantType!
}
# Vsphere datacenter folder descendant type information.
interface VsphereDatacenterFolderDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Vsphere datacenter folder logical child type information.
interface VsphereDatacenterFolderLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VsphereDatacenterLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereDatacenterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereDatacenterLogicalChildTypeConnection {
  # List of VsphereDatacenterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereDatacenterLogicalChildTypeEdge!]!

  # List of VsphereDatacenterLogicalChildType objects.
  nodes: [VsphereDatacenterLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereDatacenterLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereDatacenterLogicalChildType object. This wrapper is used for pagination.
type VsphereDatacenterLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereDatacenterLogicalChildType object wrapped by this edge.
  node: VsphereDatacenterLogicalChildType!
}
interface VsphereDatacenterPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereDatacenterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereDatacenterPhysicalChildTypeConnection {
  # List of VsphereDatacenterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereDatacenterPhysicalChildTypeEdge!]!

  # List of VsphereDatacenterPhysicalChildType objects.
  nodes: [VsphereDatacenterPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereDatacenterPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereDatacenterPhysicalChildType object. This wrapper is used for pagination.
type VsphereDatacenterPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereDatacenterPhysicalChildType object wrapped by this edge.
  node: VsphereDatacenterPhysicalChildType!
}
# Vsphere datastore.
type VsphereDatastore implements CdmHierarchyObject , HierarchyObject , VsphereComputeClusterDescendantType , VsphereDatacenterDescendantType , VsphereHostDescendantType , VsphereResourcePoolDescendantType , VsphereVcenterDescendantType , VsphereDatastoreClusterPhysicalChildType , VsphereDatastoreClusterDescendantType {
  capacity: Long!
  freeSpace: Long!
  datastoreType: String!
  isLocal: Boolean!

  # Indicates whether the datastore is standalone or not.
  isStandaloneDatastore: Boolean!

  # Indicates whether the datastore is archived or not.
  isArchived: Boolean!

  # Object ID.
  id: UUID!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Vsphere datastore cluster.
type VsphereDatastoreCluster implements CdmHierarchyObject , HierarchyObject , VsphereComputeClusterDescendantType , VsphereDatacenterDescendantType , VsphereDatacenterPhysicalChildType , VsphereHostDescendantType , VsphereResourcePoolDescendantType , VsphereVcenterDescendantType , VsphereVcenterPhysicalChildType {
  # Vcenter ID.
  vcenterId: UUID!

  # Cdm ID of the vSphere datastore cluster.
  cdmId: String!

  # Indicates whether the storage DRS automation is enabled.
  isSdrsEnabled: Boolean!

  # Datastore cluster resources - total available free space, in terrabytes.
  freeSpace: Long!

  # Datastore cluster resources - total capacity, in terrabytes.
  capacity: Long!

  # Datastore cluster ID.
  id: UUID!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereDatastoreClusterDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereDatastoreClusterPhysicalChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereDatastoreCluster objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereDatastoreClusterConnection {
  # List of VsphereDatastoreCluster objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereDatastoreClusterEdge!]!

  # List of VsphereDatastoreCluster objects.
  nodes: [VsphereDatastoreCluster!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereDatastoreCluster objects matching the request arguments.
  count: Int!
}
interface VsphereDatastoreClusterDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereDatastoreClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereDatastoreClusterDescendantTypeConnection {
  # List of VsphereDatastoreClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereDatastoreClusterDescendantTypeEdge!]!

  # List of VsphereDatastoreClusterDescendantType objects.
  nodes: [VsphereDatastoreClusterDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereDatastoreClusterDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereDatastoreClusterDescendantType object. This wrapper is used for pagination.
type VsphereDatastoreClusterDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereDatastoreClusterDescendantType object wrapped by this edge.
  node: VsphereDatastoreClusterDescendantType!
}
# Wrapper around the VsphereDatastoreCluster object. This wrapper is used for pagination.
type VsphereDatastoreClusterEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereDatastoreCluster object wrapped by this edge.
  node: VsphereDatastoreCluster!
}
interface VsphereDatastoreClusterPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereDatastoreClusterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereDatastoreClusterPhysicalChildTypeConnection {
  # List of VsphereDatastoreClusterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereDatastoreClusterPhysicalChildTypeEdge!]!

  # List of VsphereDatastoreClusterPhysicalChildType objects.
  nodes: [VsphereDatastoreClusterPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereDatastoreClusterPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereDatastoreClusterPhysicalChildType object. This wrapper is used for pagination.
type VsphereDatastoreClusterPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereDatastoreClusterPhysicalChildType object wrapped by this edge.
  node: VsphereDatastoreClusterPhysicalChildType!
}
# Paginated list of VsphereDatastore objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereDatastoreConnection {
  # List of VsphereDatastore objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereDatastoreEdge!]!

  # List of VsphereDatastore objects.
  nodes: [VsphereDatastore!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereDatastore objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereDatastore object. This wrapper is used for pagination.
type VsphereDatastoreEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereDatastore object wrapped by this edge.
  node: VsphereDatastore!
}
# Input for deleting vSphere vCenter.
input VsphereDeleteVcenterInput {
  # Required. ID of the vCenter Server. to remove.
  id: String!
}
# Set disks to be included/excluded in snapshot.
input VsphereExcludeVmDisksInput {
  # Fid of virtual disk.
  virtualDiskFid: UUID!

  # Virtual disk will be excluded from snapshot.
  excludeFromSnapshots: Boolean
}
# Input for exporting snapshot to standalone host.
input VsphereExportSnapshotToStandaloneHostV2Input {
  # Required. Configuration for the export request to standalone ESXi host.
  config: ExportSnapshotToStandaloneHostRequestInput!

  # Required. ID of snapshot.
  id: String!
}
type VsphereFolder implements CdmHierarchyObject , HierarchyObject , VsphereVcenterLogicalChildType , VsphereVcenterDescendantType , VsphereDatacenterFolderLogicalChildType , VsphereDatacenterFolderDescendantType , VsphereDatacenterLogicalChildType , VsphereDatacenterDescendantType , VsphereFolderLogicalChildType , VsphereFolderDescendantType {
  # Vsphere folder CDM ID.
  cdmId: String!

  # Vsphere folder type.
  folderType: VmwareFolderType

  # Vcenter ID of the vSphere folder.
  vCenterId: UUID!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereFolderDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereFolderLogicalChildTypeConnection!

  # Datacenter ID of the vSphere folder.
  datacenterId: UUID

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereFolder objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereFolderConnection {
  # List of VsphereFolder objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereFolderEdge!]!

  # List of VsphereFolder objects.
  nodes: [VsphereFolder!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereFolder objects matching the request arguments.
  count: Int!
}
interface VsphereFolderDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereFolderDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereFolderDescendantTypeConnection {
  # List of VsphereFolderDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereFolderDescendantTypeEdge!]!

  # List of VsphereFolderDescendantType objects.
  nodes: [VsphereFolderDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereFolderDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereFolderDescendantType object. This wrapper is used for pagination.
type VsphereFolderDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereFolderDescendantType object wrapped by this edge.
  node: VsphereFolderDescendantType!
}
# Wrapper around the VsphereFolder object. This wrapper is used for pagination.
type VsphereFolderEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereFolder object wrapped by this edge.
  node: VsphereFolder!
}
interface VsphereFolderLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereFolderLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereFolderLogicalChildTypeConnection {
  # List of VsphereFolderLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereFolderLogicalChildTypeEdge!]!

  # List of VsphereFolderLogicalChildType objects.
  nodes: [VsphereFolderLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereFolderLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereFolderLogicalChildType object. This wrapper is used for pagination.
type VsphereFolderLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereFolderLogicalChildType object wrapped by this edge.
  node: VsphereFolderLogicalChildType!
}
type VsphereHost implements CdmHierarchyObject , HierarchyObject , VsphereVcenterDescendantType , VsphereVcenterPhysicalChildType , VsphereComputeClusterPhysicalChildType , VsphereComputeClusterDescendantType , VsphereDatacenterDescendantType , VsphereDatacenterPhysicalChildType {
  # Vsphere ESXI Host CDM ID.
  cdmId: String!
  isStandaloneHost: Boolean!

  # This vsphere host's IOFilter status can be Uninstalled or Installed.
  ioFilterStatus: String!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereHostDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereHostPhysicalChildTypeConnection!

  # List of recoveryTarget children.
  recoveryTargetChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereHostPhysicalChildTypeConnection!

  # Paginated list of recovery target descendants.
  recoveryTargetDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereHostDescendantTypeConnection!

  # This field is true if this object has one or more vSphere datastore descendants available for use as a recovery target and false otherwise.
  hasDatastoresForRecovery: Boolean! @deprecated(reason: "Use recoveryTargetDescendantConnection field directly instead")

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereHost objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereHostConnection {
  # List of VsphereHost objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereHostEdge!]!

  # List of VsphereHost objects.
  nodes: [VsphereHost!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereHost objects matching the request arguments.
  count: Int!
}
interface VsphereHostDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereHostDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereHostDescendantTypeConnection {
  # List of VsphereHostDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereHostDescendantTypeEdge!]!

  # List of VsphereHostDescendantType objects.
  nodes: [VsphereHostDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereHostDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereHostDescendantType object. This wrapper is used for pagination.
type VsphereHostDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereHostDescendantType object wrapped by this edge.
  node: VsphereHostDescendantType!
}
# Wrapper around the VsphereHost object. This wrapper is used for pagination.
type VsphereHostEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereHost object wrapped by this edge.
  node: VsphereHost!
}
interface VsphereHostPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereHostPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereHostPhysicalChildTypeConnection {
  # List of VsphereHostPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereHostPhysicalChildTypeEdge!]!

  # List of VsphereHostPhysicalChildType objects.
  nodes: [VsphereHostPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereHostPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereHostPhysicalChildType object. This wrapper is used for pagination.
type VsphereHostPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereHostPhysicalChildType object wrapped by this edge.
  node: VsphereHostPhysicalChildType!
}
# A link with href and rel properties.
type VsphereLink {
  # Destination of link.
  href: String!

  # Relation of this link's destination to the current resource.
  rel: String!
}
# Live Mount of a vSphere Virtual Machine.
type VsphereLiveMount {
  # ID of the vSphere Live Mount.
  id: String!

  # CDM ID of the vSphere Live Mount.
  cdmId: String!

  # Ready status of the vSphere Live Mount.
  isReady: Boolean!

  # Vcenter ID of the Live Mount.
  vcenterId: String!

  # Whether or not the mount has an attaching disk.
  hasAttachingDisk: Boolean!

  # Attaching disk count of the Live Mount.
  attachingDiskCount: Int!

  # Mount timestamp of the vSphere Live Mount.
  mountTimestamp: DateTime

  # Migrate datastore request id of the vSphere Live Mount.
  migrateDatastoreRequestId: String!

  # Cluster id of the vSphere Live Mount.
  cluster: Cluster!

  # Status of the vSphere Live Mount.
  vmStatus: VsphereLiveMountStatus!

  # Source Virtual Machine of the vSphere Live Mount.
  sourceVm: VsphereVm

  # Source snapshot of the vSphere Live Mount.
  sourceSnapshot: CdmSnapshot

  # Host of the vSphere Live Mount.
  host: VsphereHost

  # Name of the vSphere Live Mount.
  newVmName: String

  # New Virtual Machine of the vSphere Live Mount.
  mountedVm: VsphereVm
}
# Paginated list of VsphereLiveMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereLiveMountConnection {
  # List of VsphereLiveMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereLiveMountEdge!]!

  # List of VsphereLiveMount objects.
  nodes: [VsphereLiveMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereLiveMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereLiveMount object. This wrapper is used for pagination.
type VsphereLiveMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereLiveMount object wrapped by this edge.
  node: VsphereLiveMount!
}
# Filter for vSphere Live Mount results.
enum VsphereLiveMountFilterField {
  # Cluster UUID filter for vSphere Live Mount results.
  CLUSTER_UUID

  # Mount name filter for vSphere Live Mount results.
  MOUNT_NAME

  # Organization ID filter for vSphere Live Mount results.
  ORG_ID

  # Original Virtual Machine ID filter for vSphere Live Mount results.
  ORIGINAL_VM_ID

  # Filter is not specified. Any filter text would not be considered.
  UNSPECIFIED
}
# Filter vSphere Live Mount results.
input VsphereLiveMountFilterInput {
  # Type of filter.
  field: VsphereLiveMountFilterField = UNSPECIFIED

  # Values for the filter type.
  texts: [String!] = []
}
# Sort vSphere Live Mount results.
input VsphereLiveMountSortBy {
  # Field to sort vSphere Live Mounts by.
  field: VsphereLiveMountSortByField = UNSPECIFIED

  # Sort order for vSphere Live Mounts.
  sortOrder: SortOrder = ASC
}
# Sort by field for vSphere Live Mount results.
enum VsphereLiveMountSortByField {
  # Sort by the cluster name of the vSphere Live Mount.
  CLUSTER_NAME

  # Sort by the creation date of the vSphere Live Mount.
  CREATION_DATE

  # Sort by the name of the vSphere Live Mount.
  MOUNT_NAME

  # Sort by field is not specified. Any sort by text would
  # not be considered.
  UNSPECIFIED

  # Sort by the status of the vSphere Live Mount.
  VM_STATUS
}
# Vsphere Live Mount status.
enum VsphereLiveMountStatus {
  # Vsphere Live Mount is available.
  DATASTORE_MOUNTED

  # Vsphere Live Mount is unavailable.
  MIGRATING_DATASTORE

  # Vsphere Live Mount is mounting.
  MOUNTING

  # Vsphere Live Mount is powering off.
  POWERED_OFF

  # Vsphere Live Mount is powering on.
  POWERED_ON

  # Vsphere Live Mount status is unknown.
  UNKNOWN

  # Vsphere Live Mount is unmounting.
  UNMOUNTING
}
# Supported in v5.0+
input VsphereLoginInfoInput {
  # Required. Supported in v5.0+
  # IP address of ESXi host.
  ip: String!

  # Required. Supported in v5.0+
  # Password of ESXi host.
  password: String!

  # Required. Supported in v5.0+
  # Username of ESXi host.
  username: String!
}
# Mount of vSphere virtual machine.
type VsphereMount {
  id: UUID!
  cdmId: String!
  mountRequestId: String
  unmountRequestId: String
  isReady: Boolean!
  clusterName: String!
  status: VsphereMountStatus!
  authorizedOperations: AuthorizedOperations!
  cluster: Cluster!
  attachingDiskCount: Int
  hasAttachingDisk: Boolean
  host: VsphereHost
  migrateDatastoreRequestId: String
  mountTimestamp: DateTime
  newVm: VsphereVm
  sourceSnapshot: CdmSnapshot
  sourceVm: VsphereVm
  newVmName: String
}
# Paginated list of VsphereMount objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereMountConnection {
  # List of VsphereMount objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereMountEdge!]!

  # List of VsphereMount objects.
  nodes: [VsphereMount!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereMount objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereMount object. This wrapper is used for pagination.
type VsphereMountEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereMount object wrapped by this edge.
  node: VsphereMount!
}
enum VsphereMountSortBy {
  CLUSTER_NAME
  MOUNT_TIME
  NEW_VM_NAME
  SOURCE_VM_NAME
  STATUS
}
# Vsphere Live Mount status.
enum VsphereMountStatus {
  # Vsphere Live Mount is available.
  DATASTORE_MOUNTED

  # Vsphere Live Mount is unavailable.
  MIGRATING_DATASTORE

  # Vsphere Live Mount is mounting.
  MOUNTING

  # Vsphere Live Mount is powering off.
  POWERED_OFF

  # Vsphere Live Mount is powering on.
  POWERED_ON

  # Vsphere Live Mount status is unknown.
  UNKNOWN

  # Vsphere Live Mount is unmounting.
  UNMOUNTING
}
type VsphereNetwork implements CdmHierarchyObject , HierarchyObject , VsphereHostDescendantType , VsphereComputeClusterDescendantType , VsphereResourcePoolDescendantType , VsphereVcenterDescendantType {
  # MOID of the vSphere network.
  moid: String!

  # Object ID.
  id: UUID!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Input for taking on demand snapshot of vSphere virtual machine.
input VsphereOnDemandSnapshotInput {
  # Configuration for the on-demand snapshot.
  config: BaseOnDemandSnapshotConfigInput

  # Required. ID of the virtual machine.
  id: String!

  # Required. User note to associate with audits.
  userNote: String
}
# Contains error information for a CDM response.
type VsphereRequestErrorInfo {
  message: String!
}
type VsphereResourcePool implements CdmHierarchyObject , HierarchyObject , VsphereComputeClusterPhysicalChildType , VsphereComputeClusterDescendantType , VsphereResourcePoolPhysicalChildType , VsphereResourcePoolDescendantType , VsphereHostPhysicalChildType , VsphereHostDescendantType , VsphereDatacenterDescendantType , VsphereVcenterDescendantType {
  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereResourcePoolDescendantTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereResourcePoolPhysicalChildTypeConnection!

  # List of recoveryTarget children.
  recoveryTargetChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereResourcePoolPhysicalChildTypeConnection!

  # Paginated list of recovery target descendants.
  recoveryTargetDescendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereResourcePoolDescendantTypeConnection!

  # This field is true if this object has one or more vSphere datastore descendants available for use as a recovery target and false otherwise.
  hasDatastoresForRecovery: Boolean! @deprecated(reason: "Use recoveryTargetDescendantConnection field directly instead")

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VsphereResourcePoolDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereResourcePoolDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereResourcePoolDescendantTypeConnection {
  # List of VsphereResourcePoolDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereResourcePoolDescendantTypeEdge!]!

  # List of VsphereResourcePoolDescendantType objects.
  nodes: [VsphereResourcePoolDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereResourcePoolDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereResourcePoolDescendantType object. This wrapper is used for pagination.
type VsphereResourcePoolDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereResourcePoolDescendantType object wrapped by this edge.
  node: VsphereResourcePoolDescendantType!
}
interface VsphereResourcePoolPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereResourcePoolPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereResourcePoolPhysicalChildTypeConnection {
  # List of VsphereResourcePoolPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereResourcePoolPhysicalChildTypeEdge!]!

  # List of VsphereResourcePoolPhysicalChildType objects.
  nodes: [VsphereResourcePoolPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereResourcePoolPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereResourcePoolPhysicalChildType object. This wrapper is used for pagination.
type VsphereResourcePoolPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereResourcePoolPhysicalChildType object wrapped by this edge.
  node: VsphereResourcePoolPhysicalChildType!
}
type VsphereTag implements CdmHierarchyObject , HierarchyObject , VsphereVcenterDescendantType , VsphereTagCategoryDescendantType , VsphereTagCategoryTagChildType {
  vcenterId: String!
  vsphereTagPath: [PathNode!]!

  # The list of moids of child VMs.
  objectIds: [String!]!

  # The CDM ID of the configured SLA Domain.
  slaDomainId: String!

  # Specifies whether this tag is a multi-tag filter or a vSphere tag.
  isFilter: Boolean!

  # Conditional logic for the multi-tag filter.
  condition: String

  # Object ID.
  id: UUID!

  # List of tag children.
  tagChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereTagTagChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
type VsphereTagCategory implements CdmHierarchyObject , HierarchyObject , VsphereVcenterDescendantType , VsphereVcenterTagChildType {
  vcenterId: String!
  vsphereTagPath: [PathNode!]!

  # Specifies whether the child tags are multi-tag filters or vSphere tags.
  isFilterCategory: Boolean!

  # Object ID.
  id: UUID!

  # List of tag children.
  tagChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereTagCategoryTagChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VsphereTagCategoryDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VsphereTagCategoryTagChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereTagCategoryTagChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereTagCategoryTagChildTypeConnection {
  # List of VsphereTagCategoryTagChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereTagCategoryTagChildTypeEdge!]!

  # List of VsphereTagCategoryTagChildType objects.
  nodes: [VsphereTagCategoryTagChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereTagCategoryTagChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereTagCategoryTagChildType object. This wrapper is used for pagination.
type VsphereTagCategoryTagChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereTagCategoryTagChildType object wrapped by this edge.
  node: VsphereTagCategoryTagChildType!
}
interface VsphereTagDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
interface VsphereTagTagChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereTagTagChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereTagTagChildTypeConnection {
  # List of VsphereTagTagChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereTagTagChildTypeEdge!]!

  # List of VsphereTagTagChildType objects.
  nodes: [VsphereTagTagChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereTagTagChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereTagTagChildType object. This wrapper is used for pagination.
type VsphereTagTagChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereTagTagChildType object wrapped by this edge.
  node: VsphereTagTagChildType!
}
type VsphereVcenter implements CdmHierarchyObject , HierarchyObject {
  vcenterId: String!
  username: String!
  caCerts: String!
  vsphereTagPath: [PathNode!]!
  aboutInfo: AboutInformation
  lastRefreshTime: DateTime

  # Flag to determine whether this vcenter is from VMC or not.
  isVmc: Boolean!

  # The provider of VMC.
  vmcProvider: String

  # The compute cluster visibility rules.
  computeVisibilityFilter: [ClusterVisibilityInfo!]!

  # Is HotAdd enabled for this on-prem vCenter.
  isHotAddEnabledForOnPremVcenter: Boolean!
  conflictResolutionAuthz: VcenterSummaryConflictResolutionAuthz
  connectionStatus: RefreshableObjectConnectionStatus!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereVcenterDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereVcenterLogicalChildTypeConnection!

  # List of physical children.
  physicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereVcenterPhysicalChildTypeConnection!

  # List of tag children.
  tagChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereVcenterTagChildTypeConnection!

  # List of library children.
  libraryChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): VsphereVcenterLibraryChildTypeConnection!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereVcenter objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereVcenterConnection {
  # List of VsphereVcenter objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereVcenterEdge!]!

  # List of VsphereVcenter objects.
  nodes: [VsphereVcenter!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereVcenter objects matching the request arguments.
  count: Int!
}
interface VsphereVcenterDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereVcenterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereVcenterDescendantTypeConnection {
  # List of VsphereVcenterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereVcenterDescendantTypeEdge!]!

  # List of VsphereVcenterDescendantType objects.
  nodes: [VsphereVcenterDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereVcenterDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereVcenterDescendantType object. This wrapper is used for pagination.
type VsphereVcenterDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereVcenterDescendantType object wrapped by this edge.
  node: VsphereVcenterDescendantType!
}
# Wrapper around the VsphereVcenter object. This wrapper is used for pagination.
type VsphereVcenterEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereVcenter object wrapped by this edge.
  node: VsphereVcenter!
}
# Vsphere vCenter library child type information.
interface VsphereVcenterLibraryChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereVcenterLibraryChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereVcenterLibraryChildTypeConnection {
  # List of VsphereVcenterLibraryChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereVcenterLibraryChildTypeEdge!]!

  # List of VsphereVcenterLibraryChildType objects.
  nodes: [VsphereVcenterLibraryChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereVcenterLibraryChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereVcenterLibraryChildType object. This wrapper is used for pagination.
type VsphereVcenterLibraryChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereVcenterLibraryChildType object wrapped by this edge.
  node: VsphereVcenterLibraryChildType!
}
interface VsphereVcenterLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereVcenterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereVcenterLogicalChildTypeConnection {
  # List of VsphereVcenterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereVcenterLogicalChildTypeEdge!]!

  # List of VsphereVcenterLogicalChildType objects.
  nodes: [VsphereVcenterLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereVcenterLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereVcenterLogicalChildType object. This wrapper is used for pagination.
type VsphereVcenterLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereVcenterLogicalChildType object wrapped by this edge.
  node: VsphereVcenterLogicalChildType!
}
interface VsphereVcenterPhysicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereVcenterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereVcenterPhysicalChildTypeConnection {
  # List of VsphereVcenterPhysicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereVcenterPhysicalChildTypeEdge!]!

  # List of VsphereVcenterPhysicalChildType objects.
  nodes: [VsphereVcenterPhysicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereVcenterPhysicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereVcenterPhysicalChildType object. This wrapper is used for pagination.
type VsphereVcenterPhysicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereVcenterPhysicalChildType object wrapped by this edge.
  node: VsphereVcenterPhysicalChildType!
}
interface VsphereVcenterTagChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of VsphereVcenterTagChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereVcenterTagChildTypeConnection {
  # List of VsphereVcenterTagChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereVcenterTagChildTypeEdge!]!

  # List of VsphereVcenterTagChildType objects.
  nodes: [VsphereVcenterTagChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereVcenterTagChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereVcenterTagChildType object. This wrapper is used for pagination.
type VsphereVcenterTagChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereVcenterTagChildType object wrapped by this edge.
  node: VsphereVcenterTagChildType!
}
# Virtual disk of a vSphere virtual machine.
type VsphereVirtualDisk {
  fid: UUID!
  cdmId: String!
  cdmVersion: String!
  clusterUuid: UUID!
  deviceKey: Int
  excludeFromSnapshots: Boolean!
  fileName: String!
  size: Long
  virtualMachineId: String!

  # The datastore that holds the virtual disk.
  datastoreFid: String

  # The datastore that holds the virtual disk.
  datastore: VsphereDatastore
}
# Paginated list of VsphereVirtualDisk objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereVirtualDiskConnection {
  # List of VsphereVirtualDisk objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereVirtualDiskEdge!]!

  # List of VsphereVirtualDisk objects.
  nodes: [VsphereVirtualDisk!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereVirtualDisk objects matching the request arguments.
  count: Int!
}
# Wrapper around the VsphereVirtualDisk object. This wrapper is used for pagination.
type VsphereVirtualDiskEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereVirtualDisk object wrapped by this edge.
  node: VsphereVirtualDisk!
}
input VsphereVirtualDiskFilter {
  fileName: String
  clusterUuid: [UUID!]
  sourceVmId: UUID
}
# Specifies how to sort virtual disks.
enum VsphereVirtualDiskSortBy {
  # Sort by file name.
  FILE_NAME

  # Sort by size.
  SIZE
}
type VsphereVm implements CdmHierarchyObject , CdmHierarchySnappableNew , HierarchyObject , HierarchySnappable , VsphereComputeClusterDescendantType , VsphereContentLibraryDescendantType , VsphereContentLibraryLibraryChildType , VsphereDatacenterDescendantType , VsphereDatacenterFolderDescendantType , VsphereFolderLogicalChildType , VsphereFolderDescendantType , VsphereHostPhysicalChildType , VsphereHostDescendantType , VsphereVcenterDescendantType , VsphereTagTagChildType , VsphereTagDescendantType , VsphereTagCategoryDescendantType , VcdDescendantType , VcdLogicalChildType , VcdOrgDescendantType , VcdOrgLogicalChildType , VcdOrgVdcDescendantType , VcdOrgVdcLogicalChildType , VcdVappDescendantType , VcdVappLogicalChildType , VcdTopLevelDescendantType {
  cdmId: String!
  isRelic: Boolean!
  guestOsName: String!
  powerStatus: VmPowerStatus
  vmwareToolsInstalled: Boolean!
  vsphereTagPath: [PathNode!]!

  # Specifies whether the virtual machine is a child of a Disaster Recovery Plan.
  isBlueprintChild: Boolean!

  # Specifies whether the virtual machine is active or not.
  isActive: Boolean!

  # Name of the Recovery Plan when the virtual machine is a child of the Recovery Plan.
  blueprintName: String

  # ID of the recovery plan when the virtual machine is a child of the recovery plan.
  blueprintId: String

  # If Virtual Machine integration with storage array is possible.
  isArrayIntegrationPossible: Boolean!

  # ID of guest credential assigned to the virtual machine.
  guestCredentialId: String!

  # VMware virtual machine template type.
  templateType: VmwareTemplateType!

  # Resource specification for a virtual machine.
  resourceSpec: VmwareVmResourceSpec

  # Parent ID of this workload.
  parentWorkloadIdOpt: UUID

  # Parent workload type of this workload.
  parentWorkloadTypeOpt: String

  # Object ID.
  id: UUID!

  # List of Live Mounts for this virtual machine.
  vSphereMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for virtual machine Live Mounts.
    filter: VSphereMountFilter, sortBy: VsphereMountSortBy,

    # Sorting order for the results.
    sortOrder: SortOrder): VsphereMountConnection!

  # List of Live Mounts for this virtual machine.
  vSphereLiveMounts(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for virtual machine Live Mounts.
    filter: [VsphereLiveMountFilterInput!],

    # Sort virtual machine Live Mounts.
    sortBy: VsphereLiveMountSortBy,

    # Sorting order for the results.
    sortOrder: SortOrder): VsphereLiveMountConnection!

  # List of virtual disks for this virtual machine.
  vsphereVirtualDisks(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter for virtual machine virtual disks.
    filter: VsphereVirtualDiskFilter,

    # Sort virtual disks by field.
    sortBy: VsphereVirtualDiskSortBy,

    # Sorting order for the results.
    sortOrder: SortOrder): VsphereVirtualDiskConnection!

  # Contains statistics for the protected objects, for example, capacity.
  reportWorkload: Snappable

  # Rubrik Backup Service (RBS) agent status on this virtual machine.
  agentStatus: AgentStatus

  # Whether array integration for this virtual machine is enabled.
  arrayIntegrationEnabled: Boolean!

  # Guest OS credentials authorization status.
  guestCredentialAuthorizationStatus: GuestCredentialAuthorizationStatus!

  # The Guest OS type of this virtual machine.
  guestOsType: GuestOsType!

  # Date at which the SLA Domain was assigned or inherited.
  protectionDate: DateTime

  # Snapshot consistency mandate.
  snapshotConsistencyMandate: ConsistencyLevelEnum!

  # Pre-backup script.
  preBackupScript: PrePostScript

  # Post-backup script.
  postBackupScript: PrePostScript

  # Post-snap script.
  postSnapScript: PrePostScript

  # List of duplicated virtual machines.
  duplicatedVms: [DuplicatedVm!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Input for batch export snapshots for vSphere.
input VsphereVmBatchExportInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the exported virtual machine snapshot.
  config: BatchExportSnapshotJobConfigInput!
}
# Supported in Rubrik CDM version 9.0 and later.
input VsphereVmBatchExportV3Input {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the export job and exported virtual machine.
  config: BatchExportSnapshotJobConfigV3Input!
}
# Input for batch in place recovery for vSphere virtual machines.
input VsphereVmBatchInPlaceRecoveryInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the virtual machine snapshot for in-place recovery.
  config: BatchInPlaceRecoveryJobConfigInput!
}
# Paginated list of VsphereVm objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type VsphereVmConnection {
  # List of VsphereVm objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [VsphereVmEdge!]!

  # List of VsphereVm objects.
  nodes: [VsphereVm!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of VsphereVm objects matching the request arguments.
  count: Int!
}
# Input for deleting VMware snapshots.
input VsphereVmDeleteSnapshotInput {
  # Required. Location of the snapshot. Use **_local_** to delete only the local copy of the snapshot. Or use **_all_** to delete the snapshot locally, on a replication target, and at an archival location.
  location: DeleteVmwareSnapshotRequestLocation!

  # Required. ID of snapshot.
  id: String!
}
# Input for downloading vSphere snapshot files.
input VsphereVmDownloadSnapshotFilesInput {
  # Required. ID of the virtual machine snapshot.
  snapshotFid: UUID!

  # Required. Paths of the files.
  paths: [String!]!

  # The delta type options which the files will be filtered on.
  deltaTypeFilter: [DeltaType!]

  # The fid of the next snapshot to perform the delta on.
  nextSnapshotFid: UUID

  # Supported in v5.2+.
  # v5.2+: Specifies whether the download action is in response to a Legal Hold. This download generates a SHA1 checksum of downloaded data that is used for integrity verification by external bodies.
  isLegalHoldDownload: Boolean

  # User note to associate with audits.
  userNote: String

  # Supported in 9.0.1+.
  # v9.0.1+: Password for zip archive created.
  zipPassword: String
}
# Input for downloading vSphere snapshot from archive.
input VsphereVmDownloadSnapshotInput {
  # Required. ID of snapshot.
  id: String!
}
# Wrapper around the VsphereVm object. This wrapper is used for pagination.
type VsphereVmEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual VsphereVm object wrapped by this edge.
  node: VsphereVm!
}
# Input to export snapshot for vSphere virtual machine.
input VsphereVmExportSnapshotV2Input {
  # Required. Configuration for the Export request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an export using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an export using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT export that uses the most recent time available.
  config: ExportSnapshotJobConfigV2Input!

  # Required. ID of a VM.
  id: String!
}
# Supported in Rubrik CDM version 9.0 and later.
input VsphereVmExportSnapshotV3Input {
  # Required. Configuration for the export request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an export using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an export using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT export that uses the most recent time available.
  config: ExportSnapshotJobConfigV3Input!

  # Required. Virtual machine ID.
  id: String!
}
# Input to download and export vSphere snapshot from archival.
input VsphereVmExportSnapshotWithDownloadFromCloudInput {
  # Required. Configuration for the export request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an export using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an export using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT export that uses the most recent time available.
  config: ExportSnapshotJobConfigV2Input!

  # Required. ID of a VM.
  id: String!
}
# Input for batch instant recovery for vSphere.
input VsphereVmInitiateBatchInstantRecoveryInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. An array of configuration objects. Each object includes an identifier for the virtual machine, an identifier for the snapshot of the virtual machine, and the configuration for the virtual machine snapshot for Instant Recovery.
  config: BatchInstantRecoveryJobConfigInput!
}
# Input for live mounting multiple vSphere snapshots.
input VsphereVmInitiateBatchLiveMountV2Input {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. Configuration object containing an array of virtual machine IDs, providing a way to indicate the selected snapshot and the mount configurations.
  config: BatchMountSnapshotJobConfigV2Input!
}
# Input for creating vSphere disk mount.
input VsphereVmInitiateDiskMountInput {
  # Required. Configuration for the mount request.
  config: MountDiskJobConfigInput!

  # Required. ID of a snapshot.
  id: String!
}
# Input for in place recovery for vSphere virtual machine.
input VsphereVmInitiateInPlaceRecoveryInput {
  # Required. Configuration for the in-place recovery request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an in-place recovery using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an in-place recovery using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT in-place recovery that uses the most recent time available.
  config: InPlaceRecoveryJobConfigV2Input!

  # Required. ID of a VM.
  id: String!
}
# Input for instant recovery for vSphere virtual machine.
input VsphereVmInitiateInstantRecoveryV2Input {
  # Required. Configuration for the Instant Recovery request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers an instant recovery using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers an instant recovery using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT instant recovery that uses the most recent time or snapshot available.
  config: InstantRecoveryJobConfigV2Input!

  # Required. ID of a VM.
  id: String!
}
# Input to initiate live mount of vSphere snapshot.
input VsphereVmInitiateLiveMountV2Input {
  # Configuration for the Live Mount request, including timestamp and snapshot ID fields. When the snapshot ID is passed without a timestamp, this endpoint triggers a live mount using the given snapshot ID. When this endpoint is passed a recovery point or a recovery point and snapshot ID, the endpoint triggers a live mount using the point in time (PIT) for recovery. Calling this endpoint without a recovery point or a snapshot ID triggers a PIT live mount that uses the most recent time or snapshot available.
  config: MountSnapshotJobConfigV2Input

  # Required. ID of a VM.
  id: String!
}
# Input for getting all datastores for ESXi host.
input VsphereVmListEsxiDatastoresInput {
  # Required. UUID used to identify the cluster the request goes to.
  clusterUuid: String!

  # Required. 
  loginInfo: VsphereLoginInfoInput!
}
# Supported in v5.0+
type VsphereVmListEsxiDatastoresReply {
  # Supported in v5.0+
  # List of matching objects.
  data: [Datastore!]!

  # Supported in v5.0+
  # If there is more.
  hasMore: Boolean

  # Supported in v5.0+
  # Total list responses.
  total: Long

  # Supported in v9.0+
  # v9.0: Cursor to fetch the next set of results.
  # v9.1+: Cursor to retrieve the next set of results.
  nextCursor: String
}
# Input for relocating vSphere mount.
input VsphereVmMountRelocateInput {
  # Required. Configuration for the RelocateMount request to another data store.
  config: RelocateMountConfigInput!

  # Required. ID of the live mount.
  id: String!
}
# Supported in Rubrik CDM version 9.0 and later. Input for relocating vSphere mount.
input VsphereVmMountRelocateV2Input {
  # Required. Configuration for the RelocateMount request to another datastore or datastore cluster.
  config: RelocateMountConfigV2Input!

  # Required. ID of the Live Mount.
  id: String!
}
# Input for powering vSphere mount on/off.
input VsphereVmPowerOnOffLiveMountInput {
  # Required. Power state configuration.
  config: UpdateMountConfigInput!

  # Required. ID of a Live Mount.
  id: String!
}
# Supported in v5.0+
type VsphereVmPowerOnOffLiveMountReply {
  # Supported in v5.0+
  # The power status of the mounted VM(ON,OFF,SLEEP etc.).
  powerStatus: String

  # Supported in v7.0+
  # The IP address of the NFS share.
  nasIp: String

  # Summary information about vSphere mount.
  vmwareVmMountSummaryV1: VmwareVmMountSummaryV1
}
# Input for recovering files from snapshot.
input VsphereVmRecoverFilesInput {
  # Corresponds to snapshot forever UUID.
  snapshotFid: UUID!

  # Virtual machine restore parameters.
  restoreConfig: RestoreConfig!
}
# Input for recovering files from snapshot.
input VsphereVmRecoverFilesNewInput {
  # ID of a snapshot.
  id: String!

  # UUID used to identify the cluster the request goes to.
  clusterUuid: UUID!

  # Required. Configuration for the restore request.
  config: RestoreFilesJobConfigInput!

  # An object providing the parameters for the recovery of a snapshot and a next snapshot delta.
  deltaRequest: DeltaRecoveryInput
}
# Input to register Rubrik Backup Agent.
input VsphereVmRegisterAgentInput {
  # Required. ID assigned to a virtual machine object.
  id: String!
}
# Input for warm search cache for an O365 workload.
input WarmSearchCacheInput {
  # The fid for the workload.
  workloadFid: UUID!
}
# Supported in v5.2+
input WebServerCertificatePayloadInput {
  # Required. Supported in v5.2+
  # ID assigned to the imported certificate object.
  certificateId: String!
}
# A webhook configuration in the account.
type Webhook {
  # The webhook's unique id.
  id: Int!

  # The webhook's name.
  name: String!

  # The user who created the webhook.
  createdBy: String!

  # A description of this webhook.
  description: String

  # The timestamp that this webhook was created at.
  createdAt: DateTime

  # The timestamp that this webhook was updated at.
  updatedAt: DateTime

  # The Webhook server certificate that Rubrik uses to establish a TLS connection with the endpoint.
  serverCertificate: String

  # The authentication type that the endpoint uses.
  authType: AuthenticationType!

  # The ID of the service account attached to the webhook.
  serviceAccountId: String

  # The URL endpoint that will receive the webhook.
  url: URL!

  # The application that will receive the webhook.
  providerType: ProviderType!

  # Specifies whether the webhook is enabled or not.
  status: WebhookStatus!

  # The event and audit severities that the webhook is subscribed to.
  subscriptionSeverity: SubscriptionSeverity!

  # The event and audit types that the webhook is subscribed to.
  subscriptionType: SubscriptionType!

  # The information describing the webhook's most recent error.
  lastFailedErrorInfo: ErrorInfo
}
# Paginated list of Webhook objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type WebhookConnection {
  # List of Webhook objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [WebhookEdge!]!

  # List of Webhook objects.
  nodes: [Webhook!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of Webhook objects matching the request arguments.
  count: Int!
}
# Wrapper around the Webhook object. This wrapper is used for pagination.
type WebhookEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual Webhook object wrapped by this edge.
  node: Webhook!
}
# Enum representing the webhook status.
enum WebhookStatus {
  # The webhook was turned off by the system.
  AUTO_DISABLED

  # The webhook is not enabled.
  DISABLED

  # The webhook is enabled.
  ENABLED

  # Unused default value.
  WEBHOOK_STATUS_UNSPECIFIED
}
# Specifies the day of the week.
enum WeekDay {
  # Day of week is not specified.
  DAY_OF_WEEK_UNSPECIFIED

  # Indicates Friday.
  FRIDAY

  # Indicates Monday.
  MONDAY

  # Indicates Saturday.
  SATURDAY

  # Indicates Sunday.
  SUNDAY

  # Indicates Thursday.
  THURSDAY

  # Indicates Tuesday.
  TUESDAY

  # Indicates Wednesday.
  WEDNESDAY
}
# A weekly recurrence pattern (e.g. Every other Monday).
type WeeklyRecurrencePattern {
  # The interval at which the recurrence applies.
  interval: Int!

  # Which days of the week the event occurs.
  daysOfWeek: [String!]!

  # E.g. Monday.
  firstDayOfWeek: String!
}
# Weekly snapshot schedule.
type WeeklySnapshotSchedule {
  # Basic weekly snapshot schedule.
  basicSchedule: BasicSnapshotSchedule

  # Day of the week.
  dayOfWeek: DayOfWeek!
}
# Weekly snapshot schedule.
input WeeklySnapshotScheduleInput {
  # Basic weekly snapshot schedule.
  basicSchedule: BasicSnapshotScheduleInput

  # Day of the week.
  dayOfWeek: DayOfWeek = MONDAY
}
enum WhitelistModeEnum {
  ALL_USERS
  LOCAL_USERS
}
type WhitelistedAnalyzer {
  whitelistedAnalyzerId: String!
  isExplicit: Boolean!
  whitelistedPath: String!
}
# Windows Failover cluster.
type WindowsCluster implements HierarchyObject , CdmHierarchyObject , MssqlTopLevelDescendantType {
  # The list of hosts associated with a Windows Cluster.
  hosts: [PhysicalHost!]!

  # List of descendants.
  descendantConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): WindowsClusterDescendantTypeConnection!

  # List of logical children.
  logicalChildConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Sort hierarchy objects by hierarchy field.
    sortBy: HierarchySortByField,

    # Sorting order for the results.
    sortOrder: SortOrder,

    # Types of objects to include.
    typeFilter: [HierarchyObjectTypeEnum!],

    # The hierarchy object filter.
    filter: [Filter!],

    # Each enumeration value represents the hierarchy of a specific workload type for RBAC and SLA Domain assignments. The None value represents the hierarchy of all workload types.
    workloadHierarchy: WorkloadLevelHierarchy): WindowsClusterLogicalChildTypeConnection!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!
}
# Windows Failover cluster descendant.
interface WindowsClusterDescendantType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of WindowsClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type WindowsClusterDescendantTypeConnection {
  # List of WindowsClusterDescendantType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [WindowsClusterDescendantTypeEdge!]!

  # List of WindowsClusterDescendantType objects.
  nodes: [WindowsClusterDescendantType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of WindowsClusterDescendantType objects matching the request arguments.
  count: Int!
}
# Wrapper around the WindowsClusterDescendantType object. This wrapper is used for pagination.
type WindowsClusterDescendantTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual WindowsClusterDescendantType object wrapped by this edge.
  node: WindowsClusterDescendantType!
}
# Windows Failover cluster logical child.
interface WindowsClusterLogicalChildType {
  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!
}
# Paginated list of WindowsClusterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type WindowsClusterLogicalChildTypeConnection {
  # List of WindowsClusterLogicalChildType objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [WindowsClusterLogicalChildTypeEdge!]!

  # List of WindowsClusterLogicalChildType objects.
  nodes: [WindowsClusterLogicalChildType!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of WindowsClusterLogicalChildType objects matching the request arguments.
  count: Int!
}
# Wrapper around the WindowsClusterLogicalChildType object. This wrapper is used for pagination.
type WindowsClusterLogicalChildTypeEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual WindowsClusterLogicalChildType object wrapped by this edge.
  node: WindowsClusterLogicalChildType!
}
# Windows fileset.
type WindowsFileset implements CdmHierarchyObject , CdmHierarchySnappableNew , HierarchyObject , HierarchySnappable , PhysicalHostDescendantType , PhysicalHostPhysicalChildType , HostFailoverClusterDescendantType , HostFailoverClusterPhysicalChildType , FailoverClusterAppDescendantType , FailoverClusterAppPhysicalChildType , FailoverClusterTopLevelDescendantType , FilesetTemplateDescendantType , FilesetTemplatePhysicalChildType {
  # ID of the CDM cluster.
  cdmId: String!

  # List of paths included in the fileset.
  pathIncluded: [String!]!

  # List of paths excluded from fileset.
  pathExcluded: [String!]!

  # List of paths excluded in the fileset.
  pathExceptions: [String!]!

  # Boolean variable denoting if fileset is relic.
  isRelic: Boolean!

  # Boolean variable denoting if this is a NAS Direct Archive fileset.
  isPassThrough: Boolean!

  # Boolean variable denoting if symlink resolution is enabled.
  symlinkResolutionEnabled: Boolean!

  # Boolean variable denoting if hard link support is enabled.
  hardlinkSupportEnabled: Boolean!

  # Host of Windows fileset.
  host: PhysicalHost

  # Includes statistics for the protected objects, for example, archive storage.
  reportWorkload: Snappable

  # Fileset template of the Windows fileset.
  filesetTemplate: FilesetTemplate

  # Failover Rubrik cluster app.
  failoverClusterApp: FailoverClusterApp

  # Rubrik cluster where this object originated.
  cluster: Cluster!

  # The source cluster of this object. Returned as a data location because there is no guarantee that Rubrik has knowledge about the source cluster.
  primaryClusterLocation: DataLocation!

  # SLA Domain assignment of the object during the process of being communicated over to Rubrik CDM.
  pendingSla: SlaDomain

  # Mapping from object ID to pending object deletion status.
  pendingObjectDeletionStatus: PendingSnapshotsOfObjectDeletion

  # Objects either replicated by this object or related to this object by replication.
  replicatedObjects: [CdmHierarchyObject!]!

  # Latest user note information.
  latestUserNote: LatestUserNote

  # The number of objects either replicated by this object or related to this object by replication.
  replicatedObjectCount: Int!

  # The authorized operations on the object.
  authorizedOperations: [Operation!]!

  # The FID of the hierarchy object.
  id: UUID!

  # The name of the hierarchy object.
  name: String!

  # The type of this object.
  objectType: HierarchyObjectTypeEnum!

  # The SLA Domain assignment type for this object.
  slaAssignment: SlaAssignmentTypeEnum!

  # The effective SLA Domain of the hierarchy object.
  effectiveSlaDomain: SlaDomain!

  # The pause status of the effective SLA Domain of the hierarchy object.
  slaPauseStatus: Boolean!

  # The distribution of the snapshots of the hierarchy object.
  snapshotDistribution: SnapshotDistribution!

  # The effective retention of the SLA Domain of the hierarchy object.
  effectiveRetentionSlaDomain: SlaDomain

  # The SLA Domain configured for the hierarchy object.
  configuredSlaDomain: SlaDomain!

  # The path node of the effective SLA Domain source.
  effectiveSlaSourceObject: PathNode

  # A sequential list of this object's logical ancestors.
  logicalPath: [PathNode!]!

  # A sequential list of this object's physical ancestors.
  physicalPath: [PathNode!]!

  # The number of descendant workloads of this object.
  numWorkloadDescendants: Int!

  # The organizations to which this hierarchy object belongs.
  allOrgs: [Org!]!

  # A link to view the workload on the CDM cluster. For dev use only.
  cdmLink: String!

  # The list of missed snapshots for this workload.
  missedSnapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput): MissedSnapshotCommonConnection

  # The list of missed snapshots for this workload.
  missedSnapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter missed snapshots by date.
    filter: MissedSnapshotFilterInput,

    # Group snapshots by field.
    groupBy: MissedSnapshotGroupByTime!,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0): MissedSnapshotGroupByConnection

  # The list of snapshots taken for this workload.
  snapshotConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Sorts snapshots by field.
    sortBy: CdmSnapshotSortByEnum = Date,

    # Sorting order for the results.
    sortOrder: SortOrder): CdmSnapshotConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupByConnection(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupByConnection

  # GroupBy connection for the snapshots of this workload.
  snapshotGroupBySummary(
    # Returns the first n elements from the list.
    first: Int,

    # Returns the elements in the list that come after the specified cursor.
    after: String,

    # Returns the last n elements from the list.
    last: Int,

    # Returns the elements in the list that come before the specified cursor.
    before: String,

    # Offset based on customer timezone.
    timezoneOffset: Float = 0.0,

    # Filter snapshot connection.
    filter: CdmSnapshotFilterInput,

    # Groups snapshots by field.
    groupBy: CdmSnapshotGroupByEnum!): CdmSnapshotGroupBySummaryConnection

  # The most recent indexed snapshot of this workload.
  newestIndexedSnapshot: CdmSnapshot

  # The most recent snapshot of this workload.
  newestSnapshot: CdmSnapshot

  # The oldest snapshot of this workload.
  oldestSnapshot: CdmSnapshot

  # The number of on-demand snapshots.
  onDemandSnapshotCount: Int!

  # The newest snapshot archived to AWS.
  newestArchivedSnapshot: CdmSnapshot

  # The newest snapshot replicated to a cluster.
  newestReplicatedSnapshot: CdmSnapshot
}
# Fields to sort workload anomalies.
enum WorkloadAnomaliesSortBy {
  # Sort by the number of new files created in the snapshot.
  CREATED_FILE_COUNT

  # Sort by the number of files deleted in the snapshot.
  DELETED_FILE_COUNT

  # Sort by detection time.
  DETECTION_TIME

  # Sort by encryption level of the snapshot.
  ENCRYPTION

  # Sort by the number of files modified in the snapshot.
  MODIFIED_FILE_COUNT

  # Sort by workload name.
  NAME

  # Sort by number of sensitive files.
  SENSITIVE_FILES

  # Sort by number of sensitive hits.
  SENSITIVE_HITS

  # Sort by anomaly severity.
  SEVERITY

  # Sort by snapshot date.
  SNAPSHOT_DATE

  # Sort by the number of suspicious files in the snapshot.
  SUSPICIOUS_FILE_COUNT
}
# A workload that has a snapshot or children with anomalous activity.
type WorkloadAnomaly {
  # The FID of the workload.
  workloadFid: String!

  # The Rubrik CDM ID of the workload.
  workloadId: String!

  # The name of the workload.
  workloadName: String!

  # The FID of the snapshot which was determined to have anomalous activity.
  anomalousSnapshotFid: String!

  # The Rubrik cluster ID of the snapshot determined to have anomalous activity.
  anomalousSnapshotId: String!

  # The number of files created within the snapshot.
  createdFileCount: Long!

  # The number of files deleted within the snapshot.
  deletedFileCount: Long!

  # The number of files modified within the snapshot.
  modifiedFileCount: Long!

  # The number of suspicious files within the snapshot.
  suspiciousFileCount: Long!

  # The level of encryption detected within the snapshot.
  encryption: EncryptionLevel!

  # A list of children belonging to the workload. These children were also
  # determined to have snapshots with anomalous activity.
  anomalousChildren: [WorkloadAnomaly!]!

  # The total number of children belong to the workload, regardless
  # of whether or not they have snapshots containing anomalous activity.
  totalChildren: Long!

  # Represents the information about strains that cause anomalies.
  anomalyInfo: AnomalyInfo

  # The FID of the snapshot taken before the snapshot that was determined
  # to have anomalous activity.
  previousSnapshotFid: String!

  # Type of the anomaly detected.
  anomalyType: AnomalyType!

  # Time when the anomaly was detected.
  detectionTime: DateTime

  # Identifies the anomaly for a given workload.
  anomalyId: String!

  # The object type of the workload.
  objectType: HierarchyObjectTypeEnum!

  # The creation date of the snapshot determined to have anomalous activity.
  anomalousSnapshotDate: DateTime!

  # The Rubrik cluster associated with the workload.
  cluster: Cluster!

  # The location of the workload.
  location: SnappableLocationType!

  # The Data Discovery results of the snapshot before the occurrence of the anomaly in the workload.
  previousPolicyObj: PolicyObj

  # Severity of the anomaly event.
  severity: ActivitySeverityEnum!
}
# Paginated list of WorkloadAnomaly objects. Each page of the results will include at most 1000 entries. Query the `pageInfo.hasNextPage` field to know whether all objects were returned.
type WorkloadAnomalyConnection {
  # List of WorkloadAnomaly objects with additional pagination information. Use `nodes` if per-object cursors are not needed.
  edges: [WorkloadAnomalyEdge!]!

  # List of WorkloadAnomaly objects.
  nodes: [WorkloadAnomaly!]!

  # General information about this page of results.
  pageInfo: PageInfo!

  # Total number of WorkloadAnomaly objects matching the request arguments.
  count: Int!

  # Aggregation values calculated across all results.
  aggregation: AggregatedValues!
}
# Wrapper around the WorkloadAnomaly object. This wrapper is used for pagination.
type WorkloadAnomalyEdge {
  # String used to identify this edge.
  cursor: String!

  # The actual WorkloadAnomaly object wrapped by this edge.
  node: WorkloadAnomaly!
}
# Workload fields returned by browse or search delta response.
type WorkloadFields {
  # Microsoft Office 365 file or folder data returned by browse or search delta response.
  o365Item: O365SnapshotItemInfo
}
# The workload fields in BrowseSnapshotFileDelta request.
input WorkloadFieldsInput {
  # Microsoft Office 365 Onedrive fields in BrowseSnapshotFileDelta request.
  o365FileDelta: O365SnapshotFileDeltaInput

  # Microsoft Office 365 Sharepoint fields in BrowseSnapshotFileDelta request.
  o365SharepointDelta: O365SharepointSnapshotFileDeltaInput
}
# Maps an object to targeted snapshots for the threat hunt.
type WorkloadIdToSnapshotIds {
  # Object ID.
  objectId: String!

  # Snapshot IDs.
  snapshotIds: [String!]!

  # Timestamps for the snapshots selected for threat hunt.
  snapshotTimestamps: [DateTime!]!
}
enum WorkloadLevelHierarchy {
  # AWS native S3 Bucket.
  AWS_NATIVE_S3_BUCKET

  # Azure AD Directory.
  AZURE_AD_DIRECTORY

  # Azure storage account.
  AZURE_STORAGE_ACCOUNT
  AllSubHierarchyType
  AwsNativeEbsVolume
  AwsNativeEc2Instance
  AwsNativeRdsInstance
  AzureNativeManagedDisk
  AzureNativeVirtualMachine
  AzureSqlDatabaseDb
  AzureSqlManagedInstanceDb
  GcpNativeGCEInstance
  KuprNamespace
  O365Mailbox
  O365Onedrive
  O365SharePointDrive
  O365SharePointList
  O365Site
  O365Teams
}
# Location of the workload.
type WorkloadLocation {
  # Workload location.
  location: String!
}
# Details of an organization associated with a workload.
type WorkloadOrganization {
  # Name of the organization.
  name: String!

  # Full Name of the organization.
  fullName: String!

  # ID of the organization.
  id: UUID!
}
# Workload recovery info.
type WorkloadRecoveryInfo {
  # Whether snapshot metadata refresh is in progress.
  isRefreshInProgressOpt: Boolean

  # Recovery infomation update time.
  lastUpdatedTimeOpt: DateTime

  # Reader location ID.
  locationId: String!

  # Newly assigned data source ID.
  newWorkloadId: String!

  # Original data source ID.
  oldWorkloadId: String!
}
# Details of the setup for performing backups for various object types.
type WorkloadTypeToBackupSetupSpecs {
  # The object type.
  snappableType: WorkloadLevelHierarchy!

  # The object from where the setup specification is inherited.
  setupSourceObject: PathNode!
}
# Supported in v6.0+
type YARAMatchDetail {
  # Required. Supported in v6.0+
  # The name of the matching YARA rule.
  name: String!

  # Required. Supported in v6.0+
  # Optional YARA tags https://yara.readthedocs.io/en/latest/writingrules.html#rule-tags.
  tags: [String!]!
}
# Yearly snapshot schedule.
type YearlySnapshotSchedule {
  # Basic yearly snapshot schedule.
  basicSchedule: BasicSnapshotSchedule

  # Day of the Year.
  dayOfYear: DayOfYear!

  # Starting month of year.
  yearStartMonth: Month!
}
# Yearly snapshot schedule.
input YearlySnapshotScheduleInput {
  # Basic yearly snapshot schedule.
  basicSchedule: BasicSnapshotScheduleInput

  # Day of the Year.
  dayOfYear: DayOfYear = FIRST_DAY

  # Starting month of year.
  yearStartMonth: Month = JANUARY
}
# Zeus database ids.
type ZeusDatabaseIds {
  # List of database ids used by Zeus.
  ids: [String!]!
}
# Represents the availability of Zone Redundancy for a given servicetier, region and subscription combination.
type ZrsAvailabilityReply {
  # The value representing the availability.
  isAvailable: Boolean!
}
type clusterState {
  # Connected status of the Rubrik CDM cluster.
  connectedState: ClusterStatus!

  # The removal status of the Rubrik CDM cluster.
  clusterRemovalState: ClusterRemovalState!

  # Cluster removal job creation time.
  clusterRemovalCreatedAt: DateTime

  # Cluster removal job update time.
  clusterRemovalUpdatedAt: DateTime
}
# Cluster metric data grouped by a time unit.
type metricTimeSeries {
  # The time groupby info.
  timeInfo: ClusterMetricGroupByInfo!

  # The Rubrik cluster metric data for the specified time period.
  metric: ClusterMetric!
}
type pendingAction {
  description: String!
  actionType: PendingActionType
  pendingActionId: String!
  clusterUuid: String!
  status: PendingActionStatus!
  createdAt: DateTime
  updatedAt: DateTime
  info: String!
  actionTypeStr: String!
}
